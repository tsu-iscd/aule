{%- macro generate(classes) -%}


import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.Map;

/**
* To override this class, you must override every createClass(JsonElement je) method.
* The easiest way to do it is to call create(JsonElement je, Type class) method
* example:
* @Override
* public Object createClass(JsonElement je){
*   return create(je, MyClass.class);
* }
* With MyClass you must override Class.
*
*/
public abstract class Decoder{

    private Gson gson;

    public Decoder(){
        gson = new Gson();
    }

    public Map<String, Object> fromJson(String jsonString) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException {
        JsonArray jsonArray = new JsonParser()
                .parse(jsonString)
                .getAsJsonObject()
                .get("entities")
                .getAsJsonArray();
        Map<String, Object> objects = new HashMap<String, Object>();
        for(JsonElement element : jsonArray){
            String str = element.getAsJsonObject().get("type").getAsString();
            {% filter  indent(12, True) -%}
            Object currentObject = null;
            {% for cls in classes -%}
                {{ cls.name | gen_block_for_cls ~ '\n'}}
            {% endfor %}
            {% endfilter %}

            String id = (String) currentObject.getClass().getMethod("id").invoke(currentObject);
            objects.put(id, currentObject);
        }
        return objects;
    }

    {% filter  indent(4, True) -%}
    {% for cls in classes -%}
        {{ cls.name | gen_class_function ~ '\n' }}
    {% endfor %}
    {% endfilter %}

    public Object create(JsonElement je, Type type){
        return gson.fromJson(je, type);
    }
}


{%- endmacro -%}

{{ generate(classes) }}