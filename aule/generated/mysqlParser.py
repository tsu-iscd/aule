# Generated from mysqlParser.g4 by ANTLR 4.7
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u03cc")
        buf.write("\u16eb\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc")
        buf.write("\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf")
        buf.write("\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3")
        buf.write("\t\u00c3\4\u00c4\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6")
        buf.write("\4\u00c7\t\u00c7\4\u00c8\t\u00c8\4\u00c9\t\u00c9\4\u00ca")
        buf.write("\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd\t\u00cd")
        buf.write("\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1")
        buf.write("\t\u00d1\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4")
        buf.write("\4\u00d5\t\u00d5\4\u00d6\t\u00d6\4\u00d7\t\u00d7\4\u00d8")
        buf.write("\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da\4\u00db\t\u00db")
        buf.write("\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df")
        buf.write("\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2")
        buf.write("\4\u00e3\t\u00e3\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6")
        buf.write("\t\u00e6\4\u00e7\t\u00e7\4\u00e8\t\u00e8\4\u00e9\t\u00e9")
        buf.write("\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec\4\u00ed")
        buf.write("\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0")
        buf.write("\4\u00f1\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4")
        buf.write("\t\u00f4\4\u00f5\t\u00f5\4\u00f6\t\u00f6\4\u00f7\t\u00f7")
        buf.write("\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa\t\u00fa\4\u00fb")
        buf.write("\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe")
        buf.write("\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102")
        buf.write("\t\u0102\4\u0103\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105")
        buf.write("\4\u0106\t\u0106\4\u0107\t\u0107\4\u0108\t\u0108\4\u0109")
        buf.write("\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c\t\u010c")
        buf.write("\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110")
        buf.write("\t\u0110\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113")
        buf.write("\4\u0114\t\u0114\4\u0115\t\u0115\4\u0116\t\u0116\4\u0117")
        buf.write("\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119\4\u011a\t\u011a")
        buf.write("\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e")
        buf.write("\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121")
        buf.write("\4\u0122\t\u0122\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125")
        buf.write("\t\u0125\4\u0126\t\u0126\4\u0127\t\u0127\4\u0128\t\u0128")
        buf.write("\4\u0129\t\u0129\3\2\5\2\u0254\n\2\3\2\3\2\5\2\u0258\n")
        buf.write("\2\3\2\3\2\3\3\3\3\3\3\5\3\u025f\n\3\3\3\3\3\3\3\7\3\u0264")
        buf.write("\n\3\f\3\16\3\u0267\13\3\3\3\3\3\3\3\5\3\u026c\n\3\3\3")
        buf.write("\5\3\u026f\n\3\3\3\5\3\u0272\n\3\3\4\3\4\3\4\3\4\3\4\3")
        buf.write("\4\3\4\5\4\u027b\n\4\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6\3")
        buf.write("\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6")
        buf.write("\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3")
        buf.write("\6\3\6\5\6\u02a2\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write("\7\3\7\5\7\u02ae\n\7\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3")
        buf.write("\b\5\b\u02b9\n\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3")
        buf.write("\t\3\t\3\t\3\t\3\t\3\t\5\t\u02ca\n\t\3\n\3\n\3\n\5\n\u02cf")
        buf.write("\n\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\5\13\u02db\n\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3")
        buf.write("\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f")
        buf.write("\3\f\3\f\5\f\u02f6\n\f\3\r\3\r\3\r\3\r\5\r\u02fc\n\r\3")
        buf.write("\16\3\16\3\16\5\16\u0301\n\16\3\16\3\16\7\16\u0305\n\16")
        buf.write("\f\16\16\16\u0308\13\16\3\17\3\17\5\17\u030c\n\17\3\17")
        buf.write("\3\17\5\17\u0310\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3")
        buf.write("\17\5\17\u0319\n\17\3\17\5\17\u031c\n\17\3\17\5\17\u031f")
        buf.write("\n\17\3\17\3\17\5\17\u0323\n\17\3\17\3\17\3\17\3\20\3")
        buf.write("\20\5\20\u032a\n\20\3\20\5\20\u032d\n\20\3\20\3\20\3\20")
        buf.write("\5\20\u0332\n\20\3\20\3\20\3\20\3\20\7\20\u0338\n\20\f")
        buf.write("\20\16\20\u033b\13\20\3\20\3\20\5\20\u033f\n\20\3\20\3")
        buf.write("\20\3\20\5\20\u0344\n\20\3\20\5\20\u0347\n\20\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u0352\n\21\3")
        buf.write("\21\5\21\u0355\n\21\3\21\3\21\5\21\u0359\n\21\3\21\5\21")
        buf.write("\u035c\n\21\3\21\3\21\5\21\u0360\n\21\3\21\5\21\u0363")
        buf.write("\n\21\3\21\3\21\5\21\u0367\n\21\3\21\5\21\u036a\n\21\3")
        buf.write("\21\5\21\u036d\n\21\3\21\3\21\5\21\u0371\n\21\3\21\5\21")
        buf.write("\u0374\n\21\3\21\3\21\5\21\u0378\n\21\3\21\3\21\3\22\3")
        buf.write("\22\5\22\u037e\n\22\3\22\3\22\3\22\3\22\5\22\u0384\n\22")
        buf.write("\3\22\3\22\7\22\u0388\n\22\f\22\16\22\u038b\13\22\3\22")
        buf.write("\3\22\7\22\u038f\n\22\f\22\16\22\u0392\13\22\3\22\3\22")
        buf.write("\3\23\3\23\5\23\u0398\n\23\3\23\3\23\3\23\3\23\5\23\u039e")
        buf.write("\n\23\3\23\3\23\7\23\u03a2\n\23\f\23\16\23\u03a5\13\23")
        buf.write("\3\23\3\23\3\23\3\23\7\23\u03ab\n\23\f\23\16\23\u03ae")
        buf.write("\13\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3")
        buf.write("\24\3\24\3\24\3\24\3\24\7\24\u03be\n\24\f\24\16\24\u03c1")
        buf.write("\13\24\3\24\3\24\3\25\3\25\5\25\u03c7\n\25\3\25\3\25\5")
        buf.write("\25\u03cb\n\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25")
        buf.write("\5\25\u03d5\n\25\3\25\3\25\5\25\u03d9\n\25\3\25\3\25\5")
        buf.write("\25\u03dd\n\25\3\25\3\25\3\25\3\25\5\25\u03e3\n\25\3\25")
        buf.write("\7\25\u03e6\n\25\f\25\16\25\u03e9\13\25\5\25\u03eb\n\25")
        buf.write("\3\25\5\25\u03ee\n\25\3\25\5\25\u03f1\n\25\3\25\5\25\u03f4")
        buf.write("\n\25\3\25\3\25\3\25\3\25\5\25\u03fa\n\25\3\25\3\25\5")
        buf.write("\25\u03fe\n\25\3\25\3\25\3\25\3\25\5\25\u0404\n\25\3\25")
        buf.write("\7\25\u0407\n\25\f\25\16\25\u040a\13\25\5\25\u040c\n\25")
        buf.write("\3\25\5\25\u040f\n\25\5\25\u0411\n\25\3\26\3\26\3\26\3")
        buf.write("\26\3\26\3\26\3\26\3\26\3\26\5\26\u041c\n\26\3\26\3\26")
        buf.write("\5\26\u0420\n\26\3\26\5\26\u0423\n\26\3\27\3\27\3\27\3")
        buf.write("\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u0431")
        buf.write("\n\27\3\27\5\27\u0434\n\27\3\27\3\27\5\27\u0438\n\27\3")
        buf.write("\27\5\27\u043b\n\27\3\27\3\27\5\27\u043f\n\27\3\27\5\27")
        buf.write("\u0442\n\27\3\27\3\27\5\27\u0446\n\27\3\27\5\27\u0449")
        buf.write("\n\27\3\27\3\27\5\27\u044d\n\27\3\27\5\27\u0450\n\27\3")
        buf.write("\27\5\27\u0453\n\27\3\27\3\27\5\27\u0457\n\27\3\27\5\27")
        buf.write("\u045a\n\27\3\27\3\27\5\27\u045e\n\27\3\27\3\27\3\30\3")
        buf.write("\30\5\30\u0464\n\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\5\30\u0471\n\30\3\30\3\30\3\31\3")
        buf.write("\31\3\31\5\31\u0478\n\31\3\31\3\31\3\31\5\31\u047d\n\31")
        buf.write("\3\31\5\31\u0480\n\31\3\31\3\31\3\31\5\31\u0485\n\31\3")
        buf.write("\31\3\31\3\31\3\31\3\31\3\31\5\31\u048d\n\31\3\31\3\31")
        buf.write("\3\31\3\31\5\31\u0493\n\31\3\31\3\31\5\31\u0497\n\31\3")
        buf.write("\32\5\32\u049a\n\32\3\32\3\32\3\32\5\32\u049f\n\32\3\32")
        buf.write("\3\32\5\32\u04a3\n\32\3\32\3\32\5\32\u04a7\n\32\3\32\5")
        buf.write("\32\u04aa\n\32\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u04b2")
        buf.write("\n\33\5\33\u04b4\n\33\3\34\3\34\3\34\7\34\u04b9\n\34\f")
        buf.write("\34\16\34\u04bc\13\34\3\34\3\34\3\34\5\34\u04c1\n\34\3")
        buf.write("\34\3\34\3\34\3\34\7\34\u04c7\n\34\f\34\16\34\u04ca\13")
        buf.write("\34\5\34\u04cc\n\34\3\34\3\34\3\34\7\34\u04d1\n\34\f\34")
        buf.write("\16\34\u04d4\13\34\5\34\u04d6\n\34\5\34\u04d8\n\34\3\35")
        buf.write("\3\35\3\35\3\35\5\35\u04de\n\35\3\36\3\36\3\36\3\36\5")
        buf.write("\36\u04e4\n\36\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3\37")
        buf.write("\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u04f5\n\37\3")
        buf.write(" \3 \3 \3 \3 \5 \u04fc\n \3!\3!\3!\3\"\3\"\5\"\u0503\n")
        buf.write("\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u050c\n\"\3#\3#\3#")
        buf.write("\3#\3$\3$\3$\3%\3%\3%\3%\3%\5%\u051a\n%\3%\3%\3%\3%\3")
        buf.write("%\3%\3%\3%\3%\3%\3%\5%\u0527\n%\3%\3%\3%\5%\u052c\n%\3")
        buf.write("&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u053c\n&\3")
        buf.write("\'\3\'\3\'\3\'\7\'\u0542\n\'\f\'\16\'\u0545\13\'\3\'\3")
        buf.write("\'\3(\3(\3(\3(\3(\5(\u054e\n(\3)\3)\7)\u0552\n)\f)\16")
        buf.write(")\u0555\13)\3*\3*\3*\3*\3*\5*\u055c\n*\3*\3*\3*\5*\u0561")
        buf.write("\n*\3*\3*\3*\3*\3*\3*\3*\5*\u056a\n*\3+\3+\5+\u056e\n")
        buf.write("+\5+\u0570\n+\3+\3+\3+\5+\u0575\n+\3+\3+\7+\u0579\n+\f")
        buf.write("+\16+\u057c\13+\3+\3+\5+\u0580\n+\5+\u0582\n+\3+\3+\5")
        buf.write("+\u0586\n+\3+\5+\u0589\n+\3+\5+\u058c\n+\3+\3+\7+\u0590")
        buf.write("\n+\f+\16+\u0593\13+\3+\3+\5+\u0597\n+\5+\u0599\n+\3+")
        buf.write("\3+\3+\5+\u059e\n+\3+\3+\3+\3+\3+\3+\3+\3+\5+\u05a8\n")
        buf.write("+\3,\3,\3,\3,\3,\5,\u05af\n,\3,\5,\u05b2\n,\3-\3-\3-\3")
        buf.write("-\3-\3-\5-\u05ba\n-\3-\3-\3-\3-\3-\3-\5-\u05c2\n-\5-\u05c4")
        buf.write("\n-\3.\3.\3.\3.\3.\3.\5.\u05cc\n.\3/\3/\5/\u05d0\n/\3")
        buf.write("/\5/\u05d3\n/\3/\3/\7/\u05d7\n/\f/\16/\u05da\13/\3/\3")
        buf.write("/\5/\u05de\n/\3/\5/\u05e1\n/\3/\3/\7/\u05e5\n/\f/\16/")
        buf.write("\u05e8\13/\5/\u05ea\n/\3\60\3\60\5\60\u05ee\n\60\3\60")
        buf.write("\3\60\3\60\5\60\u05f3\n\60\3\60\3\60\3\60\5\60\u05f8\n")
        buf.write("\60\3\60\3\60\5\60\u05fc\n\60\3\60\3\60\3\60\5\60\u0601")
        buf.write("\n\60\3\60\5\60\u0604\n\60\3\60\3\60\3\60\5\60\u0609\n")
        buf.write("\60\3\60\3\60\5\60\u060d\n\60\3\60\3\60\5\60\u0611\n\60")
        buf.write("\3\60\3\60\3\60\5\60\u0616\n\60\3\60\3\60\3\60\5\60\u061b")
        buf.write("\n\60\3\60\3\60\3\60\5\60\u0620\n\60\3\60\3\60\3\60\3")
        buf.write("\60\5\60\u0626\n\60\3\60\3\60\3\60\5\60\u062b\n\60\3\60")
        buf.write("\3\60\3\60\5\60\u0630\n\60\3\60\3\60\3\60\3\60\5\60\u0636")
        buf.write("\n\60\3\60\3\60\3\60\5\60\u063b\n\60\3\60\3\60\3\60\5")
        buf.write("\60\u0640\n\60\3\60\3\60\3\60\5\60\u0645\n\60\3\60\3\60")
        buf.write("\3\60\5\60\u064a\n\60\3\60\3\60\3\60\5\60\u064f\n\60\3")
        buf.write("\60\3\60\3\60\5\60\u0654\n\60\3\60\3\60\3\60\5\60\u0659")
        buf.write("\n\60\3\60\3\60\3\60\5\60\u065e\n\60\3\60\3\60\3\60\5")
        buf.write("\60\u0663\n\60\3\60\3\60\3\60\5\60\u0668\n\60\3\60\3\60")
        buf.write("\3\60\3\60\5\60\u066e\n\60\3\60\3\60\5\60\u0672\n\60\3")
        buf.write("\60\3\60\3\60\3\60\7\60\u0678\n\60\f\60\16\60\u067b\13")
        buf.write("\60\3\60\3\60\5\60\u067f\n\60\3\61\3\61\3\61\3\62\3\62")
        buf.write("\3\62\3\62\3\62\5\62\u0689\n\62\3\62\3\62\3\62\3\62\3")
        buf.write("\62\5\62\u0690\n\62\5\62\u0692\n\62\3\62\3\62\3\62\3\62")
        buf.write("\7\62\u0698\n\62\f\62\16\62\u069b\13\62\3\62\3\62\5\62")
        buf.write("\u069f\n\62\3\63\5\63\u06a2\n\63\3\63\3\63\3\63\3\63\3")
        buf.write("\63\3\63\5\63\u06aa\n\63\3\63\3\63\3\63\3\63\5\63\u06b0")
        buf.write("\n\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\5\63\u06c0\n\63\3\63\3\63\3\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u06cc\n\63\5\63")
        buf.write("\u06ce\n\63\3\64\5\64\u06d1\n\64\3\64\3\64\3\64\3\64\3")
        buf.write("\64\3\64\5\64\u06d9\n\64\3\64\3\64\3\64\3\64\5\64\u06df")
        buf.write("\n\64\3\64\3\64\3\64\3\64\5\64\u06e5\n\64\3\65\3\65\3")
        buf.write("\65\3\65\3\65\3\65\3\65\3\65\5\65\u06ef\n\65\3\65\3\65")
        buf.write("\3\65\5\65\u06f4\n\65\3\65\7\65\u06f7\n\65\f\65\16\65")
        buf.write("\u06fa\13\65\3\65\3\65\3\65\7\65\u06ff\n\65\f\65\16\65")
        buf.write("\u0702\13\65\5\65\u0704\n\65\3\65\3\65\3\65\3\65\3\65")
        buf.write("\3\65\3\65\3\65\7\65\u070e\n\65\f\65\16\65\u0711\13\65")
        buf.write("\3\65\3\65\3\65\7\65\u0716\n\65\f\65\16\65\u0719\13\65")
        buf.write("\5\65\u071b\n\65\3\65\3\65\3\65\7\65\u0720\n\65\f\65\16")
        buf.write("\65\u0723\13\65\3\65\3\65\3\65\7\65\u0728\n\65\f\65\16")
        buf.write("\65\u072b\13\65\5\65\u072d\n\65\5\65\u072f\n\65\3\66\3")
        buf.write("\66\3\66\7\66\u0734\n\66\f\66\16\66\u0737\13\66\3\67\5")
        buf.write("\67\u073a\n\67\3\67\3\67\5\67\u073e\n\67\3\67\3\67\3\67")
        buf.write("\5\67\u0743\n\67\3\67\3\67\3\67\3\67\5\67\u0749\n\67\3")
        buf.write("\67\3\67\3\67\3\67\5\67\u074f\n\67\3\67\3\67\3\67\5\67")
        buf.write("\u0754\n\67\3\67\3\67\3\67\5\67\u0759\n\67\3\67\3\67\3")
        buf.write("\67\5\67\u075e\n\67\3\67\3\67\3\67\5\67\u0763\n\67\3\67")
        buf.write("\5\67\u0766\n\67\38\38\38\58\u076b\n8\38\68\u076e\n8\r")
        buf.write("8\168\u076f\38\38\38\38\38\38\38\38\58\u077a\n8\39\39")
        buf.write("\59\u077e\n9\39\39\39\39\39\59\u0785\n9\39\39\39\59\u078a")
        buf.write("\n9\39\59\u078d\n9\39\39\39\59\u0792\n9\39\59\u0795\n")
        buf.write("9\39\39\59\u0799\n9\39\39\59\u079d\n9\3:\3:\3:\3:\7:\u07a3")
        buf.write("\n:\f:\16:\u07a6\13:\3;\3;\3;\3;\3;\3;\3;\3<\3<\3<\3<")
        buf.write("\3<\3<\3<\3<\3<\5<\u07b8\n<\3<\5<\u07bb\n<\3<\5<\u07be")
        buf.write("\n<\3<\3<\5<\u07c2\n<\3<\3<\3=\3=\3=\3=\7=\u07ca\n=\f")
        buf.write("=\16=\u07cd\13=\3>\3>\3>\3>\3>\3>\3>\3>\7>\u07d7\n>\f")
        buf.write(">\16>\u07da\13>\3>\3>\3?\3?\5?\u07e0\n?\3?\5?\u07e3\n")
        buf.write("?\3?\3?\3?\3?\3?\7?\u07ea\n?\f?\16?\u07ed\13?\3?\5?\u07f0")
        buf.write("\n?\3@\3@\3@\3@\3@\3@\3@\3@\3@\5@\u07fb\n@\3@\5@\u07fe")
        buf.write("\n@\3@\3@\5@\u0802\n@\3@\3@\3A\3A\3A\3A\5A\u080a\nA\3")
        buf.write("A\5A\u080d\nA\3A\3A\3A\5A\u0812\nA\3A\3A\3A\3A\3A\3A\5")
        buf.write("A\u081a\nA\3A\3A\3A\3A\5A\u0820\nA\3A\3A\5A\u0824\nA\3")
        buf.write("B\3B\3B\5B\u0829\nB\3B\3B\3B\3B\3B\5B\u0830\nB\3B\3B\5")
        buf.write("B\u0834\nB\3B\3B\3B\3B\3B\3B\3B\7B\u083d\nB\fB\16B\u0840")
        buf.write("\13B\3B\3B\3B\3B\3B\5B\u0847\nB\3B\5B\u084a\nB\3B\3B\7")
        buf.write("B\u084e\nB\fB\16B\u0851\13B\3B\3B\3B\5B\u0856\nB\5B\u0858")
        buf.write("\nB\3B\3B\3B\5B\u085d\nB\3B\3B\7B\u0861\nB\fB\16B\u0864")
        buf.write("\13B\3B\3B\3B\5B\u0869\nB\5B\u086b\nB\3B\3B\5B\u086f\n")
        buf.write("B\3B\5B\u0872\nB\3B\5B\u0875\nB\3B\3B\7B\u0879\nB\fB\16")
        buf.write("B\u087c\13B\3B\3B\3B\5B\u0881\nB\3B\5B\u0884\nB\3B\3B")
        buf.write("\7B\u0888\nB\fB\16B\u088b\13B\3B\3B\3B\5B\u0890\nB\5B")
        buf.write("\u0892\nB\3B\3B\3B\5B\u0897\nB\3B\3B\3B\3B\3B\5B\u089e")
        buf.write("\nB\3B\3B\3B\5B\u08a3\nB\3B\3B\3B\3B\3B\3B\5B\u08ab\n")
        buf.write("B\3B\3B\5B\u08af\nB\3B\3B\3B\3B\3B\3B\5B\u08b7\nB\3B\3")
        buf.write("B\5B\u08bb\nB\3B\3B\3B\5B\u08c0\nB\3B\3B\3B\3B\3B\5B\u08c7")
        buf.write("\nB\3B\3B\5B\u08cb\nB\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3")
        buf.write("B\3B\3B\3B\3B\3B\3B\5B\u08de\nB\3B\3B\3B\3B\3B\3B\3B\3")
        buf.write("B\3B\3B\3B\5B\u08eb\nB\3B\5B\u08ee\nB\3B\3B\3B\3B\3B\3")
        buf.write("B\3B\5B\u08f7\nB\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3")
        buf.write("B\3B\3B\3B\3B\5B\u090a\nB\3B\3B\3B\3B\3B\5B\u0911\nB\3")
        buf.write("B\3B\3B\3B\3B\5B\u0918\nB\3B\3B\3B\3B\3B\3B\3B\3B\3B\3")
        buf.write("B\3B\7B\u0925\nB\fB\16B\u0928\13B\3B\3B\3B\3B\3B\3B\3")
        buf.write("B\3B\3B\3B\5B\u0934\nB\3B\3B\3B\3B\5B\u093a\nB\3B\3B\3")
        buf.write("B\3B\5B\u0940\nB\3B\3B\3B\3B\5B\u0946\nB\3B\3B\3B\3B\5")
        buf.write("B\u094c\nB\3B\3B\3B\3B\5B\u0952\nB\3B\3B\3B\3B\5B\u0958")
        buf.write("\nB\3C\3C\3C\5C\u095d\nC\3C\3C\3D\3D\3D\5D\u0964\nD\3")
        buf.write("D\3D\3E\3E\3E\5E\u096b\nE\3E\3E\3E\3E\3E\5E\u0972\nE\3")
        buf.write("E\5E\u0975\nE\3E\3E\5E\u0979\nE\3E\5E\u097c\nE\3F\3F\3")
        buf.write("F\3F\3F\3F\3F\3F\3G\3G\3G\5G\u0989\nG\3G\3G\3H\3H\3H\5")
        buf.write("H\u0990\nH\3H\3H\3I\3I\3I\5I\u0997\nI\3I\3I\3J\3J\5J\u099d")
        buf.write("\nJ\3J\3J\5J\u09a1\nJ\3J\3J\5J\u09a5\nJ\3K\3K\3K\3K\3")
        buf.write("K\5K\u09ac\nK\3K\5K\u09af\nK\3L\3L\3L\5L\u09b4\nL\3L\3")
        buf.write("L\3M\3M\3M\5M\u09bb\nM\3M\3M\3M\7M\u09c0\nM\fM\16M\u09c3")
        buf.write("\13M\3M\5M\u09c6\nM\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\7N\u09d2")
        buf.write("\nN\fN\16N\u09d5\13N\3O\3O\5O\u09d9\nO\3O\3O\3P\3P\3P")
        buf.write("\3P\3P\5P\u09e2\nP\3P\5P\u09e5\nP\3Q\3Q\5Q\u09e9\nQ\3")
        buf.write("R\3R\3R\3S\3S\3S\3S\5S\u09f2\nS\3T\3T\5T\u09f6\nT\3T\5")
        buf.write("T\u09f9\nT\3T\5T\u09fc\nT\3T\3T\3T\3T\3T\3T\5T\u0a04\n")
        buf.write("T\3T\3T\3T\3T\5T\u0a0a\nT\3T\3T\3T\3T\3T\7T\u0a11\nT\f")
        buf.write("T\16T\u0a14\13T\5T\u0a16\nT\3T\3T\3T\3T\3T\3T\3T\7T\u0a1f")
        buf.write("\nT\fT\16T\u0a22\13T\5T\u0a24\nT\3U\3U\3U\5U\u0a29\nU")
        buf.write("\3U\5U\u0a2c\nU\3U\3U\3U\5U\u0a31\nU\3U\3U\3U\3U\3U\3")
        buf.write("U\3U\3U\5U\u0a3b\nU\3U\3U\3U\5U\u0a40\nU\3U\3U\3U\3U\5")
        buf.write("U\u0a46\nU\3U\5U\u0a49\nU\3U\3U\3U\5U\u0a4e\nU\3U\3U\3")
        buf.write("U\5U\u0a53\nU\5U\u0a55\nU\3U\3U\3U\3U\5U\u0a5b\nU\3U\3")
        buf.write("U\3U\5U\u0a60\nU\5U\u0a62\nU\3U\3U\3U\3U\5U\u0a68\nU\3")
        buf.write("U\3U\3U\3U\7U\u0a6e\nU\fU\16U\u0a71\13U\3U\3U\5U\u0a75")
        buf.write("\nU\3U\3U\3U\3U\7U\u0a7b\nU\fU\16U\u0a7e\13U\5U\u0a80")
        buf.write("\nU\3V\3V\3V\5V\u0a85\nV\3V\5V\u0a88\nV\3V\3V\3V\5V\u0a8d")
        buf.write("\nV\3V\3V\3V\3V\3V\3V\5V\u0a95\nV\3V\3V\3V\3V\3V\3V\5")
        buf.write("V\u0a9d\nV\3V\3V\3V\3V\5V\u0aa3\nV\3V\3V\3V\3V\7V\u0aa9")
        buf.write("\nV\fV\16V\u0aac\13V\3V\3V\5V\u0ab0\nV\3V\3V\3V\3V\7V")
        buf.write("\u0ab6\nV\fV\16V\u0ab9\13V\5V\u0abb\nV\3W\3W\5W\u0abf")
        buf.write("\nW\3W\5W\u0ac2\nW\3W\3W\3W\3W\3W\3W\5W\u0aca\nW\3W\3")
        buf.write("W\3W\3W\5W\u0ad0\nW\3W\3W\3W\3W\3W\7W\u0ad7\nW\fW\16W")
        buf.write("\u0ada\13W\5W\u0adc\nW\3X\3X\5X\u0ae0\nX\3X\3X\5X\u0ae4")
        buf.write("\nX\3X\3X\6X\u0ae8\nX\rX\16X\u0ae9\3X\3X\5X\u0aee\nX\3")
        buf.write("X\3X\5X\u0af2\nX\5X\u0af4\nX\3X\5X\u0af7\nX\3X\5X\u0afa")
        buf.write("\nX\3X\5X\u0afd\nX\3X\3X\6X\u0b01\nX\rX\16X\u0b02\3X\3")
        buf.write("X\5X\u0b07\nX\3X\5X\u0b0a\nX\3X\5X\u0b0d\nX\3X\5X\u0b10")
        buf.write("\nX\3X\5X\u0b13\nX\5X\u0b15\nX\3Y\3Y\5Y\u0b19\nY\3Z\3")
        buf.write("Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\3Z\7Z\u0b25\nZ\fZ\16Z\u0b28\13")
        buf.write("Z\5Z\u0b2a\nZ\3[\3[\3[\3[\3\\\3\\\5\\\u0b32\n\\\3]\3]")
        buf.write("\3]\3]\3]\3]\5]\u0b3a\n]\3^\3^\5^\u0b3e\n^\3^\5^\u0b41")
        buf.write("\n^\3^\5^\u0b44\n^\3^\3^\3^\3^\3^\3^\3^\5^\u0b4d\n^\3")
        buf.write("^\3^\5^\u0b51\n^\3^\5^\u0b54\n^\3^\3^\5^\u0b58\n^\3_\3")
        buf.write("_\5_\u0b5c\n_\3_\5_\u0b5f\n_\3_\5_\u0b62\n_\3_\3_\3_\5")
        buf.write("_\u0b67\n_\3_\3_\3_\3_\5_\u0b6d\n_\7_\u0b6f\n_\f_\16_")
        buf.write("\u0b72\13_\3_\3_\3_\3_\3_\3_\3_\5_\u0b7b\n_\3_\3_\3_\3")
        buf.write("_\5_\u0b81\n_\7_\u0b83\n_\f_\16_\u0b86\13_\3_\3_\3_\5")
        buf.write("_\u0b8b\n_\3_\3_\5_\u0b8f\n_\3`\3`\3`\3`\5`\u0b95\n`\3")
        buf.write("`\5`\u0b98\n`\3a\3a\3a\3a\3a\3a\3a\3a\3a\3a\5a\u0ba4\n")
        buf.write("a\3a\3a\5a\u0ba8\na\3a\3a\5a\u0bac\na\3b\3b\3b\3b\3b\3")
        buf.write("b\5b\u0bb4\nb\3b\3b\5b\u0bb8\nb\3c\3c\3c\3c\3d\3d\5d\u0bc0")
        buf.write("\nd\3d\5d\u0bc3\nd\3d\3d\5d\u0bc7\nd\3d\5d\u0bca\nd\3")
        buf.write("d\3d\3d\3d\7d\u0bd0\nd\fd\16d\u0bd3\13d\3d\3d\5d\u0bd7")
        buf.write("\nd\3d\5d\u0bda\nd\3d\5d\u0bdd\nd\3e\3e\5e\u0be1\ne\3")
        buf.write("e\5e\u0be4\ne\3e\3e\3e\3e\3e\7e\u0beb\ne\fe\16e\u0bee")
        buf.write("\13e\3e\3e\5e\u0bf2\ne\3f\3f\3f\3f\3f\7f\u0bf9\nf\ff\16")
        buf.write("f\u0bfc\13f\3g\3g\5g\u0c00\ng\3h\3h\3h\7h\u0c05\nh\fh")
        buf.write("\16h\u0c08\13h\3i\3i\7i\u0c0c\ni\fi\16i\u0c0f\13i\3i\3")
        buf.write("i\3i\7i\u0c14\ni\fi\16i\u0c17\13i\3i\3i\5i\u0c1b\ni\3")
        buf.write("j\3j\3j\3j\3j\3j\5j\u0c23\nj\3j\5j\u0c26\nj\3j\5j\u0c29")
        buf.write("\nj\3j\3j\3j\7j\u0c2e\nj\fj\16j\u0c31\13j\5j\u0c33\nj")
        buf.write("\3j\3j\3j\3j\3j\5j\u0c3a\nj\3j\5j\u0c3d\nj\3j\3j\3j\3")
        buf.write("j\3j\3j\5j\u0c45\nj\3k\3k\3k\3k\5k\u0c4b\nk\3k\3k\3k\3")
        buf.write("k\3l\3l\3l\3l\3l\5l\u0c56\nl\3m\5m\u0c59\nm\3m\3m\3m\3")
        buf.write("m\3m\3m\3m\3m\3m\5m\u0c64\nm\3m\3m\3m\3m\5m\u0c6a\nm\3")
        buf.write("m\3m\5m\u0c6e\nm\3m\3m\3m\3m\3m\3m\3m\3m\3m\5m\u0c79\n")
        buf.write("m\3m\3m\3m\5m\u0c7e\nm\5m\u0c80\nm\3m\3m\5m\u0c84\nm\3")
        buf.write("n\3n\3o\3o\3o\3o\3o\3o\3o\3o\5o\u0c90\no\3p\3p\3p\3p\3")
        buf.write("p\3p\3p\3p\5p\u0c9a\np\3q\3q\7q\u0c9e\nq\fq\16q\u0ca1")
        buf.write("\13q\3q\3q\5q\u0ca5\nq\3q\5q\u0ca8\nq\3q\5q\u0cab\nq\3")
        buf.write("q\5q\u0cae\nq\3r\3r\7r\u0cb2\nr\fr\16r\u0cb5\13r\3r\3")
        buf.write("r\5r\u0cb9\nr\3r\5r\u0cbc\nr\3r\5r\u0cbf\nr\3s\3s\5s\u0cc3")
        buf.write("\ns\3s\3s\3t\3t\5t\u0cc9\nt\3t\3t\5t\u0ccd\nt\3u\3u\3")
        buf.write("u\3u\3u\3u\3u\3u\5u\u0cd7\nu\3v\3v\5v\u0cdb\nv\3v\3v\7")
        buf.write("v\u0cdf\nv\fv\16v\u0ce2\13v\3w\3w\3w\3w\3w\3w\5w\u0cea")
        buf.write("\nw\3w\5w\u0ced\nw\3w\3w\5w\u0cf1\nw\3w\5w\u0cf4\nw\3")
        buf.write("w\3w\5w\u0cf8\nw\3w\3w\5w\u0cfc\nw\3w\5w\u0cff\nw\5w\u0d01")
        buf.write("\nw\3x\3x\3x\3x\7x\u0d07\nx\fx\16x\u0d0a\13x\3x\3x\3x")
        buf.write("\3x\3x\3x\3x\3x\3x\5x\u0d15\nx\3x\3x\3x\3x\5x\u0d1b\n")
        buf.write("x\3x\5x\u0d1e\nx\3x\3x\3x\5x\u0d23\nx\3x\3x\3x\5x\u0d28")
        buf.write("\nx\5x\u0d2a\nx\3x\3x\3x\3x\5x\u0d30\nx\3x\3x\3x\5x\u0d35")
        buf.write("\nx\5x\u0d37\nx\5x\u0d39\nx\3y\3y\3y\3y\5y\u0d3f\ny\3")
        buf.write("y\3y\3y\3y\3y\7y\u0d46\ny\fy\16y\u0d49\13y\3y\3y\5y\u0d4d")
        buf.write("\ny\5y\u0d4f\ny\3y\3y\5y\u0d53\ny\3z\3z\5z\u0d57\nz\3")
        buf.write("{\3{\3{\3{\5{\u0d5d\n{\3{\3{\3{\3{\3{\5{\u0d64\n{\3|\3")
        buf.write("|\3|\3|\3|\7|\u0d6b\n|\f|\16|\u0d6e\13|\5|\u0d70\n|\3")
        buf.write("}\3}\5}\u0d74\n}\3~\3~\5~\u0d78\n~\3~\3~\5~\u0d7c\n~\3")
        buf.write("~\5~\u0d7f\n~\3~\5~\u0d82\n~\3~\5~\u0d85\n~\3\177\3\177")
        buf.write("\5\177\u0d89\n\177\3\177\3\177\5\177\u0d8d\n\177\3\177")
        buf.write("\5\177\u0d90\n\177\3\177\5\177\u0d93\n\177\3\177\5\177")
        buf.write("\u0d96\n\177\3\u0080\3\u0080\3\u0080\3\u0081\3\u0081\5")
        buf.write("\u0081\u0d9d\n\u0081\3\u0081\3\u0081\5\u0081\u0da1\n\u0081")
        buf.write("\3\u0081\3\u0081\3\u0082\3\u0082\3\u0082\3\u0082\3\u0083")
        buf.write("\3\u0083\3\u0083\3\u0083\3\u0083\7\u0083\u0dae\n\u0083")
        buf.write("\f\u0083\16\u0083\u0db1\13\u0083\3\u0084\3\u0084\3\u0084")
        buf.write("\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0086\3\u0086")
        buf.write("\5\u0086\u0dbd\n\u0086\3\u0086\3\u0086\3\u0086\3\u0086")
        buf.write("\7\u0086\u0dc3\n\u0086\f\u0086\16\u0086\u0dc6\13\u0086")
        buf.write("\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087")
        buf.write("\5\u0087\u0dcf\n\u0087\3\u0088\3\u0088\5\u0088\u0dd3\n")
        buf.write("\u0088\3\u0088\5\u0088\u0dd6\n\u0088\3\u0088\3\u0088\3")
        buf.write("\u0089\3\u0089\5\u0089\u0ddc\n\u0089\3\u0089\5\u0089\u0ddf")
        buf.write("\n\u0089\3\u0089\5\u0089\u0de2\n\u0089\3\u008a\3\u008a")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\5\u008a\u0deb")
        buf.write("\n\u008a\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b")
        buf.write("\3\u008b\5\u008b\u0df4\n\u008b\3\u008c\3\u008c\3\u008c")
        buf.write("\3\u008c\3\u008c\3\u008c\7\u008c\u0dfc\n\u008c\f\u008c")
        buf.write("\16\u008c\u0dff\13\u008c\3\u008c\5\u008c\u0e02\n\u008c")
        buf.write("\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\7\u008d")
        buf.write("\u0e0a\n\u008d\f\u008d\16\u008d\u0e0d\13\u008d\3\u008e")
        buf.write("\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\5\u008e")
        buf.write("\u0e16\n\u008e\3\u008f\3\u008f\3\u008f\3\u0090\3\u0090")
        buf.write("\3\u0090\5\u0090\u0e1e\n\u0090\3\u0090\5\u0090\u0e21\n")
        buf.write("\u0090\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\7\u0091")
        buf.write("\u0e28\n\u0091\f\u0091\16\u0091\u0e2b\13\u0091\5\u0091")
        buf.write("\u0e2d\n\u0091\3\u0091\3\u0091\5\u0091\u0e31\n\u0091\3")
        buf.write("\u0091\7\u0091\u0e34\n\u0091\f\u0091\16\u0091\u0e37\13")
        buf.write("\u0091\3\u0091\5\u0091\u0e3a\n\u0091\3\u0092\3\u0092\3")
        buf.write("\u0092\3\u0092\3\u0092\7\u0092\u0e41\n\u0092\f\u0092\16")
        buf.write("\u0092\u0e44\13\u0092\5\u0092\u0e46\n\u0092\3\u0093\3")
        buf.write("\u0093\3\u0093\3\u0094\3\u0094\3\u0094\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095\7\u0095\u0e63")
        buf.write("\n\u0095\f\u0095\16\u0095\u0e66\13\u0095\5\u0095\u0e68")
        buf.write("\n\u0095\3\u0095\5\u0095\u0e6b\n\u0095\3\u0096\3\u0096")
        buf.write("\3\u0097\3\u0097\3\u0098\3\u0098\3\u0099\3\u0099\3\u0099")
        buf.write("\3\u0099\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a")
        buf.write("\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a")
        buf.write("\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a")
        buf.write("\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a")
        buf.write("\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a")
        buf.write("\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a")
        buf.write("\3\u009a\5\u009a\u0ea1\n\u009a\3\u009b\3\u009b\3\u009c")
        buf.write("\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c")
        buf.write("\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c")
        buf.write("\3\u009c\3\u009c\3\u009c\5\u009c\u0eb7\n\u009c\3\u009d")
        buf.write("\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d")
        buf.write("\3\u009d\3\u009d\3\u009d\3\u009d\5\u009d\u0ec5\n\u009d")
        buf.write("\3\u009e\3\u009e\3\u009e\7\u009e\u0eca\n\u009e\f\u009e")
        buf.write("\16\u009e\u0ecd\13\u009e\3\u009e\5\u009e\u0ed0\n\u009e")
        buf.write("\3\u009f\3\u009f\3\u009f\3\u009f\5\u009f\u0ed6\n\u009f")
        buf.write("\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\5\u00a0")
        buf.write("\u0ede\n\u00a0\5\u00a0\u0ee0\n\u00a0\3\u00a1\3\u00a1\3")
        buf.write("\u00a1\3\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2")
        buf.write("\5\u00a2\u0eeb\n\u00a2\3\u00a3\3\u00a3\3\u00a3\3\u00a3")
        buf.write("\3\u00a4\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u0ef5\n\u00a4")
        buf.write("\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a6\3\u00a6")
        buf.write("\3\u00a6\3\u00a6\5\u00a6\u0f00\n\u00a6\3\u00a7\3\u00a7")
        buf.write("\3\u00a7\3\u00a7\3\u00a8\3\u00a8\5\u00a8\u0f08\n\u00a8")
        buf.write("\3\u00a9\3\u00a9\3\u00a9\5\u00a9\u0f0d\n\u00a9\3\u00a9")
        buf.write("\3\u00a9\3\u00a9\3\u00a9\7\u00a9\u0f13\n\u00a9\f\u00a9")
        buf.write("\16\u00a9\u0f16\13\u00a9\3\u00a9\3\u00a9\3\u00a9\7\u00a9")
        buf.write("\u0f1b\n\u00a9\f\u00a9\16\u00a9\u0f1e\13\u00a9\3\u00a9")
        buf.write("\3\u00a9\3\u00a9\7\u00a9\u0f23\n\u00a9\f\u00a9\16\u00a9")
        buf.write("\u0f26\13\u00a9\3\u00a9\3\u00a9\3\u00a9\7\u00a9\u0f2b")
        buf.write("\n\u00a9\f\u00a9\16\u00a9\u0f2e\13\u00a9\3\u00a9\6\u00a9")
        buf.write("\u0f31\n\u00a9\r\u00a9\16\u00a9\u0f32\5\u00a9\u0f35\n")
        buf.write("\u00a9\3\u00a9\3\u00a9\5\u00a9\u0f39\n\u00a9\3\u00aa\3")
        buf.write("\u00aa\3\u00aa\5\u00aa\u0f3e\n\u00aa\3\u00aa\6\u00aa\u0f41")
        buf.write("\n\u00aa\r\u00aa\16\u00aa\u0f42\3\u00aa\3\u00aa\6\u00aa")
        buf.write("\u0f47\n\u00aa\r\u00aa\16\u00aa\u0f48\5\u00aa\u0f4b\n")
        buf.write("\u00aa\3\u00aa\3\u00aa\3\u00aa\3\u00ab\3\u00ab\3\u00ab")
        buf.write("\3\u00ab\6\u00ab\u0f54\n\u00ab\r\u00ab\16\u00ab\u0f55")
        buf.write("\3\u00ab\7\u00ab\u0f59\n\u00ab\f\u00ab\16\u00ab\u0f5c")
        buf.write("\13\u00ab\3\u00ab\3\u00ab\6\u00ab\u0f60\n\u00ab\r\u00ab")
        buf.write("\16\u00ab\u0f61\5\u00ab\u0f64\n\u00ab\3\u00ab\3\u00ab")
        buf.write("\3\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ad\3\u00ad\3\u00ad")
        buf.write("\3\u00ae\3\u00ae\3\u00ae\5\u00ae\u0f72\n\u00ae\3\u00ae")
        buf.write("\3\u00ae\6\u00ae\u0f76\n\u00ae\r\u00ae\16\u00ae\u0f77")
        buf.write("\3\u00ae\3\u00ae\3\u00ae\5\u00ae\u0f7d\n\u00ae\3\u00af")
        buf.write("\3\u00af\3\u00af\5\u00af\u0f82\n\u00af\3\u00af\3\u00af")
        buf.write("\6\u00af\u0f86\n\u00af\r\u00af\16\u00af\u0f87\3\u00af")
        buf.write("\3\u00af\3\u00af\3\u00af\3\u00af\5\u00af\u0f8f\n\u00af")
        buf.write("\3\u00b0\3\u00b0\3\u00b0\3\u00b1\3\u00b1\3\u00b1\5\u00b1")
        buf.write("\u0f97\n\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\6\u00b1")
        buf.write("\u0f9d\n\u00b1\r\u00b1\16\u00b1\u0f9e\3\u00b1\3\u00b1")
        buf.write("\3\u00b1\5\u00b1\u0fa4\n\u00b1\3\u00b2\3\u00b2\3\u00b2")
        buf.write("\3\u00b2\5\u00b2\u0faa\n\u00b2\3\u00b2\5\u00b2\u0fad\n")
        buf.write("\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2")
        buf.write("\5\u00b2\u0fb5\n\u00b2\3\u00b3\3\u00b3\3\u00b3\3\u00b3")
        buf.write("\3\u00b3\5\u00b3\u0fbc\n\u00b3\3\u00b4\3\u00b4\3\u00b4")
        buf.write("\3\u00b4\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u0fc5\n\u00b4")
        buf.write("\3\u00b4\5\u00b4\u0fc8\n\u00b4\3\u00b5\3\u00b5\3\u00b5")
        buf.write("\3\u00b5\3\u00b5\3\u00b5\3\u00b6\3\u00b6\3\u00b6\3\u00b6")
        buf.write("\3\u00b6\3\u00b6\3\u00b6\7\u00b6\u0fd7\n\u00b6\f\u00b6")
        buf.write("\16\u00b6\u0fda\13\u00b6\3\u00b6\3\u00b6\3\u00b7\3\u00b7")
        buf.write("\3\u00b7\5\u00b7\u0fe1\n\u00b7\3\u00b7\3\u00b7\3\u00b7")
        buf.write("\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u0fe9\n\u00b7\3\u00b8")
        buf.write("\3\u00b8\5\u00b8\u0fed\n\u00b8\3\u00b8\3\u00b8\3\u00b9")
        buf.write("\3\u00b9\3\u00b9\5\u00b9\u0ff4\n\u00b9\3\u00b9\3\u00b9")
        buf.write("\6\u00b9\u0ff8\n\u00b9\r\u00b9\16\u00b9\u0ff9\3\u00ba")
        buf.write("\3\u00ba\3\u00ba\3\u00ba\6\u00ba\u1000\n\u00ba\r\u00ba")
        buf.write("\16\u00ba\u1001\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb")
        buf.write("\3\u00bb\3\u00bb\3\u00bb\7\u00bb\u100c\n\u00bb\f\u00bb")
        buf.write("\16\u00bb\u100f\13\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb")
        buf.write("\u1014\n\u00bb\3\u00bb\3\u00bb\3\u00bb\7\u00bb\u1019\n")
        buf.write("\u00bb\f\u00bb\16\u00bb\u101c\13\u00bb\3\u00bb\3\u00bb")
        buf.write("\3\u00bb\3\u00bb\5\u00bb\u1022\n\u00bb\3\u00bb\7\u00bb")
        buf.write("\u1025\n\u00bb\f\u00bb\16\u00bb\u1028\13\u00bb\5\u00bb")
        buf.write("\u102a\n\u00bb\5\u00bb\u102c\n\u00bb\3\u00bb\3\u00bb\6")
        buf.write("\u00bb\u1030\n\u00bb\r\u00bb\16\u00bb\u1031\5\u00bb\u1034")
        buf.write("\n\u00bb\3\u00bb\3\u00bb\7\u00bb\u1038\n\u00bb\f\u00bb")
        buf.write("\16\u00bb\u103b\13\u00bb\5\u00bb\u103d\n\u00bb\3\u00bc")
        buf.write("\3\u00bc\3\u00bc\3\u00bc\3\u00bc\7\u00bc\u1044\n\u00bc")
        buf.write("\f\u00bc\16\u00bc\u1047\13\u00bc\3\u00bc\3\u00bc\3\u00bc")
        buf.write("\5\u00bc\u104c\n\u00bc\3\u00bc\3\u00bc\3\u00bc\7\u00bc")
        buf.write("\u1051\n\u00bc\f\u00bc\16\u00bc\u1054\13\u00bc\3\u00bc")
        buf.write("\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u105a\n\u00bc\3\u00bc")
        buf.write("\7\u00bc\u105d\n\u00bc\f\u00bc\16\u00bc\u1060\13\u00bc")
        buf.write("\5\u00bc\u1062\n\u00bc\5\u00bc\u1064\n\u00bc\3\u00bc\3")
        buf.write("\u00bc\6\u00bc\u1068\n\u00bc\r\u00bc\16\u00bc\u1069\5")
        buf.write("\u00bc\u106c\n\u00bc\3\u00bc\3\u00bc\7\u00bc\u1070\n\u00bc")
        buf.write("\f\u00bc\16\u00bc\u1073\13\u00bc\5\u00bc\u1075\n\u00bc")
        buf.write("\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u107a\n\u00bd\3\u00bd")
        buf.write("\3\u00bd\3\u00bd\7\u00bd\u107f\n\u00bd\f\u00bd\16\u00bd")
        buf.write("\u1082\13\u00bd\3\u00be\3\u00be\3\u00be\3\u00be\7\u00be")
        buf.write("\u1088\n\u00be\f\u00be\16\u00be\u108b\13\u00be\3\u00be")
        buf.write("\3\u00be\5\u00be\u108f\n\u00be\3\u00be\3\u00be\3\u00be")
        buf.write("\3\u00be\3\u00be\7\u00be\u1096\n\u00be\f\u00be\16\u00be")
        buf.write("\u1099\13\u00be\3\u00be\3\u00be\3\u00be\3\u00be\5\u00be")
        buf.write("\u109f\n\u00be\3\u00be\7\u00be\u10a2\n\u00be\f\u00be\16")
        buf.write("\u00be\u10a5\13\u00be\5\u00be\u10a7\n\u00be\5\u00be\u10a9")
        buf.write("\n\u00be\3\u00be\3\u00be\3\u00be\3\u00be\7\u00be\u10af")
        buf.write("\n\u00be\f\u00be\16\u00be\u10b2\13\u00be\5\u00be\u10b4")
        buf.write("\n\u00be\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf")
        buf.write("\3\u00bf\3\u00bf\7\u00bf\u10be\n\u00bf\f\u00bf\16\u00bf")
        buf.write("\u10c1\13\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u10c6")
        buf.write("\n\u00bf\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0")
        buf.write("\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c1\3\u00c1\3\u00c1")
        buf.write("\3\u00c1\7\u00c1\u10d6\n\u00c1\f\u00c1\16\u00c1\u10d9")
        buf.write("\13\u00c1\3\u00c1\3\u00c1\5\u00c1\u10dd\n\u00c1\3\u00c1")
        buf.write("\3\u00c1\3\u00c1\3\u00c1\3\u00c1\7\u00c1\u10e4\n\u00c1")
        buf.write("\f\u00c1\16\u00c1\u10e7\13\u00c1\3\u00c1\3\u00c1\3\u00c1")
        buf.write("\5\u00c1\u10ec\n\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1")
        buf.write("\3\u00c1\3\u00c1\3\u00c1\7\u00c1\u10f5\n\u00c1\f\u00c1")
        buf.write("\16\u00c1\u10f8\13\u00c1\5\u00c1\u10fa\n\u00c1\3\u00c2")
        buf.write("\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c2")
        buf.write("\7\u00c2\u1104\n\u00c2\f\u00c2\16\u00c2\u1107\13\u00c2")
        buf.write("\3\u00c3\3\u00c3\3\u00c3\3\u00c3\5\u00c3\u110d\n\u00c3")
        buf.write("\3\u00c3\3\u00c3\3\u00c3\5\u00c3\u1112\n\u00c3\3\u00c4")
        buf.write("\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4")
        buf.write("\5\u00c4\u111c\n\u00c4\3\u00c5\3\u00c5\3\u00c5\3\u00c5")
        buf.write("\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\5\u00c5")
        buf.write("\u1128\n\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5")
        buf.write("\3\u00c5\3\u00c5\3\u00c5\3\u00c5\5\u00c5\u1133\n\u00c5")
        buf.write("\5\u00c5\u1135\n\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6")
        buf.write("\3\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u113f\n\u00c6")
        buf.write("\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7")
        buf.write("\3\u00c7\5\u00c7\u1149\n\u00c7\3\u00c8\3\u00c8\3\u00c8")
        buf.write("\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u1153")
        buf.write("\n\u00c9\3\u00ca\3\u00ca\5\u00ca\u1157\n\u00ca\3\u00ca")
        buf.write("\3\u00ca\5\u00ca\u115b\n\u00ca\3\u00ca\3\u00ca\3\u00ca")
        buf.write("\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u1164\n\u00ca")
        buf.write("\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca")
        buf.write("\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca")
        buf.write("\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca")
        buf.write("\3\u00ca\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u117f\n\u00ca")
        buf.write("\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb")
        buf.write("\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb")
        buf.write("\u118e\n\u00cb\3\u00cc\3\u00cc\5\u00cc\u1192\n\u00cc\3")
        buf.write("\u00cc\3\u00cc\3\u00cc\3\u00cd\3\u00cd\3\u00cd\3\u00cd")
        buf.write("\7\u00cd\u119b\n\u00cd\f\u00cd\16\u00cd\u119e\13\u00cd")
        buf.write("\3\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce\u11a4\n\u00ce")
        buf.write("\3\u00cf\3\u00cf\5\u00cf\u11a8\n\u00cf\3\u00cf\3\u00cf")
        buf.write("\3\u00cf\3\u00d0\3\u00d0\5\u00d0\u11af\n\u00d0\3\u00d0")
        buf.write("\3\u00d0\3\u00d0\5\u00d0\u11b4\n\u00d0\3\u00d0\5\u00d0")
        buf.write("\u11b7\n\u00d0\3\u00d0\5\u00d0\u11ba\n\u00d0\3\u00d1\3")
        buf.write("\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1")
        buf.write("\u11c3\n\u00d1\3\u00d2\3\u00d2\5\u00d2\u11c7\n\u00d2\3")
        buf.write("\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2")
        buf.write("\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d3\3\u00d4")
        buf.write("\3\u00d4\3\u00d4\3\u00d4\3\u00d5\3\u00d5\3\u00d5\3\u00d5")
        buf.write("\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\7\u00d5\u11e3")
        buf.write("\n\u00d5\f\u00d5\16\u00d5\u11e6\13\u00d5\3\u00d5\3\u00d5")
        buf.write("\3\u00d5\3\u00d5\5\u00d5\u11ec\n\u00d5\3\u00d5\3\u00d5")
        buf.write("\5\u00d5\u11f0\n\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5")
        buf.write("\3\u00d5\5\u00d5\u11f7\n\u00d5\3\u00d5\5\u00d5\u11fa\n")
        buf.write("\u00d5\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u11ff\n\u00d5\3")
        buf.write("\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6")
        buf.write("\3\u00d6\5\u00d6\u1209\n\u00d6\3\u00d6\3\u00d6\5\u00d6")
        buf.write("\u120d\n\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\5\u00d6")
        buf.write("\u1213\n\u00d6\3\u00d6\5\u00d6\u1216\n\u00d6\3\u00d6\3")
        buf.write("\u00d6\3\u00d6\5\u00d6\u121b\n\u00d6\3\u00d6\3\u00d6\5")
        buf.write("\u00d6\u121f\n\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3")
        buf.write("\u00d6\5\u00d6\u1226\n\u00d6\3\u00d6\5\u00d6\u1229\n\u00d6")
        buf.write("\3\u00d6\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u122f\n\u00d6")
        buf.write("\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6")
        buf.write("\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6")
        buf.write("\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6")
        buf.write("\3\u00d6\5\u00d6\u1247\n\u00d6\3\u00d6\3\u00d6\3\u00d6")
        buf.write("\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6")
        buf.write("\3\u00d6\5\u00d6\u1254\n\u00d6\3\u00d6\5\u00d6\u1257\n")
        buf.write("\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6")
        buf.write("\3\u00d6\3\u00d6\5\u00d6\u1261\n\u00d6\3\u00d6\3\u00d6")
        buf.write("\3\u00d6\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u1269\n\u00d6")
        buf.write("\3\u00d6\3\u00d6\5\u00d6\u126d\n\u00d6\3\u00d6\3\u00d6")
        buf.write("\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u1274\n\u00d6\3\u00d6")
        buf.write("\5\u00d6\u1277\n\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6")
        buf.write("\3\u00d6\7\u00d6\u127e\n\u00d6\f\u00d6\16\u00d6\u1281")
        buf.write("\13\u00d6\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u1286\n\u00d6")
        buf.write("\3\u00d6\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u128c\n\u00d6")
        buf.write("\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6")
        buf.write("\3\u00d6\5\u00d6\u1296\n\u00d6\5\u00d6\u1298\n\u00d6\3")
        buf.write("\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7\u129e\n\u00d7\3")
        buf.write("\u00d7\5\u00d7\u12a1\n\u00d7\3\u00d7\5\u00d7\u12a4\n\u00d7")
        buf.write("\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8")
        buf.write("\3\u00d8\3\u00d8\3\u00d8\5\u00d8\u12b0\n\u00d8\3\u00d8")
        buf.write("\5\u00d8\u12b3\n\u00d8\3\u00d9\3\u00d9\3\u00d9\3\u00d9")
        buf.write("\5\u00d9\u12b9\n\u00d9\3\u00da\5\u00da\u12bc\n\u00da\3")
        buf.write("\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\5\u00da")
        buf.write("\u12c4\n\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da")
        buf.write("\3\u00da\5\u00da\u12cc\n\u00da\3\u00db\3\u00db\3\u00db")
        buf.write("\3\u00db\5\u00db\u12d2\n\u00db\3\u00db\3\u00db\5\u00db")
        buf.write("\u12d6\n\u00db\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc")
        buf.write("\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc")
        buf.write("\5\u00dc\u12e4\n\u00dc\3\u00dd\3\u00dd\3\u00dd\3\u00de")
        buf.write("\3\u00de\3\u00de\3\u00de\3\u00de\7\u00de\u12ee\n\u00de")
        buf.write("\f\u00de\16\u00de\u12f1\13\u00de\3\u00de\3\u00de\3\u00de")
        buf.write("\3\u00de\5\u00de\u12f7\n\u00de\3\u00de\5\u00de\u12fa\n")
        buf.write("\u00de\3\u00de\3\u00de\3\u00de\3\u00df\3\u00df\5\u00df")
        buf.write("\u1301\n\u00df\3\u00df\3\u00df\3\u00df\7\u00df\u1306\n")
        buf.write("\u00df\f\u00df\16\u00df\u1309\13\u00df\3\u00e0\3\u00e0")
        buf.write("\5\u00e0\u130d\n\u00e0\3\u00e0\6\u00e0\u1310\n\u00e0\r")
        buf.write("\u00e0\16\u00e0\u1311\3\u00e1\3\u00e1\3\u00e1\3\u00e1")
        buf.write("\3\u00e1\3\u00e1\3\u00e1\7\u00e1\u131b\n\u00e1\f\u00e1")
        buf.write("\16\u00e1\u131e\13\u00e1\3\u00e2\3\u00e2\3\u00e2\3\u00e2")
        buf.write("\3\u00e3\3\u00e3\3\u00e4\3\u00e4\5\u00e4\u1328\n\u00e4")
        buf.write("\3\u00e4\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u132e\n\u00e4")
        buf.write("\3\u00e5\3\u00e5\3\u00e5\5\u00e5\u1333\n\u00e5\3\u00e5")
        buf.write("\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\3\u00e5\3\u00e5\3\u00e5\5\u00e5\u1340\n\u00e5\5\u00e5")
        buf.write("\u1342\n\u00e5\3\u00e5\3\u00e5\3\u00e5\5\u00e5\u1347\n")
        buf.write("\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5")
        buf.write("\3\u00e5\5\u00e5\u1350\n\u00e5\5\u00e5\u1352\n\u00e5\3")
        buf.write("\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\5\u00e6\u1359\n")
        buf.write("\u00e6\3\u00e6\5\u00e6\u135c\n\u00e6\3\u00e6\5\u00e6\u135f")
        buf.write("\n\u00e6\3\u00e6\3\u00e6\3\u00e6\3\u00e6\5\u00e6\u1365")
        buf.write("\n\u00e6\3\u00e6\3\u00e6\5\u00e6\u1369\n\u00e6\3\u00e7")
        buf.write("\3\u00e7\3\u00e7\3\u00e7\5\u00e7\u136f\n\u00e7\3\u00e8")
        buf.write("\3\u00e8\3\u00e8\3\u00e8\5\u00e8\u1375\n\u00e8\3\u00e8")
        buf.write("\3\u00e8\3\u00e9\3\u00e9\3\u00e9\3\u00ea\3\u00ea\3\u00ea")
        buf.write("\3\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u1384")
        buf.write("\n\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u1389\n\u00eb")
        buf.write("\3\u00ec\3\u00ec\3\u00ec\3\u00ec\5\u00ec\u138f\n\u00ec")
        buf.write("\3\u00ed\3\u00ed\3\u00ee\3\u00ee\3\u00ee\5\u00ee\u1396")
        buf.write("\n\u00ee\5\u00ee\u1398\n\u00ee\3\u00ef\3\u00ef\3\u00ef")
        buf.write("\3\u00ef\3\u00ef\5\u00ef\u139f\n\u00ef\3\u00ef\5\u00ef")
        buf.write("\u13a2\n\u00ef\3\u00f0\3\u00f0\3\u00f1\3\u00f1\3\u00f2")
        buf.write("\3\u00f2\3\u00f2\3\u00f2\5\u00f2\u13ac\n\u00f2\3\u00f3")
        buf.write("\3\u00f3\5\u00f3\u13b0\n\u00f3\3\u00f4\3\u00f4\3\u00f5")
        buf.write("\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5")
        buf.write("\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\6\u00f5")
        buf.write("\u13c2\n\u00f5\r\u00f5\16\u00f5\u13c3\3\u00f6\3\u00f6")
        buf.write("\3\u00f6\3\u00f6\3\u00f6\5\u00f6\u13cb\n\u00f6\5\u00f6")
        buf.write("\u13cd\n\u00f6\3\u00f7\3\u00f7\3\u00f7\6\u00f7\u13d2\n")
        buf.write("\u00f7\r\u00f7\16\u00f7\u13d3\5\u00f7\u13d6\n\u00f7\3")
        buf.write("\u00f8\3\u00f8\5\u00f8\u13da\n\u00f8\3\u00f9\3\u00f9\3")
        buf.write("\u00f9\5\u00f9\u13df\n\u00f9\3\u00fa\3\u00fa\3\u00fa\3")
        buf.write("\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\5\u00fa")
        buf.write("\u13ea\n\u00fa\3\u00fb\3\u00fb\3\u00fb\5\u00fb\u13ef\n")
        buf.write("\u00fb\3\u00fc\3\u00fc\3\u00fd\3\u00fd\5\u00fd\u13f5\n")
        buf.write("\u00fd\3\u00fe\5\u00fe\u13f8\n\u00fe\3\u00fe\3\u00fe\5")
        buf.write("\u00fe\u13fc\n\u00fe\3\u00fe\6\u00fe\u13ff\n\u00fe\r\u00fe")
        buf.write("\16\u00fe\u1400\3\u00fe\5\u00fe\u1404\n\u00fe\3\u00fe")
        buf.write("\3\u00fe\5\u00fe\u1408\n\u00fe\3\u00fe\3\u00fe\5\u00fe")
        buf.write("\u140c\n\u00fe\5\u00fe\u140e\n\u00fe\3\u00ff\3\u00ff\3")
        buf.write("\u0100\5\u0100\u1413\n\u0100\3\u0100\3\u0100\3\u0101\5")
        buf.write("\u0101\u1418\n\u0101\3\u0101\3\u0101\3\u0102\3\u0102\3")
        buf.write("\u0102\3\u0102\3\u0102\3\u0102\3\u0102\5\u0102\u1423\n")
        buf.write("\u0102\3\u0102\5\u0102\u1426\n\u0102\3\u0103\3\u0103\5")
        buf.write("\u0103\u142a\n\u0103\3\u0103\5\u0103\u142d\n\u0103\3\u0103")
        buf.write("\3\u0103\3\u0103\5\u0103\u1432\n\u0103\3\u0103\3\u0103")
        buf.write("\5\u0103\u1436\n\u0103\3\u0103\3\u0103\5\u0103\u143a\n")
        buf.write("\u0103\3\u0103\5\u0103\u143d\n\u0103\3\u0103\5\u0103\u1440")
        buf.write("\n\u0103\3\u0103\3\u0103\5\u0103\u1444\n\u0103\3\u0103")
        buf.write("\5\u0103\u1447\n\u0103\3\u0103\5\u0103\u144a\n\u0103\3")
        buf.write("\u0103\3\u0103\5\u0103\u144e\n\u0103\3\u0103\5\u0103\u1451")
        buf.write("\n\u0103\3\u0103\5\u0103\u1454\n\u0103\3\u0103\3\u0103")
        buf.write("\3\u0103\5\u0103\u1459\n\u0103\3\u0103\3\u0103\3\u0103")
        buf.write("\3\u0103\3\u0103\7\u0103\u1460\n\u0103\f\u0103\16\u0103")
        buf.write("\u1463\13\u0103\3\u0103\3\u0103\5\u0103\u1467\n\u0103")
        buf.write("\3\u0103\3\u0103\3\u0103\5\u0103\u146c\n\u0103\3\u0103")
        buf.write("\3\u0103\5\u0103\u1470\n\u0103\3\u0103\5\u0103\u1473\n")
        buf.write("\u0103\3\u0104\3\u0104\5\u0104\u1477\n\u0104\3\u0104\3")
        buf.write("\u0104\5\u0104\u147b\n\u0104\3\u0104\3\u0104\3\u0104\5")
        buf.write("\u0104\u1480\n\u0104\3\u0104\3\u0104\3\u0104\5\u0104\u1485")
        buf.write("\n\u0104\3\u0104\3\u0104\5\u0104\u1489\n\u0104\5\u0104")
        buf.write("\u148b\n\u0104\3\u0105\3\u0105\3\u0105\3\u0105\3\u0106")
        buf.write("\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0107\3\u0107")
        buf.write("\3\u0107\3\u0107\5\u0107\u149b\n\u0107\3\u0107\3\u0107")
        buf.write("\3\u0108\3\u0108\3\u0108\7\u0108\u14a2\n\u0108\f\u0108")
        buf.write("\16\u0108\u14a5\13\u0108\3\u0109\3\u0109\3\u0109\7\u0109")
        buf.write("\u14aa\n\u0109\f\u0109\16\u0109\u14ad\13\u0109\3\u010a")
        buf.write("\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a")
        buf.write("\3\u010a\3\u010a\3\u010a\3\u010a\7\u010a\u14bb\n\u010a")
        buf.write("\f\u010a\16\u010a\u14be\13\u010a\3\u010b\3\u010b\3\u010b")
        buf.write("\3\u010b\7\u010b\u14c4\n\u010b\f\u010b\16\u010b\u14c7")
        buf.write("\13\u010b\3\u010b\3\u010b\3\u010c\3\u010c\3\u010c\7\u010c")
        buf.write("\u14ce\n\u010c\f\u010c\16\u010c\u14d1\13\u010c\3\u010d")
        buf.write("\3\u010d\3\u010d\7\u010d\u14d6\n\u010d\f\u010d\16\u010d")
        buf.write("\u14d9\13\u010d\3\u010e\3\u010e\3\u010e\7\u010e\u14de")
        buf.write("\n\u010e\f\u010e\16\u010e\u14e1\13\u010e\3\u010f\3\u010f")
        buf.write("\3\u010f\7\u010f\u14e6\n\u010f\f\u010f\16\u010f\u14e9")
        buf.write("\13\u010f\3\u0110\3\u0110\5\u0110\u14ed\n\u0110\3\u0111")
        buf.write("\3\u0111\3\u0111\3\u0112\3\u0112\3\u0112\3\u0112\3\u0113")
        buf.write("\3\u0113\3\u0113\3\u0113\3\u0113\5\u0113\u14fb\n\u0113")
        buf.write("\3\u0113\3\u0113\3\u0113\3\u0113\3\u0113\5\u0113\u1502")
        buf.write("\n\u0113\3\u0113\3\u0113\3\u0113\5\u0113\u1507\n\u0113")
        buf.write("\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\6\u0114")
        buf.write("\u152b\n\u0114\r\u0114\16\u0114\u152c\3\u0114\3\u0114")
        buf.write("\5\u0114\u1531\n\u0114\3\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\3\u0114\3\u0114\3\u0114\6\u0114\u153b\n\u0114")
        buf.write("\r\u0114\16\u0114\u153c\3\u0114\3\u0114\5\u0114\u1541")
        buf.write("\n\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\5\u0114\u154a\n\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\3\u0114\3\u0114\5\u0114\u1552\n\u0114\3\u0114")
        buf.write("\3\u0114\3\u0114\5\u0114\u1557\n\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\3\u0114\3\u0114\3\u0114\5\u0114\u155f\n\u0114")
        buf.write("\3\u0114\3\u0114\3\u0114\5\u0114\u1564\n\u0114\3\u0114")
        buf.write("\3\u0114\3\u0114\5\u0114\u1569\n\u0114\5\u0114\u156b\n")
        buf.write("\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\5\u0114\u1574\n\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\5\u0114\u1579\n\u0114\3\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\3\u0114\5\u0114\u1581\n\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\5\u0114\u1586\n\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\3\u0114\3\u0114\5\u0114\u158e\n\u0114\3\u0114")
        buf.write("\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\5\u0114\u1596")
        buf.write("\n\u0114\3\u0114\5\u0114\u1599\n\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\5\u0114")
        buf.write("\u15a3\n\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114")
        buf.write("\3\u0114\3\u0114\3\u0114\3\u0114\5\u0114\u15ae\n\u0114")
        buf.write("\3\u0115\3\u0115\3\u0115\5\u0115\u15b3\n\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\5\u0115\u15b8\n\u0115\7\u0115\u15ba\n")
        buf.write("\u0115\f\u0115\16\u0115\u15bd\13\u0115\3\u0115\3\u0115")
        buf.write("\3\u0115\3\u0115\3\u0115\5\u0115\u15c4\n\u0115\3\u0116")
        buf.write("\3\u0116\3\u0116\5\u0116\u15c9\n\u0116\3\u0116\3\u0116")
        buf.write("\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\5\u0116\u15d2")
        buf.write("\n\u0116\3\u0116\5\u0116\u15d5\n\u0116\3\u0116\3\u0116")
        buf.write("\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116")
        buf.write("\3\u0116\5\u0116\u15e1\n\u0116\3\u0116\3\u0116\3\u0116")
        buf.write("\3\u0116\3\u0116\3\u0116\5\u0116\u15e9\n\u0116\3\u0116")
        buf.write("\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\7\u0116\u15f1")
        buf.write("\n\u0116\f\u0116\16\u0116\u15f4\13\u0116\5\u0116\u15f6")
        buf.write("\n\u0116\3\u0116\3\u0116\5\u0116\u15fa\n\u0116\3\u0116")
        buf.write("\3\u0116\5\u0116\u15fe\n\u0116\3\u0117\3\u0117\3\u0117")
        buf.write("\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117")
        buf.write("\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117")
        buf.write("\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\5\u0117\u1616")
        buf.write("\n\u0117\3\u0118\3\u0118\3\u0118\3\u0118\3\u0118\3\u0119")
        buf.write("\3\u0119\3\u0119\3\u0119\5\u0119\u1621\n\u0119\3\u0119")
        buf.write("\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u1628\n\u0119")
        buf.write("\7\u0119\u162a\n\u0119\f\u0119\16\u0119\u162d\13\u0119")
        buf.write("\3\u011a\3\u011a\3\u011a\3\u011a\5\u011a\u1633\n\u011a")
        buf.write("\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\5\u011b")
        buf.write("\u163b\n\u011b\3\u011b\3\u011b\3\u011b\5\u011b\u1640\n")
        buf.write("\u011b\3\u011b\3\u011b\3\u011b\3\u011b\7\u011b\u1646\n")
        buf.write("\u011b\f\u011b\16\u011b\u1649\13\u011b\3\u011c\3\u011c")
        buf.write("\3\u011c\5\u011c\u164e\n\u011c\3\u011c\3\u011c\3\u011c")
        buf.write("\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\5\u011c\u1658")
        buf.write("\n\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c")
        buf.write("\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\5\u011c\u1665")
        buf.write("\n\u011c\3\u011c\3\u011c\3\u011c\3\u011c\5\u011c\u166b")
        buf.write("\n\u011c\3\u011c\3\u011c\3\u011c\3\u011c\5\u011c\u1671")
        buf.write("\n\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c")
        buf.write("\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c")
        buf.write("\3\u011c\5\u011c\u1681\n\u011c\3\u011c\3\u011c\3\u011c")
        buf.write("\3\u011c\5\u011c\u1687\n\u011c\7\u011c\u1689\n\u011c\f")
        buf.write("\u011c\16\u011c\u168c\13\u011c\3\u011d\3\u011d\3\u011d")
        buf.write("\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d")
        buf.write("\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\5\u011d")
        buf.write("\u169e\n\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d")
        buf.write("\3\u011d\3\u011d\3\u011d\5\u011d\u16a8\n\u011d\3\u011d")
        buf.write("\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d")
        buf.write("\7\u011d\u16b2\n\u011d\f\u011d\16\u011d\u16b5\13\u011d")
        buf.write("\3\u011e\3\u011e\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f")
        buf.write("\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f")
        buf.write("\3\u011f\3\u011f\5\u011f\u16c7\n\u011f\3\u0120\3\u0120")
        buf.write("\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\5\u0120\u16d0")
        buf.write("\n\u0120\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121\3\u0121")
        buf.write("\3\u0121\5\u0121\u16d9\n\u0121\3\u0122\3\u0122\3\u0123")
        buf.write("\3\u0123\3\u0124\3\u0124\3\u0125\3\u0125\3\u0126\3\u0126")
        buf.write("\3\u0127\3\u0127\3\u0128\3\u0128\3\u0129\3\u0129\3\u0129")
        buf.write("\2\5\u0234\u0236\u0238\u012a\2\4\6\b\n\f\16\20\22\24\26")
        buf.write("\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\")
        buf.write("^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a")
        buf.write("\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c")
        buf.write("\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae")
        buf.write("\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0")
        buf.write("\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2")
        buf.write("\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4")
        buf.write("\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6")
        buf.write("\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108")
        buf.write("\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a")
        buf.write("\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c")
        buf.write("\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e")
        buf.write("\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150")
        buf.write("\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162")
        buf.write("\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174")
        buf.write("\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186")
        buf.write("\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198")
        buf.write("\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa")
        buf.write("\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc")
        buf.write("\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce")
        buf.write("\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0")
        buf.write("\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2")
        buf.write("\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204")
        buf.write("\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216")
        buf.write("\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228")
        buf.write("\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a")
        buf.write("\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c")
        buf.write("\u024e\u0250\2s\4\2##\u0082\u0082\4\2\u019f\u019f\u01a4")
        buf.write("\u01a4\5\2==\u0088\u0088\u009c\u009c\5\2&&\u0120\u0120")
        buf.write("\u015e\u015e\6\2&&\u013f\u013f\u019e\u019e\u01e2\u01e2")
        buf.write("\4\2\u0196\u0196\u03bf\u03bf\4\2CC{{\4\2\16\16\u00f8\u00f8")
        buf.write("\5\2((II\u009f\u009f\4\2\u014c\u014c\u01b6\u01b6\5\2\u018f")
        buf.write("\u018f\u0205\u0205\u020b\u020b\4\2\u0126\u0126\u0162\u0162")
        buf.write("\4\2\u0108\u0108\u0170\u0170\4\2\u0106\u0106\u0155\u0155")
        buf.write("\5\2DDHHll\5\2&&\u0130\u0130\u014a\u014a\5\2&&\u012c\u012c")
        buf.write("\u0264\u0264\4\2EEOO\5\2\u014e\u014e\u01ad\u01ad\u01e4")
        buf.write("\u01e4\4\2==\u0088\u0088\3\2\u03b5\u03b6\5\2\u0149\u0149")
        buf.write("\u016b\u016b\u019c\u019c\4\2&&\u03b5\u03b6\b\2&&\u0116")
        buf.write("\u0116\u0118\u0118\u0130\u0130\u014a\u014a\u01c3\u01c3")
        buf.write("\3\2\u03b6\u03b7\4\2\7\7..\4\2\f\f\u0096\u0096\4\2\u00a7")
        buf.write("\u00a7\u021b\u021b\4\2\23\23}}\5\2\'\'AA\\\\\4\2\\\\\u011a")
        buf.write("\u011a\4\2\u0112\u0112\u0146\u0146\4\2XX\u01da\u01da\4")
        buf.write("\2\'\'\\\\\4\2\b\b,,\4\2\u00a3\u00a3\u0216\u0216\6\2\u0149")
        buf.write("\u0149\u016b\u016b\u019b\u019b\u01b9\u01b9\4\2\u0149\u0149")
        buf.write("\u019b\u019b\4\2\r\r))\5\2::CC\u00a1\u00a1\4\2  GG\4\2")
        buf.write("TT\u0080\u0080\4\2\b\b,-\3\2\u01f1\u01f2\4\2\u0151\u0151")
        buf.write("\u01e0\u01e0\4\2\u00bd\u00bd\u0173\u0173\7\2]]\u0178\u0179")
        buf.write("\u017b\u017b\u017f\u0187\u01c5\u01c5\6\2\u0175\u0176\u017a")
        buf.write("\u017a\u017c\u017d\u01c6\u01c6\5\2^^\u0174\u0174\u017e")
        buf.write("\u017e\4\2\u0164\u0164\u01f3\u01f3\4\2\u01ed\u01ed\u01ef")
        buf.write("\u01ef\4\2\u0102\u0102\u01f4\u01f4\4\2NN\u01d4\u01d4\4")
        buf.write("\2\u03bf\u03bf\u03ca\u03ca\4\2..\u0124\u0124\5\2\35\35")
        buf.write("\65\65\u009a\u009a\5\2qq\u0093\u0093\u014f\u014f\4\2Z")
        buf.write("Z\u009d\u009d\4\2\u010e\u010e\u01e5\u01e5\4\2$$\u0218")
        buf.write("\u0218\4\2dd\u0170\u0170\4\2\u0142\u0142\u01bf\u01bf\6")
        buf.write("\2\u00af\u00af\u00b1\u00b1\u00b4\u00b4\u01fc\u01fc\4\2")
        buf.write("\u0103\u0103\u01c7\u01c7\4\2<<DD\b\2qq\u0093\u0093\u0098")
        buf.write("\u0098\u013b\u013b\u014f\u014f\u0218\u0218\4\2\u0195\u0195")
        buf.write("\u01f9\u01f9\4\2\u0138\u0138\u021a\u021a\4\2qq\u014f\u014f")
        buf.write("\5\2EEPP\u015c\u015c\4\2\u01f9\u01f9\u0217\u0217\4\2\u011b")
        buf.write("\u011b\u01be\u01be\b\2\u00bd\u00bd\u0135\u0135\u0137\u0137")
        buf.write("\u0150\u0150\u01c4\u01c4\u01e6\u01e6\4\2)*\66\66\5\2\u0142")
        buf.write("\u0142\u01af\u01af\u02bc\u02bc\4\2\u0168\u0168\u0207\u0207")
        buf.write("\3\2\u03ca\u03cb\3\2\u025f\u0269\4\2\u03b5\u03b7\u03c0")
        buf.write("\u03c0\4\2\67\67\u0099\u0099\4\2ee\u03c3\u03c3\4\2\u00bb")
        buf.write("\u00bc\u00c3\u00c6\3\2\u00ab\u00b0\3\2\u00b1\u00b3\3\2")
        buf.write("\u00b4\u00b5\5\2\u00b6\u00b6\u00ba\u00ba\u00bf\u00c2\5")
        buf.write("\2\u00b7\u00b9\u00bd\u00be\u0104\u0104\4\2\u0085\u0085")
        buf.write("\u00c7\u00c7\3\2\u026e\u0274\4\2\u00bd\u00bd\u0199\u0199")
        buf.write("\4\2\u00b6\u00b7\u00b9\u00b9\4\2\u009e\u009e\u01e3\u01e3")
        buf.write("\4\2!!\u00e3\u00e6\3\2\u00ef\u00f0\5\2\20\20RR\u0097\u0097")
        buf.write("\4\2\u00bb\u00bb\u00bd\u00bd\5\2\r\r))\u0328\u0328\5\2")
        buf.write("\u00d3\u00d3\u00d9\u00da\u00df\u00df\5\2\u00d4\u00d6\u00db")
        buf.write("\u00de\u00e0\u00e2\4\2\u01a2\u01a2\u01b0\u01b0\4\2cc\u03aa")
        buf.write("\u03aa\5\2\67\67\u0099\u0099\u020f\u020f\4\2ww\u0081\u0081")
        buf.write("\5\2\b\b\u00fb\u00fb\u01e9\u01e9\5\2cc\u03a3\u03a4\u03aa")
        buf.write("\u03ab\3\2\u03a0\u03a6\3\2\u0237\u025e\3\2\u026a\u026d")
        buf.write("\3\2\u022e\u0236\3\2\u0226\u022d\5\2\u00b6\u00ba\u00c4")
        buf.write("\u00c4\u00c7\u00c7!\2\u00f6\u0106\u0108\u0109\u010b\u010e")
        buf.write("\u0110\u0127\u0129\u0132\u0134\u0140\u0143\u0143\u0145")
        buf.write("\u014a\u014c\u014c\u014e\u014f\u0151\u0153\u0155\u0155")
        buf.write("\u0157\u0157\u0159\u015f\u0161\u0167\u0169\u018d\u018f")
        buf.write("\u0192\u0194\u019a\u019c\u01a5\u01a7\u01b1\u01b3\u01c3")
        buf.write("\u01c5\u01d2\u01d4\u01e5\u01e7\u01e9\u01eb\u0206\u0208")
        buf.write("\u0208\u020a\u020d\u020f\u020f\u0211\u0212\u0215\u0220")
        buf.write("\u0264\u0264\n\2TT\u0080\u0080\u00b6\u00b8\u00ba\u00ba")
        buf.write("\u00d7\u00d7\u00ee\u00ee\u0226\u022d\u026e\u0396\2\u1ad0")
        buf.write("\2\u0253\3\2\2\2\4\u0265\3\2\2\2\6\u027a\3\2\2\2\b\u027c")
        buf.write("\3\2\2\2\n\u02a1\3\2\2\2\f\u02ad\3\2\2\2\16\u02b8\3\2")
        buf.write("\2\2\20\u02c9\3\2\2\2\22\u02ce\3\2\2\2\24\u02da\3\2\2")
        buf.write("\2\26\u02f5\3\2\2\2\30\u02fb\3\2\2\2\32\u02fd\3\2\2\2")
        buf.write("\34\u0309\3\2\2\2\36\u0327\3\2\2\2 \u0348\3\2\2\2\"\u037b")
        buf.write("\3\2\2\2$\u0395\3\2\2\2&\u03b1\3\2\2\2(\u0410\3\2\2\2")
        buf.write("*\u0412\3\2\2\2,\u0424\3\2\2\2.\u0461\3\2\2\2\60\u0474")
        buf.write("\3\2\2\2\62\u04a9\3\2\2\2\64\u04ab\3\2\2\2\66\u04d7\3")
        buf.write("\2\2\28\u04dd\3\2\2\2:\u04df\3\2\2\2<\u04f4\3\2\2\2>\u04fb")
        buf.write("\3\2\2\2@\u04fd\3\2\2\2B\u050b\3\2\2\2D\u050d\3\2\2\2")
        buf.write("F\u0511\3\2\2\2H\u052b\3\2\2\2J\u053b\3\2\2\2L\u053d\3")
        buf.write("\2\2\2N\u054d\3\2\2\2P\u054f\3\2\2\2R\u0569\3\2\2\2T\u05a7")
        buf.write("\3\2\2\2V\u05a9\3\2\2\2X\u05c3\3\2\2\2Z\u05cb\3\2\2\2")
        buf.write("\\\u05e9\3\2\2\2^\u067e\3\2\2\2`\u0680\3\2\2\2b\u0683")
        buf.write("\3\2\2\2d\u06cd\3\2\2\2f\u06e4\3\2\2\2h\u072e\3\2\2\2")
        buf.write("j\u0730\3\2\2\2l\u0765\3\2\2\2n\u0779\3\2\2\2p\u077b\3")
        buf.write("\2\2\2r\u079e\3\2\2\2t\u07a7\3\2\2\2v\u07ae\3\2\2\2x\u07c5")
        buf.write("\3\2\2\2z\u07ce\3\2\2\2|\u07dd\3\2\2\2~\u07f1\3\2\2\2")
        buf.write("\u0080\u0805\3\2\2\2\u0082\u0957\3\2\2\2\u0084\u0959\3")
        buf.write("\2\2\2\u0086\u0960\3\2\2\2\u0088\u0967\3\2\2\2\u008a\u097d")
        buf.write("\3\2\2\2\u008c\u0985\3\2\2\2\u008e\u098c\3\2\2\2\u0090")
        buf.write("\u0993\3\2\2\2\u0092\u099a\3\2\2\2\u0094\u09a6\3\2\2\2")
        buf.write("\u0096\u09b0\3\2\2\2\u0098\u09b7\3\2\2\2\u009a\u09c7\3")
        buf.write("\2\2\2\u009c\u09d6\3\2\2\2\u009e\u09dc\3\2\2\2\u00a0\u09e8")
        buf.write("\3\2\2\2\u00a2\u09ea\3\2\2\2\u00a4\u09f1\3\2\2\2\u00a6")
        buf.write("\u09f3\3\2\2\2\u00a8\u0a25\3\2\2\2\u00aa\u0a81\3\2\2\2")
        buf.write("\u00ac\u0abc\3\2\2\2\u00ae\u0b14\3\2\2\2\u00b0\u0b18\3")
        buf.write("\2\2\2\u00b2\u0b29\3\2\2\2\u00b4\u0b2b\3\2\2\2\u00b6\u0b31")
        buf.write("\3\2\2\2\u00b8\u0b39\3\2\2\2\u00ba\u0b3b\3\2\2\2\u00bc")
        buf.write("\u0b59\3\2\2\2\u00be\u0b90\3\2\2\2\u00c0\u0b99\3\2\2\2")
        buf.write("\u00c2\u0bad\3\2\2\2\u00c4\u0bb9\3\2\2\2\u00c6\u0bbd\3")
        buf.write("\2\2\2\u00c8\u0bde\3\2\2\2\u00ca\u0bf3\3\2\2\2\u00cc\u0bfd")
        buf.write("\3\2\2\2\u00ce\u0c01\3\2\2\2\u00d0\u0c1a\3\2\2\2\u00d2")
        buf.write("\u0c44\3\2\2\2\u00d4\u0c46\3\2\2\2\u00d6\u0c55\3\2\2\2")
        buf.write("\u00d8\u0c83\3\2\2\2\u00da\u0c85\3\2\2\2\u00dc\u0c8f\3")
        buf.write("\2\2\2\u00de\u0c99\3\2\2\2\u00e0\u0c9b\3\2\2\2\u00e2\u0caf")
        buf.write("\3\2\2\2\u00e4\u0cc0\3\2\2\2\u00e6\u0cc6\3\2\2\2\u00e8")
        buf.write("\u0cd6\3\2\2\2\u00ea\u0cda\3\2\2\2\u00ec\u0d00\3\2\2\2")
        buf.write("\u00ee\u0d38\3\2\2\2\u00f0\u0d3a\3\2\2\2\u00f2\u0d54\3")
        buf.write("\2\2\2\u00f4\u0d58\3\2\2\2\u00f6\u0d65\3\2\2\2\u00f8\u0d71")
        buf.write("\3\2\2\2\u00fa\u0d75\3\2\2\2\u00fc\u0d86\3\2\2\2\u00fe")
        buf.write("\u0d97\3\2\2\2\u0100\u0d9a\3\2\2\2\u0102\u0da4\3\2\2\2")
        buf.write("\u0104\u0da8\3\2\2\2\u0106\u0db2\3\2\2\2\u0108\u0db5\3")
        buf.write("\2\2\2\u010a\u0dba\3\2\2\2\u010c\u0dce\3\2\2\2\u010e\u0dd0")
        buf.write("\3\2\2\2\u0110\u0de1\3\2\2\2\u0112\u0dea\3\2\2\2\u0114")
        buf.write("\u0df3\3\2\2\2\u0116\u0df5\3\2\2\2\u0118\u0e03\3\2\2\2")
        buf.write("\u011a\u0e0e\3\2\2\2\u011c\u0e17\3\2\2\2\u011e\u0e1a\3")
        buf.write("\2\2\2\u0120\u0e22\3\2\2\2\u0122\u0e3b\3\2\2\2\u0124\u0e47")
        buf.write("\3\2\2\2\u0126\u0e4a\3\2\2\2\u0128\u0e6a\3\2\2\2\u012a")
        buf.write("\u0e6c\3\2\2\2\u012c\u0e6e\3\2\2\2\u012e\u0e70\3\2\2\2")
        buf.write("\u0130\u0e72\3\2\2\2\u0132\u0ea0\3\2\2\2\u0134\u0ea2\3")
        buf.write("\2\2\2\u0136\u0eb6\3\2\2\2\u0138\u0ec4\3\2\2\2\u013a\u0ecf")
        buf.write("\3\2\2\2\u013c\u0ed1\3\2\2\2\u013e\u0ed7\3\2\2\2\u0140")
        buf.write("\u0ee1\3\2\2\2\u0142\u0ee5\3\2\2\2\u0144\u0eec\3\2\2\2")
        buf.write("\u0146\u0ef0\3\2\2\2\u0148\u0ef6\3\2\2\2\u014a\u0efb\3")
        buf.write("\2\2\2\u014c\u0f01\3\2\2\2\u014e\u0f07\3\2\2\2\u0150\u0f0c")
        buf.write("\3\2\2\2\u0152\u0f3a\3\2\2\2\u0154\u0f4f\3\2\2\2\u0156")
        buf.write("\u0f68\3\2\2\2\u0158\u0f6b\3\2\2\2\u015a\u0f71\3\2\2\2")
        buf.write("\u015c\u0f81\3\2\2\2\u015e\u0f90\3\2\2\2\u0160\u0f96\3")
        buf.write("\2\2\2\u0162\u0fb4\3\2\2\2\u0164\u0fb6\3\2\2\2\u0166\u0fbd")
        buf.write("\3\2\2\2\u0168\u0fc9\3\2\2\2\u016a\u0fcf\3\2\2\2\u016c")
        buf.write("\u0fe8\3\2\2\2\u016e\u0fec\3\2\2\2\u0170\u0ff0\3\2\2\2")
        buf.write("\u0172\u0ffb\3\2\2\2\u0174\u103c\3\2\2\2\u0176\u1074\3")
        buf.write("\2\2\2\u0178\u1076\3\2\2\2\u017a\u1083\3\2\2\2\u017c\u10b5")
        buf.write("\3\2\2\2\u017e\u10c7\3\2\2\2\u0180\u10f9\3\2\2\2\u0182")
        buf.write("\u10fb\3\2\2\2\u0184\u1108\3\2\2\2\u0186\u1113\3\2\2\2")
        buf.write("\u0188\u1134\3\2\2\2\u018a\u113e\3\2\2\2\u018c\u1148\3")
        buf.write("\2\2\2\u018e\u114a\3\2\2\2\u0190\u114d\3\2\2\2\u0192\u117e")
        buf.write("\3\2\2\2\u0194\u118d\3\2\2\2\u0196\u118f\3\2\2\2\u0198")
        buf.write("\u1196\3\2\2\2\u019a\u119f\3\2\2\2\u019c\u11a5\3\2\2\2")
        buf.write("\u019e\u11ac\3\2\2\2\u01a0\u11c2\3\2\2\2\u01a2\u11c4\3")
        buf.write("\2\2\2\u01a4\u11cf\3\2\2\2\u01a6\u11d5\3\2\2\2\u01a8\u11fe")
        buf.write("\3\2\2\2\u01aa\u1297\3\2\2\2\u01ac\u12a3\3\2\2\2\u01ae")
        buf.write("\u12b2\3\2\2\2\u01b0\u12b8\3\2\2\2\u01b2\u12cb\3\2\2\2")
        buf.write("\u01b4\u12d5\3\2\2\2\u01b6\u12e3\3\2\2\2\u01b8\u12e5\3")
        buf.write("\2\2\2\u01ba\u12e8\3\2\2\2\u01bc\u12fe\3\2\2\2\u01be\u130a")
        buf.write("\3\2\2\2\u01c0\u1313\3\2\2\2\u01c2\u131f\3\2\2\2\u01c4")
        buf.write("\u1323\3\2\2\2\u01c6\u1325\3\2\2\2\u01c8\u1351\3\2\2\2")
        buf.write("\u01ca\u1353\3\2\2\2\u01cc\u136a\3\2\2\2\u01ce\u1370\3")
        buf.write("\2\2\2\u01d0\u1378\3\2\2\2\u01d2\u137b\3\2\2\2\u01d4\u1388")
        buf.write("\3\2\2\2\u01d6\u138a\3\2\2\2\u01d8\u1390\3\2\2\2\u01da")
        buf.write("\u1392\3\2\2\2\u01dc\u1399\3\2\2\2\u01de\u13a3\3\2\2\2")
        buf.write("\u01e0\u13a5\3\2\2\2\u01e2\u13ab\3\2\2\2\u01e4\u13af\3")
        buf.write("\2\2\2\u01e6\u13b1\3\2\2\2\u01e8\u13b3\3\2\2\2\u01ea\u13c5")
        buf.write("\3\2\2\2\u01ec\u13d5\3\2\2\2\u01ee\u13d9\3\2\2\2\u01f0")
        buf.write("\u13de\3\2\2\2\u01f2\u13e9\3\2\2\2\u01f4\u13ee\3\2\2\2")
        buf.write("\u01f6\u13f0\3\2\2\2\u01f8\u13f4\3\2\2\2\u01fa\u140d\3")
        buf.write("\2\2\2\u01fc\u140f\3\2\2\2\u01fe\u1412\3\2\2\2\u0200\u1417")
        buf.write("\3\2\2\2\u0202\u1425\3\2\2\2\u0204\u1472\3\2\2\2\u0206")
        buf.write("\u148a\3\2\2\2\u0208\u148c\3\2\2\2\u020a\u1490\3\2\2\2")
        buf.write("\u020c\u1496\3\2\2\2\u020e\u149e\3\2\2\2\u0210\u14a6\3")
        buf.write("\2\2\2\u0212\u14ae\3\2\2\2\u0214\u14bf\3\2\2\2\u0216\u14ca")
        buf.write("\3\2\2\2\u0218\u14d2\3\2\2\2\u021a\u14da\3\2\2\2\u021c")
        buf.write("\u14e2\3\2\2\2\u021e\u14ec\3\2\2\2\u0220\u14ee\3\2\2\2")
        buf.write("\u0222\u14f1\3\2\2\2\u0224\u1506\3\2\2\2\u0226\u15ad\3")
        buf.write("\2\2\2\u0228\u15c3\3\2\2\2\u022a\u15fd\3\2\2\2\u022c\u1615")
        buf.write("\3\2\2\2\u022e\u1617\3\2\2\2\u0230\u1620\3\2\2\2\u0232")
        buf.write("\u1632\3\2\2\2\u0234\u163f\3\2\2\2\u0236\u164a\3\2\2\2")
        buf.write("\u0238\u16a7\3\2\2\2\u023a\u16b6\3\2\2\2\u023c\u16c6\3")
        buf.write("\2\2\2\u023e\u16cf\3\2\2\2\u0240\u16d8\3\2\2\2\u0242\u16da")
        buf.write("\3\2\2\2\u0244\u16dc\3\2\2\2\u0246\u16de\3\2\2\2\u0248")
        buf.write("\u16e0\3\2\2\2\u024a\u16e2\3\2\2\2\u024c\u16e4\3\2\2\2")
        buf.write("\u024e\u16e6\3\2\2\2\u0250\u16e8\3\2\2\2\u0252\u0254\5")
        buf.write("\4\3\2\u0253\u0252\3\2\2\2\u0253\u0254\3\2\2\2\u0254\u0257")
        buf.write("\3\2\2\2\u0255\u0256\7\u03a4\2\2\u0256\u0258\7\u03a4\2")
        buf.write("\2\u0257\u0255\3\2\2\2\u0257\u0258\3\2\2\2\u0258\u0259")
        buf.write("\3\2\2\2\u0259\u025a\7\2\2\3\u025a\3\3\2\2\2\u025b\u025e")
        buf.write("\5\6\4\2\u025c\u025d\7\u03a4\2\2\u025d\u025f\7\u03a4\2")
        buf.write("\2\u025e\u025c\3\2\2\2\u025e\u025f\3\2\2\2\u025f\u0260")
        buf.write("\3\2\2\2\u0260\u0261\7\u03b3\2\2\u0261\u0264\3\2\2\2\u0262")
        buf.write("\u0264\5\b\5\2\u0263\u025b\3\2\2\2\u0263\u0262\3\2\2\2")
        buf.write("\u0264\u0267\3\2\2\2\u0265\u0263\3\2\2\2\u0265\u0266\3")
        buf.write("\2\2\2\u0266\u0271\3\2\2\2\u0267\u0265\3\2\2\2\u0268\u026e")
        buf.write("\5\6\4\2\u0269\u026a\7\u03a4\2\2\u026a\u026c\7\u03a4\2")
        buf.write("\2\u026b\u0269\3\2\2\2\u026b\u026c\3\2\2\2\u026c\u026d")
        buf.write("\3\2\2\2\u026d\u026f\7\u03b3\2\2\u026e\u026b\3\2\2\2\u026e")
        buf.write("\u026f\3\2\2\2\u026f\u0272\3\2\2\2\u0270\u0272\5\b\5\2")
        buf.write("\u0271\u0268\3\2\2\2\u0271\u0270\3\2\2\2\u0272\5\3\2\2")
        buf.write("\2\u0273\u027b\5\n\6\2\u0274\u027b\5\f\7\2\u0275\u027b")
        buf.write("\5\16\b\2\u0276\u027b\5\20\t\2\u0277\u027b\5\22\n\2\u0278")
        buf.write("\u027b\5\26\f\2\u0279\u027b\5\30\r\2\u027a\u0273\3\2\2")
        buf.write("\2\u027a\u0274\3\2\2\2\u027a\u0275\3\2\2\2\u027a\u0276")
        buf.write("\3\2\2\2\u027a\u0277\3\2\2\2\u027a\u0278\3\2\2\2\u027a")
        buf.write("\u0279\3\2\2\2\u027b\7\3\2\2\2\u027c\u027d\7\u03b3\2\2")
        buf.write("\u027d\t\3\2\2\2\u027e\u02a2\5\32\16\2\u027f\u02a2\5\34")
        buf.write("\17\2\u0280\u02a2\5\36\20\2\u0281\u02a2\5 \21\2\u0282")
        buf.write("\u02a2\5\"\22\2\u0283\u02a2\5$\23\2\u0284\u02a2\5&\24")
        buf.write("\2\u0285\u02a2\5(\25\2\u0286\u02a2\5*\26\2\u0287\u02a2")
        buf.write("\5,\27\2\u0288\u02a2\5.\30\2\u0289\u02a2\5\60\31\2\u028a")
        buf.write("\u02a2\5n8\2\u028b\u02a2\5p9\2\u028c\u02a2\5r:\2\u028d")
        buf.write("\u02a2\5t;\2\u028e\u02a2\5v<\2\u028f\u02a2\5x=\2\u0290")
        buf.write("\u02a2\5z>\2\u0291\u02a2\5|?\2\u0292\u02a2\5~@\2\u0293")
        buf.write("\u02a2\5\u0080A\2\u0294\u02a2\5\u0084C\2\u0295\u02a2\5")
        buf.write("\u0086D\2\u0296\u02a2\5\u0088E\2\u0297\u02a2\5\u008aF")
        buf.write("\2\u0298\u02a2\5\u008cG\2\u0299\u02a2\5\u008eH\2\u029a")
        buf.write("\u02a2\5\u0090I\2\u029b\u02a2\5\u0092J\2\u029c\u02a2\5")
        buf.write("\u0094K\2\u029d\u02a2\5\u0096L\2\u029e\u02a2\5\u0098M")
        buf.write("\2\u029f\u02a2\5\u009aN\2\u02a0\u02a2\5\u009cO\2\u02a1")
        buf.write("\u027e\3\2\2\2\u02a1\u027f\3\2\2\2\u02a1\u0280\3\2\2\2")
        buf.write("\u02a1\u0281\3\2\2\2\u02a1\u0282\3\2\2\2\u02a1\u0283\3")
        buf.write("\2\2\2\u02a1\u0284\3\2\2\2\u02a1\u0285\3\2\2\2\u02a1\u0286")
        buf.write("\3\2\2\2\u02a1\u0287\3\2\2\2\u02a1\u0288\3\2\2\2\u02a1")
        buf.write("\u0289\3\2\2\2\u02a1\u028a\3\2\2\2\u02a1\u028b\3\2\2\2")
        buf.write("\u02a1\u028c\3\2\2\2\u02a1\u028d\3\2\2\2\u02a1\u028e\3")
        buf.write("\2\2\2\u02a1\u028f\3\2\2\2\u02a1\u0290\3\2\2\2\u02a1\u0291")
        buf.write("\3\2\2\2\u02a1\u0292\3\2\2\2\u02a1\u0293\3\2\2\2\u02a1")
        buf.write("\u0294\3\2\2\2\u02a1\u0295\3\2\2\2\u02a1\u0296\3\2\2\2")
        buf.write("\u02a1\u0297\3\2\2\2\u02a1\u0298\3\2\2\2\u02a1\u0299\3")
        buf.write("\2\2\2\u02a1\u029a\3\2\2\2\u02a1\u029b\3\2\2\2\u02a1\u029c")
        buf.write("\3\2\2\2\u02a1\u029d\3\2\2\2\u02a1\u029e\3\2\2\2\u02a1")
        buf.write("\u029f\3\2\2\2\u02a1\u02a0\3\2\2\2\u02a2\13\3\2\2\2\u02a3")
        buf.write("\u02ae\5\u00aeX\2\u02a4\u02ae\5\u00a6T\2\u02a5\u02ae\5")
        buf.write("\u00b0Y\2\u02a6\u02ae\5\u00a0Q\2\u02a7\u02ae\5\u00acW")
        buf.write("\2\u02a8\u02ae\5\u009eP\2\u02a9\u02ae\5\u00a8U\2\u02aa")
        buf.write("\u02ae\5\u00aaV\2\u02ab\u02ae\5\u00a2R\2\u02ac\u02ae\5")
        buf.write("\u00a4S\2\u02ad\u02a3\3\2\2\2\u02ad\u02a4\3\2\2\2\u02ad")
        buf.write("\u02a5\3\2\2\2\u02ad\u02a6\3\2\2\2\u02ad\u02a7\3\2\2\2")
        buf.write("\u02ad\u02a8\3\2\2\2\u02ad\u02a9\3\2\2\2\u02ad\u02aa\3")
        buf.write("\2\2\2\u02ad\u02ab\3\2\2\2\u02ad\u02ac\3\2\2\2\u02ae\r")
        buf.write("\3\2\2\2\u02af\u02b9\5\u00f6|\2\u02b0\u02b9\5\u00f8}\2")
        buf.write("\u02b1\u02b9\5\u00fa~\2\u02b2\u02b9\5\u00fc\177\2\u02b3")
        buf.write("\u02b9\5\u00fe\u0080\2\u02b4\u02b9\5\u0100\u0081\2\u02b5")
        buf.write("\u02b9\5\u0102\u0082\2\u02b6\u02b9\5\u0104\u0083\2\u02b7")
        buf.write("\u02b9\5\u0106\u0084\2\u02b8\u02af\3\2\2\2\u02b8\u02b0")
        buf.write("\3\2\2\2\u02b8\u02b1\3\2\2\2\u02b8\u02b2\3\2\2\2\u02b8")
        buf.write("\u02b3\3\2\2\2\u02b8\u02b4\3\2\2\2\u02b8\u02b5\3\2\2\2")
        buf.write("\u02b8\u02b6\3\2\2\2\u02b8\u02b7\3\2\2\2\u02b9\17\3\2")
        buf.write("\2\2\u02ba\u02ca\5\u0116\u008c\2\u02bb\u02ca\5\u0118\u008d")
        buf.write("\2\u02bc\u02ca\5\u011a\u008e\2\u02bd\u02ca\5\u011c\u008f")
        buf.write("\2\u02be\u02ca\5\u011e\u0090\2\u02bf\u02ca\5\u0120\u0091")
        buf.write("\2\u02c0\u02ca\5\u0122\u0092\2\u02c1\u02ca\5\u0124\u0093")
        buf.write("\2\u02c2\u02ca\5\u0126\u0094\2\u02c3\u02ca\5\u013c\u009f")
        buf.write("\2\u02c4\u02ca\5\u013e\u00a0\2\u02c5\u02ca\5\u0140\u00a1")
        buf.write("\2\u02c6\u02ca\5\u0142\u00a2\2\u02c7\u02ca\5\u0144\u00a3")
        buf.write("\2\u02c8\u02ca\5\u0146\u00a4\2\u02c9\u02ba\3\2\2\2\u02c9")
        buf.write("\u02bb\3\2\2\2\u02c9\u02bc\3\2\2\2\u02c9\u02bd\3\2\2\2")
        buf.write("\u02c9\u02be\3\2\2\2\u02c9\u02bf\3\2\2\2\u02c9\u02c0\3")
        buf.write("\2\2\2\u02c9\u02c1\3\2\2\2\u02c9\u02c2\3\2\2\2\u02c9\u02c3")
        buf.write("\3\2\2\2\u02c9\u02c4\3\2\2\2\u02c9\u02c5\3\2\2\2\u02c9")
        buf.write("\u02c6\3\2\2\2\u02c9\u02c7\3\2\2\2\u02c9\u02c8\3\2\2\2")
        buf.write("\u02ca\21\3\2\2\2\u02cb\u02cf\5\u0148\u00a5\2\u02cc\u02cf")
        buf.write("\5\u014a\u00a6\2\u02cd\u02cf\5\u014c\u00a7\2\u02ce\u02cb")
        buf.write("\3\2\2\2\u02ce\u02cc\3\2\2\2\u02ce\u02cd\3\2\2\2\u02cf")
        buf.write("\23\3\2\2\2\u02d0\u02db\5\u0150\u00a9\2\u02d1\u02db\5")
        buf.write("\u0152\u00aa\2\u02d2\u02db\5\u0154\u00ab\2\u02d3\u02db")
        buf.write("\5\u0158\u00ad\2\u02d4\u02db\5\u015a\u00ae\2\u02d5\u02db")
        buf.write("\5\u015c\u00af\2\u02d6\u02db\5\u0160\u00b1\2\u02d7\u02db")
        buf.write("\5\u0156\u00ac\2\u02d8\u02db\5\u015e\u00b0\2\u02d9\u02db")
        buf.write("\5\u0162\u00b2\2\u02da\u02d0\3\2\2\2\u02da\u02d1\3\2\2")
        buf.write("\2\u02da\u02d2\3\2\2\2\u02da\u02d3\3\2\2\2\u02da\u02d4")
        buf.write("\3\2\2\2\u02da\u02d5\3\2\2\2\u02da\u02d6\3\2\2\2\u02da")
        buf.write("\u02d7\3\2\2\2\u02da\u02d8\3\2\2\2\u02da\u02d9\3\2\2\2")
        buf.write("\u02db\25\3\2\2\2\u02dc\u02f6\5\u0174\u00bb\2\u02dd\u02f6")
        buf.write("\5\u0176\u00bc\2\u02de\u02f6\5\u0178\u00bd\2\u02df\u02f6")
        buf.write("\5\u017a\u00be\2\u02e0\u02f6\5\u017c\u00bf\2\u02e1\u02f6")
        buf.write("\5\u017e\u00c0\2\u02e2\u02f6\5\u0180\u00c1\2\u02e3\u02f6")
        buf.write("\5\u0182\u00c2\2\u02e4\u02f6\5\u0196\u00cc\2\u02e5\u02f6")
        buf.write("\5\u0198\u00cd\2\u02e6\u02f6\5\u019a\u00ce\2\u02e7\u02f6")
        buf.write("\5\u019c\u00cf\2\u02e8\u02f6\5\u019e\u00d0\2\u02e9\u02f6")
        buf.write("\5\u01a2\u00d2\2\u02ea\u02f6\5\u01a4\u00d3\2\u02eb\u02f6")
        buf.write("\5\u01a6\u00d4\2\u02ec\u02f6\5\u01a8\u00d5\2\u02ed\u02f6")
        buf.write("\5\u01aa\u00d6\2\u02ee\u02f6\5\u01b8\u00dd\2\u02ef\u02f6")
        buf.write("\5\u01ba\u00de\2\u02f0\u02f6\5\u01bc\u00df\2\u02f1\u02f6")
        buf.write("\5\u01be\u00e0\2\u02f2\u02f6\5\u01c0\u00e1\2\u02f3\u02f6")
        buf.write("\5\u01c2\u00e2\2\u02f4\u02f6\5\u01c4\u00e3\2\u02f5\u02dc")
        buf.write("\3\2\2\2\u02f5\u02dd\3\2\2\2\u02f5\u02de\3\2\2\2\u02f5")
        buf.write("\u02df\3\2\2\2\u02f5\u02e0\3\2\2\2\u02f5\u02e1\3\2\2\2")
        buf.write("\u02f5\u02e2\3\2\2\2\u02f5\u02e3\3\2\2\2\u02f5\u02e4\3")
        buf.write("\2\2\2\u02f5\u02e5\3\2\2\2\u02f5\u02e6\3\2\2\2\u02f5\u02e7")
        buf.write("\3\2\2\2\u02f5\u02e8\3\2\2\2\u02f5\u02e9\3\2\2\2\u02f5")
        buf.write("\u02ea\3\2\2\2\u02f5\u02eb\3\2\2\2\u02f5\u02ec\3\2\2\2")
        buf.write("\u02f5\u02ed\3\2\2\2\u02f5\u02ee\3\2\2\2\u02f5\u02ef\3")
        buf.write("\2\2\2\u02f5\u02f0\3\2\2\2\u02f5\u02f1\3\2\2\2\u02f5\u02f2")
        buf.write("\3\2\2\2\u02f5\u02f3\3\2\2\2\u02f5\u02f4\3\2\2\2\u02f6")
        buf.write("\27\3\2\2\2\u02f7\u02fc\5\u01cc\u00e7\2\u02f8\u02fc\5")
        buf.write("\u01ce\u00e8\2\u02f9\u02fc\5\u01d0\u00e9\2\u02fa\u02fc")
        buf.write("\5\u01d2\u00ea\2\u02fb\u02f7\3\2\2\2\u02fb\u02f8\3\2\2")
        buf.write("\2\u02fb\u02f9\3\2\2\2\u02fb\u02fa\3\2\2\2\u02fc\31\3")
        buf.write("\2\2\2\u02fd\u02fe\7\37\2\2\u02fe\u0300\t\2\2\2\u02ff")
        buf.write("\u0301\5\u0222\u0112\2\u0300\u02ff\3\2\2\2\u0300\u0301")
        buf.write("\3\2\2\2\u0301\u0302\3\2\2\2\u0302\u0306\5\u01f0\u00f9")
        buf.write("\2\u0303\u0305\5\62\32\2\u0304\u0303\3\2\2\2\u0305\u0308")
        buf.write("\3\2\2\2\u0306\u0304\3\2\2\2\u0306\u0307\3\2\2\2\u0307")
        buf.write("\33\3\2\2\2\u0308\u0306\3\2\2\2\u0309\u030b\7\37\2\2\u030a")
        buf.write("\u030c\5\64\33\2\u030b\u030a\3\2\2\2\u030b\u030c\3\2\2")
        buf.write("\2\u030c\u030d\3\2\2\2\u030d\u030f\7\u013b\2\2\u030e\u0310")
        buf.write("\5\u0222\u0112\2\u030f\u030e\3\2\2\2\u030f\u0310\3\2\2")
        buf.write("\2\u0310\u0311\3\2\2\2\u0311\u0312\5\u01d6\u00ec\2\u0312")
        buf.write("\u0313\7f\2\2\u0313\u0314\7\u01dd\2\2\u0314\u031b\5\66")
        buf.write("\34\2\u0315\u0316\7f\2\2\u0316\u0318\7\u0117\2\2\u0317")
        buf.write("\u0319\7c\2\2\u0318\u0317\3\2\2\2\u0318\u0319\3\2\2\2")
        buf.write("\u0319\u031a\3\2\2\2\u031a\u031c\7\u01b8\2\2\u031b\u0315")
        buf.write("\3\2\2\2\u031b\u031c\3\2\2\2\u031c\u031e\3\2\2\2\u031d")
        buf.write("\u031f\5> \2\u031e\u031d\3\2\2\2\u031e\u031f\3\2\2\2\u031f")
        buf.write("\u0322\3\2\2\2\u0320\u0321\7\u0114\2\2\u0321\u0323\7\u03bf")
        buf.write("\2\2\u0322\u0320\3\2\2\2\u0322\u0323\3\2\2\2\u0323\u0324")
        buf.write("\3\2\2\2\u0324\u0325\7\u012d\2\2\u0325\u0326\5\u014e\u00a8")
        buf.write("\2\u0326\35\3\2\2\2\u0327\u0329\7\37\2\2\u0328\u032a\t")
        buf.write("\3\2\2\u0329\u0328\3\2\2\2\u0329\u032a\3\2\2\2\u032a\u032c")
        buf.write("\3\2\2\2\u032b\u032d\t\4\2\2\u032c\u032b\3\2\2\2\u032c")
        buf.write("\u032d\3\2\2\2\u032d\u032e\3\2\2\2\u032e\u032f\7E\2\2")
        buf.write("\u032f\u0331\5\u01f0\u00f9\2\u0330\u0332\5@!\2\u0331\u0330")
        buf.write("\3\2\2\2\u0331\u0332\3\2\2\2\u0332\u0333\3\2\2\2\u0333")
        buf.write("\u0334\7f\2\2\u0334\u0335\5\u01d8\u00ed\2\u0335\u0339")
        buf.write("\5\u0214\u010b\2\u0336\u0338\5B\"\2\u0337\u0336\3\2\2")
        buf.write("\2\u0338\u033b\3\2\2\2\u0339\u0337\3\2\2\2\u0339\u033a")
        buf.write("\3\2\2\2\u033a\u0346\3\2\2\2\u033b\u0339\3\2\2\2\u033c")
        buf.write("\u033e\7\u00fa\2\2\u033d\u033f\7\u03a7\2\2\u033e\u033d")
        buf.write("\3\2\2\2\u033e\u033f\3\2\2\2\u033f\u0340\3\2\2\2\u0340")
        buf.write("\u0347\t\5\2\2\u0341\u0343\7Z\2\2\u0342\u0344\7\u03a7")
        buf.write("\2\2\u0343\u0342\3\2\2\2\u0343\u0344\3\2\2\2\u0344\u0345")
        buf.write("\3\2\2\2\u0345\u0347\t\6\2\2\u0346\u033c\3\2\2\2\u0346")
        buf.write("\u0341\3\2\2\2\u0346\u0347\3\2\2\2\u0347\37\3\2\2\2\u0348")
        buf.write("\u0349\7\37\2\2\u0349\u034a\7\u0171\2\2\u034a\u034b\7")
        buf.write("?\2\2\u034b\u034c\5\u01f0\u00f9\2\u034c\u034d\7\7\2\2")
        buf.write("\u034d\u034e\7\u020c\2\2\u034e\u0354\7\u03bf\2\2\u034f")
        buf.write("\u0351\7\u015d\2\2\u0350\u0352\7\u03a7\2\2\u0351\u0350")
        buf.write("\3\2\2\2\u0351\u0352\3\2\2\2\u0352\u0353\3\2\2\2\u0353")
        buf.write("\u0355\5\u01f8\u00fd\2\u0354\u034f\3\2\2\2\u0354\u0355")
        buf.write("\3\2\2\2\u0355\u035b\3\2\2\2\u0356\u0358\7\u020d\2\2\u0357")
        buf.write("\u0359\7\u03a7\2\2\u0358\u0357\3\2\2\2\u0358\u0359\3\2")
        buf.write("\2\2\u0359\u035a\3\2\2\2\u035a\u035c\5\u01f8\u00fd\2\u035b")
        buf.write("\u0356\3\2\2\2\u035b\u035c\3\2\2\2\u035c\u0362\3\2\2\2")
        buf.write("\u035d\u035f\7\u01c2\2\2\u035e\u0360\7\u03a7\2\2\u035f")
        buf.write("\u035e\3\2\2\2\u035f\u0360\3\2\2\2\u0360\u0361\3\2\2\2")
        buf.write("\u0361\u0363\5\u01f8\u00fd\2\u0362\u035d\3\2\2\2\u0362")
        buf.write("\u0363\3\2\2\2\u0363\u0369\3\2\2\2\u0364\u0366\7\u019d")
        buf.write("\2\2\u0365\u0367\7\u03a7\2\2\u0366\u0365\3\2\2\2\u0366")
        buf.write("\u0367\3\2\2\2\u0367\u0368\3\2\2\2\u0368\u036a\5\u01f0")
        buf.write("\u00f9\2\u0369\u0364\3\2\2\2\u0369\u036a\3\2\2\2\u036a")
        buf.write("\u036c\3\2\2\2\u036b\u036d\7\u0219\2\2\u036c\u036b\3\2")
        buf.write("\2\2\u036c\u036d\3\2\2\2\u036d\u0373\3\2\2\2\u036e\u0370")
        buf.write("\7\u0114\2\2\u036f\u0371\7\u03a7\2\2\u0370\u036f\3\2\2")
        buf.write("\2\u0370\u0371\3\2\2\2\u0371\u0372\3\2\2\2\u0372\u0374")
        buf.write("\7\u03bf\2\2\u0373\u036e\3\2\2\2\u0373\u0374\3\2\2\2\u0374")
        buf.write("\u0375\3\2\2\2\u0375\u0377\7\u0135\2\2\u0376\u0378\7\u03a7")
        buf.write("\2\2\u0377\u0376\3\2\2\2\u0377\u0378\3\2\2\2\u0378\u0379")
        buf.write("\3\2\2\2\u0379\u037a\5\u01e6\u00f4\2\u037a!\3\2\2\2\u037b")
        buf.write("\u037d\7\37\2\2\u037c\u037e\5\64\33\2\u037d\u037c\3\2")
        buf.write("\2\2\u037d\u037e\3\2\2\2\u037e\u037f\3\2\2\2\u037f\u0380")
        buf.write("\7q\2\2\u0380\u0381\5\u01d6\u00ec\2\u0381\u0383\7\u03b0")
        buf.write("\2\2\u0382\u0384\5D#\2\u0383\u0382\3\2\2\2\u0383\u0384")
        buf.write("\3\2\2\2\u0384\u0389\3\2\2\2\u0385\u0386\7\u03b2\2\2\u0386")
        buf.write("\u0388\5D#\2\u0387\u0385\3\2\2\2\u0388\u038b\3\2\2\2\u0389")
        buf.write("\u0387\3\2\2\2\u0389\u038a\3\2\2\2\u038a\u038c\3\2\2\2")
        buf.write("\u038b\u0389\3\2\2\2\u038c\u0390\7\u03b1\2\2\u038d\u038f")
        buf.write("\5H%\2\u038e\u038d\3\2\2\2\u038f\u0392\3\2\2\2\u0390\u038e")
        buf.write("\3\2\2\2\u0390\u0391\3\2\2\2\u0391\u0393\3\2\2\2\u0392")
        buf.write("\u0390\3\2\2\2\u0393\u0394\5\u014e\u00a8\2\u0394#\3\2")
        buf.write("\2\2\u0395\u0397\7\37\2\2\u0396\u0398\5\64\33\2\u0397")
        buf.write("\u0396\3\2\2\2\u0397\u0398\3\2\2\2\u0398\u0399\3\2\2\2")
        buf.write("\u0399\u039a\7\u014f\2\2\u039a\u039b\5\u01d6\u00ec\2\u039b")
        buf.write("\u039d\7\u03b0\2\2\u039c\u039e\5F$\2\u039d\u039c\3\2\2")
        buf.write("\2\u039d\u039e\3\2\2\2\u039e\u03a3\3\2\2\2\u039f\u03a0")
        buf.write("\7\u03b2\2\2\u03a0\u03a2\5F$\2\u03a1\u039f\3\2\2\2\u03a2")
        buf.write("\u03a5\3\2\2\2\u03a3\u03a1\3\2\2\2\u03a3\u03a4\3\2\2\2")
        buf.write("\u03a4\u03a6\3\2\2\2\u03a5\u03a3\3\2\2\2\u03a6\u03a7\7")
        buf.write("\u03b1\2\2\u03a7\u03a8\7\u01d5\2\2\u03a8\u03ac\5\u0204")
        buf.write("\u0103\2\u03a9\u03ab\5H%\2\u03aa\u03a9\3\2\2\2\u03ab\u03ae")
        buf.write("\3\2\2\2\u03ac\u03aa\3\2\2\2\u03ac\u03ad\3\2\2\2\u03ad")
        buf.write("\u03af\3\2\2\2\u03ae\u03ac\3\2\2\2\u03af\u03b0\5\u014e")
        buf.write("\u00a8\2\u03b0%\3\2\2\2\u03b1\u03b2\7\37\2\2\u03b2\u03b3")
        buf.write("\7\u01df\2\2\u03b3\u03b4\5\u01f0\u00f9\2\u03b4\u03b5\7")
        buf.write(";\2\2\u03b5\u03b6\7\u0122\2\2\u03b6\u03b7\7\u021d\2\2")
        buf.write("\u03b7\u03b8\t\7\2\2\u03b8\u03b9\7\u01a8\2\2\u03b9\u03ba")
        buf.write("\7\u03b0\2\2\u03ba\u03bf\5J&\2\u03bb\u03bc\7\u03b2\2\2")
        buf.write("\u03bc\u03be\5J&\2\u03bd\u03bb\3\2\2\2\u03be\u03c1\3\2")
        buf.write("\2\2\u03bf\u03bd\3\2\2\2\u03bf\u03c0\3\2\2\2\u03c0\u03c2")
        buf.write("\3\2\2\2\u03c1\u03bf\3\2\2\2\u03c2\u03c3\7\u03b1\2\2\u03c3")
        buf.write("\'\3\2\2\2\u03c4\u03c6\7\37\2\2\u03c5\u03c7\7\u0204\2")
        buf.write("\2\u03c6\u03c5\3\2\2\2\u03c6\u03c7\3\2\2\2\u03c7\u03c8")
        buf.write("\3\2\2\2\u03c8\u03ca\7\u0093\2\2\u03c9\u03cb\5\u0222\u0112")
        buf.write("\2\u03ca\u03c9\3\2\2\2\u03ca\u03cb\3\2\2\2\u03cb\u03cc")
        buf.write("\3\2\2\2\u03cc\u03d4\5\u01d8\u00ed\2\u03cd\u03ce\7U\2")
        buf.write("\2\u03ce\u03d5\5\u01d8\u00ed\2\u03cf\u03d0\7\u03b0\2\2")
        buf.write("\u03d0\u03d1\7U\2\2\u03d1\u03d2\5\u01d8\u00ed\2\u03d2")
        buf.write("\u03d3\7\u03b1\2\2\u03d3\u03d5\3\2\2\2\u03d4\u03cd\3\2")
        buf.write("\2\2\u03d4\u03cf\3\2\2\2\u03d5\u0411\3\2\2\2\u03d6\u03d8")
        buf.write("\7\37\2\2\u03d7\u03d9\7\u0204\2\2\u03d8\u03d7\3\2\2\2")
        buf.write("\u03d8\u03d9\3\2\2\2\u03d9\u03da\3\2\2\2\u03da\u03dc\7")
        buf.write("\u0093\2\2\u03db\u03dd\5\u0222\u0112\2\u03dc\u03db\3\2")
        buf.write("\2\2\u03dc\u03dd\3\2\2\2\u03dd\u03de\3\2\2\2\u03de\u03df")
        buf.write("\5\u01d8\u00ed\2\u03df\u03ea\5L\'\2\u03e0\u03e7\5^\60")
        buf.write("\2\u03e1\u03e3\7\u03b2\2\2\u03e2\u03e1\3\2\2\2\u03e2\u03e3")
        buf.write("\3\2\2\2\u03e3\u03e4\3\2\2\2\u03e4\u03e6\5^\60\2\u03e5")
        buf.write("\u03e2\3\2\2\2\u03e6\u03e9\3\2\2\2\u03e7\u03e5\3\2\2\2")
        buf.write("\u03e7\u03e8\3\2\2\2\u03e8\u03eb\3\2\2\2\u03e9\u03e7\3")
        buf.write("\2\2\2\u03ea\u03e0\3\2\2\2\u03ea\u03eb\3\2\2\2\u03eb\u03ed")
        buf.write("\3\2\2\2\u03ec\u03ee\5b\62\2\u03ed\u03ec\3\2\2\2\u03ed")
        buf.write("\u03ee\3\2\2\2\u03ee\u03f0\3\2\2\2\u03ef\u03f1\t\b\2\2")
        buf.write("\u03f0\u03ef\3\2\2\2\u03f0\u03f1\3\2\2\2\u03f1\u03f3\3")
        buf.write("\2\2\2\u03f2\u03f4\7\f\2\2\u03f3\u03f2\3\2\2\2\u03f3\u03f4")
        buf.write("\3\2\2\2\u03f4\u03f5\3\2\2\2\u03f5\u03f6\5\u00aeX\2\u03f6")
        buf.write("\u0411\3\2\2\2\u03f7\u03f9\7\37\2\2\u03f8\u03fa\7\u0204")
        buf.write("\2\2\u03f9\u03f8\3\2\2\2\u03f9\u03fa\3\2\2\2\u03fa\u03fb")
        buf.write("\3\2\2\2\u03fb\u03fd\7\u0093\2\2\u03fc\u03fe\5\u0222\u0112")
        buf.write("\2\u03fd\u03fc\3\2\2\2\u03fd\u03fe\3\2\2\2\u03fe\u03ff")
        buf.write("\3\2\2\2\u03ff\u0400\5\u01d8\u00ed\2\u0400\u040b\5L\'")
        buf.write("\2\u0401\u0408\5^\60\2\u0402\u0404\7\u03b2\2\2\u0403\u0402")
        buf.write("\3\2\2\2\u0403\u0404\3\2\2\2\u0404\u0405\3\2\2\2\u0405")
        buf.write("\u0407\5^\60\2\u0406\u0403\3\2\2\2\u0407\u040a\3\2\2\2")
        buf.write("\u0408\u0406\3\2\2\2\u0408\u0409\3\2\2\2\u0409\u040c\3")
        buf.write("\2\2\2\u040a\u0408\3\2\2\2\u040b\u0401\3\2\2\2\u040b\u040c")
        buf.write("\3\2\2\2\u040c\u040e\3\2\2\2\u040d\u040f\5b\62\2\u040e")
        buf.write("\u040d\3\2\2\2\u040e\u040f\3\2\2\2\u040f\u0411\3\2\2\2")
        buf.write("\u0410\u03c4\3\2\2\2\u0410\u03d6\3\2\2\2\u0410\u03f7\3")
        buf.write("\2\2\2\u0411)\3\2\2\2\u0412\u0413\7\37\2\2\u0413\u0414")
        buf.write("\7\u0203\2\2\u0414\u0415\5\u01f0\u00f9\2\u0415\u0416\7")
        buf.write("\7\2\2\u0416\u0417\7\u0123\2\2\u0417\u041b\7\u03bf\2\2")
        buf.write("\u0418\u0419\7\u0147\2\2\u0419\u041a\7\u03a7\2\2\u041a")
        buf.write("\u041c\5\u01f8\u00fd\2\u041b\u0418\3\2\2\2\u041b\u041c")
        buf.write("\3\2\2\2\u041c\u0422\3\2\2\2\u041d\u041f\7\u0135\2\2\u041e")
        buf.write("\u0420\7\u03a7\2\2\u041f\u041e\3\2\2\2\u041f\u0420\3\2")
        buf.write("\2\2\u0420\u0421\3\2\2\2\u0421\u0423\5\u01e6\u00f4\2\u0422")
        buf.write("\u041d\3\2\2\2\u0422\u0423\3\2\2\2\u0423+\3\2\2\2\u0424")
        buf.write("\u0425\7\37\2\2\u0425\u0426\7\u0203\2\2\u0426\u0427\5")
        buf.write("\u01f0\u00f9\2\u0427\u0428\7\7\2\2\u0428\u0429\7\u0123")
        buf.write("\2\2\u0429\u042a\7\u03bf\2\2\u042a\u042b\7\u00a1\2\2\u042b")
        buf.write("\u042c\7\u0171\2\2\u042c\u042d\7?\2\2\u042d\u0433\5\u01f0")
        buf.write("\u00f9\2\u042e\u0430\7\u0143\2\2\u042f\u0431\7\u03a7\2")
        buf.write("\2\u0430\u042f\3\2\2\2\u0430\u0431\3\2\2\2\u0431\u0432")
        buf.write("\3\2\2\2\u0432\u0434\5\u01f8\u00fd\2\u0433\u042e\3\2\2")
        buf.write("\2\u0433\u0434\3\2\2\2\u0434\u043a\3\2\2\2\u0435\u0437")
        buf.write("\7\u015d\2\2\u0436\u0438\7\u03a7\2\2\u0437\u0436\3\2\2")
        buf.write("\2\u0437\u0438\3\2\2\2\u0438\u0439\3\2\2\2\u0439\u043b")
        buf.write("\5\u01f8\u00fd\2\u043a\u0435\3\2\2\2\u043a\u043b\3\2\2")
        buf.write("\2\u043b\u0441\3\2\2\2\u043c\u043e\7\u00ff\2\2\u043d\u043f")
        buf.write("\7\u03a7\2\2\u043e\u043d\3\2\2\2\u043e\u043f\3\2\2\2\u043f")
        buf.write("\u0440\3\2\2\2\u0440\u0442\5\u01f8\u00fd\2\u0441\u043c")
        buf.write("\3\2\2\2\u0441\u0442\3\2\2\2\u0442\u0448\3\2\2\2\u0443")
        buf.write("\u0445\7\u018b\2\2\u0444\u0446\7\u03a7\2\2\u0445\u0444")
        buf.write("\3\2\2\2\u0445\u0446\3\2\2\2\u0446\u0447\3\2\2\2\u0447")
        buf.write("\u0449\5\u01f8\u00fd\2\u0448\u0443\3\2\2\2\u0448\u0449")
        buf.write("\3\2\2\2\u0449\u044f\3\2\2\2\u044a\u044c\7\u019d\2\2\u044b")
        buf.write("\u044d\7\u03a7\2\2\u044c\u044b\3\2\2\2\u044c\u044d\3\2")
        buf.write("\2\2\u044d\u044e\3\2\2\2\u044e\u0450\5\u01f0\u00f9\2\u044f")
        buf.write("\u044a\3\2\2\2\u044f\u0450\3\2\2\2\u0450\u0452\3\2\2\2")
        buf.write("\u0451\u0453\7\u0219\2\2\u0452\u0451\3\2\2\2\u0452\u0453")
        buf.write("\3\2\2\2\u0453\u0459\3\2\2\2\u0454\u0456\7\u0114\2\2\u0455")
        buf.write("\u0457\7\u03a7\2\2\u0456\u0455\3\2\2\2\u0456\u0457\3\2")
        buf.write("\2\2\u0457\u0458\3\2\2\2\u0458\u045a\7\u03bf\2\2\u0459")
        buf.write("\u0454\3\2\2\2\u0459\u045a\3\2\2\2\u045a\u045b\3\2\2\2")
        buf.write("\u045b\u045d\7\u0135\2\2\u045c\u045e\7\u03a7\2\2\u045d")
        buf.write("\u045c\3\2\2\2\u045d\u045e\3\2\2\2\u045e\u045f\3\2\2\2")
        buf.write("\u045f\u0460\5\u01e6\u00f4\2\u0460-\3\2\2\2\u0461\u0463")
        buf.write("\7\37\2\2\u0462\u0464\5\64\33\2\u0463\u0462\3\2\2\2\u0463")
        buf.write("\u0464\3\2\2\2\u0464\u0465\3\2\2\2\u0465\u0466\7\u0098")
        buf.write("\2\2\u0466\u0467\5\u01d6\u00ec\2\u0467\u0468\t\t\2\2\u0468")
        buf.write("\u0469\t\n\2\2\u0469\u046a\7f\2\2\u046a\u046b\5\u01d8")
        buf.write("\u00ed\2\u046b\u046c\79\2\2\u046c\u046d\7/\2\2\u046d\u0470")
        buf.write("\7\u01d9\2\2\u046e\u046f\t\13\2\2\u046f\u0471\5\u01d6")
        buf.write("\u00ec\2\u0470\u046e\3\2\2\2\u0470\u0471\3\2\2\2\u0471")
        buf.write("\u0472\3\2\2\2\u0472\u0473\5\u014e\u00a8\2\u0473/\3\2")
        buf.write("\2\2\u0474\u0477\7\37\2\2\u0475\u0476\7j\2\2\u0476\u0478")
        buf.write("\7{\2\2\u0477\u0475\3\2\2\2\u0477\u0478\3\2\2\2\u0478")
        buf.write("\u047c\3\2\2\2\u0479\u047a\7\u00fa\2\2\u047a\u047b\7\u03a7")
        buf.write("\2\2\u047b\u047d\t\f\2\2\u047c\u0479\3\2\2\2\u047c\u047d")
        buf.write("\3\2\2\2\u047d\u047f\3\2\2\2\u047e\u0480\5\64\33\2\u047f")
        buf.write("\u047e\3\2\2\2\u047f\u0480\3\2\2\2\u0480\u0484\3\2\2\2")
        buf.write("\u0481\u0482\7\u0089\2\2\u0482\u0483\7\u01de\2\2\u0483")
        buf.write("\u0485\t\r\2\2\u0484\u0481\3\2\2\2\u0484\u0485\3\2\2\2")
        buf.write("\u0485\u0486\3\2\2\2\u0486\u0487\7\u0218\2\2\u0487\u048c")
        buf.write("\5\u01d6\u00ec\2\u0488\u0489\7\u03b0\2\2\u0489\u048a\5")
        buf.write("\u020e\u0108\2\u048a\u048b\7\u03b1\2\2\u048b\u048d\3\2")
        buf.write("\2\2\u048c\u0488\3\2\2\2\u048c\u048d\3\2\2\2\u048d\u048e")
        buf.write("\3\2\2\2\u048e\u048f\7\f\2\2\u048f\u0496\5\u00aeX\2\u0490")
        buf.write("\u0492\7\u00a7\2\2\u0491\u0493\t\16\2\2\u0492\u0491\3")
        buf.write("\2\2\2\u0492\u0493\3\2\2\2\u0493\u0494\3\2\2\2\u0494\u0495")
        buf.write("\7\30\2\2\u0495\u0497\7h\2\2\u0496\u0490\3\2\2\2\u0496")
        buf.write("\u0497\3\2\2\2\u0497\61\3\2\2\2\u0498\u049a\7&\2\2\u0499")
        buf.write("\u0498\3\2\2\2\u0499\u049a\3\2\2\2\u049a\u049b\3\2\2\2")
        buf.write("\u049b\u049c\7\27\2\2\u049c\u049e\7\u0085\2\2\u049d\u049f")
        buf.write("\7\u03a7\2\2\u049e\u049d\3\2\2\2\u049e\u049f\3\2\2\2\u049f")
        buf.write("\u04a0\3\2\2\2\u04a0\u04aa\5\u01e2\u00f2\2\u04a1\u04a3")
        buf.write("\7&\2\2\u04a2\u04a1\3\2\2\2\u04a2\u04a3\3\2\2\2\u04a3")
        buf.write("\u04a4\3\2\2\2\u04a4\u04a6\7\31\2\2\u04a5\u04a7\7\u03a7")
        buf.write("\2\2\u04a6\u04a5\3\2\2\2\u04a6\u04a7\3\2\2\2\u04a7\u04a8")
        buf.write("\3\2\2\2\u04a8\u04aa\5\u01e4\u00f3\2\u04a9\u0499\3\2\2")
        buf.write("\2\u04a9\u04a2\3\2\2\2\u04aa\63\3\2\2\2\u04ab\u04ac\7")
        buf.write("\u0126\2\2\u04ac\u04b3\7\u03a7\2\2\u04ad\u04b4\5\u01de")
        buf.write("\u00f0\2\u04ae\u04b1\7!\2\2\u04af\u04b0\7\u03b0\2\2\u04b0")
        buf.write("\u04b2\7\u03b1\2\2\u04b1\u04af\3\2\2\2\u04b1\u04b2\3\2")
        buf.write("\2\2\u04b2\u04b4\3\2\2\2\u04b3\u04ad\3\2\2\2\u04b3\u04ae")
        buf.write("\3\2\2\2\u04b4\65\3\2\2\2\u04b5\u04b6\7\u00fc\2\2\u04b6")
        buf.write("\u04ba\58\35\2\u04b7\u04b9\5:\36\2\u04b8\u04b7\3\2\2\2")
        buf.write("\u04b9\u04bc\3\2\2\2\u04ba\u04b8\3\2\2\2\u04ba\u04bb\3")
        buf.write("\2\2\2\u04bb\u04d8\3\2\2\2\u04bc\u04ba\3\2\2\2\u04bd\u04c0")
        buf.write("\7\u013d\2\2\u04be\u04c1\5\u01f6\u00fc\2\u04bf\u04c1\5")
        buf.write("\u0234\u011b\2\u04c0\u04be\3\2\2\2\u04c0\u04bf\3\2\2\2")
        buf.write("\u04c1\u04c2\3\2\2\2\u04c2\u04cb\5<\37\2\u04c3\u04c4\7")
        buf.write("\u01f5\2\2\u04c4\u04c8\58\35\2\u04c5\u04c7\5:\36\2\u04c6")
        buf.write("\u04c5\3\2\2\2\u04c7\u04ca\3\2\2\2\u04c8\u04c6\3\2\2\2")
        buf.write("\u04c8\u04c9\3\2\2\2\u04c9\u04cc\3\2\2\2\u04ca\u04c8\3")
        buf.write("\2\2\2\u04cb\u04c3\3\2\2\2\u04cb\u04cc\3\2\2\2\u04cc\u04d5")
        buf.write("\3\2\2\2\u04cd\u04ce\7\u0134\2\2\u04ce\u04d2\58\35\2\u04cf")
        buf.write("\u04d1\5:\36\2\u04d0\u04cf\3\2\2\2\u04d1\u04d4\3\2\2\2")
        buf.write("\u04d2\u04d0\3\2\2\2\u04d2\u04d3\3\2\2\2\u04d3\u04d6\3")
        buf.write("\2\2\2\u04d4\u04d2\3\2\2\2\u04d5\u04cd\3\2\2\2\u04d5\u04d6")
        buf.write("\3\2\2\2\u04d6\u04d8\3\2\2\2\u04d7\u04b5\3\2\2\2\u04d7")
        buf.write("\u04bd\3\2\2\2\u04d8\67\3\2\2\2\u04d9\u04de\7\u00e5\2")
        buf.write("\2\u04da\u04de\5\u01fa\u00fe\2\u04db\u04de\5\u01f6\u00fc")
        buf.write("\2\u04dc\u04de\5\u0234\u011b\2\u04dd\u04d9\3\2\2\2\u04dd")
        buf.write("\u04da\3\2\2\2\u04dd\u04db\3\2\2\2\u04dd\u04dc\3\2\2\2")
        buf.write("\u04de9\3\2\2\2\u04df\u04e0\7\u03a3\2\2\u04e0\u04e3\7")
        buf.write("J\2\2\u04e1\u04e4\5\u01f6\u00fc\2\u04e2\u04e4\5\u0234")
        buf.write("\u011b\2\u04e3\u04e1\3\2\2\2\u04e3\u04e2\3\2\2\2\u04e4")
        buf.write("\u04e5\3\2\2\2\u04e5\u04e6\5<\37\2\u04e6;\3\2\2\2\u04e7")
        buf.write("\u04f5\5\u024a\u0126\2\u04e8\u04f5\7\u00ba\2\2\u04e9\u04f5")
        buf.write("\7\u00c8\2\2\u04ea\u04f5\7\u00c9\2\2\u04eb\u04f5\7\u00ca")
        buf.write("\2\2\u04ec\u04f5\7\u00cb\2\2\u04ed\u04f5\7\u00cc\2\2\u04ee")
        buf.write("\u04f5\7\u00cd\2\2\u04ef\u04f5\7\u00ce\2\2\u04f0\u04f5")
        buf.write("\7\u00cf\2\2\u04f1\u04f5\7\u00d0\2\2\u04f2\u04f5\7\u00d1")
        buf.write("\2\2\u04f3\u04f5\7\u00d2\2\2\u04f4\u04e7\3\2\2\2\u04f4")
        buf.write("\u04e8\3\2\2\2\u04f4\u04e9\3\2\2\2\u04f4\u04ea\3\2\2\2")
        buf.write("\u04f4\u04eb\3\2\2\2\u04f4\u04ec\3\2\2\2\u04f4\u04ed\3")
        buf.write("\2\2\2\u04f4\u04ee\3\2\2\2\u04f4\u04ef\3\2\2\2\u04f4\u04f0")
        buf.write("\3\2\2\2\u04f4\u04f1\3\2\2\2\u04f4\u04f2\3\2\2\2\u04f4")
        buf.write("\u04f3\3\2\2\2\u04f5=\3\2\2\2\u04f6\u04fc\7\u0131\2\2")
        buf.write("\u04f7\u04fc\7\u012a\2\2\u04f8\u04f9\7\u012a\2\2\u04f9")
        buf.write("\u04fa\7f\2\2\u04fa\u04fc\7\u01e5\2\2\u04fb\u04f6\3\2")
        buf.write("\2\2\u04fb\u04f7\3\2\2\2\u04fb\u04f8\3\2\2\2\u04fc?\3")
        buf.write("\2\2\2\u04fd\u04fe\7\u00a2\2\2\u04fe\u04ff\t\17\2\2\u04ff")
        buf.write("A\3\2\2\2\u0500\u0502\7\u0169\2\2\u0501\u0503\7\u03a7")
        buf.write("\2\2\u0502\u0501\3\2\2\2\u0502\u0503\3\2\2\2\u0503\u0504")
        buf.write("\3\2\2\2\u0504\u050c\5\u01f8\u00fd\2\u0505\u050c\5@!\2")
        buf.write("\u0506\u0507\7\u00a7\2\2\u0507\u0508\7\u01ac\2\2\u0508")
        buf.write("\u050c\5\u01f0\u00f9\2\u0509\u050a\7\u0114\2\2\u050a\u050c")
        buf.write("\7\u03bf\2\2\u050b\u0500\3\2\2\2\u050b\u0505\3\2\2\2\u050b")
        buf.write("\u0506\3\2\2\2\u050b\u0509\3\2\2\2\u050cC\3\2\2\2\u050d")
        buf.write("\u050e\t\20\2\2\u050e\u050f\5\u01f0\u00f9\2\u050f\u0510")
        buf.write("\5\u0204\u0103\2\u0510E\3\2\2\2\u0511\u0512\5\u01f0\u00f9")
        buf.write("\2\u0512\u0513\5\u0204\u0103\2\u0513G\3\2\2\2\u0514\u0515")
        buf.write("\7\u0114\2\2\u0515\u052c\7\u03bf\2\2\u0516\u0517\7\u016a")
        buf.write("\2\2\u0517\u052c\7\u0089\2\2\u0518\u051a\7c\2\2\u0519")
        buf.write("\u0518\3\2\2\2\u0519\u051a\3\2\2\2\u051a\u051b\3\2\2\2")
        buf.write("\u051b\u052c\7+\2\2\u051c\u051d\7\u011d\2\2\u051d\u0527")
        buf.write("\7\u0089\2\2\u051e\u051f\7\u019c\2\2\u051f\u0527\7\u0089")
        buf.write("\2\2\u0520\u0521\7u\2\2\u0521\u0522\7\u0089\2\2\u0522")
        buf.write("\u0527\7\u0122\2\2\u0523\u0524\7a\2\2\u0524\u0525\7\u0089")
        buf.write("\2\2\u0525\u0527\7\u0122\2\2\u0526\u051c\3\2\2\2\u0526")
        buf.write("\u051e\3\2\2\2\u0526\u0520\3\2\2\2\u0526\u0523\3\2\2\2")
        buf.write("\u0527\u052c\3\2\2\2\u0528\u0529\7\u0089\2\2\u0529\u052a")
        buf.write("\7\u01de\2\2\u052a\u052c\t\r\2\2\u052b\u0514\3\2\2\2\u052b")
        buf.write("\u0516\3\2\2\2\u052b\u0519\3\2\2\2\u052b\u0526\3\2\2\2")
        buf.write("\u052b\u0528\3\2\2\2\u052cI\3\2\2\2\u052d\u052e\7\u0157")
        buf.write("\2\2\u052e\u053c\7\u03bf\2\2\u052f\u0530\7#\2\2\u0530")
        buf.write("\u053c\7\u03bf\2\2\u0531\u0532\7\u0212\2\2\u0532\u053c")
        buf.write("\7\u03bf\2\2\u0533\u0534\7\u01b0\2\2\u0534\u053c\7\u03bf")
        buf.write("\2\2\u0535\u0536\7\u01e8\2\2\u0536\u053c\7\u03bf\2\2\u0537")
        buf.write("\u0538\7\u01a9\2\2\u0538\u053c\7\u03bf\2\2\u0539\u053a")
        buf.write("\7\u01b5\2\2\u053a\u053c\5\u01f6\u00fc\2\u053b\u052d\3")
        buf.write("\2\2\2\u053b\u052f\3\2\2\2\u053b\u0531\3\2\2\2\u053b\u0533")
        buf.write("\3\2\2\2\u053b\u0535\3\2\2\2\u053b\u0537\3\2\2\2\u053b")
        buf.write("\u0539\3\2\2\2\u053cK\3\2\2\2\u053d\u053e\7\u03b0\2\2")
        buf.write("\u053e\u0543\5N(\2\u053f\u0540\7\u03b2\2\2\u0540\u0542")
        buf.write("\5N(\2\u0541\u053f\3\2\2\2\u0542\u0545\3\2\2\2\u0543\u0541")
        buf.write("\3\2\2\2\u0543\u0544\3\2\2\2\u0544\u0546\3\2\2\2\u0545")
        buf.write("\u0543\3\2\2\2\u0546\u0547\7\u03b1\2\2\u0547M\3\2\2\2")
        buf.write("\u0548\u0549\5\u01f0\u00f9\2\u0549\u054a\5P)\2\u054a\u054e")
        buf.write("\3\2\2\2\u054b\u054e\5T+\2\u054c\u054e\5\\/\2\u054d\u0548")
        buf.write("\3\2\2\2\u054d\u054b\3\2\2\2\u054d\u054c\3\2\2\2\u054e")
        buf.write("O\3\2\2\2\u054f\u0553\5\u0204\u0103\2\u0550\u0552\5R*")
        buf.write("\2\u0551\u0550\3\2\2\2\u0552\u0555\3\2\2\2\u0553\u0551")
        buf.write("\3\2\2\2\u0553\u0554\3\2\2\2\u0554Q\3\2\2\2\u0555\u0553")
        buf.write("\3\2\2\2\u0556\u056a\5\u0200\u0101\2\u0557\u0558\7&\2")
        buf.write("\2\u0558\u056a\5\u021e\u0110\2\u0559\u056a\7\u0100\2\2")
        buf.write("\u055a\u055c\7p\2\2\u055b\u055a\3\2\2\2\u055b\u055c\3")
        buf.write("\2\2\2\u055c\u055d\3\2\2\2\u055d\u056a\7O\2\2\u055e\u0560")
        buf.write("\7\u009c\2\2\u055f\u0561\7O\2\2\u0560\u055f\3\2\2\2\u0560")
        buf.write("\u0561\3\2\2\2\u0561\u056a\3\2\2\2\u0562\u0563\7\u0114")
        buf.write("\2\2\u0563\u056a\7\u03bf\2\2\u0564\u0565\7\u0113\2\2\u0565")
        buf.write("\u056a\t\21\2\2\u0566\u0567\7\u01fb\2\2\u0567\u056a\t")
        buf.write("\22\2\2\u0568\u056a\5V,\2\u0569\u0556\3\2\2\2\u0569\u0557")
        buf.write("\3\2\2\2\u0569\u0559\3\2\2\2\u0569\u055b\3\2\2\2\u0569")
        buf.write("\u055e\3\2\2\2\u0569\u0562\3\2\2\2\u0569\u0564\3\2\2\2")
        buf.write("\u0569\u0566\3\2\2\2\u0569\u0568\3\2\2\2\u056aS\3\2\2")
        buf.write("\2\u056b\u056d\7\34\2\2\u056c\u056e\5\u01f0\u00f9\2\u056d")
        buf.write("\u056c\3\2\2\2\u056d\u056e\3\2\2\2\u056e\u0570\3\2\2\2")
        buf.write("\u056f\u056b\3\2\2\2\u056f\u0570\3\2\2\2\u0570\u0571\3")
        buf.write("\2\2\2\u0571\u0572\7p\2\2\u0572\u0574\7O\2\2\u0573\u0575")
        buf.write("\5@!\2\u0574\u0573\3\2\2\2\u0574\u0575\3\2\2\2\u0575\u0576")
        buf.write("\3\2\2\2\u0576\u057a\5\u0214\u010b\2\u0577\u0579\5B\"")
        buf.write("\2\u0578\u0577\3\2\2\2\u0579\u057c\3\2\2\2\u057a\u0578")
        buf.write("\3\2\2\2\u057a\u057b\3\2\2\2\u057b\u05a8\3\2\2\2\u057c")
        buf.write("\u057a\3\2\2\2\u057d\u057f\7\34\2\2\u057e\u0580\5\u01f0")
        buf.write("\u00f9\2\u057f\u057e\3\2\2\2\u057f\u0580\3\2\2\2\u0580")
        buf.write("\u0582\3\2\2\2\u0581\u057d\3\2\2\2\u0581\u0582\3\2\2\2")
        buf.write("\u0582\u0583\3\2\2\2\u0583\u0585\7\u009c\2\2\u0584\u0586")
        buf.write("\t\23\2\2\u0585\u0584\3\2\2\2\u0585\u0586\3\2\2\2\u0586")
        buf.write("\u0588\3\2\2\2\u0587\u0589\5\u01f0\u00f9\2\u0588\u0587")
        buf.write("\3\2\2\2\u0588\u0589\3\2\2\2\u0589\u058b\3\2\2\2\u058a")
        buf.write("\u058c\5@!\2\u058b\u058a\3\2\2\2\u058b\u058c\3\2\2\2\u058c")
        buf.write("\u058d\3\2\2\2\u058d\u0591\5\u0214\u010b\2\u058e\u0590")
        buf.write("\5B\"\2\u058f\u058e\3\2\2\2\u0590\u0593\3\2\2\2\u0591")
        buf.write("\u058f\3\2\2\2\u0591\u0592\3\2\2\2\u0592\u05a8\3\2\2\2")
        buf.write("\u0593\u0591\3\2\2\2\u0594\u0596\7\34\2\2\u0595\u0597")
        buf.write("\5\u01f0\u00f9\2\u0596\u0595\3\2\2\2\u0596\u0597\3\2\2")
        buf.write("\2\u0597\u0599\3\2\2\2\u0598\u0594\3\2\2\2\u0598\u0599")
        buf.write("\3\2\2\2\u0599\u059a\3\2\2\2\u059a\u059b\7;\2\2\u059b")
        buf.write("\u059d\7O\2\2\u059c\u059e\5\u01f0\u00f9\2\u059d\u059c")
        buf.write("\3\2\2\2\u059d\u059e\3\2\2\2\u059e\u059f\3\2\2\2\u059f")
        buf.write("\u05a0\5\u0214\u010b\2\u05a0\u05a1\5V,\2\u05a1\u05a8\3")
        buf.write("\2\2\2\u05a2\u05a3\7\30\2\2\u05a3\u05a4\7\u03b0\2\2\u05a4")
        buf.write("\u05a5\5\u0234\u011b\2\u05a5\u05a6\7\u03b1\2\2\u05a6\u05a8")
        buf.write("\3\2\2\2\u05a7\u056f\3\2\2\2\u05a7\u0581\3\2\2\2\u05a7")
        buf.write("\u0598\3\2\2\2\u05a7\u05a2\3\2\2\2\u05a8U\3\2\2\2\u05a9")
        buf.write("\u05aa\7v\2\2\u05aa\u05ab\5\u01d8\u00ed\2\u05ab\u05ae")
        buf.write("\5\u0214\u010b\2\u05ac\u05ad\7_\2\2\u05ad\u05af\t\24\2")
        buf.write("\2\u05ae\u05ac\3\2\2\2\u05ae\u05af\3\2\2\2\u05af\u05b1")
        buf.write("\3\2\2\2\u05b0\u05b2\5X-\2\u05b1\u05b0\3\2\2\2\u05b1\u05b2")
        buf.write("\3\2\2\2\u05b2W\3\2\2\2\u05b3\u05b4\7f\2\2\u05b4\u05b5")
        buf.write("\7(\2\2\u05b5\u05b9\5Z.\2\u05b6\u05b7\7f\2\2\u05b7\u05b8")
        buf.write("\7\u009f\2\2\u05b8\u05ba\5Z.\2\u05b9\u05b6\3\2\2\2\u05b9")
        buf.write("\u05ba\3\2\2\2\u05ba\u05c4\3\2\2\2\u05bb\u05bc\7f\2\2")
        buf.write("\u05bc\u05bd\7\u009f\2\2\u05bd\u05c1\5Z.\2\u05be\u05bf")
        buf.write("\7f\2\2\u05bf\u05c0\7(\2\2\u05c0\u05c2\5Z.\2\u05c1\u05be")
        buf.write("\3\2\2\2\u05c1\u05c2\3\2\2\2\u05c2\u05c4\3\2\2\2\u05c3")
        buf.write("\u05b3\3\2\2\2\u05c3\u05bb\3\2\2\2\u05c4Y\3\2\2\2\u05c5")
        buf.write("\u05cc\7}\2\2\u05c6\u05cc\7\23\2\2\u05c7\u05c8\7\u0085")
        buf.write("\2\2\u05c8\u05cc\7e\2\2\u05c9\u05ca\7\u019c\2\2\u05ca")
        buf.write("\u05cc\7\u00f7\2\2\u05cb\u05c5\3\2\2\2\u05cb\u05c6\3\2")
        buf.write("\2\2\u05cb\u05c7\3\2\2\2\u05cb\u05c9\3\2\2\2\u05cc[\3")
        buf.write("\2\2\2\u05cd\u05cf\t\23\2\2\u05ce\u05d0\5\u01f0\u00f9")
        buf.write("\2\u05cf\u05ce\3\2\2\2\u05cf\u05d0\3\2\2\2\u05d0\u05d2")
        buf.write("\3\2\2\2\u05d1\u05d3\5@!\2\u05d2\u05d1\3\2\2\2\u05d2\u05d3")
        buf.write("\3\2\2\2\u05d3\u05d4\3\2\2\2\u05d4\u05d8\5\u0214\u010b")
        buf.write("\2\u05d5\u05d7\5B\"\2\u05d6\u05d5\3\2\2\2\u05d7\u05da")
        buf.write("\3\2\2\2\u05d8\u05d6\3\2\2\2\u05d8\u05d9\3\2\2\2\u05d9")
        buf.write("\u05ea\3\2\2\2\u05da\u05d8\3\2\2\2\u05db\u05dd\t\25\2")
        buf.write("\2\u05dc\u05de\t\23\2\2\u05dd\u05dc\3\2\2\2\u05dd\u05de")
        buf.write("\3\2\2\2\u05de\u05e0\3\2\2\2\u05df\u05e1\5\u01f0\u00f9")
        buf.write("\2\u05e0\u05df\3\2\2\2\u05e0\u05e1\3\2\2\2\u05e1\u05e2")
        buf.write("\3\2\2\2\u05e2\u05e6\5\u0214\u010b\2\u05e3\u05e5\5B\"")
        buf.write("\2\u05e4\u05e3\3\2\2\2\u05e5\u05e8\3\2\2\2\u05e6\u05e4")
        buf.write("\3\2\2\2\u05e6\u05e7\3\2\2\2\u05e7\u05ea\3\2\2\2\u05e8")
        buf.write("\u05e6\3\2\2\2\u05e9\u05cd\3\2\2\2\u05e9\u05db\3\2\2\2")
        buf.write("\u05ea]\3\2\2\2\u05eb\u05ed\7\u0135\2\2\u05ec\u05ee\7")
        buf.write("\u03a7\2\2\u05ed\u05ec\3\2\2\2\u05ed\u05ee\3\2\2\2\u05ee")
        buf.write("\u05ef\3\2\2\2\u05ef\u067f\5\u01e6\u00f4\2\u05f0\u05f2")
        buf.write("\7\u0100\2\2\u05f1\u05f3\7\u03a7\2\2\u05f2\u05f1\3\2\2")
        buf.write("\2\u05f2\u05f3\3\2\2\2\u05f3\u05f4\3\2\2\2\u05f4\u067f")
        buf.write("\5\u01f6\u00fc\2\u05f5\u05f7\7\u0101\2\2\u05f6\u05f8\7")
        buf.write("\u03a7\2\2\u05f7\u05f6\3\2\2\2\u05f7\u05f8\3\2\2\2\u05f8")
        buf.write("\u05f9\3\2\2\2\u05f9\u067f\5\u01f6\u00fc\2\u05fa\u05fc")
        buf.write("\7&\2\2\u05fb\u05fa\3\2\2\2\u05fb\u05fc\3\2\2\2\u05fc")
        buf.write("\u0600\3\2\2\2\u05fd\u05fe\7\27\2\2\u05fe\u0601\7\u0085")
        buf.write("\2\2\u05ff\u0601\7\u0291\2\2\u0600\u05fd\3\2\2\2\u0600")
        buf.write("\u05ff\3\2\2\2\u0601\u0603\3\2\2\2\u0602\u0604\7\u03a7")
        buf.write("\2\2\u0603\u0602\3\2\2\2\u0603\u0604\3\2\2\2\u0604\u0605")
        buf.write("\3\2\2\2\u0605\u067f\5\u01e2\u00f2\2\u0606\u0608\7\u010c")
        buf.write("\2\2\u0607\u0609\7\u03a7\2\2\u0608\u0607\3\2\2\2\u0608")
        buf.write("\u0609\3\2\2\2\u0609\u060a\3\2\2\2\u060a\u067f\t\26\2")
        buf.write("\2\u060b\u060d\7&\2\2\u060c\u060b\3\2\2\2\u060c\u060d")
        buf.write("\3\2\2\2\u060d\u060e\3\2\2\2\u060e\u0610\7\31\2\2\u060f")
        buf.write("\u0611\7\u03a7\2\2\u0610\u060f\3\2\2\2\u0610\u0611\3\2")
        buf.write("\2\2\u0611\u0612\3\2\2\2\u0612\u067f\5\u01e4\u00f3\2\u0613")
        buf.write("\u0615\7\u0114\2\2\u0614\u0616\7\u03a7\2\2\u0615\u0614")
        buf.write("\3\2\2\2\u0615\u0616\3\2\2\2\u0616\u0617\3\2\2\2\u0617")
        buf.write("\u067f\7\u03bf\2\2\u0618\u061a\7\u0119\2\2\u0619\u061b")
        buf.write("\7\u03a7\2\2\u061a\u0619\3\2\2\2\u061a\u061b\3\2\2\2\u061b")
        buf.write("\u061c\3\2\2\2\u061c\u067f\7\u03bf\2\2\u061d\u061f\7\u011b")
        buf.write("\2\2\u061e\u0620\7\u03a7\2\2\u061f\u061e\3\2\2\2\u061f")
        buf.write("\u0620\3\2\2\2\u0620\u0621\3\2\2\2\u0621\u067f\7\u03bf")
        buf.write("\2\2\u0622\u0623\7\u0122\2\2\u0623\u0625\7\u0129\2\2\u0624")
        buf.write("\u0626\7\u03a7\2\2\u0625\u0624\3\2\2\2\u0625\u0626\3\2")
        buf.write("\2\2\u0626\u0627\3\2\2\2\u0627\u067f\7\u03bf\2\2\u0628")
        buf.write("\u062a\7\u0127\2\2\u0629\u062b\7\u03a7\2\2\u062a\u0629")
        buf.write("\3\2\2\2\u062a\u062b\3\2\2\2\u062b\u062c\3\2\2\2\u062c")
        buf.write("\u067f\t\26\2\2\u062d\u062f\7\u0132\2\2\u062e\u0630\7")
        buf.write("\u03a7\2\2\u062f\u062e\3\2\2\2\u062f\u0630\3\2\2\2\u0630")
        buf.write("\u0631\3\2\2\2\u0631\u067f\7\u03bf\2\2\u0632\u0633\7E")
        buf.write("\2\2\u0633\u0635\7\u0129\2\2\u0634\u0636\7\u03a7\2\2\u0635")
        buf.write("\u0634\3\2\2\2\u0635\u0636\3\2\2\2\u0636\u0637\3\2\2\2")
        buf.write("\u0637\u067f\7\u03bf\2\2\u0638\u063a\7\u015f\2\2\u0639")
        buf.write("\u063b\7\u03a7\2\2\u063a\u0639\3\2\2\2\u063a\u063b\3\2")
        buf.write("\2\2\u063b\u063c\3\2\2\2\u063c\u067f\t\27\2\2\u063d\u063f")
        buf.write("\7\u0169\2\2\u063e\u0640\7\u03a7\2\2\u063f\u063e\3\2\2")
        buf.write("\2\u063f\u0640\3\2\2\2\u0640\u0641\3\2\2\2\u0641\u067f")
        buf.write("\5\u01f8\u00fd\2\u0642\u0644\7\u018a\2\2\u0643\u0645\7")
        buf.write("\u03a7\2\2\u0644\u0643\3\2\2\2\u0644\u0645\3\2\2\2\u0645")
        buf.write("\u0646\3\2\2\2\u0646\u067f\5\u01f6\u00fc\2\u0647\u0649")
        buf.write("\7\u0192\2\2\u0648\u064a\7\u03a7\2\2\u0649\u0648\3\2\2")
        buf.write("\2\u0649\u064a\3\2\2\2\u064a\u064b\3\2\2\2\u064b\u067f")
        buf.write("\5\u01f6\u00fc\2\u064c\u064e\7\u01aa\2\2\u064d\u064f\7")
        buf.write("\u03a7\2\2\u064e\u064d\3\2\2\2\u064e\u064f\3\2\2\2\u064f")
        buf.write("\u0650\3\2\2\2\u0650\u067f\t\30\2\2\u0651\u0653\7\u01b0")
        buf.write("\2\2\u0652\u0654\7\u03a7\2\2\u0653\u0652\3\2\2\2\u0653")
        buf.write("\u0654\3\2\2\2\u0654\u0655\3\2\2\2\u0655\u067f\7\u03bf")
        buf.write("\2\2\u0656\u0658\7\u01db\2\2\u0657\u0659\7\u03a7\2\2\u0658")
        buf.write("\u0657\3\2\2\2\u0658\u0659\3\2\2\2\u0659\u065a\3\2\2\2")
        buf.write("\u065a\u067f\t\31\2\2\u065b\u065d\7\u01f6\2\2\u065c\u065e")
        buf.write("\7\u03a7\2\2\u065d\u065c\3\2\2\2\u065d\u065e\3\2\2\2\u065e")
        buf.write("\u065f\3\2\2\2\u065f\u067f\t\30\2\2\u0660\u0662\7\u01f7")
        buf.write("\2\2\u0661\u0663\7\u03a7\2\2\u0662\u0661\3\2\2\2\u0662")
        buf.write("\u0663\3\2\2\2\u0663\u0664\3\2\2\2\u0664\u067f\t\30\2")
        buf.write("\2\u0665\u0667\7\u01f8\2\2\u0666\u0668\7\u03a7\2\2\u0667")
        buf.write("\u0666\3\2\2\2\u0667\u0668\3\2\2\2\u0668\u0669\3\2\2\2")
        buf.write("\u0669\u067f\5\u01f6\u00fc\2\u066a\u066b\7\u0203\2\2\u066b")
        buf.write("\u066d\5\u01f0\u00f9\2\u066c\u066e\5`\61\2\u066d\u066c")
        buf.write("\3\2\2\2\u066d\u066e\3\2\2\2\u066e\u067f\3\2\2\2\u066f")
        buf.write("\u0671\7\u009b\2\2\u0670\u0672\7\u03a7\2\2\u0671\u0670")
        buf.write("\3\2\2\2\u0671\u0672\3\2\2\2\u0672\u0673\3\2\2\2\u0673")
        buf.write("\u0674\7\u03b0\2\2\u0674\u0679\5\u01d8\u00ed\2\u0675\u0676")
        buf.write("\7\u03b2\2\2\u0676\u0678\5\u01d8\u00ed\2\u0677\u0675\3")
        buf.write("\2\2\2\u0678\u067b\3\2\2\2\u0679\u0677\3\2\2\2\u0679\u067a")
        buf.write("\3\2\2\2\u067a\u067c\3\2\2\2\u067b\u0679\3\2\2\2\u067c")
        buf.write("\u067d\7\u03b1\2\2\u067d\u067f\3\2\2\2\u067e\u05eb\3\2")
        buf.write("\2\2\u067e\u05f0\3\2\2\2\u067e\u05f5\3\2\2\2\u067e\u05fb")
        buf.write("\3\2\2\2\u067e\u0606\3\2\2\2\u067e\u060c\3\2\2\2\u067e")
        buf.write("\u0613\3\2\2\2\u067e\u0618\3\2\2\2\u067e\u061d\3\2\2\2")
        buf.write("\u067e\u0622\3\2\2\2\u067e\u0628\3\2\2\2\u067e\u062d\3")
        buf.write("\2\2\2\u067e\u0632\3\2\2\2\u067e\u0638\3\2\2\2\u067e\u063d")
        buf.write("\3\2\2\2\u067e\u0642\3\2\2\2\u067e\u0647\3\2\2\2\u067e")
        buf.write("\u064c\3\2\2\2\u067e\u0651\3\2\2\2\u067e\u0656\3\2\2\2")
        buf.write("\u067e\u065b\3\2\2\2\u067e\u0660\3\2\2\2\u067e\u0665\3")
        buf.write("\2\2\2\u067e\u066a\3\2\2\2\u067e\u066f\3\2\2\2\u067f_")
        buf.write("\3\2\2\2\u0680\u0681\7\u01fb\2\2\u0681\u0682\t\22\2\2")
        buf.write("\u0682a\3\2\2\2\u0683\u0684\7o\2\2\u0684\u0685\7\21\2")
        buf.write("\2\u0685\u0688\5d\63\2\u0686\u0687\7\u01af\2\2\u0687\u0689")
        buf.write("\5\u01f6\u00fc\2\u0688\u0686\3\2\2\2\u0688\u0689\3\2\2")
        buf.write("\2\u0689\u0691\3\2\2\2\u068a\u068b\7\u01fe\2\2\u068b\u068c")
        buf.write("\7\21\2\2\u068c\u068f\5f\64\2\u068d\u068e\7\u01ff\2\2")
        buf.write("\u068e\u0690\5\u01f6\u00fc\2\u068f\u068d\3\2\2\2\u068f")
        buf.write("\u0690\3\2\2\2\u0690\u0692\3\2\2\2\u0691\u068a\3\2\2\2")
        buf.write("\u0691\u0692\3\2\2\2\u0692\u069e\3\2\2\2\u0693\u0694\7")
        buf.write("\u03b0\2\2\u0694\u0699\5h\65\2\u0695\u0696\7\u03b2\2\2")
        buf.write("\u0696\u0698\5h\65\2\u0697\u0695\3\2\2\2\u0698\u069b\3")
        buf.write("\2\2\2\u0699\u0697\3\2\2\2\u0699\u069a\3\2\2\2\u069a\u069c")
        buf.write("\3\2\2\2\u069b\u0699\3\2\2\2\u069c\u069d\7\u03b1\2\2\u069d")
        buf.write("\u069f\3\2\2\2\u069e\u0693\3\2\2\2\u069e\u069f\3\2\2\2")
        buf.write("\u069fc\3\2\2\2\u06a0\u06a2\7W\2\2\u06a1\u06a0\3\2\2\2")
        buf.write("\u06a1\u06a2\3\2\2\2\u06a2\u06a3\3\2\2\2\u06a3\u06a4\7")
        buf.write("\u0155\2\2\u06a4\u06a5\7\u03b0\2\2\u06a5\u06a6\5\u0234")
        buf.write("\u011b\2\u06a6\u06a7\7\u03b1\2\2\u06a7\u06ce\3\2\2\2\u06a8")
        buf.write("\u06aa\7W\2\2\u06a9\u06a8\3\2\2\2\u06a9\u06aa\3\2\2\2")
        buf.write("\u06aa\u06ab\3\2\2\2\u06ab\u06af\7O\2\2\u06ac\u06ad\7")
        buf.write("\u00fa\2\2\u06ad\u06ae\7\u03a7\2\2\u06ae\u06b0\t\32\2")
        buf.write("\2\u06af\u06ac\3\2\2\2\u06af\u06b0\3\2\2\2\u06b0\u06b1")
        buf.write("\3\2\2\2\u06b1\u06b2\7\u03b0\2\2\u06b2\u06b3\5\u020e\u0108")
        buf.write("\2\u06b3\u06b4\7\u03b1\2\2\u06b4\u06ce\3\2\2\2\u06b5\u06bf")
        buf.write("\7s\2\2\u06b6\u06b7\7\u03b0\2\2\u06b7\u06b8\5\u0234\u011b")
        buf.write("\2\u06b8\u06b9\7\u03b1\2\2\u06b9\u06c0\3\2\2\2\u06ba\u06bb")
        buf.write("\7\u0112\2\2\u06bb\u06bc\7\u03b0\2\2\u06bc\u06bd\5\u020e")
        buf.write("\u0108\2\u06bd\u06be\7\u03b1\2\2\u06be\u06c0\3\2\2\2\u06bf")
        buf.write("\u06b6\3\2\2\2\u06bf\u06ba\3\2\2\2\u06c0\u06ce\3\2\2\2")
        buf.write("\u06c1\u06cb\7\u016f\2\2\u06c2\u06c3\7\u03b0\2\2\u06c3")
        buf.write("\u06c4\5\u0234\u011b\2\u06c4\u06c5\7\u03b1\2\2\u06c5\u06cc")
        buf.write("\3\2\2\2\u06c6\u06c7\7\u0112\2\2\u06c7\u06c8\7\u03b0\2")
        buf.write("\2\u06c8\u06c9\5\u020e\u0108\2\u06c9\u06ca\7\u03b1\2\2")
        buf.write("\u06ca\u06cc\3\2\2\2\u06cb\u06c2\3\2\2\2\u06cb\u06c6\3")
        buf.write("\2\2\2\u06cc\u06ce\3\2\2\2\u06cd\u06a1\3\2\2\2\u06cd\u06a9")
        buf.write("\3\2\2\2\u06cd\u06b5\3\2\2\2\u06cd\u06c1\3\2\2\2\u06ce")
        buf.write("e\3\2\2\2\u06cf\u06d1\7W\2\2\u06d0\u06cf\3\2\2\2\u06d0")
        buf.write("\u06d1\3\2\2\2\u06d1\u06d2\3\2\2\2\u06d2\u06d3\7\u0155")
        buf.write("\2\2\u06d3\u06d4\7\u03b0\2\2\u06d4\u06d5\5\u0234\u011b")
        buf.write("\2\u06d5\u06d6\7\u03b1\2\2\u06d6\u06e5\3\2\2\2\u06d7\u06d9")
        buf.write("\7W\2\2\u06d8\u06d7\3\2\2\2\u06d8\u06d9\3\2\2\2\u06d9")
        buf.write("\u06da\3\2\2\2\u06da\u06de\7O\2\2\u06db\u06dc\7\u00fa")
        buf.write("\2\2\u06dc\u06dd\7\u03a7\2\2\u06dd\u06df\t\32\2\2\u06de")
        buf.write("\u06db\3\2\2\2\u06de\u06df\3\2\2\2\u06df\u06e0\3\2\2\2")
        buf.write("\u06e0\u06e1\7\u03b0\2\2\u06e1\u06e2\5\u020e\u0108\2\u06e2")
        buf.write("\u06e3\7\u03b1\2\2\u06e3\u06e5\3\2\2\2\u06e4\u06d0\3\2")
        buf.write("\2\2\u06e4\u06d8\3\2\2\2\u06e5g\3\2\2\2\u06e6\u06e7\7")
        buf.write("o\2\2\u06e7\u06e8\5\u01f0\u00f9\2\u06e8\u06e9\7\u00a3")
        buf.write("\2\2\u06e9\u06ea\7\u016d\2\2\u06ea\u06f3\7\u0206\2\2\u06eb")
        buf.write("\u06ee\7\u03b0\2\2\u06ec\u06ef\5\u0234\u011b\2\u06ed\u06ef")
        buf.write("\5\u0218\u010d\2\u06ee\u06ec\3\2\2\2\u06ee\u06ed\3\2\2")
        buf.write("\2\u06ef\u06f0\3\2\2\2\u06f0\u06f1\7\u03b1\2\2\u06f1\u06f4")
        buf.write("\3\2\2\2\u06f2\u06f4\7`\2\2\u06f3\u06eb\3\2\2\2\u06f3")
        buf.write("\u06f2\3\2\2\2\u06f4\u06f8\3\2\2\2\u06f5\u06f7\5l\67\2")
        buf.write("\u06f6\u06f5\3\2\2\2\u06f7\u06fa\3\2\2\2\u06f8\u06f6\3")
        buf.write("\2\2\2\u06f8\u06f9\3\2\2\2\u06f9\u0703\3\2\2\2\u06fa\u06f8")
        buf.write("\3\2\2\2\u06fb\u0700\5j\66\2\u06fc\u06fd\7\u03b2\2\2\u06fd")
        buf.write("\u06ff\5j\66\2\u06fe\u06fc\3\2\2\2\u06ff\u0702\3\2\2\2")
        buf.write("\u0700\u06fe\3\2\2\2\u0700\u0701\3\2\2\2\u0701\u0704\3")
        buf.write("\2\2\2\u0702\u0700\3\2\2\2\u0703\u06fb\3\2\2\2\u0703\u0704")
        buf.write("\3\2\2\2\u0704\u072f\3\2\2\2\u0705\u0706\7o\2\2\u0706")
        buf.write("\u0707\5\u01f0\u00f9\2\u0707\u0708\7\u00a3\2\2\u0708\u0709")
        buf.write("\7D\2\2\u0709\u070a\7\u03b0\2\2\u070a\u070b\5\u0218\u010d")
        buf.write("\2\u070b\u070f\7\u03b1\2\2\u070c\u070e\5l\67\2\u070d\u070c")
        buf.write("\3\2\2\2\u070e\u0711\3\2\2\2\u070f\u070d\3\2\2\2\u070f")
        buf.write("\u0710\3\2\2\2\u0710\u071a\3\2\2\2\u0711\u070f\3\2\2\2")
        buf.write("\u0712\u0717\5j\66\2\u0713\u0714\7\u03b2\2\2\u0714\u0716")
        buf.write("\5j\66\2\u0715\u0713\3\2\2\2\u0716\u0719\3\2\2\2\u0717")
        buf.write("\u0715\3\2\2\2\u0717\u0718\3\2\2\2\u0718\u071b\3\2\2\2")
        buf.write("\u0719\u0717\3\2\2\2\u071a\u0712\3\2\2\2\u071a\u071b\3")
        buf.write("\2\2\2\u071b\u072f\3\2\2\2\u071c\u071d\7o\2\2\u071d\u0721")
        buf.write("\5\u01f0\u00f9\2\u071e\u0720\5l\67\2\u071f\u071e\3\2\2")
        buf.write("\2\u0720\u0723\3\2\2\2\u0721\u071f\3\2\2\2\u0721\u0722")
        buf.write("\3\2\2\2\u0722\u072c\3\2\2\2\u0723\u0721\3\2\2\2\u0724")
        buf.write("\u0729\5j\66\2\u0725\u0726\7\u03b2\2\2\u0726\u0728\5j")
        buf.write("\66\2\u0727\u0725\3\2\2\2\u0728\u072b\3\2\2\2\u0729\u0727")
        buf.write("\3\2\2\2\u0729\u072a\3\2\2\2\u072a\u072d\3\2\2\2\u072b")
        buf.write("\u0729\3\2\2\2\u072c\u0724\3\2\2\2\u072c\u072d\3\2\2\2")
        buf.write("\u072d\u072f\3\2\2\2\u072e\u06e6\3\2\2\2\u072e\u0705\3")
        buf.write("\2\2\2\u072e\u071c\3\2\2\2\u072fi\3\2\2\2\u0730\u0731")
        buf.write("\7\u01fe\2\2\u0731\u0735\5\u01f0\u00f9\2\u0732\u0734\5")
        buf.write("l\67\2\u0733\u0732\3\2\2\2\u0734\u0737\3\2\2\2\u0735\u0733")
        buf.write("\3\2\2\2\u0735\u0736\3\2\2\2\u0736k\3\2\2\2\u0737\u0735")
        buf.write("\3\2\2\2\u0738\u073a\7\u01fb\2\2\u0739\u0738\3\2\2\2\u0739")
        buf.write("\u073a\3\2\2\2\u073a\u073b\3\2\2\2\u073b\u073d\7\u0135")
        buf.write("\2\2\u073c\u073e\7\u03a7\2\2\u073d\u073c\3\2\2\2\u073d")
        buf.write("\u073e\3\2\2\2\u073e\u073f\3\2\2\2\u073f\u0766\5\u01e6")
        buf.write("\u00f4\2\u0740\u0742\7\u0114\2\2\u0741\u0743\7\u03a7\2")
        buf.write("\2\u0742\u0741\3\2\2\2\u0742\u0743\3\2\2\2\u0743\u0744")
        buf.write("\3\2\2\2\u0744\u0766\7\u03bf\2\2\u0745\u0746\7\u0122\2")
        buf.write("\2\u0746\u0748\7\u0129\2\2\u0747\u0749\7\u03a7\2\2\u0748")
        buf.write("\u0747\3\2\2\2\u0748\u0749\3\2\2\2\u0749\u074a\3\2\2\2")
        buf.write("\u074a\u0766\7\u03bf\2\2\u074b\u074c\7E\2\2\u074c\u074e")
        buf.write("\7\u0129\2\2\u074d\u074f\7\u03a7\2\2\u074e\u074d\3\2\2")
        buf.write("\2\u074e\u074f\3\2\2\2\u074f\u0750\3\2\2\2\u0750\u0766")
        buf.write("\7\u03bf\2\2\u0751\u0753\7\u018a\2\2\u0752\u0754\7\u03a7")
        buf.write("\2\2\u0753\u0752\3\2\2\2\u0753\u0754\3\2\2\2\u0754\u0755")
        buf.write("\3\2\2\2\u0755\u0766\5\u01f6\u00fc\2\u0756\u0758\7\u0192")
        buf.write("\2\2\u0757\u0759\7\u03a7\2\2\u0758\u0757\3\2\2\2\u0758")
        buf.write("\u0759\3\2\2\2\u0759\u075a\3\2\2\2\u075a\u0766\5\u01f6")
        buf.write("\u00fc\2\u075b\u075d\7\u0203\2\2\u075c\u075e\7\u03a7\2")
        buf.write("\2\u075d\u075c\3\2\2\2\u075d\u075e\3\2\2\2\u075e\u075f")
        buf.write("\3\2\2\2\u075f\u0766\5\u01f0\u00f9\2\u0760\u0762\7\u019d")
        buf.write("\2\2\u0761\u0763\7\u03a7\2\2\u0762\u0761\3\2\2\2\u0762")
        buf.write("\u0763\3\2\2\2\u0763\u0764\3\2\2\2\u0764\u0766\5\u01f0")
        buf.write("\u00f9\2\u0765\u0739\3\2\2\2\u0765\u0740\3\2\2\2\u0765")
        buf.write("\u0745\3\2\2\2\u0765\u074b\3\2\2\2\u0765\u0751\3\2\2\2")
        buf.write("\u0765\u0756\3\2\2\2\u0765\u075b\3\2\2\2\u0765\u0760\3")
        buf.write("\2\2\2\u0766m\3\2\2\2\u0767\u0768\7\t\2\2\u0768\u076a")
        buf.write("\t\2\2\2\u0769\u076b\5\u01f0\u00f9\2\u076a\u0769\3\2\2")
        buf.write("\2\u076a\u076b\3\2\2\2\u076b\u076d\3\2\2\2\u076c\u076e")
        buf.write("\5\62\32\2\u076d\u076c\3\2\2\2\u076e\u076f\3\2\2\2\u076f")
        buf.write("\u076d\3\2\2\2\u076f\u0770\3\2\2\2\u0770\u077a\3\2\2\2")
        buf.write("\u0771\u0772\7\t\2\2\u0772\u0773\t\2\2\2\u0773\u0774\5")
        buf.write("\u01f0\u00f9\2\u0774\u0775\7\u0211\2\2\u0775\u0776\7\u0122")
        buf.write("\2\2\u0776\u0777\7\u0129\2\2\u0777\u0778\7\u0197\2\2\u0778")
        buf.write("\u077a\3\2\2\2\u0779\u0767\3\2\2\2\u0779\u0771\3\2\2\2")
        buf.write("\u077ao\3\2\2\2\u077b\u077d\7\t\2\2\u077c\u077e\5\64\33")
        buf.write("\2\u077d\u077c\3\2\2\2\u077d\u077e\3\2\2\2\u077e\u077f")
        buf.write("\3\2\2\2\u077f\u0780\7\u013b\2\2\u0780\u0784\5\u01d6\u00ec")
        buf.write("\2\u0781\u0782\7f\2\2\u0782\u0783\7\u01dd\2\2\u0783\u0785")
        buf.write("\5\66\34\2\u0784\u0781\3\2\2\2\u0784\u0785\3\2\2\2\u0785")
        buf.write("\u078c\3\2\2\2\u0786\u0787\7f\2\2\u0787\u0789\7\u0117")
        buf.write("\2\2\u0788\u078a\7c\2\2\u0789\u0788\3\2\2\2\u0789\u078a")
        buf.write("\3\2\2\2\u078a\u078b\3\2\2\2\u078b\u078d\7\u01b8\2\2\u078c")
        buf.write("\u0786\3\2\2\2\u078c\u078d\3\2\2\2\u078d\u0791\3\2\2\2")
        buf.write("\u078e\u078f\7y\2\2\u078f\u0790\7\u0096\2\2\u0790\u0792")
        buf.write("\5\u01d6\u00ec\2\u0791\u078e\3\2\2\2\u0791\u0792\3\2\2")
        buf.write("\2\u0792\u0794\3\2\2\2\u0793\u0795\5> \2\u0794\u0793\3")
        buf.write("\2\2\2\u0794\u0795\3\2\2\2\u0795\u0798\3\2\2\2\u0796\u0797")
        buf.write("\7\u0114\2\2\u0797\u0799\7\u03bf\2\2\u0798\u0796\3\2\2")
        buf.write("\2\u0798\u0799\3\2\2\2\u0799\u079c\3\2\2\2\u079a\u079b")
        buf.write("\7\u012d\2\2\u079b\u079d\5\u014e\u00a8\2\u079c\u079a\3")
        buf.write("\2\2\2\u079c\u079d\3\2\2\2\u079dq\3\2\2\2\u079e\u079f")
        buf.write("\7\t\2\2\u079f\u07a0\7\u014f\2\2\u07a0\u07a4\5\u01d6\u00ec")
        buf.write("\2\u07a1\u07a3\5H%\2\u07a2\u07a1\3\2\2\2\u07a3\u07a6\3")
        buf.write("\2\2\2\u07a4\u07a2\3\2\2\2\u07a4\u07a5\3\2\2\2\u07a5s")
        buf.write("\3\2\2\2\u07a6\u07a4\3\2\2\2\u07a7\u07a8\7\t\2\2\u07a8")
        buf.write("\u07a9\7\u0161\2\2\u07a9\u07aa\7\u01d8\2\2\u07aa\u07ab")
        buf.write("\7\u0263\2\2\u07ab\u07ac\7\u0173\2\2\u07ac\u07ad\7O\2")
        buf.write("\2\u07adu\3\2\2\2\u07ae\u07af\7\t\2\2\u07af\u07b0\7\u0171")
        buf.write("\2\2\u07b0\u07b1\7?\2\2\u07b1\u07b2\5\u01f0\u00f9\2\u07b2")
        buf.write("\u07b3\7\7\2\2\u07b3\u07b4\7\u020c\2\2\u07b4\u07ba\7\u03bf")
        buf.write("\2\2\u07b5\u07b7\7\u015d\2\2\u07b6\u07b8\7\u03a7\2\2\u07b7")
        buf.write("\u07b6\3\2\2\2\u07b7\u07b8\3\2\2\2\u07b8\u07b9\3\2\2\2")
        buf.write("\u07b9\u07bb\5\u01f8\u00fd\2\u07ba\u07b5\3\2\2\2\u07ba")
        buf.write("\u07bb\3\2\2\2\u07bb\u07bd\3\2\2\2\u07bc\u07be\7\u0219")
        buf.write("\2\2\u07bd\u07bc\3\2\2\2\u07bd\u07be\3\2\2\2\u07be\u07bf")
        buf.write("\3\2\2\2\u07bf\u07c1\7\u0135\2\2\u07c0\u07c2\7\u03a7\2")
        buf.write("\2\u07c1\u07c0\3\2\2\2\u07c1\u07c2\3\2\2\2\u07c2\u07c3")
        buf.write("\3\2\2\2\u07c3\u07c4\5\u01e6\u00f4\2\u07c4w\3\2\2\2\u07c5")
        buf.write("\u07c6\7\t\2\2\u07c6\u07c7\7q\2\2\u07c7\u07cb\5\u01d6")
        buf.write("\u00ec\2\u07c8\u07ca\5H%\2\u07c9\u07c8\3\2\2\2\u07ca\u07cd")
        buf.write("\3\2\2\2\u07cb\u07c9\3\2\2\2\u07cb\u07cc\3\2\2\2\u07cc")
        buf.write("y\3\2\2\2\u07cd\u07cb\3\2\2\2\u07ce\u07cf\7\t\2\2\u07cf")
        buf.write("\u07d0\7\u01df\2\2\u07d0\u07d1\5\u01f0\u00f9\2\u07d1\u07d2")
        buf.write("\7\u01a8\2\2\u07d2\u07d3\7\u03b0\2\2\u07d3\u07d8\5J&\2")
        buf.write("\u07d4\u07d5\7\u03b2\2\2\u07d5\u07d7\5J&\2\u07d6\u07d4")
        buf.write("\3\2\2\2\u07d7\u07da\3\2\2\2\u07d8\u07d6\3\2\2\2\u07d8")
        buf.write("\u07d9\3\2\2\2\u07d9\u07db\3\2\2\2\u07da\u07d8\3\2\2\2")
        buf.write("\u07db\u07dc\7\u03b1\2\2\u07dc{\3\2\2\2\u07dd\u07df\7")
        buf.write("\t\2\2\u07de\u07e0\t\3\2\2\u07df\u07de\3\2\2\2\u07df\u07e0")
        buf.write("\3\2\2\2\u07e0\u07e2\3\2\2\2\u07e1\u07e3\7C\2\2\u07e2")
        buf.write("\u07e1\3\2\2\2\u07e2\u07e3\3\2\2\2\u07e3\u07e4\3\2\2\2")
        buf.write("\u07e4\u07e5\7\u0093\2\2\u07e5\u07e6\5\u01d8\u00ed\2\u07e6")
        buf.write("\u07eb\5\u0082B\2\u07e7\u07e8\7\u03b2\2\2\u07e8\u07ea")
        buf.write("\5\u0082B\2\u07e9\u07e7\3\2\2\2\u07ea\u07ed\3\2\2\2\u07eb")
        buf.write("\u07e9\3\2\2\2\u07eb\u07ec\3\2\2\2\u07ec\u07ef\3\2\2\2")
        buf.write("\u07ed\u07eb\3\2\2\2\u07ee\u07f0\5b\62\2\u07ef\u07ee\3")
        buf.write("\2\2\2\u07ef\u07f0\3\2\2\2\u07f0}\3\2\2\2\u07f1\u07f2")
        buf.write("\7\t\2\2\u07f2\u07f3\7\u0203\2\2\u07f3\u07f4\5\u01f0\u00f9")
        buf.write("\2\u07f4\u07f5\t\33\2\2\u07f5\u07f6\7\u0123\2\2\u07f6")
        buf.write("\u07fa\7\u03bf\2\2\u07f7\u07f8\7\u015d\2\2\u07f8\u07f9")
        buf.write("\7\u03a7\2\2\u07f9\u07fb\5\u01f8\u00fd\2\u07fa\u07f7\3")
        buf.write("\2\2\2\u07fa\u07fb\3\2\2\2\u07fb\u07fd\3\2\2\2\u07fc\u07fe")
        buf.write("\7\u0219\2\2\u07fd\u07fc\3\2\2\2\u07fd\u07fe\3\2\2\2\u07fe")
        buf.write("\u07ff\3\2\2\2\u07ff\u0801\7\u0135\2\2\u0800\u0802\7\u03a7")
        buf.write("\2\2\u0801\u0800\3\2\2\2\u0801\u0802\3\2\2\2\u0802\u0803")
        buf.write("\3\2\2\2\u0803\u0804\5\u01e6\u00f4\2\u0804\177\3\2\2\2")
        buf.write("\u0805\u0809\7\t\2\2\u0806\u0807\7\u00fa\2\2\u0807\u0808")
        buf.write("\7\u03a7\2\2\u0808\u080a\t\f\2\2\u0809\u0806\3\2\2\2\u0809")
        buf.write("\u080a\3\2\2\2\u080a\u080c\3\2\2\2\u080b\u080d\5\64\33")
        buf.write("\2\u080c\u080b\3\2\2\2\u080c\u080d\3\2\2\2\u080d\u0811")
        buf.write("\3\2\2\2\u080e\u080f\7\u0089\2\2\u080f\u0810\7\u01de\2")
        buf.write("\2\u0810\u0812\t\r\2\2\u0811\u080e\3\2\2\2\u0811\u0812")
        buf.write("\3\2\2\2\u0812\u0813\3\2\2\2\u0813\u0814\7\u0218\2\2\u0814")
        buf.write("\u0819\5\u01d6\u00ec\2\u0815\u0816\7\u03b0\2\2\u0816\u0817")
        buf.write("\5\u020e\u0108\2\u0817\u0818\7\u03b1\2\2\u0818\u081a\3")
        buf.write("\2\2\2\u0819\u0815\3\2\2\2\u0819\u081a\3\2\2\2\u081a\u081b")
        buf.write("\3\2\2\2\u081b\u081c\7\f\2\2\u081c\u0823\5\u00aeX\2\u081d")
        buf.write("\u081f\7\u00a7\2\2\u081e\u0820\t\16\2\2\u081f\u081e\3")
        buf.write("\2\2\2\u081f\u0820\3\2\2\2\u0820\u0821\3\2\2\2\u0821\u0822")
        buf.write("\7\30\2\2\u0822\u0824\7h\2\2\u0823\u081d\3\2\2\2\u0823")
        buf.write("\u0824\3\2\2\2\u0824\u0081\3\2\2\2\u0825\u0958\5^\60\2")
        buf.write("\u0826\u0828\7\7\2\2\u0827\u0829\7\32\2\2\u0828\u0827")
        buf.write("\3\2\2\2\u0828\u0829\3\2\2\2\u0829\u082a\3\2\2\2\u082a")
        buf.write("\u082b\5\u01f0\u00f9\2\u082b\u082f\5P)\2\u082c\u0830\7")
        buf.write("\u0149\2\2\u082d\u082e\7\u00f8\2\2\u082e\u0830\5\u01f0")
        buf.write("\u00f9\2\u082f\u082c\3\2\2\2\u082f\u082d\3\2\2\2\u082f")
        buf.write("\u0830\3\2\2\2\u0830\u0958\3\2\2\2\u0831\u0833\7\7\2\2")
        buf.write("\u0832\u0834\7\32\2\2\u0833\u0832\3\2\2\2\u0833\u0834")
        buf.write("\3\2\2\2\u0834\u0835\3\2\2\2\u0835\u0836\7\u03b0\2\2\u0836")
        buf.write("\u0837\5\u01f0\u00f9\2\u0837\u083e\5P)\2\u0838\u0839\7")
        buf.write("\u03b2\2\2\u0839\u083a\5\u01f0\u00f9\2\u083a\u083b\5P")
        buf.write(")\2\u083b\u083d\3\2\2\2\u083c\u0838\3\2\2\2\u083d\u0840")
        buf.write("\3\2\2\2\u083e\u083c\3\2\2\2\u083e\u083f\3\2\2\2\u083f")
        buf.write("\u0841\3\2\2\2\u0840\u083e\3\2\2\2\u0841\u0842\7\u03b1")
        buf.write("\2\2\u0842\u0958\3\2\2\2\u0843\u0844\7\7\2\2\u0844\u0846")
        buf.write("\t\23\2\2\u0845\u0847\5\u01f0\u00f9\2\u0846\u0845\3\2")
        buf.write("\2\2\u0846\u0847\3\2\2\2\u0847\u0849\3\2\2\2\u0848\u084a")
        buf.write("\5@!\2\u0849\u0848\3\2\2\2\u0849\u084a\3\2\2\2\u084a\u084b")
        buf.write("\3\2\2\2\u084b\u084f\5\u0214\u010b\2\u084c\u084e\5B\"")
        buf.write("\2\u084d\u084c\3\2\2\2\u084e\u0851\3\2\2\2\u084f\u084d")
        buf.write("\3\2\2\2\u084f\u0850\3\2\2\2\u0850\u0958\3\2\2\2\u0851")
        buf.write("\u084f\3\2\2\2\u0852\u0857\7\7\2\2\u0853\u0855\7\34\2")
        buf.write("\2\u0854\u0856\5\u01f0\u00f9\2\u0855\u0854\3\2\2\2\u0855")
        buf.write("\u0856\3\2\2\2\u0856\u0858\3\2\2\2\u0857\u0853\3\2\2\2")
        buf.write("\u0857\u0858\3\2\2\2\u0858\u0859\3\2\2\2\u0859\u085a\7")
        buf.write("p\2\2\u085a\u085c\7O\2\2\u085b\u085d\5@!\2\u085c\u085b")
        buf.write("\3\2\2\2\u085c\u085d\3\2\2\2\u085d\u085e\3\2\2\2\u085e")
        buf.write("\u0862\5\u0214\u010b\2\u085f\u0861\5B\"\2\u0860\u085f")
        buf.write("\3\2\2\2\u0861\u0864\3\2\2\2\u0862\u0860\3\2\2\2\u0862")
        buf.write("\u0863\3\2\2\2\u0863\u0958\3\2\2\2\u0864\u0862\3\2\2\2")
        buf.write("\u0865\u086a\7\7\2\2\u0866\u0868\7\34\2\2\u0867\u0869")
        buf.write("\5\u01f0\u00f9\2\u0868\u0867\3\2\2\2\u0868\u0869\3\2\2")
        buf.write("\2\u0869\u086b\3\2\2\2\u086a\u0866\3\2\2\2\u086a\u086b")
        buf.write("\3\2\2\2\u086b\u086c\3\2\2\2\u086c\u086e\7\u009c\2\2\u086d")
        buf.write("\u086f\t\23\2\2\u086e\u086d\3\2\2\2\u086e\u086f\3\2\2")
        buf.write("\2\u086f\u0871\3\2\2\2\u0870\u0872\5\u01f0\u00f9\2\u0871")
        buf.write("\u0870\3\2\2\2\u0871\u0872\3\2\2\2\u0872\u0874\3\2\2\2")
        buf.write("\u0873\u0875\5@!\2\u0874\u0873\3\2\2\2\u0874\u0875\3\2")
        buf.write("\2\2\u0875\u0876\3\2\2\2\u0876\u087a\5\u0214\u010b\2\u0877")
        buf.write("\u0879\5B\"\2\u0878\u0877\3\2\2\2\u0879\u087c\3\2\2\2")
        buf.write("\u087a\u0878\3\2\2\2\u087a\u087b\3\2\2\2\u087b\u0958\3")
        buf.write("\2\2\2\u087c\u087a\3\2\2\2\u087d\u087e\7\7\2\2\u087e\u0880")
        buf.write("\t\25\2\2\u087f\u0881\t\23\2\2\u0880\u087f\3\2\2\2\u0880")
        buf.write("\u0881\3\2\2\2\u0881\u0883\3\2\2\2\u0882\u0884\5\u01f0")
        buf.write("\u00f9\2\u0883\u0882\3\2\2\2\u0883\u0884\3\2\2\2\u0884")
        buf.write("\u0885\3\2\2\2\u0885\u0889\5\u0214\u010b\2\u0886\u0888")
        buf.write("\5B\"\2\u0887\u0886\3\2\2\2\u0888\u088b\3\2\2\2\u0889")
        buf.write("\u0887\3\2\2\2\u0889\u088a\3\2\2\2\u088a\u0958\3\2\2\2")
        buf.write("\u088b\u0889\3\2\2\2\u088c\u0891\7\7\2\2\u088d\u088f\7")
        buf.write("\34\2\2\u088e\u0890\5\u01f0\u00f9\2\u088f\u088e\3\2\2")
        buf.write("\2\u088f\u0890\3\2\2\2\u0890\u0892\3\2\2\2\u0891\u088d")
        buf.write("\3\2\2\2\u0891\u0892\3\2\2\2\u0892\u0893\3\2\2\2\u0893")
        buf.write("\u0894\7;\2\2\u0894\u0896\7O\2\2\u0895\u0897\5\u01f0\u00f9")
        buf.write("\2\u0896\u0895\3\2\2\2\u0896\u0897\3\2\2\2\u0897\u0898")
        buf.write("\3\2\2\2\u0898\u0899\5\u0214\u010b\2\u0899\u089a\5V,\2")
        buf.write("\u089a\u0958\3\2\2\2\u089b\u089d\7\u00fa\2\2\u089c\u089e")
        buf.write("\7\u03a7\2\2\u089d\u089c\3\2\2\2\u089d\u089e\3\2\2\2\u089e")
        buf.write("\u089f\3\2\2\2\u089f\u0958\t\5\2\2\u08a0\u08a2\7\t\2\2")
        buf.write("\u08a1\u08a3\7\32\2\2\u08a2\u08a1\3\2\2\2\u08a2\u08a3")
        buf.write("\3\2\2\2\u08a3\u08a4\3\2\2\2\u08a4\u08aa\5\u01f0\u00f9")
        buf.write("\2\u08a5\u08a6\7\u0085\2\2\u08a6\u08a7\7&\2\2\u08a7\u08ab")
        buf.write("\5\u021e\u0110\2\u08a8\u08a9\7.\2\2\u08a9\u08ab\7&\2\2")
        buf.write("\u08aa\u08a5\3\2\2\2\u08aa\u08a8\3\2\2\2\u08ab\u0958\3")
        buf.write("\2\2\2\u08ac\u08ae\7\26\2\2\u08ad\u08af\7\32\2\2\u08ae")
        buf.write("\u08ad\3\2\2\2\u08ae\u08af\3\2\2\2\u08af\u08b0\3\2\2\2")
        buf.write("\u08b0\u08b1\5\u01f0\u00f9\2\u08b1\u08b2\5\u01f0\u00f9")
        buf.write("\2\u08b2\u08b6\5P)\2\u08b3\u08b7\7\u0149\2\2\u08b4\u08b5")
        buf.write("\7\u00f8\2\2\u08b5\u08b7\5\u01f0\u00f9\2\u08b6\u08b3\3")
        buf.write("\2\2\2\u08b6\u08b4\3\2\2\2\u08b6\u08b7\3\2\2\2\u08b7\u0958")
        buf.write("\3\2\2\2\u08b8\u08ba\7Z\2\2\u08b9\u08bb\7\u03a7\2\2\u08ba")
        buf.write("\u08b9\3\2\2\2\u08ba\u08bb\3\2\2\2\u08bb\u08bc\3\2\2\2")
        buf.write("\u08bc\u0958\t\6\2\2\u08bd\u08bf\7\u0194\2\2\u08be\u08c0")
        buf.write("\7\32\2\2\u08bf\u08be\3\2\2\2\u08bf\u08c0\3\2\2\2\u08c0")
        buf.write("\u08c1\3\2\2\2\u08c1\u08c2\5\u01f0\u00f9\2\u08c2\u08c6")
        buf.write("\5P)\2\u08c3\u08c7\7\u0149\2\2\u08c4\u08c5\7\u00f8\2\2")
        buf.write("\u08c5\u08c7\5\u01f0\u00f9\2\u08c6\u08c3\3\2\2\2\u08c6")
        buf.write("\u08c4\3\2\2\2\u08c6\u08c7\3\2\2\2\u08c7\u0958\3\2\2\2")
        buf.write("\u08c8\u08ca\7.\2\2\u08c9\u08cb\7\32\2\2\u08ca\u08c9\3")
        buf.write("\2\2\2\u08ca\u08cb\3\2\2\2\u08cb\u08cc\3\2\2\2\u08cc\u0958")
        buf.write("\5\u01f0\u00f9\2\u08cd\u08ce\7.\2\2\u08ce\u08cf\7p\2\2")
        buf.write("\u08cf\u0958\7O\2\2\u08d0\u08d1\7.\2\2\u08d1\u08d2\t\23")
        buf.write("\2\2\u08d2\u0958\5\u01f0\u00f9\2\u08d3\u08d4\7.\2\2\u08d4")
        buf.write("\u08d5\7;\2\2\u08d5\u08d6\7O\2\2\u08d6\u0958\5\u01f0\u00f9")
        buf.write("\2\u08d7\u08d8\7\u012a\2\2\u08d8\u0958\7P\2\2\u08d9\u08da")
        buf.write("\7\u0131\2\2\u08da\u0958\7P\2\2\u08db\u08dd\7y\2\2\u08dc")
        buf.write("\u08de\t\34\2\2\u08dd\u08dc\3\2\2\2\u08dd\u08de\3\2\2")
        buf.write("\2\u08de\u08df\3\2\2\2\u08df\u0958\5\u01f0\u00f9\2\u08e0")
        buf.write("\u08e1\7k\2\2\u08e1\u08e2\7\21\2\2\u08e2\u0958\5\u020e")
        buf.write("\u0108\2\u08e3\u08e4\7\36\2\2\u08e4\u08e5\7\u0096\2\2")
        buf.write("\u08e5\u08e6\7\27\2\2\u08e6\u08e7\7\u0085\2\2\u08e7\u08ea")
        buf.write("\5\u01e2\u00f2\2\u08e8\u08e9\7\31\2\2\u08e9\u08eb\5\u01e4")
        buf.write("\u00f3\2\u08ea\u08e8\3\2\2\2\u08ea\u08eb\3\2\2\2\u08eb")
        buf.write("\u0958\3\2\2\2\u08ec\u08ee\7&\2\2\u08ed\u08ec\3\2\2\2")
        buf.write("\u08ed\u08ee\3\2\2\2\u08ee\u08ef\3\2\2\2\u08ef\u08f0\7")
        buf.write("\27\2\2\u08f0\u08f1\7\u0085\2\2\u08f1\u08f2\7\u03a7\2")
        buf.write("\2\u08f2\u08f6\5\u01e2\u00f2\2\u08f3\u08f4\7\31\2\2\u08f4")
        buf.write("\u08f5\7\u03a7\2\2\u08f5\u08f7\5\u01e4\u00f3\2\u08f6\u08f3")
        buf.write("\3\2\2\2\u08f6\u08f7\3\2\2\2\u08f7\u0958\3\2\2\2\u08f8")
        buf.write("\u08f9\7\u012b\2\2\u08f9\u0958\7\u0203\2\2\u08fa\u08fb")
        buf.write("\7\u015b\2\2\u08fb\u0958\7\u0203\2\2\u08fc\u0958\7:\2")
        buf.write("\2\u08fd\u08fe\t\35\2\2\u08fe\u0958\7\u0215\2\2\u08ff")
        buf.write("\u0900\7\7\2\2\u0900\u0901\7o\2\2\u0901\u0958\5h\65\2")
        buf.write("\u0902\u0903\7.\2\2\u0903\u0904\7o\2\2\u0904\u0958\5\u020e")
        buf.write("\u0108\2\u0905\u0906\7\u012b\2\2\u0906\u0909\7o\2\2\u0907")
        buf.write("\u090a\5\u020e\u0108\2\u0908\u090a\7\b\2\2\u0909\u0907")
        buf.write("\3\2\2\2\u0909\u0908\3\2\2\2\u090a\u090b\3\2\2\2\u090b")
        buf.write("\u0958\7\u0203\2\2\u090c\u090d\7\u015b\2\2\u090d\u0910")
        buf.write("\7o\2\2\u090e\u0911\5\u020e\u0108\2\u090f\u0911\7\b\2")
        buf.write("\2\u0910\u090e\3\2\2\2\u0910\u090f\3\2\2\2\u0911\u0912")
        buf.write("\3\2\2\2\u0912\u0958\7\u0203\2\2\u0913\u0914\7\u020a\2")
        buf.write("\2\u0914\u0917\7o\2\2\u0915\u0918\5\u020e\u0108\2\u0916")
        buf.write("\u0918\7\b\2\2\u0917\u0915\3\2\2\2\u0917\u0916\3\2\2\2")
        buf.write("\u0918\u0958\3\2\2\2\u0919\u091a\7\u0110\2\2\u091a\u091b")
        buf.write("\7o\2\2\u091b\u0958\5\u01f6\u00fc\2\u091c\u091d\7\u01c9")
        buf.write("\2\2\u091d\u091e\7o\2\2\u091e\u091f\5\u020e\u0108\2\u091f")
        buf.write("\u0920\7K\2\2\u0920\u0921\7\u03b0\2\2\u0921\u0926\5h\65")
        buf.write("\2\u0922\u0923\7\u03b2\2\2\u0923\u0925\5h\65\2\u0924\u0922")
        buf.write("\3\2\2\2\u0925\u0928\3\2\2\2\u0926\u0924\3\2\2\2\u0926")
        buf.write("\u0927\3\2\2\2\u0927\u0929\3\2\2\2\u0928\u0926\3\2\2\2")
        buf.write("\u0929\u092a\7\u03b1\2\2\u092a\u0958\3\2\2\2\u092b\u092c")
        buf.write("\7\u013e\2\2\u092c\u092d\7o\2\2\u092d\u092e\5\u01f0\u00f9")
        buf.write("\2\u092e\u092f\7\u00a7\2\2\u092f\u0930\7\u0093\2\2\u0930")
        buf.write("\u0933\5\u01d8\u00ed\2\u0931\u0932\t\35\2\2\u0932\u0934")
        buf.write("\7\u0215\2\2\u0933\u0931\3\2\2\2\u0933\u0934\3\2\2\2\u0934")
        buf.write("\u0958\3\2\2\2\u0935\u0936\7\n\2\2\u0936\u0939\7o\2\2")
        buf.write("\u0937\u093a\5\u020e\u0108\2\u0938\u093a\7\b\2\2\u0939")
        buf.write("\u0937\3\2\2\2\u0939\u0938\3\2\2\2\u093a\u0958\3\2\2\2")
        buf.write("\u093b\u093c\7\30\2\2\u093c\u093f\7o\2\2\u093d\u0940\5")
        buf.write("\u020e\u0108\2\u093e\u0940\7\b\2\2\u093f\u093d\3\2\2\2")
        buf.write("\u093f\u093e\3\2\2\2\u0940\u0958\3\2\2\2\u0941\u0942\7")
        buf.write("g\2\2\u0942\u0945\7o\2\2\u0943\u0946\5\u020e\u0108\2\u0944")
        buf.write("\u0946\7\b\2\2\u0945\u0943\3\2\2\2\u0945\u0944\3\2\2\2")
        buf.write("\u0946\u0958\3\2\2\2\u0947\u0948\7\u01c0\2\2\u0948\u094b")
        buf.write("\7o\2\2\u0949\u094c\5\u020e\u0108\2\u094a\u094c\7\b\2")
        buf.write("\2\u094b\u0949\3\2\2\2\u094b\u094a\3\2\2\2\u094c\u0958")
        buf.write("\3\2\2\2\u094d\u094e\7\u01ca\2\2\u094e\u0951\7o\2\2\u094f")
        buf.write("\u0952\5\u020e\u0108\2\u0950\u0952\7\b\2\2\u0951\u094f")
        buf.write("\3\2\2\2\u0951\u0950\3\2\2\2\u0952\u0958\3\2\2\2\u0953")
        buf.write("\u0954\7\u01c8\2\2\u0954\u0958\7\u01ae\2\2\u0955\u0956")
        buf.write("\7\u0211\2\2\u0956\u0958\7\u01ae\2\2\u0957\u0825\3\2\2")
        buf.write("\2\u0957\u0826\3\2\2\2\u0957\u0831\3\2\2\2\u0957\u0843")
        buf.write("\3\2\2\2\u0957\u0852\3\2\2\2\u0957\u0865\3\2\2\2\u0957")
        buf.write("\u087d\3\2\2\2\u0957\u088c\3\2\2\2\u0957\u089b\3\2\2\2")
        buf.write("\u0957\u08a0\3\2\2\2\u0957\u08ac\3\2\2\2\u0957\u08b8\3")
        buf.write("\2\2\2\u0957\u08bd\3\2\2\2\u0957\u08c8\3\2\2\2\u0957\u08cd")
        buf.write("\3\2\2\2\u0957\u08d0\3\2\2\2\u0957\u08d3\3\2\2\2\u0957")
        buf.write("\u08d7\3\2\2\2\u0957\u08d9\3\2\2\2\u0957\u08db\3\2\2\2")
        buf.write("\u0957\u08e0\3\2\2\2\u0957\u08e3\3\2\2\2\u0957\u08ed\3")
        buf.write("\2\2\2\u0957\u08f8\3\2\2\2\u0957\u08fa\3\2\2\2\u0957\u08fc")
        buf.write("\3\2\2\2\u0957\u08fd\3\2\2\2\u0957\u08ff\3\2\2\2\u0957")
        buf.write("\u0902\3\2\2\2\u0957\u0905\3\2\2\2\u0957\u090c\3\2\2\2")
        buf.write("\u0957\u0913\3\2\2\2\u0957\u0919\3\2\2\2\u0957\u091c\3")
        buf.write("\2\2\2\u0957\u092b\3\2\2\2\u0957\u0935\3\2\2\2\u0957\u093b")
        buf.write("\3\2\2\2\u0957\u0941\3\2\2\2\u0957\u0947\3\2\2\2\u0957")
        buf.write("\u094d\3\2\2\2\u0957\u0953\3\2\2\2\u0957\u0955\3\2\2\2")
        buf.write("\u0958\u0083\3\2\2\2\u0959\u095a\7.\2\2\u095a\u095c\t")
        buf.write("\2\2\2\u095b\u095d\5\u0220\u0111\2\u095c\u095b\3\2\2\2")
        buf.write("\u095c\u095d\3\2\2\2\u095d\u095e\3\2\2\2\u095e\u095f\5")
        buf.write("\u01f0\u00f9\2\u095f\u0085\3\2\2\2\u0960\u0961\7.\2\2")
        buf.write("\u0961\u0963\7\u013b\2\2\u0962\u0964\5\u0220\u0111\2\u0963")
        buf.write("\u0962\3\2\2\2\u0963\u0964\3\2\2\2\u0964\u0965\3\2\2\2")
        buf.write("\u0965\u0966\5\u01d6\u00ec\2\u0966\u0087\3\2\2\2\u0967")
        buf.write("\u0968\7.\2\2\u0968\u096a\7E\2\2\u0969\u096b\t\3\2\2\u096a")
        buf.write("\u0969\3\2\2\2\u096a\u096b\3\2\2\2\u096b\u096c\3\2\2\2")
        buf.write("\u096c\u096d\5\u01f0\u00f9\2\u096d\u096e\7f\2\2\u096e")
        buf.write("\u0974\5\u01d8\u00ed\2\u096f\u0971\7\u00fa\2\2\u0970\u0972")
        buf.write("\7\u03a7\2\2\u0971\u0970\3\2\2\2\u0971\u0972\3\2\2\2\u0972")
        buf.write("\u0973\3\2\2\2\u0973\u0975\t\5\2\2\u0974\u096f\3\2\2\2")
        buf.write("\u0974\u0975\3\2\2\2\u0975\u097b\3\2\2\2\u0976\u0978\7")
        buf.write("Z\2\2\u0977\u0979\7\u03a7\2\2\u0978\u0977\3\2\2\2\u0978")
        buf.write("\u0979\3\2\2\2\u0979\u097a\3\2\2\2\u097a\u097c\t\6\2\2")
        buf.write("\u097b\u0976\3\2\2\2\u097b\u097c\3\2\2\2\u097c\u0089\3")
        buf.write("\2\2\2\u097d\u097e\7.\2\2\u097e\u097f\7\u0171\2\2\u097f")
        buf.write("\u0980\7?\2\2\u0980\u0981\5\u01f0\u00f9\2\u0981\u0982")
        buf.write("\7\u0135\2\2\u0982\u0983\7\u03a7\2\2\u0983\u0984\5\u01e6")
        buf.write("\u00f4\2\u0984\u008b\3\2\2\2\u0985\u0986\7.\2\2\u0986")
        buf.write("\u0988\7q\2\2\u0987\u0989\5\u0220\u0111\2\u0988\u0987")
        buf.write("\3\2\2\2\u0988\u0989\3\2\2\2\u0989\u098a\3\2\2\2\u098a")
        buf.write("\u098b\5\u01d6\u00ec\2\u098b\u008d\3\2\2\2\u098c\u098d")
        buf.write("\7.\2\2\u098d\u098f\7\u014f\2\2\u098e\u0990\5\u0220\u0111")
        buf.write("\2\u098f\u098e\3\2\2\2\u098f\u0990\3\2\2\2\u0990\u0991")
        buf.write("\3\2\2\2\u0991\u0992\5\u01d6\u00ec\2\u0992\u008f\3\2\2")
        buf.write("\2\u0993\u0994\7.\2\2\u0994\u0996\7\u01df\2\2\u0995\u0997")
        buf.write("\5\u0220\u0111\2\u0996\u0995\3\2\2\2\u0996\u0997\3\2\2")
        buf.write("\2\u0997\u0998\3\2\2\2\u0998\u0999\5\u01f0\u00f9\2\u0999")
        buf.write("\u0091\3\2\2\2\u099a\u099c\7.\2\2\u099b\u099d\7\u0204")
        buf.write("\2\2\u099c\u099b\3\2\2\2\u099c\u099d\3\2\2\2\u099d\u099e")
        buf.write("\3\2\2\2\u099e\u09a0\7\u0093\2\2\u099f\u09a1\5\u0220\u0111")
        buf.write("\2\u09a0\u099f\3\2\2\2\u09a0\u09a1\3\2\2\2\u09a1\u09a2")
        buf.write("\3\2\2\2\u09a2\u09a4\5\u0210\u0109\2\u09a3\u09a5\t\36")
        buf.write("\2\2\u09a4\u09a3\3\2\2\2\u09a4\u09a5\3\2\2\2\u09a5\u0093")
        buf.write("\3\2\2\2\u09a6\u09a7\7.\2\2\u09a7\u09a8\7\u0203\2\2\u09a8")
        buf.write("\u09ae\5\u01f0\u00f9\2\u09a9\u09ab\7\u0135\2\2\u09aa\u09ac")
        buf.write("\7\u03a7\2\2\u09ab\u09aa\3\2\2\2\u09ab\u09ac\3\2\2\2\u09ac")
        buf.write("\u09ad\3\2\2\2\u09ad\u09af\5\u01e6\u00f4\2\u09ae\u09a9")
        buf.write("\3\2\2\2\u09ae\u09af\3\2\2\2\u09af\u0095\3\2\2\2\u09b0")
        buf.write("\u09b1\7.\2\2\u09b1\u09b3\7\u0098\2\2\u09b2\u09b4\5\u0220")
        buf.write("\u0111\2\u09b3\u09b2\3\2\2\2\u09b3\u09b4\3\2\2\2\u09b4")
        buf.write("\u09b5\3\2\2\2\u09b5\u09b6\5\u01d6\u00ec\2\u09b6\u0097")
        buf.write("\3\2\2\2\u09b7\u09b8\7.\2\2\u09b8\u09ba\7\u0218\2\2\u09b9")
        buf.write("\u09bb\5\u0220\u0111\2\u09ba\u09b9\3\2\2\2\u09ba\u09bb")
        buf.write("\3\2\2\2\u09bb\u09bc\3\2\2\2\u09bc\u09c1\5\u01d6\u00ec")
        buf.write("\2\u09bd\u09be\7\u03b2\2\2\u09be\u09c0\5\u01d6\u00ec\2")
        buf.write("\u09bf\u09bd\3\2\2\2\u09c0\u09c3\3\2\2\2\u09c1\u09bf\3")
        buf.write("\2\2\2\u09c1\u09c2\3\2\2\2\u09c2\u09c5\3\2\2\2\u09c3\u09c1")
        buf.write("\3\2\2\2\u09c4\u09c6\t\36\2\2\u09c5\u09c4\3\2\2\2\u09c5")
        buf.write("\u09c6\3\2\2\2\u09c6\u0099\3\2\2\2\u09c7\u09c8\7y\2\2")
        buf.write("\u09c8\u09c9\7\u0093\2\2\u09c9\u09ca\5\u01d8\u00ed\2\u09ca")
        buf.write("\u09cb\7\u0096\2\2\u09cb\u09d3\5\u01d8\u00ed\2\u09cc\u09cd")
        buf.write("\7\u03b2\2\2\u09cd\u09ce\5\u01d8\u00ed\2\u09ce\u09cf\7")
        buf.write("\u0096\2\2\u09cf\u09d0\5\u01d8\u00ed\2\u09d0\u09d2\3\2")
        buf.write("\2\2\u09d1\u09cc\3\2\2\2\u09d2\u09d5\3\2\2\2\u09d3\u09d1")
        buf.write("\3\2\2\2\u09d3\u09d4\3\2\2\2\u09d4\u009b\3\2\2\2\u09d5")
        buf.write("\u09d3\3\2\2\2\u09d6\u09d8\7\u020a\2\2\u09d7\u09d9\7\u0093")
        buf.write("\2\2\u09d8\u09d7\3\2\2\2\u09d8\u09d9\3\2\2\2\u09d9\u09da")
        buf.write("\3\2\2\2\u09da\u09db\5\u01d8\u00ed\2\u09db\u009d\3\2\2")
        buf.write("\2\u09dc\u09dd\7\22\2\2\u09dd\u09e4\5\u01d6\u00ec\2\u09de")
        buf.write("\u09e1\7\u03b0\2\2\u09df\u09e2\5\u0218\u010d\2\u09e0\u09e2")
        buf.write("\5\u0216\u010c\2\u09e1\u09df\3\2\2\2\u09e1\u09e0\3\2\2")
        buf.write("\2\u09e1\u09e2\3\2\2\2\u09e2\u09e3\3\2\2\2\u09e3\u09e5")
        buf.write("\7\u03b1\2\2\u09e4\u09de\3\2\2\2\u09e4\u09e5\3\2\2\2\u09e5")
        buf.write("\u009f\3\2\2\2\u09e6\u09e9\5\u00ba^\2\u09e7\u09e9\5\u00bc")
        buf.write("_\2\u09e8\u09e6\3\2\2\2\u09e8\u09e7\3\2\2\2\u09e9\u00a1")
        buf.write("\3\2\2\2\u09ea\u09eb\7\u012d\2\2\u09eb\u09ec\5\u0216\u010c")
        buf.write("\2\u09ec\u00a3\3\2\2\2\u09ed\u09f2\5\u00be`\2\u09ee\u09f2")
        buf.write("\5\u00c0a\2\u09ef\u09f2\5\u00c2b\2\u09f0\u09f2\5\u00c4")
        buf.write("c\2\u09f1\u09ed\3\2\2\2\u09f1\u09ee\3\2\2\2\u09f1\u09ef")
        buf.write("\3\2\2\2\u09f1\u09f0\3\2\2\2\u09f2\u00a5\3\2\2\2\u09f3")
        buf.write("\u09f5\7I\2\2\u09f4\u09f6\t\37\2\2\u09f5\u09f4\3\2\2\2")
        buf.write("\u09f5\u09f6\3\2\2\2\u09f6\u09f8\3\2\2\2\u09f7\u09f9\7")
        buf.write("C\2\2\u09f8\u09f7\3\2\2\2\u09f8\u09f9\3\2\2\2\u09f9\u09fb")
        buf.write("\3\2\2\2\u09fa\u09fc\7K\2\2\u09fb\u09fa\3\2\2\2\u09fb")
        buf.write("\u09fc\3\2\2\2\u09fc\u09fd\3\2\2\2\u09fd\u0a03\5\u01d8")
        buf.write("\u00ed\2\u09fe\u09ff\7o\2\2\u09ff\u0a00\7\u03b0\2\2\u0a00")
        buf.write("\u0a01\5\u020e\u0108\2\u0a01\u0a02\7\u03b1\2\2\u0a02\u0a04")
        buf.write("\3\2\2\2\u0a03\u09fe\3\2\2\2\u0a03\u0a04\3\2\2\2\u0a04")
        buf.write("\u0a15\3\2\2\2\u0a05\u0a06\7\u03b0\2\2\u0a06\u0a07\5\u020e")
        buf.write("\u0108\2\u0a07\u0a08\7\u03b1\2\2\u0a08\u0a0a\3\2\2\2\u0a09")
        buf.write("\u0a05\3\2\2\2\u0a09\u0a0a\3\2\2\2\u0a0a\u0a0b\3\2\2\2")
        buf.write("\u0a0b\u0a16\5\u00b2Z\2\u0a0c\u0a0d\7\u0085\2\2\u0a0d")
        buf.write("\u0a12\5\u00b4[\2\u0a0e\u0a0f\7\u03b2\2\2\u0a0f\u0a11")
        buf.write("\5\u00b4[\2\u0a10\u0a0e\3\2\2\2\u0a11\u0a14\3\2\2\2\u0a12")
        buf.write("\u0a10\3\2\2\2\u0a12\u0a13\3\2\2\2\u0a13\u0a16\3\2\2\2")
        buf.write("\u0a14\u0a12\3\2\2\2\u0a15\u0a09\3\2\2\2\u0a15\u0a0c\3")
        buf.write("\2\2\2\u0a16\u0a23\3\2\2\2\u0a17\u0a18\7f\2\2\u0a18\u0a19")
        buf.write("\7\u012f\2\2\u0a19\u0a1a\7O\2\2\u0a1a\u0a1b\7\u009f\2")
        buf.write("\2\u0a1b\u0a20\5\u00b4[\2\u0a1c\u0a1d\7\u03b2\2\2\u0a1d")
        buf.write("\u0a1f\5\u00b4[\2\u0a1e\u0a1c\3\2\2\2\u0a1f\u0a22\3\2")
        buf.write("\2\2\u0a20\u0a1e\3\2\2\2\u0a20\u0a21\3\2\2\2\u0a21\u0a24")
        buf.write("\3\2\2\2\u0a22\u0a20\3\2\2\2\u0a23\u0a17\3\2\2\2\u0a23")
        buf.write("\u0a24\3\2\2\2\u0a24\u00a7\3\2\2\2\u0a25\u0a26\7Y\2\2")
        buf.write("\u0a26\u0a28\7\u0122\2\2\u0a27\u0a29\t \2\2\u0a28\u0a27")
        buf.write("\3\2\2\2\u0a28\u0a29\3\2\2\2\u0a29\u0a2b\3\2\2\2\u0a2a")
        buf.write("\u0a2c\7\u0170\2\2\u0a2b\u0a2a\3\2\2\2\u0a2b\u0a2c\3\2")
        buf.write("\2\2\u0a2c\u0a2d\3\2\2\2\u0a2d\u0a2e\7F\2\2\u0a2e\u0a30")
        buf.write("\7\u03bf\2\2\u0a2f\u0a31\t\b\2\2\u0a30\u0a2f\3\2\2\2\u0a30")
        buf.write("\u0a31\3\2\2\2\u0a31\u0a32\3\2\2\2\u0a32\u0a33\7K\2\2")
        buf.write("\u0a33\u0a34\7\u0093\2\2\u0a34\u0a3a\5\u01d8\u00ed\2\u0a35")
        buf.write("\u0a36\7o\2\2\u0a36\u0a37\7\u03b0\2\2\u0a37\u0a38\5\u020e")
        buf.write("\u0108\2\u0a38\u0a39\7\u03b1\2\2\u0a39\u0a3b\3\2\2\2\u0a3a")
        buf.write("\u0a35\3\2\2\2\u0a3a\u0a3b\3\2\2\2\u0a3b\u0a3f\3\2\2\2")
        buf.write("\u0a3c\u0a3d\7\27\2\2\u0a3d\u0a3e\7\u0085\2\2\u0a3e\u0a40")
        buf.write("\5\u01e2\u00f2\2\u0a3f\u0a3c\3\2\2\2\u0a3f\u0a40\3\2\2")
        buf.write("\2\u0a40\u0a54\3\2\2\2\u0a41\u0a45\t!\2\2\u0a42\u0a43")
        buf.write("\7\u0094\2\2\u0a43\u0a44\7\21\2\2\u0a44\u0a46\7\u03bf")
        buf.write("\2\2\u0a45\u0a42\3\2\2\2\u0a45\u0a46\3\2\2\2\u0a46\u0a4d")
        buf.write("\3\2\2\2\u0a47\u0a49\7i\2\2\u0a48\u0a47\3\2\2\2\u0a48")
        buf.write("\u0a49\3\2\2\2\u0a49\u0a4a\3\2\2\2\u0a4a\u0a4b\7\62\2")
        buf.write("\2\u0a4b\u0a4c\7\21\2\2\u0a4c\u0a4e\7\u03bf\2\2\u0a4d")
        buf.write("\u0a48\3\2\2\2\u0a4d\u0a4e\3\2\2\2\u0a4e\u0a52\3\2\2\2")
        buf.write("\u0a4f\u0a50\7\63\2\2\u0a50\u0a51\7\21\2\2\u0a51\u0a53")
        buf.write("\7\u03bf\2\2\u0a52\u0a4f\3\2\2\2\u0a52\u0a53\3\2\2\2\u0a53")
        buf.write("\u0a55\3\2\2\2\u0a54\u0a41\3\2\2\2\u0a54\u0a55\3\2\2\2")
        buf.write("\u0a55\u0a61\3\2\2\2\u0a56\u0a5a\7X\2\2\u0a57\u0a58\7")
        buf.write("\u0091\2\2\u0a58\u0a59\7\21\2\2\u0a59\u0a5b\7\u03bf\2")
        buf.write("\2\u0a5a\u0a57\3\2\2\2\u0a5a\u0a5b\3\2\2\2\u0a5b\u0a5f")
        buf.write("\3\2\2\2\u0a5c\u0a5d\7\u0094\2\2\u0a5d\u0a5e\7\21\2\2")
        buf.write("\u0a5e\u0a60\7\u03bf\2\2\u0a5f\u0a5c\3\2\2\2\u0a5f\u0a60")
        buf.write("\3\2\2\2\u0a60\u0a62\3\2\2\2\u0a61\u0a56\3\2\2\2\u0a61")
        buf.write("\u0a62\3\2\2\2\u0a62\u0a67\3\2\2\2\u0a63\u0a64\7C\2\2")
        buf.write("\u0a64\u0a65\5\u01f6\u00fc\2\u0a65\u0a66\t\"\2\2\u0a66")
        buf.write("\u0a68\3\2\2\2\u0a67\u0a63\3\2\2\2\u0a67\u0a68\3\2\2\2")
        buf.write("\u0a68\u0a74\3\2\2\2\u0a69\u0a6a\7\u03b0\2\2\u0a6a\u0a6f")
        buf.write("\5\u00b6\\\2\u0a6b\u0a6c\7\u03b2\2\2\u0a6c\u0a6e\5\u00b6")
        buf.write("\\\2\u0a6d\u0a6b\3\2\2\2\u0a6e\u0a71\3\2\2\2\u0a6f\u0a6d")
        buf.write("\3\2\2\2\u0a6f\u0a70\3\2\2\2\u0a70\u0a72\3\2\2\2\u0a71")
        buf.write("\u0a6f\3\2\2\2\u0a72\u0a73\7\u03b1\2\2\u0a73\u0a75\3\2")
        buf.write("\2\2\u0a74\u0a69\3\2\2\2\u0a74\u0a75\3\2\2\2\u0a75\u0a7f")
        buf.write("\3\2\2\2\u0a76\u0a77\7\u0085\2\2\u0a77\u0a7c\5\u00b4[")
        buf.write("\2\u0a78\u0a79\7\u03b2\2\2\u0a79\u0a7b\5\u00b4[\2\u0a7a")
        buf.write("\u0a78\3\2\2\2\u0a7b\u0a7e\3\2\2\2\u0a7c\u0a7a\3\2\2\2")
        buf.write("\u0a7c\u0a7d\3\2\2\2\u0a7d\u0a80\3\2\2\2\u0a7e\u0a7c\3")
        buf.write("\2\2\2\u0a7f\u0a76\3\2\2\2\u0a7f\u0a80\3\2\2\2\u0a80\u00a9")
        buf.write("\3\2\2\2\u0a81\u0a82\7Y\2\2\u0a82\u0a84\7\u0220\2\2\u0a83")
        buf.write("\u0a85\t \2\2\u0a84\u0a83\3\2\2\2\u0a84\u0a85\3\2\2\2")
        buf.write("\u0a85\u0a87\3\2\2\2\u0a86\u0a88\7\u0170\2\2\u0a87\u0a86")
        buf.write("\3\2\2\2\u0a87\u0a88\3\2\2\2\u0a88\u0a89\3\2\2\2\u0a89")
        buf.write("\u0a8a\7F\2\2\u0a8a\u0a8c\7\u03bf\2\2\u0a8b\u0a8d\t\b")
        buf.write("\2\2\u0a8c\u0a8b\3\2\2\2\u0a8c\u0a8d\3\2\2\2\u0a8d\u0a8e")
        buf.write("\3\2\2\2\u0a8e\u0a8f\7K\2\2\u0a8f\u0a90\7\u0093\2\2\u0a90")
        buf.write("\u0a94\5\u01d8\u00ed\2\u0a91\u0a92\7\27\2\2\u0a92\u0a93")
        buf.write("\7\u0085\2\2\u0a93\u0a95\5\u01e2\u00f2\2\u0a94\u0a91\3")
        buf.write("\2\2\2\u0a94\u0a95\3\2\2\2\u0a95\u0a9c\3\2\2\2\u0a96\u0a97")
        buf.write("\7\u01da\2\2\u0a97\u0a98\7\u0159\2\2\u0a98\u0a99\7\21")
        buf.write("\2\2\u0a99\u0a9a\7\u03a9\2\2\u0a9a\u0a9b\7\u03bf\2\2\u0a9b")
        buf.write("\u0a9d\7\u03a8\2\2\u0a9c\u0a96\3\2\2\2\u0a9c\u0a9d\3\2")
        buf.write("\2\2\u0a9d\u0aa2\3\2\2\2\u0a9e\u0a9f\7C\2\2\u0a9f\u0aa0")
        buf.write("\5\u01f6\u00fc\2\u0aa0\u0aa1\t\"\2\2\u0aa1\u0aa3\3\2\2")
        buf.write("\2\u0aa2\u0a9e\3\2\2\2\u0aa2\u0aa3\3\2\2\2\u0aa3\u0aaf")
        buf.write("\3\2\2\2\u0aa4\u0aa5\7\u03b0\2\2\u0aa5\u0aaa\5\u00b6\\")
        buf.write("\2\u0aa6\u0aa7\7\u03b2\2\2\u0aa7\u0aa9\5\u00b6\\\2\u0aa8")
        buf.write("\u0aa6\3\2\2\2\u0aa9\u0aac\3\2\2\2\u0aaa\u0aa8\3\2\2\2")
        buf.write("\u0aaa\u0aab\3\2\2\2\u0aab\u0aad\3\2\2\2\u0aac\u0aaa\3")
        buf.write("\2\2\2\u0aad\u0aae\7\u03b1\2\2\u0aae\u0ab0\3\2\2\2\u0aaf")
        buf.write("\u0aa4\3\2\2\2\u0aaf\u0ab0\3\2\2\2\u0ab0\u0aba\3\2\2\2")
        buf.write("\u0ab1\u0ab2\7\u0085\2\2\u0ab2\u0ab7\5\u00b4[\2\u0ab3")
        buf.write("\u0ab4\7\u03b2\2\2\u0ab4\u0ab6\5\u00b4[\2\u0ab5\u0ab3")
        buf.write("\3\2\2\2\u0ab6\u0ab9\3\2\2\2\u0ab7\u0ab5\3\2\2\2\u0ab7")
        buf.write("\u0ab8\3\2\2\2\u0ab8\u0abb\3\2\2\2\u0ab9\u0ab7\3\2\2\2")
        buf.write("\u0aba\u0ab1\3\2\2\2\u0aba\u0abb\3\2\2\2\u0abb\u00ab\3")
        buf.write("\2\2\2\u0abc\u0abe\7{\2\2\u0abd\u0abf\t#\2\2\u0abe\u0abd")
        buf.write("\3\2\2\2\u0abe\u0abf\3\2\2\2\u0abf\u0ac1\3\2\2\2\u0ac0")
        buf.write("\u0ac2\7K\2\2\u0ac1\u0ac0\3\2\2\2\u0ac1\u0ac2\3\2\2\2")
        buf.write("\u0ac2\u0ac3\3\2\2\2\u0ac3\u0ac9\5\u01d8\u00ed\2\u0ac4")
        buf.write("\u0ac5\7o\2\2\u0ac5\u0ac6\7\u03b0\2\2\u0ac6\u0ac7\5\u020e")
        buf.write("\u0108\2\u0ac7\u0ac8\7\u03b1\2\2\u0ac8\u0aca\3\2\2\2\u0ac9")
        buf.write("\u0ac4\3\2\2\2\u0ac9\u0aca\3\2\2\2\u0aca\u0adb\3\2\2\2")
        buf.write("\u0acb\u0acc\7\u03b0\2\2\u0acc\u0acd\5\u020e\u0108\2\u0acd")
        buf.write("\u0ace\7\u03b1\2\2\u0ace\u0ad0\3\2\2\2\u0acf\u0acb\3\2")
        buf.write("\2\2\u0acf\u0ad0\3\2\2\2\u0ad0\u0ad1\3\2\2\2\u0ad1\u0adc")
        buf.write("\5\u00b2Z\2\u0ad2\u0ad3\7\u0085\2\2\u0ad3\u0ad8\5\u00b4")
        buf.write("[\2\u0ad4\u0ad5\7\u03b2\2\2\u0ad5\u0ad7\5\u00b4[\2\u0ad6")
        buf.write("\u0ad4\3\2\2\2\u0ad7\u0ada\3\2\2\2\u0ad8\u0ad6\3\2\2\2")
        buf.write("\u0ad8\u0ad9\3\2\2\2\u0ad9\u0adc\3\2\2\2\u0ada\u0ad8\3")
        buf.write("\2\2\2\u0adb\u0acf\3\2\2\2\u0adb\u0ad2\3\2\2\2\u0adc\u00ad")
        buf.write("\3\2\2\2\u0add\u0adf\5\u00e0q\2\u0ade\u0ae0\5\u00b8]\2")
        buf.write("\u0adf\u0ade\3\2\2\2\u0adf\u0ae0\3\2\2\2\u0ae0\u0b15\3")
        buf.write("\2\2\2\u0ae1\u0ae3\5\u00dco\2\u0ae2\u0ae4\5\u00b8]\2\u0ae3")
        buf.write("\u0ae2\3\2\2\2\u0ae3\u0ae4\3\2\2\2\u0ae4\u0b15\3\2\2\2")
        buf.write("\u0ae5\u0ae7\5\u00e2r\2\u0ae6\u0ae8\5\u00e6t\2\u0ae7\u0ae6")
        buf.write("\3\2\2\2\u0ae8\u0ae9\3\2\2\2\u0ae9\u0ae7\3\2\2\2\u0ae9")
        buf.write("\u0aea\3\2\2\2\u0aea\u0af3\3\2\2\2\u0aeb\u0aed\7\u009b")
        buf.write("\2\2\u0aec\u0aee\t$\2\2\u0aed\u0aec\3\2\2\2\u0aed\u0aee")
        buf.write("\3\2\2\2\u0aee\u0af1\3\2\2\2\u0aef\u0af2\5\u00e0q\2\u0af0")
        buf.write("\u0af2\5\u00dco\2\u0af1\u0aef\3\2\2\2\u0af1\u0af0\3\2")
        buf.write("\2\2\u0af2\u0af4\3\2\2\2\u0af3\u0aeb\3\2\2\2\u0af3\u0af4")
        buf.write("\3\2\2\2\u0af4\u0af6\3\2\2\2\u0af5\u0af7\5\u00caf\2\u0af6")
        buf.write("\u0af5\3\2\2\2\u0af6\u0af7\3\2\2\2\u0af7\u0af9\3\2\2\2")
        buf.write("\u0af8\u0afa\5\u00f4{\2\u0af9\u0af8\3\2\2\2\u0af9\u0afa")
        buf.write("\3\2\2\2\u0afa\u0afc\3\2\2\2\u0afb\u0afd\5\u00b8]\2\u0afc")
        buf.write("\u0afb\3\2\2\2\u0afc\u0afd\3\2\2\2\u0afd\u0b15\3\2\2\2")
        buf.write("\u0afe\u0b00\5\u00dep\2\u0aff\u0b01\5\u00e4s\2\u0b00\u0aff")
        buf.write("\3\2\2\2\u0b01\u0b02\3\2\2\2\u0b02\u0b00\3\2\2\2\u0b02")
        buf.write("\u0b03\3\2\2\2\u0b03\u0b09\3\2\2\2\u0b04\u0b06\7\u009b")
        buf.write("\2\2\u0b05\u0b07\t$\2\2\u0b06\u0b05\3\2\2\2\u0b06\u0b07")
        buf.write("\3\2\2\2\u0b07\u0b08\3\2\2\2\u0b08\u0b0a\5\u00dco\2\u0b09")
        buf.write("\u0b04\3\2\2\2\u0b09\u0b0a\3\2\2\2\u0b0a\u0b0c\3\2\2\2")
        buf.write("\u0b0b\u0b0d\5\u00caf\2\u0b0c\u0b0b\3\2\2\2\u0b0c\u0b0d")
        buf.write("\3\2\2\2\u0b0d\u0b0f\3\2\2\2\u0b0e\u0b10\5\u00f4{\2\u0b0f")
        buf.write("\u0b0e\3\2\2\2\u0b0f\u0b10\3\2\2\2\u0b10\u0b12\3\2\2\2")
        buf.write("\u0b11\u0b13\5\u00b8]\2\u0b12\u0b11\3\2\2\2\u0b12\u0b13")
        buf.write("\3\2\2\2\u0b13\u0b15\3\2\2\2\u0b14\u0add\3\2\2\2\u0b14")
        buf.write("\u0ae1\3\2\2\2\u0b14\u0ae5\3\2\2\2\u0b14\u0afe\3\2\2\2")
        buf.write("\u0b15\u00af\3\2\2\2\u0b16\u0b19\5\u00c6d\2\u0b17\u0b19")
        buf.write("\5\u00c8e\2\u0b18\u0b16\3\2\2\2\u0b18\u0b17\3\2\2\2\u0b19")
        buf.write("\u00b1\3\2\2\2\u0b1a\u0b2a\5\u00aeX\2\u0b1b\u0b1c\t%\2")
        buf.write("\2\u0b1c\u0b1d\7\u03b0\2\2\u0b1d\u0b1e\5\u0216\u010c\2")
        buf.write("\u0b1e\u0b26\7\u03b1\2\2\u0b1f\u0b20\7\u03b2\2\2\u0b20")
        buf.write("\u0b21\7\u03b0\2\2\u0b21\u0b22\5\u0216\u010c\2\u0b22\u0b23")
        buf.write("\7\u03b1\2\2\u0b23\u0b25\3\2\2\2\u0b24\u0b1f\3\2\2\2\u0b25")
        buf.write("\u0b28\3\2\2\2\u0b26\u0b24\3\2\2\2\u0b26\u0b27\3\2\2\2")
        buf.write("\u0b27\u0b2a\3\2\2\2\u0b28\u0b26\3\2\2\2\u0b29\u0b1a\3")
        buf.write("\2\2\2\u0b29\u0b1b\3\2\2\2\u0b2a\u00b3\3\2\2\2\u0b2b\u0b2c")
        buf.write("\5\u01da\u00ee\2\u0b2c\u0b2d\7\u03a7\2\2\u0b2d\u0b2e\5")
        buf.write("\u0234\u011b\2\u0b2e\u00b5\3\2\2\2\u0b2f\u0b32\5\u01f0")
        buf.write("\u00f9\2\u0b30\u0b32\7\u03ca\2\2\u0b31\u0b2f\3\2\2\2\u0b31")
        buf.write("\u0b30\3\2\2\2\u0b32\u00b7\3\2\2\2\u0b33\u0b34\79\2\2")
        buf.write("\u0b34\u0b3a\7\u009f\2\2\u0b35\u0b36\7Z\2\2\u0b36\u0b37")
        buf.write("\7D\2\2\u0b37\u0b38\7\u01e1\2\2\u0b38\u0b3a\7\u0193\2")
        buf.write("\2\u0b39\u0b33\3\2\2\2\u0b39\u0b35\3\2\2\2\u0b3a\u00b9")
        buf.write("\3\2\2\2\u0b3b\u0b3d\7(\2\2\u0b3c\u0b3e\7\\\2\2\u0b3d")
        buf.write("\u0b3c\3\2\2\2\u0b3d\u0b3e\3\2\2\2\u0b3e\u0b40\3\2\2\2")
        buf.write("\u0b3f\u0b41\7\u01bf\2\2\u0b40\u0b3f\3\2\2\2\u0b40\u0b41")
        buf.write("\3\2\2\2\u0b41\u0b43\3\2\2\2\u0b42\u0b44\7C\2\2\u0b43")
        buf.write("\u0b42\3\2\2\2\u0b43\u0b44\3\2\2\2\u0b44\u0b45\3\2\2\2")
        buf.write("\u0b45\u0b46\7<\2\2\u0b46\u0b4c\5\u01d8\u00ed\2\u0b47")
        buf.write("\u0b48\7o\2\2\u0b48\u0b49\7\u03b0\2\2\u0b49\u0b4a\5\u020e")
        buf.write("\u0108\2\u0b4a\u0b4b\7\u03b1\2\2\u0b4b\u0b4d\3\2\2\2\u0b4c")
        buf.write("\u0b47\3\2\2\2\u0b4c\u0b4d\3\2\2\2\u0b4d\u0b50\3\2\2\2")
        buf.write("\u0b4e\u0b4f\7\u00a5\2\2\u0b4f\u0b51\5\u0234\u011b\2\u0b50")
        buf.write("\u0b4e\3\2\2\2\u0b50\u0b51\3\2\2\2\u0b51\u0b53\3\2\2\2")
        buf.write("\u0b52\u0b54\5\u00caf\2\u0b53\u0b52\3\2\2\2\u0b53\u0b54")
        buf.write("\3\2\2\2\u0b54\u0b57\3\2\2\2\u0b55\u0b56\7V\2\2\u0b56")
        buf.write("\u0b58\5\u01f6\u00fc\2\u0b57\u0b55\3\2\2\2\u0b57\u0b58")
        buf.write("\3\2\2\2\u0b58\u00bb\3\2\2\2\u0b59\u0b5b\7(\2\2\u0b5a")
        buf.write("\u0b5c\7\\\2\2\u0b5b\u0b5a\3\2\2\2\u0b5b\u0b5c\3\2\2\2")
        buf.write("\u0b5c\u0b5e\3\2\2\2\u0b5d\u0b5f\7\u01bf\2\2\u0b5e\u0b5d")
        buf.write("\3\2\2\2\u0b5e\u0b5f\3\2\2\2\u0b5f\u0b61\3\2\2\2\u0b60")
        buf.write("\u0b62\7C\2\2\u0b61\u0b60\3\2\2\2\u0b61\u0b62\3\2\2\2")
        buf.write("\u0b62\u0b8a\3\2\2\2\u0b63\u0b66\5\u01d8\u00ed\2\u0b64")
        buf.write("\u0b65\7\u03af\2\2\u0b65\u0b67\7\u03a0\2\2\u0b66\u0b64")
        buf.write("\3\2\2\2\u0b66\u0b67\3\2\2\2\u0b67\u0b70\3\2\2\2\u0b68")
        buf.write("\u0b69\7\u03b2\2\2\u0b69\u0b6c\5\u01d8\u00ed\2\u0b6a\u0b6b")
        buf.write("\7\u03af\2\2\u0b6b\u0b6d\7\u03a0\2\2\u0b6c\u0b6a\3\2\2")
        buf.write("\2\u0b6c\u0b6d\3\2\2\2\u0b6d\u0b6f\3\2\2\2\u0b6e\u0b68")
        buf.write("\3\2\2\2\u0b6f\u0b72\3\2\2\2\u0b70\u0b6e\3\2\2\2\u0b70")
        buf.write("\u0b71\3\2\2\2\u0b71\u0b73\3\2\2\2\u0b72\u0b70\3\2\2\2")
        buf.write("\u0b73\u0b74\7<\2\2\u0b74\u0b75\5\u00ceh\2\u0b75\u0b8b")
        buf.write("\3\2\2\2\u0b76\u0b77\7<\2\2\u0b77\u0b7a\5\u01d8\u00ed")
        buf.write("\2\u0b78\u0b79\7\u03af\2\2\u0b79\u0b7b\7\u03a0\2\2\u0b7a")
        buf.write("\u0b78\3\2\2\2\u0b7a\u0b7b\3\2\2\2\u0b7b\u0b84\3\2\2\2")
        buf.write("\u0b7c\u0b7d\7\u03b2\2\2\u0b7d\u0b80\5\u01d8\u00ed\2\u0b7e")
        buf.write("\u0b7f\7\u03af\2\2\u0b7f\u0b81\7\u03a0\2\2\u0b80\u0b7e")
        buf.write("\3\2\2\2\u0b80\u0b81\3\2\2\2\u0b81\u0b83\3\2\2\2\u0b82")
        buf.write("\u0b7c\3\2\2\2\u0b83\u0b86\3\2\2\2\u0b84\u0b82\3\2\2\2")
        buf.write("\u0b84\u0b85\3\2\2\2\u0b85\u0b87\3\2\2\2\u0b86\u0b84\3")
        buf.write("\2\2\2\u0b87\u0b88\7\u00a2\2\2\u0b88\u0b89\5\u00ceh\2")
        buf.write("\u0b89\u0b8b\3\2\2\2\u0b8a\u0b63\3\2\2\2\u0b8a\u0b76\3")
        buf.write("\2\2\2\u0b8b\u0b8e\3\2\2\2\u0b8c\u0b8d\7\u00a5\2\2\u0b8d")
        buf.write("\u0b8f\5\u0234\u011b\2\u0b8e\u0b8c\3\2\2\2\u0b8e\u0b8f")
        buf.write("\3\2\2\2\u0b8f\u00bd\3\2\2\2\u0b90\u0b91\7\u0154\2\2\u0b91")
        buf.write("\u0b92\5\u01d8\u00ed\2\u0b92\u0b97\7\u01a6\2\2\u0b93\u0b95")
        buf.write("\7\f\2\2\u0b94\u0b93\3\2\2\2\u0b94\u0b95\3\2\2\2\u0b95")
        buf.write("\u0b96\3\2\2\2\u0b96\u0b98\5\u01f0\u00f9\2\u0b97\u0b94")
        buf.write("\3\2\2\2\u0b97\u0b98\3\2\2\2\u0b98\u00bf\3\2\2\2\u0b99")
        buf.write("\u0b9a\7\u0154\2\2\u0b9a\u0b9b\5\u01d8\u00ed\2\u0b9b\u0b9c")
        buf.write("\7t\2\2\u0b9c\u0ba3\5\u01d6\u00ec\2\u0b9d\u0b9e\5\u023c")
        buf.write("\u011f\2\u0b9e\u0b9f\7\u03b0\2\2\u0b9f\u0ba0\5\u0218\u010d")
        buf.write("\2\u0ba0\u0ba1\7\u03b1\2\2\u0ba1\u0ba4\3\2\2\2\u0ba2\u0ba4")
        buf.write("\t&\2\2\u0ba3\u0b9d\3\2\2\2\u0ba3\u0ba2\3\2\2\2\u0ba4")
        buf.write("\u0ba7\3\2\2\2\u0ba5\u0ba6\7\u00a5\2\2\u0ba6\u0ba8\5\u0234")
        buf.write("\u011b\2\u0ba7\u0ba5\3\2\2\2\u0ba7\u0ba8\3\2\2\2\u0ba8")
        buf.write("\u0bab\3\2\2\2\u0ba9\u0baa\7V\2\2\u0baa\u0bac\5\u01f6")
        buf.write("\u00fc\2\u0bab\u0ba9\3\2\2\2\u0bab\u0bac\3\2\2\2\u0bac")
        buf.write("\u00c1\3\2\2\2\u0bad\u0bae\7\u0154\2\2\u0bae\u0baf\5\u01d8")
        buf.write("\u00ed\2\u0baf\u0bb0\7t\2\2\u0bb0\u0bb3\t\'\2\2\u0bb1")
        buf.write("\u0bb2\7\u00a5\2\2\u0bb2\u0bb4\5\u0234\u011b\2\u0bb3\u0bb1")
        buf.write("\3\2\2\2\u0bb3\u0bb4\3\2\2\2\u0bb4\u0bb7\3\2\2\2\u0bb5")
        buf.write("\u0bb6\7V\2\2\u0bb6\u0bb8\5\u01f6\u00fc\2\u0bb7\u0bb5")
        buf.write("\3\2\2\2\u0bb7\u0bb8\3\2\2\2\u0bb8\u00c3\3\2\2\2\u0bb9")
        buf.write("\u0bba\7\u0154\2\2\u0bba\u0bbb\5\u01d8\u00ed\2\u0bbb\u0bbc")
        buf.write("\7\u010f\2\2\u0bbc\u00c5\3\2\2\2\u0bbd\u0bbf\7\u009f\2")
        buf.write("\2\u0bbe\u0bc0\7\\\2\2\u0bbf\u0bbe\3\2\2\2\u0bbf\u0bc0")
        buf.write("\3\2\2\2\u0bc0\u0bc2\3\2\2\2\u0bc1\u0bc3\7C\2\2\u0bc2")
        buf.write("\u0bc1\3\2\2\2\u0bc2\u0bc3\3\2\2\2\u0bc3\u0bc4\3\2\2\2")
        buf.write("\u0bc4\u0bc9\5\u01d8\u00ed\2\u0bc5\u0bc7\7\f\2\2\u0bc6")
        buf.write("\u0bc5\3\2\2\2\u0bc6\u0bc7\3\2\2\2\u0bc7\u0bc8\3\2\2\2")
        buf.write("\u0bc8\u0bca\5\u01f0\u00f9\2\u0bc9\u0bc6\3\2\2\2\u0bc9")
        buf.write("\u0bca\3\2\2\2\u0bca\u0bcb\3\2\2\2\u0bcb\u0bcc\7\u0085")
        buf.write("\2\2\u0bcc\u0bd1\5\u00b4[\2\u0bcd\u0bce\7\u03b2\2\2\u0bce")
        buf.write("\u0bd0\5\u00b4[\2\u0bcf\u0bcd\3\2\2\2\u0bd0\u0bd3\3\2")
        buf.write("\2\2\u0bd1\u0bcf\3\2\2\2\u0bd1\u0bd2\3\2\2\2\u0bd2\u0bd6")
        buf.write("\3\2\2\2\u0bd3\u0bd1\3\2\2\2\u0bd4\u0bd5\7\u00a5\2\2\u0bd5")
        buf.write("\u0bd7\5\u0234\u011b\2\u0bd6\u0bd4\3\2\2\2\u0bd6\u0bd7")
        buf.write("\3\2\2\2\u0bd7\u0bd9\3\2\2\2\u0bd8\u0bda\5\u00caf\2\u0bd9")
        buf.write("\u0bd8\3\2\2\2\u0bd9\u0bda\3\2\2\2\u0bda\u0bdc\3\2\2\2")
        buf.write("\u0bdb\u0bdd\5\u00f4{\2\u0bdc\u0bdb\3\2\2\2\u0bdc\u0bdd")
        buf.write("\3\2\2\2\u0bdd\u00c7\3\2\2\2\u0bde\u0be0\7\u009f\2\2\u0bdf")
        buf.write("\u0be1\7\\\2\2\u0be0\u0bdf\3\2\2\2\u0be0\u0be1\3\2\2\2")
        buf.write("\u0be1\u0be3\3\2\2\2\u0be2\u0be4\7C\2\2\u0be3\u0be2\3")
        buf.write("\2\2\2\u0be3\u0be4\3\2\2\2\u0be4\u0be5\3\2\2\2\u0be5\u0be6")
        buf.write("\5\u00ceh\2\u0be6\u0be7\7\u0085\2\2\u0be7\u0bec\5\u00b4")
        buf.write("[\2\u0be8\u0be9\7\u03b2\2\2\u0be9\u0beb\5\u00b4[\2\u0bea")
        buf.write("\u0be8\3\2\2\2\u0beb\u0bee\3\2\2\2\u0bec\u0bea\3\2\2\2")
        buf.write("\u0bec\u0bed\3\2\2\2\u0bed\u0bf1\3\2\2\2\u0bee\u0bec\3")
        buf.write("\2\2\2\u0bef\u0bf0\7\u00a5\2\2\u0bf0\u0bf2\5\u0234\u011b")
        buf.write("\2\u0bf1\u0bef\3\2\2\2\u0bf1\u0bf2\3\2\2\2\u0bf2\u00c9")
        buf.write("\3\2\2\2\u0bf3\u0bf4\7k\2\2\u0bf4\u0bf5\7\21\2\2\u0bf5")
        buf.write("\u0bfa\5\u00ccg\2\u0bf6\u0bf7\7\u03b2\2\2\u0bf7\u0bf9")
        buf.write("\5\u00ccg\2\u0bf8\u0bf6\3\2\2\2\u0bf9\u0bfc\3\2\2\2\u0bfa")
        buf.write("\u0bf8\3\2\2\2\u0bfa\u0bfb\3\2\2\2\u0bfb\u00cb\3\2\2\2")
        buf.write("\u0bfc\u0bfa\3\2\2\2\u0bfd\u0bff\5\u0234\u011b\2\u0bfe")
        buf.write("\u0c00\t(\2\2\u0bff\u0bfe\3\2\2\2\u0bff\u0c00\3\2\2\2")
        buf.write("\u0c00\u00cd\3\2\2\2\u0c01\u0c06\5\u00d0i\2\u0c02\u0c03")
        buf.write("\7\u03b2\2\2\u0c03\u0c05\5\u00d0i\2\u0c04\u0c02\3\2\2")
        buf.write("\2\u0c05\u0c08\3\2\2\2\u0c06\u0c04\3\2\2\2\u0c06\u0c07")
        buf.write("\3\2\2\2\u0c07\u00cf\3\2\2\2\u0c08\u0c06\3\2\2\2\u0c09")
        buf.write("\u0c0d\5\u00d2j\2\u0c0a\u0c0c\5\u00d8m\2\u0c0b\u0c0a\3")
        buf.write("\2\2\2\u0c0c\u0c0f\3\2\2\2\u0c0d\u0c0b\3\2\2\2\u0c0d\u0c0e")
        buf.write("\3\2\2\2\u0c0e\u0c1b\3\2\2\2\u0c0f\u0c0d\3\2\2\2\u0c10")
        buf.write("\u0c11\7\u03b0\2\2\u0c11\u0c15\5\u00d2j\2\u0c12\u0c14")
        buf.write("\5\u00d8m\2\u0c13\u0c12\3\2\2\2\u0c14\u0c17\3\2\2\2\u0c15")
        buf.write("\u0c13\3\2\2\2\u0c15\u0c16\3\2\2\2\u0c16\u0c18\3\2\2\2")
        buf.write("\u0c17\u0c15\3\2\2\2\u0c18\u0c19\7\u03b1\2\2\u0c19\u0c1b")
        buf.write("\3\2\2\2\u0c1a\u0c09\3\2\2\2\u0c1a\u0c10\3\2\2\2\u0c1b")
        buf.write("\u00d1\3\2\2\2\u0c1c\u0c22\5\u01d8\u00ed\2\u0c1d\u0c1e")
        buf.write("\7o\2\2\u0c1e\u0c1f\7\u03b0\2\2\u0c1f\u0c20\5\u020e\u0108")
        buf.write("\2\u0c20\u0c21\7\u03b1\2\2\u0c21\u0c23\3\2\2\2\u0c22\u0c1d")
        buf.write("\3\2\2\2\u0c22\u0c23\3\2\2\2\u0c23\u0c28\3\2\2\2\u0c24")
        buf.write("\u0c26\7\f\2\2\u0c25\u0c24\3\2\2\2\u0c25\u0c26\3\2\2\2")
        buf.write("\u0c26\u0c27\3\2\2\2\u0c27\u0c29\5\u01f0\u00f9\2\u0c28")
        buf.write("\u0c25\3\2\2\2\u0c28\u0c29\3\2\2\2\u0c29\u0c32\3\2\2\2")
        buf.write("\u0c2a\u0c2f\5\u00d4k\2\u0c2b\u0c2c\7\u03b2\2\2\u0c2c")
        buf.write("\u0c2e\5\u00d4k\2\u0c2d\u0c2b\3\2\2\2\u0c2e\u0c31\3\2")
        buf.write("\2\2\u0c2f\u0c2d\3\2\2\2\u0c2f\u0c30\3\2\2\2\u0c30\u0c33")
        buf.write("\3\2\2\2\u0c31\u0c2f\3\2\2\2\u0c32\u0c2a\3\2\2\2\u0c32")
        buf.write("\u0c33\3\2\2\2\u0c33\u0c45\3\2\2\2\u0c34\u0c3a\5\u00da")
        buf.write("n\2\u0c35\u0c36\7\u03b0\2\2\u0c36\u0c37\5\u00dan\2\u0c37")
        buf.write("\u0c38\7\u03b1\2\2\u0c38\u0c3a\3\2\2\2\u0c39\u0c34\3\2")
        buf.write("\2\2\u0c39\u0c35\3\2\2\2\u0c3a\u0c3c\3\2\2\2\u0c3b\u0c3d")
        buf.write("\7\f\2\2\u0c3c\u0c3b\3\2\2\2\u0c3c\u0c3d\3\2\2\2\u0c3d")
        buf.write("\u0c3e\3\2\2\2\u0c3e\u0c3f\5\u01f0\u00f9\2\u0c3f\u0c45")
        buf.write("\3\2\2\2\u0c40\u0c41\7\u03b0\2\2\u0c41\u0c42\5\u00ceh")
        buf.write("\2\u0c42\u0c43\7\u03b1\2\2\u0c43\u0c45\3\2\2\2\u0c44\u0c1c")
        buf.write("\3\2\2\2\u0c44\u0c39\3\2\2\2\u0c44\u0c40\3\2\2\2\u0c45")
        buf.write("\u00d3\3\2\2\2\u0c46\u0c47\t)\2\2\u0c47\u0c4a\t\23\2\2")
        buf.write("\u0c48\u0c49\79\2\2\u0c49\u0c4b\5\u00d6l\2\u0c4a\u0c48")
        buf.write("\3\2\2\2\u0c4a\u0c4b\3\2\2\2\u0c4b\u0c4c\3\2\2\2\u0c4c")
        buf.write("\u0c4d\7\u03b0\2\2\u0c4d\u0c4e\5\u020e\u0108\2\u0c4e\u0c4f")
        buf.write("\7\u03b1\2\2\u0c4f\u00d5\3\2\2\2\u0c50\u0c56\7N\2\2\u0c51")
        buf.write("\u0c52\7k\2\2\u0c52\u0c56\7\21\2\2\u0c53\u0c54\7?\2\2")
        buf.write("\u0c54\u0c56\7\21\2\2\u0c55\u0c50\3\2\2\2\u0c55\u0c51")
        buf.write("\3\2\2\2\u0c55\u0c53\3\2\2\2\u0c56\u00d7\3\2\2\2\u0c57")
        buf.write("\u0c59\t*\2\2\u0c58\u0c57\3\2\2\2\u0c58\u0c59\3\2\2\2")
        buf.write("\u0c59\u0c5a\3\2\2\2\u0c5a\u0c5b\7N\2\2\u0c5b\u0c63\5")
        buf.write("\u00d2j\2\u0c5c\u0c5d\7f\2\2\u0c5d\u0c64\5\u0234\u011b")
        buf.write("\2\u0c5e\u0c5f\7\u00a2\2\2\u0c5f\u0c60\7\u03b0\2\2\u0c60")
        buf.write("\u0c61\5\u020e\u0108\2\u0c61\u0c62\7\u03b1\2\2\u0c62\u0c64")
        buf.write("\3\2\2\2\u0c63\u0c5c\3\2\2\2\u0c63\u0c5e\3\2\2\2\u0c63")
        buf.write("\u0c64\3\2\2\2\u0c64\u0c84\3\2\2\2\u0c65\u0c66\7\u0092")
        buf.write("\2\2\u0c66\u0c69\5\u00d2j\2\u0c67\u0c68\7f\2\2\u0c68\u0c6a")
        buf.write("\5\u0234\u011b\2\u0c69\u0c67\3\2\2\2\u0c69\u0c6a\3\2\2")
        buf.write("\2\u0c6a\u0c84\3\2\2\2\u0c6b\u0c6d\t+\2\2\u0c6c\u0c6e")
        buf.write("\7m\2\2\u0c6d\u0c6c\3\2\2\2\u0c6d\u0c6e\3\2\2\2\u0c6e")
        buf.write("\u0c6f\3\2\2\2\u0c6f\u0c70\7N\2\2\u0c70\u0c78\5\u00d2")
        buf.write("j\2\u0c71\u0c72\7f\2\2\u0c72\u0c79\5\u0234\u011b\2\u0c73")
        buf.write("\u0c74\7\u00a2\2\2\u0c74\u0c75\7\u03b0\2\2\u0c75\u0c76")
        buf.write("\5\u020e\u0108\2\u0c76\u0c77\7\u03b1\2\2\u0c77\u0c79\3")
        buf.write("\2\2\2\u0c78\u0c71\3\2\2\2\u0c78\u0c73\3\2\2\2\u0c79\u0c84")
        buf.write("\3\2\2\2\u0c7a\u0c7f\7b\2\2\u0c7b\u0c7d\t+\2\2\u0c7c\u0c7e")
        buf.write("\7m\2\2\u0c7d\u0c7c\3\2\2\2\u0c7d\u0c7e\3\2\2\2\u0c7e")
        buf.write("\u0c80\3\2\2\2\u0c7f\u0c7b\3\2\2\2\u0c7f\u0c80\3\2\2\2")
        buf.write("\u0c80\u0c81\3\2\2\2\u0c81\u0c82\7N\2\2\u0c82\u0c84\5")
        buf.write("\u00d2j\2\u0c83\u0c58\3\2\2\2\u0c83\u0c65\3\2\2\2\u0c83")
        buf.write("\u0c6b\3\2\2\2\u0c83\u0c7a\3\2\2\2\u0c84\u00d9\3\2\2\2")
        buf.write("\u0c85\u0c86\5\u00aeX\2\u0c86\u00db\3\2\2\2\u0c87\u0c88")
        buf.write("\7\u03b0\2\2\u0c88\u0c89\5\u00e0q\2\u0c89\u0c8a\7\u03b1")
        buf.write("\2\2\u0c8a\u0c90\3\2\2\2\u0c8b\u0c8c\7\u03b0\2\2\u0c8c")
        buf.write("\u0c8d\5\u00dco\2\u0c8d\u0c8e\7\u03b1\2\2\u0c8e\u0c90")
        buf.write("\3\2\2\2\u0c8f\u0c87\3\2\2\2\u0c8f\u0c8b\3\2\2\2\u0c90")
        buf.write("\u00dd\3\2\2\2\u0c91\u0c92\7\u03b0\2\2\u0c92\u0c93\5\u00e2")
        buf.write("r\2\u0c93\u0c94\7\u03b1\2\2\u0c94\u0c9a\3\2\2\2\u0c95")
        buf.write("\u0c96\7\u03b0\2\2\u0c96\u0c97\5\u00dep\2\u0c97\u0c98")
        buf.write("\7\u03b1\2\2\u0c98\u0c9a\3\2\2\2\u0c99\u0c91\3\2\2\2\u0c99")
        buf.write("\u0c95\3\2\2\2\u0c9a\u00df\3\2\2\2\u0c9b\u0c9f\7\u0084")
        buf.write("\2\2\u0c9c\u0c9e\5\u00e8u\2\u0c9d\u0c9c\3\2\2\2\u0c9e")
        buf.write("\u0ca1\3\2\2\2\u0c9f\u0c9d\3\2\2\2\u0c9f\u0ca0\3\2\2\2")
        buf.write("\u0ca0\u0ca2\3\2\2\2\u0ca1\u0c9f\3\2\2\2\u0ca2\u0ca4\5")
        buf.write("\u00eav\2\u0ca3\u0ca5\5\u00eex\2\u0ca4\u0ca3\3\2\2\2\u0ca4")
        buf.write("\u0ca5\3\2\2\2\u0ca5\u0ca7\3\2\2\2\u0ca6\u0ca8\5\u00f0")
        buf.write("y\2\u0ca7\u0ca6\3\2\2\2\u0ca7\u0ca8\3\2\2\2\u0ca8\u0caa")
        buf.write("\3\2\2\2\u0ca9\u0cab\5\u00caf\2\u0caa\u0ca9\3\2\2\2\u0caa")
        buf.write("\u0cab\3\2\2\2\u0cab\u0cad\3\2\2\2\u0cac\u0cae\5\u00f4")
        buf.write("{\2\u0cad\u0cac\3\2\2\2\u0cad\u0cae\3\2\2\2\u0cae\u00e1")
        buf.write("\3\2\2\2\u0caf\u0cb3\7\u0084\2\2\u0cb0\u0cb2\5\u00e8u")
        buf.write("\2\u0cb1\u0cb0\3\2\2\2\u0cb2\u0cb5\3\2\2\2\u0cb3\u0cb1")
        buf.write("\3\2\2\2\u0cb3\u0cb4\3\2\2\2\u0cb4\u0cb6\3\2\2\2\u0cb5")
        buf.write("\u0cb3\3\2\2\2\u0cb6\u0cb8\5\u00eav\2\u0cb7\u0cb9\5\u00f0")
        buf.write("y\2\u0cb8\u0cb7\3\2\2\2\u0cb8\u0cb9\3\2\2\2\u0cb9\u0cbb")
        buf.write("\3\2\2\2\u0cba\u0cbc\5\u00caf\2\u0cbb\u0cba\3\2\2\2\u0cbb")
        buf.write("\u0cbc\3\2\2\2\u0cbc\u0cbe\3\2\2\2\u0cbd\u0cbf\5\u00f4")
        buf.write("{\2\u0cbe\u0cbd\3\2\2\2\u0cbe\u0cbf\3\2\2\2\u0cbf\u00e3")
        buf.write("\3\2\2\2\u0cc0\u0cc2\7\u009b\2\2\u0cc1\u0cc3\t$\2\2\u0cc2")
        buf.write("\u0cc1\3\2\2\2\u0cc2\u0cc3\3\2\2\2\u0cc3\u0cc4\3\2\2\2")
        buf.write("\u0cc4\u0cc5\5\u00dep\2\u0cc5\u00e5\3\2\2\2\u0cc6\u0cc8")
        buf.write("\7\u009b\2\2\u0cc7\u0cc9\t$\2\2\u0cc8\u0cc7\3\2\2\2\u0cc8")
        buf.write("\u0cc9\3\2\2\2\u0cc9\u0ccc\3\2\2\2\u0cca\u0ccd\5\u00e2")
        buf.write("r\2\u0ccb\u0ccd\5\u00dep\2\u0ccc\u0cca\3\2\2\2\u0ccc\u0ccb")
        buf.write("\3\2\2\2\u0ccd\u00e7\3\2\2\2\u0cce\u0cd7\t,\2\2\u0ccf")
        buf.write("\u0cd7\7A\2\2\u0cd0\u0cd7\7\u0092\2\2\u0cd1\u0cd7\7\u008f")
        buf.write("\2\2\u0cd2\u0cd7\7\u008d\2\2\u0cd3\u0cd7\7\u01f0\2\2\u0cd4")
        buf.write("\u0cd7\t-\2\2\u0cd5\u0cd7\7\u008e\2\2\u0cd6\u0cce\3\2")
        buf.write("\2\2\u0cd6\u0ccf\3\2\2\2\u0cd6\u0cd0\3\2\2\2\u0cd6\u0cd1")
        buf.write("\3\2\2\2\u0cd6\u0cd2\3\2\2\2\u0cd6\u0cd3\3\2\2\2\u0cd6")
        buf.write("\u0cd4\3\2\2\2\u0cd6\u0cd5\3\2\2\2\u0cd7\u00e9\3\2\2\2")
        buf.write("\u0cd8\u0cdb\7\u03a0\2\2\u0cd9\u0cdb\5\u00ecw\2\u0cda")
        buf.write("\u0cd8\3\2\2\2\u0cda\u0cd9\3\2\2\2\u0cdb\u0ce0\3\2\2\2")
        buf.write("\u0cdc\u0cdd\7\u03b2\2\2\u0cdd\u0cdf\5\u00ecw\2\u0cde")
        buf.write("\u0cdc\3\2\2\2\u0cdf\u0ce2\3\2\2\2\u0ce0\u0cde\3\2\2\2")
        buf.write("\u0ce0\u0ce1\3\2\2\2\u0ce1\u00eb\3\2\2\2\u0ce2\u0ce0\3")
        buf.write("\2\2\2\u0ce3\u0ce4\5\u01d6\u00ec\2\u0ce4\u0ce5\7\u03af")
        buf.write("\2\2\u0ce5\u0ce6\7\u03a0\2\2\u0ce6\u0d01\3\2\2\2\u0ce7")
        buf.write("\u0cec\5\u01da\u00ee\2\u0ce8\u0cea\7\f\2\2\u0ce9\u0ce8")
        buf.write("\3\2\2\2\u0ce9\u0cea\3\2\2\2\u0cea\u0ceb\3\2\2\2\u0ceb")
        buf.write("\u0ced\5\u01f0\u00f9\2\u0cec\u0ce9\3\2\2\2\u0cec\u0ced")
        buf.write("\3\2\2\2\u0ced\u0d01\3\2\2\2\u0cee\u0cf3\5\u0224\u0113")
        buf.write("\2\u0cef\u0cf1\7\f\2\2\u0cf0\u0cef\3\2\2\2\u0cf0\u0cf1")
        buf.write("\3\2\2\2\u0cf1\u0cf2\3\2\2\2\u0cf2\u0cf4\5\u01f0\u00f9")
        buf.write("\2\u0cf3\u0cf0\3\2\2\2\u0cf3\u0cf4\3\2\2\2\u0cf4\u0d01")
        buf.write("\3\2\2\2\u0cf5\u0cf6\7\u03ca\2\2\u0cf6\u0cf8\7\u0397\2")
        buf.write("\2\u0cf7\u0cf5\3\2\2\2\u0cf7\u0cf8\3\2\2\2\u0cf8\u0cf9")
        buf.write("\3\2\2\2\u0cf9\u0cfe\5\u0234\u011b\2\u0cfa\u0cfc\7\f\2")
        buf.write("\2\u0cfb\u0cfa\3\2\2\2\u0cfb\u0cfc\3\2\2\2\u0cfc\u0cfd")
        buf.write("\3\2\2\2\u0cfd\u0cff\5\u01f0\u00f9\2\u0cfe\u0cfb\3\2\2")
        buf.write("\2\u0cfe\u0cff\3\2\2\2\u0cff\u0d01\3\2\2\2\u0d00\u0ce3")
        buf.write("\3\2\2\2\u0d00\u0ce7\3\2\2\2\u0d00\u0cee\3\2\2\2\u0d00")
        buf.write("\u0cf7\3\2\2\2\u0d01\u00ed\3\2\2\2\u0d02\u0d03\7K\2\2")
        buf.write("\u0d03\u0d08\5\u00b6\\\2\u0d04\u0d05\7\u03b2\2\2\u0d05")
        buf.write("\u0d07\5\u00b6\\\2\u0d06\u0d04\3\2\2\2\u0d07\u0d0a\3\2")
        buf.write("\2\2\u0d08\u0d06\3\2\2\2\u0d08\u0d09\3\2\2\2\u0d09\u0d39")
        buf.write("\3\2\2\2\u0d0a\u0d08\3\2\2\2\u0d0b\u0d0c\7K\2\2\u0d0c")
        buf.write("\u0d0d\7\u012e\2\2\u0d0d\u0d39\7\u03bf\2\2\u0d0e\u0d0f")
        buf.write("\7K\2\2\u0d0f\u0d10\7n\2\2\u0d10\u0d14\7\u03bf\2\2\u0d11")
        buf.write("\u0d12\7\27\2\2\u0d12\u0d13\7\u0085\2\2\u0d13\u0d15\5")
        buf.write("\u01e2\u00f2\2\u0d14\u0d11\3\2\2\2\u0d14\u0d15\3\2\2\2")
        buf.write("\u0d15\u0d29\3\2\2\2\u0d16\u0d1a\t!\2\2\u0d17\u0d18\7")
        buf.write("\u0094\2\2\u0d18\u0d19\7\21\2\2\u0d19\u0d1b\7\u03bf\2")
        buf.write("\2\u0d1a\u0d17\3\2\2\2\u0d1a\u0d1b\3\2\2\2\u0d1b\u0d22")
        buf.write("\3\2\2\2\u0d1c\u0d1e\7i\2\2\u0d1d\u0d1c\3\2\2\2\u0d1d")
        buf.write("\u0d1e\3\2\2\2\u0d1e\u0d1f\3\2\2\2\u0d1f\u0d20\7\62\2")
        buf.write("\2\u0d20\u0d21\7\21\2\2\u0d21\u0d23\7\u03bf\2\2\u0d22")
        buf.write("\u0d1d\3\2\2\2\u0d22\u0d23\3\2\2\2\u0d23\u0d27\3\2\2\2")
        buf.write("\u0d24\u0d25\7\63\2\2\u0d25\u0d26\7\21\2\2\u0d26\u0d28")
        buf.write("\7\u03bf\2\2\u0d27\u0d24\3\2\2\2\u0d27\u0d28\3\2\2\2\u0d28")
        buf.write("\u0d2a\3\2\2\2\u0d29\u0d16\3\2\2\2\u0d29\u0d2a\3\2\2\2")
        buf.write("\u0d2a\u0d36\3\2\2\2\u0d2b\u0d2f\7X\2\2\u0d2c\u0d2d\7")
        buf.write("\u0091\2\2\u0d2d\u0d2e\7\21\2\2\u0d2e\u0d30\7\u03bf\2")
        buf.write("\2\u0d2f\u0d2c\3\2\2\2\u0d2f\u0d30\3\2\2\2\u0d30\u0d34")
        buf.write("\3\2\2\2\u0d31\u0d32\7\u0094\2\2\u0d32\u0d33\7\21\2\2")
        buf.write("\u0d33\u0d35\7\u03bf\2\2\u0d34\u0d31\3\2\2\2\u0d34\u0d35")
        buf.write("\3\2\2\2\u0d35\u0d37\3\2\2\2\u0d36\u0d2b\3\2\2\2\u0d36")
        buf.write("\u0d37\3\2\2\2\u0d37\u0d39\3\2\2\2\u0d38\u0d02\3\2\2\2")
        buf.write("\u0d38\u0d0b\3\2\2\2\u0d38\u0d0e\3\2\2\2\u0d39\u00ef\3")
        buf.write("\2\2\2\u0d3a\u0d3b\7<\2\2\u0d3b\u0d3e\5\u00ceh\2\u0d3c")
        buf.write("\u0d3d\7\u00a5\2\2\u0d3d\u0d3f\5\u0234\u011b\2\u0d3e\u0d3c")
        buf.write("\3\2\2\2\u0d3e\u0d3f\3\2\2\2\u0d3f\u0d4e\3\2\2\2\u0d40")
        buf.write("\u0d41\7?\2\2\u0d41\u0d42\7\21\2\2\u0d42\u0d47\5\u00f2")
        buf.write("z\2\u0d43\u0d44\7\u03b2\2\2\u0d44\u0d46\5\u00f2z\2\u0d45")
        buf.write("\u0d43\3\2\2\2\u0d46\u0d49\3\2\2\2\u0d47\u0d45\3\2\2\2")
        buf.write("\u0d47\u0d48\3\2\2\2\u0d48\u0d4c\3\2\2\2\u0d49\u0d47\3")
        buf.write("\2\2\2\u0d4a\u0d4b\7\u00a7\2\2\u0d4b\u0d4d\7\u01d7\2\2")
        buf.write("\u0d4c\u0d4a\3\2\2\2\u0d4c\u0d4d\3\2\2\2\u0d4d\u0d4f\3")
        buf.write("\2\2\2\u0d4e\u0d40\3\2\2\2\u0d4e\u0d4f\3\2\2\2\u0d4f\u0d52")
        buf.write("\3\2\2\2\u0d50\u0d51\7@\2\2\u0d51\u0d53\5\u0234\u011b")
        buf.write("\2\u0d52\u0d50\3\2\2\2\u0d52\u0d53\3\2\2\2\u0d53\u00f1")
        buf.write("\3\2\2\2\u0d54\u0d56\5\u0234\u011b\2\u0d55\u0d57\t(\2")
        buf.write("\2\u0d56\u0d55\3\2\2\2\u0d56\u0d57\3\2\2\2\u0d57\u00f3")
        buf.write("\3\2\2\2\u0d58\u0d63\7V\2\2\u0d59\u0d5a\5\u01f6\u00fc")
        buf.write("\2\u0d5a\u0d5b\7\u03b2\2\2\u0d5b\u0d5d\3\2\2\2\u0d5c\u0d59")
        buf.write("\3\2\2\2\u0d5c\u0d5d\3\2\2\2\u0d5d\u0d5e\3\2\2\2\u0d5e")
        buf.write("\u0d64\5\u01f6\u00fc\2\u0d5f\u0d60\5\u01f6\u00fc\2\u0d60")
        buf.write("\u0d61\7\u01a0\2\2\u0d61\u0d62\5\u01f6\u00fc\2\u0d62\u0d64")
        buf.write("\3\2\2\2\u0d63\u0d5c\3\2\2\2\u0d63\u0d5f\3\2\2\2\u0d64")
        buf.write("\u00f5\3\2\2\2\u0d65\u0d66\7\u01f4\2\2\u0d66\u0d6f\7\u0208")
        buf.write("\2\2\u0d67\u0d6c\5\u010c\u0087\2\u0d68\u0d69\7\u03b2\2")
        buf.write("\2\u0d69\u0d6b\5\u010c\u0087\2\u0d6a\u0d68\3\2\2\2\u0d6b")
        buf.write("\u0d6e\3\2\2\2\u0d6c\u0d6a\3\2\2\2\u0d6c\u0d6d\3\2\2\2")
        buf.write("\u0d6d\u0d70\3\2\2\2\u0d6e\u0d6c\3\2\2\2\u0d6f\u0d67\3")
        buf.write("\2\2\2\u0d6f\u0d70\3\2\2\2\u0d70\u00f7\3\2\2\2\u0d71\u0d73")
        buf.write("\7\u0102\2\2\u0d72\u0d74\7\u021c\2\2\u0d73\u0d72\3\2\2")
        buf.write("\2\u0d73\u0d74\3\2\2\2\u0d74\u00f9\3\2\2\2\u0d75\u0d77")
        buf.write("\7\u0115\2\2\u0d76\u0d78\7\u021c\2\2\u0d77\u0d76\3\2\2")
        buf.write("\2\u0d77\u0d78\3\2\2\2\u0d78\u0d7e\3\2\2\2\u0d79\u0d7b")
        buf.write("\7\13\2\2\u0d7a\u0d7c\7\u019c\2\2\u0d7b\u0d7a\3\2\2\2")
        buf.write("\u0d7b\u0d7c\3\2\2\2\u0d7c\u0d7d\3\2\2\2\u0d7d\u0d7f\7")
        buf.write("\u0109\2\2\u0d7e\u0d79\3\2\2\2\u0d7e\u0d7f\3\2\2\2\u0d7f")
        buf.write("\u0d84\3\2\2\2\u0d80\u0d82\7\u019c\2\2\u0d81\u0d80\3\2")
        buf.write("\2\2\u0d81\u0d82\3\2\2\2\u0d82\u0d83\3\2\2\2\u0d83\u0d85")
        buf.write("\7x\2\2\u0d84\u0d81\3\2\2\2\u0d84\u0d85\3\2\2\2\u0d85")
        buf.write("\u00fb\3\2\2\2\u0d86\u0d88\7\u01d6\2\2\u0d87\u0d89\7\u021c")
        buf.write("\2\2\u0d88\u0d87\3\2\2\2\u0d88\u0d89\3\2\2\2\u0d89\u0d8f")
        buf.write("\3\2\2\2\u0d8a\u0d8c\7\13\2\2\u0d8b\u0d8d\7\u019c\2\2")
        buf.write("\u0d8c\u0d8b\3\2\2\2\u0d8c\u0d8d\3\2\2\2\u0d8d\u0d8e\3")
        buf.write("\2\2\2\u0d8e\u0d90\7\u0109\2\2\u0d8f\u0d8a\3\2\2\2\u0d8f")
        buf.write("\u0d90\3\2\2\2\u0d90\u0d95\3\2\2\2\u0d91\u0d93\7\u019c")
        buf.write("\2\2\u0d92\u0d91\3\2\2\2\u0d92\u0d93\3\2\2\2\u0d93\u0d94")
        buf.write("\3\2\2\2\u0d94\u0d96\7x\2\2\u0d95\u0d92\3\2\2\2\u0d95")
        buf.write("\u0d96\3\2\2\2\u0d96\u00fd\3\2\2\2\u0d97\u0d98\7\u01dc")
        buf.write("\2\2\u0d98\u0d99\5\u01f0\u00f9\2\u0d99\u00ff\3\2\2\2\u0d9a")
        buf.write("\u0d9c\7\u01d6\2\2\u0d9b\u0d9d\7\u021c\2\2\u0d9c\u0d9b")
        buf.write("\3\2\2\2\u0d9c\u0d9d\3\2\2\2\u0d9d\u0d9e\3\2\2\2\u0d9e")
        buf.write("\u0da0\7\u0096\2\2\u0d9f\u0da1\7\u01dc\2\2\u0da0\u0d9f")
        buf.write("\3\2\2\2\u0da0\u0da1\3\2\2\2\u0da1\u0da2\3\2\2\2\u0da2")
        buf.write("\u0da3\5\u01f0\u00f9\2\u0da3\u0101\3\2\2\2\u0da4\u0da5")
        buf.write("\7x\2\2\u0da5\u0da6\7\u01dc\2\2\u0da6\u0da7\5\u01f0\u00f9")
        buf.write("\2\u0da7\u0103\3\2\2\2\u0da8\u0da9\7Z\2\2\u0da9\u0daa")
        buf.write("\7\u022e\2\2\u0daa\u0daf\5\u010e\u0088\2\u0dab\u0dac\7")
        buf.write("\u03b2\2\2\u0dac\u0dae\5\u010e\u0088\2\u0dad\u0dab\3\2")
        buf.write("\2\2\u0dae\u0db1\3\2\2\2\u0daf\u0dad\3\2\2\2\u0daf\u0db0")
        buf.write("\3\2\2\2\u0db0\u0105\3\2\2\2\u0db1\u0daf\3\2\2\2\u0db2")
        buf.write("\u0db3\7\u009d\2\2\u0db3\u0db4\7\u022e\2\2\u0db4\u0107")
        buf.write("\3\2\2\2\u0db5\u0db6\7\u0085\2\2\u0db6\u0db7\7\u00fe\2")
        buf.write("\2\u0db7\u0db8\7\u03a7\2\2\u0db8\u0db9\t\26\2\2\u0db9")
        buf.write("\u0109\3\2\2\2\u0dba\u0dbc\7\u0085\2\2\u0dbb\u0dbd\t.")
        buf.write("\2\2\u0dbc\u0dbb\3\2\2\2\u0dbc\u0dbd\3\2\2\2\u0dbd\u0dbe")
        buf.write("\3\2\2\2\u0dbe\u0dbf\7\u0208\2\2\u0dbf\u0dc4\5\u0112\u008a")
        buf.write("\2\u0dc0\u0dc1\7\u03b2\2\2\u0dc1\u0dc3\5\u0112\u008a\2")
        buf.write("\u0dc2\u0dc0\3\2\2\2\u0dc3\u0dc6\3\2\2\2\u0dc4\u0dc2\3")
        buf.write("\2\2\2\u0dc4\u0dc5\3\2\2\2\u0dc5\u010b\3\2\2\2\u0dc6\u0dc4")
        buf.write("\3\2\2\2\u0dc7\u0dc8\7\u00a7\2\2\u0dc8\u0dc9\7\u011c\2")
        buf.write("\2\u0dc9\u0dcf\7\u01e7\2\2\u0dca\u0dcb\7t\2\2\u0dcb\u0dcf")
        buf.write("\7\u00a8\2\2\u0dcc\u0dcd\7t\2\2\u0dcd\u0dcf\7\u01a5\2")
        buf.write("\2\u0dce\u0dc7\3\2\2\2\u0dce\u0dca\3\2\2\2\u0dce\u0dcc")
        buf.write("\3\2\2\2\u0dcf\u010d\3\2\2\2\u0dd0\u0dd5\5\u01d8\u00ed")
        buf.write("\2\u0dd1\u0dd3\7\f\2\2\u0dd2\u0dd1\3\2\2\2\u0dd2\u0dd3")
        buf.write("\3\2\2\2\u0dd3\u0dd4\3\2\2\2\u0dd4\u0dd6\5\u01f0\u00f9")
        buf.write("\2\u0dd5\u0dd2\3\2\2\2\u0dd5\u0dd6\3\2\2\2\u0dd6\u0dd7")
        buf.write("\3\2\2\2\u0dd7\u0dd8\5\u0110\u0089\2\u0dd8\u010f\3\2\2")
        buf.write("\2\u0dd9\u0ddb\7t\2\2\u0dda\u0ddc\7\u0170\2\2\u0ddb\u0dda")
        buf.write("\3\2\2\2\u0ddb\u0ddc\3\2\2\2\u0ddc\u0de2\3\2\2\2\u0ddd")
        buf.write("\u0ddf\7\\\2\2\u0dde\u0ddd\3\2\2\2\u0dde\u0ddf\3\2\2\2")
        buf.write("\u0ddf\u0de0\3\2\2\2\u0de0\u0de2\7\u00a8\2\2\u0de1\u0dd9")
        buf.write("\3\2\2\2\u0de1\u0dde\3\2\2\2\u0de2\u0111\3\2\2\2\u0de3")
        buf.write("\u0de4\7\u0166\2\2\u0de4\u0de5\7\u016e\2\2\u0de5\u0deb")
        buf.write("\5\u0114\u008b\2\u0de6\u0de7\7t\2\2\u0de7\u0deb\7\u00a8")
        buf.write("\2\2\u0de8\u0de9\7t\2\2\u0de9\u0deb\7\u01a5\2\2\u0dea")
        buf.write("\u0de3\3\2\2\2\u0dea\u0de6\3\2\2\2\u0dea\u0de8\3\2\2\2")
        buf.write("\u0deb\u0113\3\2\2\2\u0dec\u0ded\7\u026a\2\2\u0ded\u0df4")
        buf.write("\7t\2\2\u0dee\u0def\7t\2\2\u0def\u0df4\7\u026b\2\2\u0df0")
        buf.write("\u0df1\7t\2\2\u0df1\u0df4\7\u026c\2\2\u0df2\u0df4\7\u026d")
        buf.write("\2\2\u0df3\u0dec\3\2\2\2\u0df3\u0dee\3\2\2\2\u0df3\u0df0")
        buf.write("\3\2\2\2\u0df3\u0df2\3\2\2\2\u0df4\u0115\3\2\2\2\u0df5")
        buf.write("\u0df6\7\26\2\2\u0df6\u0df7\7\u0173\2\2\u0df7\u0df8\7")
        buf.write("\u0096\2\2\u0df8\u0dfd\5\u0128\u0095\2\u0df9\u0dfa\7\u03b2")
        buf.write("\2\2\u0dfa\u0dfc\5\u0128\u0095\2\u0dfb\u0df9\3\2\2\2\u0dfc")
        buf.write("\u0dff\3\2\2\2\u0dfd\u0dfb\3\2\2\2\u0dfd\u0dfe\3\2\2\2")
        buf.write("\u0dfe\u0e01\3\2\2\2\u0dff\u0dfd\3\2\2\2\u0e00\u0e02\5")
        buf.write("\u0130\u0099\2\u0e01\u0e00\3\2\2\2\u0e01\u0e02\3\2\2\2")
        buf.write("\u0e02\u0117\3\2\2\2\u0e03\u0e04\7\26\2\2\u0e04\u0e05")
        buf.write("\7\u01d2\2\2\u0e05\u0e06\7\u0148\2\2\u0e06\u0e0b\5\u0132")
        buf.write("\u009a\2\u0e07\u0e08\7\u03b2\2\2\u0e08\u0e0a\5\u0132\u009a")
        buf.write("\2\u0e09\u0e07\3\2\2\2\u0e0a\u0e0d\3\2\2\2\u0e0b\u0e09")
        buf.write("\3\2\2\2\u0e0b\u0e0c\3\2\2\2\u0e0c\u0119\3\2\2\2\u0e0d")
        buf.write("\u0e0b\3\2\2\2\u0e0e\u0e0f\7r\2\2\u0e0f\u0e10\t/\2\2\u0e10")
        buf.write("\u0e15\7\u0172\2\2\u0e11\u0e12\7\u0096\2\2\u0e12\u0e16")
        buf.write("\7\u03bf\2\2\u0e13\u0e14\7\16\2\2\u0e14\u0e16\7\u03bf")
        buf.write("\2\2\u0e15\u0e11\3\2\2\2\u0e15\u0e13\3\2\2\2\u0e16\u011b")
        buf.write("\3\2\2\2\u0e17\u0e18\7\u01d3\2\2\u0e18\u0e19\7\u0173\2")
        buf.write("\2\u0e19\u011d\3\2\2\2\u0e1a\u0e1b\7\u01d3\2\2\u0e1b\u0e1d")
        buf.write("\7\u01e5\2\2\u0e1c\u0e1e\7\b\2\2\u0e1d\u0e1c\3\2\2\2\u0e1d")
        buf.write("\u0e1e\3\2\2\2\u0e1e\u0e20\3\2\2\2\u0e1f\u0e21\5\u0130")
        buf.write("\u0099\2\u0e20\u0e1f\3\2\2\2\u0e20\u0e21\3\2\2\2\u0e21")
        buf.write("\u011f\3\2\2\2\u0e22\u0e23\7\u01f4\2\2\u0e23\u0e2c\7\u01e5")
        buf.write("\2\2\u0e24\u0e29\5\u0134\u009b\2\u0e25\u0e26\7\u03b2\2")
        buf.write("\2\u0e26\u0e28\5\u0134\u009b\2\u0e27\u0e25\3\2\2\2\u0e28")
        buf.write("\u0e2b\3\2\2\2\u0e29\u0e27\3\2\2\2\u0e29\u0e2a\3\2\2\2")
        buf.write("\u0e2a\u0e2d\3\2\2\2\u0e2b\u0e29\3\2\2\2\u0e2c\u0e24\3")
        buf.write("\2\2\2\u0e2c\u0e2d\3\2\2\2\u0e2d\u0e2e\3\2\2\2\u0e2e\u0e30")
        buf.write("\7\u0210\2\2\u0e2f\u0e31\5\u0136\u009c\2\u0e30\u0e2f\3")
        buf.write("\2\2\2\u0e30\u0e31\3\2\2\2\u0e31\u0e35\3\2\2\2\u0e32\u0e34")
        buf.write("\5\u0138\u009d\2\u0e33\u0e32\3\2\2\2\u0e34\u0e37\3\2\2")
        buf.write("\2\u0e35\u0e33\3\2\2\2\u0e35\u0e36\3\2\2\2\u0e36\u0e39")
        buf.write("\3\2\2\2\u0e37\u0e35\3\2\2\2\u0e38\u0e3a\5\u0130\u0099")
        buf.write("\2\u0e39\u0e38\3\2\2\2\u0e39\u0e3a\3\2\2\2\u0e3a\u0121")
        buf.write("\3\2\2\2\u0e3b\u0e3c\7\u01fa\2\2\u0e3c\u0e45\7\u01e5\2")
        buf.write("\2\u0e3d\u0e42\5\u0134\u009b\2\u0e3e\u0e3f\7\u03b2\2\2")
        buf.write("\u0e3f\u0e41\5\u0134\u009b\2\u0e40\u0e3e\3\2\2\2\u0e41")
        buf.write("\u0e44\3\2\2\2\u0e42\u0e40\3\2\2\2\u0e42\u0e43\3\2\2\2")
        buf.write("\u0e43\u0e46\3\2\2\2\u0e44\u0e42\3\2\2\2\u0e45\u0e3d\3")
        buf.write("\2\2\2\u0e45\u0e46\3\2\2\2\u0e46\u0123\3\2\2\2\u0e47\u0e48")
        buf.write("\7\u01f4\2\2\u0e48\u0e49\7\u0153\2\2\u0e49\u0125\3\2\2")
        buf.write("\2\u0e4a\u0e4b\7\u01f4\2\2\u0e4b\u0e4c\7\u0153\2\2\u0e4c")
        buf.write("\u0127\3\2\2\2\u0e4d\u0e4e\5\u012a\u0096\2\u0e4e\u0e4f")
        buf.write("\7\u03a7\2\2\u0e4f\u0e50\7\u03bf\2\2\u0e50\u0e6b\3\2\2")
        buf.write("\2\u0e51\u0e52\5\u012c\u0097\2\u0e52\u0e53\7\u03a7\2\2")
        buf.write("\u0e53\u0e54\5\u01f6\u00fc\2\u0e54\u0e6b\3\2\2\2\u0e55")
        buf.write("\u0e56\5\u012e\u0098\2\u0e56\u0e57\7\u03a7\2\2\u0e57\u0e58")
        buf.write("\t\26\2\2\u0e58\u0e6b\3\2\2\2\u0e59\u0e5a\7\u0177\2\2")
        buf.write("\u0e5a\u0e5b\7\u03a7\2\2\u0e5b\u0e6b\7\u03c2\2\2\u0e5c")
        buf.write("\u0e5d\7\u015a\2\2\u0e5d\u0e5e\7\u03a7\2\2\u0e5e\u0e67")
        buf.write("\7\u03b0\2\2\u0e5f\u0e64\5\u01f0\u00f9\2\u0e60\u0e61\7")
        buf.write("\u03b2\2\2\u0e61\u0e63\5\u01f0\u00f9\2\u0e62\u0e60\3\2")
        buf.write("\2\2\u0e63\u0e66\3\2\2\2\u0e64\u0e62\3\2\2\2\u0e64\u0e65")
        buf.write("\3\2\2\2\u0e65\u0e68\3\2\2\2\u0e66\u0e64\3\2\2\2\u0e67")
        buf.write("\u0e5f\3\2\2\2\u0e67\u0e68\3\2\2\2\u0e68\u0e69\3\2\2\2")
        buf.write("\u0e69\u0e6b\7\u03b1\2\2\u0e6a\u0e4d\3\2\2\2\u0e6a\u0e51")
        buf.write("\3\2\2\2\u0e6a\u0e55\3\2\2\2\u0e6a\u0e59\3\2\2\2\u0e6a")
        buf.write("\u0e5c\3\2\2\2\u0e6b\u0129\3\2\2\2\u0e6c\u0e6d\t\60\2")
        buf.write("\2\u0e6d\u012b\3\2\2\2\u0e6e\u0e6f\t\61\2\2\u0e6f\u012d")
        buf.write("\3\2\2\2\u0e70\u0e71\t\62\2\2\u0e71\u012f\3\2\2\2\u0e72")
        buf.write("\u0e73\79\2\2\u0e73\u0e74\7\u010b\2\2\u0e74\u0e75\7\u03bf")
        buf.write("\2\2\u0e75\u0131\3\2\2\2\u0e76\u0e77\7\u01cb\2\2\u0e77")
        buf.write("\u0e78\7\u03a7\2\2\u0e78\u0e79\7\u03b0\2\2\u0e79\u0e7a")
        buf.write("\5\u020e\u0108\2\u0e7a\u0e7b\7\u03b1\2\2\u0e7b\u0ea1\3")
        buf.write("\2\2\2\u0e7c\u0e7d\7\u01cd\2\2\u0e7d\u0e7e\7\u03a7\2\2")
        buf.write("\u0e7e\u0e7f\7\u03b0\2\2\u0e7f\u0e80\5\u020e\u0108\2\u0e80")
        buf.write("\u0e81\7\u03b1\2\2\u0e81\u0ea1\3\2\2\2\u0e82\u0e83\7\u01cc")
        buf.write("\2\2\u0e83\u0e84\7\u03a7\2\2\u0e84\u0e85\7\u03b0\2\2\u0e85")
        buf.write("\u0e86\5\u0210\u0109\2\u0e86\u0e87\7\u03b1\2\2\u0e87\u0ea1")
        buf.write("\3\2\2\2\u0e88\u0e89\7\u01ce\2\2\u0e89\u0e8a\7\u03a7\2")
        buf.write("\2\u0e8a\u0e8b\7\u03b0\2\2\u0e8b\u0e8c\5\u0210\u0109\2")
        buf.write("\u0e8c\u0e8d\7\u03b1\2\2\u0e8d\u0ea1\3\2\2\2\u0e8e\u0e8f")
        buf.write("\7\u01d0\2\2\u0e8f\u0e90\7\u03a7\2\2\u0e90\u0e91\7\u03b0")
        buf.write("\2\2\u0e91\u0e92\5\u021a\u010e\2\u0e92\u0e93\7\u03b1\2")
        buf.write("\2\u0e93\u0ea1\3\2\2\2\u0e94\u0e95\7\u01d1\2\2\u0e95\u0e96")
        buf.write("\7\u03a7\2\2\u0e96\u0e97\7\u03b0\2\2\u0e97\u0e98\5\u021a")
        buf.write("\u010e\2\u0e98\u0e99\7\u03b1\2\2\u0e99\u0ea1\3\2\2\2\u0e9a")
        buf.write("\u0e9b\7\u01cf\2\2\u0e9b\u0e9c\7\u03a7\2\2\u0e9c\u0e9d")
        buf.write("\7\u03b0\2\2\u0e9d\u0e9e\5\u0212\u010a\2\u0e9e\u0e9f\7")
        buf.write("\u03b1\2\2\u0e9f\u0ea1\3\2\2\2\u0ea0\u0e76\3\2\2\2\u0ea0")
        buf.write("\u0e7c\3\2\2\2\u0ea0\u0e82\3\2\2\2\u0ea0\u0e88\3\2\2\2")
        buf.write("\u0ea0\u0e8e\3\2\2\2\u0ea0\u0e94\3\2\2\2\u0ea0\u0e9a\3")
        buf.write("\2\2\2\u0ea1\u0133\3\2\2\2\u0ea2\u0ea3\t\63\2\2\u0ea3")
        buf.write("\u0135\3\2\2\2\u0ea4\u0ea5\t\64\2\2\u0ea5\u0ea6\7\u03a7")
        buf.write("\2\2\u0ea6\u0eb7\5\u013a\u009e\2\u0ea7\u0ea8\7\u0179\2")
        buf.write("\2\u0ea8\u0ea9\7\u03a7\2\2\u0ea9\u0eaa\7\u03bf\2\2\u0eaa")
        buf.write("\u0eab\7\u03b2\2\2\u0eab\u0eac\7\u017a\2\2\u0eac\u0ead")
        buf.write("\7\u03a7\2\2\u0ead\u0eb7\5\u01f6\u00fc\2\u0eae\u0eaf\7")
        buf.write("\u01c5\2\2\u0eaf\u0eb0\7\u03a7\2\2\u0eb0\u0eb1\7\u03bf")
        buf.write("\2\2\u0eb1\u0eb2\7\u03b2\2\2\u0eb2\u0eb3\7\u01c6\2\2\u0eb3")
        buf.write("\u0eb4\7\u03a7\2\2\u0eb4\u0eb7\5\u01f6\u00fc\2\u0eb5\u0eb7")
        buf.write("\7\u01ee\2\2\u0eb6\u0ea4\3\2\2\2\u0eb6\u0ea7\3\2\2\2\u0eb6")
        buf.write("\u0eae\3\2\2\2\u0eb6\u0eb5\3\2\2\2\u0eb7\u0137\3\2\2\2")
        buf.write("\u0eb8\u0eb9\7\u0212\2\2\u0eb9\u0eba\7\u03a7\2\2\u0eba")
        buf.write("\u0ec5\7\u03bf\2\2\u0ebb\u0ebc\7\u01b0\2\2\u0ebc\u0ebd")
        buf.write("\7\u03a7\2\2\u0ebd\u0ec5\7\u03bf\2\2\u0ebe\u0ebf\7\u0125")
        buf.write("\2\2\u0ebf\u0ec0\7\u03a7\2\2\u0ec0\u0ec5\7\u03bf\2\2\u0ec1")
        buf.write("\u0ec2\7\u01b3\2\2\u0ec2\u0ec3\7\u03a7\2\2\u0ec3\u0ec5")
        buf.write("\7\u03bf\2\2\u0ec4\u0eb8\3\2\2\2\u0ec4\u0ebb\3\2\2\2\u0ec4")
        buf.write("\u0ebe\3\2\2\2\u0ec4\u0ec1\3\2\2\2\u0ec5\u0139\3\2\2\2")
        buf.write("\u0ec6\u0ecb\5\u01e8\u00f5\2\u0ec7\u0ec8\7\u03b2\2\2\u0ec8")
        buf.write("\u0eca\5\u01e8\u00f5\2\u0ec9\u0ec7\3\2\2\2\u0eca\u0ecd")
        buf.write("\3\2\2\2\u0ecb\u0ec9\3\2\2\2\u0ecb\u0ecc\3\2\2\2\u0ecc")
        buf.write("\u0ed0\3\2\2\2\u0ecd\u0ecb\3\2\2\2\u0ece\u0ed0\7\u03bf")
        buf.write("\2\2\u0ecf\u0ec6\3\2\2\2\u0ecf\u0ece\3\2\2\2\u0ed0\u013b")
        buf.write("\3\2\2\2\u0ed1\u0ed2\7\u021f\2\2\u0ed2\u0ed3\t\65\2\2")
        buf.write("\u0ed3\u0ed5\5\u01ea\u00f6\2\u0ed4\u0ed6\t\66\2\2\u0ed5")
        buf.write("\u0ed4\3\2\2\2\u0ed5\u0ed6\3\2\2\2\u0ed6\u013d\3\2\2\2")
        buf.write("\u0ed7\u0ed8\7\u021f\2\2\u0ed8\u0ed9\7\u0133\2\2\u0ed9")
        buf.write("\u0edf\5\u01ea\u00f6\2\u0eda\u0edd\7\u0200\2\2\u0edb\u0edc")
        buf.write("\79\2\2\u0edc\u0ede\7\u0191\2\2\u0edd\u0edb\3\2\2\2\u0edd")
        buf.write("\u0ede\3\2\2\2\u0ede\u0ee0\3\2\2\2\u0edf\u0eda\3\2\2\2")
        buf.write("\u0edf\u0ee0\3\2\2\2\u0ee0\u013f\3\2\2\2\u0ee1\u0ee2\7")
        buf.write("\u021f\2\2\u0ee2\u0ee3\7\u01b7\2\2\u0ee3\u0ee4\5\u01ea")
        buf.write("\u00f6\2\u0ee4\u0141\3\2\2\2\u0ee5\u0ee6\7\u021f\2\2\u0ee6")
        buf.write("\u0ee7\7\u0115\2\2\u0ee7\u0eea\5\u01ea\u00f6\2\u0ee8\u0ee9")
        buf.write("\7\u01a3\2\2\u0ee9\u0eeb\7\u01b1\2\2\u0eea\u0ee8\3\2\2")
        buf.write("\2\u0eea\u0eeb\3\2\2\2\u0eeb\u0143\3\2\2\2\u0eec\u0eed")
        buf.write("\7\u021f\2\2\u0eed\u0eee\7\u01d6\2\2\u0eee\u0eef\5\u01ea")
        buf.write("\u00f6\2\u0eef\u0145\3\2\2\2\u0ef0\u0ef1\7\u021f\2\2\u0ef1")
        buf.write("\u0ef4\7\u01c1\2\2\u0ef2\u0ef3\7\36\2\2\u0ef3\u0ef5\5")
        buf.write("\u01ea\u00f6\2\u0ef4\u0ef2\3\2\2\2\u0ef4\u0ef5\3\2\2\2")
        buf.write("\u0ef5\u0147\3\2\2\2\u0ef6\u0ef7\7\u01b7\2\2\u0ef7\u0ef8")
        buf.write("\5\u01f0\u00f9\2\u0ef8\u0ef9\7<\2\2\u0ef9\u0efa\t\67\2")
        buf.write("\2\u0efa\u0149\3\2\2\2\u0efb\u0efc\7\u0230\2\2\u0efc\u0eff")
        buf.write("\5\u01f0\u00f9\2\u0efd\u0efe\7\u00a2\2\2\u0efe\u0f00\5")
        buf.write("\u021c\u010f\2\u0eff\u0efd\3\2\2\2\u0eff\u0f00\3\2\2\2")
        buf.write("\u0f00\u014b\3\2\2\2\u0f01\u0f02\t8\2\2\u0f02\u0f03\7")
        buf.write("\u01b7\2\2\u0f03\u0f04\5\u01f0\u00f9\2\u0f04\u014d\3\2")
        buf.write("\2\2\u0f05\u0f08\5\u0150\u00a9\2\u0f06\u0f08\5\6\4\2\u0f07")
        buf.write("\u0f05\3\2\2\2\u0f07\u0f06\3\2\2\2\u0f08\u014f\3\2\2\2")
        buf.write("\u0f09\u0f0a\5\u01f0\u00f9\2\u0f0a\u0f0b\7\u03bb\2\2\u0f0b")
        buf.write("\u0f0d\3\2\2\2\u0f0c\u0f09\3\2\2\2\u0f0c\u0f0d\3\2\2\2")
        buf.write("\u0f0d\u0f0e\3\2\2\2\u0f0e\u0f34\7\u0102\2\2\u0f0f\u0f10")
        buf.write("\5\u0164\u00b3\2\u0f10\u0f11\7\u03b3\2\2\u0f11\u0f13\3")
        buf.write("\2\2\2\u0f12\u0f0f\3\2\2\2\u0f13\u0f16\3\2\2\2\u0f14\u0f12")
        buf.write("\3\2\2\2\u0f14\u0f15\3\2\2\2\u0f15\u0f1c\3\2\2\2\u0f16")
        buf.write("\u0f14\3\2\2\2\u0f17\u0f18\5\u0166\u00b4\2\u0f18\u0f19")
        buf.write("\7\u03b3\2\2\u0f19\u0f1b\3\2\2\2\u0f1a\u0f17\3\2\2\2\u0f1b")
        buf.write("\u0f1e\3\2\2\2\u0f1c\u0f1a\3\2\2\2\u0f1c\u0f1d\3\2\2\2")
        buf.write("\u0f1d\u0f24\3\2\2\2\u0f1e\u0f1c\3\2\2\2\u0f1f\u0f20\5")
        buf.write("\u0168\u00b5\2\u0f20\u0f21\7\u03b3\2\2\u0f21\u0f23\3\2")
        buf.write("\2\2\u0f22\u0f1f\3\2\2\2\u0f23\u0f26\3\2\2\2\u0f24\u0f22")
        buf.write("\3\2\2\2\u0f24\u0f25\3\2\2\2\u0f25\u0f2c\3\2\2\2\u0f26")
        buf.write("\u0f24\3\2\2\2\u0f27\u0f28\5\u016a\u00b6\2\u0f28\u0f29")
        buf.write("\7\u03b3\2\2\u0f29\u0f2b\3\2\2\2\u0f2a\u0f27\3\2\2\2\u0f2b")
        buf.write("\u0f2e\3\2\2\2\u0f2c\u0f2a\3\2\2\2\u0f2c\u0f2d\3\2\2\2")
        buf.write("\u0f2d\u0f30\3\2\2\2\u0f2e\u0f2c\3\2\2\2\u0f2f\u0f31\5")
        buf.write("\u016e\u00b8\2\u0f30\u0f2f\3\2\2\2\u0f31\u0f32\3\2\2\2")
        buf.write("\u0f32\u0f30\3\2\2\2\u0f32\u0f33\3\2\2\2\u0f33\u0f35\3")
        buf.write("\2\2\2\u0f34\u0f14\3\2\2\2\u0f34\u0f35\3\2\2\2\u0f35\u0f36")
        buf.write("\3\2\2\2\u0f36\u0f38\7\u0133\2\2\u0f37\u0f39\5\u01f0\u00f9")
        buf.write("\2\u0f38\u0f37\3\2\2\2\u0f38\u0f39\3\2\2\2\u0f39\u0151")
        buf.write("\3\2\2\2\u0f3a\u0f3d\7\24\2\2\u0f3b\u0f3e\5\u01f0\u00f9")
        buf.write("\2\u0f3c\u0f3e\5\u0234\u011b\2\u0f3d\u0f3b\3\2\2\2\u0f3d")
        buf.write("\u0f3c\3\2\2\2\u0f3d\u0f3e\3\2\2\2\u0f3e\u0f40\3\2\2\2")
        buf.write("\u0f3f\u0f41\5\u0170\u00b9\2\u0f40\u0f3f\3\2\2\2\u0f41")
        buf.write("\u0f42\3\2\2\2\u0f42\u0f40\3\2\2\2\u0f42\u0f43\3\2\2\2")
        buf.write("\u0f43\u0f4a\3\2\2\2\u0f44\u0f46\7\60\2\2\u0f45\u0f47")
        buf.write("\5\u016e\u00b8\2\u0f46\u0f45\3\2\2\2\u0f47\u0f48\3\2\2")
        buf.write("\2\u0f48\u0f46\3\2\2\2\u0f48\u0f49\3\2\2\2\u0f49\u0f4b")
        buf.write("\3\2\2\2\u0f4a\u0f44\3\2\2\2\u0f4a\u0f4b\3\2\2\2\u0f4b")
        buf.write("\u0f4c\3\2\2\2\u0f4c\u0f4d\7\u0133\2\2\u0f4d\u0f4e\7\24")
        buf.write("\2\2\u0f4e\u0153\3\2\2\2\u0f4f\u0f50\7B\2\2\u0f50\u0f51")
        buf.write("\5\u0234\u011b\2\u0f51\u0f53\7\u0095\2\2\u0f52\u0f54\5")
        buf.write("\u016e\u00b8\2\u0f53\u0f52\3\2\2\2\u0f54\u0f55\3\2\2\2")
        buf.write("\u0f55\u0f53\3\2\2\2\u0f55\u0f56\3\2\2\2\u0f56\u0f5a\3")
        buf.write("\2\2\2\u0f57\u0f59\5\u0172\u00ba\2\u0f58\u0f57\3\2\2\2")
        buf.write("\u0f59\u0f5c\3\2\2\2\u0f5a\u0f58\3\2\2\2\u0f5a\u0f5b\3")
        buf.write("\2\2\2\u0f5b\u0f63\3\2\2\2\u0f5c\u0f5a\3\2\2\2\u0f5d\u0f5f")
        buf.write("\7\60\2\2\u0f5e\u0f60\5\u016e\u00b8\2\u0f5f\u0f5e\3\2")
        buf.write("\2\2\u0f60\u0f61\3\2\2\2\u0f61\u0f5f\3\2\2\2\u0f61\u0f62")
        buf.write("\3\2\2\2\u0f62\u0f64\3\2\2\2\u0f63\u0f5d\3\2\2\2\u0f63")
        buf.write("\u0f64\3\2\2\2\u0f64\u0f65\3\2\2\2\u0f65\u0f66\7\u0133")
        buf.write("\2\2\u0f66\u0f67\7B\2\2\u0f67\u0155\3\2\2\2\u0f68\u0f69")
        buf.write("\7M\2\2\u0f69\u0f6a\5\u01f0\u00f9\2\u0f6a\u0157\3\2\2")
        buf.write("\2\u0f6b\u0f6c\7S\2\2\u0f6c\u0f6d\5\u01f0\u00f9\2\u0f6d")
        buf.write("\u0159\3\2\2\2\u0f6e\u0f6f\5\u01f0\u00f9\2\u0f6f\u0f70")
        buf.write("\7\u03bb\2\2\u0f70\u0f72\3\2\2\2\u0f71\u0f6e\3\2\2\2\u0f71")
        buf.write("\u0f72\3\2\2\2\u0f72\u0f73\3\2\2\2\u0f73\u0f75\7[\2\2")
        buf.write("\u0f74\u0f76\5\u016e\u00b8\2\u0f75\u0f74\3\2\2\2\u0f76")
        buf.write("\u0f77\3\2\2\2\u0f77\u0f75\3\2\2\2\u0f77\u0f78\3\2\2\2")
        buf.write("\u0f78\u0f79\3\2\2\2\u0f79\u0f7a\7\u0133\2\2\u0f7a\u0f7c")
        buf.write("\7[\2\2\u0f7b\u0f7d\5\u01f0\u00f9\2\u0f7c\u0f7b\3\2\2")
        buf.write("\2\u0f7c\u0f7d\3\2\2\2\u0f7d\u015b\3\2\2\2\u0f7e\u0f7f")
        buf.write("\5\u01f0\u00f9\2\u0f7f\u0f80\7\u03bb\2\2\u0f80\u0f82\3")
        buf.write("\2\2\2\u0f81\u0f7e\3\2\2\2\u0f81\u0f82\3\2\2\2\u0f82\u0f83")
        buf.write("\3\2\2\2\u0f83\u0f85\7z\2\2\u0f84\u0f86\5\u016e\u00b8")
        buf.write("\2\u0f85\u0f84\3\2\2\2\u0f86\u0f87\3\2\2\2\u0f87\u0f85")
        buf.write("\3\2\2\2\u0f87\u0f88\3\2\2\2\u0f88\u0f89\3\2\2\2\u0f89")
        buf.write("\u0f8a\7\u0210\2\2\u0f8a\u0f8b\5\u0234\u011b\2\u0f8b\u0f8c")
        buf.write("\7\u0133\2\2\u0f8c\u0f8e\7z\2\2\u0f8d\u0f8f\5\u01f0\u00f9")
        buf.write("\2\u0f8e\u0f8d\3\2\2\2\u0f8e\u0f8f\3\2\2\2\u0f8f\u015d")
        buf.write("\3\2\2\2\u0f90\u0f91\7~\2\2\u0f91\u0f92\5\u0234\u011b")
        buf.write("\2\u0f92\u015f\3\2\2\2\u0f93\u0f94\5\u01f0\u00f9\2\u0f94")
        buf.write("\u0f95\7\u03bb\2\2\u0f95\u0f97\3\2\2\2\u0f96\u0f93\3\2")
        buf.write("\2\2\u0f96\u0f97\3\2\2\2\u0f97\u0f98\3\2\2\2\u0f98\u0f99")
        buf.write("\7\u00a6\2\2\u0f99\u0f9a\5\u0234\u011b\2\u0f9a\u0f9c\7")
        buf.write("\u012d\2\2\u0f9b\u0f9d\5\u016e\u00b8\2\u0f9c\u0f9b\3\2")
        buf.write("\2\2\u0f9d\u0f9e\3\2\2\2\u0f9e\u0f9c\3\2\2\2\u0f9e\u0f9f")
        buf.write("\3\2\2\2\u0f9f\u0fa0\3\2\2\2\u0fa0\u0fa1\7\u0133\2\2\u0fa1")
        buf.write("\u0fa3\7\u00a6\2\2\u0fa2\u0fa4\5\u01f0\u00f9\2\u0fa3\u0fa2")
        buf.write("\3\2\2\2\u0fa3\u0fa4\3\2\2\2\u0fa4\u0161\3\2\2\2\u0fa5")
        buf.write("\u0fa6\7\u010f\2\2\u0fa6\u0fb5\5\u01f0\u00f9\2\u0fa7\u0fac")
        buf.write("\78\2\2\u0fa8\u0faa\7\u019b\2\2\u0fa9\u0fa8\3\2\2\2\u0fa9")
        buf.write("\u0faa\3\2\2\2\u0faa\u0fab\3\2\2\2\u0fab\u0fad\7<\2\2")
        buf.write("\u0fac\u0fa9\3\2\2\2\u0fac\u0fad\3\2\2\2\u0fad\u0fae\3")
        buf.write("\2\2\2\u0fae\u0faf\5\u01f0\u00f9\2\u0faf\u0fb0\7K\2\2")
        buf.write("\u0fb0\u0fb1\5\u020e\u0108\2\u0fb1\u0fb5\3\2\2\2\u0fb2")
        buf.write("\u0fb3\7\u01a6\2\2\u0fb3\u0fb5\5\u01f0\u00f9\2\u0fb4\u0fa5")
        buf.write("\3\2\2\2\u0fb4\u0fa7\3\2\2\2\u0fb4\u0fb2\3\2\2\2\u0fb5")
        buf.write("\u0163\3\2\2\2\u0fb6\u0fb7\7%\2\2\u0fb7\u0fb8\5\u020e")
        buf.write("\u0108\2\u0fb8\u0fbb\5\u0204\u0103\2\u0fb9\u0fba\7&\2")
        buf.write("\2\u0fba\u0fbc\5\u021e\u0110\2\u0fbb\u0fb9\3\2\2\2\u0fbb")
        buf.write("\u0fbc\3\2\2\2\u0fbc\u0165\3\2\2\2\u0fbd\u0fbe\7%\2\2")
        buf.write("\u0fbe\u0fbf\5\u01f0\u00f9\2\u0fbf\u0fc0\7\33\2\2\u0fc0")
        buf.write("\u0fc7\79\2\2\u0fc1\u0fc8\5\u01f6\u00fc\2\u0fc2\u0fc4")
        buf.write("\7\u008b\2\2\u0fc3\u0fc5\7\u0216\2\2\u0fc4\u0fc3\3\2\2")
        buf.write("\2\u0fc4\u0fc5\3\2\2\2\u0fc5\u0fc6\3\2\2\2\u0fc6\u0fc8")
        buf.write("\7\u03bf\2\2\u0fc7\u0fc1\3\2\2\2\u0fc7\u0fc2\3\2\2\2\u0fc8")
        buf.write("\u0167\3\2\2\2\u0fc9\u0fca\7%\2\2\u0fca\u0fcb\5\u01f0")
        buf.write("\u00f9\2\u0fcb\u0fcc\7\"\2\2\u0fcc\u0fcd\79\2\2\u0fcd")
        buf.write("\u0fce\5\u00aeX\2\u0fce\u0169\3\2\2\2\u0fcf\u0fd0\7%\2")
        buf.write("\2\u0fd0\u0fd1\t9\2\2\u0fd1\u0fd2\7\u0154\2\2\u0fd2\u0fd3")
        buf.write("\79\2\2\u0fd3\u0fd8\5\u016c\u00b7\2\u0fd4\u0fd5\7\u03b2")
        buf.write("\2\2\u0fd5\u0fd7\5\u016c\u00b7\2\u0fd6\u0fd4\3\2\2\2\u0fd7")
        buf.write("\u0fda\3\2\2\2\u0fd8\u0fd6\3\2\2\2\u0fd8\u0fd9\3\2\2\2")
        buf.write("\u0fd9\u0fdb\3\2\2\2\u0fda\u0fd8\3\2\2\2\u0fdb\u0fdc\5")
        buf.write("\u014e\u00a8\2\u0fdc\u016b\3\2\2\2\u0fdd\u0fe9\5\u01f6")
        buf.write("\u00fc\2\u0fde\u0fe0\7\u008b\2\2\u0fdf\u0fe1\7\u0216\2")
        buf.write("\2\u0fe0\u0fdf\3\2\2\2\u0fe0\u0fe1\3\2\2\2\u0fe1\u0fe2")
        buf.write("\3\2\2\2\u0fe2\u0fe9\7\u03bf\2\2\u0fe3\u0fe9\5\u01f0\u00f9")
        buf.write("\2\u0fe4\u0fe9\7\u008c\2\2\u0fe5\u0fe6\7c\2\2\u0fe6\u0fe9")
        buf.write("\7\u014d\2\2\u0fe7\u0fe9\7\u008a\2\2\u0fe8\u0fdd\3\2\2")
        buf.write("\2\u0fe8\u0fde\3\2\2\2\u0fe8\u0fe3\3\2\2\2\u0fe8\u0fe4")
        buf.write("\3\2\2\2\u0fe8\u0fe5\3\2\2\2\u0fe8\u0fe7\3\2\2\2\u0fe9")
        buf.write("\u016d\3\2\2\2\u0fea\u0fed\5\24\13\2\u0feb\u0fed\5\6\4")
        buf.write("\2\u0fec\u0fea\3\2\2\2\u0fec\u0feb\3\2\2\2\u0fed\u0fee")
        buf.write("\3\2\2\2\u0fee\u0fef\7\u03b3\2\2\u0fef\u016f\3\2\2\2\u0ff0")
        buf.write("\u0ff3\7\u00a4\2\2\u0ff1\u0ff4\5\u0202\u0102\2\u0ff2\u0ff4")
        buf.write("\5\u0234\u011b\2\u0ff3\u0ff1\3\2\2\2\u0ff3\u0ff2\3\2\2")
        buf.write("\2\u0ff4\u0ff5\3\2\2\2\u0ff5\u0ff7\7\u0095\2\2\u0ff6\u0ff8")
        buf.write("\5\u016e\u00b8\2\u0ff7\u0ff6\3\2\2\2\u0ff8\u0ff9\3\2\2")
        buf.write("\2\u0ff9\u0ff7\3\2\2\2\u0ff9\u0ffa\3\2\2\2\u0ffa\u0171")
        buf.write("\3\2\2\2\u0ffb\u0ffc\7\61\2\2\u0ffc\u0ffd\5\u0234\u011b")
        buf.write("\2\u0ffd\u0fff\7\u0095\2\2\u0ffe\u1000\5\u016e\u00b8\2")
        buf.write("\u0fff\u0ffe\3\2\2\2\u1000\u1001\3\2\2\2\u1001\u0fff\3")
        buf.write("\2\2\2\u1001\u1002\3\2\2\2\u1002\u0173\3\2\2\2\u1003\u1004")
        buf.write("\7\t\2\2\u1004\u1005\7\u0212\2\2\u1005\u1006\5\u01de\u00f0")
        buf.write("\2\u1006\u100d\5\u0186\u00c4\2\u1007\u1008\7\u03b2\2\2")
        buf.write("\u1008\u1009\5\u01de\u00f0\2\u1009\u100a\5\u0186\u00c4")
        buf.write("\2\u100a\u100c\3\2\2\2\u100b\u1007\3\2\2\2\u100c\u100f")
        buf.write("\3\2\2\2\u100d\u100b\3\2\2\2\u100d\u100e\3\2\2\2\u100e")
        buf.write("\u103d\3\2\2\2\u100f\u100d\3\2\2\2\u1010\u1011\7\t\2\2")
        buf.write("\u1011\u1013\7\u0212\2\2\u1012\u1014\5\u0220\u0111\2\u1013")
        buf.write("\u1012\3\2\2\2\u1013\u1014\3\2\2\2\u1014\u1015\3\2\2\2")
        buf.write("\u1015\u101a\5\u0188\u00c5\2\u1016\u1017\7\u03b2\2\2\u1017")
        buf.write("\u1019\5\u0188\u00c5\2\u1018\u1016\3\2\2\2\u1019\u101c")
        buf.write("\3\2\2\2\u101a\u1018\3\2\2\2\u101a\u101b\3\2\2\2\u101b")
        buf.write("\u102b\3\2\2\2\u101c\u101a\3\2\2\2\u101d\u1029\7|\2\2")
        buf.write("\u101e\u102a\7\u019e\2\2\u101f\u1026\5\u018a\u00c6\2\u1020")
        buf.write("\u1022\7\13\2\2\u1021\u1020\3\2\2\2\u1021\u1022\3\2\2")
        buf.write("\2\u1022\u1023\3\2\2\2\u1023\u1025\5\u018a\u00c6\2\u1024")
        buf.write("\u1021\3\2\2\2\u1025\u1028\3\2\2\2\u1026\u1024\3\2\2\2")
        buf.write("\u1026\u1027\3\2\2\2\u1027\u102a\3\2\2\2\u1028\u1026\3")
        buf.write("\2\2\2\u1029\u101e\3\2\2\2\u1029\u101f\3\2\2\2\u102a\u102c")
        buf.write("\3\2\2\2\u102b\u101d\3\2\2\2\u102b\u102c\3\2\2\2\u102c")
        buf.write("\u1033\3\2\2\2\u102d\u102f\7\u00a7\2\2\u102e\u1030\5\u018c")
        buf.write("\u00c7\2\u102f\u102e\3\2\2\2\u1030\u1031\3\2\2\2\u1031")
        buf.write("\u102f\3\2\2\2\u1031\u1032\3\2\2\2\u1032\u1034\3\2\2\2")
        buf.write("\u1033\u102d\3\2\2\2\u1033\u1034\3\2\2\2\u1034\u1039\3")
        buf.write("\2\2\2\u1035\u1038\5\u0186\u00c4\2\u1036\u1038\5\u018e")
        buf.write("\u00c8\2\u1037\u1035\3\2\2\2\u1037\u1036\3\2\2\2\u1038")
        buf.write("\u103b\3\2\2\2\u1039\u1037\3\2\2\2\u1039\u103a\3\2\2\2")
        buf.write("\u103a\u103d\3\2\2\2\u103b\u1039\3\2\2\2\u103c\u1003\3")
        buf.write("\2\2\2\u103c\u1010\3\2\2\2\u103d\u0175\3\2\2\2\u103e\u103f")
        buf.write("\7\37\2\2\u103f\u1040\7\u0212\2\2\u1040\u1045\5\u0188")
        buf.write("\u00c5\2\u1041\u1042\7\u03b2\2\2\u1042\u1044\5\u0188\u00c5")
        buf.write("\2\u1043\u1041\3\2\2\2\u1044\u1047\3\2\2\2\u1045\u1043")
        buf.write("\3\2\2\2\u1045\u1046\3\2\2\2\u1046\u1075\3\2\2\2\u1047")
        buf.write("\u1045\3\2\2\2\u1048\u1049\7\37\2\2\u1049\u104b\7\u0212")
        buf.write("\2\2\u104a\u104c\5\u0222\u0112\2\u104b\u104a\3\2\2\2\u104b")
        buf.write("\u104c\3\2\2\2\u104c\u104d\3\2\2\2\u104d\u1052\5\u0188")
        buf.write("\u00c5\2\u104e\u104f\7\u03b2\2\2\u104f\u1051\5\u0188\u00c5")
        buf.write("\2\u1050\u104e\3\2\2\2\u1051\u1054\3\2\2\2\u1052\u1050")
        buf.write("\3\2\2\2\u1052\u1053\3\2\2\2\u1053\u1063\3\2\2\2\u1054")
        buf.write("\u1052\3\2\2\2\u1055\u1061\7|\2\2\u1056\u1062\7\u019e")
        buf.write("\2\2\u1057\u105e\5\u018a\u00c6\2\u1058\u105a\7\13\2\2")
        buf.write("\u1059\u1058\3\2\2\2\u1059\u105a\3\2\2\2\u105a\u105b\3")
        buf.write("\2\2\2\u105b\u105d\5\u018a\u00c6\2\u105c\u1059\3\2\2\2")
        buf.write("\u105d\u1060\3\2\2\2\u105e\u105c\3\2\2\2\u105e\u105f\3")
        buf.write("\2\2\2\u105f\u1062\3\2\2\2\u1060\u105e\3\2\2\2\u1061\u1056")
        buf.write("\3\2\2\2\u1061\u1057\3\2\2\2\u1062\u1064\3\2\2\2\u1063")
        buf.write("\u1055\3\2\2\2\u1063\u1064\3\2\2\2\u1064\u106b\3\2\2\2")
        buf.write("\u1065\u1067\7\u00a7\2\2\u1066\u1068\5\u018c\u00c7\2\u1067")
        buf.write("\u1066\3\2\2\2\u1068\u1069\3\2\2\2\u1069\u1067\3\2\2\2")
        buf.write("\u1069\u106a\3\2\2\2\u106a\u106c\3\2\2\2\u106b\u1065\3")
        buf.write("\2\2\2\u106b\u106c\3\2\2\2\u106c\u1071\3\2\2\2\u106d\u1070")
        buf.write("\5\u0186\u00c4\2\u106e\u1070\5\u018e\u00c8\2\u106f\u106d")
        buf.write("\3\2\2\2\u106f\u106e\3\2\2\2\u1070\u1073\3\2\2\2\u1071")
        buf.write("\u106f\3\2\2\2\u1071\u1072\3\2\2\2\u1072\u1075\3\2\2\2")
        buf.write("\u1073\u1071\3\2\2\2\u1074\u103e\3\2\2\2\u1074\u1048\3")
        buf.write("\2\2\2\u1075\u0177\3\2\2\2\u1076\u1077\7.\2\2\u1077\u1079")
        buf.write("\7\u0212\2\2\u1078\u107a\5\u0220\u0111\2\u1079\u1078\3")
        buf.write("\2\2\2\u1079\u107a\3\2\2\2\u107a\u107b\3\2\2\2\u107b\u1080")
        buf.write("\5\u01de\u00f0\2\u107c\u107d\7\u03b2\2\2\u107d\u107f\5")
        buf.write("\u01de\u00f0\2\u107e\u107c\3\2\2\2\u107f\u1082\3\2\2\2")
        buf.write("\u1080\u107e\3\2\2\2\u1080\u1081\3\2\2\2\u1081\u0179\3")
        buf.write("\2\2\2\u1082\u1080\3\2\2\2\u1083\u1084\7>\2\2\u1084\u1089")
        buf.write("\5\u0190\u00c9\2\u1085\u1086\7\u03b2\2\2\u1086\u1088\5")
        buf.write("\u0190\u00c9\2\u1087\u1085\3\2\2\2\u1088\u108b\3\2\2\2")
        buf.write("\u1089\u1087\3\2\2\2\u1089\u108a\3\2\2\2\u108a\u108c\3")
        buf.write("\2\2\2\u108b\u1089\3\2\2\2\u108c\u108e\7f\2\2\u108d\u108f")
        buf.write("\t:\2\2\u108e\u108d\3\2\2\2\u108e\u108f\3\2\2\2\u108f")
        buf.write("\u1090\3\2\2\2\u1090\u1091\5\u0194\u00cb\2\u1091\u1092")
        buf.write("\7\u0096\2\2\u1092\u1097\5\u0188\u00c5\2\u1093\u1094\7")
        buf.write("\u03b2\2\2\u1094\u1096\5\u0188\u00c5\2\u1095\u1093\3\2")
        buf.write("\2\2\u1096\u1099\3\2\2\2\u1097\u1095\3\2\2\2\u1097\u1098")
        buf.write("\3\2\2\2\u1098\u10a8\3\2\2\2\u1099\u1097\3\2\2\2\u109a")
        buf.write("\u10a6\7|\2\2\u109b\u10a7\7\u019e\2\2\u109c\u10a3\5\u018a")
        buf.write("\u00c6\2\u109d\u109f\7\13\2\2\u109e\u109d\3\2\2\2\u109e")
        buf.write("\u109f\3\2\2\2\u109f\u10a0\3\2\2\2\u10a0\u10a2\5\u018a")
        buf.write("\u00c6\2\u10a1\u109e\3\2\2\2\u10a2\u10a5\3\2\2\2\u10a3")
        buf.write("\u10a1\3\2\2\2\u10a3\u10a4\3\2\2\2\u10a4\u10a7\3\2\2\2")
        buf.write("\u10a5\u10a3\3\2\2\2\u10a6\u109b\3\2\2\2\u10a6\u109c\3")
        buf.write("\2\2\2\u10a7\u10a9\3\2\2\2\u10a8\u109a\3\2\2\2\u10a8\u10a9")
        buf.write("\3\2\2\2\u10a9\u10b3\3\2\2\2\u10aa\u10b0\7\u00a7\2\2\u10ab")
        buf.write("\u10ac\7>\2\2\u10ac\u10af\7h\2\2\u10ad\u10af\5\u018c\u00c7")
        buf.write("\2\u10ae\u10ab\3\2\2\2\u10ae\u10ad\3\2\2\2\u10af\u10b2")
        buf.write("\3\2\2\2\u10b0\u10ae\3\2\2\2\u10b0\u10b1\3\2\2\2\u10b1")
        buf.write("\u10b4\3\2\2\2\u10b2\u10b0\3\2\2\2\u10b3\u10aa\3\2\2\2")
        buf.write("\u10b3\u10b4\3\2\2\2\u10b4\u017b\3\2\2\2\u10b5\u10b6\7")
        buf.write(">\2\2\u10b6\u10b7\7\u01bd\2\2\u10b7\u10b8\7f\2\2\u10b8")
        buf.write("\u10b9\5\u01de\u00f0\2\u10b9\u10ba\7\u0096\2\2\u10ba\u10bf")
        buf.write("\5\u01de\u00f0\2\u10bb\u10bc\7\u03b2\2\2\u10bc\u10be\5")
        buf.write("\u01de\u00f0\2\u10bd\u10bb\3\2\2\2\u10be\u10c1\3\2\2\2")
        buf.write("\u10bf\u10bd\3\2\2\2\u10bf\u10c0\3\2\2\2\u10c0\u10c5\3")
        buf.write("\2\2\2\u10c1\u10bf\3\2\2\2\u10c2\u10c3\7\u00a7\2\2\u10c3")
        buf.write("\u10c4\7>\2\2\u10c4\u10c6\7h\2\2\u10c5\u10c2\3\2\2\2\u10c5")
        buf.write("\u10c6\3\2\2\2\u10c6\u017d\3\2\2\2\u10c7\u10c8\7y\2\2")
        buf.write("\u10c8\u10c9\7\u0212\2\2\u10c9\u10ca\5\u01de\u00f0\2\u10ca")
        buf.write("\u10cb\7\u0096\2\2\u10cb\u10cc\5\u01de\u00f0\2\u10cc\u10cd")
        buf.write("\7\u03b2\2\2\u10cd\u10ce\5\u01de\u00f0\2\u10ce\u10cf\7")
        buf.write("\u0096\2\2\u10cf\u10d0\5\u01de\u00f0\2\u10d0\u017f\3\2")
        buf.write("\2\2\u10d1\u10d2\7\177\2\2\u10d2\u10d7\5\u0190\u00c9\2")
        buf.write("\u10d3\u10d4\7\u03b2\2\2\u10d4\u10d6\5\u0190\u00c9\2\u10d5")
        buf.write("\u10d3\3\2\2\2\u10d6\u10d9\3\2\2\2\u10d7\u10d5\3\2\2\2")
        buf.write("\u10d7\u10d8\3\2\2\2\u10d8\u10da\3\2\2\2\u10d9\u10d7\3")
        buf.write("\2\2\2\u10da\u10dc\7f\2\2\u10db\u10dd\t:\2\2\u10dc\u10db")
        buf.write("\3\2\2\2\u10dc\u10dd\3\2\2\2\u10dd\u10de\3\2\2\2\u10de")
        buf.write("\u10df\5\u0194\u00cb\2\u10df\u10e0\7<\2\2\u10e0\u10e5")
        buf.write("\5\u01de\u00f0\2\u10e1\u10e2\7\u03b2\2\2\u10e2\u10e4\5")
        buf.write("\u01de\u00f0\2\u10e3\u10e1\3\2\2\2\u10e4\u10e7\3\2\2\2")
        buf.write("\u10e5\u10e3\3\2\2\2\u10e5\u10e6\3\2\2\2\u10e6\u10fa\3")
        buf.write("\2\2\2\u10e7\u10e5\3\2\2\2\u10e8\u10e9\7\177\2\2\u10e9")
        buf.write("\u10eb\7\b\2\2\u10ea\u10ec\7\u0236\2\2\u10eb\u10ea\3\2")
        buf.write("\2\2\u10eb\u10ec\3\2\2\2\u10ec\u10ed\3\2\2\2\u10ed\u10ee")
        buf.write("\7\u03b2\2\2\u10ee\u10ef\7>\2\2\u10ef\u10f0\7h\2\2\u10f0")
        buf.write("\u10f1\7<\2\2\u10f1\u10f6\5\u01de\u00f0\2\u10f2\u10f3")
        buf.write("\7\u03b2\2\2\u10f3\u10f5\5\u01de\u00f0\2\u10f4\u10f2\3")
        buf.write("\2\2\2\u10f5\u10f8\3\2\2\2\u10f6\u10f4\3\2\2\2\u10f6\u10f7")
        buf.write("\3\2\2\2\u10f7\u10fa\3\2\2\2\u10f8\u10f6\3\2\2\2\u10f9")
        buf.write("\u10d1\3\2\2\2\u10f9\u10e8\3\2\2\2\u10fa\u0181\3\2\2\2")
        buf.write("\u10fb\u10fc\7\177\2\2\u10fc\u10fd\7\u01bd\2\2\u10fd\u10fe")
        buf.write("\7f\2\2\u10fe\u10ff\5\u01de\u00f0\2\u10ff\u1100\7<\2\2")
        buf.write("\u1100\u1105\5\u01de\u00f0\2\u1101\u1102\7\u03b2\2\2\u1102")
        buf.write("\u1104\5\u01de\u00f0\2\u1103\u1101\3\2\2\2\u1104\u1107")
        buf.write("\3\2\2\2\u1105\u1103\3\2\2\2\u1105\u1106\3\2\2\2\u1106")
        buf.write("\u0183\3\2\2\2\u1107\u1105\3\2\2\2\u1108\u1109\7\u0085")
        buf.write("\2\2\u1109\u110c\7\u01b0\2\2\u110a\u110b\79\2\2\u110b")
        buf.write("\u110d\5\u01de\u00f0\2\u110c\u110a\3\2\2\2\u110c\u110d")
        buf.write("\3\2\2\2\u110d\u110e\3\2\2\2\u110e\u1111\7\u03a7\2\2\u110f")
        buf.write("\u1112\5\u022e\u0118\2\u1110\u1112\7\u03bf\2\2\u1111\u110f")
        buf.write("\3\2\2\2\u1111\u1110\3\2\2\2\u1112\u0185\3\2\2\2\u1113")
        buf.write("\u1114\7\u01b0\2\2\u1114\u111b\7\u0140\2\2\u1115\u111c")
        buf.write("\7&\2\2\u1116\u111c\7\u019a\2\2\u1117\u1118\7J\2\2\u1118")
        buf.write("\u1119\5\u01f6\u00fc\2\u1119\u111a\7\u0228\2\2\u111a\u111c")
        buf.write("\3\2\2\2\u111b\u1115\3\2\2\2\u111b\u1116\3\2\2\2\u111b")
        buf.write("\u1117\3\2\2\2\u111b\u111c\3\2\2\2\u111c\u0187\3\2\2\2")
        buf.write("\u111d\u111e\5\u01de\u00f0\2\u111e\u111f\7\u0159\2\2\u111f")
        buf.write("\u1120\7\21\2\2\u1120\u1121\7\u01b0\2\2\u1121\u1122\7")
        buf.write("\u03bf\2\2\u1122\u1135\3\2\2\2\u1123\u1124\5\u01de\u00f0")
        buf.write("\2\u1124\u1127\7\u0159\2\2\u1125\u1126\7\u00a7\2\2\u1126")
        buf.write("\u1128\5\u01ee\u00f8\2\u1127\u1125\3\2\2\2\u1127\u1128")
        buf.write("\3\2\2\2\u1128\u1129\3\2\2\2\u1129\u112a\7\21\2\2\u112a")
        buf.write("\u112b\7\u03bf\2\2\u112b\u1135\3\2\2\2\u112c\u112d\5\u01de")
        buf.write("\u00f0\2\u112d\u112e\7\u0159\2\2\u112e\u112f\7\u00a7\2")
        buf.write("\2\u112f\u1132\5\u01ee\u00f8\2\u1130\u1131\7\f\2\2\u1131")
        buf.write("\u1133\7\u03bf\2\2\u1132\u1130\3\2\2\2\u1132\u1133\3\2")
        buf.write("\2\2\u1133\u1135\3\2\2\2\u1134\u111d\3\2\2\2\u1134\u1123")
        buf.write("\3\2\2\2\u1134\u112c\3\2\2\2\u1135\u0189\3\2\2\2\u1136")
        buf.write("\u113f\7\u0090\2\2\u1137\u113f\7\u021e\2\2\u1138\u1139")
        buf.write("\7\u010d\2\2\u1139\u113f\7\u03bf\2\2\u113a\u113b\7\u0167")
        buf.write("\2\2\u113b\u113f\7\u03bf\2\2\u113c\u113d\7\u01fd\2\2\u113d")
        buf.write("\u113f\7\u03bf\2\2\u113e\u1136\3\2\2\2\u113e\u1137\3\2")
        buf.write("\2\2\u113e\u1138\3\2\2\2\u113e\u113a\3\2\2\2\u113e\u113c")
        buf.write("\3\2\2\2\u113f\u018b\3\2\2\2\u1140\u1141\7\u0189\2\2\u1141")
        buf.write("\u1149\5\u01f6\u00fc\2\u1142\u1143\7\u018c\2\2\u1143\u1149")
        buf.write("\5\u01f6\u00fc\2\u1144\u1145\7\u0188\2\2\u1145\u1149\5")
        buf.write("\u01f6\u00fc\2\u1146\u1147\7\u018d\2\2\u1147\u1149\5\u01f6")
        buf.write("\u00fc\2\u1148\u1140\3\2\2\2\u1148\u1142\3\2\2\2\u1148")
        buf.write("\u1144\3\2\2\2\u1148\u1146\3\2\2\2\u1149\u018d\3\2\2\2")
        buf.write("\u114a\u114b\7\u00f6\2\2\u114b\u114c\t;\2\2\u114c\u018f")
        buf.write("\3\2\2\2\u114d\u1152\5\u0192\u00ca\2\u114e\u114f\7\u03b0")
        buf.write("\2\2\u114f\u1150\5\u020e\u0108\2\u1150\u1151\7\u03b1\2")
        buf.write("\2\u1151\u1153\3\2\2\2\u1152\u114e\3\2\2\2\u1152\u1153")
        buf.write("\3\2\2\2\u1153\u0191\3\2\2\2\u1154\u1156\7\b\2\2\u1155")
        buf.write("\u1157\7\u0236\2\2\u1156\u1155\3\2\2\2\u1156\u1157\3\2")
        buf.write("\2\2\u1157\u117f\3\2\2\2\u1158\u115a\7\t\2\2\u1159\u115b")
        buf.write("\7\u022f\2\2\u115a\u1159\3\2\2\2\u115a\u115b\3\2\2\2\u115b")
        buf.write("\u117f\3\2\2\2\u115c\u1163\7\37\2\2\u115d\u115e\7\u0204")
        buf.write("\2\2\u115e\u1164\7\u022e\2\2\u115f\u1164\7\u022f\2\2\u1160")
        buf.write("\u1164\7\u0218\2\2\u1161\u1164\7\u0212\2\2\u1162\u1164")
        buf.write("\7\u0203\2\2\u1163\u115d\3\2\2\2\u1163\u115f\3\2\2\2\u1163")
        buf.write("\u1160\3\2\2\2\u1163\u1161\3\2\2\2\u1163\u1162\3\2\2\2")
        buf.write("\u1163\u1164\3\2\2\2\u1164\u117f\3\2\2\2\u1165\u117f\7")
        buf.write("(\2\2\u1166\u117f\7.\2\2\u1167\u117f\7\u013b\2\2\u1168")
        buf.write("\u117f\7\u0230\2\2\u1169\u117f\7\u0231\2\2\u116a\u116b")
        buf.write("\7>\2\2\u116b\u117f\7h\2\2\u116c\u117f\7E\2\2\u116d\u117f")
        buf.write("\7I\2\2\u116e\u116f\7Z\2\2\u116f\u117f\7\u022e\2\2\u1170")
        buf.write("\u117f\7\u0232\2\2\u1171\u117f\7\u01bd\2\2\u1172\u117f")
        buf.write("\7v\2\2\u1173\u117f\7\u0233\2\2\u1174\u1175\7\u01d2\2")
        buf.write("\2\u1175\u117f\t<\2\2\u1176\u117f\7\u0084\2\2\u1177\u1178")
        buf.write("\7\u0087\2\2\u1178\u117f\t=\2\2\u1179\u117f\7\u0234\2")
        buf.write("\2\u117a\u117f\7\u0235\2\2\u117b\u117f\7\u0098\2\2\u117c")
        buf.write("\u117f\7\u009f\2\2\u117d\u117f\7\u00a0\2\2\u117e\u1154")
        buf.write("\3\2\2\2\u117e\u1158\3\2\2\2\u117e\u115c\3\2\2\2\u117e")
        buf.write("\u1165\3\2\2\2\u117e\u1166\3\2\2\2\u117e\u1167\3\2\2\2")
        buf.write("\u117e\u1168\3\2\2\2\u117e\u1169\3\2\2\2\u117e\u116a\3")
        buf.write("\2\2\2\u117e\u116c\3\2\2\2\u117e\u116d\3\2\2\2\u117e\u116e")
        buf.write("\3\2\2\2\u117e\u1170\3\2\2\2\u117e\u1171\3\2\2\2\u117e")
        buf.write("\u1172\3\2\2\2\u117e\u1173\3\2\2\2\u117e\u1174\3\2\2\2")
        buf.write("\u117e\u1176\3\2\2\2\u117e\u1177\3\2\2\2\u117e\u1179\3")
        buf.write("\2\2\2\u117e\u117a\3\2\2\2\u117e\u117b\3\2\2\2\u117e\u117c")
        buf.write("\3\2\2\2\u117e\u117d\3\2\2\2\u117f\u0193\3\2\2\2\u1180")
        buf.write("\u118e\7\u03a0\2\2\u1181\u1182\7\u03a0\2\2\u1182\u1183")
        buf.write("\7\u03af\2\2\u1183\u118e\7\u03a0\2\2\u1184\u1185\5\u01f0")
        buf.write("\u00f9\2\u1185\u1186\7\u03af\2\2\u1186\u1187\7\u03a0\2")
        buf.write("\2\u1187\u118e\3\2\2\2\u1188\u1189\5\u01f0\u00f9\2\u1189")
        buf.write("\u118a\7\u03af\2\2\u118a\u118b\5\u01f0\u00f9\2\u118b\u118e")
        buf.write("\3\2\2\2\u118c\u118e\5\u01f0\u00f9\2\u118d\u1180\3\2\2")
        buf.write("\2\u118d\u1181\3\2\2\2\u118d\u1184\3\2\2\2\u118d\u1188")
        buf.write("\3\2\2\2\u118d\u118c\3\2\2\2\u118e\u0195\3\2\2\2\u118f")
        buf.write("\u1191\7\n\2\2\u1190\u1192\t>\2\2\u1191\u1190\3\2\2\2")
        buf.write("\u1191\u1192\3\2\2\2\u1192\u1193\3\2\2\2\u1193\u1194\7")
        buf.write("\u0093\2\2\u1194\u1195\5\u0210\u0109\2\u1195\u0197\3\2")
        buf.write("\2\2\u1196\u1197\7\30\2\2\u1197\u1198\7\u0093\2\2\u1198")
        buf.write("\u119c\5\u0210\u0109\2\u1199\u119b\5\u01a0\u00d1\2\u119a")
        buf.write("\u1199\3\2\2\2\u119b\u119e\3\2\2\2\u119c\u119a\3\2\2\2")
        buf.write("\u119c\u119d\3\2\2\2\u119d\u0199\3\2\2\2\u119e\u119c\3")
        buf.write("\2\2\2\u119f\u11a0\7\u010c\2\2\u11a0\u11a1\7\u0093\2\2")
        buf.write("\u11a1\u11a3\5\u0210\u0109\2\u11a2\u11a4\t?\2\2\u11a3")
        buf.write("\u11a2\3\2\2\2\u11a3\u11a4\3\2\2\2\u11a4\u019b\3\2\2\2")
        buf.write("\u11a5\u11a7\7g\2\2\u11a6\u11a8\t>\2\2\u11a7\u11a6\3\2")
        buf.write("\2\2\u11a7\u11a8\3\2\2\2\u11a8\u11a9\3\2\2\2\u11a9\u11aa")
        buf.write("\7\u0093\2\2\u11aa\u11ab\5\u0210\u0109\2\u11ab\u019d\3")
        buf.write("\2\2\2\u11ac\u11ae\7\u01ca\2\2\u11ad\u11af\t>\2\2\u11ae")
        buf.write("\u11ad\3\2\2\2\u11ae\u11af\3\2\2\2\u11af\u11b0\3\2\2\2")
        buf.write("\u11b0\u11b1\7\u0093\2\2\u11b1\u11b3\5\u0210\u0109\2\u11b2")
        buf.write("\u11b4\7\u01bf\2\2\u11b3\u11b2\3\2\2\2\u11b3\u11b4\3\2")
        buf.write("\2\2\u11b4\u11b6\3\2\2\2\u11b5\u11b7\7\u0142\2\2\u11b6")
        buf.write("\u11b5\3\2\2\2\u11b6\u11b7\3\2\2\2\u11b7\u11b9\3\2\2\2")
        buf.write("\u11b8\u11ba\7\u0213\2\2\u11b9\u11b8\3\2\2\2\u11b9\u11ba")
        buf.write("\3\2\2\2\u11ba\u019f\3\2\2\2\u11bb\u11bc\79\2\2\u11bc")
        buf.write("\u11c3\7\u0211\2\2\u11bd\u11c3\7\u01bf\2\2\u11be\u11c3")
        buf.write("\7\u0144\2\2\u11bf\u11c3\7\u018e\2\2\u11c0\u11c3\7\u0142")
        buf.write("\2\2\u11c1\u11c3\7\u010a\2\2\u11c2\u11bb\3\2\2\2\u11c2")
        buf.write("\u11bd\3\2\2\2\u11c2\u11be\3\2\2\2\u11c2\u11bf\3\2\2\2")
        buf.write("\u11c2\u11c0\3\2\2\2\u11c2\u11c1\3\2\2\2\u11c3\u01a1\3")
        buf.write("\2\2\2\u11c4\u11c6\7\37\2\2\u11c5\u11c7\7\u00f9\2\2\u11c6")
        buf.write("\u11c5\3\2\2\2\u11c6\u11c7\3\2\2\2\u11c7\u11c8\3\2\2\2")
        buf.write("\u11c8\u11c9\7\u014f\2\2\u11c9\u11ca\5\u01f0\u00f9\2\u11ca")
        buf.write("\u11cb\7\u01d5\2\2\u11cb\u11cc\t@\2\2\u11cc\u11cd\7\u01ea")
        buf.write("\2\2\u11cd\u11ce\7\u03bf\2\2\u11ce\u01a3\3\2\2\2\u11cf")
        buf.write("\u11d0\7\u0160\2\2\u11d0\u11d1\7\u01b2\2\2\u11d1\u11d2")
        buf.write("\5\u01f0\u00f9\2\u11d2\u11d3\7\u01ea\2\2\u11d3\u11d4\7")
        buf.write("\u03bf\2\2\u11d4\u01a5\3\2\2\2\u11d5\u11d6\7\u020e\2\2")
        buf.write("\u11d6\u11d7\7\u01b2\2\2\u11d7\u11d8\5\u01f0\u00f9\2\u11d8")
        buf.write("\u01a7\3\2\2\2\u11d9\u11da\7\u0085\2\2\u11da\u11db\5\u01ac")
        buf.write("\u00d7\2\u11db\u11dc\7\u03a7\2\2\u11dc\u11e4\5\u0234\u011b")
        buf.write("\2\u11dd\u11de\7\u03b2\2\2\u11de\u11df\5\u01ac\u00d7\2")
        buf.write("\u11df\u11e0\7\u03a7\2\2\u11e0\u11e1\5\u0234\u011b\2\u11e1")
        buf.write("\u11e3\3\2\2\2\u11e2\u11dd\3\2\2\2\u11e3\u11e6\3\2\2\2")
        buf.write("\u11e4\u11e2\3\2\2\2\u11e4\u11e5\3\2\2\2\u11e5\u11ff\3")
        buf.write("\2\2\2\u11e6\u11e4\3\2\2\2\u11e7\u11eb\7\u0085\2\2\u11e8")
        buf.write("\u11e9\7\27\2\2\u11e9\u11ec\7\u0085\2\2\u11ea\u11ec\7")
        buf.write("\u0291\2\2\u11eb\u11e8\3\2\2\2\u11eb\u11ea\3\2\2\2\u11ec")
        buf.write("\u11ef\3\2\2\2\u11ed\u11f0\5\u01e2\u00f2\2\u11ee\u11f0")
        buf.write("\7&\2\2\u11ef\u11ed\3\2\2\2\u11ef\u11ee\3\2\2\2\u11f0")
        buf.write("\u11ff\3\2\2\2\u11f1\u11f2\7\u0085\2\2\u11f2\u11f9\7\u0198")
        buf.write("\2\2\u11f3\u11f6\5\u01e2\u00f2\2\u11f4\u11f5\7\31\2\2")
        buf.write("\u11f5\u11f7\5\u01e4\u00f3\2\u11f6\u11f4\3\2\2\2\u11f6")
        buf.write("\u11f7\3\2\2\2\u11f7\u11fa\3\2\2\2\u11f8\u11fa\7&\2\2")
        buf.write("\u11f9\u11f3\3\2\2\2\u11f9\u11f8\3\2\2\2\u11fa\u11ff\3")
        buf.write("\2\2\2\u11fb\u11ff\5\u0184\u00c3\2\u11fc\u11ff\5\u010a")
        buf.write("\u0086\2\u11fd\u11ff\5\u0108\u0085\2\u11fe\u11d9\3\2\2")
        buf.write("\2\u11fe\u11e7\3\2\2\2\u11fe\u11f1\3\2\2\2\u11fe\u11fb")
        buf.write("\3\2\2\2\u11fe\u11fc\3\2\2\2\u11fe\u11fd\3\2\2\2\u11ff")
        buf.write("\u01a9\3\2\2\2\u1200\u1201\7\u0087\2\2\u1201\u1202\t/")
        buf.write("\2\2\u1202\u1298\7\u0172\2\2\u1203\u1204\7\u0087\2\2\u1204")
        buf.write("\u1205\tA\2\2\u1205\u1208\7\u013c\2\2\u1206\u1207\7D\2")
        buf.write("\2\u1207\u1209\7\u03bf\2\2\u1208\u1206\3\2\2\2\u1208\u1209")
        buf.write("\3\2\2\2\u1209\u120c\3\2\2\2\u120a\u120b\7<\2\2\u120b")
        buf.write("\u120d\5\u01f6\u00fc\2\u120c\u120a\3\2\2\2\u120c\u120d")
        buf.write("\3\2\2\2\u120d\u1215\3\2\2\2\u120e\u1212\7V\2\2\u120f")
        buf.write("\u1210\5\u01f6\u00fc\2\u1210\u1211\7\u03b2\2\2\u1211\u1213")
        buf.write("\3\2\2\2\u1212\u120f\3\2\2\2\u1212\u1213\3\2\2\2\u1213")
        buf.write("\u1214\3\2\2\2\u1214\u1216\5\u01f6\u00fc\2\u1215\u120e")
        buf.write("\3\2\2\2\u1215\u1216\3\2\2\2\u1216\u1298\3\2\2\2\u1217")
        buf.write("\u1218\7\u0087\2\2\u1218\u121a\5\u01ae\u00d8\2\u1219\u121b")
        buf.write("\5\u01b0\u00d9\2\u121a\u1219\3\2\2\2\u121a\u121b\3\2\2")
        buf.write("\2\u121b\u1298\3\2\2\2\u121c\u121e\7\u0087\2\2\u121d\u121f")
        buf.write("\7\u014e\2\2\u121e\u121d\3\2\2\2\u121e\u121f\3\2\2\2\u121f")
        buf.write("\u1220\3\2\2\2\u1220\u1221\t!\2\2\u1221\u1222\tB\2\2\u1222")
        buf.write("\u1225\5\u01d8\u00ed\2\u1223\u1224\tB\2\2\u1224\u1226")
        buf.write("\5\u01f0\u00f9\2\u1225\u1223\3\2\2\2\u1225\u1226\3\2\2")
        buf.write("\2\u1226\u1228\3\2\2\2\u1227\u1229\5\u01b0\u00d9\2\u1228")
        buf.write("\u1227\3\2\2\2\u1228\u1229\3\2\2\2\u1229\u1298\3\2\2\2")
        buf.write("\u122a\u122b\7\u0087\2\2\u122b\u122c\7\37\2\2\u122c\u122e")
        buf.write("\t\2\2\2\u122d\u122f\5\u0222\u0112\2\u122e\u122d\3\2\2")
        buf.write("\2\u122e\u122f\3\2\2\2\u122f\u1230\3\2\2\2\u1230\u1298")
        buf.write("\5\u01f0\u00f9\2\u1231\u1232\7\u0087\2\2\u1232\u1233\7")
        buf.write("\37\2\2\u1233\u1234\tC\2\2\u1234\u1298\5\u01d6\u00ec\2")
        buf.write("\u1235\u1236\7\u0087\2\2\u1236\u1237\7\37\2\2\u1237\u1238")
        buf.write("\7\u0212\2\2\u1238\u1298\5\u01de\u00f0\2\u1239\u123a\7")
        buf.write("\u0087\2\2\u123a\u123b\7\u0135\2\2\u123b\u123c\5\u01e6")
        buf.write("\u00f4\2\u123c\u123d\tD\2\2\u123d\u1298\3\2\2\2\u123e")
        buf.write("\u123f\7\u0087\2\2\u123f\u1298\5\u01b2\u00da\2\u1240\u1241")
        buf.write("\7\u0087\2\2\u1241\u1242\tE\2\2\u1242\u1246\7V\2\2\u1243")
        buf.write("\u1244\5\u01f6\u00fc\2\u1244\u1245\7\u03b2\2\2\u1245\u1247")
        buf.write("\3\2\2\2\u1246\u1243\3\2\2\2\u1246\u1247\3\2\2\2\u1247")
        buf.write("\u1248\3\2\2\2\u1248\u1298\5\u01f6\u00fc\2\u1249\u124a")
        buf.write("\7\u0087\2\2\u124a\u124b\7\u00d7\2\2\u124b\u124c\7\u03b0")
        buf.write("\2\2\u124c\u124d\7\u03a0\2\2\u124d\u124e\7\u03b1\2\2\u124e")
        buf.write("\u1298\tE\2\2\u124f\u1250\7\u0087\2\2\u1250\u1253\5\u01b4")
        buf.write("\u00db\2\u1251\u1252\tB\2\2\u1252\u1254\5\u01f0\u00f9")
        buf.write("\2\u1253\u1251\3\2\2\2\u1253\u1254\3\2\2\2\u1254\u1256")
        buf.write("\3\2\2\2\u1255\u1257\5\u01b0\u00d9\2\u1256\u1255\3\2\2")
        buf.write("\2\u1256\u1257\3\2\2\2\u1257\u1298\3\2\2\2\u1258\u1259")
        buf.write("\7\u0087\2\2\u1259\u125a\tF\2\2\u125a\u125b\7\u0111\2")
        buf.write("\2\u125b\u1298\5\u01d6\u00ec\2\u125c\u125d\7\u0087\2\2")
        buf.write("\u125d\u1260\7\u0152\2\2\u125e\u125f\79\2\2\u125f\u1261")
        buf.write("\5\u01de\u00f0\2\u1260\u125e\3\2\2\2\u1260\u1261\3\2\2")
        buf.write("\2\u1261\u1298\3\2\2\2\u1262\u1263\7\u0087\2\2\u1263\u1264")
        buf.write("\tG\2\2\u1264\u1265\tB\2\2\u1265\u1268\5\u01d8\u00ed\2")
        buf.write("\u1266\u1267\tB\2\2\u1267\u1269\5\u01f0\u00f9\2\u1268")
        buf.write("\u1266\3\2\2\2\u1268\u1269\3\2\2\2\u1269\u126c\3\2\2\2")
        buf.write("\u126a\u126b\7\u00a5\2\2\u126b\u126d\5\u0234\u011b\2\u126c")
        buf.write("\u126a\3\2\2\2\u126c\u126d\3\2\2\2\u126d\u1298\3\2\2\2")
        buf.write("\u126e\u126f\7\u0087\2\2\u126f\u1270\7\u01a6\2\2\u1270")
        buf.write("\u1273\7\u022e\2\2\u1271\u1272\tB\2\2\u1272\u1274\5\u01f0")
        buf.write("\u00f9\2\u1273\u1271\3\2\2\2\u1273\u1274\3\2\2\2\u1274")
        buf.write("\u1276\3\2\2\2\u1275\u1277\5\u01b0\u00d9\2\u1276\u1275")
        buf.write("\3\2\2\2\u1276\u1277\3\2\2\2\u1277\u1298\3\2\2\2\u1278")
        buf.write("\u1279\7\u0087\2\2\u1279\u127a\7\u01bb\2\2\u127a\u127f")
        buf.write("\5\u01b6\u00dc\2\u127b\u127c\7\u03b2\2\2\u127c\u127e\5")
        buf.write("\u01b6\u00dc\2\u127d\u127b\3\2\2\2\u127e\u1281\3\2\2\2")
        buf.write("\u127f\u127d\3\2\2\2\u127f\u1280\3\2\2\2\u1280\u1285\3")
        buf.write("\2\2\2\u1281\u127f\3\2\2\2\u1282\u1283\79\2\2\u1283\u1284")
        buf.write("\7\u01be\2\2\u1284\u1286\5\u01f6\u00fc\2\u1285\u1282\3")
        buf.write("\2\2\2\u1285\u1286\3\2\2\2\u1286\u1287\3\2\2\2\u1287\u128b")
        buf.write("\7V\2\2\u1288\u1289\5\u01f6\u00fc\2\u1289\u128a\7\u03b2")
        buf.write("\2\2\u128a\u128c\3\2\2\2\u128b\u1288\3\2\2\2\u128b\u128c")
        buf.write("\3\2\2\2\u128c\u128d\3\2\2\2\u128d\u128e\5\u01f6\u00fc")
        buf.write("\2\u128e\u1298\3\2\2\2\u128f\u1290\7\u0087\2\2\u1290\u1291")
        buf.write("\7\u01e5\2\2\u1291\u1295\7\u01f9\2\2\u1292\u1293\79\2")
        buf.write("\2\u1293\u1294\7\u010b\2\2\u1294\u1296\7\u03bf\2\2\u1295")
        buf.write("\u1292\3\2\2\2\u1295\u1296\3\2\2\2\u1296\u1298\3\2\2\2")
        buf.write("\u1297\u1200\3\2\2\2\u1297\u1203\3\2\2\2\u1297\u1217\3")
        buf.write("\2\2\2\u1297\u121c\3\2\2\2\u1297\u122a\3\2\2\2\u1297\u1231")
        buf.write("\3\2\2\2\u1297\u1235\3\2\2\2\u1297\u1239\3\2\2\2\u1297")
        buf.write("\u123e\3\2\2\2\u1297\u1240\3\2\2\2\u1297\u1249\3\2\2\2")
        buf.write("\u1297\u124f\3\2\2\2\u1297\u1258\3\2\2\2\u1297\u125c\3")
        buf.write("\2\2\2\u1297\u1262\3\2\2\2\u1297\u126e\3\2\2\2\u1297\u1278")
        buf.write("\3\2\2\2\u1297\u128f\3\2\2\2\u1298\u01ab\3\2\2\2\u1299")
        buf.write("\u12a4\7\u03ca\2\2\u129a\u12a4\7\u03cb\2\2\u129b\u129c")
        buf.write("\7\u03b4\2\2\u129c\u129e\7\u03b4\2\2\u129d\u129b\3\2\2")
        buf.write("\2\u129d\u129e\3\2\2\2\u129e\u129f\3\2\2\2\u129f\u12a1")
        buf.write("\t.\2\2\u12a0\u129d\3\2\2\2\u12a0\u12a1\3\2\2\2\u12a1")
        buf.write("\u12a2\3\2\2\2\u12a2\u12a4\5\u01f0\u00f9\2\u12a3\u1299")
        buf.write("\3\2\2\2\u12a3\u129a\3\2\2\2\u12a3\u12a0\3\2\2\2\u12a4")
        buf.write("\u01ad\3\2\2\2\u12a5\u12a6\7\27\2\2\u12a6\u12b3\7\u0085")
        buf.write("\2\2\u12a7\u12b3\7\u0294\2\2\u12a8\u12b3\7$\2\2\u12a9")
        buf.write("\u12b3\7\u0083\2\2\u12aa\u12ab\7\u014f\2\2\u12ab\u12b3")
        buf.write("\7\u01f9\2\2\u12ac\u12ad\7q\2\2\u12ad\u12b3\7\u01f9\2")
        buf.write("\2\u12ae\u12b0\t.\2\2\u12af\u12ae\3\2\2\2\u12af\u12b0")
        buf.write("\3\2\2\2\u12b0\u12b1\3\2\2\2\u12b1\u12b3\tH\2\2\u12b2")
        buf.write("\u12a5\3\2\2\2\u12b2\u12a7\3\2\2\2\u12b2\u12a8\3\2\2\2")
        buf.write("\u12b2\u12a9\3\2\2\2\u12b2\u12aa\3\2\2\2\u12b2\u12ac\3")
        buf.write("\2\2\2\u12b2\u12af\3\2\2\2\u12b3\u01af\3\2\2\2\u12b4\u12b5")
        buf.write("\7U\2\2\u12b5\u12b9\7\u03bf\2\2\u12b6\u12b7\7\u00a5\2")
        buf.write("\2\u12b7\u12b9\5\u0234\u011b\2\u12b8\u12b4\3\2\2\2\u12b8")
        buf.write("\u12b6\3\2\2\2\u12b9\u01b1\3\2\2\2\u12ba\u12bc\7\u01fb")
        buf.write("\2\2\u12bb\u12ba\3\2\2\2\u12bb\u12bc\3\2\2\2\u12bc\u12bd")
        buf.write("\3\2\2\2\u12bd\u12cc\7\u0136\2\2\u12be\u12bf\7\u0173\2")
        buf.write("\2\u12bf\u12cc\7\u01f9\2\2\u12c0\u12cc\7\u01b4\2\2\u12c1")
        buf.write("\u12cc\7\u0236\2\2\u12c2\u12c4\7\u014e\2\2\u12c3\u12c2")
        buf.write("\3\2\2\2\u12c3\u12c4\3\2\2\2\u12c4\u12c5\3\2\2\2\u12c5")
        buf.write("\u12cc\7\u01ba\2\2\u12c6\u12cc\7\u01bc\2\2\u12c7\u12c8")
        buf.write("\7\u01e5\2\2\u12c8\u12cc\7\u0158\2\2\u12c9\u12cc\7\u00fd")
        buf.write("\2\2\u12ca\u12cc\7\u011f\2\2\u12cb\u12bb\3\2\2\2\u12cb")
        buf.write("\u12be\3\2\2\2\u12cb\u12c0\3\2\2\2\u12cb\u12c1\3\2\2\2")
        buf.write("\u12cb\u12c3\3\2\2\2\u12cb\u12c6\3\2\2\2\u12cb\u12c7\3")
        buf.write("\2\2\2\u12cb\u12c9\3\2\2\2\u12cb\u12ca\3\2\2\2\u12cc\u01b3")
        buf.write("\3\2\2\2\u12cd\u12d6\7\u013c\2\2\u12ce\u12cf\7\u0093\2")
        buf.write("\2\u12cf\u12d6\7\u01f9\2\2\u12d0\u12d2\7\u014e\2\2\u12d1")
        buf.write("\u12d0\3\2\2\2\u12d1\u12d2\3\2\2\2\u12d2\u12d3\3\2\2\2")
        buf.write("\u12d3\u12d6\7\u022e\2\2\u12d4\u12d6\7\u0209\2\2\u12d5")
        buf.write("\u12cd\3\2\2\2\u12d5\u12ce\3\2\2\2\u12d5\u12d1\3\2\2\2")
        buf.write("\u12d5\u12d4\3\2\2\2\u12d6\u01b5\3\2\2\2\u12d7\u12e4\7")
        buf.write("\b\2\2\u12d8\u12d9\7\u0105\2\2\u12d9\u12e4\7\u0163\2\2")
        buf.write("\u12da\u12db\7\u011e\2\2\u12db\u12e4\7\u0202\2\2\u12dc")
        buf.write("\u12e4\7\u0121\2\2\u12dd\u12e4\7\u0165\2\2\u12de\u12e4")
        buf.write("\7\u0264\2\2\u12df\u12e0\7\u01ab\2\2\u12e0\u12e4\7\u0145")
        buf.write("\2\2\u12e1\u12e4\7\u01ec\2\2\u12e2\u12e4\7\u0201\2\2\u12e3")
        buf.write("\u12d7\3\2\2\2\u12e3\u12d8\3\2\2\2\u12e3\u12da\3\2\2\2")
        buf.write("\u12e3\u12dc\3\2\2\2\u12e3\u12dd\3\2\2\2\u12e3\u12de\3")
        buf.write("\2\2\2\u12e3\u12df\3\2\2\2\u12e3\u12e1\3\2\2\2\u12e3\u12e2")
        buf.write("\3\2\2\2\u12e4\u01b7\3\2\2\2\u12e5\u12e6\7\u0103\2\2\u12e6")
        buf.write("\u12e7\7\u03bf\2\2\u12e7\u01b9\3\2\2\2\u12e8\u12e9\7\u0107")
        buf.write("\2\2\u12e9\u12ea\7E\2\2\u12ea\u12ef\5\u01c6\u00e4\2\u12eb")
        buf.write("\u12ec\7\u03b2\2\2\u12ec\u12ee\5\u01c6\u00e4\2\u12ed\u12eb")
        buf.write("\3\2\2\2\u12ee\u12f1\3\2\2\2\u12ef\u12ed\3\2\2\2\u12ef")
        buf.write("\u12f0\3\2\2\2\u12f0\u12f9\3\2\2\2\u12f1\u12ef\3\2\2\2")
        buf.write("\u12f2\u12f3\7o\2\2\u12f3\u12f6\7\u03b0\2\2\u12f4\u12f7")
        buf.write("\5\u020e\u0108\2\u12f5\u12f7\7\b\2\2\u12f6\u12f4\3\2\2")
        buf.write("\2\u12f6\u12f5\3\2\2\2\u12f7\u12f8\3\2\2\2\u12f8\u12fa")
        buf.write("\7\u03b1\2\2\u12f9\u12f2\3\2\2\2\u12f9\u12fa\3\2\2\2\u12fa")
        buf.write("\u12fb\3\2\2\2\u12fb\u12fc\7D\2\2\u12fc\u12fd\5\u01f0")
        buf.write("\u00f9\2\u12fd\u01bb\3\2\2\2\u12fe\u1300\7\u014b\2\2\u12ff")
        buf.write("\u1301\t>\2\2\u1300\u12ff\3\2\2\2\u1300\u1301\3\2\2\2")
        buf.write("\u1301\u1302\3\2\2\2\u1302\u1307\5\u01c8\u00e5\2\u1303")
        buf.write("\u1304\7\u03b2\2\2\u1304\u1306\5\u01c8\u00e5\2\u1305\u1303")
        buf.write("\3\2\2\2\u1306\u1309\3\2\2\2\u1307\u1305\3\2\2\2\u1307")
        buf.write("\u1308\3\2\2\2\u1308\u01bd\3\2\2\2\u1309\u1307\3\2\2\2")
        buf.write("\u130a\u130c\7Q\2\2\u130b\u130d\tI\2\2\u130c\u130b\3\2")
        buf.write("\2\2\u130c\u130d\3\2\2\2\u130d\u130f\3\2\2\2\u130e\u1310")
        buf.write("\5\u01f6\u00fc\2\u130f\u130e\3\2\2\2\u1310\u1311\3\2\2")
        buf.write("\2\u1311\u130f\3\2\2\2\u1311\u1312\3\2\2\2\u1312\u01bf")
        buf.write("\3\2\2\2\u1313\u1314\7Y\2\2\u1314\u1315\7E\2\2\u1315\u1316")
        buf.write("\7K\2\2\u1316\u1317\7\u0107\2\2\u1317\u131c\5\u01ca\u00e6")
        buf.write("\2\u1318\u1319\7\u03b2\2\2\u1319\u131b\5\u01ca\u00e6\2")
        buf.write("\u131a\u1318\3\2\2\2\u131b\u131e\3\2\2\2\u131c\u131a\3")
        buf.write("\2\2\2\u131c\u131d\3\2\2\2\u131d\u01c1\3\2\2\2\u131e\u131c")
        buf.write("\3\2\2\2\u131f\u1320\7\u01d3\2\2\u1320\u1321\7\u01be\2")
        buf.write("\2\u1321\u1322\7\u0107\2\2\u1322\u01c3\3\2\2\2\u1323\u1324")
        buf.write("\7\u0234\2\2\u1324\u01c5\3\2\2\2\u1325\u132d\5\u01d8\u00ed")
        buf.write("\2\u1326\u1328\t\23\2\2\u1327\u1326\3\2\2\2\u1327\u1328")
        buf.write("\3\2\2\2\u1328\u1329\3\2\2\2\u1329\u132a\7\u03b0\2\2\u132a")
        buf.write("\u132b\5\u020e\u0108\2\u132b\u132c\7\u03b1\2\2\u132c\u132e")
        buf.write("\3\2\2\2\u132d\u1327\3\2\2\2\u132d\u132e\3\2\2\2\u132e")
        buf.write("\u01c7\3\2\2\2\u132f\u1342\7\u0128\2\2\u1330\u1342\7\u0158")
        buf.write("\2\2\u1331\u1333\tJ\2\2\u1332\u1331\3\2\2\2\u1332\u1333")
        buf.write("\3\2\2\2\u1333\u1334\3\2\2\2\u1334\u1342\7\u0172\2\2\u1335")
        buf.write("\u1342\7\u01a7\2\2\u1336\u1342\7\u0236\2\2\u1337\u1338")
        buf.write("\7\u01be\2\2\u1338\u1342\7\u0107\2\2\u1339\u1342\7\u01f9")
        buf.write("\2\2\u133a\u1342\7\u0214\2\2\u133b\u133f\7\u022e\2\2\u133c")
        buf.write("\u133d\7\u00a7\2\2\u133d\u133e\7t\2\2\u133e\u1340\7Z\2")
        buf.write("\2\u133f\u133c\3\2\2\2\u133f\u1340\3\2\2\2\u1340\u1342")
        buf.write("\3\2\2\2\u1341\u132f\3\2\2\2\u1341\u1330\3\2\2\2\u1341")
        buf.write("\u1332\3\2\2\2\u1341\u1335\3\2\2\2\u1341\u1336\3\2\2\2")
        buf.write("\u1341\u1337\3\2\2\2\u1341\u1339\3\2\2\2\u1341\u133a\3")
        buf.write("\2\2\2\u1341\u133b\3\2\2\2\u1342\u1352\3\2\2\2\u1343\u1344")
        buf.write("\7\u01c4\2\2\u1344\u1346\7\u0172\2\2\u1345\u1347\5\u0130")
        buf.write("\u0099\2\u1346\u1345\3\2\2\2\u1346\u1347\3\2\2\2\u1347")
        buf.write("\u1352\3\2\2\2\u1348\u1349\7\u022e\2\2\u1349\u134f\5\u0210")
        buf.write("\u0109\2\u134a\u134b\7\u00a7\2\2\u134b\u134c\7t\2\2\u134c")
        buf.write("\u1350\7Z\2\2\u134d\u134e\79\2\2\u134e\u1350\7\u0141\2")
        buf.write("\2\u134f\u134a\3\2\2\2\u134f\u134d\3\2\2\2\u134f\u1350")
        buf.write("\3\2\2\2\u1350\u1352\3\2\2\2\u1351\u1341\3\2\2\2\u1351")
        buf.write("\u1343\3\2\2\2\u1351\u1348\3\2\2\2\u1352\u01c9\3\2\2\2")
        buf.write("\u1353\u135b\5\u01d8\u00ed\2\u1354\u1355\7o\2\2\u1355")
        buf.write("\u1358\7\u03b0\2\2\u1356\u1359\5\u020e\u0108\2\u1357\u1359")
        buf.write("\7\b\2\2\u1358\u1356\3\2\2\2\u1358\u1357\3\2\2\2\u1359")
        buf.write("\u135a\3\2\2\2\u135a\u135c\7\u03b1\2\2\u135b\u1354\3\2")
        buf.write("\2\2\u135b\u135c\3\2\2\2\u135c\u1364\3\2\2\2\u135d\u135f")
        buf.write("\t\23\2\2\u135e\u135d\3\2\2\2\u135e\u135f\3\2\2\2\u135f")
        buf.write("\u1360\3\2\2\2\u1360\u1361\7\u03b0\2\2\u1361\u1362\5\u020e")
        buf.write("\u0108\2\u1362\u1363\7\u03b1\2\2\u1363\u1365\3\2\2\2\u1364")
        buf.write("\u135e\3\2\2\2\u1364\u1365\3\2\2\2\u1365\u1368\3\2\2\2")
        buf.write("\u1366\u1367\7C\2\2\u1367\u1369\7\u016c\2\2\u1368\u1366")
        buf.write("\3\2\2\2\u1368\u1369\3\2\2\2\u1369\u01cb\3\2\2\2\u136a")
        buf.write("\u136b\tK\2\2\u136b\u136e\5\u01d8\u00ed\2\u136c\u136f")
        buf.write("\5\u01f0\u00f9\2\u136d\u136f\7\u03bf\2\2\u136e\u136c\3")
        buf.write("\2\2\2\u136e\u136d\3\2\2\2\u136e\u136f\3\2\2\2\u136f\u01cd")
        buf.write("\3\2\2\2\u1370\u1374\tK\2\2\u1371\u1372\tL\2\2\u1372\u1373")
        buf.write("\7\u03a7\2\2\u1373\u1375\tM\2\2\u1374\u1371\3\2\2\2\u1374")
        buf.write("\u1375\3\2\2\2\u1375\u1376\3\2\2\2\u1376\u1377\5\u01d4")
        buf.write("\u00eb\2\u1377\u01cf\3\2\2\2\u1378\u1379\7\u0156\2\2\u1379")
        buf.write("\u137a\7\u03bf\2\2\u137a\u01d1\3\2\2\2\u137b\u137c\7\u00a1")
        buf.write("\2\2\u137c\u137d\5\u01f0\u00f9\2\u137d\u01d3\3\2\2\2\u137e")
        buf.write("\u1384\5\u00aeX\2\u137f\u1384\5\u00a0Q\2\u1380\u1384\5")
        buf.write("\u00a6T\2\u1381\u1384\5\u00acW\2\u1382\u1384\5\u00b0Y")
        buf.write("\2\u1383\u137e\3\2\2\2\u1383\u137f\3\2\2\2\u1383\u1380")
        buf.write("\3\2\2\2\u1383\u1381\3\2\2\2\u1383\u1382\3\2\2\2\u1384")
        buf.write("\u1389\3\2\2\2\u1385\u1386\79\2\2\u1386\u1387\7\u011b")
        buf.write("\2\2\u1387\u1389\5\u01f0\u00f9\2\u1388\u1383\3\2\2\2\u1388")
        buf.write("\u1385\3\2\2\2\u1389\u01d5\3\2\2\2\u138a\u138e\5\u01f0")
        buf.write("\u00f9\2\u138b\u138f\7\u03c6\2\2\u138c\u138d\7\u03af\2")
        buf.write("\2\u138d\u138f\5\u01f0\u00f9\2\u138e\u138b\3\2\2\2\u138e")
        buf.write("\u138c\3\2\2\2\u138e\u138f\3\2\2\2\u138f\u01d7\3\2\2\2")
        buf.write("\u1390\u1391\5\u01d6\u00ec\2\u1391\u01d9\3\2\2\2\u1392")
        buf.write("\u1397\5\u01f0\u00f9\2\u1393\u1395\5\u01f4\u00fb\2\u1394")
        buf.write("\u1396\5\u01f4\u00fb\2\u1395\u1394\3\2\2\2\u1395\u1396")
        buf.write("\3\2\2\2\u1396\u1398\3\2\2\2\u1397\u1393\3\2\2\2\u1397")
        buf.write("\u1398\3\2\2\2\u1398\u01db\3\2\2\2\u1399\u139e\5\u01f0")
        buf.write("\u00f9\2\u139a\u139b\7\u03b0\2\2\u139b\u139c\5\u01f6\u00fc")
        buf.write("\2\u139c\u139d\7\u03b1\2\2\u139d\u139f\3\2\2\2\u139e\u139a")
        buf.write("\3\2\2\2\u139e\u139f\3\2\2\2\u139f\u13a1\3\2\2\2\u13a0")
        buf.write("\u13a2\t(\2\2\u13a1\u13a0\3\2\2\2\u13a1\u13a2\3\2\2\2")
        buf.write("\u13a2\u01dd\3\2\2\2\u13a3\u13a4\7\u03c9\2\2\u13a4\u01df")
        buf.write("\3\2\2\2\u13a5\u13a6\tN\2\2\u13a6\u01e1\3\2\2\2\u13a7")
        buf.write("\u13ac\7\u00bd\2\2\u13a8\u13ac\5\u0244\u0123\2\u13a9\u13ac")
        buf.write("\7\u03bf\2\2\u13aa\u13ac\7\u03bc\2\2\u13ab\u13a7\3\2\2")
        buf.write("\2\u13ab\u13a8\3\2\2\2\u13ab\u13a9\3\2\2\2\u13ab\u13aa")
        buf.write("\3\2\2\2\u13ac\u01e3\3\2\2\2\u13ad\u13b0\5\u01f0\u00f9")
        buf.write("\2\u13ae\u13b0\7\u03bf\2\2\u13af\u13ad\3\2\2\2\u13af\u13ae")
        buf.write("\3\2\2\2\u13b0\u01e5\3\2\2\2\u13b1\u13b2\tO\2\2\u13b2")
        buf.write("\u01e7\3\2\2\2\u13b3\u13b4\5\u01f6\u00fc\2\u13b4\u13b5")
        buf.write("\7\u03a4\2\2\u13b5\u13b6\5\u01f6\u00fc\2\u13b6\u13b7\7")
        buf.write("\u03a4\2\2\u13b7\u13b8\5\u01f6\u00fc\2\u13b8\u13b9\7\u03a4")
        buf.write("\2\2\u13b9\u13ba\5\u01f6\u00fc\2\u13ba\u13bb\7\u03a4\2")
        buf.write("\2\u13bb\u13c1\5\u01f6\u00fc\2\u13bc\u13bd\7\u03bb\2\2")
        buf.write("\u13bd\u13be\5\u01f6\u00fc\2\u13be\u13bf\7\u03a4\2\2\u13bf")
        buf.write("\u13c0\5\u01f6\u00fc\2\u13c0\u13c2\3\2\2\2\u13c1\u13bc")
        buf.write("\3\2\2\2\u13c2\u13c3\3\2\2\2\u13c3\u13c1\3\2\2\2\u13c3")
        buf.write("\u13c4\3\2\2\2\u13c4\u01e9\3\2\2\2\u13c5\u13cc\5\u01ec")
        buf.write("\u00f7\2\u13c6\u13c7\7\u03b2\2\2\u13c7\u13ca\5\u01ec\u00f7")
        buf.write("\2\u13c8\u13c9\7\u03b2\2\2\u13c9\u13cb\5\u01f6\u00fc\2")
        buf.write("\u13ca\u13c8\3\2\2\2\u13ca\u13cb\3\2\2\2\u13cb\u13cd\3")
        buf.write("\2\2\2\u13cc\u13c6\3\2\2\2\u13cc\u13cd\3\2\2\2\u13cd\u01eb")
        buf.write("\3\2\2\2\u13ce\u13d6\7\u03bf\2\2\u13cf\u13d6\7\u03c4\2")
        buf.write("\2\u13d0\u13d2\7\u03c1\2\2\u13d1\u13d0\3\2\2\2\u13d2\u13d3")
        buf.write("\3\2\2\2\u13d3\u13d1\3\2\2\2\u13d3\u13d4\3\2\2\2\u13d4")
        buf.write("\u13d6\3\2\2\2\u13d5\u13ce\3\2\2\2\u13d5\u13cf\3\2\2\2")
        buf.write("\u13d5\u13d1\3\2\2\2\u13d6\u01ed\3\2\2\2\u13d7\u13da\5")
        buf.write("\u01f0\u00f9\2\u13d8\u13da\7\u03bf\2\2\u13d9\u13d7\3\2")
        buf.write("\2\2\u13d9\u13d8\3\2\2\2\u13da\u01ef\3\2\2\2\u13db\u13df")
        buf.write("\5\u01f2\u00fa\2\u13dc\u13df\7\u03c8\2\2\u13dd\u13df\7")
        buf.write("\u03bc\2\2\u13de\u13db\3\2\2\2\u13de\u13dc\3\2\2\2\u13de")
        buf.write("\u13dd\3\2\2\2\u13df\u01f1\3\2\2\2\u13e0\u13ea\7\u03c7")
        buf.write("\2\2\u13e1\u13ea\5\u0244\u0123\2\u13e2\u13ea\5\u0246\u0124")
        buf.write("\2\u13e3\u13ea\5\u01e6\u00f4\2\u13e4\u13ea\5\u0248\u0125")
        buf.write("\2\u13e5\u13ea\5\u024a\u0126\2\u13e6\u13ea\5\u024c\u0127")
        buf.write("\2\u13e7\u13ea\5\u024e\u0128\2\u13e8\u13ea\5\u0250\u0129")
        buf.write("\2\u13e9\u13e0\3\2\2\2\u13e9\u13e1\3\2\2\2\u13e9\u13e2")
        buf.write("\3\2\2\2\u13e9\u13e3\3\2\2\2\u13e9\u13e4\3\2\2\2\u13e9")
        buf.write("\u13e5\3\2\2\2\u13e9\u13e6\3\2\2\2\u13e9\u13e7\3\2\2\2")
        buf.write("\u13e9\u13e8\3\2\2\2\u13ea\u01f3\3\2\2\2\u13eb\u13ef\7")
        buf.write("\u03c6\2\2\u13ec\u13ed\7\u03af\2\2\u13ed\u13ef\5\u01f0")
        buf.write("\u00f9\2\u13ee\u13eb\3\2\2\2\u13ee\u13ec\3\2\2\2\u13ef")
        buf.write("\u01f5\3\2\2\2\u13f0\u13f1\tP\2\2\u13f1\u01f7\3\2\2\2")
        buf.write("\u13f2\u13f5\7\u03bd\2\2\u13f3\u13f5\5\u01f6\u00fc\2\u13f4")
        buf.write("\u13f2\3\2\2\2\u13f4\u13f3\3\2\2\2\u13f5\u01f9\3\2\2\2")
        buf.write("\u13f6\u13f8\7\u03c5\2\2\u13f7\u13f6\3\2\2\2\u13f7\u13f8")
        buf.write("\3\2\2\2\u13f8\u13f9\3\2\2\2\u13f9\u13fc\7\u03bf\2\2\u13fa")
        buf.write("\u13fc\7\u03be\2\2\u13fb\u13f7\3\2\2\2\u13fb\u13fa\3\2")
        buf.write("\2\2\u13fc\u13fe\3\2\2\2\u13fd\u13ff\7\u03bf\2\2\u13fe")
        buf.write("\u13fd\3\2\2\2\u13ff\u1400\3\2\2\2\u1400\u13fe\3\2\2\2")
        buf.write("\u1400\u1401\3\2\2\2\u1401\u140e\3\2\2\2\u1402\u1404\7")
        buf.write("\u03c5\2\2\u1403\u1402\3\2\2\2\u1403\u1404\3\2\2\2\u1404")
        buf.write("\u1405\3\2\2\2\u1405\u1408\7\u03bf\2\2\u1406\u1408\7\u03be")
        buf.write("\2\2\u1407\u1403\3\2\2\2\u1407\u1406\3\2\2\2\u1408\u140b")
        buf.write("\3\2\2\2\u1409\u140a\7\31\2\2\u140a\u140c\5\u01e4\u00f3")
        buf.write("\2\u140b\u1409\3\2\2\2\u140b\u140c\3\2\2\2\u140c\u140e")
        buf.write("\3\2\2\2\u140d\u13fb\3\2\2\2\u140d\u1407\3\2\2\2\u140e")
        buf.write("\u01fb\3\2\2\2\u140f\u1410\tQ\2\2\u1410\u01fd\3\2\2\2")
        buf.write("\u1411\u1413\7\u03c5\2\2\u1412\u1411\3\2\2\2\u1412\u1413")
        buf.write("\3\2\2\2\u1413\u1414\3\2\2\2\u1414\u1415\7\u03c1\2\2\u1415")
        buf.write("\u01ff\3\2\2\2\u1416\u1418\7c\2\2\u1417\u1416\3\2\2\2")
        buf.write("\u1417\u1418\3\2\2\2\u1418\u1419\3\2\2\2\u1419\u141a\t")
        buf.write("R\2\2\u141a\u0201\3\2\2\2\u141b\u1426\5\u01fa\u00fe\2")
        buf.write("\u141c\u1426\5\u01f6\u00fc\2\u141d\u1426\5\u01fe\u0100")
        buf.write("\2\u141e\u1426\5\u01fc\u00ff\2\u141f\u1426\7\u03c2\2\2")
        buf.write("\u1420\u1426\7\u03c4\2\2\u1421\u1423\7c\2\2\u1422\u1421")
        buf.write("\3\2\2\2\u1422\u1423\3\2\2\2\u1423\u1424\3\2\2\2\u1424")
        buf.write("\u1426\tR\2\2\u1425\u141b\3\2\2\2\u1425\u141c\3\2\2\2")
        buf.write("\u1425\u141d\3\2\2\2\u1425\u141e\3\2\2\2\u1425\u141f\3")
        buf.write("\2\2\2\u1425\u1420\3\2\2\2\u1425\u1422\3\2\2\2\u1426\u0203")
        buf.write("\3\2\2\2\u1427\u1429\tS\2\2\u1428\u142a\5\u0208\u0105")
        buf.write("\2\u1429\u1428\3\2\2\2\u1429\u142a\3\2\2\2\u142a\u142c")
        buf.write("\3\2\2\2\u142b\u142d\7\u00bd\2\2\u142c\u142b\3\2\2\2\u142c")
        buf.write("\u142d\3\2\2\2\u142d\u1431\3\2\2\2\u142e\u142f\7\27\2")
        buf.write("\2\u142f\u1430\7\u0085\2\2\u1430\u1432\5\u01e2\u00f2\2")
        buf.write("\u1431\u142e\3\2\2\2\u1431\u1432\3\2\2\2\u1432\u1435\3")
        buf.write("\2\2\2\u1433\u1434\7\31\2\2\u1434\u1436\5\u01e4\u00f3")
        buf.write("\2\u1435\u1433\3\2\2\2\u1435\u1436\3\2\2\2\u1436\u1473")
        buf.write("\3\2\2\2\u1437\u1439\tT\2\2\u1438\u143a\5\u0208\u0105")
        buf.write("\2\u1439\u1438\3\2\2\2\u1439\u143a\3\2\2\2\u143a\u143c")
        buf.write("\3\2\2\2\u143b\u143d\7\u009e\2\2\u143c\u143b\3\2\2\2\u143c")
        buf.write("\u143d\3\2\2\2\u143d\u143f\3\2\2\2\u143e\u1440\7\u00aa")
        buf.write("\2\2\u143f\u143e\3\2\2\2\u143f\u1440\3\2\2\2\u1440\u1473")
        buf.write("\3\2\2\2\u1441\u1443\tU\2\2\u1442\u1444\5\u020a\u0106")
        buf.write("\2\u1443\u1442\3\2\2\2\u1443\u1444\3\2\2\2\u1444\u1446")
        buf.write("\3\2\2\2\u1445\u1447\7\u009e\2\2\u1446\u1445\3\2\2\2\u1446")
        buf.write("\u1447\3\2\2\2\u1447\u1449\3\2\2\2\u1448\u144a\7\u00aa")
        buf.write("\2\2\u1449\u1448\3\2\2\2\u1449\u144a\3\2\2\2\u144a\u1473")
        buf.write("\3\2\2\2\u144b\u144d\tV\2\2\u144c\u144e\5\u020c\u0107")
        buf.write("\2\u144d\u144c\3\2\2\2\u144d\u144e\3\2\2\2\u144e\u1450")
        buf.write("\3\2\2\2\u144f\u1451\7\u009e\2\2\u1450\u144f\3\2\2\2\u1450")
        buf.write("\u1451\3\2\2\2\u1451\u1453\3\2\2\2\u1452\u1454\7\u00aa")
        buf.write("\2\2\u1453\u1452\3\2\2\2\u1453\u1454\3\2\2\2\u1454\u1473")
        buf.write("\3\2\2\2\u1455\u1473\tW\2\2\u1456\u1458\tX\2\2\u1457\u1459")
        buf.write("\5\u0208\u0105\2\u1458\u1457\3\2\2\2\u1458\u1459\3\2\2")
        buf.write("\2\u1459\u1473\3\2\2\2\u145a\u145b\tY\2\2\u145b\u145c")
        buf.write("\7\u03b0\2\2\u145c\u1461\7\u03bf\2\2\u145d\u145e\7\u03b2")
        buf.write("\2\2\u145e\u1460\7\u03bf\2\2\u145f\u145d\3\2\2\2\u1460")
        buf.write("\u1463\3\2\2\2\u1461\u145f\3\2\2\2\u1461\u1462\3\2\2\2")
        buf.write("\u1462\u1464\3\2\2\2\u1463\u1461\3\2\2\2\u1464\u1466\7")
        buf.write("\u03b1\2\2\u1465\u1467\7\u00bd\2\2\u1466\u1465\3\2\2\2")
        buf.write("\u1466\u1467\3\2\2\2\u1467\u146b\3\2\2\2\u1468\u1469\7")
        buf.write("\27\2\2\u1469\u146a\7\u0085\2\2\u146a\u146c\5\u01e2\u00f2")
        buf.write("\2\u146b\u1468\3\2\2\2\u146b\u146c\3\2\2\2\u146c\u146f")
        buf.write("\3\2\2\2\u146d\u146e\7\31\2\2\u146e\u1470\5\u01e4\u00f3")
        buf.write("\2\u146f\u146d\3\2\2\2\u146f\u1470\3\2\2\2\u1470\u1473")
        buf.write("\3\2\2\2\u1471\u1473\tZ\2\2\u1472\u1427\3\2\2\2\u1472")
        buf.write("\u1437\3\2\2\2\u1472\u1441\3\2\2\2\u1472\u144b\3\2\2\2")
        buf.write("\u1472\u1455\3\2\2\2\u1472\u1456\3\2\2\2\u1472\u145a\3")
        buf.write("\2\2\2\u1472\u1471\3\2\2\2\u1473\u0205\3\2\2\2\u1474\u1476")
        buf.write("\t[\2\2\u1475\u1477\5\u0208\u0105\2\u1476\u1475\3\2\2")
        buf.write("\2\u1476\u1477\3\2\2\2\u1477\u148b\3\2\2\2\u1478\u147a")
        buf.write("\7\u00bb\2\2\u1479\u147b\5\u0208\u0105\2\u147a\u1479\3")
        buf.write("\2\2\2\u147a\u147b\3\2\2\2\u147b\u147f\3\2\2\2\u147c\u147d")
        buf.write("\7\27\2\2\u147d\u147e\7\u0085\2\2\u147e\u1480\5\u01e2")
        buf.write("\u00f2\2\u147f\u147c\3\2\2\2\u147f\u1480\3\2\2\2\u1480")
        buf.write("\u148b\3\2\2\2\u1481\u148b\t\\\2\2\u1482\u1484\7\u00b4")
        buf.write("\2\2\u1483\u1485\5\u020a\u0106\2\u1484\u1483\3\2\2\2\u1484")
        buf.write("\u1485\3\2\2\2\u1485\u148b\3\2\2\2\u1486\u1488\t]\2\2")
        buf.write("\u1487\u1489\7\u00af\2\2\u1488\u1487\3\2\2\2\u1488\u1489")
        buf.write("\3\2\2\2\u1489\u148b\3\2\2\2\u148a\u1474\3\2\2\2\u148a")
        buf.write("\u1478\3\2\2\2\u148a\u1481\3\2\2\2\u148a\u1482\3\2\2\2")
        buf.write("\u148a\u1486\3\2\2\2\u148b\u0207\3\2\2\2\u148c\u148d\7")
        buf.write("\u03b0\2\2\u148d\u148e\5\u01f6\u00fc\2\u148e\u148f\7\u03b1")
        buf.write("\2\2\u148f\u0209\3\2\2\2\u1490\u1491\7\u03b0\2\2\u1491")
        buf.write("\u1492\5\u01f6\u00fc\2\u1492\u1493\7\u03b2\2\2\u1493\u1494")
        buf.write("\5\u01f6\u00fc\2\u1494\u1495\7\u03b1\2\2\u1495\u020b\3")
        buf.write("\2\2\2\u1496\u1497\7\u03b0\2\2\u1497\u149a\5\u01f6\u00fc")
        buf.write("\2\u1498\u1499\7\u03b2\2\2\u1499\u149b\5\u01f6\u00fc\2")
        buf.write("\u149a\u1498\3\2\2\2\u149a\u149b\3\2\2\2\u149b\u149c\3")
        buf.write("\2\2\2\u149c\u149d\7\u03b1\2\2\u149d\u020d\3\2\2\2\u149e")
        buf.write("\u14a3\5\u01f0\u00f9\2\u149f\u14a0\7\u03b2\2\2\u14a0\u14a2")
        buf.write("\5\u01f0\u00f9\2\u14a1\u149f\3\2\2\2\u14a2\u14a5\3\2\2")
        buf.write("\2\u14a3\u14a1\3\2\2\2\u14a3\u14a4\3\2\2\2\u14a4\u020f")
        buf.write("\3\2\2\2\u14a5\u14a3\3\2\2\2\u14a6\u14ab\5\u01d8\u00ed")
        buf.write("\2\u14a7\u14a8\7\u03b2\2\2\u14a8\u14aa\5\u01d8\u00ed\2")
        buf.write("\u14a9\u14a7\3\2\2\2\u14aa\u14ad\3\2\2\2\u14ab\u14a9\3")
        buf.write("\2\2\2\u14ab\u14ac\3\2\2\2\u14ac\u0211\3\2\2\2\u14ad\u14ab")
        buf.write("\3\2\2\2\u14ae\u14af\7\u03b0\2\2\u14af\u14b0\5\u01d8\u00ed")
        buf.write("\2\u14b0\u14b1\7\u03b2\2\2\u14b1\u14b2\5\u01d8\u00ed\2")
        buf.write("\u14b2\u14bc\7\u03b1\2\2\u14b3\u14b4\7\u03b2\2\2\u14b4")
        buf.write("\u14b5\7\u03b0\2\2\u14b5\u14b6\5\u01d8\u00ed\2\u14b6\u14b7")
        buf.write("\7\u03b2\2\2\u14b7\u14b8\5\u01d8\u00ed\2\u14b8\u14b9\7")
        buf.write("\u03b1\2\2\u14b9\u14bb\3\2\2\2\u14ba\u14b3\3\2\2\2\u14bb")
        buf.write("\u14be\3\2\2\2\u14bc\u14ba\3\2\2\2\u14bc\u14bd\3\2\2\2")
        buf.write("\u14bd\u0213\3\2\2\2\u14be\u14bc\3\2\2\2\u14bf\u14c0\7")
        buf.write("\u03b0\2\2\u14c0\u14c5\5\u01dc\u00ef\2\u14c1\u14c2\7\u03b2")
        buf.write("\2\2\u14c2\u14c4\5\u01dc\u00ef\2\u14c3\u14c1\3\2\2\2\u14c4")
        buf.write("\u14c7\3\2\2\2\u14c5\u14c3\3\2\2\2\u14c5\u14c6\3\2\2\2")
        buf.write("\u14c6\u14c8\3\2\2\2\u14c7\u14c5\3\2\2\2\u14c8\u14c9\7")
        buf.write("\u03b1\2\2\u14c9\u0215\3\2\2\2\u14ca\u14cf\5\u0234\u011b")
        buf.write("\2\u14cb\u14cc\7\u03b2\2\2\u14cc\u14ce\5\u0234\u011b\2")
        buf.write("\u14cd\u14cb\3\2\2\2\u14ce\u14d1\3\2\2\2\u14cf\u14cd\3")
        buf.write("\2\2\2\u14cf\u14d0\3\2\2\2\u14d0\u0217\3\2\2\2\u14d1\u14cf")
        buf.write("\3\2\2\2\u14d2\u14d7\5\u0202\u0102\2\u14d3\u14d4\7\u03b2")
        buf.write("\2\2\u14d4\u14d6\5\u0202\u0102\2\u14d5\u14d3\3\2\2\2\u14d6")
        buf.write("\u14d9\3\2\2\2\u14d7\u14d5\3\2\2\2\u14d7\u14d8\3\2\2\2")
        buf.write("\u14d8\u0219\3\2\2\2\u14d9\u14d7\3\2\2\2\u14da\u14df\7")
        buf.write("\u03bf\2\2\u14db\u14dc\7\u03b2\2\2\u14dc\u14de\7\u03bf")
        buf.write("\2\2\u14dd\u14db\3\2\2\2\u14de\u14e1\3\2\2\2\u14df\u14dd")
        buf.write("\3\2\2\2\u14df\u14e0\3\2\2\2\u14e0\u021b\3\2\2\2\u14e1")
        buf.write("\u14df\3\2\2\2\u14e2\u14e7\7\u03ca\2\2\u14e3\u14e4\7\u03b2")
        buf.write("\2\2\u14e4\u14e6\7\u03ca\2\2\u14e5\u14e3\3\2\2\2\u14e6")
        buf.write("\u14e9\3\2\2\2\u14e7\u14e5\3\2\2\2\u14e7\u14e8\3\2\2\2")
        buf.write("\u14e8\u021d\3\2\2\2\u14e9\u14e7\3\2\2\2\u14ea\u14ed\7")
        buf.write("e\2\2\u14eb\u14ed\5\u0202\u0102\2\u14ec\u14ea\3\2\2\2")
        buf.write("\u14ec\u14eb\3\2\2\2\u14ed\u021f\3\2\2\2\u14ee\u14ef\7")
        buf.write("B\2\2\u14ef\u14f0\7\64\2\2\u14f0\u0221\3\2\2\2\u14f1\u14f2")
        buf.write("\7B\2\2\u14f2\u14f3\7c\2\2\u14f3\u14f4\7\64\2\2\u14f4")
        buf.write("\u0223\3\2\2\2\u14f5\u1507\5\u0226\u0114\2\u14f6\u1507")
        buf.write("\5\u022a\u0116\2\u14f7\u14f8\5\u022c\u0117\2\u14f8\u14fa")
        buf.write("\7\u03b0\2\2\u14f9\u14fb\5\u0230\u0119\2\u14fa\u14f9\3")
        buf.write("\2\2\2\u14fa\u14fb\3\2\2\2\u14fb\u14fc\3\2\2\2\u14fc\u14fd")
        buf.write("\7\u03b1\2\2\u14fd\u1507\3\2\2\2\u14fe\u14ff\5\u01d6\u00ec")
        buf.write("\2\u14ff\u1501\7\u03b0\2\2\u1500\u1502\5\u0230\u0119\2")
        buf.write("\u1501\u1500\3\2\2\2\u1501\u1502\3\2\2\2\u1502\u1503\3")
        buf.write("\2\2\2\u1503\u1504\7\u03b1\2\2\u1504\u1507\3\2\2\2\u1505")
        buf.write("\u1507\5\u022e\u0118\2\u1506\u14f5\3\2\2\2\u1506\u14f6")
        buf.write("\3\2\2\2\u1506\u14f7\3\2\2\2\u1506\u14fe\3\2\2\2\u1506")
        buf.write("\u1505\3\2\2\2\u1507\u0225\3\2\2\2\u1508\u15ae\t^\2\2")
        buf.write("\u1509\u150a\7\36\2\2\u150a\u150b\7\u03b0\2\2\u150b\u150c")
        buf.write("\5\u0234\u011b\2\u150c\u150d\7\u03b2\2\2\u150d\u150e\5")
        buf.write("\u0206\u0104\2\u150e\u150f\7\u03b1\2\2\u150f\u15ae\3\2")
        buf.write("\2\2\u1510\u1511\7\36\2\2\u1511\u1512\7\u03b0\2\2\u1512")
        buf.write("\u1513\5\u0234\u011b\2\u1513\u1514\7\u00a2\2\2\u1514\u1515")
        buf.write("\5\u01e2\u00f2\2\u1515\u1516\7\u03b1\2\2\u1516\u15ae\3")
        buf.write("\2\2\2\u1517\u1518\7\25\2\2\u1518\u1519\7\u03b0\2\2\u1519")
        buf.write("\u151a\5\u0234\u011b\2\u151a\u151b\7\f\2\2\u151b\u151c")
        buf.write("\5\u0206\u0104\2\u151c\u151d\7\u03b1\2\2\u151d\u15ae\3")
        buf.write("\2\2\2\u151e\u151f\7\u00a3\2\2\u151f\u1520\7\u03b0\2\2")
        buf.write("\u1520\u1521\5\u01da\u00ee\2\u1521\u1522\7\u03b1\2\2\u1522")
        buf.write("\u15ae\3\2\2\2\u1523\u1524\7\24\2\2\u1524\u152a\5\u0234")
        buf.write("\u011b\2\u1525\u1526\7\u00a4\2\2\u1526\u1527\5\u0232\u011a")
        buf.write("\2\u1527\u1528\7\u0095\2\2\u1528\u1529\5\u0232\u011a\2")
        buf.write("\u1529\u152b\3\2\2\2\u152a\u1525\3\2\2\2\u152b\u152c\3")
        buf.write("\2\2\2\u152c\u152a\3\2\2\2\u152c\u152d\3\2\2\2\u152d\u1530")
        buf.write("\3\2\2\2\u152e\u152f\7\60\2\2\u152f\u1531\5\u0232\u011a")
        buf.write("\2\u1530\u152e\3\2\2\2\u1530\u1531\3\2\2\2\u1531\u1532")
        buf.write("\3\2\2\2\u1532\u1533\7\u0133\2\2\u1533\u15ae\3\2\2\2\u1534")
        buf.write("\u153a\7\24\2\2\u1535\u1536\7\u00a4\2\2\u1536\u1537\5")
        buf.write("\u0232\u011a\2\u1537\u1538\7\u0095\2\2\u1538\u1539\5\u0232")
        buf.write("\u011a\2\u1539\u153b\3\2\2\2\u153a\u1535\3\2\2\2\u153b")
        buf.write("\u153c\3\2\2\2\u153c\u153a\3\2\2\2\u153c\u153d\3\2\2\2")
        buf.write("\u153d\u1540\3\2\2\2\u153e\u153f\7\60\2\2\u153f\u1541")
        buf.write("\5\u0232\u011a\2\u1540\u153e\3\2\2\2\u1540\u1541\3\2\2")
        buf.write("\2\u1541\u1542\3\2\2\2\u1542\u1543\7\u0133\2\2\u1543\u15ae")
        buf.write("\3\2\2\2\u1544\u1545\7\u00bb\2\2\u1545\u1546\7\u03b0\2")
        buf.write("\2\u1546\u1549\5\u0230\u0119\2\u1547\u1548\7\u00a2\2\2")
        buf.write("\u1548\u154a\5\u01e2\u00f2\2\u1549\u1547\3\2\2\2\u1549")
        buf.write("\u154a\3\2\2\2\u154a\u154b\3\2\2\2\u154b\u154c\7\u03b1")
        buf.write("\2\2\u154c\u15ae\3\2\2\2\u154d\u154e\7\u00ee\2\2\u154e")
        buf.write("\u1551\7\u03b0\2\2\u154f\u1552\5\u01fa\u00fe\2\u1550\u1552")
        buf.write("\5\u0234\u011b\2\u1551\u154f\3\2\2\2\u1551\u1550\3\2\2")
        buf.write("\2\u1552\u1553\3\2\2\2\u1553\u1556\7D\2\2\u1554\u1557")
        buf.write("\5\u01fa\u00fe\2\u1555\u1557\5\u0234\u011b\2\u1556\u1554")
        buf.write("\3\2\2\2\u1556\u1555\3\2\2\2\u1557\u1558\3\2\2\2\u1558")
        buf.write("\u1559\7\u03b1\2\2\u1559\u15ae\3\2\2\2\u155a\u155b\t_")
        buf.write("\2\2\u155b\u155e\7\u03b0\2\2\u155c\u155f\5\u01fa\u00fe")
        buf.write("\2\u155d\u155f\5\u0234\u011b\2\u155e\u155c\3\2\2\2\u155e")
        buf.write("\u155d\3\2\2\2\u155f\u1560\3\2\2\2\u1560\u1563\7<\2\2")
        buf.write("\u1561\u1564\5\u01f6\u00fc\2\u1562\u1564\5\u0234\u011b")
        buf.write("\2\u1563\u1561\3\2\2\2\u1563\u1562\3\2\2\2\u1564\u156a")
        buf.write("\3\2\2\2\u1565\u1568\79\2\2\u1566\u1569\5\u01f6\u00fc")
        buf.write("\2\u1567\u1569\5\u0234\u011b\2\u1568\u1566\3\2\2\2\u1568")
        buf.write("\u1567\3\2\2\2\u1569\u156b\3\2\2\2\u156a\u1565\3\2\2\2")
        buf.write("\u156a\u156b\3\2\2\2\u156b\u156c\3\2\2\2\u156c\u156d\7")
        buf.write("\u03b1\2\2\u156d\u15ae\3\2\2\2\u156e\u156f\7\u00f2\2\2")
        buf.write("\u156f\u1570\7\u03b0\2\2\u1570\u1573\t`\2\2\u1571\u1574")
        buf.write("\5\u01fa\u00fe\2\u1572\u1574\5\u0234\u011b\2\u1573\u1571")
        buf.write("\3\2\2\2\u1573\u1572\3\2\2\2\u1573\u1574\3\2\2\2\u1574")
        buf.write("\u1575\3\2\2\2\u1575\u1578\7<\2\2\u1576\u1579\5\u01fa")
        buf.write("\u00fe\2\u1577\u1579\5\u0234\u011b\2\u1578\u1576\3\2\2")
        buf.write("\2\u1578\u1577\3\2\2\2\u1579\u157a\3\2\2\2\u157a\u157b")
        buf.write("\7\u03b1\2\2\u157b\u15ae\3\2\2\2\u157c\u157d\7\u00f2\2")
        buf.write("\2\u157d\u1580\7\u03b0\2\2\u157e\u1581\5\u01fa\u00fe\2")
        buf.write("\u157f\u1581\5\u0234\u011b\2\u1580\u157e\3\2\2\2\u1580")
        buf.write("\u157f\3\2\2\2\u1581\u1582\3\2\2\2\u1582\u1585\7<\2\2")
        buf.write("\u1583\u1586\5\u01fa\u00fe\2\u1584\u1586\5\u0234\u011b")
        buf.write("\2\u1585\u1583\3\2\2\2\u1585\u1584\3\2\2\2\u1586\u1587")
        buf.write("\3\2\2\2\u1587\u1588\7\u03b1\2\2\u1588\u15ae\3\2\2\2\u1589")
        buf.write("\u158a\7\u0392\2\2\u158a\u158d\7\u03b0\2\2\u158b\u158e")
        buf.write("\5\u01fa\u00fe\2\u158c\u158e\5\u0234\u011b\2\u158d\u158b")
        buf.write("\3\2\2\2\u158d\u158c\3\2\2\2\u158e\u1595\3\2\2\2\u158f")
        buf.write("\u1590\7\f\2\2\u1590\u1591\ta\2\2\u1591\u1592\7\u03b0")
        buf.write("\2\2\u1592\u1593\5\u01f6\u00fc\2\u1593\u1594\7\u03b1\2")
        buf.write("\2\u1594\u1596\3\2\2\2\u1595\u158f\3\2\2\2\u1595\u1596")
        buf.write("\3\2\2\2\u1596\u1598\3\2\2\2\u1597\u1599\5\u0228\u0115")
        buf.write("\2\u1598\u1597\3\2\2\2\u1598\u1599\3\2\2\2\u1599\u159a")
        buf.write("\3\2\2\2\u159a\u159b\7\u03b1\2\2\u159b\u15ae\3\2\2\2\u159c")
        buf.write("\u159d\7\u00eb\2\2\u159d\u159e\7\u03b0\2\2\u159e\u159f")
        buf.write("\5<\37\2\u159f\u15a2\7<\2\2\u15a0\u15a3\5\u01fa\u00fe")
        buf.write("\2\u15a1\u15a3\5\u0234\u011b\2\u15a2\u15a0\3\2\2\2\u15a2")
        buf.write("\u15a1\3\2\2\2\u15a3\u15a4\3\2\2\2\u15a4\u15a5\7\u03b1")
        buf.write("\2\2\u15a5\u15ae\3\2\2\2\u15a6\u15a7\7\u02cb\2\2\u15a7")
        buf.write("\u15a8\7\u03b0\2\2\u15a8\u15a9\t\\\2\2\u15a9\u15aa\7\u03b2")
        buf.write("\2\2\u15aa\u15ab\5\u01fa\u00fe\2\u15ab\u15ac\7\u03b1\2")
        buf.write("\2\u15ac\u15ae\3\2\2\2\u15ad\u1508\3\2\2\2\u15ad\u1509")
        buf.write("\3\2\2\2\u15ad\u1510\3\2\2\2\u15ad\u1517\3\2\2\2\u15ad")
        buf.write("\u151e\3\2\2\2\u15ad\u1523\3\2\2\2\u15ad\u1534\3\2\2\2")
        buf.write("\u15ad\u1544\3\2\2\2\u15ad\u154d\3\2\2\2\u15ad\u155a\3")
        buf.write("\2\2\2\u15ad\u156e\3\2\2\2\u15ad\u157c\3\2\2\2\u15ad\u1589")
        buf.write("\3\2\2\2\u15ad\u159c\3\2\2\2\u15ad\u15a6\3\2\2\2\u15ae")
        buf.write("\u0227\3\2\2\2\u15af\u15b0\7\u016e\2\2\u15b0\u15b2\5\u01f6")
        buf.write("\u00fc\2\u15b1\u15b3\tb\2\2\u15b2\u15b1\3\2\2\2\u15b2")
        buf.write("\u15b3\3\2\2\2\u15b3\u15bb\3\2\2\2\u15b4\u15b5\7\u03b2")
        buf.write("\2\2\u15b5\u15b7\5\u01f6\u00fc\2\u15b6\u15b8\tb\2\2\u15b7")
        buf.write("\u15b6\3\2\2\2\u15b7\u15b8\3\2\2\2\u15b8\u15ba\3\2\2\2")
        buf.write("\u15b9\u15b4\3\2\2\2\u15ba\u15bd\3\2\2\2\u15bb\u15b9\3")
        buf.write("\2\2\2\u15bb\u15bc\3\2\2\2\u15bc\u15c4\3\2\2\2\u15bd\u15bb")
        buf.write("\3\2\2\2\u15be\u15bf\7\u016e\2\2\u15bf\u15c0\5\u01f6\u00fc")
        buf.write("\2\u15c0\u15c1\7\u03a4\2\2\u15c1\u15c2\5\u01f6\u00fc\2")
        buf.write("\u15c2\u15c4\3\2\2\2\u15c3\u15af\3\2\2\2\u15c3\u15be\3")
        buf.write("\2\2\2\u15c4\u0229\3\2\2\2\u15c5\u15c6\tc\2\2\u15c6\u15c8")
        buf.write("\7\u03b0\2\2\u15c7\u15c9\t$\2\2\u15c8\u15c7\3\2\2\2\u15c8")
        buf.write("\u15c9\3\2\2\2\u15c9\u15ca\3\2\2\2\u15ca\u15cb\5\u0232")
        buf.write("\u011a\2\u15cb\u15cc\7\u03b1\2\2\u15cc\u15fe\3\2\2\2\u15cd")
        buf.write("\u15ce\7\u00d7\2\2\u15ce\u15d4\7\u03b0\2\2\u15cf\u15d5")
        buf.write("\7\u03a0\2\2\u15d0\u15d2\7\b\2\2\u15d1\u15d0\3\2\2\2\u15d1")
        buf.write("\u15d2\3\2\2\2\u15d2\u15d3\3\2\2\2\u15d3\u15d5\5\u0232")
        buf.write("\u011a\2\u15d4\u15cf\3\2\2\2\u15d4\u15d1\3\2\2\2\u15d5")
        buf.write("\u15d6\3\2\2\2\u15d6\u15fe\7\u03b1\2\2\u15d7\u15d8\7\u00d7")
        buf.write("\2\2\u15d8\u15d9\7\u03b0\2\2\u15d9\u15da\7,\2\2\u15da")
        buf.write("\u15db\5\u0230\u0119\2\u15db\u15dc\7\u03b1\2\2\u15dc\u15fe")
        buf.write("\3\2\2\2\u15dd\u15de\td\2\2\u15de\u15e0\7\u03b0\2\2\u15df")
        buf.write("\u15e1\7\b\2\2\u15e0\u15df\3\2\2\2\u15e0\u15e1\3\2\2\2")
        buf.write("\u15e1\u15e2\3\2\2\2\u15e2\u15e3\5\u0232\u011a\2\u15e3")
        buf.write("\u15e4\7\u03b1\2\2\u15e4\u15fe\3\2\2\2\u15e5\u15e6\7\u00d8")
        buf.write("\2\2\u15e6\u15e8\7\u03b0\2\2\u15e7\u15e9\7,\2\2\u15e8")
        buf.write("\u15e7\3\2\2\2\u15e8\u15e9\3\2\2\2\u15e9\u15ea\3\2\2\2")
        buf.write("\u15ea\u15f5\5\u0230\u0119\2\u15eb\u15ec\7k\2\2\u15ec")
        buf.write("\u15ed\7\21\2\2\u15ed\u15f2\5\u00ccg\2\u15ee\u15ef\7\u03b2")
        buf.write("\2\2\u15ef\u15f1\5\u00ccg\2\u15f0\u15ee\3\2\2\2\u15f1")
        buf.write("\u15f4\3\2\2\2\u15f2\u15f0\3\2\2\2\u15f2\u15f3\3\2\2\2")
        buf.write("\u15f3\u15f6\3\2\2\2\u15f4\u15f2\3\2\2\2\u15f5\u15eb\3")
        buf.write("\2\2\2\u15f5\u15f6\3\2\2\2\u15f6\u15f9\3\2\2\2\u15f7\u15f8")
        buf.write("\7\u0086\2\2\u15f8\u15fa\7\u03bf\2\2\u15f9\u15f7\3\2\2")
        buf.write("\2\u15f9\u15fa\3\2\2\2\u15fa\u15fb\3\2\2\2\u15fb\u15fc")
        buf.write("\7\u03b1\2\2\u15fc\u15fe\3\2\2\2\u15fd\u15c5\3\2\2\2\u15fd")
        buf.write("\u15cd\3\2\2\2\u15fd\u15d7\3\2\2\2\u15fd\u15dd\3\2\2\2")
        buf.write("\u15fd\u15e5\3\2\2\2\u15fe\u022b\3\2\2\2\u15ff\u1616\5")
        buf.write("\u0250\u0129\2\u1600\u1616\7\u0238\2\2\u1601\u1616\7\u00e7")
        buf.write("\2\2\u1602\u1616\7\u00e3\2\2\u1603\u1616\7\u00e4\2\2\u1604")
        buf.write("\u1616\7\u00e5\2\2\u1605\u1616\7\u00e8\2\2\u1606\u1616")
        buf.write("\7\u00e9\2\2\u1607\u1616\7\u00ea\2\2\u1608\u1616\7B\2")
        buf.write("\2\u1609\u1616\7\u00e6\2\2\u160a\u1616\7\u00ec\2\2\u160b")
        buf.write("\u1616\7\u0190\2\2\u160c\u1616\7\u00ed\2\2\u160d\u1616")
        buf.write("\7{\2\2\u160e\u1616\7\u00ef\2\2\u160f\u1616\7\u00f0\2")
        buf.write("\2\u1610\u1616\7\u00f1\2\2\u1611\u1616\7\u00f2\2\2\u1612")
        buf.write("\u1616\7\u00f3\2\2\u1613\u1616\7\u00f4\2\2\u1614\u1616")
        buf.write("\7\u00f5\2\2\u1615\u15ff\3\2\2\2\u1615\u1600\3\2\2\2\u1615")
        buf.write("\u1601\3\2\2\2\u1615\u1602\3\2\2\2\u1615\u1603\3\2\2\2")
        buf.write("\u1615\u1604\3\2\2\2\u1615\u1605\3\2\2\2\u1615\u1606\3")
        buf.write("\2\2\2\u1615\u1607\3\2\2\2\u1615\u1608\3\2\2\2\u1615\u1609")
        buf.write("\3\2\2\2\u1615\u160a\3\2\2\2\u1615\u160b\3\2\2\2\u1615")
        buf.write("\u160c\3\2\2\2\u1615\u160d\3\2\2\2\u1615\u160e\3\2\2\2")
        buf.write("\u1615\u160f\3\2\2\2\u1615\u1610\3\2\2\2\u1615\u1611\3")
        buf.write("\2\2\2\u1615\u1612\3\2\2\2\u1615\u1613\3\2\2\2\u1615\u1614")
        buf.write("\3\2\2\2\u1616\u022d\3\2\2\2\u1617\u1618\te\2\2\u1618")
        buf.write("\u1619\7\u03b0\2\2\u1619\u161a\5\u0232\u011a\2\u161a\u161b")
        buf.write("\7\u03b1\2\2\u161b\u022f\3\2\2\2\u161c\u1621\5\u0202\u0102")
        buf.write("\2\u161d\u1621\5\u01da\u00ee\2\u161e\u1621\5\u0224\u0113")
        buf.write("\2\u161f\u1621\5\u0234\u011b\2\u1620\u161c\3\2\2\2\u1620")
        buf.write("\u161d\3\2\2\2\u1620\u161e\3\2\2\2\u1620\u161f\3\2\2\2")
        buf.write("\u1621\u162b\3\2\2\2\u1622\u1627\7\u03b2\2\2\u1623\u1628")
        buf.write("\5\u0202\u0102\2\u1624\u1628\5\u01da\u00ee\2\u1625\u1628")
        buf.write("\5\u0224\u0113\2\u1626\u1628\5\u0234\u011b\2\u1627\u1623")
        buf.write("\3\2\2\2\u1627\u1624\3\2\2\2\u1627\u1625\3\2\2\2\u1627")
        buf.write("\u1626\3\2\2\2\u1628\u162a\3\2\2\2\u1629\u1622\3\2\2\2")
        buf.write("\u162a\u162d\3\2\2\2\u162b\u1629\3\2\2\2\u162b\u162c\3")
        buf.write("\2\2\2\u162c\u0231\3\2\2\2\u162d\u162b\3\2\2\2\u162e\u1633")
        buf.write("\5\u0202\u0102\2\u162f\u1633\5\u01da\u00ee\2\u1630\u1633")
        buf.write("\5\u0224\u0113\2\u1631\u1633\5\u0234\u011b\2\u1632\u162e")
        buf.write("\3\2\2\2\u1632\u162f\3\2\2\2\u1632\u1630\3\2\2\2\u1632")
        buf.write("\u1631\3\2\2\2\u1633\u0233\3\2\2\2\u1634\u1635\b\u011b")
        buf.write("\1\2\u1635\u1636\tf\2\2\u1636\u1640\5\u0234\u011b\6\u1637")
        buf.write("\u1638\5\u0236\u011c\2\u1638\u163a\7L\2\2\u1639\u163b")
        buf.write("\7c\2\2\u163a\u1639\3\2\2\2\u163a\u163b\3\2\2\2\u163b")
        buf.write("\u163c\3\2\2\2\u163c\u163d\tg\2\2\u163d\u1640\3\2\2\2")
        buf.write("\u163e\u1640\5\u0236\u011c\2\u163f\u1634\3\2\2\2\u163f")
        buf.write("\u1637\3\2\2\2\u163f\u163e\3\2\2\2\u1640\u1647\3\2\2\2")
        buf.write("\u1641\u1642\f\5\2\2\u1642\u1643\5\u023e\u0120\2\u1643")
        buf.write("\u1644\5\u0234\u011b\6\u1644\u1646\3\2\2\2\u1645\u1641")
        buf.write("\3\2\2\2\u1646\u1649\3\2\2\2\u1647\u1645\3\2\2\2\u1647")
        buf.write("\u1648\3\2\2\2\u1648\u0235\3\2\2\2\u1649\u1647\3\2\2\2")
        buf.write("\u164a\u164d\b\u011c\1\2\u164b\u164c\7\u03ca\2\2\u164c")
        buf.write("\u164e\7\u0397\2\2\u164d\u164b\3\2\2\2\u164d\u164e\3\2")
        buf.write("\2\2\u164e\u164f\3\2\2\2\u164f\u1650\5\u0238\u011d\2\u1650")
        buf.write("\u168a\3\2\2\2\u1651\u1652\f\t\2\2\u1652\u1653\5\u023c")
        buf.write("\u011f\2\u1653\u1654\5\u0236\u011c\n\u1654\u1689\3\2\2")
        buf.write("\2\u1655\u1657\f\7\2\2\u1656\u1658\7c\2\2\u1657\u1656")
        buf.write("\3\2\2\2\u1657\u1658\3\2\2\2\u1658\u1659\3\2\2\2\u1659")
        buf.write("\u165a\7\17\2\2\u165a\u165b\5\u0236\u011c\2\u165b\u165c")
        buf.write("\7\13\2\2\u165c\u165d\5\u0236\u011c\b\u165d\u1689\3\2")
        buf.write("\2\2\u165e\u165f\f\6\2\2\u165f\u1660\7\u01eb\2\2\u1660")
        buf.write("\u1661\7U\2\2\u1661\u1689\5\u0236\u011c\7\u1662\u1664")
        buf.write("\f\4\2\2\u1663\u1665\7c\2\2\u1664\u1663\3\2\2\2\u1664")
        buf.write("\u1665\3\2\2\2\u1665\u1666\3\2\2\2\u1666\u1667\th\2\2")
        buf.write("\u1667\u1689\5\u0236\u011c\5\u1668\u166a\f\13\2\2\u1669")
        buf.write("\u166b\7c\2\2\u166a\u1669\3\2\2\2\u166a\u166b\3\2\2\2")
        buf.write("\u166b\u166c\3\2\2\2\u166c\u166d\7D\2\2\u166d\u1670\7")
        buf.write("\u03b0\2\2\u166e\u1671\5\u00dan\2\u166f\u1671\5\u0216")
        buf.write("\u010c\2\u1670\u166e\3\2\2\2\u1670\u166f\3\2\2\2\u1671")
        buf.write("\u1672\3\2\2\2\u1672\u1673\7\u03b1\2\2\u1673\u1689\3\2")
        buf.write("\2\2\u1674\u1675\f\n\2\2\u1675\u1676\7L\2\2\u1676\u1689")
        buf.write("\5\u0200\u0101\2\u1677\u1678\f\b\2\2\u1678\u1679\5\u023c")
        buf.write("\u011f\2\u1679\u167a\ti\2\2\u167a\u167b\7\u03b0\2\2\u167b")
        buf.write("\u167c\5\u00dan\2\u167c\u167d\7\u03b1\2\2\u167d\u1689")
        buf.write("\3\2\2\2\u167e\u1680\f\5\2\2\u167f\u1681\7c\2\2\u1680")
        buf.write("\u167f\3\2\2\2\u1680\u1681\3\2\2\2\u1681\u1682\3\2\2\2")
        buf.write("\u1682\u1683\7U\2\2\u1683\u1686\5\u0236\u011c\2\u1684")
        buf.write("\u1685\7\u0139\2\2\u1685\u1687\5\u01fa\u00fe\2\u1686\u1684")
        buf.write("\3\2\2\2\u1686\u1687\3\2\2\2\u1687\u1689\3\2\2\2\u1688")
        buf.write("\u1651\3\2\2\2\u1688\u1655\3\2\2\2\u1688\u165e\3\2\2\2")
        buf.write("\u1688\u1662\3\2\2\2\u1688\u1668\3\2\2\2\u1688\u1674\3")
        buf.write("\2\2\2\u1688\u1677\3\2\2\2\u1688\u167e\3\2\2\2\u1689\u168c")
        buf.write("\3\2\2\2\u168a\u1688\3\2\2\2\u168a\u168b\3\2\2\2\u168b")
        buf.write("\u0237\3\2\2\2\u168c\u168a\3\2\2\2\u168d\u168e\b\u011d")
        buf.write("\1\2\u168e\u16a8\7&\2\2\u168f\u16a8\5\u0202\u0102\2\u1690")
        buf.write("\u16a8\5\u01da\u00ee\2\u1691\u16a8\5\u0224\u0113\2\u1692")
        buf.write("\u16a8\5\u01e0\u00f1\2\u1693\u1694\5\u023a\u011e\2\u1694")
        buf.write("\u1695\5\u0238\u011d\t\u1695\u16a8\3\2\2\2\u1696\u1697")
        buf.write("\7\u00bd\2\2\u1697\u16a8\5\u0238\u011d\b\u1698\u1699\7")
        buf.write("\u03b0\2\2\u1699\u169a\5\u0234\u011b\2\u169a\u169b\7\u03b1")
        buf.write("\2\2\u169b\u16a8\3\2\2\2\u169c\u169e\7\64\2\2\u169d\u169c")
        buf.write("\3\2\2\2\u169d\u169e\3\2\2\2\u169e\u169f\3\2\2\2\u169f")
        buf.write("\u16a0\7\u03b0\2\2\u16a0\u16a1\5\u00dan\2\u16a1\u16a2")
        buf.write("\7\u03b1\2\2\u16a2\u16a8\3\2\2\2\u16a3\u16a4\7J\2\2\u16a4")
        buf.write("\u16a5\5\u0234\u011b\2\u16a5\u16a6\5<\37\2\u16a6\u16a8")
        buf.write("\3\2\2\2\u16a7\u168d\3\2\2\2\u16a7\u168f\3\2\2\2\u16a7")
        buf.write("\u1690\3\2\2\2\u16a7\u1691\3\2\2\2\u16a7\u1692\3\2\2\2")
        buf.write("\u16a7\u1693\3\2\2\2\u16a7\u1696\3\2\2\2\u16a7\u1698\3")
        buf.write("\2\2\2\u16a7\u169d\3\2\2\2\u16a7\u16a3\3\2\2\2\u16a8\u16b3")
        buf.write("\3\2\2\2\u16a9\u16aa\f\4\2\2\u16aa\u16ab\5\u0240\u0121")
        buf.write("\2\u16ab\u16ac\5\u0238\u011d\5\u16ac\u16b2\3\2\2\2\u16ad")
        buf.write("\u16ae\f\3\2\2\u16ae\u16af\5\u0242\u0122\2\u16af\u16b0")
        buf.write("\5\u0238\u011d\4\u16b0\u16b2\3\2\2\2\u16b1\u16a9\3\2\2")
        buf.write("\2\u16b1\u16ad\3\2\2\2\u16b2\u16b5\3\2\2\2\u16b3\u16b1")
        buf.write("\3\2\2\2\u16b3\u16b4\3\2\2\2\u16b4\u0239\3\2\2\2\u16b5")
        buf.write("\u16b3\3\2\2\2\u16b6\u16b7\tj\2\2\u16b7\u023b\3\2\2\2")
        buf.write("\u16b8\u16c7\7\u03a7\2\2\u16b9\u16c7\7\u03a8\2\2\u16ba")
        buf.write("\u16c7\7\u03a9\2\2\u16bb\u16bc\7\u03a9\2\2\u16bc\u16c7")
        buf.write("\7\u03a7\2\2\u16bd\u16be\7\u03a8\2\2\u16be\u16c7\7\u03a7")
        buf.write("\2\2\u16bf\u16c0\7\u03a9\2\2\u16c0\u16c7\7\u03a8\2\2\u16c1")
        buf.write("\u16c2\7\u03aa\2\2\u16c2\u16c7\7\u03a7\2\2\u16c3\u16c4")
        buf.write("\7\u03a9\2\2\u16c4\u16c5\7\u03a7\2\2\u16c5\u16c7\7\u03a8")
        buf.write("\2\2\u16c6\u16b8\3\2\2\2\u16c6\u16b9\3\2\2\2\u16c6\u16ba")
        buf.write("\3\2\2\2\u16c6\u16bb\3\2\2\2\u16c6\u16bd\3\2\2\2\u16c6")
        buf.write("\u16bf\3\2\2\2\u16c6\u16c1\3\2\2\2\u16c6\u16c3\3\2\2\2")
        buf.write("\u16c7\u023d\3\2\2\2\u16c8\u16d0\7\13\2\2\u16c9\u16ca")
        buf.write("\7\u03ad\2\2\u16ca\u16d0\7\u03ad\2\2\u16cb\u16d0\7\u00a9")
        buf.write("\2\2\u16cc\u16d0\7j\2\2\u16cd\u16ce\7\u03ac\2\2\u16ce")
        buf.write("\u16d0\7\u03ac\2\2\u16cf\u16c8\3\2\2\2\u16cf\u16c9\3\2")
        buf.write("\2\2\u16cf\u16cb\3\2\2\2\u16cf\u16cc\3\2\2\2\u16cf\u16cd")
        buf.write("\3\2\2\2\u16d0\u023f\3\2\2\2\u16d1\u16d2\7\u03a9\2\2\u16d2")
        buf.write("\u16d9\7\u03a9\2\2\u16d3\u16d4\7\u03a8\2\2\u16d4\u16d9")
        buf.write("\7\u03a8\2\2\u16d5\u16d9\7\u03ad\2\2\u16d6\u16d9\7\u03ae")
        buf.write("\2\2\u16d7\u16d9\7\u03ac\2\2\u16d8\u16d1\3\2\2\2\u16d8")
        buf.write("\u16d3\3\2\2\2\u16d8\u16d5\3\2\2\2\u16d8\u16d6\3\2\2\2")
        buf.write("\u16d8\u16d7\3\2\2\2\u16d9\u0241\3\2\2\2\u16da\u16db\t")
        buf.write("k\2\2\u16db\u0243\3\2\2\2\u16dc\u16dd\tl\2\2\u16dd\u0245")
        buf.write("\3\2\2\2\u16de\u16df\tm\2\2\u16df\u0247\3\2\2\2\u16e0")
        buf.write("\u16e1\tn\2\2\u16e1\u0249\3\2\2\2\u16e2\u16e3\to\2\2\u16e3")
        buf.write("\u024b\3\2\2\2\u16e4\u16e5\tp\2\2\u16e5\u024d\3\2\2\2")
        buf.write("\u16e6\u16e7\tq\2\2\u16e7\u024f\3\2\2\2\u16e8\u16e9\t")
        buf.write("r\2\2\u16e9\u0251\3\2\2\2\u034d\u0253\u0257\u025e\u0263")
        buf.write("\u0265\u026b\u026e\u0271\u027a\u02a1\u02ad\u02b8\u02c9")
        buf.write("\u02ce\u02da\u02f5\u02fb\u0300\u0306\u030b\u030f\u0318")
        buf.write("\u031b\u031e\u0322\u0329\u032c\u0331\u0339\u033e\u0343")
        buf.write("\u0346\u0351\u0354\u0358\u035b\u035f\u0362\u0366\u0369")
        buf.write("\u036c\u0370\u0373\u0377\u037d\u0383\u0389\u0390\u0397")
        buf.write("\u039d\u03a3\u03ac\u03bf\u03c6\u03ca\u03d4\u03d8\u03dc")
        buf.write("\u03e2\u03e7\u03ea\u03ed\u03f0\u03f3\u03f9\u03fd\u0403")
        buf.write("\u0408\u040b\u040e\u0410\u041b\u041f\u0422\u0430\u0433")
        buf.write("\u0437\u043a\u043e\u0441\u0445\u0448\u044c\u044f\u0452")
        buf.write("\u0456\u0459\u045d\u0463\u0470\u0477\u047c\u047f\u0484")
        buf.write("\u048c\u0492\u0496\u0499\u049e\u04a2\u04a6\u04a9\u04b1")
        buf.write("\u04b3\u04ba\u04c0\u04c8\u04cb\u04d2\u04d5\u04d7\u04dd")
        buf.write("\u04e3\u04f4\u04fb\u0502\u050b\u0519\u0526\u052b\u053b")
        buf.write("\u0543\u054d\u0553\u055b\u0560\u0569\u056d\u056f\u0574")
        buf.write("\u057a\u057f\u0581\u0585\u0588\u058b\u0591\u0596\u0598")
        buf.write("\u059d\u05a7\u05ae\u05b1\u05b9\u05c1\u05c3\u05cb\u05cf")
        buf.write("\u05d2\u05d8\u05dd\u05e0\u05e6\u05e9\u05ed\u05f2\u05f7")
        buf.write("\u05fb\u0600\u0603\u0608\u060c\u0610\u0615\u061a\u061f")
        buf.write("\u0625\u062a\u062f\u0635\u063a\u063f\u0644\u0649\u064e")
        buf.write("\u0653\u0658\u065d\u0662\u0667\u066d\u0671\u0679\u067e")
        buf.write("\u0688\u068f\u0691\u0699\u069e\u06a1\u06a9\u06af\u06bf")
        buf.write("\u06cb\u06cd\u06d0\u06d8\u06de\u06e4\u06ee\u06f3\u06f8")
        buf.write("\u0700\u0703\u070f\u0717\u071a\u0721\u0729\u072c\u072e")
        buf.write("\u0735\u0739\u073d\u0742\u0748\u074e\u0753\u0758\u075d")
        buf.write("\u0762\u0765\u076a\u076f\u0779\u077d\u0784\u0789\u078c")
        buf.write("\u0791\u0794\u0798\u079c\u07a4\u07b7\u07ba\u07bd\u07c1")
        buf.write("\u07cb\u07d8\u07df\u07e2\u07eb\u07ef\u07fa\u07fd\u0801")
        buf.write("\u0809\u080c\u0811\u0819\u081f\u0823\u0828\u082f\u0833")
        buf.write("\u083e\u0846\u0849\u084f\u0855\u0857\u085c\u0862\u0868")
        buf.write("\u086a\u086e\u0871\u0874\u087a\u0880\u0883\u0889\u088f")
        buf.write("\u0891\u0896\u089d\u08a2\u08aa\u08ae\u08b6\u08ba\u08bf")
        buf.write("\u08c6\u08ca\u08dd\u08ea\u08ed\u08f6\u0909\u0910\u0917")
        buf.write("\u0926\u0933\u0939\u093f\u0945\u094b\u0951\u0957\u095c")
        buf.write("\u0963\u096a\u0971\u0974\u0978\u097b\u0988\u098f\u0996")
        buf.write("\u099c\u09a0\u09a4\u09ab\u09ae\u09b3\u09ba\u09c1\u09c5")
        buf.write("\u09d3\u09d8\u09e1\u09e4\u09e8\u09f1\u09f5\u09f8\u09fb")
        buf.write("\u0a03\u0a09\u0a12\u0a15\u0a20\u0a23\u0a28\u0a2b\u0a30")
        buf.write("\u0a3a\u0a3f\u0a45\u0a48\u0a4d\u0a52\u0a54\u0a5a\u0a5f")
        buf.write("\u0a61\u0a67\u0a6f\u0a74\u0a7c\u0a7f\u0a84\u0a87\u0a8c")
        buf.write("\u0a94\u0a9c\u0aa2\u0aaa\u0aaf\u0ab7\u0aba\u0abe\u0ac1")
        buf.write("\u0ac9\u0acf\u0ad8\u0adb\u0adf\u0ae3\u0ae9\u0aed\u0af1")
        buf.write("\u0af3\u0af6\u0af9\u0afc\u0b02\u0b06\u0b09\u0b0c\u0b0f")
        buf.write("\u0b12\u0b14\u0b18\u0b26\u0b29\u0b31\u0b39\u0b3d\u0b40")
        buf.write("\u0b43\u0b4c\u0b50\u0b53\u0b57\u0b5b\u0b5e\u0b61\u0b66")
        buf.write("\u0b6c\u0b70\u0b7a\u0b80\u0b84\u0b8a\u0b8e\u0b94\u0b97")
        buf.write("\u0ba3\u0ba7\u0bab\u0bb3\u0bb7\u0bbf\u0bc2\u0bc6\u0bc9")
        buf.write("\u0bd1\u0bd6\u0bd9\u0bdc\u0be0\u0be3\u0bec\u0bf1\u0bfa")
        buf.write("\u0bff\u0c06\u0c0d\u0c15\u0c1a\u0c22\u0c25\u0c28\u0c2f")
        buf.write("\u0c32\u0c39\u0c3c\u0c44\u0c4a\u0c55\u0c58\u0c63\u0c69")
        buf.write("\u0c6d\u0c78\u0c7d\u0c7f\u0c83\u0c8f\u0c99\u0c9f\u0ca4")
        buf.write("\u0ca7\u0caa\u0cad\u0cb3\u0cb8\u0cbb\u0cbe\u0cc2\u0cc8")
        buf.write("\u0ccc\u0cd6\u0cda\u0ce0\u0ce9\u0cec\u0cf0\u0cf3\u0cf7")
        buf.write("\u0cfb\u0cfe\u0d00\u0d08\u0d14\u0d1a\u0d1d\u0d22\u0d27")
        buf.write("\u0d29\u0d2f\u0d34\u0d36\u0d38\u0d3e\u0d47\u0d4c\u0d4e")
        buf.write("\u0d52\u0d56\u0d5c\u0d63\u0d6c\u0d6f\u0d73\u0d77\u0d7b")
        buf.write("\u0d7e\u0d81\u0d84\u0d88\u0d8c\u0d8f\u0d92\u0d95\u0d9c")
        buf.write("\u0da0\u0daf\u0dbc\u0dc4\u0dce\u0dd2\u0dd5\u0ddb\u0dde")
        buf.write("\u0de1\u0dea\u0df3\u0dfd\u0e01\u0e0b\u0e15\u0e1d\u0e20")
        buf.write("\u0e29\u0e2c\u0e30\u0e35\u0e39\u0e42\u0e45\u0e64\u0e67")
        buf.write("\u0e6a\u0ea0\u0eb6\u0ec4\u0ecb\u0ecf\u0ed5\u0edd\u0edf")
        buf.write("\u0eea\u0ef4\u0eff\u0f07\u0f0c\u0f14\u0f1c\u0f24\u0f2c")
        buf.write("\u0f32\u0f34\u0f38\u0f3d\u0f42\u0f48\u0f4a\u0f55\u0f5a")
        buf.write("\u0f61\u0f63\u0f71\u0f77\u0f7c\u0f81\u0f87\u0f8e\u0f96")
        buf.write("\u0f9e\u0fa3\u0fa9\u0fac\u0fb4\u0fbb\u0fc4\u0fc7\u0fd8")
        buf.write("\u0fe0\u0fe8\u0fec\u0ff3\u0ff9\u1001\u100d\u1013\u101a")
        buf.write("\u1021\u1026\u1029\u102b\u1031\u1033\u1037\u1039\u103c")
        buf.write("\u1045\u104b\u1052\u1059\u105e\u1061\u1063\u1069\u106b")
        buf.write("\u106f\u1071\u1074\u1079\u1080\u1089\u108e\u1097\u109e")
        buf.write("\u10a3\u10a6\u10a8\u10ae\u10b0\u10b3\u10bf\u10c5\u10d7")
        buf.write("\u10dc\u10e5\u10eb\u10f6\u10f9\u1105\u110c\u1111\u111b")
        buf.write("\u1127\u1132\u1134\u113e\u1148\u1152\u1156\u115a\u1163")
        buf.write("\u117e\u118d\u1191\u119c\u11a3\u11a7\u11ae\u11b3\u11b6")
        buf.write("\u11b9\u11c2\u11c6\u11e4\u11eb\u11ef\u11f6\u11f9\u11fe")
        buf.write("\u1208\u120c\u1212\u1215\u121a\u121e\u1225\u1228\u122e")
        buf.write("\u1246\u1253\u1256\u1260\u1268\u126c\u1273\u1276\u127f")
        buf.write("\u1285\u128b\u1295\u1297\u129d\u12a0\u12a3\u12af\u12b2")
        buf.write("\u12b8\u12bb\u12c3\u12cb\u12d1\u12d5\u12e3\u12ef\u12f6")
        buf.write("\u12f9\u1300\u1307\u130c\u1311\u131c\u1327\u132d\u1332")
        buf.write("\u133f\u1341\u1346\u134f\u1351\u1358\u135b\u135e\u1364")
        buf.write("\u1368\u136e\u1374\u1383\u1388\u138e\u1395\u1397\u139e")
        buf.write("\u13a1\u13ab\u13af\u13c3\u13ca\u13cc\u13d3\u13d5\u13d9")
        buf.write("\u13de\u13e9\u13ee\u13f4\u13f7\u13fb\u1400\u1403\u1407")
        buf.write("\u140b\u140d\u1412\u1417\u1422\u1425\u1429\u142c\u1431")
        buf.write("\u1435\u1439\u143c\u143f\u1443\u1446\u1449\u144d\u1450")
        buf.write("\u1453\u1458\u1461\u1466\u146b\u146f\u1472\u1476\u147a")
        buf.write("\u147f\u1484\u1488\u148a\u149a\u14a3\u14ab\u14bc\u14c5")
        buf.write("\u14cf\u14d7\u14df\u14e7\u14ec\u14fa\u1501\u1506\u152c")
        buf.write("\u1530\u153c\u1540\u1549\u1551\u1556\u155e\u1563\u1568")
        buf.write("\u156a\u1573\u1578\u1580\u1585\u158d\u1595\u1598\u15a2")
        buf.write("\u15ad\u15b2\u15b7\u15bb\u15c3\u15c8\u15d1\u15d4\u15e0")
        buf.write("\u15e8\u15f2\u15f5\u15f9\u15fd\u1615\u1620\u1627\u162b")
        buf.write("\u1632\u163a\u163f\u1647\u164d\u1657\u1664\u166a\u1670")
        buf.write("\u1680\u1686\u1688\u168a\u169d\u16a7\u16b1\u16b3\u16c6")
        buf.write("\u16cf\u16d8")
        return buf.getvalue()


class mysqlParser ( Parser ):

    grammarFileName = "mysqlParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "':='", "'+='", "'-='", "'*='", "'/='", 
                     "'%='", "'&='", "'^='", "'|='", "'*'", "'/'", "'%'", 
                     "'+'", "'-'", "<INVALID>", "<INVALID>", "'='", "'>'", 
                     "'<'", "'!'", "'~'", "'|'", "'&'", "'^'", "'.'", "'('", 
                     "')'", "','", "';'", "'@'", "'0'", "'1'", "'2'", "'''", 
                     "'\"'", "'`'", "':'" ]

    symbolicNames = [ "<INVALID>", "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", 
                      "LINE_COMMENT", "ADD", "ALL", "ALTER", "ANALYZE", 
                      "AND", "AS", "ASC", "BEFORE", "BETWEEN", "BOTH", "BY", 
                      "CALL", "CASCADE", "CASE", "CAST", "CHANGE", "CHARACTER", 
                      "CHECK", "COLLATE", "COLUMN", "CONDITION", "CONSTRAINT", 
                      "CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT_USER", 
                      "CURSOR", "DATABASE", "DATABASES", "DECLARE", "DEFAULT", 
                      "DELAYED", "DELETE", "DESC", "DESCRIBE", "DETERMINISTIC", 
                      "DISTINCT", "DISTINCTROW", "DROP", "EACH", "ELSE", 
                      "ELSEIF", "ENCLOSED", "ESCAPED", "EXISTS", "EXIT", 
                      "EXPLAIN", "FALSE", "FETCH", "FOR", "FORCE", "FOREIGN", 
                      "FROM", "FULLTEXT", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", 
                      "IF", "IGNORE", "IN", "INDEX", "INFILE", "INNER", 
                      "INOUT", "INSERT", "INTERVAL", "INTO", "IS", "ITERATE", 
                      "JOIN", "KEY", "KEYS", "KILL", "LEADING", "LEAVE", 
                      "LEFT", "LIKE", "LIMIT", "LINEAR", "LINES", "LOAD", 
                      "LOCK", "LOOP", "LOW_PRIORITY", "MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", 
                      "MATCH", "MAXVALUE", "MODIFIES", "NATURAL", "NOT", 
                      "NO_WRITE_TO_BINLOG", "NULL_LITERAL", "ON", "OPTIMIZE", 
                      "OPTION", "OPTIONALLY", "OR", "ORDER", "OUT", "OUTER", 
                      "OUTFILE", "PARTITION", "PRIMARY", "PROCEDURE", "PURGE", 
                      "RANGE", "READ", "READS", "REFERENCES", "REGEXP", 
                      "RELEASE", "RENAME", "REPEAT", "REPLACE", "REQUIRE", 
                      "RESTRICT", "RETURN", "REVOKE", "RIGHT", "RLIKE", 
                      "SCHEMA", "SCHEMAS", "SELECT", "SET", "SEPARATOR", 
                      "SHOW", "SPATIAL", "SQL", "SQLEXCEPTION", "SQLSTATE", 
                      "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", 
                      "SQL_SMALL_RESULT", "SSL", "STARTING", "STRAIGHT_JOIN", 
                      "TABLE", "TERMINATED", "THEN", "TO", "TRAILING", "TRIGGER", 
                      "TRUE", "UNDO", "UNION", "UNIQUE", "UNLOCK", "UNSIGNED", 
                      "UPDATE", "USAGE", "USE", "USING", "VALUES", "WHEN", 
                      "WHERE", "WHILE", "WITH", "WRITE", "XOR", "ZEROFILL", 
                      "TINYINT", "SMALLINT", "MEDIUMINT", "INT", "INTEGER", 
                      "BIGINT", "REAL", "DOUBLE", "FLOAT", "DECIMAL", "NUMERIC", 
                      "DATE", "TIME", "TIMESTAMP", "DATETIME", "YEAR", "CHAR", 
                      "VARCHAR", "BINARY", "VARBINARY", "TINYBLOB", "BLOB", 
                      "MEDIUMBLOB", "LONGBLOB", "TINYTEXT", "TEXT", "MEDIUMTEXT", 
                      "LONGTEXT", "ENUM", "YEAR_MONTH", "DAY_HOUR", "DAY_MINUTE", 
                      "DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", "MINUTE_SECOND", 
                      "SECOND_MICROSECOND", "MINUTE_MICROSECOND", "HOUR_MICROSECOND", 
                      "DAY_MICROSECOND", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", 
                      "COUNT", "GROUP_CONCAT", "MAX", "MIN", "STD", "STDDEV", 
                      "STDDEV_POP", "STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", 
                      "VARIANCE", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
                      "LOCALTIME", "CURDATE", "CURTIME", "DATE_ADD", "DATE_SUB", 
                      "EXTRACT", "LOCALTIMESTAMP", "NOW", "POSITION", "SUBSTR", 
                      "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", "UTC_TIME", 
                      "UTC_TIMESTAMP", "ACCOUNT", "ACTION", "AFTER", "AGGREGATE", 
                      "ALGORITHM", "ANY", "AT", "AUTHORS", "AUTOCOMMIT", 
                      "AUTOEXTEND_SIZE", "AUTO_INCREMENT", "AVG_ROW_LENGTH", 
                      "BEGIN", "BINLOG", "BIT", "BLOCK", "BTREE", "CACHE", 
                      "CASCADED", "CHAIN", "CHANGED", "CHANNEL", "CHECKSUM", 
                      "CIPHER", "CLIENT", "CLOSE", "COALESCE", "CODE", "COLUMNS", 
                      "COLUMN_FORMAT", "COMMENT", "COMMIT", "COMPACT", "COMPLETION", 
                      "COMPRESSED", "COMPRESSION", "CONCURRENT", "CONNECTION", 
                      "CONSISTENT", "CONTAINS", "CONTEXT", "CONTRIBUTORS", 
                      "COPY", "CPU", "DATA", "DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", 
                      "DEFINER", "DELAY_KEY_WRITE", "DES_KEY_FILE", "DIRECTORY", 
                      "DISABLE", "DISCARD", "DISK", "DO", "DUMPFILE", "DUPLICATE", 
                      "DYNAMIC", "ENABLE", "ENCRYPTION", "END", "ENDS", 
                      "ENGINE", "ENGINES", "ERROR", "ERRORS", "ESCAPE", 
                      "EVEN", "EVENT", "EVENTS", "EVERY", "EXCHANGE", "EXCLUSIVE", 
                      "EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE", "FAST", 
                      "FAULTS", "FIELDS", "FILE_BLOCK_SIZE", "FILTER", "FIRST", 
                      "FIXED", "FLUSH", "FOLLOWS", "FOUND", "FULL", "FUNCTION", 
                      "GENERAL", "GLOBAL", "GRANTS", "GROUP_REPLICATION", 
                      "HANDLER", "HASH", "HELP", "HOST", "HOSTS", "IDENTIFIED", 
                      "IGNORE_SERVER_IDS", "IMPORT", "INDEXES", "INITIAL_SIZE", 
                      "INPLACE", "INSERT_METHOD", "INSTALL", "INSTANCE", 
                      "INVOKER", "IO", "IO_THREAD", "IPC", "ISOLATION", 
                      "ISSUER", "JSON", "KEY_BLOCK_SIZE", "LANGUAGE", "LAST", 
                      "LEAVES", "LESS", "LEVEL", "LIST", "LOCAL", "LOGFILE", 
                      "LOGS", "MASTER", "MASTER_AUTO_POSITION", "MASTER_CONNECT_RETRY", 
                      "MASTER_DELAY", "MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", 
                      "MASTER_LOG_FILE", "MASTER_LOG_POS", "MASTER_PASSWORD", 
                      "MASTER_PORT", "MASTER_RETRY_COUNT", "MASTER_SSL", 
                      "MASTER_SSL_CA", "MASTER_SSL_CAPATH", "MASTER_SSL_CERT", 
                      "MASTER_SSL_CIPHER", "MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", 
                      "MASTER_SSL_KEY", "MASTER_TLS_VERSION", "MASTER_USER", 
                      "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", 
                      "MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS", 
                      "MEDIUM", "MERGE", "MID", "MIGRATE", "MIN_ROWS", "MODE", 
                      "MODIFY", "MUTEX", "MYSQL", "NAME", "NAMES", "NCHAR", 
                      "NEVER", "NEXT", "NO", "NODEGROUP", "NONE", "OFFLINE", 
                      "OFFSET", "OJ", "OLD_PASSWORD", "ONE", "ONLINE", "ONLY", 
                      "OPEN", "OPTIMIZER_COSTS", "OPTIONS", "OWNER", "PACK_KEYS", 
                      "PAGE", "PARSER", "PARTIAL", "PARTITIONING", "PARTITIONS", 
                      "PASSWORD", "PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", 
                      "PORT", "PRECEDES", "PREPARE", "PRESERVE", "PREV", 
                      "PROCESSLIST", "PROFILE", "PROFILES", "PROXY", "QUERY", 
                      "QUICK", "REBUILD", "RECOVER", "REDO_BUFFER_SIZE", 
                      "REDUNDANT", "RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", 
                      "RELAYLOG", "REMOVE", "REORGANIZE", "REPAIR", "REPLICATE_DO_DB", 
                      "REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB", "REPLICATE_IGNORE_TABLE", 
                      "REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", 
                      "REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", "RESET", 
                      "RESUME", "RETURNS", "ROLLBACK", "ROLLUP", "ROTATE", 
                      "ROW", "ROWS", "ROW_FORMAT", "SAVEPOINT", "SCHEDULE", 
                      "SECURITY", "SERVER", "SESSION", "SHARE", "SHARED", 
                      "SIGNED", "SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", "SOCKET", 
                      "SOME", "SONAME", "SOUNDS", "SOURCE", "SQL_AFTER_GTIDS", 
                      "SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS", "SQL_BUFFER_RESULT", 
                      "SQL_CACHE", "SQL_NO_CACHE", "SQL_THREAD", "START", 
                      "STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", 
                      "STATS_SAMPLE_PAGES", "STATUS", "STOP", "STORAGE", 
                      "STRING", "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", 
                      "SUSPEND", "SWAPS", "SWITCHES", "TABLESPACE", "TEMPORARY", 
                      "TEMPTABLE", "THAN", "TRADITIONAL", "TRANSACTION", 
                      "TRIGGERS", "TRUNCATE", "UNDEFINED", "UNDOFILE", "UNDO_BUFFER_SIZE", 
                      "UNINSTALL", "UNKNOWN", "UNTIL", "UPGRADE", "USER", 
                      "USE_FRM", "USER_RESOURCES", "VALIDATION", "VALUE", 
                      "VARIABLES", "VIEW", "WAIT", "WARNINGS", "WITHOUT", 
                      "WORK", "WRAPPER", "X509", "XA", "XML", "EUR", "USA", 
                      "JIS", "ISO", "INTERNAL", "QUARTER", "MONTH", "DAY", 
                      "HOUR", "MINUTE", "WEEK", "SECOND", "MICROSECOND", 
                      "TABLES", "ROUTINE", "EXECUTE", "FILE", "PROCESS", 
                      "RELOAD", "SHUTDOWN", "SUPER", "PRIVILEGES", "ARMSCII8", 
                      "ASCII", "BIG5", "CP1250", "CP1251", "CP1256", "CP1257", 
                      "CP850", "CP852", "CP866", "CP932", "DEC8", "EUCJPMS", 
                      "EUCKR", "GB2312", "GBK", "GEOSTD8", "GREEK", "HEBREW", 
                      "HP8", "KEYBCS2", "KOI8R", "KOI8U", "LATIN1", "LATIN2", 
                      "LATIN5", "LATIN7", "MACCE", "MACROMAN", "SJIS", "SWE7", 
                      "TIS620", "UCS2", "UJIS", "UTF16", "UTF16LE", "UTF32", 
                      "UTF8", "UTF8MB3", "UTF8MB4", "ARCHIVE", "BLACKHOLE", 
                      "CSV", "FEDERATED", "INNODB", "MEMORY", "MRG_MYISAM", 
                      "MYISAM", "NDB", "NDBCLUSTER", "PERFOMANCE_SCHEMA", 
                      "REPEATABLE", "COMMITTED", "UNCOMMITTED", "SERIALIZABLE", 
                      "GEOMETRYCOLLECTION", "LINESTRING", "MULTILINESTRING", 
                      "MULTIPOINT", "MULTIPOLYGON", "POINT", "POLYGON", 
                      "ABS", "ACOS", "ADDDATE", "ADDTIME", "AES_DECRYPT", 
                      "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", 
                      "ASWKB", "ASWKT", "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", 
                      "ASYMMETRIC_ENCRYPT", "ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", 
                      "ATAN", "ATAN2", "BENCHMARK", "BIN", "BIT_COUNT", 
                      "BIT_LENGTH", "BUFFER", "CEIL", "CEILING", "CENTROID", 
                      "CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", "COERCIBILITY", 
                      "COLLATION", "COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", 
                      "CONV", "CONVERT_TZ", "COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", 
                      "CREATE_ASYMMETRIC_PUB_KEY", "CREATE_DH_PARAMETERS", 
                      "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
                      "DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", 
                      "DECODE", "DEGREES", "DES_DECRYPT", "DES_ENCRYPT", 
                      "DIMENSION", "DISJOINT", "ELT", "ENCODE", "ENCRYPT", 
                      "ENDPOINT", "ENVELOPE", "EQUALS", "EXP", "EXPORT_SET", 
                      "EXTERIORRING", "EXTRACTVALUE", "FIELD", "FIND_IN_SET", 
                      "FLOOR", "FORMAT", "FOUND_ROWS", "FROM_BASE64", "FROM_DAYS", 
                      "FROM_UNIXTIME", "GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", 
                      "GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB", 
                      "GEOMETRYFROMTEXT", "GEOMETRYFROMWKB", "GEOMETRYN", 
                      "GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", "GET_FORMAT", 
                      "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", 
                      "GTID_SUBTRACT", "HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", 
                      "INET_ATON", "INET_NTOA", "INSTR", "INTERIORRINGN", 
                      "INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", "ISSIMPLE", 
                      "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", 
                      "IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", 
                      "LEAST", "LENGTH", "LINEFROMTEXT", "LINEFROMWKB", 
                      "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", "LN", "LOAD_FILE", 
                      "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", 
                      "LTRIM", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", 
                      "MBRCONTAINS", "MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", 
                      "MBROVERLAPS", "MBRTOUCHES", "MBRWITHIN", "MD5", "MLINEFROMTEXT", 
                      "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", "MPOINTFROMWKB", 
                      "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", 
                      "MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", 
                      "MULTIPOLYGONFROMTEXT", "MULTIPOLYGONFROMWKB", "NAME_CONST", 
                      "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS", "NUMPOINTS", 
                      "OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", 
                      "PERIOD_DIFF", "PI", "POINTFROMTEXT", "POINTFROMWKB", 
                      "POINTN", "POLYFROMTEXT", "POLYFROMWKB", "POLYGONFROMTEXT", 
                      "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", 
                      "RAND", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", 
                      "ROUND", "ROW_COUNT", "RPAD", "RTRIM", "SEC_TO_TIME", 
                      "SESSION_USER", "SHA", "SHA1", "SHA2", "SIGN", "SIN", 
                      "SLEEP", "SOUNDEX", "SQL_THREAD_WAIT_AFTER_GTIDS", 
                      "SQRT", "SRID", "STARTPOINT", "STRCMP", "STR_TO_DATE", 
                      "ST_AREA", "ST_ASBINARY", "ST_ASTEXT", "ST_ASWKB", 
                      "ST_ASWKT", "ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", 
                      "ST_CROSSES", "ST_DIFFERENCE", "ST_DIMENSION", "ST_DISJOINT", 
                      "ST_DISTANCE", "ST_ENDPOINT", "ST_ENVELOPE", "ST_EQUALS", 
                      "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", "ST_GEOMCOLLFROMTXT", 
                      "ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", 
                      "ST_GEOMETRYCOLLECTIONFROMWKB", "ST_GEOMETRYFROMTEXT", 
                      "ST_GEOMETRYFROMWKB", "ST_GEOMETRYN", "ST_GEOMETRYTYPE", 
                      "ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", "ST_INTERIORRINGN", 
                      "ST_INTERSECTION", "ST_INTERSECTS", "ST_ISCLOSED", 
                      "ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", "ST_LINEFROMWKB", 
                      "ST_LINESTRINGFROMTEXT", "ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", 
                      "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", "ST_NUMPOINTS", 
                      "ST_OVERLAPS", "ST_POINTFROMTEXT", "ST_POINTFROMWKB", 
                      "ST_POINTN", "ST_POLYFROMTEXT", "ST_POLYFROMWKB", 
                      "ST_POLYGONFROMTEXT", "ST_POLYGONFROMWKB", "ST_SRID", 
                      "ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", 
                      "ST_UNION", "ST_WITHIN", "ST_X", "ST_Y", "SUBDATE", 
                      "SUBSTRING_INDEX", "SUBTIME", "SYSTEM_USER", "TAN", 
                      "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", "TIME_FORMAT", 
                      "TIME_TO_SEC", "TOUCHES", "TO_BASE64", "TO_DAYS", 
                      "TO_SECONDS", "UCASE", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", 
                      "UNHEX", "UNIX_TIMESTAMP", "UPDATEXML", "UPPER", "UUID", 
                      "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", "VERSION", 
                      "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", "WEEKDAY", "WEEKOFYEAR", 
                      "WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", 
                      "X_FUNCTION", "VAR_ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", 
                      "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", 
                      "XOR_ASSIGN", "OR_ASSIGN", "STAR", "DIVIDE", "MODULE", 
                      "PLUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", "GREATER_SYMBOL", 
                      "LESS_SYMBOL", "EXCLAMATION_SYMBOL", "BIT_NOT_OP", 
                      "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", "DOT", "LR_BRACKET", 
                      "RR_BRACKET", "COMMA", "SEMI", "AT_SIGN", "ZERO_DECIMAL", 
                      "ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", 
                      "DOUBLE_QUOTE_SYMB", "REVERSE_QUOTE_SYMB", "COLON_SYMB", 
                      "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", 
                      "START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", 
                      "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "REAL_LITERAL", 
                      "NULL_SPEC_LITERAL", "BIT_STRING", "STRING_CHARSET_NAME", 
                      "DOT_ID", "ID", "REVERSE_QUOTE_ID", "STRING_USER_NAME", 
                      "LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION" ]

    RULE_root = 0
    RULE_sqlStatements = 1
    RULE_sqlStatement = 2
    RULE_emptyStatement = 3
    RULE_ddlStatement = 4
    RULE_dmlStatement = 5
    RULE_transactionStatement = 6
    RULE_replicationStatement = 7
    RULE_preparedStatement = 8
    RULE_compoundStatement = 9
    RULE_administrationStatement = 10
    RULE_utilityStatement = 11
    RULE_createDatabase = 12
    RULE_createEvent = 13
    RULE_createIndex = 14
    RULE_createLogfileGroup = 15
    RULE_createProcedure = 16
    RULE_createFunction = 17
    RULE_createServer = 18
    RULE_createTable = 19
    RULE_createTablespaceInnodb = 20
    RULE_createTablespaceNdb = 21
    RULE_createTrigger = 22
    RULE_createView = 23
    RULE_createDatabaseOption = 24
    RULE_ownerStatement = 25
    RULE_scheduleExpression = 26
    RULE_timestampValue = 27
    RULE_intervalExpr = 28
    RULE_intervalType = 29
    RULE_enableType = 30
    RULE_indexType = 31
    RULE_indexOption = 32
    RULE_procedureParameter = 33
    RULE_functionParameter = 34
    RULE_routineOption = 35
    RULE_serverOption = 36
    RULE_createDefinitions = 37
    RULE_createDefinition = 38
    RULE_columnDefinition = 39
    RULE_columnConstraint = 40
    RULE_tableConstraint = 41
    RULE_referenceDefinition = 42
    RULE_referenceAction = 43
    RULE_referenceControlType = 44
    RULE_indexColumnDefinition = 45
    RULE_tableOption = 46
    RULE_tablespaceStorage = 47
    RULE_partitionDefinitions = 48
    RULE_partitionFunctionDefinition = 49
    RULE_subpartitionFunctionDefinition = 50
    RULE_partitionDefinition = 51
    RULE_subpartitionDefinition = 52
    RULE_partitionOption = 53
    RULE_alterDatabase = 54
    RULE_alterEvent = 55
    RULE_alterFunction = 56
    RULE_alterInstance = 57
    RULE_alterLogfileGroup = 58
    RULE_alterProcedure = 59
    RULE_alterServer = 60
    RULE_alterTable = 61
    RULE_alterTablespace = 62
    RULE_alterView = 63
    RULE_alterSpecification = 64
    RULE_dropDatabase = 65
    RULE_dropEvent = 66
    RULE_dropIndex = 67
    RULE_dropLogfileGroup = 68
    RULE_dropProcedure = 69
    RULE_dropFunction = 70
    RULE_dropServer = 71
    RULE_dropTable = 72
    RULE_dropTablespace = 73
    RULE_dropTrigger = 74
    RULE_dropView = 75
    RULE_renameTable = 76
    RULE_truncateTable = 77
    RULE_callStatement = 78
    RULE_deleteStatement = 79
    RULE_doStatement = 80
    RULE_handlerStatement = 81
    RULE_insertStatement = 82
    RULE_loadDataStatement = 83
    RULE_loadXmlStatement = 84
    RULE_replaceStatement = 85
    RULE_selectStatement = 86
    RULE_updateStatement = 87
    RULE_insertStatementValue = 88
    RULE_updatedElement = 89
    RULE_assignmentField = 90
    RULE_lockClause = 91
    RULE_singleDeleteStatement = 92
    RULE_multipleDeleteStatement = 93
    RULE_handlerOpenStatement = 94
    RULE_handlerReadIndexStatement = 95
    RULE_handlerReadStatement = 96
    RULE_handlerCloseStatement = 97
    RULE_singleUpdateStatement = 98
    RULE_multipleUpdateStatement = 99
    RULE_orderByClause = 100
    RULE_orderByExpression = 101
    RULE_tableSources = 102
    RULE_tableSource = 103
    RULE_tableSourceItem = 104
    RULE_indexHint = 105
    RULE_indexHintType = 106
    RULE_joinPart = 107
    RULE_subquery = 108
    RULE_queryExpression = 109
    RULE_queryExpressionNointo = 110
    RULE_querySpecification = 111
    RULE_querySpecificationNointo = 112
    RULE_unionParenthesis = 113
    RULE_unionStatement = 114
    RULE_selectSpec = 115
    RULE_selectElements = 116
    RULE_selectElement = 117
    RULE_selectIntoExpression = 118
    RULE_fromClause = 119
    RULE_groupByItem = 120
    RULE_limitClause = 121
    RULE_startTransaction = 122
    RULE_beginWork = 123
    RULE_commitWork = 124
    RULE_rollbackWork = 125
    RULE_savepointStatement = 126
    RULE_rollbackStatement = 127
    RULE_releaseStatement = 128
    RULE_lockTables = 129
    RULE_unlockTables = 130
    RULE_setAutocommitStatement = 131
    RULE_setTransactionStatement = 132
    RULE_transactionMode = 133
    RULE_lockTableElement = 134
    RULE_lockAction = 135
    RULE_transactionOption = 136
    RULE_transactionLevel = 137
    RULE_changeMaster = 138
    RULE_changeReplicationFilter = 139
    RULE_purgeBinaryLogs = 140
    RULE_resetMaster = 141
    RULE_resetSlave = 142
    RULE_startSlave = 143
    RULE_stopSlave = 144
    RULE_startGroupReplication = 145
    RULE_stopGroupReplication = 146
    RULE_masterOption = 147
    RULE_stringMasterOption = 148
    RULE_decimalMasterOption = 149
    RULE_boolMasterOption = 150
    RULE_channelOption = 151
    RULE_replicationFilter = 152
    RULE_threadType = 153
    RULE_untilOption = 154
    RULE_connectionOption = 155
    RULE_gtuidSet = 156
    RULE_xaStartTransaction = 157
    RULE_xaEndTransaction = 158
    RULE_xaPrepareStatement = 159
    RULE_xaCommitWork = 160
    RULE_xaRollbackWork = 161
    RULE_xaRecoverWork = 162
    RULE_prepareStatement = 163
    RULE_executeStatement = 164
    RULE_deallocatePrepare = 165
    RULE_routineBody = 166
    RULE_blockStatement = 167
    RULE_caseStatement = 168
    RULE_ifStatement = 169
    RULE_iterateStatement = 170
    RULE_leaveStatement = 171
    RULE_loopStatement = 172
    RULE_repeatStatement = 173
    RULE_returnStatement = 174
    RULE_whileStatement = 175
    RULE_cursorStatement = 176
    RULE_declareVariable = 177
    RULE_declareCondition = 178
    RULE_declareCursor = 179
    RULE_declareHandler = 180
    RULE_handlerConditionValue = 181
    RULE_procedureSqlStatement = 182
    RULE_caseAlternative = 183
    RULE_elifAlternative = 184
    RULE_alterUser = 185
    RULE_createUser = 186
    RULE_dropUser = 187
    RULE_grantStatement = 188
    RULE_grantProxy = 189
    RULE_renameUser = 190
    RULE_revokeStatement = 191
    RULE_revokeProxy = 192
    RULE_setPasswordStatement = 193
    RULE_userPasswordOption = 194
    RULE_userAuthOption = 195
    RULE_tlsOption = 196
    RULE_userResourceOption = 197
    RULE_userLockOption = 198
    RULE_privelegeClause = 199
    RULE_privilege = 200
    RULE_privilegeLevel = 201
    RULE_analyzeTable = 202
    RULE_checkTable = 203
    RULE_checksumTable = 204
    RULE_optimizeTable = 205
    RULE_repairTable = 206
    RULE_checkTableOption = 207
    RULE_createUdfunction = 208
    RULE_installPlugin = 209
    RULE_uninstallPlugin = 210
    RULE_setStatement = 211
    RULE_showStatement = 212
    RULE_variableClause = 213
    RULE_showCommonEntity = 214
    RULE_showFilter = 215
    RULE_showGlobalInfoClause = 216
    RULE_showSchemaEntity = 217
    RULE_showProfileType = 218
    RULE_binlogStatement = 219
    RULE_cacheIndexStatement = 220
    RULE_flushStatement = 221
    RULE_killStatement = 222
    RULE_loadIndexIntoCache = 223
    RULE_resetStatement = 224
    RULE_shutdownStatement = 225
    RULE_tableIndexes = 226
    RULE_flushOption = 227
    RULE_loadedTableIndexes = 228
    RULE_simpleDescribeStatement = 229
    RULE_fullDescribeStatement = 230
    RULE_helpStatement = 231
    RULE_useStatement = 232
    RULE_describeObjectClause = 233
    RULE_fullId = 234
    RULE_tableName = 235
    RULE_fullColumnName = 236
    RULE_indexColumnName = 237
    RULE_userName = 238
    RULE_mysqlVariable = 239
    RULE_charsetName = 240
    RULE_collationName = 241
    RULE_engineName = 242
    RULE_uuidSet = 243
    RULE_xid = 244
    RULE_xuidStringId = 245
    RULE_authPlugin = 246
    RULE_uid = 247
    RULE_simpleId = 248
    RULE_dottedId = 249
    RULE_decimalLiteral = 250
    RULE_fileSizeLiteral = 251
    RULE_stringLiteral = 252
    RULE_booleanLiteral = 253
    RULE_hexadecimalLiteral = 254
    RULE_nullNotnull = 255
    RULE_constant = 256
    RULE_dataType = 257
    RULE_convertedDataType = 258
    RULE_lengthOneDimension = 259
    RULE_lengthTwoDimension = 260
    RULE_lengthTwoOptionalDimension = 261
    RULE_uidList = 262
    RULE_tables = 263
    RULE_tablePairs = 264
    RULE_indexColumnNames = 265
    RULE_expressions = 266
    RULE_constants = 267
    RULE_simpleStrings = 268
    RULE_userVariables = 269
    RULE_defaultValue = 270
    RULE_ifExists = 271
    RULE_ifNotExists = 272
    RULE_functionCall = 273
    RULE_specificFunction = 274
    RULE_levelsInWeightString = 275
    RULE_aggregateWindowedFunction = 276
    RULE_scalarFunctionName = 277
    RULE_passwordFunctionClause = 278
    RULE_functionArgs = 279
    RULE_functionArg = 280
    RULE_expression = 281
    RULE_predicate = 282
    RULE_expressionAtom = 283
    RULE_unaryOperator = 284
    RULE_comparisonOperator = 285
    RULE_logicalOperator = 286
    RULE_bitOperator = 287
    RULE_mathOperator = 288
    RULE_charsetNameBase = 289
    RULE_transactionLevelBase = 290
    RULE_privilegesBase = 291
    RULE_intervalTypeBase = 292
    RULE_dataTypeBase = 293
    RULE_keywordsCanBeId = 294
    RULE_functionNameBase = 295

    ruleNames =  [ "root", "sqlStatements", "sqlStatement", "emptyStatement", 
                   "ddlStatement", "dmlStatement", "transactionStatement", 
                   "replicationStatement", "preparedStatement", "compoundStatement", 
                   "administrationStatement", "utilityStatement", "createDatabase", 
                   "createEvent", "createIndex", "createLogfileGroup", "createProcedure", 
                   "createFunction", "createServer", "createTable", "createTablespaceInnodb", 
                   "createTablespaceNdb", "createTrigger", "createView", 
                   "createDatabaseOption", "ownerStatement", "scheduleExpression", 
                   "timestampValue", "intervalExpr", "intervalType", "enableType", 
                   "indexType", "indexOption", "procedureParameter", "functionParameter", 
                   "routineOption", "serverOption", "createDefinitions", 
                   "createDefinition", "columnDefinition", "columnConstraint", 
                   "tableConstraint", "referenceDefinition", "referenceAction", 
                   "referenceControlType", "indexColumnDefinition", "tableOption", 
                   "tablespaceStorage", "partitionDefinitions", "partitionFunctionDefinition", 
                   "subpartitionFunctionDefinition", "partitionDefinition", 
                   "subpartitionDefinition", "partitionOption", "alterDatabase", 
                   "alterEvent", "alterFunction", "alterInstance", "alterLogfileGroup", 
                   "alterProcedure", "alterServer", "alterTable", "alterTablespace", 
                   "alterView", "alterSpecification", "dropDatabase", "dropEvent", 
                   "dropIndex", "dropLogfileGroup", "dropProcedure", "dropFunction", 
                   "dropServer", "dropTable", "dropTablespace", "dropTrigger", 
                   "dropView", "renameTable", "truncateTable", "callStatement", 
                   "deleteStatement", "doStatement", "handlerStatement", 
                   "insertStatement", "loadDataStatement", "loadXmlStatement", 
                   "replaceStatement", "selectStatement", "updateStatement", 
                   "insertStatementValue", "updatedElement", "assignmentField", 
                   "lockClause", "singleDeleteStatement", "multipleDeleteStatement", 
                   "handlerOpenStatement", "handlerReadIndexStatement", 
                   "handlerReadStatement", "handlerCloseStatement", "singleUpdateStatement", 
                   "multipleUpdateStatement", "orderByClause", "orderByExpression", 
                   "tableSources", "tableSource", "tableSourceItem", "indexHint", 
                   "indexHintType", "joinPart", "subquery", "queryExpression", 
                   "queryExpressionNointo", "querySpecification", "querySpecificationNointo", 
                   "unionParenthesis", "unionStatement", "selectSpec", "selectElements", 
                   "selectElement", "selectIntoExpression", "fromClause", 
                   "groupByItem", "limitClause", "startTransaction", "beginWork", 
                   "commitWork", "rollbackWork", "savepointStatement", "rollbackStatement", 
                   "releaseStatement", "lockTables", "unlockTables", "setAutocommitStatement", 
                   "setTransactionStatement", "transactionMode", "lockTableElement", 
                   "lockAction", "transactionOption", "transactionLevel", 
                   "changeMaster", "changeReplicationFilter", "purgeBinaryLogs", 
                   "resetMaster", "resetSlave", "startSlave", "stopSlave", 
                   "startGroupReplication", "stopGroupReplication", "masterOption", 
                   "stringMasterOption", "decimalMasterOption", "boolMasterOption", 
                   "channelOption", "replicationFilter", "threadType", "untilOption", 
                   "connectionOption", "gtuidSet", "xaStartTransaction", 
                   "xaEndTransaction", "xaPrepareStatement", "xaCommitWork", 
                   "xaRollbackWork", "xaRecoverWork", "prepareStatement", 
                   "executeStatement", "deallocatePrepare", "routineBody", 
                   "blockStatement", "caseStatement", "ifStatement", "iterateStatement", 
                   "leaveStatement", "loopStatement", "repeatStatement", 
                   "returnStatement", "whileStatement", "cursorStatement", 
                   "declareVariable", "declareCondition", "declareCursor", 
                   "declareHandler", "handlerConditionValue", "procedureSqlStatement", 
                   "caseAlternative", "elifAlternative", "alterUser", "createUser", 
                   "dropUser", "grantStatement", "grantProxy", "renameUser", 
                   "revokeStatement", "revokeProxy", "setPasswordStatement", 
                   "userPasswordOption", "userAuthOption", "tlsOption", 
                   "userResourceOption", "userLockOption", "privelegeClause", 
                   "privilege", "privilegeLevel", "analyzeTable", "checkTable", 
                   "checksumTable", "optimizeTable", "repairTable", "checkTableOption", 
                   "createUdfunction", "installPlugin", "uninstallPlugin", 
                   "setStatement", "showStatement", "variableClause", "showCommonEntity", 
                   "showFilter", "showGlobalInfoClause", "showSchemaEntity", 
                   "showProfileType", "binlogStatement", "cacheIndexStatement", 
                   "flushStatement", "killStatement", "loadIndexIntoCache", 
                   "resetStatement", "shutdownStatement", "tableIndexes", 
                   "flushOption", "loadedTableIndexes", "simpleDescribeStatement", 
                   "fullDescribeStatement", "helpStatement", "useStatement", 
                   "describeObjectClause", "fullId", "tableName", "fullColumnName", 
                   "indexColumnName", "userName", "mysqlVariable", "charsetName", 
                   "collationName", "engineName", "uuidSet", "xid", "xuidStringId", 
                   "authPlugin", "uid", "simpleId", "dottedId", "decimalLiteral", 
                   "fileSizeLiteral", "stringLiteral", "booleanLiteral", 
                   "hexadecimalLiteral", "nullNotnull", "constant", "dataType", 
                   "convertedDataType", "lengthOneDimension", "lengthTwoDimension", 
                   "lengthTwoOptionalDimension", "uidList", "tables", "tablePairs", 
                   "indexColumnNames", "expressions", "constants", "simpleStrings", 
                   "userVariables", "defaultValue", "ifExists", "ifNotExists", 
                   "functionCall", "specificFunction", "levelsInWeightString", 
                   "aggregateWindowedFunction", "scalarFunctionName", "passwordFunctionClause", 
                   "functionArgs", "functionArg", "expression", "predicate", 
                   "expressionAtom", "unaryOperator", "comparisonOperator", 
                   "logicalOperator", "bitOperator", "mathOperator", "charsetNameBase", 
                   "transactionLevelBase", "privilegesBase", "intervalTypeBase", 
                   "dataTypeBase", "keywordsCanBeId", "functionNameBase" ]

    EOF = Token.EOF
    SPACE=1
    SPEC_MYSQL_COMMENT=2
    COMMENT_INPUT=3
    LINE_COMMENT=4
    ADD=5
    ALL=6
    ALTER=7
    ANALYZE=8
    AND=9
    AS=10
    ASC=11
    BEFORE=12
    BETWEEN=13
    BOTH=14
    BY=15
    CALL=16
    CASCADE=17
    CASE=18
    CAST=19
    CHANGE=20
    CHARACTER=21
    CHECK=22
    COLLATE=23
    COLUMN=24
    CONDITION=25
    CONSTRAINT=26
    CONTINUE=27
    CONVERT=28
    CREATE=29
    CROSS=30
    CURRENT_USER=31
    CURSOR=32
    DATABASE=33
    DATABASES=34
    DECLARE=35
    DEFAULT=36
    DELAYED=37
    DELETE=38
    DESC=39
    DESCRIBE=40
    DETERMINISTIC=41
    DISTINCT=42
    DISTINCTROW=43
    DROP=44
    EACH=45
    ELSE=46
    ELSEIF=47
    ENCLOSED=48
    ESCAPED=49
    EXISTS=50
    EXIT=51
    EXPLAIN=52
    FALSE=53
    FETCH=54
    FOR=55
    FORCE=56
    FOREIGN=57
    FROM=58
    FULLTEXT=59
    GRANT=60
    GROUP=61
    HAVING=62
    HIGH_PRIORITY=63
    IF=64
    IGNORE=65
    IN=66
    INDEX=67
    INFILE=68
    INNER=69
    INOUT=70
    INSERT=71
    INTERVAL=72
    INTO=73
    IS=74
    ITERATE=75
    JOIN=76
    KEY=77
    KEYS=78
    KILL=79
    LEADING=80
    LEAVE=81
    LEFT=82
    LIKE=83
    LIMIT=84
    LINEAR=85
    LINES=86
    LOAD=87
    LOCK=88
    LOOP=89
    LOW_PRIORITY=90
    MASTER_BIND=91
    MASTER_SSL_VERIFY_SERVER_CERT=92
    MATCH=93
    MAXVALUE=94
    MODIFIES=95
    NATURAL=96
    NOT=97
    NO_WRITE_TO_BINLOG=98
    NULL_LITERAL=99
    ON=100
    OPTIMIZE=101
    OPTION=102
    OPTIONALLY=103
    OR=104
    ORDER=105
    OUT=106
    OUTER=107
    OUTFILE=108
    PARTITION=109
    PRIMARY=110
    PROCEDURE=111
    PURGE=112
    RANGE=113
    READ=114
    READS=115
    REFERENCES=116
    REGEXP=117
    RELEASE=118
    RENAME=119
    REPEAT=120
    REPLACE=121
    REQUIRE=122
    RESTRICT=123
    RETURN=124
    REVOKE=125
    RIGHT=126
    RLIKE=127
    SCHEMA=128
    SCHEMAS=129
    SELECT=130
    SET=131
    SEPARATOR=132
    SHOW=133
    SPATIAL=134
    SQL=135
    SQLEXCEPTION=136
    SQLSTATE=137
    SQLWARNING=138
    SQL_BIG_RESULT=139
    SQL_CALC_FOUND_ROWS=140
    SQL_SMALL_RESULT=141
    SSL=142
    STARTING=143
    STRAIGHT_JOIN=144
    TABLE=145
    TERMINATED=146
    THEN=147
    TO=148
    TRAILING=149
    TRIGGER=150
    TRUE=151
    UNDO=152
    UNION=153
    UNIQUE=154
    UNLOCK=155
    UNSIGNED=156
    UPDATE=157
    USAGE=158
    USE=159
    USING=160
    VALUES=161
    WHEN=162
    WHERE=163
    WHILE=164
    WITH=165
    WRITE=166
    XOR=167
    ZEROFILL=168
    TINYINT=169
    SMALLINT=170
    MEDIUMINT=171
    INT=172
    INTEGER=173
    BIGINT=174
    REAL=175
    DOUBLE=176
    FLOAT=177
    DECIMAL=178
    NUMERIC=179
    DATE=180
    TIME=181
    TIMESTAMP=182
    DATETIME=183
    YEAR=184
    CHAR=185
    VARCHAR=186
    BINARY=187
    VARBINARY=188
    TINYBLOB=189
    BLOB=190
    MEDIUMBLOB=191
    LONGBLOB=192
    TINYTEXT=193
    TEXT=194
    MEDIUMTEXT=195
    LONGTEXT=196
    ENUM=197
    YEAR_MONTH=198
    DAY_HOUR=199
    DAY_MINUTE=200
    DAY_SECOND=201
    HOUR_MINUTE=202
    HOUR_SECOND=203
    MINUTE_SECOND=204
    SECOND_MICROSECOND=205
    MINUTE_MICROSECOND=206
    HOUR_MICROSECOND=207
    DAY_MICROSECOND=208
    AVG=209
    BIT_AND=210
    BIT_OR=211
    BIT_XOR=212
    COUNT=213
    GROUP_CONCAT=214
    MAX=215
    MIN=216
    STD=217
    STDDEV=218
    STDDEV_POP=219
    STDDEV_SAMP=220
    SUM=221
    VAR_POP=222
    VAR_SAMP=223
    VARIANCE=224
    CURRENT_DATE=225
    CURRENT_TIME=226
    CURRENT_TIMESTAMP=227
    LOCALTIME=228
    CURDATE=229
    CURTIME=230
    DATE_ADD=231
    DATE_SUB=232
    EXTRACT=233
    LOCALTIMESTAMP=234
    NOW=235
    POSITION=236
    SUBSTR=237
    SUBSTRING=238
    SYSDATE=239
    TRIM=240
    UTC_DATE=241
    UTC_TIME=242
    UTC_TIMESTAMP=243
    ACCOUNT=244
    ACTION=245
    AFTER=246
    AGGREGATE=247
    ALGORITHM=248
    ANY=249
    AT=250
    AUTHORS=251
    AUTOCOMMIT=252
    AUTOEXTEND_SIZE=253
    AUTO_INCREMENT=254
    AVG_ROW_LENGTH=255
    BEGIN=256
    BINLOG=257
    BIT=258
    BLOCK=259
    BTREE=260
    CACHE=261
    CASCADED=262
    CHAIN=263
    CHANGED=264
    CHANNEL=265
    CHECKSUM=266
    CIPHER=267
    CLIENT=268
    CLOSE=269
    COALESCE=270
    CODE=271
    COLUMNS=272
    COLUMN_FORMAT=273
    COMMENT=274
    COMMIT=275
    COMPACT=276
    COMPLETION=277
    COMPRESSED=278
    COMPRESSION=279
    CONCURRENT=280
    CONNECTION=281
    CONSISTENT=282
    CONTAINS=283
    CONTEXT=284
    CONTRIBUTORS=285
    COPY=286
    CPU=287
    DATA=288
    DATAFILE=289
    DEALLOCATE=290
    DEFAULT_AUTH=291
    DEFINER=292
    DELAY_KEY_WRITE=293
    DES_KEY_FILE=294
    DIRECTORY=295
    DISABLE=296
    DISCARD=297
    DISK=298
    DO=299
    DUMPFILE=300
    DUPLICATE=301
    DYNAMIC=302
    ENABLE=303
    ENCRYPTION=304
    END=305
    ENDS=306
    ENGINE=307
    ENGINES=308
    ERROR=309
    ERRORS=310
    ESCAPE=311
    EVEN=312
    EVENT=313
    EVENTS=314
    EVERY=315
    EXCHANGE=316
    EXCLUSIVE=317
    EXPIRE=318
    EXPORT=319
    EXTENDED=320
    EXTENT_SIZE=321
    FAST=322
    FAULTS=323
    FIELDS=324
    FILE_BLOCK_SIZE=325
    FILTER=326
    FIRST=327
    FIXED=328
    FLUSH=329
    FOLLOWS=330
    FOUND=331
    FULL=332
    FUNCTION=333
    GENERAL=334
    GLOBAL=335
    GRANTS=336
    GROUP_REPLICATION=337
    HANDLER=338
    HASH=339
    HELP=340
    HOST=341
    HOSTS=342
    IDENTIFIED=343
    IGNORE_SERVER_IDS=344
    IMPORT=345
    INDEXES=346
    INITIAL_SIZE=347
    INPLACE=348
    INSERT_METHOD=349
    INSTALL=350
    INSTANCE=351
    INVOKER=352
    IO=353
    IO_THREAD=354
    IPC=355
    ISOLATION=356
    ISSUER=357
    JSON=358
    KEY_BLOCK_SIZE=359
    LANGUAGE=360
    LAST=361
    LEAVES=362
    LESS=363
    LEVEL=364
    LIST=365
    LOCAL=366
    LOGFILE=367
    LOGS=368
    MASTER=369
    MASTER_AUTO_POSITION=370
    MASTER_CONNECT_RETRY=371
    MASTER_DELAY=372
    MASTER_HEARTBEAT_PERIOD=373
    MASTER_HOST=374
    MASTER_LOG_FILE=375
    MASTER_LOG_POS=376
    MASTER_PASSWORD=377
    MASTER_PORT=378
    MASTER_RETRY_COUNT=379
    MASTER_SSL=380
    MASTER_SSL_CA=381
    MASTER_SSL_CAPATH=382
    MASTER_SSL_CERT=383
    MASTER_SSL_CIPHER=384
    MASTER_SSL_CRL=385
    MASTER_SSL_CRLPATH=386
    MASTER_SSL_KEY=387
    MASTER_TLS_VERSION=388
    MASTER_USER=389
    MAX_CONNECTIONS_PER_HOUR=390
    MAX_QUERIES_PER_HOUR=391
    MAX_ROWS=392
    MAX_SIZE=393
    MAX_UPDATES_PER_HOUR=394
    MAX_USER_CONNECTIONS=395
    MEDIUM=396
    MERGE=397
    MID=398
    MIGRATE=399
    MIN_ROWS=400
    MODE=401
    MODIFY=402
    MUTEX=403
    MYSQL=404
    NAME=405
    NAMES=406
    NCHAR=407
    NEVER=408
    NEXT=409
    NO=410
    NODEGROUP=411
    NONE=412
    OFFLINE=413
    OFFSET=414
    OJ=415
    OLD_PASSWORD=416
    ONE=417
    ONLINE=418
    ONLY=419
    OPEN=420
    OPTIMIZER_COSTS=421
    OPTIONS=422
    OWNER=423
    PACK_KEYS=424
    PAGE=425
    PARSER=426
    PARTIAL=427
    PARTITIONING=428
    PARTITIONS=429
    PASSWORD=430
    PHASE=431
    PLUGIN=432
    PLUGIN_DIR=433
    PLUGINS=434
    PORT=435
    PRECEDES=436
    PREPARE=437
    PRESERVE=438
    PREV=439
    PROCESSLIST=440
    PROFILE=441
    PROFILES=442
    PROXY=443
    QUERY=444
    QUICK=445
    REBUILD=446
    RECOVER=447
    REDO_BUFFER_SIZE=448
    REDUNDANT=449
    RELAY=450
    RELAY_LOG_FILE=451
    RELAY_LOG_POS=452
    RELAYLOG=453
    REMOVE=454
    REORGANIZE=455
    REPAIR=456
    REPLICATE_DO_DB=457
    REPLICATE_DO_TABLE=458
    REPLICATE_IGNORE_DB=459
    REPLICATE_IGNORE_TABLE=460
    REPLICATE_REWRITE_DB=461
    REPLICATE_WILD_DO_TABLE=462
    REPLICATE_WILD_IGNORE_TABLE=463
    REPLICATION=464
    RESET=465
    RESUME=466
    RETURNS=467
    ROLLBACK=468
    ROLLUP=469
    ROTATE=470
    ROW=471
    ROWS=472
    ROW_FORMAT=473
    SAVEPOINT=474
    SCHEDULE=475
    SECURITY=476
    SERVER=477
    SESSION=478
    SHARE=479
    SHARED=480
    SIGNED=481
    SIMPLE=482
    SLAVE=483
    SLOW=484
    SNAPSHOT=485
    SOCKET=486
    SOME=487
    SONAME=488
    SOUNDS=489
    SOURCE=490
    SQL_AFTER_GTIDS=491
    SQL_AFTER_MTS_GAPS=492
    SQL_BEFORE_GTIDS=493
    SQL_BUFFER_RESULT=494
    SQL_CACHE=495
    SQL_NO_CACHE=496
    SQL_THREAD=497
    START=498
    STARTS=499
    STATS_AUTO_RECALC=500
    STATS_PERSISTENT=501
    STATS_SAMPLE_PAGES=502
    STATUS=503
    STOP=504
    STORAGE=505
    STRING=506
    SUBJECT=507
    SUBPARTITION=508
    SUBPARTITIONS=509
    SUSPEND=510
    SWAPS=511
    SWITCHES=512
    TABLESPACE=513
    TEMPORARY=514
    TEMPTABLE=515
    THAN=516
    TRADITIONAL=517
    TRANSACTION=518
    TRIGGERS=519
    TRUNCATE=520
    UNDEFINED=521
    UNDOFILE=522
    UNDO_BUFFER_SIZE=523
    UNINSTALL=524
    UNKNOWN=525
    UNTIL=526
    UPGRADE=527
    USER=528
    USE_FRM=529
    USER_RESOURCES=530
    VALIDATION=531
    VALUE=532
    VARIABLES=533
    VIEW=534
    WAIT=535
    WARNINGS=536
    WITHOUT=537
    WORK=538
    WRAPPER=539
    X509=540
    XA=541
    XML=542
    EUR=543
    USA=544
    JIS=545
    ISO=546
    INTERNAL=547
    QUARTER=548
    MONTH=549
    DAY=550
    HOUR=551
    MINUTE=552
    WEEK=553
    SECOND=554
    MICROSECOND=555
    TABLES=556
    ROUTINE=557
    EXECUTE=558
    FILE=559
    PROCESS=560
    RELOAD=561
    SHUTDOWN=562
    SUPER=563
    PRIVILEGES=564
    ARMSCII8=565
    ASCII=566
    BIG5=567
    CP1250=568
    CP1251=569
    CP1256=570
    CP1257=571
    CP850=572
    CP852=573
    CP866=574
    CP932=575
    DEC8=576
    EUCJPMS=577
    EUCKR=578
    GB2312=579
    GBK=580
    GEOSTD8=581
    GREEK=582
    HEBREW=583
    HP8=584
    KEYBCS2=585
    KOI8R=586
    KOI8U=587
    LATIN1=588
    LATIN2=589
    LATIN5=590
    LATIN7=591
    MACCE=592
    MACROMAN=593
    SJIS=594
    SWE7=595
    TIS620=596
    UCS2=597
    UJIS=598
    UTF16=599
    UTF16LE=600
    UTF32=601
    UTF8=602
    UTF8MB3=603
    UTF8MB4=604
    ARCHIVE=605
    BLACKHOLE=606
    CSV=607
    FEDERATED=608
    INNODB=609
    MEMORY=610
    MRG_MYISAM=611
    MYISAM=612
    NDB=613
    NDBCLUSTER=614
    PERFOMANCE_SCHEMA=615
    REPEATABLE=616
    COMMITTED=617
    UNCOMMITTED=618
    SERIALIZABLE=619
    GEOMETRYCOLLECTION=620
    LINESTRING=621
    MULTILINESTRING=622
    MULTIPOINT=623
    MULTIPOLYGON=624
    POINT=625
    POLYGON=626
    ABS=627
    ACOS=628
    ADDDATE=629
    ADDTIME=630
    AES_DECRYPT=631
    AES_ENCRYPT=632
    AREA=633
    ASBINARY=634
    ASIN=635
    ASTEXT=636
    ASWKB=637
    ASWKT=638
    ASYMMETRIC_DECRYPT=639
    ASYMMETRIC_DERIVE=640
    ASYMMETRIC_ENCRYPT=641
    ASYMMETRIC_SIGN=642
    ASYMMETRIC_VERIFY=643
    ATAN=644
    ATAN2=645
    BENCHMARK=646
    BIN=647
    BIT_COUNT=648
    BIT_LENGTH=649
    BUFFER=650
    CEIL=651
    CEILING=652
    CENTROID=653
    CHARACTER_LENGTH=654
    CHARSET=655
    CHAR_LENGTH=656
    COERCIBILITY=657
    COLLATION=658
    COMPRESS=659
    CONCAT=660
    CONCAT_WS=661
    CONNECTION_ID=662
    CONV=663
    CONVERT_TZ=664
    COS=665
    COT=666
    CRC32=667
    CREATE_ASYMMETRIC_PRIV_KEY=668
    CREATE_ASYMMETRIC_PUB_KEY=669
    CREATE_DH_PARAMETERS=670
    CREATE_DIGEST=671
    CROSSES=672
    DATEDIFF=673
    DATE_FORMAT=674
    DAYNAME=675
    DAYOFMONTH=676
    DAYOFWEEK=677
    DAYOFYEAR=678
    DECODE=679
    DEGREES=680
    DES_DECRYPT=681
    DES_ENCRYPT=682
    DIMENSION=683
    DISJOINT=684
    ELT=685
    ENCODE=686
    ENCRYPT=687
    ENDPOINT=688
    ENVELOPE=689
    EQUALS=690
    EXP=691
    EXPORT_SET=692
    EXTERIORRING=693
    EXTRACTVALUE=694
    FIELD=695
    FIND_IN_SET=696
    FLOOR=697
    FORMAT=698
    FOUND_ROWS=699
    FROM_BASE64=700
    FROM_DAYS=701
    FROM_UNIXTIME=702
    GEOMCOLLFROMTEXT=703
    GEOMCOLLFROMWKB=704
    GEOMETRYCOLLECTIONFROMTEXT=705
    GEOMETRYCOLLECTIONFROMWKB=706
    GEOMETRYFROMTEXT=707
    GEOMETRYFROMWKB=708
    GEOMETRYN=709
    GEOMETRYTYPE=710
    GEOMFROMTEXT=711
    GEOMFROMWKB=712
    GET_FORMAT=713
    GET_LOCK=714
    GLENGTH=715
    GREATEST=716
    GTID_SUBSET=717
    GTID_SUBTRACT=718
    HEX=719
    IFNULL=720
    INET6_ATON=721
    INET6_NTOA=722
    INET_ATON=723
    INET_NTOA=724
    INSTR=725
    INTERIORRINGN=726
    INTERSECTS=727
    ISCLOSED=728
    ISEMPTY=729
    ISNULL=730
    ISSIMPLE=731
    IS_FREE_LOCK=732
    IS_IPV4=733
    IS_IPV4_COMPAT=734
    IS_IPV4_MAPPED=735
    IS_IPV6=736
    IS_USED_LOCK=737
    LAST_INSERT_ID=738
    LCASE=739
    LEAST=740
    LENGTH=741
    LINEFROMTEXT=742
    LINEFROMWKB=743
    LINESTRINGFROMTEXT=744
    LINESTRINGFROMWKB=745
    LN=746
    LOAD_FILE=747
    LOCATE=748
    LOG=749
    LOG10=750
    LOG2=751
    LOWER=752
    LPAD=753
    LTRIM=754
    MAKEDATE=755
    MAKETIME=756
    MAKE_SET=757
    MASTER_POS_WAIT=758
    MBRCONTAINS=759
    MBRDISJOINT=760
    MBREQUAL=761
    MBRINTERSECTS=762
    MBROVERLAPS=763
    MBRTOUCHES=764
    MBRWITHIN=765
    MD5=766
    MLINEFROMTEXT=767
    MLINEFROMWKB=768
    MONTHNAME=769
    MPOINTFROMTEXT=770
    MPOINTFROMWKB=771
    MPOLYFROMTEXT=772
    MPOLYFROMWKB=773
    MULTILINESTRINGFROMTEXT=774
    MULTILINESTRINGFROMWKB=775
    MULTIPOINTFROMTEXT=776
    MULTIPOINTFROMWKB=777
    MULTIPOLYGONFROMTEXT=778
    MULTIPOLYGONFROMWKB=779
    NAME_CONST=780
    NULLIF=781
    NUMGEOMETRIES=782
    NUMINTERIORRINGS=783
    NUMPOINTS=784
    OCT=785
    OCTET_LENGTH=786
    ORD=787
    OVERLAPS=788
    PERIOD_ADD=789
    PERIOD_DIFF=790
    PI=791
    POINTFROMTEXT=792
    POINTFROMWKB=793
    POINTN=794
    POLYFROMTEXT=795
    POLYFROMWKB=796
    POLYGONFROMTEXT=797
    POLYGONFROMWKB=798
    POW=799
    POWER=800
    QUOTE=801
    RADIANS=802
    RAND=803
    RANDOM_BYTES=804
    RELEASE_LOCK=805
    REVERSE=806
    ROUND=807
    ROW_COUNT=808
    RPAD=809
    RTRIM=810
    SEC_TO_TIME=811
    SESSION_USER=812
    SHA=813
    SHA1=814
    SHA2=815
    SIGN=816
    SIN=817
    SLEEP=818
    SOUNDEX=819
    SQL_THREAD_WAIT_AFTER_GTIDS=820
    SQRT=821
    SRID=822
    STARTPOINT=823
    STRCMP=824
    STR_TO_DATE=825
    ST_AREA=826
    ST_ASBINARY=827
    ST_ASTEXT=828
    ST_ASWKB=829
    ST_ASWKT=830
    ST_BUFFER=831
    ST_CENTROID=832
    ST_CONTAINS=833
    ST_CROSSES=834
    ST_DIFFERENCE=835
    ST_DIMENSION=836
    ST_DISJOINT=837
    ST_DISTANCE=838
    ST_ENDPOINT=839
    ST_ENVELOPE=840
    ST_EQUALS=841
    ST_EXTERIORRING=842
    ST_GEOMCOLLFROMTEXT=843
    ST_GEOMCOLLFROMTXT=844
    ST_GEOMCOLLFROMWKB=845
    ST_GEOMETRYCOLLECTIONFROMTEXT=846
    ST_GEOMETRYCOLLECTIONFROMWKB=847
    ST_GEOMETRYFROMTEXT=848
    ST_GEOMETRYFROMWKB=849
    ST_GEOMETRYN=850
    ST_GEOMETRYTYPE=851
    ST_GEOMFROMTEXT=852
    ST_GEOMFROMWKB=853
    ST_INTERIORRINGN=854
    ST_INTERSECTION=855
    ST_INTERSECTS=856
    ST_ISCLOSED=857
    ST_ISEMPTY=858
    ST_ISSIMPLE=859
    ST_LINEFROMTEXT=860
    ST_LINEFROMWKB=861
    ST_LINESTRINGFROMTEXT=862
    ST_LINESTRINGFROMWKB=863
    ST_NUMGEOMETRIES=864
    ST_NUMINTERIORRING=865
    ST_NUMINTERIORRINGS=866
    ST_NUMPOINTS=867
    ST_OVERLAPS=868
    ST_POINTFROMTEXT=869
    ST_POINTFROMWKB=870
    ST_POINTN=871
    ST_POLYFROMTEXT=872
    ST_POLYFROMWKB=873
    ST_POLYGONFROMTEXT=874
    ST_POLYGONFROMWKB=875
    ST_SRID=876
    ST_STARTPOINT=877
    ST_SYMDIFFERENCE=878
    ST_TOUCHES=879
    ST_UNION=880
    ST_WITHIN=881
    ST_X=882
    ST_Y=883
    SUBDATE=884
    SUBSTRING_INDEX=885
    SUBTIME=886
    SYSTEM_USER=887
    TAN=888
    TIMEDIFF=889
    TIMESTAMPADD=890
    TIMESTAMPDIFF=891
    TIME_FORMAT=892
    TIME_TO_SEC=893
    TOUCHES=894
    TO_BASE64=895
    TO_DAYS=896
    TO_SECONDS=897
    UCASE=898
    UNCOMPRESS=899
    UNCOMPRESSED_LENGTH=900
    UNHEX=901
    UNIX_TIMESTAMP=902
    UPDATEXML=903
    UPPER=904
    UUID=905
    UUID_SHORT=906
    VALIDATE_PASSWORD_STRENGTH=907
    VERSION=908
    WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS=909
    WEEKDAY=910
    WEEKOFYEAR=911
    WEIGHT_STRING=912
    WITHIN=913
    YEARWEEK=914
    Y_FUNCTION=915
    X_FUNCTION=916
    VAR_ASSIGN=917
    PLUS_ASSIGN=918
    MINUS_ASSIGN=919
    MULT_ASSIGN=920
    DIV_ASSIGN=921
    MOD_ASSIGN=922
    AND_ASSIGN=923
    XOR_ASSIGN=924
    OR_ASSIGN=925
    STAR=926
    DIVIDE=927
    MODULE=928
    PLUS=929
    MINUS=930
    DIV=931
    MOD=932
    EQUAL_SYMBOL=933
    GREATER_SYMBOL=934
    LESS_SYMBOL=935
    EXCLAMATION_SYMBOL=936
    BIT_NOT_OP=937
    BIT_OR_OP=938
    BIT_AND_OP=939
    BIT_XOR_OP=940
    DOT=941
    LR_BRACKET=942
    RR_BRACKET=943
    COMMA=944
    SEMI=945
    AT_SIGN=946
    ZERO_DECIMAL=947
    ONE_DECIMAL=948
    TWO_DECIMAL=949
    SINGLE_QUOTE_SYMB=950
    DOUBLE_QUOTE_SYMB=951
    REVERSE_QUOTE_SYMB=952
    COLON_SYMB=953
    CHARSET_REVERSE_QOUTE_STRING=954
    FILESIZE_LITERAL=955
    START_NATIONAL_STRING_LITERAL=956
    STRING_LITERAL=957
    DECIMAL_LITERAL=958
    HEXADECIMAL_LITERAL=959
    REAL_LITERAL=960
    NULL_SPEC_LITERAL=961
    BIT_STRING=962
    STRING_CHARSET_NAME=963
    DOT_ID=964
    ID=965
    REVERSE_QUOTE_ID=966
    STRING_USER_NAME=967
    LOCAL_ID=968
    GLOBAL_ID=969
    ERROR_RECONGNIGION=970

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class RootContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(mysqlParser.EOF, 0)

        def sqlStatements(self):
            return self.getTypedRuleContext(mysqlParser.SqlStatementsContext,0)


        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.MINUS)
            else:
                return self.getToken(mysqlParser.MINUS, i)

        def getRuleIndex(self):
            return mysqlParser.RULE_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot" ):
                listener.enterRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot" ):
                listener.exitRoot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoot" ):
                return visitor.visitRoot(self)
            else:
                return visitor.visitChildren(self)




    def root(self):

        localctx = mysqlParser.RootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_root)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << mysqlParser.ALTER) | (1 << mysqlParser.ANALYZE) | (1 << mysqlParser.CALL) | (1 << mysqlParser.CHANGE) | (1 << mysqlParser.CHECK) | (1 << mysqlParser.CREATE) | (1 << mysqlParser.DELETE) | (1 << mysqlParser.DESC) | (1 << mysqlParser.DESCRIBE) | (1 << mysqlParser.DROP) | (1 << mysqlParser.EXPLAIN) | (1 << mysqlParser.GRANT))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (mysqlParser.INSERT - 71)) | (1 << (mysqlParser.KILL - 71)) | (1 << (mysqlParser.LOAD - 71)) | (1 << (mysqlParser.LOCK - 71)) | (1 << (mysqlParser.OPTIMIZE - 71)) | (1 << (mysqlParser.PURGE - 71)) | (1 << (mysqlParser.RELEASE - 71)) | (1 << (mysqlParser.RENAME - 71)) | (1 << (mysqlParser.REPLACE - 71)) | (1 << (mysqlParser.REVOKE - 71)) | (1 << (mysqlParser.SELECT - 71)) | (1 << (mysqlParser.SET - 71)) | (1 << (mysqlParser.SHOW - 71)))) != 0) or ((((_la - 155)) & ~0x3f) == 0 and ((1 << (_la - 155)) & ((1 << (mysqlParser.UNLOCK - 155)) | (1 << (mysqlParser.UPDATE - 155)) | (1 << (mysqlParser.USE - 155)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (mysqlParser.BEGIN - 256)) | (1 << (mysqlParser.BINLOG - 256)) | (1 << (mysqlParser.CACHE - 256)) | (1 << (mysqlParser.CHECKSUM - 256)) | (1 << (mysqlParser.COMMIT - 256)) | (1 << (mysqlParser.DEALLOCATE - 256)) | (1 << (mysqlParser.DO - 256)))) != 0) or ((((_la - 329)) & ~0x3f) == 0 and ((1 << (_la - 329)) & ((1 << (mysqlParser.FLUSH - 329)) | (1 << (mysqlParser.HANDLER - 329)) | (1 << (mysqlParser.HELP - 329)) | (1 << (mysqlParser.INSTALL - 329)))) != 0) or ((((_la - 437)) & ~0x3f) == 0 and ((1 << (_la - 437)) & ((1 << (mysqlParser.PREPARE - 437)) | (1 << (mysqlParser.REPAIR - 437)) | (1 << (mysqlParser.RESET - 437)) | (1 << (mysqlParser.ROLLBACK - 437)) | (1 << (mysqlParser.SAVEPOINT - 437)) | (1 << (mysqlParser.START - 437)))) != 0) or ((((_la - 504)) & ~0x3f) == 0 and ((1 << (_la - 504)) & ((1 << (mysqlParser.STOP - 504)) | (1 << (mysqlParser.TRUNCATE - 504)) | (1 << (mysqlParser.UNINSTALL - 504)) | (1 << (mysqlParser.XA - 504)) | (1 << (mysqlParser.EXECUTE - 504)) | (1 << (mysqlParser.SHUTDOWN - 504)))) != 0) or _la==mysqlParser.LR_BRACKET or _la==mysqlParser.SEMI:
                self.state = 592
                self.sqlStatements()


            self.state = 597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.MINUS:
                self.state = 595
                self.match(mysqlParser.MINUS)
                self.state = 596
                self.match(mysqlParser.MINUS)


            self.state = 599
            self.match(mysqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SqlStatementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.SqlStatementContext)
            else:
                return self.getTypedRuleContext(mysqlParser.SqlStatementContext,i)


        def emptyStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.EmptyStatementContext)
            else:
                return self.getTypedRuleContext(mysqlParser.EmptyStatementContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.SEMI)
            else:
                return self.getToken(mysqlParser.SEMI, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.MINUS)
            else:
                return self.getToken(mysqlParser.MINUS, i)

        def getRuleIndex(self):
            return mysqlParser.RULE_sqlStatements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlStatements" ):
                listener.enterSqlStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlStatements" ):
                listener.exitSqlStatements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlStatements" ):
                return visitor.visitSqlStatements(self)
            else:
                return visitor.visitChildren(self)




    def sqlStatements(self):

        localctx = mysqlParser.SqlStatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_sqlStatements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 611
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 609
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [mysqlParser.ALTER, mysqlParser.ANALYZE, mysqlParser.CALL, mysqlParser.CHANGE, mysqlParser.CHECK, mysqlParser.CREATE, mysqlParser.DELETE, mysqlParser.DESC, mysqlParser.DESCRIBE, mysqlParser.DROP, mysqlParser.EXPLAIN, mysqlParser.GRANT, mysqlParser.INSERT, mysqlParser.KILL, mysqlParser.LOAD, mysqlParser.LOCK, mysqlParser.OPTIMIZE, mysqlParser.PURGE, mysqlParser.RELEASE, mysqlParser.RENAME, mysqlParser.REPLACE, mysqlParser.REVOKE, mysqlParser.SELECT, mysqlParser.SET, mysqlParser.SHOW, mysqlParser.UNLOCK, mysqlParser.UPDATE, mysqlParser.USE, mysqlParser.BEGIN, mysqlParser.BINLOG, mysqlParser.CACHE, mysqlParser.CHECKSUM, mysqlParser.COMMIT, mysqlParser.DEALLOCATE, mysqlParser.DO, mysqlParser.FLUSH, mysqlParser.HANDLER, mysqlParser.HELP, mysqlParser.INSTALL, mysqlParser.PREPARE, mysqlParser.REPAIR, mysqlParser.RESET, mysqlParser.ROLLBACK, mysqlParser.SAVEPOINT, mysqlParser.START, mysqlParser.STOP, mysqlParser.TRUNCATE, mysqlParser.UNINSTALL, mysqlParser.XA, mysqlParser.EXECUTE, mysqlParser.SHUTDOWN, mysqlParser.LR_BRACKET]:
                        self.state = 601
                        self.sqlStatement()
                        self.state = 604
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==mysqlParser.MINUS:
                            self.state = 602
                            self.match(mysqlParser.MINUS)
                            self.state = 603
                            self.match(mysqlParser.MINUS)


                        self.state = 606
                        self.match(mysqlParser.SEMI)
                        pass
                    elif token in [mysqlParser.SEMI]:
                        self.state = 608
                        self.emptyStatement()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 613
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

            self.state = 623
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.ALTER, mysqlParser.ANALYZE, mysqlParser.CALL, mysqlParser.CHANGE, mysqlParser.CHECK, mysqlParser.CREATE, mysqlParser.DELETE, mysqlParser.DESC, mysqlParser.DESCRIBE, mysqlParser.DROP, mysqlParser.EXPLAIN, mysqlParser.GRANT, mysqlParser.INSERT, mysqlParser.KILL, mysqlParser.LOAD, mysqlParser.LOCK, mysqlParser.OPTIMIZE, mysqlParser.PURGE, mysqlParser.RELEASE, mysqlParser.RENAME, mysqlParser.REPLACE, mysqlParser.REVOKE, mysqlParser.SELECT, mysqlParser.SET, mysqlParser.SHOW, mysqlParser.UNLOCK, mysqlParser.UPDATE, mysqlParser.USE, mysqlParser.BEGIN, mysqlParser.BINLOG, mysqlParser.CACHE, mysqlParser.CHECKSUM, mysqlParser.COMMIT, mysqlParser.DEALLOCATE, mysqlParser.DO, mysqlParser.FLUSH, mysqlParser.HANDLER, mysqlParser.HELP, mysqlParser.INSTALL, mysqlParser.PREPARE, mysqlParser.REPAIR, mysqlParser.RESET, mysqlParser.ROLLBACK, mysqlParser.SAVEPOINT, mysqlParser.START, mysqlParser.STOP, mysqlParser.TRUNCATE, mysqlParser.UNINSTALL, mysqlParser.XA, mysqlParser.EXECUTE, mysqlParser.SHUTDOWN, mysqlParser.LR_BRACKET]:
                self.state = 614
                self.sqlStatement()
                self.state = 620
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
                if la_ == 1:
                    self.state = 617
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==mysqlParser.MINUS:
                        self.state = 615
                        self.match(mysqlParser.MINUS)
                        self.state = 616
                        self.match(mysqlParser.MINUS)


                    self.state = 619
                    self.match(mysqlParser.SEMI)


                pass
            elif token in [mysqlParser.SEMI]:
                self.state = 622
                self.emptyStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SqlStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ddlStatement(self):
            return self.getTypedRuleContext(mysqlParser.DdlStatementContext,0)


        def dmlStatement(self):
            return self.getTypedRuleContext(mysqlParser.DmlStatementContext,0)


        def transactionStatement(self):
            return self.getTypedRuleContext(mysqlParser.TransactionStatementContext,0)


        def replicationStatement(self):
            return self.getTypedRuleContext(mysqlParser.ReplicationStatementContext,0)


        def preparedStatement(self):
            return self.getTypedRuleContext(mysqlParser.PreparedStatementContext,0)


        def administrationStatement(self):
            return self.getTypedRuleContext(mysqlParser.AdministrationStatementContext,0)


        def utilityStatement(self):
            return self.getTypedRuleContext(mysqlParser.UtilityStatementContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_sqlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlStatement" ):
                listener.enterSqlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlStatement" ):
                listener.exitSqlStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlStatement" ):
                return visitor.visitSqlStatement(self)
            else:
                return visitor.visitChildren(self)




    def sqlStatement(self):

        localctx = mysqlParser.SqlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sqlStatement)
        try:
            self.state = 632
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 625
                self.ddlStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 626
                self.dmlStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 627
                self.transactionStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 628
                self.replicationStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 629
                self.preparedStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 630
                self.administrationStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 631
                self.utilityStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EmptyStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(mysqlParser.SEMI, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_emptyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyStatement" ):
                listener.enterEmptyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyStatement" ):
                listener.exitEmptyStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyStatement" ):
                return visitor.visitEmptyStatement(self)
            else:
                return visitor.visitChildren(self)




    def emptyStatement(self):

        localctx = mysqlParser.EmptyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_emptyStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 634
            self.match(mysqlParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DdlStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createDatabase(self):
            return self.getTypedRuleContext(mysqlParser.CreateDatabaseContext,0)


        def createEvent(self):
            return self.getTypedRuleContext(mysqlParser.CreateEventContext,0)


        def createIndex(self):
            return self.getTypedRuleContext(mysqlParser.CreateIndexContext,0)


        def createLogfileGroup(self):
            return self.getTypedRuleContext(mysqlParser.CreateLogfileGroupContext,0)


        def createProcedure(self):
            return self.getTypedRuleContext(mysqlParser.CreateProcedureContext,0)


        def createFunction(self):
            return self.getTypedRuleContext(mysqlParser.CreateFunctionContext,0)


        def createServer(self):
            return self.getTypedRuleContext(mysqlParser.CreateServerContext,0)


        def createTable(self):
            return self.getTypedRuleContext(mysqlParser.CreateTableContext,0)


        def createTablespaceInnodb(self):
            return self.getTypedRuleContext(mysqlParser.CreateTablespaceInnodbContext,0)


        def createTablespaceNdb(self):
            return self.getTypedRuleContext(mysqlParser.CreateTablespaceNdbContext,0)


        def createTrigger(self):
            return self.getTypedRuleContext(mysqlParser.CreateTriggerContext,0)


        def createView(self):
            return self.getTypedRuleContext(mysqlParser.CreateViewContext,0)


        def alterDatabase(self):
            return self.getTypedRuleContext(mysqlParser.AlterDatabaseContext,0)


        def alterEvent(self):
            return self.getTypedRuleContext(mysqlParser.AlterEventContext,0)


        def alterFunction(self):
            return self.getTypedRuleContext(mysqlParser.AlterFunctionContext,0)


        def alterInstance(self):
            return self.getTypedRuleContext(mysqlParser.AlterInstanceContext,0)


        def alterLogfileGroup(self):
            return self.getTypedRuleContext(mysqlParser.AlterLogfileGroupContext,0)


        def alterProcedure(self):
            return self.getTypedRuleContext(mysqlParser.AlterProcedureContext,0)


        def alterServer(self):
            return self.getTypedRuleContext(mysqlParser.AlterServerContext,0)


        def alterTable(self):
            return self.getTypedRuleContext(mysqlParser.AlterTableContext,0)


        def alterTablespace(self):
            return self.getTypedRuleContext(mysqlParser.AlterTablespaceContext,0)


        def alterView(self):
            return self.getTypedRuleContext(mysqlParser.AlterViewContext,0)


        def dropDatabase(self):
            return self.getTypedRuleContext(mysqlParser.DropDatabaseContext,0)


        def dropEvent(self):
            return self.getTypedRuleContext(mysqlParser.DropEventContext,0)


        def dropIndex(self):
            return self.getTypedRuleContext(mysqlParser.DropIndexContext,0)


        def dropLogfileGroup(self):
            return self.getTypedRuleContext(mysqlParser.DropLogfileGroupContext,0)


        def dropProcedure(self):
            return self.getTypedRuleContext(mysqlParser.DropProcedureContext,0)


        def dropFunction(self):
            return self.getTypedRuleContext(mysqlParser.DropFunctionContext,0)


        def dropServer(self):
            return self.getTypedRuleContext(mysqlParser.DropServerContext,0)


        def dropTable(self):
            return self.getTypedRuleContext(mysqlParser.DropTableContext,0)


        def dropTablespace(self):
            return self.getTypedRuleContext(mysqlParser.DropTablespaceContext,0)


        def dropTrigger(self):
            return self.getTypedRuleContext(mysqlParser.DropTriggerContext,0)


        def dropView(self):
            return self.getTypedRuleContext(mysqlParser.DropViewContext,0)


        def renameTable(self):
            return self.getTypedRuleContext(mysqlParser.RenameTableContext,0)


        def truncateTable(self):
            return self.getTypedRuleContext(mysqlParser.TruncateTableContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_ddlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdlStatement" ):
                listener.enterDdlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdlStatement" ):
                listener.exitDdlStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDdlStatement" ):
                return visitor.visitDdlStatement(self)
            else:
                return visitor.visitChildren(self)




    def ddlStatement(self):

        localctx = mysqlParser.DdlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_ddlStatement)
        try:
            self.state = 671
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 636
                self.createDatabase()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 637
                self.createEvent()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 638
                self.createIndex()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 639
                self.createLogfileGroup()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 640
                self.createProcedure()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 641
                self.createFunction()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 642
                self.createServer()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 643
                self.createTable()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 644
                self.createTablespaceInnodb()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 645
                self.createTablespaceNdb()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 646
                self.createTrigger()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 647
                self.createView()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 648
                self.alterDatabase()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 649
                self.alterEvent()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 650
                self.alterFunction()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 651
                self.alterInstance()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 652
                self.alterLogfileGroup()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 653
                self.alterProcedure()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 654
                self.alterServer()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 655
                self.alterTable()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 656
                self.alterTablespace()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 657
                self.alterView()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 658
                self.dropDatabase()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 659
                self.dropEvent()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 660
                self.dropIndex()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 661
                self.dropLogfileGroup()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 662
                self.dropProcedure()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 663
                self.dropFunction()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 664
                self.dropServer()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 665
                self.dropTable()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 666
                self.dropTablespace()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 667
                self.dropTrigger()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 668
                self.dropView()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 669
                self.renameTable()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 670
                self.truncateTable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DmlStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStatement(self):
            return self.getTypedRuleContext(mysqlParser.SelectStatementContext,0)


        def insertStatement(self):
            return self.getTypedRuleContext(mysqlParser.InsertStatementContext,0)


        def updateStatement(self):
            return self.getTypedRuleContext(mysqlParser.UpdateStatementContext,0)


        def deleteStatement(self):
            return self.getTypedRuleContext(mysqlParser.DeleteStatementContext,0)


        def replaceStatement(self):
            return self.getTypedRuleContext(mysqlParser.ReplaceStatementContext,0)


        def callStatement(self):
            return self.getTypedRuleContext(mysqlParser.CallStatementContext,0)


        def loadDataStatement(self):
            return self.getTypedRuleContext(mysqlParser.LoadDataStatementContext,0)


        def loadXmlStatement(self):
            return self.getTypedRuleContext(mysqlParser.LoadXmlStatementContext,0)


        def doStatement(self):
            return self.getTypedRuleContext(mysqlParser.DoStatementContext,0)


        def handlerStatement(self):
            return self.getTypedRuleContext(mysqlParser.HandlerStatementContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_dmlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDmlStatement" ):
                listener.enterDmlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDmlStatement" ):
                listener.exitDmlStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDmlStatement" ):
                return visitor.visitDmlStatement(self)
            else:
                return visitor.visitChildren(self)




    def dmlStatement(self):

        localctx = mysqlParser.DmlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_dmlStatement)
        try:
            self.state = 683
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 673
                self.selectStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 674
                self.insertStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 675
                self.updateStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 676
                self.deleteStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 677
                self.replaceStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 678
                self.callStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 679
                self.loadDataStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 680
                self.loadXmlStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 681
                self.doStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 682
                self.handlerStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TransactionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def startTransaction(self):
            return self.getTypedRuleContext(mysqlParser.StartTransactionContext,0)


        def beginWork(self):
            return self.getTypedRuleContext(mysqlParser.BeginWorkContext,0)


        def commitWork(self):
            return self.getTypedRuleContext(mysqlParser.CommitWorkContext,0)


        def rollbackWork(self):
            return self.getTypedRuleContext(mysqlParser.RollbackWorkContext,0)


        def savepointStatement(self):
            return self.getTypedRuleContext(mysqlParser.SavepointStatementContext,0)


        def rollbackStatement(self):
            return self.getTypedRuleContext(mysqlParser.RollbackStatementContext,0)


        def releaseStatement(self):
            return self.getTypedRuleContext(mysqlParser.ReleaseStatementContext,0)


        def lockTables(self):
            return self.getTypedRuleContext(mysqlParser.LockTablesContext,0)


        def unlockTables(self):
            return self.getTypedRuleContext(mysqlParser.UnlockTablesContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_transactionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionStatement" ):
                listener.enterTransactionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionStatement" ):
                listener.exitTransactionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransactionStatement" ):
                return visitor.visitTransactionStatement(self)
            else:
                return visitor.visitChildren(self)




    def transactionStatement(self):

        localctx = mysqlParser.TransactionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_transactionStatement)
        try:
            self.state = 694
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 685
                self.startTransaction()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 686
                self.beginWork()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 687
                self.commitWork()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 688
                self.rollbackWork()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 689
                self.savepointStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 690
                self.rollbackStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 691
                self.releaseStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 692
                self.lockTables()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 693
                self.unlockTables()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReplicationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def changeMaster(self):
            return self.getTypedRuleContext(mysqlParser.ChangeMasterContext,0)


        def changeReplicationFilter(self):
            return self.getTypedRuleContext(mysqlParser.ChangeReplicationFilterContext,0)


        def purgeBinaryLogs(self):
            return self.getTypedRuleContext(mysqlParser.PurgeBinaryLogsContext,0)


        def resetMaster(self):
            return self.getTypedRuleContext(mysqlParser.ResetMasterContext,0)


        def resetSlave(self):
            return self.getTypedRuleContext(mysqlParser.ResetSlaveContext,0)


        def startSlave(self):
            return self.getTypedRuleContext(mysqlParser.StartSlaveContext,0)


        def stopSlave(self):
            return self.getTypedRuleContext(mysqlParser.StopSlaveContext,0)


        def startGroupReplication(self):
            return self.getTypedRuleContext(mysqlParser.StartGroupReplicationContext,0)


        def stopGroupReplication(self):
            return self.getTypedRuleContext(mysqlParser.StopGroupReplicationContext,0)


        def xaStartTransaction(self):
            return self.getTypedRuleContext(mysqlParser.XaStartTransactionContext,0)


        def xaEndTransaction(self):
            return self.getTypedRuleContext(mysqlParser.XaEndTransactionContext,0)


        def xaPrepareStatement(self):
            return self.getTypedRuleContext(mysqlParser.XaPrepareStatementContext,0)


        def xaCommitWork(self):
            return self.getTypedRuleContext(mysqlParser.XaCommitWorkContext,0)


        def xaRollbackWork(self):
            return self.getTypedRuleContext(mysqlParser.XaRollbackWorkContext,0)


        def xaRecoverWork(self):
            return self.getTypedRuleContext(mysqlParser.XaRecoverWorkContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_replicationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplicationStatement" ):
                listener.enterReplicationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplicationStatement" ):
                listener.exitReplicationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplicationStatement" ):
                return visitor.visitReplicationStatement(self)
            else:
                return visitor.visitChildren(self)




    def replicationStatement(self):

        localctx = mysqlParser.ReplicationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_replicationStatement)
        try:
            self.state = 711
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 696
                self.changeMaster()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 697
                self.changeReplicationFilter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 698
                self.purgeBinaryLogs()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 699
                self.resetMaster()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 700
                self.resetSlave()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 701
                self.startSlave()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 702
                self.stopSlave()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 703
                self.startGroupReplication()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 704
                self.stopGroupReplication()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 705
                self.xaStartTransaction()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 706
                self.xaEndTransaction()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 707
                self.xaPrepareStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 708
                self.xaCommitWork()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 709
                self.xaRollbackWork()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 710
                self.xaRecoverWork()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PreparedStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prepareStatement(self):
            return self.getTypedRuleContext(mysqlParser.PrepareStatementContext,0)


        def executeStatement(self):
            return self.getTypedRuleContext(mysqlParser.ExecuteStatementContext,0)


        def deallocatePrepare(self):
            return self.getTypedRuleContext(mysqlParser.DeallocatePrepareContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_preparedStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreparedStatement" ):
                listener.enterPreparedStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreparedStatement" ):
                listener.exitPreparedStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPreparedStatement" ):
                return visitor.visitPreparedStatement(self)
            else:
                return visitor.visitChildren(self)




    def preparedStatement(self):

        localctx = mysqlParser.PreparedStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_preparedStatement)
        try:
            self.state = 716
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.PREPARE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 713
                self.prepareStatement()
                pass
            elif token in [mysqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 714
                self.executeStatement()
                pass
            elif token in [mysqlParser.DROP, mysqlParser.DEALLOCATE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 715
                self.deallocatePrepare()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompoundStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockStatement(self):
            return self.getTypedRuleContext(mysqlParser.BlockStatementContext,0)


        def caseStatement(self):
            return self.getTypedRuleContext(mysqlParser.CaseStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(mysqlParser.IfStatementContext,0)


        def leaveStatement(self):
            return self.getTypedRuleContext(mysqlParser.LeaveStatementContext,0)


        def loopStatement(self):
            return self.getTypedRuleContext(mysqlParser.LoopStatementContext,0)


        def repeatStatement(self):
            return self.getTypedRuleContext(mysqlParser.RepeatStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(mysqlParser.WhileStatementContext,0)


        def iterateStatement(self):
            return self.getTypedRuleContext(mysqlParser.IterateStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(mysqlParser.ReturnStatementContext,0)


        def cursorStatement(self):
            return self.getTypedRuleContext(mysqlParser.CursorStatementContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_compoundStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStatement" ):
                listener.enterCompoundStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStatement" ):
                listener.exitCompoundStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundStatement" ):
                return visitor.visitCompoundStatement(self)
            else:
                return visitor.visitChildren(self)




    def compoundStatement(self):

        localctx = mysqlParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_compoundStatement)
        try:
            self.state = 728
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 718
                self.blockStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 719
                self.caseStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 720
                self.ifStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 721
                self.leaveStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 722
                self.loopStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 723
                self.repeatStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 724
                self.whileStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 725
                self.iterateStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 726
                self.returnStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 727
                self.cursorStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AdministrationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterUser(self):
            return self.getTypedRuleContext(mysqlParser.AlterUserContext,0)


        def createUser(self):
            return self.getTypedRuleContext(mysqlParser.CreateUserContext,0)


        def dropUser(self):
            return self.getTypedRuleContext(mysqlParser.DropUserContext,0)


        def grantStatement(self):
            return self.getTypedRuleContext(mysqlParser.GrantStatementContext,0)


        def grantProxy(self):
            return self.getTypedRuleContext(mysqlParser.GrantProxyContext,0)


        def renameUser(self):
            return self.getTypedRuleContext(mysqlParser.RenameUserContext,0)


        def revokeStatement(self):
            return self.getTypedRuleContext(mysqlParser.RevokeStatementContext,0)


        def revokeProxy(self):
            return self.getTypedRuleContext(mysqlParser.RevokeProxyContext,0)


        def analyzeTable(self):
            return self.getTypedRuleContext(mysqlParser.AnalyzeTableContext,0)


        def checkTable(self):
            return self.getTypedRuleContext(mysqlParser.CheckTableContext,0)


        def checksumTable(self):
            return self.getTypedRuleContext(mysqlParser.ChecksumTableContext,0)


        def optimizeTable(self):
            return self.getTypedRuleContext(mysqlParser.OptimizeTableContext,0)


        def repairTable(self):
            return self.getTypedRuleContext(mysqlParser.RepairTableContext,0)


        def createUdfunction(self):
            return self.getTypedRuleContext(mysqlParser.CreateUdfunctionContext,0)


        def installPlugin(self):
            return self.getTypedRuleContext(mysqlParser.InstallPluginContext,0)


        def uninstallPlugin(self):
            return self.getTypedRuleContext(mysqlParser.UninstallPluginContext,0)


        def setStatement(self):
            return self.getTypedRuleContext(mysqlParser.SetStatementContext,0)


        def showStatement(self):
            return self.getTypedRuleContext(mysqlParser.ShowStatementContext,0)


        def binlogStatement(self):
            return self.getTypedRuleContext(mysqlParser.BinlogStatementContext,0)


        def cacheIndexStatement(self):
            return self.getTypedRuleContext(mysqlParser.CacheIndexStatementContext,0)


        def flushStatement(self):
            return self.getTypedRuleContext(mysqlParser.FlushStatementContext,0)


        def killStatement(self):
            return self.getTypedRuleContext(mysqlParser.KillStatementContext,0)


        def loadIndexIntoCache(self):
            return self.getTypedRuleContext(mysqlParser.LoadIndexIntoCacheContext,0)


        def resetStatement(self):
            return self.getTypedRuleContext(mysqlParser.ResetStatementContext,0)


        def shutdownStatement(self):
            return self.getTypedRuleContext(mysqlParser.ShutdownStatementContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_administrationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdministrationStatement" ):
                listener.enterAdministrationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdministrationStatement" ):
                listener.exitAdministrationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdministrationStatement" ):
                return visitor.visitAdministrationStatement(self)
            else:
                return visitor.visitChildren(self)




    def administrationStatement(self):

        localctx = mysqlParser.AdministrationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_administrationStatement)
        try:
            self.state = 755
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 730
                self.alterUser()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 731
                self.createUser()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 732
                self.dropUser()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 733
                self.grantStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 734
                self.grantProxy()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 735
                self.renameUser()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 736
                self.revokeStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 737
                self.revokeProxy()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 738
                self.analyzeTable()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 739
                self.checkTable()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 740
                self.checksumTable()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 741
                self.optimizeTable()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 742
                self.repairTable()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 743
                self.createUdfunction()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 744
                self.installPlugin()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 745
                self.uninstallPlugin()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 746
                self.setStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 747
                self.showStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 748
                self.binlogStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 749
                self.cacheIndexStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 750
                self.flushStatement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 751
                self.killStatement()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 752
                self.loadIndexIntoCache()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 753
                self.resetStatement()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 754
                self.shutdownStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UtilityStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleDescribeStatement(self):
            return self.getTypedRuleContext(mysqlParser.SimpleDescribeStatementContext,0)


        def fullDescribeStatement(self):
            return self.getTypedRuleContext(mysqlParser.FullDescribeStatementContext,0)


        def helpStatement(self):
            return self.getTypedRuleContext(mysqlParser.HelpStatementContext,0)


        def useStatement(self):
            return self.getTypedRuleContext(mysqlParser.UseStatementContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_utilityStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUtilityStatement" ):
                listener.enterUtilityStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUtilityStatement" ):
                listener.exitUtilityStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUtilityStatement" ):
                return visitor.visitUtilityStatement(self)
            else:
                return visitor.visitChildren(self)




    def utilityStatement(self):

        localctx = mysqlParser.UtilityStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_utilityStatement)
        try:
            self.state = 761
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 757
                self.simpleDescribeStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 758
                self.fullDescribeStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 759
                self.helpStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 760
                self.useStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateDatabaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dbFormat = None # Token

        def CREATE(self):
            return self.getToken(mysqlParser.CREATE, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def DATABASE(self):
            return self.getToken(mysqlParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(mysqlParser.SCHEMA, 0)

        def ifNotExists(self):
            return self.getTypedRuleContext(mysqlParser.IfNotExistsContext,0)


        def createDatabaseOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.CreateDatabaseOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.CreateDatabaseOptionContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_createDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDatabase" ):
                listener.enterCreateDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDatabase" ):
                listener.exitCreateDatabase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateDatabase" ):
                return visitor.visitCreateDatabase(self)
            else:
                return visitor.visitChildren(self)




    def createDatabase(self):

        localctx = mysqlParser.CreateDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_createDatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            self.match(mysqlParser.CREATE)
            self.state = 764
            localctx.dbFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==mysqlParser.DATABASE or _la==mysqlParser.SCHEMA):
                localctx.dbFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 766
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.IF:
                self.state = 765
                self.ifNotExists()


            self.state = 768
            self.uid()
            self.state = 772
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << mysqlParser.CHARACTER) | (1 << mysqlParser.COLLATE) | (1 << mysqlParser.DEFAULT))) != 0):
                self.state = 769
                self.createDatabaseOption()
                self.state = 774
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateEventContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(mysqlParser.CREATE, 0)

        def EVENT(self):
            return self.getToken(mysqlParser.EVENT, 0)

        def fullId(self):
            return self.getTypedRuleContext(mysqlParser.FullIdContext,0)


        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.ON)
            else:
                return self.getToken(mysqlParser.ON, i)

        def SCHEDULE(self):
            return self.getToken(mysqlParser.SCHEDULE, 0)

        def scheduleExpression(self):
            return self.getTypedRuleContext(mysqlParser.ScheduleExpressionContext,0)


        def DO(self):
            return self.getToken(mysqlParser.DO, 0)

        def routineBody(self):
            return self.getTypedRuleContext(mysqlParser.RoutineBodyContext,0)


        def ownerStatement(self):
            return self.getTypedRuleContext(mysqlParser.OwnerStatementContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(mysqlParser.IfNotExistsContext,0)


        def COMPLETION(self):
            return self.getToken(mysqlParser.COMPLETION, 0)

        def PRESERVE(self):
            return self.getToken(mysqlParser.PRESERVE, 0)

        def enableType(self):
            return self.getTypedRuleContext(mysqlParser.EnableTypeContext,0)


        def COMMENT(self):
            return self.getToken(mysqlParser.COMMENT, 0)

        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def NOT(self):
            return self.getToken(mysqlParser.NOT, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_createEvent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateEvent" ):
                listener.enterCreateEvent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateEvent" ):
                listener.exitCreateEvent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateEvent" ):
                return visitor.visitCreateEvent(self)
            else:
                return visitor.visitChildren(self)




    def createEvent(self):

        localctx = mysqlParser.CreateEventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_createEvent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self.match(mysqlParser.CREATE)
            self.state = 777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.DEFINER:
                self.state = 776
                self.ownerStatement()


            self.state = 779
            self.match(mysqlParser.EVENT)
            self.state = 781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.IF:
                self.state = 780
                self.ifNotExists()


            self.state = 783
            self.fullId()
            self.state = 784
            self.match(mysqlParser.ON)
            self.state = 785
            self.match(mysqlParser.SCHEDULE)
            self.state = 786
            self.scheduleExpression()
            self.state = 793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.ON:
                self.state = 787
                self.match(mysqlParser.ON)
                self.state = 788
                self.match(mysqlParser.COMPLETION)
                self.state = 790
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.NOT:
                    self.state = 789
                    self.match(mysqlParser.NOT)


                self.state = 792
                self.match(mysqlParser.PRESERVE)


            self.state = 796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.DISABLE or _la==mysqlParser.ENABLE:
                self.state = 795
                self.enableType()


            self.state = 800
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.COMMENT:
                self.state = 798
                self.match(mysqlParser.COMMENT)
                self.state = 799
                self.match(mysqlParser.STRING_LITERAL)


            self.state = 802
            self.match(mysqlParser.DO)
            self.state = 803
            self.routineBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateIndexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.creationPlace = None # Token
            self.indexCategory = None # Token
            self.algType = None # Token
            self.lockType = None # Token

        def CREATE(self):
            return self.getToken(mysqlParser.CREATE, 0)

        def INDEX(self):
            return self.getToken(mysqlParser.INDEX, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def ON(self):
            return self.getToken(mysqlParser.ON, 0)

        def tableName(self):
            return self.getTypedRuleContext(mysqlParser.TableNameContext,0)


        def indexColumnNames(self):
            return self.getTypedRuleContext(mysqlParser.IndexColumnNamesContext,0)


        def indexType(self):
            return self.getTypedRuleContext(mysqlParser.IndexTypeContext,0)


        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.IndexOptionContext,i)


        def ALGORITHM(self):
            return self.getToken(mysqlParser.ALGORITHM, 0)

        def LOCK(self):
            return self.getToken(mysqlParser.LOCK, 0)

        def ONLINE(self):
            return self.getToken(mysqlParser.ONLINE, 0)

        def OFFLINE(self):
            return self.getToken(mysqlParser.OFFLINE, 0)

        def UNIQUE(self):
            return self.getToken(mysqlParser.UNIQUE, 0)

        def FULLTEXT(self):
            return self.getToken(mysqlParser.FULLTEXT, 0)

        def SPATIAL(self):
            return self.getToken(mysqlParser.SPATIAL, 0)

        def DEFAULT(self):
            return self.getToken(mysqlParser.DEFAULT, 0)

        def INPLACE(self):
            return self.getToken(mysqlParser.INPLACE, 0)

        def COPY(self):
            return self.getToken(mysqlParser.COPY, 0)

        def NONE(self):
            return self.getToken(mysqlParser.NONE, 0)

        def SHARED(self):
            return self.getToken(mysqlParser.SHARED, 0)

        def EXCLUSIVE(self):
            return self.getToken(mysqlParser.EXCLUSIVE, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_createIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateIndex" ):
                listener.enterCreateIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateIndex" ):
                listener.exitCreateIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateIndex" ):
                return visitor.visitCreateIndex(self)
            else:
                return visitor.visitChildren(self)




    def createIndex(self):

        localctx = mysqlParser.CreateIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_createIndex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.match(mysqlParser.CREATE)
            self.state = 807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.OFFLINE or _la==mysqlParser.ONLINE:
                self.state = 806
                localctx.creationPlace = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.OFFLINE or _la==mysqlParser.ONLINE):
                    localctx.creationPlace = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 810
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.FULLTEXT or _la==mysqlParser.SPATIAL or _la==mysqlParser.UNIQUE:
                self.state = 809
                localctx.indexCategory = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.FULLTEXT or _la==mysqlParser.SPATIAL or _la==mysqlParser.UNIQUE):
                    localctx.indexCategory = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 812
            self.match(mysqlParser.INDEX)
            self.state = 813
            self.uid()
            self.state = 815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.USING:
                self.state = 814
                self.indexType()


            self.state = 817
            self.match(mysqlParser.ON)
            self.state = 818
            self.tableName()
            self.state = 819
            self.indexColumnNames()
            self.state = 823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.USING or _la==mysqlParser.WITH or _la==mysqlParser.COMMENT or _la==mysqlParser.KEY_BLOCK_SIZE:
                self.state = 820
                self.indexOption()
                self.state = 825
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 836
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.ALGORITHM]:
                self.state = 826
                self.match(mysqlParser.ALGORITHM)
                self.state = 828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 827
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 830
                localctx.algType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.DEFAULT or _la==mysqlParser.COPY or _la==mysqlParser.INPLACE):
                    localctx.algType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [mysqlParser.LOCK]:
                self.state = 831
                self.match(mysqlParser.LOCK)
                self.state = 833
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 832
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 835
                localctx.lockType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.DEFAULT or _la==mysqlParser.EXCLUSIVE or _la==mysqlParser.NONE or _la==mysqlParser.SHARED):
                    localctx.lockType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [mysqlParser.EOF, mysqlParser.MINUS, mysqlParser.SEMI]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateLogfileGroupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.undoFile = None # Token
            self.initSize = None # FileSizeLiteralContext
            self.undoSize = None # FileSizeLiteralContext
            self.redoSize = None # FileSizeLiteralContext
            self.comment = None # Token

        def CREATE(self):
            return self.getToken(mysqlParser.CREATE, 0)

        def LOGFILE(self):
            return self.getToken(mysqlParser.LOGFILE, 0)

        def GROUP(self):
            return self.getToken(mysqlParser.GROUP, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UidContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UidContext,i)


        def ADD(self):
            return self.getToken(mysqlParser.ADD, 0)

        def UNDOFILE(self):
            return self.getToken(mysqlParser.UNDOFILE, 0)

        def ENGINE(self):
            return self.getToken(mysqlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(mysqlParser.EngineNameContext,0)


        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.STRING_LITERAL)
            else:
                return self.getToken(mysqlParser.STRING_LITERAL, i)

        def INITIAL_SIZE(self):
            return self.getToken(mysqlParser.INITIAL_SIZE, 0)

        def UNDO_BUFFER_SIZE(self):
            return self.getToken(mysqlParser.UNDO_BUFFER_SIZE, 0)

        def REDO_BUFFER_SIZE(self):
            return self.getToken(mysqlParser.REDO_BUFFER_SIZE, 0)

        def NODEGROUP(self):
            return self.getToken(mysqlParser.NODEGROUP, 0)

        def WAIT(self):
            return self.getToken(mysqlParser.WAIT, 0)

        def COMMENT(self):
            return self.getToken(mysqlParser.COMMENT, 0)

        def fileSizeLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.FileSizeLiteralContext)
            else:
                return self.getTypedRuleContext(mysqlParser.FileSizeLiteralContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_createLogfileGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateLogfileGroup" ):
                listener.enterCreateLogfileGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateLogfileGroup" ):
                listener.exitCreateLogfileGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateLogfileGroup" ):
                return visitor.visitCreateLogfileGroup(self)
            else:
                return visitor.visitChildren(self)




    def createLogfileGroup(self):

        localctx = mysqlParser.CreateLogfileGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_createLogfileGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            self.match(mysqlParser.CREATE)
            self.state = 839
            self.match(mysqlParser.LOGFILE)
            self.state = 840
            self.match(mysqlParser.GROUP)
            self.state = 841
            self.uid()
            self.state = 842
            self.match(mysqlParser.ADD)
            self.state = 843
            self.match(mysqlParser.UNDOFILE)
            self.state = 844
            localctx.undoFile = self.match(mysqlParser.STRING_LITERAL)
            self.state = 850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.INITIAL_SIZE:
                self.state = 845
                self.match(mysqlParser.INITIAL_SIZE)
                self.state = 847
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 846
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 849
                localctx.initSize = self.fileSizeLiteral()


            self.state = 857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.UNDO_BUFFER_SIZE:
                self.state = 852
                self.match(mysqlParser.UNDO_BUFFER_SIZE)
                self.state = 854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 853
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 856
                localctx.undoSize = self.fileSizeLiteral()


            self.state = 864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.REDO_BUFFER_SIZE:
                self.state = 859
                self.match(mysqlParser.REDO_BUFFER_SIZE)
                self.state = 861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 860
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 863
                localctx.redoSize = self.fileSizeLiteral()


            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.NODEGROUP:
                self.state = 866
                self.match(mysqlParser.NODEGROUP)
                self.state = 868
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 867
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 870
                self.uid()


            self.state = 874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.WAIT:
                self.state = 873
                self.match(mysqlParser.WAIT)


            self.state = 881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.COMMENT:
                self.state = 876
                self.match(mysqlParser.COMMENT)
                self.state = 878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 877
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 880
                localctx.comment = self.match(mysqlParser.STRING_LITERAL)


            self.state = 883
            self.match(mysqlParser.ENGINE)
            self.state = 885
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.EQUAL_SYMBOL:
                self.state = 884
                self.match(mysqlParser.EQUAL_SYMBOL)


            self.state = 887
            self.engineName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateProcedureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(mysqlParser.CREATE, 0)

        def PROCEDURE(self):
            return self.getToken(mysqlParser.PROCEDURE, 0)

        def fullId(self):
            return self.getTypedRuleContext(mysqlParser.FullIdContext,0)


        def routineBody(self):
            return self.getTypedRuleContext(mysqlParser.RoutineBodyContext,0)


        def ownerStatement(self):
            return self.getTypedRuleContext(mysqlParser.OwnerStatementContext,0)


        def procedureParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.ProcedureParameterContext)
            else:
                return self.getTypedRuleContext(mysqlParser.ProcedureParameterContext,i)


        def routineOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.RoutineOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.RoutineOptionContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_createProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateProcedure" ):
                listener.enterCreateProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateProcedure" ):
                listener.exitCreateProcedure(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateProcedure" ):
                return visitor.visitCreateProcedure(self)
            else:
                return visitor.visitChildren(self)




    def createProcedure(self):

        localctx = mysqlParser.CreateProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_createProcedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 889
            self.match(mysqlParser.CREATE)
            self.state = 891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.DEFINER:
                self.state = 890
                self.ownerStatement()


            self.state = 893
            self.match(mysqlParser.PROCEDURE)
            self.state = 894
            self.fullId()
            self.state = 895
            self.match(mysqlParser.LR_BRACKET)
            self.state = 897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (mysqlParser.IN - 66)) | (1 << (mysqlParser.INOUT - 66)) | (1 << (mysqlParser.OUT - 66)))) != 0):
                self.state = 896
                self.procedureParameter()


            self.state = 903
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.COMMA:
                self.state = 899
                self.match(mysqlParser.COMMA)
                self.state = 900
                self.procedureParameter()
                self.state = 905
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 906
            self.match(mysqlParser.RR_BRACKET)
            self.state = 910
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 907
                    self.routineOption() 
                self.state = 912
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

            self.state = 913
            self.routineBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(mysqlParser.CREATE, 0)

        def FUNCTION(self):
            return self.getToken(mysqlParser.FUNCTION, 0)

        def fullId(self):
            return self.getTypedRuleContext(mysqlParser.FullIdContext,0)


        def RETURNS(self):
            return self.getToken(mysqlParser.RETURNS, 0)

        def dataType(self):
            return self.getTypedRuleContext(mysqlParser.DataTypeContext,0)


        def routineBody(self):
            return self.getTypedRuleContext(mysqlParser.RoutineBodyContext,0)


        def ownerStatement(self):
            return self.getTypedRuleContext(mysqlParser.OwnerStatementContext,0)


        def functionParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.FunctionParameterContext)
            else:
                return self.getTypedRuleContext(mysqlParser.FunctionParameterContext,i)


        def routineOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.RoutineOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.RoutineOptionContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_createFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFunction" ):
                listener.enterCreateFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFunction" ):
                listener.exitCreateFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateFunction" ):
                return visitor.visitCreateFunction(self)
            else:
                return visitor.visitChildren(self)




    def createFunction(self):

        localctx = mysqlParser.CreateFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_createFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            self.match(mysqlParser.CREATE)
            self.state = 917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.DEFINER:
                self.state = 916
                self.ownerStatement()


            self.state = 919
            self.match(mysqlParser.FUNCTION)
            self.state = 920
            self.fullId()
            self.state = 921
            self.match(mysqlParser.LR_BRACKET)
            self.state = 923
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.LEFT or _la==mysqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (mysqlParser.DATE - 180)) | (1 << (mysqlParser.TIME - 180)) | (1 << (mysqlParser.TIMESTAMP - 180)) | (1 << (mysqlParser.DATETIME - 180)) | (1 << (mysqlParser.YEAR - 180)) | (1 << (mysqlParser.TEXT - 180)) | (1 << (mysqlParser.ENUM - 180)) | (1 << (mysqlParser.COUNT - 180)) | (1 << (mysqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (mysqlParser.ACCOUNT - 244)) | (1 << (mysqlParser.ACTION - 244)) | (1 << (mysqlParser.AFTER - 244)) | (1 << (mysqlParser.AGGREGATE - 244)) | (1 << (mysqlParser.ALGORITHM - 244)) | (1 << (mysqlParser.ANY - 244)) | (1 << (mysqlParser.AT - 244)) | (1 << (mysqlParser.AUTHORS - 244)) | (1 << (mysqlParser.AUTOCOMMIT - 244)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (mysqlParser.AUTO_INCREMENT - 244)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 244)) | (1 << (mysqlParser.BEGIN - 244)) | (1 << (mysqlParser.BINLOG - 244)) | (1 << (mysqlParser.BIT - 244)) | (1 << (mysqlParser.BLOCK - 244)) | (1 << (mysqlParser.BTREE - 244)) | (1 << (mysqlParser.CASCADED - 244)) | (1 << (mysqlParser.CHAIN - 244)) | (1 << (mysqlParser.CHANNEL - 244)) | (1 << (mysqlParser.CHECKSUM - 244)) | (1 << (mysqlParser.CIPHER - 244)) | (1 << (mysqlParser.CLIENT - 244)) | (1 << (mysqlParser.COALESCE - 244)) | (1 << (mysqlParser.CODE - 244)) | (1 << (mysqlParser.COLUMNS - 244)) | (1 << (mysqlParser.COLUMN_FORMAT - 244)) | (1 << (mysqlParser.COMMENT - 244)) | (1 << (mysqlParser.COMMIT - 244)) | (1 << (mysqlParser.COMPACT - 244)) | (1 << (mysqlParser.COMPLETION - 244)) | (1 << (mysqlParser.COMPRESSED - 244)) | (1 << (mysqlParser.COMPRESSION - 244)) | (1 << (mysqlParser.CONCURRENT - 244)) | (1 << (mysqlParser.CONNECTION - 244)) | (1 << (mysqlParser.CONSISTENT - 244)) | (1 << (mysqlParser.CONTAINS - 244)) | (1 << (mysqlParser.CONTEXT - 244)) | (1 << (mysqlParser.CONTRIBUTORS - 244)) | (1 << (mysqlParser.COPY - 244)) | (1 << (mysqlParser.CPU - 244)) | (1 << (mysqlParser.DATA - 244)) | (1 << (mysqlParser.DATAFILE - 244)) | (1 << (mysqlParser.DEALLOCATE - 244)) | (1 << (mysqlParser.DEFAULT_AUTH - 244)) | (1 << (mysqlParser.DEFINER - 244)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 244)) | (1 << (mysqlParser.DIRECTORY - 244)) | (1 << (mysqlParser.DISABLE - 244)) | (1 << (mysqlParser.DISCARD - 244)) | (1 << (mysqlParser.DISK - 244)) | (1 << (mysqlParser.DO - 244)) | (1 << (mysqlParser.DUMPFILE - 244)) | (1 << (mysqlParser.DUPLICATE - 244)) | (1 << (mysqlParser.DYNAMIC - 244)) | (1 << (mysqlParser.ENABLE - 244)) | (1 << (mysqlParser.ENCRYPTION - 244)) | (1 << (mysqlParser.ENDS - 244)) | (1 << (mysqlParser.ENGINE - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (mysqlParser.ENGINES - 308)) | (1 << (mysqlParser.ERROR - 308)) | (1 << (mysqlParser.ERRORS - 308)) | (1 << (mysqlParser.ESCAPE - 308)) | (1 << (mysqlParser.EVEN - 308)) | (1 << (mysqlParser.EVENT - 308)) | (1 << (mysqlParser.EVENTS - 308)) | (1 << (mysqlParser.EVERY - 308)) | (1 << (mysqlParser.EXCHANGE - 308)) | (1 << (mysqlParser.EXCLUSIVE - 308)) | (1 << (mysqlParser.EXPIRE - 308)) | (1 << (mysqlParser.EXTENT_SIZE - 308)) | (1 << (mysqlParser.FAULTS - 308)) | (1 << (mysqlParser.FIELDS - 308)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (mysqlParser.FILTER - 308)) | (1 << (mysqlParser.FIRST - 308)) | (1 << (mysqlParser.FIXED - 308)) | (1 << (mysqlParser.FOLLOWS - 308)) | (1 << (mysqlParser.FULL - 308)) | (1 << (mysqlParser.FUNCTION - 308)) | (1 << (mysqlParser.GLOBAL - 308)) | (1 << (mysqlParser.GRANTS - 308)) | (1 << (mysqlParser.GROUP_REPLICATION - 308)) | (1 << (mysqlParser.HASH - 308)) | (1 << (mysqlParser.HOST - 308)) | (1 << (mysqlParser.IDENTIFIED - 308)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (mysqlParser.IMPORT - 308)) | (1 << (mysqlParser.INDEXES - 308)) | (1 << (mysqlParser.INITIAL_SIZE - 308)) | (1 << (mysqlParser.INPLACE - 308)) | (1 << (mysqlParser.INSERT_METHOD - 308)) | (1 << (mysqlParser.INSTANCE - 308)) | (1 << (mysqlParser.INVOKER - 308)) | (1 << (mysqlParser.IO - 308)) | (1 << (mysqlParser.IO_THREAD - 308)) | (1 << (mysqlParser.IPC - 308)) | (1 << (mysqlParser.ISOLATION - 308)) | (1 << (mysqlParser.ISSUER - 308)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (mysqlParser.LANGUAGE - 308)) | (1 << (mysqlParser.LAST - 308)) | (1 << (mysqlParser.LEAVES - 308)) | (1 << (mysqlParser.LESS - 308)) | (1 << (mysqlParser.LEVEL - 308)) | (1 << (mysqlParser.LIST - 308)) | (1 << (mysqlParser.LOCAL - 308)) | (1 << (mysqlParser.LOGFILE - 308)) | (1 << (mysqlParser.LOGS - 308)) | (1 << (mysqlParser.MASTER - 308)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 308)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (mysqlParser.MASTER_DELAY - 372)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (mysqlParser.MASTER_HOST - 372)) | (1 << (mysqlParser.MASTER_LOG_FILE - 372)) | (1 << (mysqlParser.MASTER_LOG_POS - 372)) | (1 << (mysqlParser.MASTER_PASSWORD - 372)) | (1 << (mysqlParser.MASTER_PORT - 372)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (mysqlParser.MASTER_SSL - 372)) | (1 << (mysqlParser.MASTER_SSL_CA - 372)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_CERT - 372)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (mysqlParser.MASTER_SSL_CRL - 372)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_KEY - 372)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 372)) | (1 << (mysqlParser.MASTER_USER - 372)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_ROWS - 372)) | (1 << (mysqlParser.MAX_SIZE - 372)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (mysqlParser.MERGE - 372)) | (1 << (mysqlParser.MID - 372)) | (1 << (mysqlParser.MIGRATE - 372)) | (1 << (mysqlParser.MIN_ROWS - 372)) | (1 << (mysqlParser.MODIFY - 372)) | (1 << (mysqlParser.MUTEX - 372)) | (1 << (mysqlParser.MYSQL - 372)) | (1 << (mysqlParser.NAME - 372)) | (1 << (mysqlParser.NAMES - 372)) | (1 << (mysqlParser.NCHAR - 372)) | (1 << (mysqlParser.NEVER - 372)) | (1 << (mysqlParser.NO - 372)) | (1 << (mysqlParser.NODEGROUP - 372)) | (1 << (mysqlParser.NONE - 372)) | (1 << (mysqlParser.OFFLINE - 372)) | (1 << (mysqlParser.OFFSET - 372)) | (1 << (mysqlParser.OJ - 372)) | (1 << (mysqlParser.OLD_PASSWORD - 372)) | (1 << (mysqlParser.ONE - 372)) | (1 << (mysqlParser.ONLINE - 372)) | (1 << (mysqlParser.ONLY - 372)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 372)) | (1 << (mysqlParser.OPTIONS - 372)) | (1 << (mysqlParser.OWNER - 372)) | (1 << (mysqlParser.PACK_KEYS - 372)) | (1 << (mysqlParser.PAGE - 372)) | (1 << (mysqlParser.PARSER - 372)) | (1 << (mysqlParser.PARTIAL - 372)) | (1 << (mysqlParser.PARTITIONING - 372)) | (1 << (mysqlParser.PARTITIONS - 372)) | (1 << (mysqlParser.PASSWORD - 372)) | (1 << (mysqlParser.PHASE - 372)) | (1 << (mysqlParser.PLUGIN_DIR - 372)) | (1 << (mysqlParser.PLUGINS - 372)) | (1 << (mysqlParser.PORT - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (mysqlParser.PRECEDES - 436)) | (1 << (mysqlParser.PREPARE - 436)) | (1 << (mysqlParser.PRESERVE - 436)) | (1 << (mysqlParser.PREV - 436)) | (1 << (mysqlParser.PROCESSLIST - 436)) | (1 << (mysqlParser.PROFILE - 436)) | (1 << (mysqlParser.PROFILES - 436)) | (1 << (mysqlParser.PROXY - 436)) | (1 << (mysqlParser.QUERY - 436)) | (1 << (mysqlParser.QUICK - 436)) | (1 << (mysqlParser.REBUILD - 436)) | (1 << (mysqlParser.RECOVER - 436)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (mysqlParser.REDUNDANT - 436)) | (1 << (mysqlParser.RELAY_LOG_FILE - 436)) | (1 << (mysqlParser.RELAY_LOG_POS - 436)) | (1 << (mysqlParser.RELAYLOG - 436)) | (1 << (mysqlParser.REMOVE - 436)) | (1 << (mysqlParser.REORGANIZE - 436)) | (1 << (mysqlParser.REPAIR - 436)) | (1 << (mysqlParser.REPLICATE_DO_DB - 436)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATION - 436)) | (1 << (mysqlParser.RESUME - 436)) | (1 << (mysqlParser.RETURNS - 436)) | (1 << (mysqlParser.ROLLBACK - 436)) | (1 << (mysqlParser.ROLLUP - 436)) | (1 << (mysqlParser.ROTATE - 436)) | (1 << (mysqlParser.ROW - 436)) | (1 << (mysqlParser.ROWS - 436)) | (1 << (mysqlParser.ROW_FORMAT - 436)) | (1 << (mysqlParser.SAVEPOINT - 436)) | (1 << (mysqlParser.SCHEDULE - 436)) | (1 << (mysqlParser.SECURITY - 436)) | (1 << (mysqlParser.SERVER - 436)) | (1 << (mysqlParser.SESSION - 436)) | (1 << (mysqlParser.SHARE - 436)) | (1 << (mysqlParser.SHARED - 436)) | (1 << (mysqlParser.SIGNED - 436)) | (1 << (mysqlParser.SIMPLE - 436)) | (1 << (mysqlParser.SLAVE - 436)) | (1 << (mysqlParser.SNAPSHOT - 436)) | (1 << (mysqlParser.SOCKET - 436)) | (1 << (mysqlParser.SOME - 436)) | (1 << (mysqlParser.SOUNDS - 436)) | (1 << (mysqlParser.SOURCE - 436)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (mysqlParser.SQL_CACHE - 436)) | (1 << (mysqlParser.SQL_NO_CACHE - 436)) | (1 << (mysqlParser.SQL_THREAD - 436)) | (1 << (mysqlParser.START - 436)) | (1 << (mysqlParser.STARTS - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (mysqlParser.STATS_AUTO_RECALC - 500)) | (1 << (mysqlParser.STATS_PERSISTENT - 500)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (mysqlParser.STATUS - 500)) | (1 << (mysqlParser.STOP - 500)) | (1 << (mysqlParser.STORAGE - 500)) | (1 << (mysqlParser.STRING - 500)) | (1 << (mysqlParser.SUBJECT - 500)) | (1 << (mysqlParser.SUBPARTITION - 500)) | (1 << (mysqlParser.SUBPARTITIONS - 500)) | (1 << (mysqlParser.SUSPEND - 500)) | (1 << (mysqlParser.SWAPS - 500)) | (1 << (mysqlParser.SWITCHES - 500)) | (1 << (mysqlParser.TABLESPACE - 500)) | (1 << (mysqlParser.TEMPORARY - 500)) | (1 << (mysqlParser.TEMPTABLE - 500)) | (1 << (mysqlParser.THAN - 500)) | (1 << (mysqlParser.TRANSACTION - 500)) | (1 << (mysqlParser.TRUNCATE - 500)) | (1 << (mysqlParser.UNDEFINED - 500)) | (1 << (mysqlParser.UNDOFILE - 500)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (mysqlParser.UNKNOWN - 500)) | (1 << (mysqlParser.UPGRADE - 500)) | (1 << (mysqlParser.USER - 500)) | (1 << (mysqlParser.VALIDATION - 500)) | (1 << (mysqlParser.VALUE - 500)) | (1 << (mysqlParser.VARIABLES - 500)) | (1 << (mysqlParser.VIEW - 500)) | (1 << (mysqlParser.WAIT - 500)) | (1 << (mysqlParser.WARNINGS - 500)) | (1 << (mysqlParser.WITHOUT - 500)) | (1 << (mysqlParser.WORK - 500)) | (1 << (mysqlParser.WRAPPER - 500)) | (1 << (mysqlParser.X509 - 500)) | (1 << (mysqlParser.XA - 500)) | (1 << (mysqlParser.XML - 500)) | (1 << (mysqlParser.QUARTER - 500)) | (1 << (mysqlParser.MONTH - 500)) | (1 << (mysqlParser.DAY - 500)) | (1 << (mysqlParser.HOUR - 500)) | (1 << (mysqlParser.MINUTE - 500)) | (1 << (mysqlParser.WEEK - 500)) | (1 << (mysqlParser.SECOND - 500)) | (1 << (mysqlParser.MICROSECOND - 500)) | (1 << (mysqlParser.TABLES - 500)) | (1 << (mysqlParser.ROUTINE - 500)) | (1 << (mysqlParser.EXECUTE - 500)) | (1 << (mysqlParser.FILE - 500)) | (1 << (mysqlParser.PROCESS - 500)) | (1 << (mysqlParser.RELOAD - 500)) | (1 << (mysqlParser.SHUTDOWN - 500)) | (1 << (mysqlParser.SUPER - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (mysqlParser.PRIVILEGES - 564)) | (1 << (mysqlParser.ARMSCII8 - 564)) | (1 << (mysqlParser.ASCII - 564)) | (1 << (mysqlParser.BIG5 - 564)) | (1 << (mysqlParser.CP1250 - 564)) | (1 << (mysqlParser.CP1251 - 564)) | (1 << (mysqlParser.CP1256 - 564)) | (1 << (mysqlParser.CP1257 - 564)) | (1 << (mysqlParser.CP850 - 564)) | (1 << (mysqlParser.CP852 - 564)) | (1 << (mysqlParser.CP866 - 564)) | (1 << (mysqlParser.CP932 - 564)) | (1 << (mysqlParser.DEC8 - 564)) | (1 << (mysqlParser.EUCJPMS - 564)) | (1 << (mysqlParser.EUCKR - 564)) | (1 << (mysqlParser.GB2312 - 564)) | (1 << (mysqlParser.GBK - 564)) | (1 << (mysqlParser.GEOSTD8 - 564)) | (1 << (mysqlParser.GREEK - 564)) | (1 << (mysqlParser.HEBREW - 564)) | (1 << (mysqlParser.HP8 - 564)) | (1 << (mysqlParser.KEYBCS2 - 564)) | (1 << (mysqlParser.KOI8R - 564)) | (1 << (mysqlParser.KOI8U - 564)) | (1 << (mysqlParser.LATIN1 - 564)) | (1 << (mysqlParser.LATIN2 - 564)) | (1 << (mysqlParser.LATIN5 - 564)) | (1 << (mysqlParser.LATIN7 - 564)) | (1 << (mysqlParser.MACCE - 564)) | (1 << (mysqlParser.MACROMAN - 564)) | (1 << (mysqlParser.SJIS - 564)) | (1 << (mysqlParser.SWE7 - 564)) | (1 << (mysqlParser.TIS620 - 564)) | (1 << (mysqlParser.UCS2 - 564)) | (1 << (mysqlParser.UJIS - 564)) | (1 << (mysqlParser.UTF16 - 564)) | (1 << (mysqlParser.UTF16LE - 564)) | (1 << (mysqlParser.UTF32 - 564)) | (1 << (mysqlParser.UTF8 - 564)) | (1 << (mysqlParser.UTF8MB3 - 564)) | (1 << (mysqlParser.UTF8MB4 - 564)) | (1 << (mysqlParser.ARCHIVE - 564)) | (1 << (mysqlParser.BLACKHOLE - 564)) | (1 << (mysqlParser.CSV - 564)) | (1 << (mysqlParser.FEDERATED - 564)) | (1 << (mysqlParser.INNODB - 564)) | (1 << (mysqlParser.MEMORY - 564)) | (1 << (mysqlParser.MRG_MYISAM - 564)) | (1 << (mysqlParser.MYISAM - 564)) | (1 << (mysqlParser.NDB - 564)) | (1 << (mysqlParser.NDBCLUSTER - 564)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (mysqlParser.REPEATABLE - 564)) | (1 << (mysqlParser.COMMITTED - 564)) | (1 << (mysqlParser.UNCOMMITTED - 564)) | (1 << (mysqlParser.SERIALIZABLE - 564)) | (1 << (mysqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (mysqlParser.LINESTRING - 564)) | (1 << (mysqlParser.MULTILINESTRING - 564)) | (1 << (mysqlParser.MULTIPOINT - 564)) | (1 << (mysqlParser.MULTIPOLYGON - 564)) | (1 << (mysqlParser.POINT - 564)) | (1 << (mysqlParser.POLYGON - 564)) | (1 << (mysqlParser.ABS - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (mysqlParser.ACOS - 628)) | (1 << (mysqlParser.ADDDATE - 628)) | (1 << (mysqlParser.ADDTIME - 628)) | (1 << (mysqlParser.AES_DECRYPT - 628)) | (1 << (mysqlParser.AES_ENCRYPT - 628)) | (1 << (mysqlParser.AREA - 628)) | (1 << (mysqlParser.ASBINARY - 628)) | (1 << (mysqlParser.ASIN - 628)) | (1 << (mysqlParser.ASTEXT - 628)) | (1 << (mysqlParser.ASWKB - 628)) | (1 << (mysqlParser.ASWKT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (mysqlParser.ATAN - 628)) | (1 << (mysqlParser.ATAN2 - 628)) | (1 << (mysqlParser.BENCHMARK - 628)) | (1 << (mysqlParser.BIN - 628)) | (1 << (mysqlParser.BIT_COUNT - 628)) | (1 << (mysqlParser.BIT_LENGTH - 628)) | (1 << (mysqlParser.BUFFER - 628)) | (1 << (mysqlParser.CEIL - 628)) | (1 << (mysqlParser.CEILING - 628)) | (1 << (mysqlParser.CENTROID - 628)) | (1 << (mysqlParser.CHARACTER_LENGTH - 628)) | (1 << (mysqlParser.CHARSET - 628)) | (1 << (mysqlParser.CHAR_LENGTH - 628)) | (1 << (mysqlParser.COERCIBILITY - 628)) | (1 << (mysqlParser.COLLATION - 628)) | (1 << (mysqlParser.COMPRESS - 628)) | (1 << (mysqlParser.CONCAT - 628)) | (1 << (mysqlParser.CONCAT_WS - 628)) | (1 << (mysqlParser.CONNECTION_ID - 628)) | (1 << (mysqlParser.CONV - 628)) | (1 << (mysqlParser.CONVERT_TZ - 628)) | (1 << (mysqlParser.COS - 628)) | (1 << (mysqlParser.COT - 628)) | (1 << (mysqlParser.CRC32 - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (mysqlParser.CREATE_DIGEST - 628)) | (1 << (mysqlParser.CROSSES - 628)) | (1 << (mysqlParser.DATEDIFF - 628)) | (1 << (mysqlParser.DATE_FORMAT - 628)) | (1 << (mysqlParser.DAYNAME - 628)) | (1 << (mysqlParser.DAYOFMONTH - 628)) | (1 << (mysqlParser.DAYOFWEEK - 628)) | (1 << (mysqlParser.DAYOFYEAR - 628)) | (1 << (mysqlParser.DECODE - 628)) | (1 << (mysqlParser.DEGREES - 628)) | (1 << (mysqlParser.DES_DECRYPT - 628)) | (1 << (mysqlParser.DES_ENCRYPT - 628)) | (1 << (mysqlParser.DIMENSION - 628)) | (1 << (mysqlParser.DISJOINT - 628)) | (1 << (mysqlParser.ELT - 628)) | (1 << (mysqlParser.ENCODE - 628)) | (1 << (mysqlParser.ENCRYPT - 628)) | (1 << (mysqlParser.ENDPOINT - 628)) | (1 << (mysqlParser.ENVELOPE - 628)) | (1 << (mysqlParser.EQUALS - 628)) | (1 << (mysqlParser.EXP - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (mysqlParser.EXPORT_SET - 692)) | (1 << (mysqlParser.EXTERIORRING - 692)) | (1 << (mysqlParser.EXTRACTVALUE - 692)) | (1 << (mysqlParser.FIELD - 692)) | (1 << (mysqlParser.FIND_IN_SET - 692)) | (1 << (mysqlParser.FLOOR - 692)) | (1 << (mysqlParser.FORMAT - 692)) | (1 << (mysqlParser.FOUND_ROWS - 692)) | (1 << (mysqlParser.FROM_BASE64 - 692)) | (1 << (mysqlParser.FROM_DAYS - 692)) | (1 << (mysqlParser.FROM_UNIXTIME - 692)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYN - 692)) | (1 << (mysqlParser.GEOMETRYTYPE - 692)) | (1 << (mysqlParser.GEOMFROMTEXT - 692)) | (1 << (mysqlParser.GEOMFROMWKB - 692)) | (1 << (mysqlParser.GET_FORMAT - 692)) | (1 << (mysqlParser.GET_LOCK - 692)) | (1 << (mysqlParser.GLENGTH - 692)) | (1 << (mysqlParser.GREATEST - 692)) | (1 << (mysqlParser.GTID_SUBSET - 692)) | (1 << (mysqlParser.GTID_SUBTRACT - 692)) | (1 << (mysqlParser.HEX - 692)) | (1 << (mysqlParser.IFNULL - 692)) | (1 << (mysqlParser.INET6_ATON - 692)) | (1 << (mysqlParser.INET6_NTOA - 692)) | (1 << (mysqlParser.INET_ATON - 692)) | (1 << (mysqlParser.INET_NTOA - 692)) | (1 << (mysqlParser.INSTR - 692)) | (1 << (mysqlParser.INTERIORRINGN - 692)) | (1 << (mysqlParser.INTERSECTS - 692)) | (1 << (mysqlParser.ISCLOSED - 692)) | (1 << (mysqlParser.ISEMPTY - 692)) | (1 << (mysqlParser.ISNULL - 692)) | (1 << (mysqlParser.ISSIMPLE - 692)) | (1 << (mysqlParser.IS_FREE_LOCK - 692)) | (1 << (mysqlParser.IS_IPV4 - 692)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 692)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 692)) | (1 << (mysqlParser.IS_IPV6 - 692)) | (1 << (mysqlParser.IS_USED_LOCK - 692)) | (1 << (mysqlParser.LAST_INSERT_ID - 692)) | (1 << (mysqlParser.LCASE - 692)) | (1 << (mysqlParser.LEAST - 692)) | (1 << (mysqlParser.LENGTH - 692)) | (1 << (mysqlParser.LINEFROMTEXT - 692)) | (1 << (mysqlParser.LINEFROMWKB - 692)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 692)) | (1 << (mysqlParser.LN - 692)) | (1 << (mysqlParser.LOAD_FILE - 692)) | (1 << (mysqlParser.LOCATE - 692)) | (1 << (mysqlParser.LOG - 692)) | (1 << (mysqlParser.LOG10 - 692)) | (1 << (mysqlParser.LOG2 - 692)) | (1 << (mysqlParser.LOWER - 692)) | (1 << (mysqlParser.LPAD - 692)) | (1 << (mysqlParser.LTRIM - 692)) | (1 << (mysqlParser.MAKEDATE - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (mysqlParser.MAKETIME - 756)) | (1 << (mysqlParser.MAKE_SET - 756)) | (1 << (mysqlParser.MASTER_POS_WAIT - 756)) | (1 << (mysqlParser.MBRCONTAINS - 756)) | (1 << (mysqlParser.MBRDISJOINT - 756)) | (1 << (mysqlParser.MBREQUAL - 756)) | (1 << (mysqlParser.MBRINTERSECTS - 756)) | (1 << (mysqlParser.MBROVERLAPS - 756)) | (1 << (mysqlParser.MBRTOUCHES - 756)) | (1 << (mysqlParser.MBRWITHIN - 756)) | (1 << (mysqlParser.MD5 - 756)) | (1 << (mysqlParser.MLINEFROMTEXT - 756)) | (1 << (mysqlParser.MLINEFROMWKB - 756)) | (1 << (mysqlParser.MONTHNAME - 756)) | (1 << (mysqlParser.MPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MPOINTFROMWKB - 756)) | (1 << (mysqlParser.MPOLYFROMTEXT - 756)) | (1 << (mysqlParser.MPOLYFROMWKB - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (mysqlParser.NAME_CONST - 756)) | (1 << (mysqlParser.NULLIF - 756)) | (1 << (mysqlParser.NUMGEOMETRIES - 756)) | (1 << (mysqlParser.NUMINTERIORRINGS - 756)) | (1 << (mysqlParser.NUMPOINTS - 756)) | (1 << (mysqlParser.OCT - 756)) | (1 << (mysqlParser.OCTET_LENGTH - 756)) | (1 << (mysqlParser.ORD - 756)) | (1 << (mysqlParser.OVERLAPS - 756)) | (1 << (mysqlParser.PERIOD_ADD - 756)) | (1 << (mysqlParser.PERIOD_DIFF - 756)) | (1 << (mysqlParser.PI - 756)) | (1 << (mysqlParser.POINTFROMTEXT - 756)) | (1 << (mysqlParser.POINTFROMWKB - 756)) | (1 << (mysqlParser.POINTN - 756)) | (1 << (mysqlParser.POLYFROMTEXT - 756)) | (1 << (mysqlParser.POLYFROMWKB - 756)) | (1 << (mysqlParser.POLYGONFROMTEXT - 756)) | (1 << (mysqlParser.POLYGONFROMWKB - 756)) | (1 << (mysqlParser.POW - 756)) | (1 << (mysqlParser.POWER - 756)) | (1 << (mysqlParser.QUOTE - 756)) | (1 << (mysqlParser.RADIANS - 756)) | (1 << (mysqlParser.RAND - 756)) | (1 << (mysqlParser.RANDOM_BYTES - 756)) | (1 << (mysqlParser.RELEASE_LOCK - 756)) | (1 << (mysqlParser.REVERSE - 756)) | (1 << (mysqlParser.ROUND - 756)) | (1 << (mysqlParser.ROW_COUNT - 756)) | (1 << (mysqlParser.RPAD - 756)) | (1 << (mysqlParser.RTRIM - 756)) | (1 << (mysqlParser.SEC_TO_TIME - 756)) | (1 << (mysqlParser.SESSION_USER - 756)) | (1 << (mysqlParser.SHA - 756)) | (1 << (mysqlParser.SHA1 - 756)) | (1 << (mysqlParser.SHA2 - 756)) | (1 << (mysqlParser.SIGN - 756)) | (1 << (mysqlParser.SIN - 756)) | (1 << (mysqlParser.SLEEP - 756)) | (1 << (mysqlParser.SOUNDEX - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (mysqlParser.SQRT - 820)) | (1 << (mysqlParser.SRID - 820)) | (1 << (mysqlParser.STARTPOINT - 820)) | (1 << (mysqlParser.STRCMP - 820)) | (1 << (mysqlParser.STR_TO_DATE - 820)) | (1 << (mysqlParser.ST_AREA - 820)) | (1 << (mysqlParser.ST_ASBINARY - 820)) | (1 << (mysqlParser.ST_ASTEXT - 820)) | (1 << (mysqlParser.ST_ASWKB - 820)) | (1 << (mysqlParser.ST_ASWKT - 820)) | (1 << (mysqlParser.ST_BUFFER - 820)) | (1 << (mysqlParser.ST_CENTROID - 820)) | (1 << (mysqlParser.ST_CONTAINS - 820)) | (1 << (mysqlParser.ST_CROSSES - 820)) | (1 << (mysqlParser.ST_DIFFERENCE - 820)) | (1 << (mysqlParser.ST_DIMENSION - 820)) | (1 << (mysqlParser.ST_DISJOINT - 820)) | (1 << (mysqlParser.ST_DISTANCE - 820)) | (1 << (mysqlParser.ST_ENDPOINT - 820)) | (1 << (mysqlParser.ST_ENVELOPE - 820)) | (1 << (mysqlParser.ST_EQUALS - 820)) | (1 << (mysqlParser.ST_EXTERIORRING - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYN - 820)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 820)) | (1 << (mysqlParser.ST_INTERIORRINGN - 820)) | (1 << (mysqlParser.ST_INTERSECTION - 820)) | (1 << (mysqlParser.ST_INTERSECTS - 820)) | (1 << (mysqlParser.ST_ISCLOSED - 820)) | (1 << (mysqlParser.ST_ISEMPTY - 820)) | (1 << (mysqlParser.ST_ISSIMPLE - 820)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINEFROMWKB - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (mysqlParser.ST_NUMPOINTS - 820)) | (1 << (mysqlParser.ST_OVERLAPS - 820)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 820)) | (1 << (mysqlParser.ST_POINTFROMWKB - 820)) | (1 << (mysqlParser.ST_POINTN - 820)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYFROMWKB - 820)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (mysqlParser.ST_SRID - 820)) | (1 << (mysqlParser.ST_STARTPOINT - 820)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (mysqlParser.ST_TOUCHES - 820)) | (1 << (mysqlParser.ST_UNION - 820)) | (1 << (mysqlParser.ST_WITHIN - 820)) | (1 << (mysqlParser.ST_X - 820)) | (1 << (mysqlParser.ST_Y - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (mysqlParser.SUBDATE - 884)) | (1 << (mysqlParser.SUBSTRING_INDEX - 884)) | (1 << (mysqlParser.SUBTIME - 884)) | (1 << (mysqlParser.SYSTEM_USER - 884)) | (1 << (mysqlParser.TAN - 884)) | (1 << (mysqlParser.TIMEDIFF - 884)) | (1 << (mysqlParser.TIMESTAMPADD - 884)) | (1 << (mysqlParser.TIMESTAMPDIFF - 884)) | (1 << (mysqlParser.TIME_FORMAT - 884)) | (1 << (mysqlParser.TIME_TO_SEC - 884)) | (1 << (mysqlParser.TOUCHES - 884)) | (1 << (mysqlParser.TO_BASE64 - 884)) | (1 << (mysqlParser.TO_DAYS - 884)) | (1 << (mysqlParser.TO_SECONDS - 884)) | (1 << (mysqlParser.UCASE - 884)) | (1 << (mysqlParser.UNCOMPRESS - 884)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (mysqlParser.UNHEX - 884)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 884)) | (1 << (mysqlParser.UPDATEXML - 884)) | (1 << (mysqlParser.UPPER - 884)) | (1 << (mysqlParser.UUID - 884)) | (1 << (mysqlParser.UUID_SHORT - 884)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (mysqlParser.VERSION - 884)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (mysqlParser.WEEKDAY - 884)) | (1 << (mysqlParser.WEEKOFYEAR - 884)) | (1 << (mysqlParser.WEIGHT_STRING - 884)) | (1 << (mysqlParser.WITHIN - 884)) | (1 << (mysqlParser.YEARWEEK - 884)) | (1 << (mysqlParser.Y_FUNCTION - 884)) | (1 << (mysqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 954)) & ~0x3f) == 0 and ((1 << (_la - 954)) & ((1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 954)) | (1 << (mysqlParser.ID - 954)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 954)))) != 0):
                self.state = 922
                self.functionParameter()


            self.state = 929
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.COMMA:
                self.state = 925
                self.match(mysqlParser.COMMA)
                self.state = 926
                self.functionParameter()
                self.state = 931
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 932
            self.match(mysqlParser.RR_BRACKET)
            self.state = 933
            self.match(mysqlParser.RETURNS)
            self.state = 934
            self.dataType()
            self.state = 938
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 935
                    self.routineOption() 
                self.state = 940
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

            self.state = 941
            self.routineBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateServerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.wrapperName = None # Token

        def CREATE(self):
            return self.getToken(mysqlParser.CREATE, 0)

        def SERVER(self):
            return self.getToken(mysqlParser.SERVER, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def FOREIGN(self):
            return self.getToken(mysqlParser.FOREIGN, 0)

        def DATA(self):
            return self.getToken(mysqlParser.DATA, 0)

        def WRAPPER(self):
            return self.getToken(mysqlParser.WRAPPER, 0)

        def OPTIONS(self):
            return self.getToken(mysqlParser.OPTIONS, 0)

        def serverOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.ServerOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.ServerOptionContext,i)


        def MYSQL(self):
            return self.getToken(mysqlParser.MYSQL, 0)

        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_createServer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateServer" ):
                listener.enterCreateServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateServer" ):
                listener.exitCreateServer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateServer" ):
                return visitor.visitCreateServer(self)
            else:
                return visitor.visitChildren(self)




    def createServer(self):

        localctx = mysqlParser.CreateServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_createServer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 943
            self.match(mysqlParser.CREATE)
            self.state = 944
            self.match(mysqlParser.SERVER)
            self.state = 945
            self.uid()
            self.state = 946
            self.match(mysqlParser.FOREIGN)
            self.state = 947
            self.match(mysqlParser.DATA)
            self.state = 948
            self.match(mysqlParser.WRAPPER)
            self.state = 949
            localctx.wrapperName = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==mysqlParser.MYSQL or _la==mysqlParser.STRING_LITERAL):
                localctx.wrapperName = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 950
            self.match(mysqlParser.OPTIONS)
            self.state = 951
            self.match(mysqlParser.LR_BRACKET)
            self.state = 952
            self.serverOption()
            self.state = 957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.COMMA:
                self.state = 953
                self.match(mysqlParser.COMMA)
                self.state = 954
                self.serverOption()
                self.state = 959
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 960
            self.match(mysqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_createTable

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CopyCreateTableContext(CreateTableContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.CreateTableContext
            super().__init__(parser)
            self.parenthesisTable = None # TableNameContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(mysqlParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(mysqlParser.TABLE, 0)
        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.TableNameContext)
            else:
                return self.getTypedRuleContext(mysqlParser.TableNameContext,i)

        def LIKE(self):
            return self.getToken(mysqlParser.LIKE, 0)
        def TEMPORARY(self):
            return self.getToken(mysqlParser.TEMPORARY, 0)
        def ifNotExists(self):
            return self.getTypedRuleContext(mysqlParser.IfNotExistsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopyCreateTable" ):
                listener.enterCopyCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopyCreateTable" ):
                listener.exitCopyCreateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCopyCreateTable" ):
                return visitor.visitCopyCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class ColumnCreateTableContext(CreateTableContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.CreateTableContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(mysqlParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(mysqlParser.TABLE, 0)
        def tableName(self):
            return self.getTypedRuleContext(mysqlParser.TableNameContext,0)

        def createDefinitions(self):
            return self.getTypedRuleContext(mysqlParser.CreateDefinitionsContext,0)

        def TEMPORARY(self):
            return self.getToken(mysqlParser.TEMPORARY, 0)
        def ifNotExists(self):
            return self.getTypedRuleContext(mysqlParser.IfNotExistsContext,0)

        def tableOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.TableOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.TableOptionContext,i)

        def partitionDefinitions(self):
            return self.getTypedRuleContext(mysqlParser.PartitionDefinitionsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnCreateTable" ):
                listener.enterColumnCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnCreateTable" ):
                listener.exitColumnCreateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnCreateTable" ):
                return visitor.visitColumnCreateTable(self)
            else:
                return visitor.visitChildren(self)


    class QueryCreateTableContext(CreateTableContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.CreateTableContext
            super().__init__(parser)
            self.keyViolate = None # Token
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(mysqlParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(mysqlParser.TABLE, 0)
        def tableName(self):
            return self.getTypedRuleContext(mysqlParser.TableNameContext,0)

        def createDefinitions(self):
            return self.getTypedRuleContext(mysqlParser.CreateDefinitionsContext,0)

        def selectStatement(self):
            return self.getTypedRuleContext(mysqlParser.SelectStatementContext,0)

        def TEMPORARY(self):
            return self.getToken(mysqlParser.TEMPORARY, 0)
        def ifNotExists(self):
            return self.getTypedRuleContext(mysqlParser.IfNotExistsContext,0)

        def tableOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.TableOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.TableOptionContext,i)

        def partitionDefinitions(self):
            return self.getTypedRuleContext(mysqlParser.PartitionDefinitionsContext,0)

        def AS(self):
            return self.getToken(mysqlParser.AS, 0)
        def IGNORE(self):
            return self.getToken(mysqlParser.IGNORE, 0)
        def REPLACE(self):
            return self.getToken(mysqlParser.REPLACE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryCreateTable" ):
                listener.enterQueryCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryCreateTable" ):
                listener.exitQueryCreateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryCreateTable" ):
                return visitor.visitQueryCreateTable(self)
            else:
                return visitor.visitChildren(self)



    def createTable(self):

        localctx = mysqlParser.CreateTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_createTable)
        self._la = 0 # Token type
        try:
            self.state = 1038
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                localctx = mysqlParser.CopyCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 962
                self.match(mysqlParser.CREATE)
                self.state = 964
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.TEMPORARY:
                    self.state = 963
                    self.match(mysqlParser.TEMPORARY)


                self.state = 966
                self.match(mysqlParser.TABLE)
                self.state = 968
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.IF:
                    self.state = 967
                    self.ifNotExists()


                self.state = 970
                self.tableName()
                self.state = 978
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [mysqlParser.LIKE]:
                    self.state = 971
                    self.match(mysqlParser.LIKE)
                    self.state = 972
                    self.tableName()
                    pass
                elif token in [mysqlParser.LR_BRACKET]:
                    self.state = 973
                    self.match(mysqlParser.LR_BRACKET)
                    self.state = 974
                    self.match(mysqlParser.LIKE)
                    self.state = 975
                    localctx.parenthesisTable = self.tableName()
                    self.state = 976
                    self.match(mysqlParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                localctx = mysqlParser.QueryCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 980
                self.match(mysqlParser.CREATE)
                self.state = 982
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.TEMPORARY:
                    self.state = 981
                    self.match(mysqlParser.TEMPORARY)


                self.state = 984
                self.match(mysqlParser.TABLE)
                self.state = 986
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.IF:
                    self.state = 985
                    self.ifNotExists()


                self.state = 988
                self.tableName()
                self.state = 989
                self.createDefinitions()
                self.state = 1000
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & ((1 << (mysqlParser.CHARACTER - 21)) | (1 << (mysqlParser.COLLATE - 21)) | (1 << (mysqlParser.DEFAULT - 21)) | (1 << (mysqlParser.INDEX - 21)))) != 0) or _la==mysqlParser.UNION or ((((_la - 254)) & ~0x3f) == 0 and ((1 << (_la - 254)) & ((1 << (mysqlParser.AUTO_INCREMENT - 254)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 254)) | (1 << (mysqlParser.CHECKSUM - 254)) | (1 << (mysqlParser.COMMENT - 254)) | (1 << (mysqlParser.COMPRESSION - 254)) | (1 << (mysqlParser.CONNECTION - 254)) | (1 << (mysqlParser.DATA - 254)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 254)) | (1 << (mysqlParser.ENCRYPTION - 254)) | (1 << (mysqlParser.ENGINE - 254)))) != 0) or ((((_la - 349)) & ~0x3f) == 0 and ((1 << (_la - 349)) & ((1 << (mysqlParser.INSERT_METHOD - 349)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 349)) | (1 << (mysqlParser.MAX_ROWS - 349)) | (1 << (mysqlParser.MIN_ROWS - 349)))) != 0) or ((((_la - 424)) & ~0x3f) == 0 and ((1 << (_la - 424)) & ((1 << (mysqlParser.PACK_KEYS - 424)) | (1 << (mysqlParser.PASSWORD - 424)) | (1 << (mysqlParser.ROW_FORMAT - 424)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (mysqlParser.STATS_AUTO_RECALC - 500)) | (1 << (mysqlParser.STATS_PERSISTENT - 500)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (mysqlParser.TABLESPACE - 500)))) != 0) or _la==mysqlParser.CHARSET:
                    self.state = 990
                    self.tableOption()
                    self.state = 997
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & ((1 << (mysqlParser.CHARACTER - 21)) | (1 << (mysqlParser.COLLATE - 21)) | (1 << (mysqlParser.DEFAULT - 21)) | (1 << (mysqlParser.INDEX - 21)))) != 0) or _la==mysqlParser.UNION or ((((_la - 254)) & ~0x3f) == 0 and ((1 << (_la - 254)) & ((1 << (mysqlParser.AUTO_INCREMENT - 254)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 254)) | (1 << (mysqlParser.CHECKSUM - 254)) | (1 << (mysqlParser.COMMENT - 254)) | (1 << (mysqlParser.COMPRESSION - 254)) | (1 << (mysqlParser.CONNECTION - 254)) | (1 << (mysqlParser.DATA - 254)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 254)) | (1 << (mysqlParser.ENCRYPTION - 254)) | (1 << (mysqlParser.ENGINE - 254)))) != 0) or ((((_la - 349)) & ~0x3f) == 0 and ((1 << (_la - 349)) & ((1 << (mysqlParser.INSERT_METHOD - 349)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 349)) | (1 << (mysqlParser.MAX_ROWS - 349)) | (1 << (mysqlParser.MIN_ROWS - 349)))) != 0) or ((((_la - 424)) & ~0x3f) == 0 and ((1 << (_la - 424)) & ((1 << (mysqlParser.PACK_KEYS - 424)) | (1 << (mysqlParser.PASSWORD - 424)) | (1 << (mysqlParser.ROW_FORMAT - 424)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (mysqlParser.STATS_AUTO_RECALC - 500)) | (1 << (mysqlParser.STATS_PERSISTENT - 500)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (mysqlParser.TABLESPACE - 500)))) != 0) or _la==mysqlParser.CHARSET or _la==mysqlParser.COMMA:
                        self.state = 992
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==mysqlParser.COMMA:
                            self.state = 991
                            self.match(mysqlParser.COMMA)


                        self.state = 994
                        self.tableOption()
                        self.state = 999
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1003
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.PARTITION:
                    self.state = 1002
                    self.partitionDefinitions()


                self.state = 1006
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.IGNORE or _la==mysqlParser.REPLACE:
                    self.state = 1005
                    localctx.keyViolate = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==mysqlParser.IGNORE or _la==mysqlParser.REPLACE):
                        localctx.keyViolate = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.AS:
                    self.state = 1008
                    self.match(mysqlParser.AS)


                self.state = 1011
                self.selectStatement()
                pass

            elif la_ == 3:
                localctx = mysqlParser.ColumnCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1013
                self.match(mysqlParser.CREATE)
                self.state = 1015
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.TEMPORARY:
                    self.state = 1014
                    self.match(mysqlParser.TEMPORARY)


                self.state = 1017
                self.match(mysqlParser.TABLE)
                self.state = 1019
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.IF:
                    self.state = 1018
                    self.ifNotExists()


                self.state = 1021
                self.tableName()
                self.state = 1022
                self.createDefinitions()
                self.state = 1033
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & ((1 << (mysqlParser.CHARACTER - 21)) | (1 << (mysqlParser.COLLATE - 21)) | (1 << (mysqlParser.DEFAULT - 21)) | (1 << (mysqlParser.INDEX - 21)))) != 0) or _la==mysqlParser.UNION or ((((_la - 254)) & ~0x3f) == 0 and ((1 << (_la - 254)) & ((1 << (mysqlParser.AUTO_INCREMENT - 254)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 254)) | (1 << (mysqlParser.CHECKSUM - 254)) | (1 << (mysqlParser.COMMENT - 254)) | (1 << (mysqlParser.COMPRESSION - 254)) | (1 << (mysqlParser.CONNECTION - 254)) | (1 << (mysqlParser.DATA - 254)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 254)) | (1 << (mysqlParser.ENCRYPTION - 254)) | (1 << (mysqlParser.ENGINE - 254)))) != 0) or ((((_la - 349)) & ~0x3f) == 0 and ((1 << (_la - 349)) & ((1 << (mysqlParser.INSERT_METHOD - 349)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 349)) | (1 << (mysqlParser.MAX_ROWS - 349)) | (1 << (mysqlParser.MIN_ROWS - 349)))) != 0) or ((((_la - 424)) & ~0x3f) == 0 and ((1 << (_la - 424)) & ((1 << (mysqlParser.PACK_KEYS - 424)) | (1 << (mysqlParser.PASSWORD - 424)) | (1 << (mysqlParser.ROW_FORMAT - 424)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (mysqlParser.STATS_AUTO_RECALC - 500)) | (1 << (mysqlParser.STATS_PERSISTENT - 500)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (mysqlParser.TABLESPACE - 500)))) != 0) or _la==mysqlParser.CHARSET:
                    self.state = 1023
                    self.tableOption()
                    self.state = 1030
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & ((1 << (mysqlParser.CHARACTER - 21)) | (1 << (mysqlParser.COLLATE - 21)) | (1 << (mysqlParser.DEFAULT - 21)) | (1 << (mysqlParser.INDEX - 21)))) != 0) or _la==mysqlParser.UNION or ((((_la - 254)) & ~0x3f) == 0 and ((1 << (_la - 254)) & ((1 << (mysqlParser.AUTO_INCREMENT - 254)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 254)) | (1 << (mysqlParser.CHECKSUM - 254)) | (1 << (mysqlParser.COMMENT - 254)) | (1 << (mysqlParser.COMPRESSION - 254)) | (1 << (mysqlParser.CONNECTION - 254)) | (1 << (mysqlParser.DATA - 254)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 254)) | (1 << (mysqlParser.ENCRYPTION - 254)) | (1 << (mysqlParser.ENGINE - 254)))) != 0) or ((((_la - 349)) & ~0x3f) == 0 and ((1 << (_la - 349)) & ((1 << (mysqlParser.INSERT_METHOD - 349)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 349)) | (1 << (mysqlParser.MAX_ROWS - 349)) | (1 << (mysqlParser.MIN_ROWS - 349)))) != 0) or ((((_la - 424)) & ~0x3f) == 0 and ((1 << (_la - 424)) & ((1 << (mysqlParser.PACK_KEYS - 424)) | (1 << (mysqlParser.PASSWORD - 424)) | (1 << (mysqlParser.ROW_FORMAT - 424)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (mysqlParser.STATS_AUTO_RECALC - 500)) | (1 << (mysqlParser.STATS_PERSISTENT - 500)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (mysqlParser.TABLESPACE - 500)))) != 0) or _la==mysqlParser.CHARSET or _la==mysqlParser.COMMA:
                        self.state = 1025
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==mysqlParser.COMMA:
                            self.state = 1024
                            self.match(mysqlParser.COMMA)


                        self.state = 1027
                        self.tableOption()
                        self.state = 1032
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1036
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.PARTITION:
                    self.state = 1035
                    self.partitionDefinitions()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateTablespaceInnodbContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.datafile = None # Token
            self.fileBlockSize = None # FileSizeLiteralContext

        def CREATE(self):
            return self.getToken(mysqlParser.CREATE, 0)

        def TABLESPACE(self):
            return self.getToken(mysqlParser.TABLESPACE, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def ADD(self):
            return self.getToken(mysqlParser.ADD, 0)

        def DATAFILE(self):
            return self.getToken(mysqlParser.DATAFILE, 0)

        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def FILE_BLOCK_SIZE(self):
            return self.getToken(mysqlParser.FILE_BLOCK_SIZE, 0)

        def ENGINE(self):
            return self.getToken(mysqlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(mysqlParser.EngineNameContext,0)


        def fileSizeLiteral(self):
            return self.getTypedRuleContext(mysqlParser.FileSizeLiteralContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_createTablespaceInnodb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTablespaceInnodb" ):
                listener.enterCreateTablespaceInnodb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTablespaceInnodb" ):
                listener.exitCreateTablespaceInnodb(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTablespaceInnodb" ):
                return visitor.visitCreateTablespaceInnodb(self)
            else:
                return visitor.visitChildren(self)




    def createTablespaceInnodb(self):

        localctx = mysqlParser.CreateTablespaceInnodbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_createTablespaceInnodb)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            self.match(mysqlParser.CREATE)
            self.state = 1041
            self.match(mysqlParser.TABLESPACE)
            self.state = 1042
            self.uid()
            self.state = 1043
            self.match(mysqlParser.ADD)
            self.state = 1044
            self.match(mysqlParser.DATAFILE)
            self.state = 1045
            localctx.datafile = self.match(mysqlParser.STRING_LITERAL)
            self.state = 1049
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.FILE_BLOCK_SIZE:
                self.state = 1046
                self.match(mysqlParser.FILE_BLOCK_SIZE)
                self.state = 1047
                self.match(mysqlParser.EQUAL_SYMBOL)
                self.state = 1048
                localctx.fileBlockSize = self.fileSizeLiteral()


            self.state = 1056
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.ENGINE:
                self.state = 1051
                self.match(mysqlParser.ENGINE)
                self.state = 1053
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1052
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1055
                self.engineName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateTablespaceNdbContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.datafile = None # Token
            self.extentSize = None # FileSizeLiteralContext
            self.initialSize = None # FileSizeLiteralContext
            self.autoextendSize = None # FileSizeLiteralContext
            self.maxSize = None # FileSizeLiteralContext
            self.comment = None # Token

        def CREATE(self):
            return self.getToken(mysqlParser.CREATE, 0)

        def TABLESPACE(self):
            return self.getToken(mysqlParser.TABLESPACE, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UidContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UidContext,i)


        def ADD(self):
            return self.getToken(mysqlParser.ADD, 0)

        def DATAFILE(self):
            return self.getToken(mysqlParser.DATAFILE, 0)

        def USE(self):
            return self.getToken(mysqlParser.USE, 0)

        def LOGFILE(self):
            return self.getToken(mysqlParser.LOGFILE, 0)

        def GROUP(self):
            return self.getToken(mysqlParser.GROUP, 0)

        def ENGINE(self):
            return self.getToken(mysqlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(mysqlParser.EngineNameContext,0)


        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.STRING_LITERAL)
            else:
                return self.getToken(mysqlParser.STRING_LITERAL, i)

        def EXTENT_SIZE(self):
            return self.getToken(mysqlParser.EXTENT_SIZE, 0)

        def INITIAL_SIZE(self):
            return self.getToken(mysqlParser.INITIAL_SIZE, 0)

        def AUTOEXTEND_SIZE(self):
            return self.getToken(mysqlParser.AUTOEXTEND_SIZE, 0)

        def MAX_SIZE(self):
            return self.getToken(mysqlParser.MAX_SIZE, 0)

        def NODEGROUP(self):
            return self.getToken(mysqlParser.NODEGROUP, 0)

        def WAIT(self):
            return self.getToken(mysqlParser.WAIT, 0)

        def COMMENT(self):
            return self.getToken(mysqlParser.COMMENT, 0)

        def fileSizeLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.FileSizeLiteralContext)
            else:
                return self.getTypedRuleContext(mysqlParser.FileSizeLiteralContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_createTablespaceNdb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTablespaceNdb" ):
                listener.enterCreateTablespaceNdb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTablespaceNdb" ):
                listener.exitCreateTablespaceNdb(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTablespaceNdb" ):
                return visitor.visitCreateTablespaceNdb(self)
            else:
                return visitor.visitChildren(self)




    def createTablespaceNdb(self):

        localctx = mysqlParser.CreateTablespaceNdbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_createTablespaceNdb)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1058
            self.match(mysqlParser.CREATE)
            self.state = 1059
            self.match(mysqlParser.TABLESPACE)
            self.state = 1060
            self.uid()
            self.state = 1061
            self.match(mysqlParser.ADD)
            self.state = 1062
            self.match(mysqlParser.DATAFILE)
            self.state = 1063
            localctx.datafile = self.match(mysqlParser.STRING_LITERAL)
            self.state = 1064
            self.match(mysqlParser.USE)
            self.state = 1065
            self.match(mysqlParser.LOGFILE)
            self.state = 1066
            self.match(mysqlParser.GROUP)
            self.state = 1067
            self.uid()
            self.state = 1073
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.EXTENT_SIZE:
                self.state = 1068
                self.match(mysqlParser.EXTENT_SIZE)
                self.state = 1070
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1069
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1072
                localctx.extentSize = self.fileSizeLiteral()


            self.state = 1080
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.INITIAL_SIZE:
                self.state = 1075
                self.match(mysqlParser.INITIAL_SIZE)
                self.state = 1077
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1076
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1079
                localctx.initialSize = self.fileSizeLiteral()


            self.state = 1087
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.AUTOEXTEND_SIZE:
                self.state = 1082
                self.match(mysqlParser.AUTOEXTEND_SIZE)
                self.state = 1084
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1083
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1086
                localctx.autoextendSize = self.fileSizeLiteral()


            self.state = 1094
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.MAX_SIZE:
                self.state = 1089
                self.match(mysqlParser.MAX_SIZE)
                self.state = 1091
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1090
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1093
                localctx.maxSize = self.fileSizeLiteral()


            self.state = 1101
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.NODEGROUP:
                self.state = 1096
                self.match(mysqlParser.NODEGROUP)
                self.state = 1098
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1097
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1100
                self.uid()


            self.state = 1104
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.WAIT:
                self.state = 1103
                self.match(mysqlParser.WAIT)


            self.state = 1111
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.COMMENT:
                self.state = 1106
                self.match(mysqlParser.COMMENT)
                self.state = 1108
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1107
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1110
                localctx.comment = self.match(mysqlParser.STRING_LITERAL)


            self.state = 1113
            self.match(mysqlParser.ENGINE)
            self.state = 1115
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.EQUAL_SYMBOL:
                self.state = 1114
                self.match(mysqlParser.EQUAL_SYMBOL)


            self.state = 1117
            self.engineName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateTriggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.thisTrigger = None # FullIdContext
            self.triggerTime = None # Token
            self.triggerEvent = None # Token
            self.otherTrigger = None # FullIdContext

        def CREATE(self):
            return self.getToken(mysqlParser.CREATE, 0)

        def TRIGGER(self):
            return self.getToken(mysqlParser.TRIGGER, 0)

        def ON(self):
            return self.getToken(mysqlParser.ON, 0)

        def tableName(self):
            return self.getTypedRuleContext(mysqlParser.TableNameContext,0)


        def FOR(self):
            return self.getToken(mysqlParser.FOR, 0)

        def EACH(self):
            return self.getToken(mysqlParser.EACH, 0)

        def ROW(self):
            return self.getToken(mysqlParser.ROW, 0)

        def routineBody(self):
            return self.getTypedRuleContext(mysqlParser.RoutineBodyContext,0)


        def fullId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.FullIdContext)
            else:
                return self.getTypedRuleContext(mysqlParser.FullIdContext,i)


        def BEFORE(self):
            return self.getToken(mysqlParser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(mysqlParser.AFTER, 0)

        def INSERT(self):
            return self.getToken(mysqlParser.INSERT, 0)

        def UPDATE(self):
            return self.getToken(mysqlParser.UPDATE, 0)

        def DELETE(self):
            return self.getToken(mysqlParser.DELETE, 0)

        def ownerStatement(self):
            return self.getTypedRuleContext(mysqlParser.OwnerStatementContext,0)


        def FOLLOWS(self):
            return self.getToken(mysqlParser.FOLLOWS, 0)

        def PRECEDES(self):
            return self.getToken(mysqlParser.PRECEDES, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_createTrigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTrigger" ):
                listener.enterCreateTrigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTrigger" ):
                listener.exitCreateTrigger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateTrigger" ):
                return visitor.visitCreateTrigger(self)
            else:
                return visitor.visitChildren(self)




    def createTrigger(self):

        localctx = mysqlParser.CreateTriggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_createTrigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1119
            self.match(mysqlParser.CREATE)
            self.state = 1121
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.DEFINER:
                self.state = 1120
                self.ownerStatement()


            self.state = 1123
            self.match(mysqlParser.TRIGGER)
            self.state = 1124
            localctx.thisTrigger = self.fullId()
            self.state = 1125
            localctx.triggerTime = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==mysqlParser.BEFORE or _la==mysqlParser.AFTER):
                localctx.triggerTime = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1126
            localctx.triggerEvent = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==mysqlParser.DELETE or _la==mysqlParser.INSERT or _la==mysqlParser.UPDATE):
                localctx.triggerEvent = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1127
            self.match(mysqlParser.ON)
            self.state = 1128
            self.tableName()
            self.state = 1129
            self.match(mysqlParser.FOR)
            self.state = 1130
            self.match(mysqlParser.EACH)
            self.state = 1131
            self.match(mysqlParser.ROW)
            self.state = 1134
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 1132
                _la = self._input.LA(1)
                if not(_la==mysqlParser.FOLLOWS or _la==mysqlParser.PRECEDES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1133
                localctx.otherTrigger = self.fullId()


            self.state = 1136
            self.routineBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateViewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.algType = None # Token
            self.secContext = None # Token
            self.checkOption = None # Token

        def CREATE(self):
            return self.getToken(mysqlParser.CREATE, 0)

        def VIEW(self):
            return self.getToken(mysqlParser.VIEW, 0)

        def fullId(self):
            return self.getTypedRuleContext(mysqlParser.FullIdContext,0)


        def AS(self):
            return self.getToken(mysqlParser.AS, 0)

        def selectStatement(self):
            return self.getTypedRuleContext(mysqlParser.SelectStatementContext,0)


        def OR(self):
            return self.getToken(mysqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(mysqlParser.REPLACE, 0)

        def ALGORITHM(self):
            return self.getToken(mysqlParser.ALGORITHM, 0)

        def ownerStatement(self):
            return self.getTypedRuleContext(mysqlParser.OwnerStatementContext,0)


        def SQL(self):
            return self.getToken(mysqlParser.SQL, 0)

        def SECURITY(self):
            return self.getToken(mysqlParser.SECURITY, 0)

        def uidList(self):
            return self.getTypedRuleContext(mysqlParser.UidListContext,0)


        def WITH(self):
            return self.getToken(mysqlParser.WITH, 0)

        def CHECK(self):
            return self.getToken(mysqlParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(mysqlParser.OPTION, 0)

        def UNDEFINED(self):
            return self.getToken(mysqlParser.UNDEFINED, 0)

        def MERGE(self):
            return self.getToken(mysqlParser.MERGE, 0)

        def TEMPTABLE(self):
            return self.getToken(mysqlParser.TEMPTABLE, 0)

        def DEFINER(self):
            return self.getToken(mysqlParser.DEFINER, 0)

        def INVOKER(self):
            return self.getToken(mysqlParser.INVOKER, 0)

        def CASCADED(self):
            return self.getToken(mysqlParser.CASCADED, 0)

        def LOCAL(self):
            return self.getToken(mysqlParser.LOCAL, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_createView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateView" ):
                listener.enterCreateView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateView" ):
                listener.exitCreateView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateView" ):
                return visitor.visitCreateView(self)
            else:
                return visitor.visitChildren(self)




    def createView(self):

        localctx = mysqlParser.CreateViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_createView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1138
            self.match(mysqlParser.CREATE)
            self.state = 1141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.OR:
                self.state = 1139
                self.match(mysqlParser.OR)
                self.state = 1140
                self.match(mysqlParser.REPLACE)


            self.state = 1146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.ALGORITHM:
                self.state = 1143
                self.match(mysqlParser.ALGORITHM)
                self.state = 1144
                self.match(mysqlParser.EQUAL_SYMBOL)
                self.state = 1145
                localctx.algType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.MERGE or _la==mysqlParser.TEMPTABLE or _la==mysqlParser.UNDEFINED):
                    localctx.algType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.DEFINER:
                self.state = 1148
                self.ownerStatement()


            self.state = 1154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.SQL:
                self.state = 1151
                self.match(mysqlParser.SQL)
                self.state = 1152
                self.match(mysqlParser.SECURITY)
                self.state = 1153
                localctx.secContext = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.DEFINER or _la==mysqlParser.INVOKER):
                    localctx.secContext = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1156
            self.match(mysqlParser.VIEW)
            self.state = 1157
            self.fullId()
            self.state = 1162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.LR_BRACKET:
                self.state = 1158
                self.match(mysqlParser.LR_BRACKET)
                self.state = 1159
                self.uidList()
                self.state = 1160
                self.match(mysqlParser.RR_BRACKET)


            self.state = 1164
            self.match(mysqlParser.AS)
            self.state = 1165
            self.selectStatement()
            self.state = 1172
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.WITH:
                self.state = 1166
                self.match(mysqlParser.WITH)
                self.state = 1168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.CASCADED or _la==mysqlParser.LOCAL:
                    self.state = 1167
                    localctx.checkOption = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==mysqlParser.CASCADED or _la==mysqlParser.LOCAL):
                        localctx.checkOption = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1170
                self.match(mysqlParser.CHECK)
                self.state = 1171
                self.match(mysqlParser.OPTION)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateDatabaseOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHARACTER(self):
            return self.getToken(mysqlParser.CHARACTER, 0)

        def SET(self):
            return self.getToken(mysqlParser.SET, 0)

        def charsetName(self):
            return self.getTypedRuleContext(mysqlParser.CharsetNameContext,0)


        def DEFAULT(self):
            return self.getToken(mysqlParser.DEFAULT, 0)

        def COLLATE(self):
            return self.getToken(mysqlParser.COLLATE, 0)

        def collationName(self):
            return self.getTypedRuleContext(mysqlParser.CollationNameContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_createDatabaseOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDatabaseOption" ):
                listener.enterCreateDatabaseOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDatabaseOption" ):
                listener.exitCreateDatabaseOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateDatabaseOption" ):
                return visitor.visitCreateDatabaseOption(self)
            else:
                return visitor.visitChildren(self)




    def createDatabaseOption(self):

        localctx = mysqlParser.CreateDatabaseOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_createDatabaseOption)
        self._la = 0 # Token type
        try:
            self.state = 1191
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1175
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.DEFAULT:
                    self.state = 1174
                    self.match(mysqlParser.DEFAULT)


                self.state = 1177
                self.match(mysqlParser.CHARACTER)
                self.state = 1178
                self.match(mysqlParser.SET)
                self.state = 1180
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1179
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1182
                self.charsetName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1184
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.DEFAULT:
                    self.state = 1183
                    self.match(mysqlParser.DEFAULT)


                self.state = 1186
                self.match(mysqlParser.COLLATE)
                self.state = 1188
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1187
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1190
                self.collationName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OwnerStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFINER(self):
            return self.getToken(mysqlParser.DEFINER, 0)

        def userName(self):
            return self.getTypedRuleContext(mysqlParser.UserNameContext,0)


        def CURRENT_USER(self):
            return self.getToken(mysqlParser.CURRENT_USER, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_ownerStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOwnerStatement" ):
                listener.enterOwnerStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOwnerStatement" ):
                listener.exitOwnerStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOwnerStatement" ):
                return visitor.visitOwnerStatement(self)
            else:
                return visitor.visitChildren(self)




    def ownerStatement(self):

        localctx = mysqlParser.OwnerStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_ownerStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1193
            self.match(mysqlParser.DEFINER)
            self.state = 1194
            self.match(mysqlParser.EQUAL_SYMBOL)
            self.state = 1201
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.STRING_USER_NAME]:
                self.state = 1195
                self.userName()
                pass
            elif token in [mysqlParser.CURRENT_USER]:
                self.state = 1196
                self.match(mysqlParser.CURRENT_USER)
                self.state = 1199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.LR_BRACKET:
                    self.state = 1197
                    self.match(mysqlParser.LR_BRACKET)
                    self.state = 1198
                    self.match(mysqlParser.RR_BRACKET)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScheduleExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_scheduleExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PreciseScheduleContext(ScheduleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ScheduleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AT(self):
            return self.getToken(mysqlParser.AT, 0)
        def timestampValue(self):
            return self.getTypedRuleContext(mysqlParser.TimestampValueContext,0)

        def intervalExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.IntervalExprContext)
            else:
                return self.getTypedRuleContext(mysqlParser.IntervalExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreciseSchedule" ):
                listener.enterPreciseSchedule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreciseSchedule" ):
                listener.exitPreciseSchedule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPreciseSchedule" ):
                return visitor.visitPreciseSchedule(self)
            else:
                return visitor.visitChildren(self)


    class IntervalScheduleContext(ScheduleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ScheduleExpressionContext
            super().__init__(parser)
            self.start = None # TimestampValueContext
            self._intervalExpr = None # IntervalExprContext
            self.startIntervals = list() # of IntervalExprContexts
            self.end = None # TimestampValueContext
            self.endIntervals = list() # of IntervalExprContexts
            self.copyFrom(ctx)

        def EVERY(self):
            return self.getToken(mysqlParser.EVERY, 0)
        def intervalType(self):
            return self.getTypedRuleContext(mysqlParser.IntervalTypeContext,0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,0)

        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)

        def STARTS(self):
            return self.getToken(mysqlParser.STARTS, 0)
        def ENDS(self):
            return self.getToken(mysqlParser.ENDS, 0)
        def timestampValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.TimestampValueContext)
            else:
                return self.getTypedRuleContext(mysqlParser.TimestampValueContext,i)

        def intervalExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.IntervalExprContext)
            else:
                return self.getTypedRuleContext(mysqlParser.IntervalExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalSchedule" ):
                listener.enterIntervalSchedule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalSchedule" ):
                listener.exitIntervalSchedule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalSchedule" ):
                return visitor.visitIntervalSchedule(self)
            else:
                return visitor.visitChildren(self)



    def scheduleExpression(self):

        localctx = mysqlParser.ScheduleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_scheduleExpression)
        self._la = 0 # Token type
        try:
            self.state = 1237
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.AT]:
                localctx = mysqlParser.PreciseScheduleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1203
                self.match(mysqlParser.AT)
                self.state = 1204
                self.timestampValue()
                self.state = 1208
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.PLUS:
                    self.state = 1205
                    self.intervalExpr()
                    self.state = 1210
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [mysqlParser.EVERY]:
                localctx = mysqlParser.IntervalScheduleContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1211
                self.match(mysqlParser.EVERY)
                self.state = 1214
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 1212
                    self.decimalLiteral()
                    pass

                elif la_ == 2:
                    self.state = 1213
                    self.expression(0)
                    pass


                self.state = 1216
                self.intervalType()
                self.state = 1225
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.STARTS:
                    self.state = 1217
                    self.match(mysqlParser.STARTS)
                    self.state = 1218
                    localctx.start = self.timestampValue()
                    self.state = 1222
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==mysqlParser.PLUS:
                        self.state = 1219
                        localctx._intervalExpr = self.intervalExpr()
                        localctx.startIntervals.append(localctx._intervalExpr)
                        self.state = 1224
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1235
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.ENDS:
                    self.state = 1227
                    self.match(mysqlParser.ENDS)
                    self.state = 1228
                    localctx.end = self.timestampValue()
                    self.state = 1232
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==mysqlParser.PLUS:
                        self.state = 1229
                        localctx._intervalExpr = self.intervalExpr()
                        localctx.endIntervals.append(localctx._intervalExpr)
                        self.state = 1234
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TimestampValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT_TIMESTAMP(self):
            return self.getToken(mysqlParser.CURRENT_TIMESTAMP, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(mysqlParser.StringLiteralContext,0)


        def decimalLiteral(self):
            return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,0)


        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_timestampValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimestampValue" ):
                listener.enterTimestampValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimestampValue" ):
                listener.exitTimestampValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTimestampValue" ):
                return visitor.visitTimestampValue(self)
            else:
                return visitor.visitChildren(self)




    def timestampValue(self):

        localctx = mysqlParser.TimestampValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_timestampValue)
        try:
            self.state = 1243
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1239
                self.match(mysqlParser.CURRENT_TIMESTAMP)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1240
                self.stringLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1241
                self.decimalLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1242
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntervalExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERVAL(self):
            return self.getToken(mysqlParser.INTERVAL, 0)

        def intervalType(self):
            return self.getTypedRuleContext(mysqlParser.IntervalTypeContext,0)


        def decimalLiteral(self):
            return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,0)


        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_intervalExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalExpr" ):
                listener.enterIntervalExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalExpr" ):
                listener.exitIntervalExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalExpr" ):
                return visitor.visitIntervalExpr(self)
            else:
                return visitor.visitChildren(self)




    def intervalExpr(self):

        localctx = mysqlParser.IntervalExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_intervalExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1245
            self.match(mysqlParser.PLUS)
            self.state = 1246
            self.match(mysqlParser.INTERVAL)
            self.state = 1249
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.state = 1247
                self.decimalLiteral()
                pass

            elif la_ == 2:
                self.state = 1248
                self.expression(0)
                pass


            self.state = 1251
            self.intervalType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntervalTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intervalTypeBase(self):
            return self.getTypedRuleContext(mysqlParser.IntervalTypeBaseContext,0)


        def YEAR(self):
            return self.getToken(mysqlParser.YEAR, 0)

        def YEAR_MONTH(self):
            return self.getToken(mysqlParser.YEAR_MONTH, 0)

        def DAY_HOUR(self):
            return self.getToken(mysqlParser.DAY_HOUR, 0)

        def DAY_MINUTE(self):
            return self.getToken(mysqlParser.DAY_MINUTE, 0)

        def DAY_SECOND(self):
            return self.getToken(mysqlParser.DAY_SECOND, 0)

        def HOUR_MINUTE(self):
            return self.getToken(mysqlParser.HOUR_MINUTE, 0)

        def HOUR_SECOND(self):
            return self.getToken(mysqlParser.HOUR_SECOND, 0)

        def MINUTE_SECOND(self):
            return self.getToken(mysqlParser.MINUTE_SECOND, 0)

        def SECOND_MICROSECOND(self):
            return self.getToken(mysqlParser.SECOND_MICROSECOND, 0)

        def MINUTE_MICROSECOND(self):
            return self.getToken(mysqlParser.MINUTE_MICROSECOND, 0)

        def HOUR_MICROSECOND(self):
            return self.getToken(mysqlParser.HOUR_MICROSECOND, 0)

        def DAY_MICROSECOND(self):
            return self.getToken(mysqlParser.DAY_MICROSECOND, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_intervalType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalType" ):
                listener.enterIntervalType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalType" ):
                listener.exitIntervalType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalType" ):
                return visitor.visitIntervalType(self)
            else:
                return visitor.visitChildren(self)




    def intervalType(self):

        localctx = mysqlParser.IntervalTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_intervalType)
        try:
            self.state = 1266
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.QUARTER, mysqlParser.MONTH, mysqlParser.DAY, mysqlParser.HOUR, mysqlParser.MINUTE, mysqlParser.WEEK, mysqlParser.SECOND, mysqlParser.MICROSECOND]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1253
                self.intervalTypeBase()
                pass
            elif token in [mysqlParser.YEAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1254
                self.match(mysqlParser.YEAR)
                pass
            elif token in [mysqlParser.YEAR_MONTH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1255
                self.match(mysqlParser.YEAR_MONTH)
                pass
            elif token in [mysqlParser.DAY_HOUR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1256
                self.match(mysqlParser.DAY_HOUR)
                pass
            elif token in [mysqlParser.DAY_MINUTE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1257
                self.match(mysqlParser.DAY_MINUTE)
                pass
            elif token in [mysqlParser.DAY_SECOND]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1258
                self.match(mysqlParser.DAY_SECOND)
                pass
            elif token in [mysqlParser.HOUR_MINUTE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1259
                self.match(mysqlParser.HOUR_MINUTE)
                pass
            elif token in [mysqlParser.HOUR_SECOND]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1260
                self.match(mysqlParser.HOUR_SECOND)
                pass
            elif token in [mysqlParser.MINUTE_SECOND]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1261
                self.match(mysqlParser.MINUTE_SECOND)
                pass
            elif token in [mysqlParser.SECOND_MICROSECOND]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1262
                self.match(mysqlParser.SECOND_MICROSECOND)
                pass
            elif token in [mysqlParser.MINUTE_MICROSECOND]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1263
                self.match(mysqlParser.MINUTE_MICROSECOND)
                pass
            elif token in [mysqlParser.HOUR_MICROSECOND]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1264
                self.match(mysqlParser.HOUR_MICROSECOND)
                pass
            elif token in [mysqlParser.DAY_MICROSECOND]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1265
                self.match(mysqlParser.DAY_MICROSECOND)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnableTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLE(self):
            return self.getToken(mysqlParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(mysqlParser.DISABLE, 0)

        def ON(self):
            return self.getToken(mysqlParser.ON, 0)

        def SLAVE(self):
            return self.getToken(mysqlParser.SLAVE, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_enableType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnableType" ):
                listener.enterEnableType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnableType" ):
                listener.exitEnableType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnableType" ):
                return visitor.visitEnableType(self)
            else:
                return visitor.visitChildren(self)




    def enableType(self):

        localctx = mysqlParser.EnableTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_enableType)
        try:
            self.state = 1273
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1268
                self.match(mysqlParser.ENABLE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1269
                self.match(mysqlParser.DISABLE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1270
                self.match(mysqlParser.DISABLE)
                self.state = 1271
                self.match(mysqlParser.ON)
                self.state = 1272
                self.match(mysqlParser.SLAVE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndexTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(mysqlParser.USING, 0)

        def BTREE(self):
            return self.getToken(mysqlParser.BTREE, 0)

        def HASH(self):
            return self.getToken(mysqlParser.HASH, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_indexType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexType" ):
                listener.enterIndexType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexType" ):
                listener.exitIndexType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexType" ):
                return visitor.visitIndexType(self)
            else:
                return visitor.visitChildren(self)




    def indexType(self):

        localctx = mysqlParser.IndexTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_indexType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1275
            self.match(mysqlParser.USING)
            self.state = 1276
            _la = self._input.LA(1)
            if not(_la==mysqlParser.BTREE or _la==mysqlParser.HASH):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndexOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KEY_BLOCK_SIZE(self):
            return self.getToken(mysqlParser.KEY_BLOCK_SIZE, 0)

        def fileSizeLiteral(self):
            return self.getTypedRuleContext(mysqlParser.FileSizeLiteralContext,0)


        def indexType(self):
            return self.getTypedRuleContext(mysqlParser.IndexTypeContext,0)


        def WITH(self):
            return self.getToken(mysqlParser.WITH, 0)

        def PARSER(self):
            return self.getToken(mysqlParser.PARSER, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def COMMENT(self):
            return self.getToken(mysqlParser.COMMENT, 0)

        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_indexOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexOption" ):
                listener.enterIndexOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexOption" ):
                listener.exitIndexOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexOption" ):
                return visitor.visitIndexOption(self)
            else:
                return visitor.visitChildren(self)




    def indexOption(self):

        localctx = mysqlParser.IndexOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_indexOption)
        self._la = 0 # Token type
        try:
            self.state = 1289
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.KEY_BLOCK_SIZE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1278
                self.match(mysqlParser.KEY_BLOCK_SIZE)
                self.state = 1280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1279
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1282
                self.fileSizeLiteral()
                pass
            elif token in [mysqlParser.USING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1283
                self.indexType()
                pass
            elif token in [mysqlParser.WITH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1284
                self.match(mysqlParser.WITH)
                self.state = 1285
                self.match(mysqlParser.PARSER)
                self.state = 1286
                self.uid()
                pass
            elif token in [mysqlParser.COMMENT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1287
                self.match(mysqlParser.COMMENT)
                self.state = 1288
                self.match(mysqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.direction = None # Token

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def dataType(self):
            return self.getTypedRuleContext(mysqlParser.DataTypeContext,0)


        def IN(self):
            return self.getToken(mysqlParser.IN, 0)

        def OUT(self):
            return self.getToken(mysqlParser.OUT, 0)

        def INOUT(self):
            return self.getToken(mysqlParser.INOUT, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_procedureParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureParameter" ):
                listener.enterProcedureParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureParameter" ):
                listener.exitProcedureParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureParameter" ):
                return visitor.visitProcedureParameter(self)
            else:
                return visitor.visitChildren(self)




    def procedureParameter(self):

        localctx = mysqlParser.ProcedureParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_procedureParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1291
            localctx.direction = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (mysqlParser.IN - 66)) | (1 << (mysqlParser.INOUT - 66)) | (1 << (mysqlParser.OUT - 66)))) != 0)):
                localctx.direction = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1292
            self.uid()
            self.state = 1293
            self.dataType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def dataType(self):
            return self.getTypedRuleContext(mysqlParser.DataTypeContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_functionParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionParameter" ):
                listener.enterFunctionParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionParameter" ):
                listener.exitFunctionParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionParameter" ):
                return visitor.visitFunctionParameter(self)
            else:
                return visitor.visitChildren(self)




    def functionParameter(self):

        localctx = mysqlParser.FunctionParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_functionParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1295
            self.uid()
            self.state = 1296
            self.dataType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RoutineOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_routineOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RoutineBehaviorContext(RoutineOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.RoutineOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DETERMINISTIC(self):
            return self.getToken(mysqlParser.DETERMINISTIC, 0)
        def NOT(self):
            return self.getToken(mysqlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineBehavior" ):
                listener.enterRoutineBehavior(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineBehavior" ):
                listener.exitRoutineBehavior(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoutineBehavior" ):
                return visitor.visitRoutineBehavior(self)
            else:
                return visitor.visitChildren(self)


    class RoutineLanguageContext(RoutineOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.RoutineOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LANGUAGE(self):
            return self.getToken(mysqlParser.LANGUAGE, 0)
        def SQL(self):
            return self.getToken(mysqlParser.SQL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineLanguage" ):
                listener.enterRoutineLanguage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineLanguage" ):
                listener.exitRoutineLanguage(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoutineLanguage" ):
                return visitor.visitRoutineLanguage(self)
            else:
                return visitor.visitChildren(self)


    class RoutineCommentContext(RoutineOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.RoutineOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(mysqlParser.COMMENT, 0)
        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineComment" ):
                listener.enterRoutineComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineComment" ):
                listener.exitRoutineComment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoutineComment" ):
                return visitor.visitRoutineComment(self)
            else:
                return visitor.visitChildren(self)


    class RoutineSecurityContext(RoutineOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.RoutineOptionContext
            super().__init__(parser)
            self.context = None # Token
            self.copyFrom(ctx)

        def SQL(self):
            return self.getToken(mysqlParser.SQL, 0)
        def SECURITY(self):
            return self.getToken(mysqlParser.SECURITY, 0)
        def DEFINER(self):
            return self.getToken(mysqlParser.DEFINER, 0)
        def INVOKER(self):
            return self.getToken(mysqlParser.INVOKER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineSecurity" ):
                listener.enterRoutineSecurity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineSecurity" ):
                listener.exitRoutineSecurity(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoutineSecurity" ):
                return visitor.visitRoutineSecurity(self)
            else:
                return visitor.visitChildren(self)


    class RoutineDataContext(RoutineOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.RoutineOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONTAINS(self):
            return self.getToken(mysqlParser.CONTAINS, 0)
        def SQL(self):
            return self.getToken(mysqlParser.SQL, 0)
        def NO(self):
            return self.getToken(mysqlParser.NO, 0)
        def READS(self):
            return self.getToken(mysqlParser.READS, 0)
        def DATA(self):
            return self.getToken(mysqlParser.DATA, 0)
        def MODIFIES(self):
            return self.getToken(mysqlParser.MODIFIES, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineData" ):
                listener.enterRoutineData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineData" ):
                listener.exitRoutineData(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoutineData" ):
                return visitor.visitRoutineData(self)
            else:
                return visitor.visitChildren(self)



    def routineOption(self):

        localctx = mysqlParser.RoutineOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_routineOption)
        self._la = 0 # Token type
        try:
            self.state = 1321
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.COMMENT]:
                localctx = mysqlParser.RoutineCommentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1298
                self.match(mysqlParser.COMMENT)
                self.state = 1299
                self.match(mysqlParser.STRING_LITERAL)
                pass
            elif token in [mysqlParser.LANGUAGE]:
                localctx = mysqlParser.RoutineLanguageContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1300
                self.match(mysqlParser.LANGUAGE)
                self.state = 1301
                self.match(mysqlParser.SQL)
                pass
            elif token in [mysqlParser.DETERMINISTIC, mysqlParser.NOT]:
                localctx = mysqlParser.RoutineBehaviorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.NOT:
                    self.state = 1302
                    self.match(mysqlParser.NOT)


                self.state = 1305
                self.match(mysqlParser.DETERMINISTIC)
                pass
            elif token in [mysqlParser.MODIFIES, mysqlParser.READS, mysqlParser.CONTAINS, mysqlParser.NO]:
                localctx = mysqlParser.RoutineDataContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1316
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [mysqlParser.CONTAINS]:
                    self.state = 1306
                    self.match(mysqlParser.CONTAINS)
                    self.state = 1307
                    self.match(mysqlParser.SQL)
                    pass
                elif token in [mysqlParser.NO]:
                    self.state = 1308
                    self.match(mysqlParser.NO)
                    self.state = 1309
                    self.match(mysqlParser.SQL)
                    pass
                elif token in [mysqlParser.READS]:
                    self.state = 1310
                    self.match(mysqlParser.READS)
                    self.state = 1311
                    self.match(mysqlParser.SQL)
                    self.state = 1312
                    self.match(mysqlParser.DATA)
                    pass
                elif token in [mysqlParser.MODIFIES]:
                    self.state = 1313
                    self.match(mysqlParser.MODIFIES)
                    self.state = 1314
                    self.match(mysqlParser.SQL)
                    self.state = 1315
                    self.match(mysqlParser.DATA)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [mysqlParser.SQL]:
                localctx = mysqlParser.RoutineSecurityContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1318
                self.match(mysqlParser.SQL)
                self.state = 1319
                self.match(mysqlParser.SECURITY)
                self.state = 1320
                localctx.context = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.DEFINER or _la==mysqlParser.INVOKER):
                    localctx.context = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ServerOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HOST(self):
            return self.getToken(mysqlParser.HOST, 0)

        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def DATABASE(self):
            return self.getToken(mysqlParser.DATABASE, 0)

        def USER(self):
            return self.getToken(mysqlParser.USER, 0)

        def PASSWORD(self):
            return self.getToken(mysqlParser.PASSWORD, 0)

        def SOCKET(self):
            return self.getToken(mysqlParser.SOCKET, 0)

        def OWNER(self):
            return self.getToken(mysqlParser.OWNER, 0)

        def PORT(self):
            return self.getToken(mysqlParser.PORT, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_serverOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServerOption" ):
                listener.enterServerOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServerOption" ):
                listener.exitServerOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitServerOption" ):
                return visitor.visitServerOption(self)
            else:
                return visitor.visitChildren(self)




    def serverOption(self):

        localctx = mysqlParser.ServerOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_serverOption)
        try:
            self.state = 1337
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.HOST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1323
                self.match(mysqlParser.HOST)
                self.state = 1324
                self.match(mysqlParser.STRING_LITERAL)
                pass
            elif token in [mysqlParser.DATABASE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1325
                self.match(mysqlParser.DATABASE)
                self.state = 1326
                self.match(mysqlParser.STRING_LITERAL)
                pass
            elif token in [mysqlParser.USER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1327
                self.match(mysqlParser.USER)
                self.state = 1328
                self.match(mysqlParser.STRING_LITERAL)
                pass
            elif token in [mysqlParser.PASSWORD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1329
                self.match(mysqlParser.PASSWORD)
                self.state = 1330
                self.match(mysqlParser.STRING_LITERAL)
                pass
            elif token in [mysqlParser.SOCKET]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1331
                self.match(mysqlParser.SOCKET)
                self.state = 1332
                self.match(mysqlParser.STRING_LITERAL)
                pass
            elif token in [mysqlParser.OWNER]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1333
                self.match(mysqlParser.OWNER)
                self.state = 1334
                self.match(mysqlParser.STRING_LITERAL)
                pass
            elif token in [mysqlParser.PORT]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1335
                self.match(mysqlParser.PORT)
                self.state = 1336
                self.decimalLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateDefinitionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.CreateDefinitionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.CreateDefinitionContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_createDefinitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDefinitions" ):
                listener.enterCreateDefinitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDefinitions" ):
                listener.exitCreateDefinitions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateDefinitions" ):
                return visitor.visitCreateDefinitions(self)
            else:
                return visitor.visitChildren(self)




    def createDefinitions(self):

        localctx = mysqlParser.CreateDefinitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_createDefinitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1339
            self.match(mysqlParser.LR_BRACKET)
            self.state = 1340
            self.createDefinition()
            self.state = 1345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.COMMA:
                self.state = 1341
                self.match(mysqlParser.COMMA)
                self.state = 1342
                self.createDefinition()
                self.state = 1347
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1348
            self.match(mysqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_createDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ColumnDeclarationContext(CreateDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.CreateDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)

        def columnDefinition(self):
            return self.getTypedRuleContext(mysqlParser.ColumnDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDeclaration" ):
                listener.enterColumnDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDeclaration" ):
                listener.exitColumnDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnDeclaration" ):
                return visitor.visitColumnDeclaration(self)
            else:
                return visitor.visitChildren(self)


    class ConstraintDeclarationContext(CreateDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.CreateDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableConstraint(self):
            return self.getTypedRuleContext(mysqlParser.TableConstraintContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintDeclaration" ):
                listener.enterConstraintDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintDeclaration" ):
                listener.exitConstraintDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstraintDeclaration" ):
                return visitor.visitConstraintDeclaration(self)
            else:
                return visitor.visitChildren(self)


    class IndexDeclarationContext(CreateDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.CreateDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def indexColumnDefinition(self):
            return self.getTypedRuleContext(mysqlParser.IndexColumnDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexDeclaration" ):
                listener.enterIndexDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexDeclaration" ):
                listener.exitIndexDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexDeclaration" ):
                return visitor.visitIndexDeclaration(self)
            else:
                return visitor.visitChildren(self)



    def createDefinition(self):

        localctx = mysqlParser.CreateDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_createDefinition)
        try:
            self.state = 1355
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.LEFT, mysqlParser.RIGHT, mysqlParser.DATE, mysqlParser.TIME, mysqlParser.TIMESTAMP, mysqlParser.DATETIME, mysqlParser.YEAR, mysqlParser.TEXT, mysqlParser.ENUM, mysqlParser.COUNT, mysqlParser.POSITION, mysqlParser.ACCOUNT, mysqlParser.ACTION, mysqlParser.AFTER, mysqlParser.AGGREGATE, mysqlParser.ALGORITHM, mysqlParser.ANY, mysqlParser.AT, mysqlParser.AUTHORS, mysqlParser.AUTOCOMMIT, mysqlParser.AUTOEXTEND_SIZE, mysqlParser.AUTO_INCREMENT, mysqlParser.AVG_ROW_LENGTH, mysqlParser.BEGIN, mysqlParser.BINLOG, mysqlParser.BIT, mysqlParser.BLOCK, mysqlParser.BTREE, mysqlParser.CASCADED, mysqlParser.CHAIN, mysqlParser.CHANNEL, mysqlParser.CHECKSUM, mysqlParser.CIPHER, mysqlParser.CLIENT, mysqlParser.COALESCE, mysqlParser.CODE, mysqlParser.COLUMNS, mysqlParser.COLUMN_FORMAT, mysqlParser.COMMENT, mysqlParser.COMMIT, mysqlParser.COMPACT, mysqlParser.COMPLETION, mysqlParser.COMPRESSED, mysqlParser.COMPRESSION, mysqlParser.CONCURRENT, mysqlParser.CONNECTION, mysqlParser.CONSISTENT, mysqlParser.CONTAINS, mysqlParser.CONTEXT, mysqlParser.CONTRIBUTORS, mysqlParser.COPY, mysqlParser.CPU, mysqlParser.DATA, mysqlParser.DATAFILE, mysqlParser.DEALLOCATE, mysqlParser.DEFAULT_AUTH, mysqlParser.DEFINER, mysqlParser.DELAY_KEY_WRITE, mysqlParser.DIRECTORY, mysqlParser.DISABLE, mysqlParser.DISCARD, mysqlParser.DISK, mysqlParser.DO, mysqlParser.DUMPFILE, mysqlParser.DUPLICATE, mysqlParser.DYNAMIC, mysqlParser.ENABLE, mysqlParser.ENCRYPTION, mysqlParser.ENDS, mysqlParser.ENGINE, mysqlParser.ENGINES, mysqlParser.ERROR, mysqlParser.ERRORS, mysqlParser.ESCAPE, mysqlParser.EVEN, mysqlParser.EVENT, mysqlParser.EVENTS, mysqlParser.EVERY, mysqlParser.EXCHANGE, mysqlParser.EXCLUSIVE, mysqlParser.EXPIRE, mysqlParser.EXTENT_SIZE, mysqlParser.FAULTS, mysqlParser.FIELDS, mysqlParser.FILE_BLOCK_SIZE, mysqlParser.FILTER, mysqlParser.FIRST, mysqlParser.FIXED, mysqlParser.FOLLOWS, mysqlParser.FULL, mysqlParser.FUNCTION, mysqlParser.GLOBAL, mysqlParser.GRANTS, mysqlParser.GROUP_REPLICATION, mysqlParser.HASH, mysqlParser.HOST, mysqlParser.IDENTIFIED, mysqlParser.IGNORE_SERVER_IDS, mysqlParser.IMPORT, mysqlParser.INDEXES, mysqlParser.INITIAL_SIZE, mysqlParser.INPLACE, mysqlParser.INSERT_METHOD, mysqlParser.INSTANCE, mysqlParser.INVOKER, mysqlParser.IO, mysqlParser.IO_THREAD, mysqlParser.IPC, mysqlParser.ISOLATION, mysqlParser.ISSUER, mysqlParser.KEY_BLOCK_SIZE, mysqlParser.LANGUAGE, mysqlParser.LAST, mysqlParser.LEAVES, mysqlParser.LESS, mysqlParser.LEVEL, mysqlParser.LIST, mysqlParser.LOCAL, mysqlParser.LOGFILE, mysqlParser.LOGS, mysqlParser.MASTER, mysqlParser.MASTER_AUTO_POSITION, mysqlParser.MASTER_CONNECT_RETRY, mysqlParser.MASTER_DELAY, mysqlParser.MASTER_HEARTBEAT_PERIOD, mysqlParser.MASTER_HOST, mysqlParser.MASTER_LOG_FILE, mysqlParser.MASTER_LOG_POS, mysqlParser.MASTER_PASSWORD, mysqlParser.MASTER_PORT, mysqlParser.MASTER_RETRY_COUNT, mysqlParser.MASTER_SSL, mysqlParser.MASTER_SSL_CA, mysqlParser.MASTER_SSL_CAPATH, mysqlParser.MASTER_SSL_CERT, mysqlParser.MASTER_SSL_CIPHER, mysqlParser.MASTER_SSL_CRL, mysqlParser.MASTER_SSL_CRLPATH, mysqlParser.MASTER_SSL_KEY, mysqlParser.MASTER_TLS_VERSION, mysqlParser.MASTER_USER, mysqlParser.MAX_CONNECTIONS_PER_HOUR, mysqlParser.MAX_QUERIES_PER_HOUR, mysqlParser.MAX_ROWS, mysqlParser.MAX_SIZE, mysqlParser.MAX_UPDATES_PER_HOUR, mysqlParser.MAX_USER_CONNECTIONS, mysqlParser.MERGE, mysqlParser.MID, mysqlParser.MIGRATE, mysqlParser.MIN_ROWS, mysqlParser.MODIFY, mysqlParser.MUTEX, mysqlParser.MYSQL, mysqlParser.NAME, mysqlParser.NAMES, mysqlParser.NCHAR, mysqlParser.NEVER, mysqlParser.NO, mysqlParser.NODEGROUP, mysqlParser.NONE, mysqlParser.OFFLINE, mysqlParser.OFFSET, mysqlParser.OJ, mysqlParser.OLD_PASSWORD, mysqlParser.ONE, mysqlParser.ONLINE, mysqlParser.ONLY, mysqlParser.OPTIMIZER_COSTS, mysqlParser.OPTIONS, mysqlParser.OWNER, mysqlParser.PACK_KEYS, mysqlParser.PAGE, mysqlParser.PARSER, mysqlParser.PARTIAL, mysqlParser.PARTITIONING, mysqlParser.PARTITIONS, mysqlParser.PASSWORD, mysqlParser.PHASE, mysqlParser.PLUGIN_DIR, mysqlParser.PLUGINS, mysqlParser.PORT, mysqlParser.PRECEDES, mysqlParser.PREPARE, mysqlParser.PRESERVE, mysqlParser.PREV, mysqlParser.PROCESSLIST, mysqlParser.PROFILE, mysqlParser.PROFILES, mysqlParser.PROXY, mysqlParser.QUERY, mysqlParser.QUICK, mysqlParser.REBUILD, mysqlParser.RECOVER, mysqlParser.REDO_BUFFER_SIZE, mysqlParser.REDUNDANT, mysqlParser.RELAY_LOG_FILE, mysqlParser.RELAY_LOG_POS, mysqlParser.RELAYLOG, mysqlParser.REMOVE, mysqlParser.REORGANIZE, mysqlParser.REPAIR, mysqlParser.REPLICATE_DO_DB, mysqlParser.REPLICATE_DO_TABLE, mysqlParser.REPLICATE_IGNORE_DB, mysqlParser.REPLICATE_IGNORE_TABLE, mysqlParser.REPLICATE_REWRITE_DB, mysqlParser.REPLICATE_WILD_DO_TABLE, mysqlParser.REPLICATE_WILD_IGNORE_TABLE, mysqlParser.REPLICATION, mysqlParser.RESUME, mysqlParser.RETURNS, mysqlParser.ROLLBACK, mysqlParser.ROLLUP, mysqlParser.ROTATE, mysqlParser.ROW, mysqlParser.ROWS, mysqlParser.ROW_FORMAT, mysqlParser.SAVEPOINT, mysqlParser.SCHEDULE, mysqlParser.SECURITY, mysqlParser.SERVER, mysqlParser.SESSION, mysqlParser.SHARE, mysqlParser.SHARED, mysqlParser.SIGNED, mysqlParser.SIMPLE, mysqlParser.SLAVE, mysqlParser.SNAPSHOT, mysqlParser.SOCKET, mysqlParser.SOME, mysqlParser.SOUNDS, mysqlParser.SOURCE, mysqlParser.SQL_AFTER_GTIDS, mysqlParser.SQL_AFTER_MTS_GAPS, mysqlParser.SQL_BEFORE_GTIDS, mysqlParser.SQL_BUFFER_RESULT, mysqlParser.SQL_CACHE, mysqlParser.SQL_NO_CACHE, mysqlParser.SQL_THREAD, mysqlParser.START, mysqlParser.STARTS, mysqlParser.STATS_AUTO_RECALC, mysqlParser.STATS_PERSISTENT, mysqlParser.STATS_SAMPLE_PAGES, mysqlParser.STATUS, mysqlParser.STOP, mysqlParser.STORAGE, mysqlParser.STRING, mysqlParser.SUBJECT, mysqlParser.SUBPARTITION, mysqlParser.SUBPARTITIONS, mysqlParser.SUSPEND, mysqlParser.SWAPS, mysqlParser.SWITCHES, mysqlParser.TABLESPACE, mysqlParser.TEMPORARY, mysqlParser.TEMPTABLE, mysqlParser.THAN, mysqlParser.TRANSACTION, mysqlParser.TRUNCATE, mysqlParser.UNDEFINED, mysqlParser.UNDOFILE, mysqlParser.UNDO_BUFFER_SIZE, mysqlParser.UNKNOWN, mysqlParser.UPGRADE, mysqlParser.USER, mysqlParser.VALIDATION, mysqlParser.VALUE, mysqlParser.VARIABLES, mysqlParser.VIEW, mysqlParser.WAIT, mysqlParser.WARNINGS, mysqlParser.WITHOUT, mysqlParser.WORK, mysqlParser.WRAPPER, mysqlParser.X509, mysqlParser.XA, mysqlParser.XML, mysqlParser.QUARTER, mysqlParser.MONTH, mysqlParser.DAY, mysqlParser.HOUR, mysqlParser.MINUTE, mysqlParser.WEEK, mysqlParser.SECOND, mysqlParser.MICROSECOND, mysqlParser.TABLES, mysqlParser.ROUTINE, mysqlParser.EXECUTE, mysqlParser.FILE, mysqlParser.PROCESS, mysqlParser.RELOAD, mysqlParser.SHUTDOWN, mysqlParser.SUPER, mysqlParser.PRIVILEGES, mysqlParser.ARMSCII8, mysqlParser.ASCII, mysqlParser.BIG5, mysqlParser.CP1250, mysqlParser.CP1251, mysqlParser.CP1256, mysqlParser.CP1257, mysqlParser.CP850, mysqlParser.CP852, mysqlParser.CP866, mysqlParser.CP932, mysqlParser.DEC8, mysqlParser.EUCJPMS, mysqlParser.EUCKR, mysqlParser.GB2312, mysqlParser.GBK, mysqlParser.GEOSTD8, mysqlParser.GREEK, mysqlParser.HEBREW, mysqlParser.HP8, mysqlParser.KEYBCS2, mysqlParser.KOI8R, mysqlParser.KOI8U, mysqlParser.LATIN1, mysqlParser.LATIN2, mysqlParser.LATIN5, mysqlParser.LATIN7, mysqlParser.MACCE, mysqlParser.MACROMAN, mysqlParser.SJIS, mysqlParser.SWE7, mysqlParser.TIS620, mysqlParser.UCS2, mysqlParser.UJIS, mysqlParser.UTF16, mysqlParser.UTF16LE, mysqlParser.UTF32, mysqlParser.UTF8, mysqlParser.UTF8MB3, mysqlParser.UTF8MB4, mysqlParser.ARCHIVE, mysqlParser.BLACKHOLE, mysqlParser.CSV, mysqlParser.FEDERATED, mysqlParser.INNODB, mysqlParser.MEMORY, mysqlParser.MRG_MYISAM, mysqlParser.MYISAM, mysqlParser.NDB, mysqlParser.NDBCLUSTER, mysqlParser.PERFOMANCE_SCHEMA, mysqlParser.REPEATABLE, mysqlParser.COMMITTED, mysqlParser.UNCOMMITTED, mysqlParser.SERIALIZABLE, mysqlParser.GEOMETRYCOLLECTION, mysqlParser.LINESTRING, mysqlParser.MULTILINESTRING, mysqlParser.MULTIPOINT, mysqlParser.MULTIPOLYGON, mysqlParser.POINT, mysqlParser.POLYGON, mysqlParser.ABS, mysqlParser.ACOS, mysqlParser.ADDDATE, mysqlParser.ADDTIME, mysqlParser.AES_DECRYPT, mysqlParser.AES_ENCRYPT, mysqlParser.AREA, mysqlParser.ASBINARY, mysqlParser.ASIN, mysqlParser.ASTEXT, mysqlParser.ASWKB, mysqlParser.ASWKT, mysqlParser.ASYMMETRIC_DECRYPT, mysqlParser.ASYMMETRIC_DERIVE, mysqlParser.ASYMMETRIC_ENCRYPT, mysqlParser.ASYMMETRIC_SIGN, mysqlParser.ASYMMETRIC_VERIFY, mysqlParser.ATAN, mysqlParser.ATAN2, mysqlParser.BENCHMARK, mysqlParser.BIN, mysqlParser.BIT_COUNT, mysqlParser.BIT_LENGTH, mysqlParser.BUFFER, mysqlParser.CEIL, mysqlParser.CEILING, mysqlParser.CENTROID, mysqlParser.CHARACTER_LENGTH, mysqlParser.CHARSET, mysqlParser.CHAR_LENGTH, mysqlParser.COERCIBILITY, mysqlParser.COLLATION, mysqlParser.COMPRESS, mysqlParser.CONCAT, mysqlParser.CONCAT_WS, mysqlParser.CONNECTION_ID, mysqlParser.CONV, mysqlParser.CONVERT_TZ, mysqlParser.COS, mysqlParser.COT, mysqlParser.CRC32, mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY, mysqlParser.CREATE_ASYMMETRIC_PUB_KEY, mysqlParser.CREATE_DH_PARAMETERS, mysqlParser.CREATE_DIGEST, mysqlParser.CROSSES, mysqlParser.DATEDIFF, mysqlParser.DATE_FORMAT, mysqlParser.DAYNAME, mysqlParser.DAYOFMONTH, mysqlParser.DAYOFWEEK, mysqlParser.DAYOFYEAR, mysqlParser.DECODE, mysqlParser.DEGREES, mysqlParser.DES_DECRYPT, mysqlParser.DES_ENCRYPT, mysqlParser.DIMENSION, mysqlParser.DISJOINT, mysqlParser.ELT, mysqlParser.ENCODE, mysqlParser.ENCRYPT, mysqlParser.ENDPOINT, mysqlParser.ENVELOPE, mysqlParser.EQUALS, mysqlParser.EXP, mysqlParser.EXPORT_SET, mysqlParser.EXTERIORRING, mysqlParser.EXTRACTVALUE, mysqlParser.FIELD, mysqlParser.FIND_IN_SET, mysqlParser.FLOOR, mysqlParser.FORMAT, mysqlParser.FOUND_ROWS, mysqlParser.FROM_BASE64, mysqlParser.FROM_DAYS, mysqlParser.FROM_UNIXTIME, mysqlParser.GEOMCOLLFROMTEXT, mysqlParser.GEOMCOLLFROMWKB, mysqlParser.GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.GEOMETRYCOLLECTIONFROMWKB, mysqlParser.GEOMETRYFROMTEXT, mysqlParser.GEOMETRYFROMWKB, mysqlParser.GEOMETRYN, mysqlParser.GEOMETRYTYPE, mysqlParser.GEOMFROMTEXT, mysqlParser.GEOMFROMWKB, mysqlParser.GET_FORMAT, mysqlParser.GET_LOCK, mysqlParser.GLENGTH, mysqlParser.GREATEST, mysqlParser.GTID_SUBSET, mysqlParser.GTID_SUBTRACT, mysqlParser.HEX, mysqlParser.IFNULL, mysqlParser.INET6_ATON, mysqlParser.INET6_NTOA, mysqlParser.INET_ATON, mysqlParser.INET_NTOA, mysqlParser.INSTR, mysqlParser.INTERIORRINGN, mysqlParser.INTERSECTS, mysqlParser.ISCLOSED, mysqlParser.ISEMPTY, mysqlParser.ISNULL, mysqlParser.ISSIMPLE, mysqlParser.IS_FREE_LOCK, mysqlParser.IS_IPV4, mysqlParser.IS_IPV4_COMPAT, mysqlParser.IS_IPV4_MAPPED, mysqlParser.IS_IPV6, mysqlParser.IS_USED_LOCK, mysqlParser.LAST_INSERT_ID, mysqlParser.LCASE, mysqlParser.LEAST, mysqlParser.LENGTH, mysqlParser.LINEFROMTEXT, mysqlParser.LINEFROMWKB, mysqlParser.LINESTRINGFROMTEXT, mysqlParser.LINESTRINGFROMWKB, mysqlParser.LN, mysqlParser.LOAD_FILE, mysqlParser.LOCATE, mysqlParser.LOG, mysqlParser.LOG10, mysqlParser.LOG2, mysqlParser.LOWER, mysqlParser.LPAD, mysqlParser.LTRIM, mysqlParser.MAKEDATE, mysqlParser.MAKETIME, mysqlParser.MAKE_SET, mysqlParser.MASTER_POS_WAIT, mysqlParser.MBRCONTAINS, mysqlParser.MBRDISJOINT, mysqlParser.MBREQUAL, mysqlParser.MBRINTERSECTS, mysqlParser.MBROVERLAPS, mysqlParser.MBRTOUCHES, mysqlParser.MBRWITHIN, mysqlParser.MD5, mysqlParser.MLINEFROMTEXT, mysqlParser.MLINEFROMWKB, mysqlParser.MONTHNAME, mysqlParser.MPOINTFROMTEXT, mysqlParser.MPOINTFROMWKB, mysqlParser.MPOLYFROMTEXT, mysqlParser.MPOLYFROMWKB, mysqlParser.MULTILINESTRINGFROMTEXT, mysqlParser.MULTILINESTRINGFROMWKB, mysqlParser.MULTIPOINTFROMTEXT, mysqlParser.MULTIPOINTFROMWKB, mysqlParser.MULTIPOLYGONFROMTEXT, mysqlParser.MULTIPOLYGONFROMWKB, mysqlParser.NAME_CONST, mysqlParser.NULLIF, mysqlParser.NUMGEOMETRIES, mysqlParser.NUMINTERIORRINGS, mysqlParser.NUMPOINTS, mysqlParser.OCT, mysqlParser.OCTET_LENGTH, mysqlParser.ORD, mysqlParser.OVERLAPS, mysqlParser.PERIOD_ADD, mysqlParser.PERIOD_DIFF, mysqlParser.PI, mysqlParser.POINTFROMTEXT, mysqlParser.POINTFROMWKB, mysqlParser.POINTN, mysqlParser.POLYFROMTEXT, mysqlParser.POLYFROMWKB, mysqlParser.POLYGONFROMTEXT, mysqlParser.POLYGONFROMWKB, mysqlParser.POW, mysqlParser.POWER, mysqlParser.QUOTE, mysqlParser.RADIANS, mysqlParser.RAND, mysqlParser.RANDOM_BYTES, mysqlParser.RELEASE_LOCK, mysqlParser.REVERSE, mysqlParser.ROUND, mysqlParser.ROW_COUNT, mysqlParser.RPAD, mysqlParser.RTRIM, mysqlParser.SEC_TO_TIME, mysqlParser.SESSION_USER, mysqlParser.SHA, mysqlParser.SHA1, mysqlParser.SHA2, mysqlParser.SIGN, mysqlParser.SIN, mysqlParser.SLEEP, mysqlParser.SOUNDEX, mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, mysqlParser.SQRT, mysqlParser.SRID, mysqlParser.STARTPOINT, mysqlParser.STRCMP, mysqlParser.STR_TO_DATE, mysqlParser.ST_AREA, mysqlParser.ST_ASBINARY, mysqlParser.ST_ASTEXT, mysqlParser.ST_ASWKB, mysqlParser.ST_ASWKT, mysqlParser.ST_BUFFER, mysqlParser.ST_CENTROID, mysqlParser.ST_CONTAINS, mysqlParser.ST_CROSSES, mysqlParser.ST_DIFFERENCE, mysqlParser.ST_DIMENSION, mysqlParser.ST_DISJOINT, mysqlParser.ST_DISTANCE, mysqlParser.ST_ENDPOINT, mysqlParser.ST_ENVELOPE, mysqlParser.ST_EQUALS, mysqlParser.ST_EXTERIORRING, mysqlParser.ST_GEOMCOLLFROMTEXT, mysqlParser.ST_GEOMCOLLFROMTXT, mysqlParser.ST_GEOMCOLLFROMWKB, mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, mysqlParser.ST_GEOMETRYFROMTEXT, mysqlParser.ST_GEOMETRYFROMWKB, mysqlParser.ST_GEOMETRYN, mysqlParser.ST_GEOMETRYTYPE, mysqlParser.ST_GEOMFROMTEXT, mysqlParser.ST_GEOMFROMWKB, mysqlParser.ST_INTERIORRINGN, mysqlParser.ST_INTERSECTION, mysqlParser.ST_INTERSECTS, mysqlParser.ST_ISCLOSED, mysqlParser.ST_ISEMPTY, mysqlParser.ST_ISSIMPLE, mysqlParser.ST_LINEFROMTEXT, mysqlParser.ST_LINEFROMWKB, mysqlParser.ST_LINESTRINGFROMTEXT, mysqlParser.ST_LINESTRINGFROMWKB, mysqlParser.ST_NUMGEOMETRIES, mysqlParser.ST_NUMINTERIORRING, mysqlParser.ST_NUMINTERIORRINGS, mysqlParser.ST_NUMPOINTS, mysqlParser.ST_OVERLAPS, mysqlParser.ST_POINTFROMTEXT, mysqlParser.ST_POINTFROMWKB, mysqlParser.ST_POINTN, mysqlParser.ST_POLYFROMTEXT, mysqlParser.ST_POLYFROMWKB, mysqlParser.ST_POLYGONFROMTEXT, mysqlParser.ST_POLYGONFROMWKB, mysqlParser.ST_SRID, mysqlParser.ST_STARTPOINT, mysqlParser.ST_SYMDIFFERENCE, mysqlParser.ST_TOUCHES, mysqlParser.ST_UNION, mysqlParser.ST_WITHIN, mysqlParser.ST_X, mysqlParser.ST_Y, mysqlParser.SUBDATE, mysqlParser.SUBSTRING_INDEX, mysqlParser.SUBTIME, mysqlParser.SYSTEM_USER, mysqlParser.TAN, mysqlParser.TIMEDIFF, mysqlParser.TIMESTAMPADD, mysqlParser.TIMESTAMPDIFF, mysqlParser.TIME_FORMAT, mysqlParser.TIME_TO_SEC, mysqlParser.TOUCHES, mysqlParser.TO_BASE64, mysqlParser.TO_DAYS, mysqlParser.TO_SECONDS, mysqlParser.UCASE, mysqlParser.UNCOMPRESS, mysqlParser.UNCOMPRESSED_LENGTH, mysqlParser.UNHEX, mysqlParser.UNIX_TIMESTAMP, mysqlParser.UPDATEXML, mysqlParser.UPPER, mysqlParser.UUID, mysqlParser.UUID_SHORT, mysqlParser.VALIDATE_PASSWORD_STRENGTH, mysqlParser.VERSION, mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, mysqlParser.WEEKDAY, mysqlParser.WEEKOFYEAR, mysqlParser.WEIGHT_STRING, mysqlParser.WITHIN, mysqlParser.YEARWEEK, mysqlParser.Y_FUNCTION, mysqlParser.X_FUNCTION, mysqlParser.CHARSET_REVERSE_QOUTE_STRING, mysqlParser.ID, mysqlParser.REVERSE_QUOTE_ID]:
                localctx = mysqlParser.ColumnDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1350
                self.uid()
                self.state = 1351
                self.columnDefinition()
                pass
            elif token in [mysqlParser.CHECK, mysqlParser.CONSTRAINT, mysqlParser.FOREIGN, mysqlParser.PRIMARY, mysqlParser.UNIQUE]:
                localctx = mysqlParser.ConstraintDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1353
                self.tableConstraint()
                pass
            elif token in [mysqlParser.FULLTEXT, mysqlParser.INDEX, mysqlParser.KEY, mysqlParser.SPATIAL]:
                localctx = mysqlParser.IndexDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1354
                self.indexColumnDefinition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColumnDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(mysqlParser.DataTypeContext,0)


        def columnConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.ColumnConstraintContext)
            else:
                return self.getTypedRuleContext(mysqlParser.ColumnConstraintContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_columnDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDefinition" ):
                listener.enterColumnDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDefinition" ):
                listener.exitColumnDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumnDefinition" ):
                return visitor.visitColumnDefinition(self)
            else:
                return visitor.visitChildren(self)




    def columnDefinition(self):

        localctx = mysqlParser.ColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_columnDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1357
            self.dataType()
            self.state = 1361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 36)) & ~0x3f) == 0 and ((1 << (_la - 36)) & ((1 << (mysqlParser.DEFAULT - 36)) | (1 << (mysqlParser.KEY - 36)) | (1 << (mysqlParser.NOT - 36)) | (1 << (mysqlParser.NULL_LITERAL - 36)))) != 0) or ((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & ((1 << (mysqlParser.PRIMARY - 110)) | (1 << (mysqlParser.REFERENCES - 110)) | (1 << (mysqlParser.UNIQUE - 110)))) != 0) or ((((_la - 254)) & ~0x3f) == 0 and ((1 << (_la - 254)) & ((1 << (mysqlParser.AUTO_INCREMENT - 254)) | (1 << (mysqlParser.COLUMN_FORMAT - 254)) | (1 << (mysqlParser.COMMENT - 254)))) != 0) or _la==mysqlParser.STORAGE or _la==mysqlParser.NULL_SPEC_LITERAL:
                self.state = 1358
                self.columnConstraint()
                self.state = 1363
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ColumnConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_columnConstraint

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class StorageColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.storageval = None # Token
            self.copyFrom(ctx)

        def STORAGE(self):
            return self.getToken(mysqlParser.STORAGE, 0)
        def DISK(self):
            return self.getToken(mysqlParser.DISK, 0)
        def MEMORY(self):
            return self.getToken(mysqlParser.MEMORY, 0)
        def DEFAULT(self):
            return self.getToken(mysqlParser.DEFAULT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageColumnConstraint" ):
                listener.enterStorageColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageColumnConstraint" ):
                listener.exitStorageColumnConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageColumnConstraint" ):
                return visitor.visitStorageColumnConstraint(self)
            else:
                return visitor.visitChildren(self)


    class FormatColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.colformat = None # Token
            self.copyFrom(ctx)

        def COLUMN_FORMAT(self):
            return self.getToken(mysqlParser.COLUMN_FORMAT, 0)
        def FIXED(self):
            return self.getToken(mysqlParser.FIXED, 0)
        def DYNAMIC(self):
            return self.getToken(mysqlParser.DYNAMIC, 0)
        def DEFAULT(self):
            return self.getToken(mysqlParser.DEFAULT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormatColumnConstraint" ):
                listener.enterFormatColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormatColumnConstraint" ):
                listener.exitFormatColumnConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFormatColumnConstraint" ):
                return visitor.visitFormatColumnConstraint(self)
            else:
                return visitor.visitChildren(self)


    class AutoIncrementColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AUTO_INCREMENT(self):
            return self.getToken(mysqlParser.AUTO_INCREMENT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAutoIncrementColumnConstraint" ):
                listener.enterAutoIncrementColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAutoIncrementColumnConstraint" ):
                listener.exitAutoIncrementColumnConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAutoIncrementColumnConstraint" ):
                return visitor.visitAutoIncrementColumnConstraint(self)
            else:
                return visitor.visitChildren(self)


    class CommentColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(mysqlParser.COMMENT, 0)
        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentColumnConstraint" ):
                listener.enterCommentColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentColumnConstraint" ):
                listener.exitCommentColumnConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentColumnConstraint" ):
                return visitor.visitCommentColumnConstraint(self)
            else:
                return visitor.visitChildren(self)


    class PrimaryKeyColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def KEY(self):
            return self.getToken(mysqlParser.KEY, 0)
        def PRIMARY(self):
            return self.getToken(mysqlParser.PRIMARY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryKeyColumnConstraint" ):
                listener.enterPrimaryKeyColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryKeyColumnConstraint" ):
                listener.exitPrimaryKeyColumnConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryKeyColumnConstraint" ):
                return visitor.visitPrimaryKeyColumnConstraint(self)
            else:
                return visitor.visitChildren(self)


    class UniqueKeyColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNIQUE(self):
            return self.getToken(mysqlParser.UNIQUE, 0)
        def KEY(self):
            return self.getToken(mysqlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniqueKeyColumnConstraint" ):
                listener.enterUniqueKeyColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniqueKeyColumnConstraint" ):
                listener.exitUniqueKeyColumnConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUniqueKeyColumnConstraint" ):
                return visitor.visitUniqueKeyColumnConstraint(self)
            else:
                return visitor.visitChildren(self)


    class NullColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def nullNotnull(self):
            return self.getTypedRuleContext(mysqlParser.NullNotnullContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullColumnConstraint" ):
                listener.enterNullColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullColumnConstraint" ):
                listener.exitNullColumnConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullColumnConstraint" ):
                return visitor.visitNullColumnConstraint(self)
            else:
                return visitor.visitChildren(self)


    class DefaultColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFAULT(self):
            return self.getToken(mysqlParser.DEFAULT, 0)
        def defaultValue(self):
            return self.getTypedRuleContext(mysqlParser.DefaultValueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultColumnConstraint" ):
                listener.enterDefaultColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultColumnConstraint" ):
                listener.exitDefaultColumnConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultColumnConstraint" ):
                return visitor.visitDefaultColumnConstraint(self)
            else:
                return visitor.visitChildren(self)


    class ReferenceColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def referenceDefinition(self):
            return self.getTypedRuleContext(mysqlParser.ReferenceDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceColumnConstraint" ):
                listener.enterReferenceColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceColumnConstraint" ):
                listener.exitReferenceColumnConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferenceColumnConstraint" ):
                return visitor.visitReferenceColumnConstraint(self)
            else:
                return visitor.visitChildren(self)



    def columnConstraint(self):

        localctx = mysqlParser.ColumnConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_columnConstraint)
        self._la = 0 # Token type
        try:
            self.state = 1383
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.NOT, mysqlParser.NULL_LITERAL, mysqlParser.NULL_SPEC_LITERAL]:
                localctx = mysqlParser.NullColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1364
                self.nullNotnull()
                pass
            elif token in [mysqlParser.DEFAULT]:
                localctx = mysqlParser.DefaultColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1365
                self.match(mysqlParser.DEFAULT)
                self.state = 1366
                self.defaultValue()
                pass
            elif token in [mysqlParser.AUTO_INCREMENT]:
                localctx = mysqlParser.AutoIncrementColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1367
                self.match(mysqlParser.AUTO_INCREMENT)
                pass
            elif token in [mysqlParser.KEY, mysqlParser.PRIMARY]:
                localctx = mysqlParser.PrimaryKeyColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1369
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.PRIMARY:
                    self.state = 1368
                    self.match(mysqlParser.PRIMARY)


                self.state = 1371
                self.match(mysqlParser.KEY)
                pass
            elif token in [mysqlParser.UNIQUE]:
                localctx = mysqlParser.UniqueKeyColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1372
                self.match(mysqlParser.UNIQUE)
                self.state = 1374
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                if la_ == 1:
                    self.state = 1373
                    self.match(mysqlParser.KEY)


                pass
            elif token in [mysqlParser.COMMENT]:
                localctx = mysqlParser.CommentColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1376
                self.match(mysqlParser.COMMENT)
                self.state = 1377
                self.match(mysqlParser.STRING_LITERAL)
                pass
            elif token in [mysqlParser.COLUMN_FORMAT]:
                localctx = mysqlParser.FormatColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1378
                self.match(mysqlParser.COLUMN_FORMAT)
                self.state = 1379
                localctx.colformat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.DEFAULT or _la==mysqlParser.DYNAMIC or _la==mysqlParser.FIXED):
                    localctx.colformat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [mysqlParser.STORAGE]:
                localctx = mysqlParser.StorageColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1380
                self.match(mysqlParser.STORAGE)
                self.state = 1381
                localctx.storageval = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.DEFAULT or _la==mysqlParser.DISK or _la==mysqlParser.MEMORY):
                    localctx.storageval = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [mysqlParser.REFERENCES]:
                localctx = mysqlParser.ReferenceColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1382
                self.referenceDefinition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_tableConstraint

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UniqueKeyTableConstraintContext(TableConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.TableConstraintContext
            super().__init__(parser)
            self.name = None # UidContext
            self.indexFormat = None # Token
            self.index = None # UidContext
            self.copyFrom(ctx)

        def UNIQUE(self):
            return self.getToken(mysqlParser.UNIQUE, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(mysqlParser.IndexColumnNamesContext,0)

        def CONSTRAINT(self):
            return self.getToken(mysqlParser.CONSTRAINT, 0)
        def indexType(self):
            return self.getTypedRuleContext(mysqlParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.IndexOptionContext,i)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UidContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UidContext,i)

        def INDEX(self):
            return self.getToken(mysqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(mysqlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniqueKeyTableConstraint" ):
                listener.enterUniqueKeyTableConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniqueKeyTableConstraint" ):
                listener.exitUniqueKeyTableConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUniqueKeyTableConstraint" ):
                return visitor.visitUniqueKeyTableConstraint(self)
            else:
                return visitor.visitChildren(self)


    class CheckTableConstraintContext(TableConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.TableConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHECK(self):
            return self.getToken(mysqlParser.CHECK, 0)
        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckTableConstraint" ):
                listener.enterCheckTableConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckTableConstraint" ):
                listener.exitCheckTableConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCheckTableConstraint" ):
                return visitor.visitCheckTableConstraint(self)
            else:
                return visitor.visitChildren(self)


    class PrimaryKeyTableConstraintContext(TableConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.TableConstraintContext
            super().__init__(parser)
            self.name = None # UidContext
            self.copyFrom(ctx)

        def PRIMARY(self):
            return self.getToken(mysqlParser.PRIMARY, 0)
        def KEY(self):
            return self.getToken(mysqlParser.KEY, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(mysqlParser.IndexColumnNamesContext,0)

        def CONSTRAINT(self):
            return self.getToken(mysqlParser.CONSTRAINT, 0)
        def indexType(self):
            return self.getTypedRuleContext(mysqlParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.IndexOptionContext,i)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryKeyTableConstraint" ):
                listener.enterPrimaryKeyTableConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryKeyTableConstraint" ):
                listener.exitPrimaryKeyTableConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryKeyTableConstraint" ):
                return visitor.visitPrimaryKeyTableConstraint(self)
            else:
                return visitor.visitChildren(self)


    class ForeignKeyTableConstraintContext(TableConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.TableConstraintContext
            super().__init__(parser)
            self.name = None # UidContext
            self.index = None # UidContext
            self.copyFrom(ctx)

        def FOREIGN(self):
            return self.getToken(mysqlParser.FOREIGN, 0)
        def KEY(self):
            return self.getToken(mysqlParser.KEY, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(mysqlParser.IndexColumnNamesContext,0)

        def referenceDefinition(self):
            return self.getTypedRuleContext(mysqlParser.ReferenceDefinitionContext,0)

        def CONSTRAINT(self):
            return self.getToken(mysqlParser.CONSTRAINT, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UidContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UidContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeignKeyTableConstraint" ):
                listener.enterForeignKeyTableConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeignKeyTableConstraint" ):
                listener.exitForeignKeyTableConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForeignKeyTableConstraint" ):
                return visitor.visitForeignKeyTableConstraint(self)
            else:
                return visitor.visitChildren(self)



    def tableConstraint(self):

        localctx = mysqlParser.TableConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_tableConstraint)
        self._la = 0 # Token type
        try:
            self.state = 1445
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                localctx = mysqlParser.PrimaryKeyTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1389
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.CONSTRAINT:
                    self.state = 1385
                    self.match(mysqlParser.CONSTRAINT)
                    self.state = 1387
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==mysqlParser.LEFT or _la==mysqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (mysqlParser.DATE - 180)) | (1 << (mysqlParser.TIME - 180)) | (1 << (mysqlParser.TIMESTAMP - 180)) | (1 << (mysqlParser.DATETIME - 180)) | (1 << (mysqlParser.YEAR - 180)) | (1 << (mysqlParser.TEXT - 180)) | (1 << (mysqlParser.ENUM - 180)) | (1 << (mysqlParser.COUNT - 180)) | (1 << (mysqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (mysqlParser.ACCOUNT - 244)) | (1 << (mysqlParser.ACTION - 244)) | (1 << (mysqlParser.AFTER - 244)) | (1 << (mysqlParser.AGGREGATE - 244)) | (1 << (mysqlParser.ALGORITHM - 244)) | (1 << (mysqlParser.ANY - 244)) | (1 << (mysqlParser.AT - 244)) | (1 << (mysqlParser.AUTHORS - 244)) | (1 << (mysqlParser.AUTOCOMMIT - 244)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (mysqlParser.AUTO_INCREMENT - 244)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 244)) | (1 << (mysqlParser.BEGIN - 244)) | (1 << (mysqlParser.BINLOG - 244)) | (1 << (mysqlParser.BIT - 244)) | (1 << (mysqlParser.BLOCK - 244)) | (1 << (mysqlParser.BTREE - 244)) | (1 << (mysqlParser.CASCADED - 244)) | (1 << (mysqlParser.CHAIN - 244)) | (1 << (mysqlParser.CHANNEL - 244)) | (1 << (mysqlParser.CHECKSUM - 244)) | (1 << (mysqlParser.CIPHER - 244)) | (1 << (mysqlParser.CLIENT - 244)) | (1 << (mysqlParser.COALESCE - 244)) | (1 << (mysqlParser.CODE - 244)) | (1 << (mysqlParser.COLUMNS - 244)) | (1 << (mysqlParser.COLUMN_FORMAT - 244)) | (1 << (mysqlParser.COMMENT - 244)) | (1 << (mysqlParser.COMMIT - 244)) | (1 << (mysqlParser.COMPACT - 244)) | (1 << (mysqlParser.COMPLETION - 244)) | (1 << (mysqlParser.COMPRESSED - 244)) | (1 << (mysqlParser.COMPRESSION - 244)) | (1 << (mysqlParser.CONCURRENT - 244)) | (1 << (mysqlParser.CONNECTION - 244)) | (1 << (mysqlParser.CONSISTENT - 244)) | (1 << (mysqlParser.CONTAINS - 244)) | (1 << (mysqlParser.CONTEXT - 244)) | (1 << (mysqlParser.CONTRIBUTORS - 244)) | (1 << (mysqlParser.COPY - 244)) | (1 << (mysqlParser.CPU - 244)) | (1 << (mysqlParser.DATA - 244)) | (1 << (mysqlParser.DATAFILE - 244)) | (1 << (mysqlParser.DEALLOCATE - 244)) | (1 << (mysqlParser.DEFAULT_AUTH - 244)) | (1 << (mysqlParser.DEFINER - 244)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 244)) | (1 << (mysqlParser.DIRECTORY - 244)) | (1 << (mysqlParser.DISABLE - 244)) | (1 << (mysqlParser.DISCARD - 244)) | (1 << (mysqlParser.DISK - 244)) | (1 << (mysqlParser.DO - 244)) | (1 << (mysqlParser.DUMPFILE - 244)) | (1 << (mysqlParser.DUPLICATE - 244)) | (1 << (mysqlParser.DYNAMIC - 244)) | (1 << (mysqlParser.ENABLE - 244)) | (1 << (mysqlParser.ENCRYPTION - 244)) | (1 << (mysqlParser.ENDS - 244)) | (1 << (mysqlParser.ENGINE - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (mysqlParser.ENGINES - 308)) | (1 << (mysqlParser.ERROR - 308)) | (1 << (mysqlParser.ERRORS - 308)) | (1 << (mysqlParser.ESCAPE - 308)) | (1 << (mysqlParser.EVEN - 308)) | (1 << (mysqlParser.EVENT - 308)) | (1 << (mysqlParser.EVENTS - 308)) | (1 << (mysqlParser.EVERY - 308)) | (1 << (mysqlParser.EXCHANGE - 308)) | (1 << (mysqlParser.EXCLUSIVE - 308)) | (1 << (mysqlParser.EXPIRE - 308)) | (1 << (mysqlParser.EXTENT_SIZE - 308)) | (1 << (mysqlParser.FAULTS - 308)) | (1 << (mysqlParser.FIELDS - 308)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (mysqlParser.FILTER - 308)) | (1 << (mysqlParser.FIRST - 308)) | (1 << (mysqlParser.FIXED - 308)) | (1 << (mysqlParser.FOLLOWS - 308)) | (1 << (mysqlParser.FULL - 308)) | (1 << (mysqlParser.FUNCTION - 308)) | (1 << (mysqlParser.GLOBAL - 308)) | (1 << (mysqlParser.GRANTS - 308)) | (1 << (mysqlParser.GROUP_REPLICATION - 308)) | (1 << (mysqlParser.HASH - 308)) | (1 << (mysqlParser.HOST - 308)) | (1 << (mysqlParser.IDENTIFIED - 308)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (mysqlParser.IMPORT - 308)) | (1 << (mysqlParser.INDEXES - 308)) | (1 << (mysqlParser.INITIAL_SIZE - 308)) | (1 << (mysqlParser.INPLACE - 308)) | (1 << (mysqlParser.INSERT_METHOD - 308)) | (1 << (mysqlParser.INSTANCE - 308)) | (1 << (mysqlParser.INVOKER - 308)) | (1 << (mysqlParser.IO - 308)) | (1 << (mysqlParser.IO_THREAD - 308)) | (1 << (mysqlParser.IPC - 308)) | (1 << (mysqlParser.ISOLATION - 308)) | (1 << (mysqlParser.ISSUER - 308)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (mysqlParser.LANGUAGE - 308)) | (1 << (mysqlParser.LAST - 308)) | (1 << (mysqlParser.LEAVES - 308)) | (1 << (mysqlParser.LESS - 308)) | (1 << (mysqlParser.LEVEL - 308)) | (1 << (mysqlParser.LIST - 308)) | (1 << (mysqlParser.LOCAL - 308)) | (1 << (mysqlParser.LOGFILE - 308)) | (1 << (mysqlParser.LOGS - 308)) | (1 << (mysqlParser.MASTER - 308)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 308)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (mysqlParser.MASTER_DELAY - 372)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (mysqlParser.MASTER_HOST - 372)) | (1 << (mysqlParser.MASTER_LOG_FILE - 372)) | (1 << (mysqlParser.MASTER_LOG_POS - 372)) | (1 << (mysqlParser.MASTER_PASSWORD - 372)) | (1 << (mysqlParser.MASTER_PORT - 372)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (mysqlParser.MASTER_SSL - 372)) | (1 << (mysqlParser.MASTER_SSL_CA - 372)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_CERT - 372)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (mysqlParser.MASTER_SSL_CRL - 372)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_KEY - 372)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 372)) | (1 << (mysqlParser.MASTER_USER - 372)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_ROWS - 372)) | (1 << (mysqlParser.MAX_SIZE - 372)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (mysqlParser.MERGE - 372)) | (1 << (mysqlParser.MID - 372)) | (1 << (mysqlParser.MIGRATE - 372)) | (1 << (mysqlParser.MIN_ROWS - 372)) | (1 << (mysqlParser.MODIFY - 372)) | (1 << (mysqlParser.MUTEX - 372)) | (1 << (mysqlParser.MYSQL - 372)) | (1 << (mysqlParser.NAME - 372)) | (1 << (mysqlParser.NAMES - 372)) | (1 << (mysqlParser.NCHAR - 372)) | (1 << (mysqlParser.NEVER - 372)) | (1 << (mysqlParser.NO - 372)) | (1 << (mysqlParser.NODEGROUP - 372)) | (1 << (mysqlParser.NONE - 372)) | (1 << (mysqlParser.OFFLINE - 372)) | (1 << (mysqlParser.OFFSET - 372)) | (1 << (mysqlParser.OJ - 372)) | (1 << (mysqlParser.OLD_PASSWORD - 372)) | (1 << (mysqlParser.ONE - 372)) | (1 << (mysqlParser.ONLINE - 372)) | (1 << (mysqlParser.ONLY - 372)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 372)) | (1 << (mysqlParser.OPTIONS - 372)) | (1 << (mysqlParser.OWNER - 372)) | (1 << (mysqlParser.PACK_KEYS - 372)) | (1 << (mysqlParser.PAGE - 372)) | (1 << (mysqlParser.PARSER - 372)) | (1 << (mysqlParser.PARTIAL - 372)) | (1 << (mysqlParser.PARTITIONING - 372)) | (1 << (mysqlParser.PARTITIONS - 372)) | (1 << (mysqlParser.PASSWORD - 372)) | (1 << (mysqlParser.PHASE - 372)) | (1 << (mysqlParser.PLUGIN_DIR - 372)) | (1 << (mysqlParser.PLUGINS - 372)) | (1 << (mysqlParser.PORT - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (mysqlParser.PRECEDES - 436)) | (1 << (mysqlParser.PREPARE - 436)) | (1 << (mysqlParser.PRESERVE - 436)) | (1 << (mysqlParser.PREV - 436)) | (1 << (mysqlParser.PROCESSLIST - 436)) | (1 << (mysqlParser.PROFILE - 436)) | (1 << (mysqlParser.PROFILES - 436)) | (1 << (mysqlParser.PROXY - 436)) | (1 << (mysqlParser.QUERY - 436)) | (1 << (mysqlParser.QUICK - 436)) | (1 << (mysqlParser.REBUILD - 436)) | (1 << (mysqlParser.RECOVER - 436)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (mysqlParser.REDUNDANT - 436)) | (1 << (mysqlParser.RELAY_LOG_FILE - 436)) | (1 << (mysqlParser.RELAY_LOG_POS - 436)) | (1 << (mysqlParser.RELAYLOG - 436)) | (1 << (mysqlParser.REMOVE - 436)) | (1 << (mysqlParser.REORGANIZE - 436)) | (1 << (mysqlParser.REPAIR - 436)) | (1 << (mysqlParser.REPLICATE_DO_DB - 436)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATION - 436)) | (1 << (mysqlParser.RESUME - 436)) | (1 << (mysqlParser.RETURNS - 436)) | (1 << (mysqlParser.ROLLBACK - 436)) | (1 << (mysqlParser.ROLLUP - 436)) | (1 << (mysqlParser.ROTATE - 436)) | (1 << (mysqlParser.ROW - 436)) | (1 << (mysqlParser.ROWS - 436)) | (1 << (mysqlParser.ROW_FORMAT - 436)) | (1 << (mysqlParser.SAVEPOINT - 436)) | (1 << (mysqlParser.SCHEDULE - 436)) | (1 << (mysqlParser.SECURITY - 436)) | (1 << (mysqlParser.SERVER - 436)) | (1 << (mysqlParser.SESSION - 436)) | (1 << (mysqlParser.SHARE - 436)) | (1 << (mysqlParser.SHARED - 436)) | (1 << (mysqlParser.SIGNED - 436)) | (1 << (mysqlParser.SIMPLE - 436)) | (1 << (mysqlParser.SLAVE - 436)) | (1 << (mysqlParser.SNAPSHOT - 436)) | (1 << (mysqlParser.SOCKET - 436)) | (1 << (mysqlParser.SOME - 436)) | (1 << (mysqlParser.SOUNDS - 436)) | (1 << (mysqlParser.SOURCE - 436)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (mysqlParser.SQL_CACHE - 436)) | (1 << (mysqlParser.SQL_NO_CACHE - 436)) | (1 << (mysqlParser.SQL_THREAD - 436)) | (1 << (mysqlParser.START - 436)) | (1 << (mysqlParser.STARTS - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (mysqlParser.STATS_AUTO_RECALC - 500)) | (1 << (mysqlParser.STATS_PERSISTENT - 500)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (mysqlParser.STATUS - 500)) | (1 << (mysqlParser.STOP - 500)) | (1 << (mysqlParser.STORAGE - 500)) | (1 << (mysqlParser.STRING - 500)) | (1 << (mysqlParser.SUBJECT - 500)) | (1 << (mysqlParser.SUBPARTITION - 500)) | (1 << (mysqlParser.SUBPARTITIONS - 500)) | (1 << (mysqlParser.SUSPEND - 500)) | (1 << (mysqlParser.SWAPS - 500)) | (1 << (mysqlParser.SWITCHES - 500)) | (1 << (mysqlParser.TABLESPACE - 500)) | (1 << (mysqlParser.TEMPORARY - 500)) | (1 << (mysqlParser.TEMPTABLE - 500)) | (1 << (mysqlParser.THAN - 500)) | (1 << (mysqlParser.TRANSACTION - 500)) | (1 << (mysqlParser.TRUNCATE - 500)) | (1 << (mysqlParser.UNDEFINED - 500)) | (1 << (mysqlParser.UNDOFILE - 500)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (mysqlParser.UNKNOWN - 500)) | (1 << (mysqlParser.UPGRADE - 500)) | (1 << (mysqlParser.USER - 500)) | (1 << (mysqlParser.VALIDATION - 500)) | (1 << (mysqlParser.VALUE - 500)) | (1 << (mysqlParser.VARIABLES - 500)) | (1 << (mysqlParser.VIEW - 500)) | (1 << (mysqlParser.WAIT - 500)) | (1 << (mysqlParser.WARNINGS - 500)) | (1 << (mysqlParser.WITHOUT - 500)) | (1 << (mysqlParser.WORK - 500)) | (1 << (mysqlParser.WRAPPER - 500)) | (1 << (mysqlParser.X509 - 500)) | (1 << (mysqlParser.XA - 500)) | (1 << (mysqlParser.XML - 500)) | (1 << (mysqlParser.QUARTER - 500)) | (1 << (mysqlParser.MONTH - 500)) | (1 << (mysqlParser.DAY - 500)) | (1 << (mysqlParser.HOUR - 500)) | (1 << (mysqlParser.MINUTE - 500)) | (1 << (mysqlParser.WEEK - 500)) | (1 << (mysqlParser.SECOND - 500)) | (1 << (mysqlParser.MICROSECOND - 500)) | (1 << (mysqlParser.TABLES - 500)) | (1 << (mysqlParser.ROUTINE - 500)) | (1 << (mysqlParser.EXECUTE - 500)) | (1 << (mysqlParser.FILE - 500)) | (1 << (mysqlParser.PROCESS - 500)) | (1 << (mysqlParser.RELOAD - 500)) | (1 << (mysqlParser.SHUTDOWN - 500)) | (1 << (mysqlParser.SUPER - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (mysqlParser.PRIVILEGES - 564)) | (1 << (mysqlParser.ARMSCII8 - 564)) | (1 << (mysqlParser.ASCII - 564)) | (1 << (mysqlParser.BIG5 - 564)) | (1 << (mysqlParser.CP1250 - 564)) | (1 << (mysqlParser.CP1251 - 564)) | (1 << (mysqlParser.CP1256 - 564)) | (1 << (mysqlParser.CP1257 - 564)) | (1 << (mysqlParser.CP850 - 564)) | (1 << (mysqlParser.CP852 - 564)) | (1 << (mysqlParser.CP866 - 564)) | (1 << (mysqlParser.CP932 - 564)) | (1 << (mysqlParser.DEC8 - 564)) | (1 << (mysqlParser.EUCJPMS - 564)) | (1 << (mysqlParser.EUCKR - 564)) | (1 << (mysqlParser.GB2312 - 564)) | (1 << (mysqlParser.GBK - 564)) | (1 << (mysqlParser.GEOSTD8 - 564)) | (1 << (mysqlParser.GREEK - 564)) | (1 << (mysqlParser.HEBREW - 564)) | (1 << (mysqlParser.HP8 - 564)) | (1 << (mysqlParser.KEYBCS2 - 564)) | (1 << (mysqlParser.KOI8R - 564)) | (1 << (mysqlParser.KOI8U - 564)) | (1 << (mysqlParser.LATIN1 - 564)) | (1 << (mysqlParser.LATIN2 - 564)) | (1 << (mysqlParser.LATIN5 - 564)) | (1 << (mysqlParser.LATIN7 - 564)) | (1 << (mysqlParser.MACCE - 564)) | (1 << (mysqlParser.MACROMAN - 564)) | (1 << (mysqlParser.SJIS - 564)) | (1 << (mysqlParser.SWE7 - 564)) | (1 << (mysqlParser.TIS620 - 564)) | (1 << (mysqlParser.UCS2 - 564)) | (1 << (mysqlParser.UJIS - 564)) | (1 << (mysqlParser.UTF16 - 564)) | (1 << (mysqlParser.UTF16LE - 564)) | (1 << (mysqlParser.UTF32 - 564)) | (1 << (mysqlParser.UTF8 - 564)) | (1 << (mysqlParser.UTF8MB3 - 564)) | (1 << (mysqlParser.UTF8MB4 - 564)) | (1 << (mysqlParser.ARCHIVE - 564)) | (1 << (mysqlParser.BLACKHOLE - 564)) | (1 << (mysqlParser.CSV - 564)) | (1 << (mysqlParser.FEDERATED - 564)) | (1 << (mysqlParser.INNODB - 564)) | (1 << (mysqlParser.MEMORY - 564)) | (1 << (mysqlParser.MRG_MYISAM - 564)) | (1 << (mysqlParser.MYISAM - 564)) | (1 << (mysqlParser.NDB - 564)) | (1 << (mysqlParser.NDBCLUSTER - 564)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (mysqlParser.REPEATABLE - 564)) | (1 << (mysqlParser.COMMITTED - 564)) | (1 << (mysqlParser.UNCOMMITTED - 564)) | (1 << (mysqlParser.SERIALIZABLE - 564)) | (1 << (mysqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (mysqlParser.LINESTRING - 564)) | (1 << (mysqlParser.MULTILINESTRING - 564)) | (1 << (mysqlParser.MULTIPOINT - 564)) | (1 << (mysqlParser.MULTIPOLYGON - 564)) | (1 << (mysqlParser.POINT - 564)) | (1 << (mysqlParser.POLYGON - 564)) | (1 << (mysqlParser.ABS - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (mysqlParser.ACOS - 628)) | (1 << (mysqlParser.ADDDATE - 628)) | (1 << (mysqlParser.ADDTIME - 628)) | (1 << (mysqlParser.AES_DECRYPT - 628)) | (1 << (mysqlParser.AES_ENCRYPT - 628)) | (1 << (mysqlParser.AREA - 628)) | (1 << (mysqlParser.ASBINARY - 628)) | (1 << (mysqlParser.ASIN - 628)) | (1 << (mysqlParser.ASTEXT - 628)) | (1 << (mysqlParser.ASWKB - 628)) | (1 << (mysqlParser.ASWKT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (mysqlParser.ATAN - 628)) | (1 << (mysqlParser.ATAN2 - 628)) | (1 << (mysqlParser.BENCHMARK - 628)) | (1 << (mysqlParser.BIN - 628)) | (1 << (mysqlParser.BIT_COUNT - 628)) | (1 << (mysqlParser.BIT_LENGTH - 628)) | (1 << (mysqlParser.BUFFER - 628)) | (1 << (mysqlParser.CEIL - 628)) | (1 << (mysqlParser.CEILING - 628)) | (1 << (mysqlParser.CENTROID - 628)) | (1 << (mysqlParser.CHARACTER_LENGTH - 628)) | (1 << (mysqlParser.CHARSET - 628)) | (1 << (mysqlParser.CHAR_LENGTH - 628)) | (1 << (mysqlParser.COERCIBILITY - 628)) | (1 << (mysqlParser.COLLATION - 628)) | (1 << (mysqlParser.COMPRESS - 628)) | (1 << (mysqlParser.CONCAT - 628)) | (1 << (mysqlParser.CONCAT_WS - 628)) | (1 << (mysqlParser.CONNECTION_ID - 628)) | (1 << (mysqlParser.CONV - 628)) | (1 << (mysqlParser.CONVERT_TZ - 628)) | (1 << (mysqlParser.COS - 628)) | (1 << (mysqlParser.COT - 628)) | (1 << (mysqlParser.CRC32 - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (mysqlParser.CREATE_DIGEST - 628)) | (1 << (mysqlParser.CROSSES - 628)) | (1 << (mysqlParser.DATEDIFF - 628)) | (1 << (mysqlParser.DATE_FORMAT - 628)) | (1 << (mysqlParser.DAYNAME - 628)) | (1 << (mysqlParser.DAYOFMONTH - 628)) | (1 << (mysqlParser.DAYOFWEEK - 628)) | (1 << (mysqlParser.DAYOFYEAR - 628)) | (1 << (mysqlParser.DECODE - 628)) | (1 << (mysqlParser.DEGREES - 628)) | (1 << (mysqlParser.DES_DECRYPT - 628)) | (1 << (mysqlParser.DES_ENCRYPT - 628)) | (1 << (mysqlParser.DIMENSION - 628)) | (1 << (mysqlParser.DISJOINT - 628)) | (1 << (mysqlParser.ELT - 628)) | (1 << (mysqlParser.ENCODE - 628)) | (1 << (mysqlParser.ENCRYPT - 628)) | (1 << (mysqlParser.ENDPOINT - 628)) | (1 << (mysqlParser.ENVELOPE - 628)) | (1 << (mysqlParser.EQUALS - 628)) | (1 << (mysqlParser.EXP - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (mysqlParser.EXPORT_SET - 692)) | (1 << (mysqlParser.EXTERIORRING - 692)) | (1 << (mysqlParser.EXTRACTVALUE - 692)) | (1 << (mysqlParser.FIELD - 692)) | (1 << (mysqlParser.FIND_IN_SET - 692)) | (1 << (mysqlParser.FLOOR - 692)) | (1 << (mysqlParser.FORMAT - 692)) | (1 << (mysqlParser.FOUND_ROWS - 692)) | (1 << (mysqlParser.FROM_BASE64 - 692)) | (1 << (mysqlParser.FROM_DAYS - 692)) | (1 << (mysqlParser.FROM_UNIXTIME - 692)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYN - 692)) | (1 << (mysqlParser.GEOMETRYTYPE - 692)) | (1 << (mysqlParser.GEOMFROMTEXT - 692)) | (1 << (mysqlParser.GEOMFROMWKB - 692)) | (1 << (mysqlParser.GET_FORMAT - 692)) | (1 << (mysqlParser.GET_LOCK - 692)) | (1 << (mysqlParser.GLENGTH - 692)) | (1 << (mysqlParser.GREATEST - 692)) | (1 << (mysqlParser.GTID_SUBSET - 692)) | (1 << (mysqlParser.GTID_SUBTRACT - 692)) | (1 << (mysqlParser.HEX - 692)) | (1 << (mysqlParser.IFNULL - 692)) | (1 << (mysqlParser.INET6_ATON - 692)) | (1 << (mysqlParser.INET6_NTOA - 692)) | (1 << (mysqlParser.INET_ATON - 692)) | (1 << (mysqlParser.INET_NTOA - 692)) | (1 << (mysqlParser.INSTR - 692)) | (1 << (mysqlParser.INTERIORRINGN - 692)) | (1 << (mysqlParser.INTERSECTS - 692)) | (1 << (mysqlParser.ISCLOSED - 692)) | (1 << (mysqlParser.ISEMPTY - 692)) | (1 << (mysqlParser.ISNULL - 692)) | (1 << (mysqlParser.ISSIMPLE - 692)) | (1 << (mysqlParser.IS_FREE_LOCK - 692)) | (1 << (mysqlParser.IS_IPV4 - 692)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 692)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 692)) | (1 << (mysqlParser.IS_IPV6 - 692)) | (1 << (mysqlParser.IS_USED_LOCK - 692)) | (1 << (mysqlParser.LAST_INSERT_ID - 692)) | (1 << (mysqlParser.LCASE - 692)) | (1 << (mysqlParser.LEAST - 692)) | (1 << (mysqlParser.LENGTH - 692)) | (1 << (mysqlParser.LINEFROMTEXT - 692)) | (1 << (mysqlParser.LINEFROMWKB - 692)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 692)) | (1 << (mysqlParser.LN - 692)) | (1 << (mysqlParser.LOAD_FILE - 692)) | (1 << (mysqlParser.LOCATE - 692)) | (1 << (mysqlParser.LOG - 692)) | (1 << (mysqlParser.LOG10 - 692)) | (1 << (mysqlParser.LOG2 - 692)) | (1 << (mysqlParser.LOWER - 692)) | (1 << (mysqlParser.LPAD - 692)) | (1 << (mysqlParser.LTRIM - 692)) | (1 << (mysqlParser.MAKEDATE - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (mysqlParser.MAKETIME - 756)) | (1 << (mysqlParser.MAKE_SET - 756)) | (1 << (mysqlParser.MASTER_POS_WAIT - 756)) | (1 << (mysqlParser.MBRCONTAINS - 756)) | (1 << (mysqlParser.MBRDISJOINT - 756)) | (1 << (mysqlParser.MBREQUAL - 756)) | (1 << (mysqlParser.MBRINTERSECTS - 756)) | (1 << (mysqlParser.MBROVERLAPS - 756)) | (1 << (mysqlParser.MBRTOUCHES - 756)) | (1 << (mysqlParser.MBRWITHIN - 756)) | (1 << (mysqlParser.MD5 - 756)) | (1 << (mysqlParser.MLINEFROMTEXT - 756)) | (1 << (mysqlParser.MLINEFROMWKB - 756)) | (1 << (mysqlParser.MONTHNAME - 756)) | (1 << (mysqlParser.MPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MPOINTFROMWKB - 756)) | (1 << (mysqlParser.MPOLYFROMTEXT - 756)) | (1 << (mysqlParser.MPOLYFROMWKB - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (mysqlParser.NAME_CONST - 756)) | (1 << (mysqlParser.NULLIF - 756)) | (1 << (mysqlParser.NUMGEOMETRIES - 756)) | (1 << (mysqlParser.NUMINTERIORRINGS - 756)) | (1 << (mysqlParser.NUMPOINTS - 756)) | (1 << (mysqlParser.OCT - 756)) | (1 << (mysqlParser.OCTET_LENGTH - 756)) | (1 << (mysqlParser.ORD - 756)) | (1 << (mysqlParser.OVERLAPS - 756)) | (1 << (mysqlParser.PERIOD_ADD - 756)) | (1 << (mysqlParser.PERIOD_DIFF - 756)) | (1 << (mysqlParser.PI - 756)) | (1 << (mysqlParser.POINTFROMTEXT - 756)) | (1 << (mysqlParser.POINTFROMWKB - 756)) | (1 << (mysqlParser.POINTN - 756)) | (1 << (mysqlParser.POLYFROMTEXT - 756)) | (1 << (mysqlParser.POLYFROMWKB - 756)) | (1 << (mysqlParser.POLYGONFROMTEXT - 756)) | (1 << (mysqlParser.POLYGONFROMWKB - 756)) | (1 << (mysqlParser.POW - 756)) | (1 << (mysqlParser.POWER - 756)) | (1 << (mysqlParser.QUOTE - 756)) | (1 << (mysqlParser.RADIANS - 756)) | (1 << (mysqlParser.RAND - 756)) | (1 << (mysqlParser.RANDOM_BYTES - 756)) | (1 << (mysqlParser.RELEASE_LOCK - 756)) | (1 << (mysqlParser.REVERSE - 756)) | (1 << (mysqlParser.ROUND - 756)) | (1 << (mysqlParser.ROW_COUNT - 756)) | (1 << (mysqlParser.RPAD - 756)) | (1 << (mysqlParser.RTRIM - 756)) | (1 << (mysqlParser.SEC_TO_TIME - 756)) | (1 << (mysqlParser.SESSION_USER - 756)) | (1 << (mysqlParser.SHA - 756)) | (1 << (mysqlParser.SHA1 - 756)) | (1 << (mysqlParser.SHA2 - 756)) | (1 << (mysqlParser.SIGN - 756)) | (1 << (mysqlParser.SIN - 756)) | (1 << (mysqlParser.SLEEP - 756)) | (1 << (mysqlParser.SOUNDEX - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (mysqlParser.SQRT - 820)) | (1 << (mysqlParser.SRID - 820)) | (1 << (mysqlParser.STARTPOINT - 820)) | (1 << (mysqlParser.STRCMP - 820)) | (1 << (mysqlParser.STR_TO_DATE - 820)) | (1 << (mysqlParser.ST_AREA - 820)) | (1 << (mysqlParser.ST_ASBINARY - 820)) | (1 << (mysqlParser.ST_ASTEXT - 820)) | (1 << (mysqlParser.ST_ASWKB - 820)) | (1 << (mysqlParser.ST_ASWKT - 820)) | (1 << (mysqlParser.ST_BUFFER - 820)) | (1 << (mysqlParser.ST_CENTROID - 820)) | (1 << (mysqlParser.ST_CONTAINS - 820)) | (1 << (mysqlParser.ST_CROSSES - 820)) | (1 << (mysqlParser.ST_DIFFERENCE - 820)) | (1 << (mysqlParser.ST_DIMENSION - 820)) | (1 << (mysqlParser.ST_DISJOINT - 820)) | (1 << (mysqlParser.ST_DISTANCE - 820)) | (1 << (mysqlParser.ST_ENDPOINT - 820)) | (1 << (mysqlParser.ST_ENVELOPE - 820)) | (1 << (mysqlParser.ST_EQUALS - 820)) | (1 << (mysqlParser.ST_EXTERIORRING - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYN - 820)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 820)) | (1 << (mysqlParser.ST_INTERIORRINGN - 820)) | (1 << (mysqlParser.ST_INTERSECTION - 820)) | (1 << (mysqlParser.ST_INTERSECTS - 820)) | (1 << (mysqlParser.ST_ISCLOSED - 820)) | (1 << (mysqlParser.ST_ISEMPTY - 820)) | (1 << (mysqlParser.ST_ISSIMPLE - 820)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINEFROMWKB - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (mysqlParser.ST_NUMPOINTS - 820)) | (1 << (mysqlParser.ST_OVERLAPS - 820)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 820)) | (1 << (mysqlParser.ST_POINTFROMWKB - 820)) | (1 << (mysqlParser.ST_POINTN - 820)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYFROMWKB - 820)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (mysqlParser.ST_SRID - 820)) | (1 << (mysqlParser.ST_STARTPOINT - 820)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (mysqlParser.ST_TOUCHES - 820)) | (1 << (mysqlParser.ST_UNION - 820)) | (1 << (mysqlParser.ST_WITHIN - 820)) | (1 << (mysqlParser.ST_X - 820)) | (1 << (mysqlParser.ST_Y - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (mysqlParser.SUBDATE - 884)) | (1 << (mysqlParser.SUBSTRING_INDEX - 884)) | (1 << (mysqlParser.SUBTIME - 884)) | (1 << (mysqlParser.SYSTEM_USER - 884)) | (1 << (mysqlParser.TAN - 884)) | (1 << (mysqlParser.TIMEDIFF - 884)) | (1 << (mysqlParser.TIMESTAMPADD - 884)) | (1 << (mysqlParser.TIMESTAMPDIFF - 884)) | (1 << (mysqlParser.TIME_FORMAT - 884)) | (1 << (mysqlParser.TIME_TO_SEC - 884)) | (1 << (mysqlParser.TOUCHES - 884)) | (1 << (mysqlParser.TO_BASE64 - 884)) | (1 << (mysqlParser.TO_DAYS - 884)) | (1 << (mysqlParser.TO_SECONDS - 884)) | (1 << (mysqlParser.UCASE - 884)) | (1 << (mysqlParser.UNCOMPRESS - 884)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (mysqlParser.UNHEX - 884)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 884)) | (1 << (mysqlParser.UPDATEXML - 884)) | (1 << (mysqlParser.UPPER - 884)) | (1 << (mysqlParser.UUID - 884)) | (1 << (mysqlParser.UUID_SHORT - 884)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (mysqlParser.VERSION - 884)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (mysqlParser.WEEKDAY - 884)) | (1 << (mysqlParser.WEEKOFYEAR - 884)) | (1 << (mysqlParser.WEIGHT_STRING - 884)) | (1 << (mysqlParser.WITHIN - 884)) | (1 << (mysqlParser.YEARWEEK - 884)) | (1 << (mysqlParser.Y_FUNCTION - 884)) | (1 << (mysqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 954)) & ~0x3f) == 0 and ((1 << (_la - 954)) & ((1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 954)) | (1 << (mysqlParser.ID - 954)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 954)))) != 0):
                        self.state = 1386
                        localctx.name = self.uid()




                self.state = 1391
                self.match(mysqlParser.PRIMARY)
                self.state = 1392
                self.match(mysqlParser.KEY)
                self.state = 1394
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.USING:
                    self.state = 1393
                    self.indexType()


                self.state = 1396
                self.indexColumnNames()
                self.state = 1400
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.USING or _la==mysqlParser.WITH or _la==mysqlParser.COMMENT or _la==mysqlParser.KEY_BLOCK_SIZE:
                    self.state = 1397
                    self.indexOption()
                    self.state = 1402
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = mysqlParser.UniqueKeyTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1407
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.CONSTRAINT:
                    self.state = 1403
                    self.match(mysqlParser.CONSTRAINT)
                    self.state = 1405
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==mysqlParser.LEFT or _la==mysqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (mysqlParser.DATE - 180)) | (1 << (mysqlParser.TIME - 180)) | (1 << (mysqlParser.TIMESTAMP - 180)) | (1 << (mysqlParser.DATETIME - 180)) | (1 << (mysqlParser.YEAR - 180)) | (1 << (mysqlParser.TEXT - 180)) | (1 << (mysqlParser.ENUM - 180)) | (1 << (mysqlParser.COUNT - 180)) | (1 << (mysqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (mysqlParser.ACCOUNT - 244)) | (1 << (mysqlParser.ACTION - 244)) | (1 << (mysqlParser.AFTER - 244)) | (1 << (mysqlParser.AGGREGATE - 244)) | (1 << (mysqlParser.ALGORITHM - 244)) | (1 << (mysqlParser.ANY - 244)) | (1 << (mysqlParser.AT - 244)) | (1 << (mysqlParser.AUTHORS - 244)) | (1 << (mysqlParser.AUTOCOMMIT - 244)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (mysqlParser.AUTO_INCREMENT - 244)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 244)) | (1 << (mysqlParser.BEGIN - 244)) | (1 << (mysqlParser.BINLOG - 244)) | (1 << (mysqlParser.BIT - 244)) | (1 << (mysqlParser.BLOCK - 244)) | (1 << (mysqlParser.BTREE - 244)) | (1 << (mysqlParser.CASCADED - 244)) | (1 << (mysqlParser.CHAIN - 244)) | (1 << (mysqlParser.CHANNEL - 244)) | (1 << (mysqlParser.CHECKSUM - 244)) | (1 << (mysqlParser.CIPHER - 244)) | (1 << (mysqlParser.CLIENT - 244)) | (1 << (mysqlParser.COALESCE - 244)) | (1 << (mysqlParser.CODE - 244)) | (1 << (mysqlParser.COLUMNS - 244)) | (1 << (mysqlParser.COLUMN_FORMAT - 244)) | (1 << (mysqlParser.COMMENT - 244)) | (1 << (mysqlParser.COMMIT - 244)) | (1 << (mysqlParser.COMPACT - 244)) | (1 << (mysqlParser.COMPLETION - 244)) | (1 << (mysqlParser.COMPRESSED - 244)) | (1 << (mysqlParser.COMPRESSION - 244)) | (1 << (mysqlParser.CONCURRENT - 244)) | (1 << (mysqlParser.CONNECTION - 244)) | (1 << (mysqlParser.CONSISTENT - 244)) | (1 << (mysqlParser.CONTAINS - 244)) | (1 << (mysqlParser.CONTEXT - 244)) | (1 << (mysqlParser.CONTRIBUTORS - 244)) | (1 << (mysqlParser.COPY - 244)) | (1 << (mysqlParser.CPU - 244)) | (1 << (mysqlParser.DATA - 244)) | (1 << (mysqlParser.DATAFILE - 244)) | (1 << (mysqlParser.DEALLOCATE - 244)) | (1 << (mysqlParser.DEFAULT_AUTH - 244)) | (1 << (mysqlParser.DEFINER - 244)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 244)) | (1 << (mysqlParser.DIRECTORY - 244)) | (1 << (mysqlParser.DISABLE - 244)) | (1 << (mysqlParser.DISCARD - 244)) | (1 << (mysqlParser.DISK - 244)) | (1 << (mysqlParser.DO - 244)) | (1 << (mysqlParser.DUMPFILE - 244)) | (1 << (mysqlParser.DUPLICATE - 244)) | (1 << (mysqlParser.DYNAMIC - 244)) | (1 << (mysqlParser.ENABLE - 244)) | (1 << (mysqlParser.ENCRYPTION - 244)) | (1 << (mysqlParser.ENDS - 244)) | (1 << (mysqlParser.ENGINE - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (mysqlParser.ENGINES - 308)) | (1 << (mysqlParser.ERROR - 308)) | (1 << (mysqlParser.ERRORS - 308)) | (1 << (mysqlParser.ESCAPE - 308)) | (1 << (mysqlParser.EVEN - 308)) | (1 << (mysqlParser.EVENT - 308)) | (1 << (mysqlParser.EVENTS - 308)) | (1 << (mysqlParser.EVERY - 308)) | (1 << (mysqlParser.EXCHANGE - 308)) | (1 << (mysqlParser.EXCLUSIVE - 308)) | (1 << (mysqlParser.EXPIRE - 308)) | (1 << (mysqlParser.EXTENT_SIZE - 308)) | (1 << (mysqlParser.FAULTS - 308)) | (1 << (mysqlParser.FIELDS - 308)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (mysqlParser.FILTER - 308)) | (1 << (mysqlParser.FIRST - 308)) | (1 << (mysqlParser.FIXED - 308)) | (1 << (mysqlParser.FOLLOWS - 308)) | (1 << (mysqlParser.FULL - 308)) | (1 << (mysqlParser.FUNCTION - 308)) | (1 << (mysqlParser.GLOBAL - 308)) | (1 << (mysqlParser.GRANTS - 308)) | (1 << (mysqlParser.GROUP_REPLICATION - 308)) | (1 << (mysqlParser.HASH - 308)) | (1 << (mysqlParser.HOST - 308)) | (1 << (mysqlParser.IDENTIFIED - 308)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (mysqlParser.IMPORT - 308)) | (1 << (mysqlParser.INDEXES - 308)) | (1 << (mysqlParser.INITIAL_SIZE - 308)) | (1 << (mysqlParser.INPLACE - 308)) | (1 << (mysqlParser.INSERT_METHOD - 308)) | (1 << (mysqlParser.INSTANCE - 308)) | (1 << (mysqlParser.INVOKER - 308)) | (1 << (mysqlParser.IO - 308)) | (1 << (mysqlParser.IO_THREAD - 308)) | (1 << (mysqlParser.IPC - 308)) | (1 << (mysqlParser.ISOLATION - 308)) | (1 << (mysqlParser.ISSUER - 308)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (mysqlParser.LANGUAGE - 308)) | (1 << (mysqlParser.LAST - 308)) | (1 << (mysqlParser.LEAVES - 308)) | (1 << (mysqlParser.LESS - 308)) | (1 << (mysqlParser.LEVEL - 308)) | (1 << (mysqlParser.LIST - 308)) | (1 << (mysqlParser.LOCAL - 308)) | (1 << (mysqlParser.LOGFILE - 308)) | (1 << (mysqlParser.LOGS - 308)) | (1 << (mysqlParser.MASTER - 308)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 308)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (mysqlParser.MASTER_DELAY - 372)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (mysqlParser.MASTER_HOST - 372)) | (1 << (mysqlParser.MASTER_LOG_FILE - 372)) | (1 << (mysqlParser.MASTER_LOG_POS - 372)) | (1 << (mysqlParser.MASTER_PASSWORD - 372)) | (1 << (mysqlParser.MASTER_PORT - 372)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (mysqlParser.MASTER_SSL - 372)) | (1 << (mysqlParser.MASTER_SSL_CA - 372)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_CERT - 372)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (mysqlParser.MASTER_SSL_CRL - 372)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_KEY - 372)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 372)) | (1 << (mysqlParser.MASTER_USER - 372)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_ROWS - 372)) | (1 << (mysqlParser.MAX_SIZE - 372)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (mysqlParser.MERGE - 372)) | (1 << (mysqlParser.MID - 372)) | (1 << (mysqlParser.MIGRATE - 372)) | (1 << (mysqlParser.MIN_ROWS - 372)) | (1 << (mysqlParser.MODIFY - 372)) | (1 << (mysqlParser.MUTEX - 372)) | (1 << (mysqlParser.MYSQL - 372)) | (1 << (mysqlParser.NAME - 372)) | (1 << (mysqlParser.NAMES - 372)) | (1 << (mysqlParser.NCHAR - 372)) | (1 << (mysqlParser.NEVER - 372)) | (1 << (mysqlParser.NO - 372)) | (1 << (mysqlParser.NODEGROUP - 372)) | (1 << (mysqlParser.NONE - 372)) | (1 << (mysqlParser.OFFLINE - 372)) | (1 << (mysqlParser.OFFSET - 372)) | (1 << (mysqlParser.OJ - 372)) | (1 << (mysqlParser.OLD_PASSWORD - 372)) | (1 << (mysqlParser.ONE - 372)) | (1 << (mysqlParser.ONLINE - 372)) | (1 << (mysqlParser.ONLY - 372)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 372)) | (1 << (mysqlParser.OPTIONS - 372)) | (1 << (mysqlParser.OWNER - 372)) | (1 << (mysqlParser.PACK_KEYS - 372)) | (1 << (mysqlParser.PAGE - 372)) | (1 << (mysqlParser.PARSER - 372)) | (1 << (mysqlParser.PARTIAL - 372)) | (1 << (mysqlParser.PARTITIONING - 372)) | (1 << (mysqlParser.PARTITIONS - 372)) | (1 << (mysqlParser.PASSWORD - 372)) | (1 << (mysqlParser.PHASE - 372)) | (1 << (mysqlParser.PLUGIN_DIR - 372)) | (1 << (mysqlParser.PLUGINS - 372)) | (1 << (mysqlParser.PORT - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (mysqlParser.PRECEDES - 436)) | (1 << (mysqlParser.PREPARE - 436)) | (1 << (mysqlParser.PRESERVE - 436)) | (1 << (mysqlParser.PREV - 436)) | (1 << (mysqlParser.PROCESSLIST - 436)) | (1 << (mysqlParser.PROFILE - 436)) | (1 << (mysqlParser.PROFILES - 436)) | (1 << (mysqlParser.PROXY - 436)) | (1 << (mysqlParser.QUERY - 436)) | (1 << (mysqlParser.QUICK - 436)) | (1 << (mysqlParser.REBUILD - 436)) | (1 << (mysqlParser.RECOVER - 436)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (mysqlParser.REDUNDANT - 436)) | (1 << (mysqlParser.RELAY_LOG_FILE - 436)) | (1 << (mysqlParser.RELAY_LOG_POS - 436)) | (1 << (mysqlParser.RELAYLOG - 436)) | (1 << (mysqlParser.REMOVE - 436)) | (1 << (mysqlParser.REORGANIZE - 436)) | (1 << (mysqlParser.REPAIR - 436)) | (1 << (mysqlParser.REPLICATE_DO_DB - 436)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATION - 436)) | (1 << (mysqlParser.RESUME - 436)) | (1 << (mysqlParser.RETURNS - 436)) | (1 << (mysqlParser.ROLLBACK - 436)) | (1 << (mysqlParser.ROLLUP - 436)) | (1 << (mysqlParser.ROTATE - 436)) | (1 << (mysqlParser.ROW - 436)) | (1 << (mysqlParser.ROWS - 436)) | (1 << (mysqlParser.ROW_FORMAT - 436)) | (1 << (mysqlParser.SAVEPOINT - 436)) | (1 << (mysqlParser.SCHEDULE - 436)) | (1 << (mysqlParser.SECURITY - 436)) | (1 << (mysqlParser.SERVER - 436)) | (1 << (mysqlParser.SESSION - 436)) | (1 << (mysqlParser.SHARE - 436)) | (1 << (mysqlParser.SHARED - 436)) | (1 << (mysqlParser.SIGNED - 436)) | (1 << (mysqlParser.SIMPLE - 436)) | (1 << (mysqlParser.SLAVE - 436)) | (1 << (mysqlParser.SNAPSHOT - 436)) | (1 << (mysqlParser.SOCKET - 436)) | (1 << (mysqlParser.SOME - 436)) | (1 << (mysqlParser.SOUNDS - 436)) | (1 << (mysqlParser.SOURCE - 436)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (mysqlParser.SQL_CACHE - 436)) | (1 << (mysqlParser.SQL_NO_CACHE - 436)) | (1 << (mysqlParser.SQL_THREAD - 436)) | (1 << (mysqlParser.START - 436)) | (1 << (mysqlParser.STARTS - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (mysqlParser.STATS_AUTO_RECALC - 500)) | (1 << (mysqlParser.STATS_PERSISTENT - 500)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (mysqlParser.STATUS - 500)) | (1 << (mysqlParser.STOP - 500)) | (1 << (mysqlParser.STORAGE - 500)) | (1 << (mysqlParser.STRING - 500)) | (1 << (mysqlParser.SUBJECT - 500)) | (1 << (mysqlParser.SUBPARTITION - 500)) | (1 << (mysqlParser.SUBPARTITIONS - 500)) | (1 << (mysqlParser.SUSPEND - 500)) | (1 << (mysqlParser.SWAPS - 500)) | (1 << (mysqlParser.SWITCHES - 500)) | (1 << (mysqlParser.TABLESPACE - 500)) | (1 << (mysqlParser.TEMPORARY - 500)) | (1 << (mysqlParser.TEMPTABLE - 500)) | (1 << (mysqlParser.THAN - 500)) | (1 << (mysqlParser.TRANSACTION - 500)) | (1 << (mysqlParser.TRUNCATE - 500)) | (1 << (mysqlParser.UNDEFINED - 500)) | (1 << (mysqlParser.UNDOFILE - 500)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (mysqlParser.UNKNOWN - 500)) | (1 << (mysqlParser.UPGRADE - 500)) | (1 << (mysqlParser.USER - 500)) | (1 << (mysqlParser.VALIDATION - 500)) | (1 << (mysqlParser.VALUE - 500)) | (1 << (mysqlParser.VARIABLES - 500)) | (1 << (mysqlParser.VIEW - 500)) | (1 << (mysqlParser.WAIT - 500)) | (1 << (mysqlParser.WARNINGS - 500)) | (1 << (mysqlParser.WITHOUT - 500)) | (1 << (mysqlParser.WORK - 500)) | (1 << (mysqlParser.WRAPPER - 500)) | (1 << (mysqlParser.X509 - 500)) | (1 << (mysqlParser.XA - 500)) | (1 << (mysqlParser.XML - 500)) | (1 << (mysqlParser.QUARTER - 500)) | (1 << (mysqlParser.MONTH - 500)) | (1 << (mysqlParser.DAY - 500)) | (1 << (mysqlParser.HOUR - 500)) | (1 << (mysqlParser.MINUTE - 500)) | (1 << (mysqlParser.WEEK - 500)) | (1 << (mysqlParser.SECOND - 500)) | (1 << (mysqlParser.MICROSECOND - 500)) | (1 << (mysqlParser.TABLES - 500)) | (1 << (mysqlParser.ROUTINE - 500)) | (1 << (mysqlParser.EXECUTE - 500)) | (1 << (mysqlParser.FILE - 500)) | (1 << (mysqlParser.PROCESS - 500)) | (1 << (mysqlParser.RELOAD - 500)) | (1 << (mysqlParser.SHUTDOWN - 500)) | (1 << (mysqlParser.SUPER - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (mysqlParser.PRIVILEGES - 564)) | (1 << (mysqlParser.ARMSCII8 - 564)) | (1 << (mysqlParser.ASCII - 564)) | (1 << (mysqlParser.BIG5 - 564)) | (1 << (mysqlParser.CP1250 - 564)) | (1 << (mysqlParser.CP1251 - 564)) | (1 << (mysqlParser.CP1256 - 564)) | (1 << (mysqlParser.CP1257 - 564)) | (1 << (mysqlParser.CP850 - 564)) | (1 << (mysqlParser.CP852 - 564)) | (1 << (mysqlParser.CP866 - 564)) | (1 << (mysqlParser.CP932 - 564)) | (1 << (mysqlParser.DEC8 - 564)) | (1 << (mysqlParser.EUCJPMS - 564)) | (1 << (mysqlParser.EUCKR - 564)) | (1 << (mysqlParser.GB2312 - 564)) | (1 << (mysqlParser.GBK - 564)) | (1 << (mysqlParser.GEOSTD8 - 564)) | (1 << (mysqlParser.GREEK - 564)) | (1 << (mysqlParser.HEBREW - 564)) | (1 << (mysqlParser.HP8 - 564)) | (1 << (mysqlParser.KEYBCS2 - 564)) | (1 << (mysqlParser.KOI8R - 564)) | (1 << (mysqlParser.KOI8U - 564)) | (1 << (mysqlParser.LATIN1 - 564)) | (1 << (mysqlParser.LATIN2 - 564)) | (1 << (mysqlParser.LATIN5 - 564)) | (1 << (mysqlParser.LATIN7 - 564)) | (1 << (mysqlParser.MACCE - 564)) | (1 << (mysqlParser.MACROMAN - 564)) | (1 << (mysqlParser.SJIS - 564)) | (1 << (mysqlParser.SWE7 - 564)) | (1 << (mysqlParser.TIS620 - 564)) | (1 << (mysqlParser.UCS2 - 564)) | (1 << (mysqlParser.UJIS - 564)) | (1 << (mysqlParser.UTF16 - 564)) | (1 << (mysqlParser.UTF16LE - 564)) | (1 << (mysqlParser.UTF32 - 564)) | (1 << (mysqlParser.UTF8 - 564)) | (1 << (mysqlParser.UTF8MB3 - 564)) | (1 << (mysqlParser.UTF8MB4 - 564)) | (1 << (mysqlParser.ARCHIVE - 564)) | (1 << (mysqlParser.BLACKHOLE - 564)) | (1 << (mysqlParser.CSV - 564)) | (1 << (mysqlParser.FEDERATED - 564)) | (1 << (mysqlParser.INNODB - 564)) | (1 << (mysqlParser.MEMORY - 564)) | (1 << (mysqlParser.MRG_MYISAM - 564)) | (1 << (mysqlParser.MYISAM - 564)) | (1 << (mysqlParser.NDB - 564)) | (1 << (mysqlParser.NDBCLUSTER - 564)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (mysqlParser.REPEATABLE - 564)) | (1 << (mysqlParser.COMMITTED - 564)) | (1 << (mysqlParser.UNCOMMITTED - 564)) | (1 << (mysqlParser.SERIALIZABLE - 564)) | (1 << (mysqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (mysqlParser.LINESTRING - 564)) | (1 << (mysqlParser.MULTILINESTRING - 564)) | (1 << (mysqlParser.MULTIPOINT - 564)) | (1 << (mysqlParser.MULTIPOLYGON - 564)) | (1 << (mysqlParser.POINT - 564)) | (1 << (mysqlParser.POLYGON - 564)) | (1 << (mysqlParser.ABS - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (mysqlParser.ACOS - 628)) | (1 << (mysqlParser.ADDDATE - 628)) | (1 << (mysqlParser.ADDTIME - 628)) | (1 << (mysqlParser.AES_DECRYPT - 628)) | (1 << (mysqlParser.AES_ENCRYPT - 628)) | (1 << (mysqlParser.AREA - 628)) | (1 << (mysqlParser.ASBINARY - 628)) | (1 << (mysqlParser.ASIN - 628)) | (1 << (mysqlParser.ASTEXT - 628)) | (1 << (mysqlParser.ASWKB - 628)) | (1 << (mysqlParser.ASWKT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (mysqlParser.ATAN - 628)) | (1 << (mysqlParser.ATAN2 - 628)) | (1 << (mysqlParser.BENCHMARK - 628)) | (1 << (mysqlParser.BIN - 628)) | (1 << (mysqlParser.BIT_COUNT - 628)) | (1 << (mysqlParser.BIT_LENGTH - 628)) | (1 << (mysqlParser.BUFFER - 628)) | (1 << (mysqlParser.CEIL - 628)) | (1 << (mysqlParser.CEILING - 628)) | (1 << (mysqlParser.CENTROID - 628)) | (1 << (mysqlParser.CHARACTER_LENGTH - 628)) | (1 << (mysqlParser.CHARSET - 628)) | (1 << (mysqlParser.CHAR_LENGTH - 628)) | (1 << (mysqlParser.COERCIBILITY - 628)) | (1 << (mysqlParser.COLLATION - 628)) | (1 << (mysqlParser.COMPRESS - 628)) | (1 << (mysqlParser.CONCAT - 628)) | (1 << (mysqlParser.CONCAT_WS - 628)) | (1 << (mysqlParser.CONNECTION_ID - 628)) | (1 << (mysqlParser.CONV - 628)) | (1 << (mysqlParser.CONVERT_TZ - 628)) | (1 << (mysqlParser.COS - 628)) | (1 << (mysqlParser.COT - 628)) | (1 << (mysqlParser.CRC32 - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (mysqlParser.CREATE_DIGEST - 628)) | (1 << (mysqlParser.CROSSES - 628)) | (1 << (mysqlParser.DATEDIFF - 628)) | (1 << (mysqlParser.DATE_FORMAT - 628)) | (1 << (mysqlParser.DAYNAME - 628)) | (1 << (mysqlParser.DAYOFMONTH - 628)) | (1 << (mysqlParser.DAYOFWEEK - 628)) | (1 << (mysqlParser.DAYOFYEAR - 628)) | (1 << (mysqlParser.DECODE - 628)) | (1 << (mysqlParser.DEGREES - 628)) | (1 << (mysqlParser.DES_DECRYPT - 628)) | (1 << (mysqlParser.DES_ENCRYPT - 628)) | (1 << (mysqlParser.DIMENSION - 628)) | (1 << (mysqlParser.DISJOINT - 628)) | (1 << (mysqlParser.ELT - 628)) | (1 << (mysqlParser.ENCODE - 628)) | (1 << (mysqlParser.ENCRYPT - 628)) | (1 << (mysqlParser.ENDPOINT - 628)) | (1 << (mysqlParser.ENVELOPE - 628)) | (1 << (mysqlParser.EQUALS - 628)) | (1 << (mysqlParser.EXP - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (mysqlParser.EXPORT_SET - 692)) | (1 << (mysqlParser.EXTERIORRING - 692)) | (1 << (mysqlParser.EXTRACTVALUE - 692)) | (1 << (mysqlParser.FIELD - 692)) | (1 << (mysqlParser.FIND_IN_SET - 692)) | (1 << (mysqlParser.FLOOR - 692)) | (1 << (mysqlParser.FORMAT - 692)) | (1 << (mysqlParser.FOUND_ROWS - 692)) | (1 << (mysqlParser.FROM_BASE64 - 692)) | (1 << (mysqlParser.FROM_DAYS - 692)) | (1 << (mysqlParser.FROM_UNIXTIME - 692)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYN - 692)) | (1 << (mysqlParser.GEOMETRYTYPE - 692)) | (1 << (mysqlParser.GEOMFROMTEXT - 692)) | (1 << (mysqlParser.GEOMFROMWKB - 692)) | (1 << (mysqlParser.GET_FORMAT - 692)) | (1 << (mysqlParser.GET_LOCK - 692)) | (1 << (mysqlParser.GLENGTH - 692)) | (1 << (mysqlParser.GREATEST - 692)) | (1 << (mysqlParser.GTID_SUBSET - 692)) | (1 << (mysqlParser.GTID_SUBTRACT - 692)) | (1 << (mysqlParser.HEX - 692)) | (1 << (mysqlParser.IFNULL - 692)) | (1 << (mysqlParser.INET6_ATON - 692)) | (1 << (mysqlParser.INET6_NTOA - 692)) | (1 << (mysqlParser.INET_ATON - 692)) | (1 << (mysqlParser.INET_NTOA - 692)) | (1 << (mysqlParser.INSTR - 692)) | (1 << (mysqlParser.INTERIORRINGN - 692)) | (1 << (mysqlParser.INTERSECTS - 692)) | (1 << (mysqlParser.ISCLOSED - 692)) | (1 << (mysqlParser.ISEMPTY - 692)) | (1 << (mysqlParser.ISNULL - 692)) | (1 << (mysqlParser.ISSIMPLE - 692)) | (1 << (mysqlParser.IS_FREE_LOCK - 692)) | (1 << (mysqlParser.IS_IPV4 - 692)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 692)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 692)) | (1 << (mysqlParser.IS_IPV6 - 692)) | (1 << (mysqlParser.IS_USED_LOCK - 692)) | (1 << (mysqlParser.LAST_INSERT_ID - 692)) | (1 << (mysqlParser.LCASE - 692)) | (1 << (mysqlParser.LEAST - 692)) | (1 << (mysqlParser.LENGTH - 692)) | (1 << (mysqlParser.LINEFROMTEXT - 692)) | (1 << (mysqlParser.LINEFROMWKB - 692)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 692)) | (1 << (mysqlParser.LN - 692)) | (1 << (mysqlParser.LOAD_FILE - 692)) | (1 << (mysqlParser.LOCATE - 692)) | (1 << (mysqlParser.LOG - 692)) | (1 << (mysqlParser.LOG10 - 692)) | (1 << (mysqlParser.LOG2 - 692)) | (1 << (mysqlParser.LOWER - 692)) | (1 << (mysqlParser.LPAD - 692)) | (1 << (mysqlParser.LTRIM - 692)) | (1 << (mysqlParser.MAKEDATE - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (mysqlParser.MAKETIME - 756)) | (1 << (mysqlParser.MAKE_SET - 756)) | (1 << (mysqlParser.MASTER_POS_WAIT - 756)) | (1 << (mysqlParser.MBRCONTAINS - 756)) | (1 << (mysqlParser.MBRDISJOINT - 756)) | (1 << (mysqlParser.MBREQUAL - 756)) | (1 << (mysqlParser.MBRINTERSECTS - 756)) | (1 << (mysqlParser.MBROVERLAPS - 756)) | (1 << (mysqlParser.MBRTOUCHES - 756)) | (1 << (mysqlParser.MBRWITHIN - 756)) | (1 << (mysqlParser.MD5 - 756)) | (1 << (mysqlParser.MLINEFROMTEXT - 756)) | (1 << (mysqlParser.MLINEFROMWKB - 756)) | (1 << (mysqlParser.MONTHNAME - 756)) | (1 << (mysqlParser.MPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MPOINTFROMWKB - 756)) | (1 << (mysqlParser.MPOLYFROMTEXT - 756)) | (1 << (mysqlParser.MPOLYFROMWKB - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (mysqlParser.NAME_CONST - 756)) | (1 << (mysqlParser.NULLIF - 756)) | (1 << (mysqlParser.NUMGEOMETRIES - 756)) | (1 << (mysqlParser.NUMINTERIORRINGS - 756)) | (1 << (mysqlParser.NUMPOINTS - 756)) | (1 << (mysqlParser.OCT - 756)) | (1 << (mysqlParser.OCTET_LENGTH - 756)) | (1 << (mysqlParser.ORD - 756)) | (1 << (mysqlParser.OVERLAPS - 756)) | (1 << (mysqlParser.PERIOD_ADD - 756)) | (1 << (mysqlParser.PERIOD_DIFF - 756)) | (1 << (mysqlParser.PI - 756)) | (1 << (mysqlParser.POINTFROMTEXT - 756)) | (1 << (mysqlParser.POINTFROMWKB - 756)) | (1 << (mysqlParser.POINTN - 756)) | (1 << (mysqlParser.POLYFROMTEXT - 756)) | (1 << (mysqlParser.POLYFROMWKB - 756)) | (1 << (mysqlParser.POLYGONFROMTEXT - 756)) | (1 << (mysqlParser.POLYGONFROMWKB - 756)) | (1 << (mysqlParser.POW - 756)) | (1 << (mysqlParser.POWER - 756)) | (1 << (mysqlParser.QUOTE - 756)) | (1 << (mysqlParser.RADIANS - 756)) | (1 << (mysqlParser.RAND - 756)) | (1 << (mysqlParser.RANDOM_BYTES - 756)) | (1 << (mysqlParser.RELEASE_LOCK - 756)) | (1 << (mysqlParser.REVERSE - 756)) | (1 << (mysqlParser.ROUND - 756)) | (1 << (mysqlParser.ROW_COUNT - 756)) | (1 << (mysqlParser.RPAD - 756)) | (1 << (mysqlParser.RTRIM - 756)) | (1 << (mysqlParser.SEC_TO_TIME - 756)) | (1 << (mysqlParser.SESSION_USER - 756)) | (1 << (mysqlParser.SHA - 756)) | (1 << (mysqlParser.SHA1 - 756)) | (1 << (mysqlParser.SHA2 - 756)) | (1 << (mysqlParser.SIGN - 756)) | (1 << (mysqlParser.SIN - 756)) | (1 << (mysqlParser.SLEEP - 756)) | (1 << (mysqlParser.SOUNDEX - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (mysqlParser.SQRT - 820)) | (1 << (mysqlParser.SRID - 820)) | (1 << (mysqlParser.STARTPOINT - 820)) | (1 << (mysqlParser.STRCMP - 820)) | (1 << (mysqlParser.STR_TO_DATE - 820)) | (1 << (mysqlParser.ST_AREA - 820)) | (1 << (mysqlParser.ST_ASBINARY - 820)) | (1 << (mysqlParser.ST_ASTEXT - 820)) | (1 << (mysqlParser.ST_ASWKB - 820)) | (1 << (mysqlParser.ST_ASWKT - 820)) | (1 << (mysqlParser.ST_BUFFER - 820)) | (1 << (mysqlParser.ST_CENTROID - 820)) | (1 << (mysqlParser.ST_CONTAINS - 820)) | (1 << (mysqlParser.ST_CROSSES - 820)) | (1 << (mysqlParser.ST_DIFFERENCE - 820)) | (1 << (mysqlParser.ST_DIMENSION - 820)) | (1 << (mysqlParser.ST_DISJOINT - 820)) | (1 << (mysqlParser.ST_DISTANCE - 820)) | (1 << (mysqlParser.ST_ENDPOINT - 820)) | (1 << (mysqlParser.ST_ENVELOPE - 820)) | (1 << (mysqlParser.ST_EQUALS - 820)) | (1 << (mysqlParser.ST_EXTERIORRING - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYN - 820)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 820)) | (1 << (mysqlParser.ST_INTERIORRINGN - 820)) | (1 << (mysqlParser.ST_INTERSECTION - 820)) | (1 << (mysqlParser.ST_INTERSECTS - 820)) | (1 << (mysqlParser.ST_ISCLOSED - 820)) | (1 << (mysqlParser.ST_ISEMPTY - 820)) | (1 << (mysqlParser.ST_ISSIMPLE - 820)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINEFROMWKB - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (mysqlParser.ST_NUMPOINTS - 820)) | (1 << (mysqlParser.ST_OVERLAPS - 820)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 820)) | (1 << (mysqlParser.ST_POINTFROMWKB - 820)) | (1 << (mysqlParser.ST_POINTN - 820)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYFROMWKB - 820)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (mysqlParser.ST_SRID - 820)) | (1 << (mysqlParser.ST_STARTPOINT - 820)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (mysqlParser.ST_TOUCHES - 820)) | (1 << (mysqlParser.ST_UNION - 820)) | (1 << (mysqlParser.ST_WITHIN - 820)) | (1 << (mysqlParser.ST_X - 820)) | (1 << (mysqlParser.ST_Y - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (mysqlParser.SUBDATE - 884)) | (1 << (mysqlParser.SUBSTRING_INDEX - 884)) | (1 << (mysqlParser.SUBTIME - 884)) | (1 << (mysqlParser.SYSTEM_USER - 884)) | (1 << (mysqlParser.TAN - 884)) | (1 << (mysqlParser.TIMEDIFF - 884)) | (1 << (mysqlParser.TIMESTAMPADD - 884)) | (1 << (mysqlParser.TIMESTAMPDIFF - 884)) | (1 << (mysqlParser.TIME_FORMAT - 884)) | (1 << (mysqlParser.TIME_TO_SEC - 884)) | (1 << (mysqlParser.TOUCHES - 884)) | (1 << (mysqlParser.TO_BASE64 - 884)) | (1 << (mysqlParser.TO_DAYS - 884)) | (1 << (mysqlParser.TO_SECONDS - 884)) | (1 << (mysqlParser.UCASE - 884)) | (1 << (mysqlParser.UNCOMPRESS - 884)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (mysqlParser.UNHEX - 884)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 884)) | (1 << (mysqlParser.UPDATEXML - 884)) | (1 << (mysqlParser.UPPER - 884)) | (1 << (mysqlParser.UUID - 884)) | (1 << (mysqlParser.UUID_SHORT - 884)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (mysqlParser.VERSION - 884)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (mysqlParser.WEEKDAY - 884)) | (1 << (mysqlParser.WEEKOFYEAR - 884)) | (1 << (mysqlParser.WEIGHT_STRING - 884)) | (1 << (mysqlParser.WITHIN - 884)) | (1 << (mysqlParser.YEARWEEK - 884)) | (1 << (mysqlParser.Y_FUNCTION - 884)) | (1 << (mysqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 954)) & ~0x3f) == 0 and ((1 << (_la - 954)) & ((1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 954)) | (1 << (mysqlParser.ID - 954)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 954)))) != 0):
                        self.state = 1404
                        localctx.name = self.uid()




                self.state = 1409
                self.match(mysqlParser.UNIQUE)
                self.state = 1411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.INDEX or _la==mysqlParser.KEY:
                    self.state = 1410
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==mysqlParser.INDEX or _la==mysqlParser.KEY):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.LEFT or _la==mysqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (mysqlParser.DATE - 180)) | (1 << (mysqlParser.TIME - 180)) | (1 << (mysqlParser.TIMESTAMP - 180)) | (1 << (mysqlParser.DATETIME - 180)) | (1 << (mysqlParser.YEAR - 180)) | (1 << (mysqlParser.TEXT - 180)) | (1 << (mysqlParser.ENUM - 180)) | (1 << (mysqlParser.COUNT - 180)) | (1 << (mysqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (mysqlParser.ACCOUNT - 244)) | (1 << (mysqlParser.ACTION - 244)) | (1 << (mysqlParser.AFTER - 244)) | (1 << (mysqlParser.AGGREGATE - 244)) | (1 << (mysqlParser.ALGORITHM - 244)) | (1 << (mysqlParser.ANY - 244)) | (1 << (mysqlParser.AT - 244)) | (1 << (mysqlParser.AUTHORS - 244)) | (1 << (mysqlParser.AUTOCOMMIT - 244)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (mysqlParser.AUTO_INCREMENT - 244)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 244)) | (1 << (mysqlParser.BEGIN - 244)) | (1 << (mysqlParser.BINLOG - 244)) | (1 << (mysqlParser.BIT - 244)) | (1 << (mysqlParser.BLOCK - 244)) | (1 << (mysqlParser.BTREE - 244)) | (1 << (mysqlParser.CASCADED - 244)) | (1 << (mysqlParser.CHAIN - 244)) | (1 << (mysqlParser.CHANNEL - 244)) | (1 << (mysqlParser.CHECKSUM - 244)) | (1 << (mysqlParser.CIPHER - 244)) | (1 << (mysqlParser.CLIENT - 244)) | (1 << (mysqlParser.COALESCE - 244)) | (1 << (mysqlParser.CODE - 244)) | (1 << (mysqlParser.COLUMNS - 244)) | (1 << (mysqlParser.COLUMN_FORMAT - 244)) | (1 << (mysqlParser.COMMENT - 244)) | (1 << (mysqlParser.COMMIT - 244)) | (1 << (mysqlParser.COMPACT - 244)) | (1 << (mysqlParser.COMPLETION - 244)) | (1 << (mysqlParser.COMPRESSED - 244)) | (1 << (mysqlParser.COMPRESSION - 244)) | (1 << (mysqlParser.CONCURRENT - 244)) | (1 << (mysqlParser.CONNECTION - 244)) | (1 << (mysqlParser.CONSISTENT - 244)) | (1 << (mysqlParser.CONTAINS - 244)) | (1 << (mysqlParser.CONTEXT - 244)) | (1 << (mysqlParser.CONTRIBUTORS - 244)) | (1 << (mysqlParser.COPY - 244)) | (1 << (mysqlParser.CPU - 244)) | (1 << (mysqlParser.DATA - 244)) | (1 << (mysqlParser.DATAFILE - 244)) | (1 << (mysqlParser.DEALLOCATE - 244)) | (1 << (mysqlParser.DEFAULT_AUTH - 244)) | (1 << (mysqlParser.DEFINER - 244)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 244)) | (1 << (mysqlParser.DIRECTORY - 244)) | (1 << (mysqlParser.DISABLE - 244)) | (1 << (mysqlParser.DISCARD - 244)) | (1 << (mysqlParser.DISK - 244)) | (1 << (mysqlParser.DO - 244)) | (1 << (mysqlParser.DUMPFILE - 244)) | (1 << (mysqlParser.DUPLICATE - 244)) | (1 << (mysqlParser.DYNAMIC - 244)) | (1 << (mysqlParser.ENABLE - 244)) | (1 << (mysqlParser.ENCRYPTION - 244)) | (1 << (mysqlParser.ENDS - 244)) | (1 << (mysqlParser.ENGINE - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (mysqlParser.ENGINES - 308)) | (1 << (mysqlParser.ERROR - 308)) | (1 << (mysqlParser.ERRORS - 308)) | (1 << (mysqlParser.ESCAPE - 308)) | (1 << (mysqlParser.EVEN - 308)) | (1 << (mysqlParser.EVENT - 308)) | (1 << (mysqlParser.EVENTS - 308)) | (1 << (mysqlParser.EVERY - 308)) | (1 << (mysqlParser.EXCHANGE - 308)) | (1 << (mysqlParser.EXCLUSIVE - 308)) | (1 << (mysqlParser.EXPIRE - 308)) | (1 << (mysqlParser.EXTENT_SIZE - 308)) | (1 << (mysqlParser.FAULTS - 308)) | (1 << (mysqlParser.FIELDS - 308)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (mysqlParser.FILTER - 308)) | (1 << (mysqlParser.FIRST - 308)) | (1 << (mysqlParser.FIXED - 308)) | (1 << (mysqlParser.FOLLOWS - 308)) | (1 << (mysqlParser.FULL - 308)) | (1 << (mysqlParser.FUNCTION - 308)) | (1 << (mysqlParser.GLOBAL - 308)) | (1 << (mysqlParser.GRANTS - 308)) | (1 << (mysqlParser.GROUP_REPLICATION - 308)) | (1 << (mysqlParser.HASH - 308)) | (1 << (mysqlParser.HOST - 308)) | (1 << (mysqlParser.IDENTIFIED - 308)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (mysqlParser.IMPORT - 308)) | (1 << (mysqlParser.INDEXES - 308)) | (1 << (mysqlParser.INITIAL_SIZE - 308)) | (1 << (mysqlParser.INPLACE - 308)) | (1 << (mysqlParser.INSERT_METHOD - 308)) | (1 << (mysqlParser.INSTANCE - 308)) | (1 << (mysqlParser.INVOKER - 308)) | (1 << (mysqlParser.IO - 308)) | (1 << (mysqlParser.IO_THREAD - 308)) | (1 << (mysqlParser.IPC - 308)) | (1 << (mysqlParser.ISOLATION - 308)) | (1 << (mysqlParser.ISSUER - 308)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (mysqlParser.LANGUAGE - 308)) | (1 << (mysqlParser.LAST - 308)) | (1 << (mysqlParser.LEAVES - 308)) | (1 << (mysqlParser.LESS - 308)) | (1 << (mysqlParser.LEVEL - 308)) | (1 << (mysqlParser.LIST - 308)) | (1 << (mysqlParser.LOCAL - 308)) | (1 << (mysqlParser.LOGFILE - 308)) | (1 << (mysqlParser.LOGS - 308)) | (1 << (mysqlParser.MASTER - 308)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 308)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (mysqlParser.MASTER_DELAY - 372)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (mysqlParser.MASTER_HOST - 372)) | (1 << (mysqlParser.MASTER_LOG_FILE - 372)) | (1 << (mysqlParser.MASTER_LOG_POS - 372)) | (1 << (mysqlParser.MASTER_PASSWORD - 372)) | (1 << (mysqlParser.MASTER_PORT - 372)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (mysqlParser.MASTER_SSL - 372)) | (1 << (mysqlParser.MASTER_SSL_CA - 372)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_CERT - 372)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (mysqlParser.MASTER_SSL_CRL - 372)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_KEY - 372)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 372)) | (1 << (mysqlParser.MASTER_USER - 372)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_ROWS - 372)) | (1 << (mysqlParser.MAX_SIZE - 372)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (mysqlParser.MERGE - 372)) | (1 << (mysqlParser.MID - 372)) | (1 << (mysqlParser.MIGRATE - 372)) | (1 << (mysqlParser.MIN_ROWS - 372)) | (1 << (mysqlParser.MODIFY - 372)) | (1 << (mysqlParser.MUTEX - 372)) | (1 << (mysqlParser.MYSQL - 372)) | (1 << (mysqlParser.NAME - 372)) | (1 << (mysqlParser.NAMES - 372)) | (1 << (mysqlParser.NCHAR - 372)) | (1 << (mysqlParser.NEVER - 372)) | (1 << (mysqlParser.NO - 372)) | (1 << (mysqlParser.NODEGROUP - 372)) | (1 << (mysqlParser.NONE - 372)) | (1 << (mysqlParser.OFFLINE - 372)) | (1 << (mysqlParser.OFFSET - 372)) | (1 << (mysqlParser.OJ - 372)) | (1 << (mysqlParser.OLD_PASSWORD - 372)) | (1 << (mysqlParser.ONE - 372)) | (1 << (mysqlParser.ONLINE - 372)) | (1 << (mysqlParser.ONLY - 372)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 372)) | (1 << (mysqlParser.OPTIONS - 372)) | (1 << (mysqlParser.OWNER - 372)) | (1 << (mysqlParser.PACK_KEYS - 372)) | (1 << (mysqlParser.PAGE - 372)) | (1 << (mysqlParser.PARSER - 372)) | (1 << (mysqlParser.PARTIAL - 372)) | (1 << (mysqlParser.PARTITIONING - 372)) | (1 << (mysqlParser.PARTITIONS - 372)) | (1 << (mysqlParser.PASSWORD - 372)) | (1 << (mysqlParser.PHASE - 372)) | (1 << (mysqlParser.PLUGIN_DIR - 372)) | (1 << (mysqlParser.PLUGINS - 372)) | (1 << (mysqlParser.PORT - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (mysqlParser.PRECEDES - 436)) | (1 << (mysqlParser.PREPARE - 436)) | (1 << (mysqlParser.PRESERVE - 436)) | (1 << (mysqlParser.PREV - 436)) | (1 << (mysqlParser.PROCESSLIST - 436)) | (1 << (mysqlParser.PROFILE - 436)) | (1 << (mysqlParser.PROFILES - 436)) | (1 << (mysqlParser.PROXY - 436)) | (1 << (mysqlParser.QUERY - 436)) | (1 << (mysqlParser.QUICK - 436)) | (1 << (mysqlParser.REBUILD - 436)) | (1 << (mysqlParser.RECOVER - 436)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (mysqlParser.REDUNDANT - 436)) | (1 << (mysqlParser.RELAY_LOG_FILE - 436)) | (1 << (mysqlParser.RELAY_LOG_POS - 436)) | (1 << (mysqlParser.RELAYLOG - 436)) | (1 << (mysqlParser.REMOVE - 436)) | (1 << (mysqlParser.REORGANIZE - 436)) | (1 << (mysqlParser.REPAIR - 436)) | (1 << (mysqlParser.REPLICATE_DO_DB - 436)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATION - 436)) | (1 << (mysqlParser.RESUME - 436)) | (1 << (mysqlParser.RETURNS - 436)) | (1 << (mysqlParser.ROLLBACK - 436)) | (1 << (mysqlParser.ROLLUP - 436)) | (1 << (mysqlParser.ROTATE - 436)) | (1 << (mysqlParser.ROW - 436)) | (1 << (mysqlParser.ROWS - 436)) | (1 << (mysqlParser.ROW_FORMAT - 436)) | (1 << (mysqlParser.SAVEPOINT - 436)) | (1 << (mysqlParser.SCHEDULE - 436)) | (1 << (mysqlParser.SECURITY - 436)) | (1 << (mysqlParser.SERVER - 436)) | (1 << (mysqlParser.SESSION - 436)) | (1 << (mysqlParser.SHARE - 436)) | (1 << (mysqlParser.SHARED - 436)) | (1 << (mysqlParser.SIGNED - 436)) | (1 << (mysqlParser.SIMPLE - 436)) | (1 << (mysqlParser.SLAVE - 436)) | (1 << (mysqlParser.SNAPSHOT - 436)) | (1 << (mysqlParser.SOCKET - 436)) | (1 << (mysqlParser.SOME - 436)) | (1 << (mysqlParser.SOUNDS - 436)) | (1 << (mysqlParser.SOURCE - 436)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (mysqlParser.SQL_CACHE - 436)) | (1 << (mysqlParser.SQL_NO_CACHE - 436)) | (1 << (mysqlParser.SQL_THREAD - 436)) | (1 << (mysqlParser.START - 436)) | (1 << (mysqlParser.STARTS - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (mysqlParser.STATS_AUTO_RECALC - 500)) | (1 << (mysqlParser.STATS_PERSISTENT - 500)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (mysqlParser.STATUS - 500)) | (1 << (mysqlParser.STOP - 500)) | (1 << (mysqlParser.STORAGE - 500)) | (1 << (mysqlParser.STRING - 500)) | (1 << (mysqlParser.SUBJECT - 500)) | (1 << (mysqlParser.SUBPARTITION - 500)) | (1 << (mysqlParser.SUBPARTITIONS - 500)) | (1 << (mysqlParser.SUSPEND - 500)) | (1 << (mysqlParser.SWAPS - 500)) | (1 << (mysqlParser.SWITCHES - 500)) | (1 << (mysqlParser.TABLESPACE - 500)) | (1 << (mysqlParser.TEMPORARY - 500)) | (1 << (mysqlParser.TEMPTABLE - 500)) | (1 << (mysqlParser.THAN - 500)) | (1 << (mysqlParser.TRANSACTION - 500)) | (1 << (mysqlParser.TRUNCATE - 500)) | (1 << (mysqlParser.UNDEFINED - 500)) | (1 << (mysqlParser.UNDOFILE - 500)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (mysqlParser.UNKNOWN - 500)) | (1 << (mysqlParser.UPGRADE - 500)) | (1 << (mysqlParser.USER - 500)) | (1 << (mysqlParser.VALIDATION - 500)) | (1 << (mysqlParser.VALUE - 500)) | (1 << (mysqlParser.VARIABLES - 500)) | (1 << (mysqlParser.VIEW - 500)) | (1 << (mysqlParser.WAIT - 500)) | (1 << (mysqlParser.WARNINGS - 500)) | (1 << (mysqlParser.WITHOUT - 500)) | (1 << (mysqlParser.WORK - 500)) | (1 << (mysqlParser.WRAPPER - 500)) | (1 << (mysqlParser.X509 - 500)) | (1 << (mysqlParser.XA - 500)) | (1 << (mysqlParser.XML - 500)) | (1 << (mysqlParser.QUARTER - 500)) | (1 << (mysqlParser.MONTH - 500)) | (1 << (mysqlParser.DAY - 500)) | (1 << (mysqlParser.HOUR - 500)) | (1 << (mysqlParser.MINUTE - 500)) | (1 << (mysqlParser.WEEK - 500)) | (1 << (mysqlParser.SECOND - 500)) | (1 << (mysqlParser.MICROSECOND - 500)) | (1 << (mysqlParser.TABLES - 500)) | (1 << (mysqlParser.ROUTINE - 500)) | (1 << (mysqlParser.EXECUTE - 500)) | (1 << (mysqlParser.FILE - 500)) | (1 << (mysqlParser.PROCESS - 500)) | (1 << (mysqlParser.RELOAD - 500)) | (1 << (mysqlParser.SHUTDOWN - 500)) | (1 << (mysqlParser.SUPER - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (mysqlParser.PRIVILEGES - 564)) | (1 << (mysqlParser.ARMSCII8 - 564)) | (1 << (mysqlParser.ASCII - 564)) | (1 << (mysqlParser.BIG5 - 564)) | (1 << (mysqlParser.CP1250 - 564)) | (1 << (mysqlParser.CP1251 - 564)) | (1 << (mysqlParser.CP1256 - 564)) | (1 << (mysqlParser.CP1257 - 564)) | (1 << (mysqlParser.CP850 - 564)) | (1 << (mysqlParser.CP852 - 564)) | (1 << (mysqlParser.CP866 - 564)) | (1 << (mysqlParser.CP932 - 564)) | (1 << (mysqlParser.DEC8 - 564)) | (1 << (mysqlParser.EUCJPMS - 564)) | (1 << (mysqlParser.EUCKR - 564)) | (1 << (mysqlParser.GB2312 - 564)) | (1 << (mysqlParser.GBK - 564)) | (1 << (mysqlParser.GEOSTD8 - 564)) | (1 << (mysqlParser.GREEK - 564)) | (1 << (mysqlParser.HEBREW - 564)) | (1 << (mysqlParser.HP8 - 564)) | (1 << (mysqlParser.KEYBCS2 - 564)) | (1 << (mysqlParser.KOI8R - 564)) | (1 << (mysqlParser.KOI8U - 564)) | (1 << (mysqlParser.LATIN1 - 564)) | (1 << (mysqlParser.LATIN2 - 564)) | (1 << (mysqlParser.LATIN5 - 564)) | (1 << (mysqlParser.LATIN7 - 564)) | (1 << (mysqlParser.MACCE - 564)) | (1 << (mysqlParser.MACROMAN - 564)) | (1 << (mysqlParser.SJIS - 564)) | (1 << (mysqlParser.SWE7 - 564)) | (1 << (mysqlParser.TIS620 - 564)) | (1 << (mysqlParser.UCS2 - 564)) | (1 << (mysqlParser.UJIS - 564)) | (1 << (mysqlParser.UTF16 - 564)) | (1 << (mysqlParser.UTF16LE - 564)) | (1 << (mysqlParser.UTF32 - 564)) | (1 << (mysqlParser.UTF8 - 564)) | (1 << (mysqlParser.UTF8MB3 - 564)) | (1 << (mysqlParser.UTF8MB4 - 564)) | (1 << (mysqlParser.ARCHIVE - 564)) | (1 << (mysqlParser.BLACKHOLE - 564)) | (1 << (mysqlParser.CSV - 564)) | (1 << (mysqlParser.FEDERATED - 564)) | (1 << (mysqlParser.INNODB - 564)) | (1 << (mysqlParser.MEMORY - 564)) | (1 << (mysqlParser.MRG_MYISAM - 564)) | (1 << (mysqlParser.MYISAM - 564)) | (1 << (mysqlParser.NDB - 564)) | (1 << (mysqlParser.NDBCLUSTER - 564)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (mysqlParser.REPEATABLE - 564)) | (1 << (mysqlParser.COMMITTED - 564)) | (1 << (mysqlParser.UNCOMMITTED - 564)) | (1 << (mysqlParser.SERIALIZABLE - 564)) | (1 << (mysqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (mysqlParser.LINESTRING - 564)) | (1 << (mysqlParser.MULTILINESTRING - 564)) | (1 << (mysqlParser.MULTIPOINT - 564)) | (1 << (mysqlParser.MULTIPOLYGON - 564)) | (1 << (mysqlParser.POINT - 564)) | (1 << (mysqlParser.POLYGON - 564)) | (1 << (mysqlParser.ABS - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (mysqlParser.ACOS - 628)) | (1 << (mysqlParser.ADDDATE - 628)) | (1 << (mysqlParser.ADDTIME - 628)) | (1 << (mysqlParser.AES_DECRYPT - 628)) | (1 << (mysqlParser.AES_ENCRYPT - 628)) | (1 << (mysqlParser.AREA - 628)) | (1 << (mysqlParser.ASBINARY - 628)) | (1 << (mysqlParser.ASIN - 628)) | (1 << (mysqlParser.ASTEXT - 628)) | (1 << (mysqlParser.ASWKB - 628)) | (1 << (mysqlParser.ASWKT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (mysqlParser.ATAN - 628)) | (1 << (mysqlParser.ATAN2 - 628)) | (1 << (mysqlParser.BENCHMARK - 628)) | (1 << (mysqlParser.BIN - 628)) | (1 << (mysqlParser.BIT_COUNT - 628)) | (1 << (mysqlParser.BIT_LENGTH - 628)) | (1 << (mysqlParser.BUFFER - 628)) | (1 << (mysqlParser.CEIL - 628)) | (1 << (mysqlParser.CEILING - 628)) | (1 << (mysqlParser.CENTROID - 628)) | (1 << (mysqlParser.CHARACTER_LENGTH - 628)) | (1 << (mysqlParser.CHARSET - 628)) | (1 << (mysqlParser.CHAR_LENGTH - 628)) | (1 << (mysqlParser.COERCIBILITY - 628)) | (1 << (mysqlParser.COLLATION - 628)) | (1 << (mysqlParser.COMPRESS - 628)) | (1 << (mysqlParser.CONCAT - 628)) | (1 << (mysqlParser.CONCAT_WS - 628)) | (1 << (mysqlParser.CONNECTION_ID - 628)) | (1 << (mysqlParser.CONV - 628)) | (1 << (mysqlParser.CONVERT_TZ - 628)) | (1 << (mysqlParser.COS - 628)) | (1 << (mysqlParser.COT - 628)) | (1 << (mysqlParser.CRC32 - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (mysqlParser.CREATE_DIGEST - 628)) | (1 << (mysqlParser.CROSSES - 628)) | (1 << (mysqlParser.DATEDIFF - 628)) | (1 << (mysqlParser.DATE_FORMAT - 628)) | (1 << (mysqlParser.DAYNAME - 628)) | (1 << (mysqlParser.DAYOFMONTH - 628)) | (1 << (mysqlParser.DAYOFWEEK - 628)) | (1 << (mysqlParser.DAYOFYEAR - 628)) | (1 << (mysqlParser.DECODE - 628)) | (1 << (mysqlParser.DEGREES - 628)) | (1 << (mysqlParser.DES_DECRYPT - 628)) | (1 << (mysqlParser.DES_ENCRYPT - 628)) | (1 << (mysqlParser.DIMENSION - 628)) | (1 << (mysqlParser.DISJOINT - 628)) | (1 << (mysqlParser.ELT - 628)) | (1 << (mysqlParser.ENCODE - 628)) | (1 << (mysqlParser.ENCRYPT - 628)) | (1 << (mysqlParser.ENDPOINT - 628)) | (1 << (mysqlParser.ENVELOPE - 628)) | (1 << (mysqlParser.EQUALS - 628)) | (1 << (mysqlParser.EXP - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (mysqlParser.EXPORT_SET - 692)) | (1 << (mysqlParser.EXTERIORRING - 692)) | (1 << (mysqlParser.EXTRACTVALUE - 692)) | (1 << (mysqlParser.FIELD - 692)) | (1 << (mysqlParser.FIND_IN_SET - 692)) | (1 << (mysqlParser.FLOOR - 692)) | (1 << (mysqlParser.FORMAT - 692)) | (1 << (mysqlParser.FOUND_ROWS - 692)) | (1 << (mysqlParser.FROM_BASE64 - 692)) | (1 << (mysqlParser.FROM_DAYS - 692)) | (1 << (mysqlParser.FROM_UNIXTIME - 692)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYN - 692)) | (1 << (mysqlParser.GEOMETRYTYPE - 692)) | (1 << (mysqlParser.GEOMFROMTEXT - 692)) | (1 << (mysqlParser.GEOMFROMWKB - 692)) | (1 << (mysqlParser.GET_FORMAT - 692)) | (1 << (mysqlParser.GET_LOCK - 692)) | (1 << (mysqlParser.GLENGTH - 692)) | (1 << (mysqlParser.GREATEST - 692)) | (1 << (mysqlParser.GTID_SUBSET - 692)) | (1 << (mysqlParser.GTID_SUBTRACT - 692)) | (1 << (mysqlParser.HEX - 692)) | (1 << (mysqlParser.IFNULL - 692)) | (1 << (mysqlParser.INET6_ATON - 692)) | (1 << (mysqlParser.INET6_NTOA - 692)) | (1 << (mysqlParser.INET_ATON - 692)) | (1 << (mysqlParser.INET_NTOA - 692)) | (1 << (mysqlParser.INSTR - 692)) | (1 << (mysqlParser.INTERIORRINGN - 692)) | (1 << (mysqlParser.INTERSECTS - 692)) | (1 << (mysqlParser.ISCLOSED - 692)) | (1 << (mysqlParser.ISEMPTY - 692)) | (1 << (mysqlParser.ISNULL - 692)) | (1 << (mysqlParser.ISSIMPLE - 692)) | (1 << (mysqlParser.IS_FREE_LOCK - 692)) | (1 << (mysqlParser.IS_IPV4 - 692)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 692)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 692)) | (1 << (mysqlParser.IS_IPV6 - 692)) | (1 << (mysqlParser.IS_USED_LOCK - 692)) | (1 << (mysqlParser.LAST_INSERT_ID - 692)) | (1 << (mysqlParser.LCASE - 692)) | (1 << (mysqlParser.LEAST - 692)) | (1 << (mysqlParser.LENGTH - 692)) | (1 << (mysqlParser.LINEFROMTEXT - 692)) | (1 << (mysqlParser.LINEFROMWKB - 692)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 692)) | (1 << (mysqlParser.LN - 692)) | (1 << (mysqlParser.LOAD_FILE - 692)) | (1 << (mysqlParser.LOCATE - 692)) | (1 << (mysqlParser.LOG - 692)) | (1 << (mysqlParser.LOG10 - 692)) | (1 << (mysqlParser.LOG2 - 692)) | (1 << (mysqlParser.LOWER - 692)) | (1 << (mysqlParser.LPAD - 692)) | (1 << (mysqlParser.LTRIM - 692)) | (1 << (mysqlParser.MAKEDATE - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (mysqlParser.MAKETIME - 756)) | (1 << (mysqlParser.MAKE_SET - 756)) | (1 << (mysqlParser.MASTER_POS_WAIT - 756)) | (1 << (mysqlParser.MBRCONTAINS - 756)) | (1 << (mysqlParser.MBRDISJOINT - 756)) | (1 << (mysqlParser.MBREQUAL - 756)) | (1 << (mysqlParser.MBRINTERSECTS - 756)) | (1 << (mysqlParser.MBROVERLAPS - 756)) | (1 << (mysqlParser.MBRTOUCHES - 756)) | (1 << (mysqlParser.MBRWITHIN - 756)) | (1 << (mysqlParser.MD5 - 756)) | (1 << (mysqlParser.MLINEFROMTEXT - 756)) | (1 << (mysqlParser.MLINEFROMWKB - 756)) | (1 << (mysqlParser.MONTHNAME - 756)) | (1 << (mysqlParser.MPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MPOINTFROMWKB - 756)) | (1 << (mysqlParser.MPOLYFROMTEXT - 756)) | (1 << (mysqlParser.MPOLYFROMWKB - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (mysqlParser.NAME_CONST - 756)) | (1 << (mysqlParser.NULLIF - 756)) | (1 << (mysqlParser.NUMGEOMETRIES - 756)) | (1 << (mysqlParser.NUMINTERIORRINGS - 756)) | (1 << (mysqlParser.NUMPOINTS - 756)) | (1 << (mysqlParser.OCT - 756)) | (1 << (mysqlParser.OCTET_LENGTH - 756)) | (1 << (mysqlParser.ORD - 756)) | (1 << (mysqlParser.OVERLAPS - 756)) | (1 << (mysqlParser.PERIOD_ADD - 756)) | (1 << (mysqlParser.PERIOD_DIFF - 756)) | (1 << (mysqlParser.PI - 756)) | (1 << (mysqlParser.POINTFROMTEXT - 756)) | (1 << (mysqlParser.POINTFROMWKB - 756)) | (1 << (mysqlParser.POINTN - 756)) | (1 << (mysqlParser.POLYFROMTEXT - 756)) | (1 << (mysqlParser.POLYFROMWKB - 756)) | (1 << (mysqlParser.POLYGONFROMTEXT - 756)) | (1 << (mysqlParser.POLYGONFROMWKB - 756)) | (1 << (mysqlParser.POW - 756)) | (1 << (mysqlParser.POWER - 756)) | (1 << (mysqlParser.QUOTE - 756)) | (1 << (mysqlParser.RADIANS - 756)) | (1 << (mysqlParser.RAND - 756)) | (1 << (mysqlParser.RANDOM_BYTES - 756)) | (1 << (mysqlParser.RELEASE_LOCK - 756)) | (1 << (mysqlParser.REVERSE - 756)) | (1 << (mysqlParser.ROUND - 756)) | (1 << (mysqlParser.ROW_COUNT - 756)) | (1 << (mysqlParser.RPAD - 756)) | (1 << (mysqlParser.RTRIM - 756)) | (1 << (mysqlParser.SEC_TO_TIME - 756)) | (1 << (mysqlParser.SESSION_USER - 756)) | (1 << (mysqlParser.SHA - 756)) | (1 << (mysqlParser.SHA1 - 756)) | (1 << (mysqlParser.SHA2 - 756)) | (1 << (mysqlParser.SIGN - 756)) | (1 << (mysqlParser.SIN - 756)) | (1 << (mysqlParser.SLEEP - 756)) | (1 << (mysqlParser.SOUNDEX - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (mysqlParser.SQRT - 820)) | (1 << (mysqlParser.SRID - 820)) | (1 << (mysqlParser.STARTPOINT - 820)) | (1 << (mysqlParser.STRCMP - 820)) | (1 << (mysqlParser.STR_TO_DATE - 820)) | (1 << (mysqlParser.ST_AREA - 820)) | (1 << (mysqlParser.ST_ASBINARY - 820)) | (1 << (mysqlParser.ST_ASTEXT - 820)) | (1 << (mysqlParser.ST_ASWKB - 820)) | (1 << (mysqlParser.ST_ASWKT - 820)) | (1 << (mysqlParser.ST_BUFFER - 820)) | (1 << (mysqlParser.ST_CENTROID - 820)) | (1 << (mysqlParser.ST_CONTAINS - 820)) | (1 << (mysqlParser.ST_CROSSES - 820)) | (1 << (mysqlParser.ST_DIFFERENCE - 820)) | (1 << (mysqlParser.ST_DIMENSION - 820)) | (1 << (mysqlParser.ST_DISJOINT - 820)) | (1 << (mysqlParser.ST_DISTANCE - 820)) | (1 << (mysqlParser.ST_ENDPOINT - 820)) | (1 << (mysqlParser.ST_ENVELOPE - 820)) | (1 << (mysqlParser.ST_EQUALS - 820)) | (1 << (mysqlParser.ST_EXTERIORRING - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYN - 820)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 820)) | (1 << (mysqlParser.ST_INTERIORRINGN - 820)) | (1 << (mysqlParser.ST_INTERSECTION - 820)) | (1 << (mysqlParser.ST_INTERSECTS - 820)) | (1 << (mysqlParser.ST_ISCLOSED - 820)) | (1 << (mysqlParser.ST_ISEMPTY - 820)) | (1 << (mysqlParser.ST_ISSIMPLE - 820)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINEFROMWKB - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (mysqlParser.ST_NUMPOINTS - 820)) | (1 << (mysqlParser.ST_OVERLAPS - 820)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 820)) | (1 << (mysqlParser.ST_POINTFROMWKB - 820)) | (1 << (mysqlParser.ST_POINTN - 820)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYFROMWKB - 820)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (mysqlParser.ST_SRID - 820)) | (1 << (mysqlParser.ST_STARTPOINT - 820)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (mysqlParser.ST_TOUCHES - 820)) | (1 << (mysqlParser.ST_UNION - 820)) | (1 << (mysqlParser.ST_WITHIN - 820)) | (1 << (mysqlParser.ST_X - 820)) | (1 << (mysqlParser.ST_Y - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (mysqlParser.SUBDATE - 884)) | (1 << (mysqlParser.SUBSTRING_INDEX - 884)) | (1 << (mysqlParser.SUBTIME - 884)) | (1 << (mysqlParser.SYSTEM_USER - 884)) | (1 << (mysqlParser.TAN - 884)) | (1 << (mysqlParser.TIMEDIFF - 884)) | (1 << (mysqlParser.TIMESTAMPADD - 884)) | (1 << (mysqlParser.TIMESTAMPDIFF - 884)) | (1 << (mysqlParser.TIME_FORMAT - 884)) | (1 << (mysqlParser.TIME_TO_SEC - 884)) | (1 << (mysqlParser.TOUCHES - 884)) | (1 << (mysqlParser.TO_BASE64 - 884)) | (1 << (mysqlParser.TO_DAYS - 884)) | (1 << (mysqlParser.TO_SECONDS - 884)) | (1 << (mysqlParser.UCASE - 884)) | (1 << (mysqlParser.UNCOMPRESS - 884)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (mysqlParser.UNHEX - 884)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 884)) | (1 << (mysqlParser.UPDATEXML - 884)) | (1 << (mysqlParser.UPPER - 884)) | (1 << (mysqlParser.UUID - 884)) | (1 << (mysqlParser.UUID_SHORT - 884)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (mysqlParser.VERSION - 884)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (mysqlParser.WEEKDAY - 884)) | (1 << (mysqlParser.WEEKOFYEAR - 884)) | (1 << (mysqlParser.WEIGHT_STRING - 884)) | (1 << (mysqlParser.WITHIN - 884)) | (1 << (mysqlParser.YEARWEEK - 884)) | (1 << (mysqlParser.Y_FUNCTION - 884)) | (1 << (mysqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 954)) & ~0x3f) == 0 and ((1 << (_la - 954)) & ((1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 954)) | (1 << (mysqlParser.ID - 954)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 954)))) != 0):
                    self.state = 1413
                    localctx.index = self.uid()


                self.state = 1417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.USING:
                    self.state = 1416
                    self.indexType()


                self.state = 1419
                self.indexColumnNames()
                self.state = 1423
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.USING or _la==mysqlParser.WITH or _la==mysqlParser.COMMENT or _la==mysqlParser.KEY_BLOCK_SIZE:
                    self.state = 1420
                    self.indexOption()
                    self.state = 1425
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                localctx = mysqlParser.ForeignKeyTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.CONSTRAINT:
                    self.state = 1426
                    self.match(mysqlParser.CONSTRAINT)
                    self.state = 1428
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==mysqlParser.LEFT or _la==mysqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (mysqlParser.DATE - 180)) | (1 << (mysqlParser.TIME - 180)) | (1 << (mysqlParser.TIMESTAMP - 180)) | (1 << (mysqlParser.DATETIME - 180)) | (1 << (mysqlParser.YEAR - 180)) | (1 << (mysqlParser.TEXT - 180)) | (1 << (mysqlParser.ENUM - 180)) | (1 << (mysqlParser.COUNT - 180)) | (1 << (mysqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (mysqlParser.ACCOUNT - 244)) | (1 << (mysqlParser.ACTION - 244)) | (1 << (mysqlParser.AFTER - 244)) | (1 << (mysqlParser.AGGREGATE - 244)) | (1 << (mysqlParser.ALGORITHM - 244)) | (1 << (mysqlParser.ANY - 244)) | (1 << (mysqlParser.AT - 244)) | (1 << (mysqlParser.AUTHORS - 244)) | (1 << (mysqlParser.AUTOCOMMIT - 244)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (mysqlParser.AUTO_INCREMENT - 244)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 244)) | (1 << (mysqlParser.BEGIN - 244)) | (1 << (mysqlParser.BINLOG - 244)) | (1 << (mysqlParser.BIT - 244)) | (1 << (mysqlParser.BLOCK - 244)) | (1 << (mysqlParser.BTREE - 244)) | (1 << (mysqlParser.CASCADED - 244)) | (1 << (mysqlParser.CHAIN - 244)) | (1 << (mysqlParser.CHANNEL - 244)) | (1 << (mysqlParser.CHECKSUM - 244)) | (1 << (mysqlParser.CIPHER - 244)) | (1 << (mysqlParser.CLIENT - 244)) | (1 << (mysqlParser.COALESCE - 244)) | (1 << (mysqlParser.CODE - 244)) | (1 << (mysqlParser.COLUMNS - 244)) | (1 << (mysqlParser.COLUMN_FORMAT - 244)) | (1 << (mysqlParser.COMMENT - 244)) | (1 << (mysqlParser.COMMIT - 244)) | (1 << (mysqlParser.COMPACT - 244)) | (1 << (mysqlParser.COMPLETION - 244)) | (1 << (mysqlParser.COMPRESSED - 244)) | (1 << (mysqlParser.COMPRESSION - 244)) | (1 << (mysqlParser.CONCURRENT - 244)) | (1 << (mysqlParser.CONNECTION - 244)) | (1 << (mysqlParser.CONSISTENT - 244)) | (1 << (mysqlParser.CONTAINS - 244)) | (1 << (mysqlParser.CONTEXT - 244)) | (1 << (mysqlParser.CONTRIBUTORS - 244)) | (1 << (mysqlParser.COPY - 244)) | (1 << (mysqlParser.CPU - 244)) | (1 << (mysqlParser.DATA - 244)) | (1 << (mysqlParser.DATAFILE - 244)) | (1 << (mysqlParser.DEALLOCATE - 244)) | (1 << (mysqlParser.DEFAULT_AUTH - 244)) | (1 << (mysqlParser.DEFINER - 244)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 244)) | (1 << (mysqlParser.DIRECTORY - 244)) | (1 << (mysqlParser.DISABLE - 244)) | (1 << (mysqlParser.DISCARD - 244)) | (1 << (mysqlParser.DISK - 244)) | (1 << (mysqlParser.DO - 244)) | (1 << (mysqlParser.DUMPFILE - 244)) | (1 << (mysqlParser.DUPLICATE - 244)) | (1 << (mysqlParser.DYNAMIC - 244)) | (1 << (mysqlParser.ENABLE - 244)) | (1 << (mysqlParser.ENCRYPTION - 244)) | (1 << (mysqlParser.ENDS - 244)) | (1 << (mysqlParser.ENGINE - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (mysqlParser.ENGINES - 308)) | (1 << (mysqlParser.ERROR - 308)) | (1 << (mysqlParser.ERRORS - 308)) | (1 << (mysqlParser.ESCAPE - 308)) | (1 << (mysqlParser.EVEN - 308)) | (1 << (mysqlParser.EVENT - 308)) | (1 << (mysqlParser.EVENTS - 308)) | (1 << (mysqlParser.EVERY - 308)) | (1 << (mysqlParser.EXCHANGE - 308)) | (1 << (mysqlParser.EXCLUSIVE - 308)) | (1 << (mysqlParser.EXPIRE - 308)) | (1 << (mysqlParser.EXTENT_SIZE - 308)) | (1 << (mysqlParser.FAULTS - 308)) | (1 << (mysqlParser.FIELDS - 308)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (mysqlParser.FILTER - 308)) | (1 << (mysqlParser.FIRST - 308)) | (1 << (mysqlParser.FIXED - 308)) | (1 << (mysqlParser.FOLLOWS - 308)) | (1 << (mysqlParser.FULL - 308)) | (1 << (mysqlParser.FUNCTION - 308)) | (1 << (mysqlParser.GLOBAL - 308)) | (1 << (mysqlParser.GRANTS - 308)) | (1 << (mysqlParser.GROUP_REPLICATION - 308)) | (1 << (mysqlParser.HASH - 308)) | (1 << (mysqlParser.HOST - 308)) | (1 << (mysqlParser.IDENTIFIED - 308)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (mysqlParser.IMPORT - 308)) | (1 << (mysqlParser.INDEXES - 308)) | (1 << (mysqlParser.INITIAL_SIZE - 308)) | (1 << (mysqlParser.INPLACE - 308)) | (1 << (mysqlParser.INSERT_METHOD - 308)) | (1 << (mysqlParser.INSTANCE - 308)) | (1 << (mysqlParser.INVOKER - 308)) | (1 << (mysqlParser.IO - 308)) | (1 << (mysqlParser.IO_THREAD - 308)) | (1 << (mysqlParser.IPC - 308)) | (1 << (mysqlParser.ISOLATION - 308)) | (1 << (mysqlParser.ISSUER - 308)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (mysqlParser.LANGUAGE - 308)) | (1 << (mysqlParser.LAST - 308)) | (1 << (mysqlParser.LEAVES - 308)) | (1 << (mysqlParser.LESS - 308)) | (1 << (mysqlParser.LEVEL - 308)) | (1 << (mysqlParser.LIST - 308)) | (1 << (mysqlParser.LOCAL - 308)) | (1 << (mysqlParser.LOGFILE - 308)) | (1 << (mysqlParser.LOGS - 308)) | (1 << (mysqlParser.MASTER - 308)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 308)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (mysqlParser.MASTER_DELAY - 372)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (mysqlParser.MASTER_HOST - 372)) | (1 << (mysqlParser.MASTER_LOG_FILE - 372)) | (1 << (mysqlParser.MASTER_LOG_POS - 372)) | (1 << (mysqlParser.MASTER_PASSWORD - 372)) | (1 << (mysqlParser.MASTER_PORT - 372)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (mysqlParser.MASTER_SSL - 372)) | (1 << (mysqlParser.MASTER_SSL_CA - 372)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_CERT - 372)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (mysqlParser.MASTER_SSL_CRL - 372)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_KEY - 372)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 372)) | (1 << (mysqlParser.MASTER_USER - 372)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_ROWS - 372)) | (1 << (mysqlParser.MAX_SIZE - 372)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (mysqlParser.MERGE - 372)) | (1 << (mysqlParser.MID - 372)) | (1 << (mysqlParser.MIGRATE - 372)) | (1 << (mysqlParser.MIN_ROWS - 372)) | (1 << (mysqlParser.MODIFY - 372)) | (1 << (mysqlParser.MUTEX - 372)) | (1 << (mysqlParser.MYSQL - 372)) | (1 << (mysqlParser.NAME - 372)) | (1 << (mysqlParser.NAMES - 372)) | (1 << (mysqlParser.NCHAR - 372)) | (1 << (mysqlParser.NEVER - 372)) | (1 << (mysqlParser.NO - 372)) | (1 << (mysqlParser.NODEGROUP - 372)) | (1 << (mysqlParser.NONE - 372)) | (1 << (mysqlParser.OFFLINE - 372)) | (1 << (mysqlParser.OFFSET - 372)) | (1 << (mysqlParser.OJ - 372)) | (1 << (mysqlParser.OLD_PASSWORD - 372)) | (1 << (mysqlParser.ONE - 372)) | (1 << (mysqlParser.ONLINE - 372)) | (1 << (mysqlParser.ONLY - 372)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 372)) | (1 << (mysqlParser.OPTIONS - 372)) | (1 << (mysqlParser.OWNER - 372)) | (1 << (mysqlParser.PACK_KEYS - 372)) | (1 << (mysqlParser.PAGE - 372)) | (1 << (mysqlParser.PARSER - 372)) | (1 << (mysqlParser.PARTIAL - 372)) | (1 << (mysqlParser.PARTITIONING - 372)) | (1 << (mysqlParser.PARTITIONS - 372)) | (1 << (mysqlParser.PASSWORD - 372)) | (1 << (mysqlParser.PHASE - 372)) | (1 << (mysqlParser.PLUGIN_DIR - 372)) | (1 << (mysqlParser.PLUGINS - 372)) | (1 << (mysqlParser.PORT - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (mysqlParser.PRECEDES - 436)) | (1 << (mysqlParser.PREPARE - 436)) | (1 << (mysqlParser.PRESERVE - 436)) | (1 << (mysqlParser.PREV - 436)) | (1 << (mysqlParser.PROCESSLIST - 436)) | (1 << (mysqlParser.PROFILE - 436)) | (1 << (mysqlParser.PROFILES - 436)) | (1 << (mysqlParser.PROXY - 436)) | (1 << (mysqlParser.QUERY - 436)) | (1 << (mysqlParser.QUICK - 436)) | (1 << (mysqlParser.REBUILD - 436)) | (1 << (mysqlParser.RECOVER - 436)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (mysqlParser.REDUNDANT - 436)) | (1 << (mysqlParser.RELAY_LOG_FILE - 436)) | (1 << (mysqlParser.RELAY_LOG_POS - 436)) | (1 << (mysqlParser.RELAYLOG - 436)) | (1 << (mysqlParser.REMOVE - 436)) | (1 << (mysqlParser.REORGANIZE - 436)) | (1 << (mysqlParser.REPAIR - 436)) | (1 << (mysqlParser.REPLICATE_DO_DB - 436)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATION - 436)) | (1 << (mysqlParser.RESUME - 436)) | (1 << (mysqlParser.RETURNS - 436)) | (1 << (mysqlParser.ROLLBACK - 436)) | (1 << (mysqlParser.ROLLUP - 436)) | (1 << (mysqlParser.ROTATE - 436)) | (1 << (mysqlParser.ROW - 436)) | (1 << (mysqlParser.ROWS - 436)) | (1 << (mysqlParser.ROW_FORMAT - 436)) | (1 << (mysqlParser.SAVEPOINT - 436)) | (1 << (mysqlParser.SCHEDULE - 436)) | (1 << (mysqlParser.SECURITY - 436)) | (1 << (mysqlParser.SERVER - 436)) | (1 << (mysqlParser.SESSION - 436)) | (1 << (mysqlParser.SHARE - 436)) | (1 << (mysqlParser.SHARED - 436)) | (1 << (mysqlParser.SIGNED - 436)) | (1 << (mysqlParser.SIMPLE - 436)) | (1 << (mysqlParser.SLAVE - 436)) | (1 << (mysqlParser.SNAPSHOT - 436)) | (1 << (mysqlParser.SOCKET - 436)) | (1 << (mysqlParser.SOME - 436)) | (1 << (mysqlParser.SOUNDS - 436)) | (1 << (mysqlParser.SOURCE - 436)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (mysqlParser.SQL_CACHE - 436)) | (1 << (mysqlParser.SQL_NO_CACHE - 436)) | (1 << (mysqlParser.SQL_THREAD - 436)) | (1 << (mysqlParser.START - 436)) | (1 << (mysqlParser.STARTS - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (mysqlParser.STATS_AUTO_RECALC - 500)) | (1 << (mysqlParser.STATS_PERSISTENT - 500)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (mysqlParser.STATUS - 500)) | (1 << (mysqlParser.STOP - 500)) | (1 << (mysqlParser.STORAGE - 500)) | (1 << (mysqlParser.STRING - 500)) | (1 << (mysqlParser.SUBJECT - 500)) | (1 << (mysqlParser.SUBPARTITION - 500)) | (1 << (mysqlParser.SUBPARTITIONS - 500)) | (1 << (mysqlParser.SUSPEND - 500)) | (1 << (mysqlParser.SWAPS - 500)) | (1 << (mysqlParser.SWITCHES - 500)) | (1 << (mysqlParser.TABLESPACE - 500)) | (1 << (mysqlParser.TEMPORARY - 500)) | (1 << (mysqlParser.TEMPTABLE - 500)) | (1 << (mysqlParser.THAN - 500)) | (1 << (mysqlParser.TRANSACTION - 500)) | (1 << (mysqlParser.TRUNCATE - 500)) | (1 << (mysqlParser.UNDEFINED - 500)) | (1 << (mysqlParser.UNDOFILE - 500)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (mysqlParser.UNKNOWN - 500)) | (1 << (mysqlParser.UPGRADE - 500)) | (1 << (mysqlParser.USER - 500)) | (1 << (mysqlParser.VALIDATION - 500)) | (1 << (mysqlParser.VALUE - 500)) | (1 << (mysqlParser.VARIABLES - 500)) | (1 << (mysqlParser.VIEW - 500)) | (1 << (mysqlParser.WAIT - 500)) | (1 << (mysqlParser.WARNINGS - 500)) | (1 << (mysqlParser.WITHOUT - 500)) | (1 << (mysqlParser.WORK - 500)) | (1 << (mysqlParser.WRAPPER - 500)) | (1 << (mysqlParser.X509 - 500)) | (1 << (mysqlParser.XA - 500)) | (1 << (mysqlParser.XML - 500)) | (1 << (mysqlParser.QUARTER - 500)) | (1 << (mysqlParser.MONTH - 500)) | (1 << (mysqlParser.DAY - 500)) | (1 << (mysqlParser.HOUR - 500)) | (1 << (mysqlParser.MINUTE - 500)) | (1 << (mysqlParser.WEEK - 500)) | (1 << (mysqlParser.SECOND - 500)) | (1 << (mysqlParser.MICROSECOND - 500)) | (1 << (mysqlParser.TABLES - 500)) | (1 << (mysqlParser.ROUTINE - 500)) | (1 << (mysqlParser.EXECUTE - 500)) | (1 << (mysqlParser.FILE - 500)) | (1 << (mysqlParser.PROCESS - 500)) | (1 << (mysqlParser.RELOAD - 500)) | (1 << (mysqlParser.SHUTDOWN - 500)) | (1 << (mysqlParser.SUPER - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (mysqlParser.PRIVILEGES - 564)) | (1 << (mysqlParser.ARMSCII8 - 564)) | (1 << (mysqlParser.ASCII - 564)) | (1 << (mysqlParser.BIG5 - 564)) | (1 << (mysqlParser.CP1250 - 564)) | (1 << (mysqlParser.CP1251 - 564)) | (1 << (mysqlParser.CP1256 - 564)) | (1 << (mysqlParser.CP1257 - 564)) | (1 << (mysqlParser.CP850 - 564)) | (1 << (mysqlParser.CP852 - 564)) | (1 << (mysqlParser.CP866 - 564)) | (1 << (mysqlParser.CP932 - 564)) | (1 << (mysqlParser.DEC8 - 564)) | (1 << (mysqlParser.EUCJPMS - 564)) | (1 << (mysqlParser.EUCKR - 564)) | (1 << (mysqlParser.GB2312 - 564)) | (1 << (mysqlParser.GBK - 564)) | (1 << (mysqlParser.GEOSTD8 - 564)) | (1 << (mysqlParser.GREEK - 564)) | (1 << (mysqlParser.HEBREW - 564)) | (1 << (mysqlParser.HP8 - 564)) | (1 << (mysqlParser.KEYBCS2 - 564)) | (1 << (mysqlParser.KOI8R - 564)) | (1 << (mysqlParser.KOI8U - 564)) | (1 << (mysqlParser.LATIN1 - 564)) | (1 << (mysqlParser.LATIN2 - 564)) | (1 << (mysqlParser.LATIN5 - 564)) | (1 << (mysqlParser.LATIN7 - 564)) | (1 << (mysqlParser.MACCE - 564)) | (1 << (mysqlParser.MACROMAN - 564)) | (1 << (mysqlParser.SJIS - 564)) | (1 << (mysqlParser.SWE7 - 564)) | (1 << (mysqlParser.TIS620 - 564)) | (1 << (mysqlParser.UCS2 - 564)) | (1 << (mysqlParser.UJIS - 564)) | (1 << (mysqlParser.UTF16 - 564)) | (1 << (mysqlParser.UTF16LE - 564)) | (1 << (mysqlParser.UTF32 - 564)) | (1 << (mysqlParser.UTF8 - 564)) | (1 << (mysqlParser.UTF8MB3 - 564)) | (1 << (mysqlParser.UTF8MB4 - 564)) | (1 << (mysqlParser.ARCHIVE - 564)) | (1 << (mysqlParser.BLACKHOLE - 564)) | (1 << (mysqlParser.CSV - 564)) | (1 << (mysqlParser.FEDERATED - 564)) | (1 << (mysqlParser.INNODB - 564)) | (1 << (mysqlParser.MEMORY - 564)) | (1 << (mysqlParser.MRG_MYISAM - 564)) | (1 << (mysqlParser.MYISAM - 564)) | (1 << (mysqlParser.NDB - 564)) | (1 << (mysqlParser.NDBCLUSTER - 564)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (mysqlParser.REPEATABLE - 564)) | (1 << (mysqlParser.COMMITTED - 564)) | (1 << (mysqlParser.UNCOMMITTED - 564)) | (1 << (mysqlParser.SERIALIZABLE - 564)) | (1 << (mysqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (mysqlParser.LINESTRING - 564)) | (1 << (mysqlParser.MULTILINESTRING - 564)) | (1 << (mysqlParser.MULTIPOINT - 564)) | (1 << (mysqlParser.MULTIPOLYGON - 564)) | (1 << (mysqlParser.POINT - 564)) | (1 << (mysqlParser.POLYGON - 564)) | (1 << (mysqlParser.ABS - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (mysqlParser.ACOS - 628)) | (1 << (mysqlParser.ADDDATE - 628)) | (1 << (mysqlParser.ADDTIME - 628)) | (1 << (mysqlParser.AES_DECRYPT - 628)) | (1 << (mysqlParser.AES_ENCRYPT - 628)) | (1 << (mysqlParser.AREA - 628)) | (1 << (mysqlParser.ASBINARY - 628)) | (1 << (mysqlParser.ASIN - 628)) | (1 << (mysqlParser.ASTEXT - 628)) | (1 << (mysqlParser.ASWKB - 628)) | (1 << (mysqlParser.ASWKT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (mysqlParser.ATAN - 628)) | (1 << (mysqlParser.ATAN2 - 628)) | (1 << (mysqlParser.BENCHMARK - 628)) | (1 << (mysqlParser.BIN - 628)) | (1 << (mysqlParser.BIT_COUNT - 628)) | (1 << (mysqlParser.BIT_LENGTH - 628)) | (1 << (mysqlParser.BUFFER - 628)) | (1 << (mysqlParser.CEIL - 628)) | (1 << (mysqlParser.CEILING - 628)) | (1 << (mysqlParser.CENTROID - 628)) | (1 << (mysqlParser.CHARACTER_LENGTH - 628)) | (1 << (mysqlParser.CHARSET - 628)) | (1 << (mysqlParser.CHAR_LENGTH - 628)) | (1 << (mysqlParser.COERCIBILITY - 628)) | (1 << (mysqlParser.COLLATION - 628)) | (1 << (mysqlParser.COMPRESS - 628)) | (1 << (mysqlParser.CONCAT - 628)) | (1 << (mysqlParser.CONCAT_WS - 628)) | (1 << (mysqlParser.CONNECTION_ID - 628)) | (1 << (mysqlParser.CONV - 628)) | (1 << (mysqlParser.CONVERT_TZ - 628)) | (1 << (mysqlParser.COS - 628)) | (1 << (mysqlParser.COT - 628)) | (1 << (mysqlParser.CRC32 - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (mysqlParser.CREATE_DIGEST - 628)) | (1 << (mysqlParser.CROSSES - 628)) | (1 << (mysqlParser.DATEDIFF - 628)) | (1 << (mysqlParser.DATE_FORMAT - 628)) | (1 << (mysqlParser.DAYNAME - 628)) | (1 << (mysqlParser.DAYOFMONTH - 628)) | (1 << (mysqlParser.DAYOFWEEK - 628)) | (1 << (mysqlParser.DAYOFYEAR - 628)) | (1 << (mysqlParser.DECODE - 628)) | (1 << (mysqlParser.DEGREES - 628)) | (1 << (mysqlParser.DES_DECRYPT - 628)) | (1 << (mysqlParser.DES_ENCRYPT - 628)) | (1 << (mysqlParser.DIMENSION - 628)) | (1 << (mysqlParser.DISJOINT - 628)) | (1 << (mysqlParser.ELT - 628)) | (1 << (mysqlParser.ENCODE - 628)) | (1 << (mysqlParser.ENCRYPT - 628)) | (1 << (mysqlParser.ENDPOINT - 628)) | (1 << (mysqlParser.ENVELOPE - 628)) | (1 << (mysqlParser.EQUALS - 628)) | (1 << (mysqlParser.EXP - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (mysqlParser.EXPORT_SET - 692)) | (1 << (mysqlParser.EXTERIORRING - 692)) | (1 << (mysqlParser.EXTRACTVALUE - 692)) | (1 << (mysqlParser.FIELD - 692)) | (1 << (mysqlParser.FIND_IN_SET - 692)) | (1 << (mysqlParser.FLOOR - 692)) | (1 << (mysqlParser.FORMAT - 692)) | (1 << (mysqlParser.FOUND_ROWS - 692)) | (1 << (mysqlParser.FROM_BASE64 - 692)) | (1 << (mysqlParser.FROM_DAYS - 692)) | (1 << (mysqlParser.FROM_UNIXTIME - 692)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYN - 692)) | (1 << (mysqlParser.GEOMETRYTYPE - 692)) | (1 << (mysqlParser.GEOMFROMTEXT - 692)) | (1 << (mysqlParser.GEOMFROMWKB - 692)) | (1 << (mysqlParser.GET_FORMAT - 692)) | (1 << (mysqlParser.GET_LOCK - 692)) | (1 << (mysqlParser.GLENGTH - 692)) | (1 << (mysqlParser.GREATEST - 692)) | (1 << (mysqlParser.GTID_SUBSET - 692)) | (1 << (mysqlParser.GTID_SUBTRACT - 692)) | (1 << (mysqlParser.HEX - 692)) | (1 << (mysqlParser.IFNULL - 692)) | (1 << (mysqlParser.INET6_ATON - 692)) | (1 << (mysqlParser.INET6_NTOA - 692)) | (1 << (mysqlParser.INET_ATON - 692)) | (1 << (mysqlParser.INET_NTOA - 692)) | (1 << (mysqlParser.INSTR - 692)) | (1 << (mysqlParser.INTERIORRINGN - 692)) | (1 << (mysqlParser.INTERSECTS - 692)) | (1 << (mysqlParser.ISCLOSED - 692)) | (1 << (mysqlParser.ISEMPTY - 692)) | (1 << (mysqlParser.ISNULL - 692)) | (1 << (mysqlParser.ISSIMPLE - 692)) | (1 << (mysqlParser.IS_FREE_LOCK - 692)) | (1 << (mysqlParser.IS_IPV4 - 692)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 692)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 692)) | (1 << (mysqlParser.IS_IPV6 - 692)) | (1 << (mysqlParser.IS_USED_LOCK - 692)) | (1 << (mysqlParser.LAST_INSERT_ID - 692)) | (1 << (mysqlParser.LCASE - 692)) | (1 << (mysqlParser.LEAST - 692)) | (1 << (mysqlParser.LENGTH - 692)) | (1 << (mysqlParser.LINEFROMTEXT - 692)) | (1 << (mysqlParser.LINEFROMWKB - 692)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 692)) | (1 << (mysqlParser.LN - 692)) | (1 << (mysqlParser.LOAD_FILE - 692)) | (1 << (mysqlParser.LOCATE - 692)) | (1 << (mysqlParser.LOG - 692)) | (1 << (mysqlParser.LOG10 - 692)) | (1 << (mysqlParser.LOG2 - 692)) | (1 << (mysqlParser.LOWER - 692)) | (1 << (mysqlParser.LPAD - 692)) | (1 << (mysqlParser.LTRIM - 692)) | (1 << (mysqlParser.MAKEDATE - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (mysqlParser.MAKETIME - 756)) | (1 << (mysqlParser.MAKE_SET - 756)) | (1 << (mysqlParser.MASTER_POS_WAIT - 756)) | (1 << (mysqlParser.MBRCONTAINS - 756)) | (1 << (mysqlParser.MBRDISJOINT - 756)) | (1 << (mysqlParser.MBREQUAL - 756)) | (1 << (mysqlParser.MBRINTERSECTS - 756)) | (1 << (mysqlParser.MBROVERLAPS - 756)) | (1 << (mysqlParser.MBRTOUCHES - 756)) | (1 << (mysqlParser.MBRWITHIN - 756)) | (1 << (mysqlParser.MD5 - 756)) | (1 << (mysqlParser.MLINEFROMTEXT - 756)) | (1 << (mysqlParser.MLINEFROMWKB - 756)) | (1 << (mysqlParser.MONTHNAME - 756)) | (1 << (mysqlParser.MPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MPOINTFROMWKB - 756)) | (1 << (mysqlParser.MPOLYFROMTEXT - 756)) | (1 << (mysqlParser.MPOLYFROMWKB - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (mysqlParser.NAME_CONST - 756)) | (1 << (mysqlParser.NULLIF - 756)) | (1 << (mysqlParser.NUMGEOMETRIES - 756)) | (1 << (mysqlParser.NUMINTERIORRINGS - 756)) | (1 << (mysqlParser.NUMPOINTS - 756)) | (1 << (mysqlParser.OCT - 756)) | (1 << (mysqlParser.OCTET_LENGTH - 756)) | (1 << (mysqlParser.ORD - 756)) | (1 << (mysqlParser.OVERLAPS - 756)) | (1 << (mysqlParser.PERIOD_ADD - 756)) | (1 << (mysqlParser.PERIOD_DIFF - 756)) | (1 << (mysqlParser.PI - 756)) | (1 << (mysqlParser.POINTFROMTEXT - 756)) | (1 << (mysqlParser.POINTFROMWKB - 756)) | (1 << (mysqlParser.POINTN - 756)) | (1 << (mysqlParser.POLYFROMTEXT - 756)) | (1 << (mysqlParser.POLYFROMWKB - 756)) | (1 << (mysqlParser.POLYGONFROMTEXT - 756)) | (1 << (mysqlParser.POLYGONFROMWKB - 756)) | (1 << (mysqlParser.POW - 756)) | (1 << (mysqlParser.POWER - 756)) | (1 << (mysqlParser.QUOTE - 756)) | (1 << (mysqlParser.RADIANS - 756)) | (1 << (mysqlParser.RAND - 756)) | (1 << (mysqlParser.RANDOM_BYTES - 756)) | (1 << (mysqlParser.RELEASE_LOCK - 756)) | (1 << (mysqlParser.REVERSE - 756)) | (1 << (mysqlParser.ROUND - 756)) | (1 << (mysqlParser.ROW_COUNT - 756)) | (1 << (mysqlParser.RPAD - 756)) | (1 << (mysqlParser.RTRIM - 756)) | (1 << (mysqlParser.SEC_TO_TIME - 756)) | (1 << (mysqlParser.SESSION_USER - 756)) | (1 << (mysqlParser.SHA - 756)) | (1 << (mysqlParser.SHA1 - 756)) | (1 << (mysqlParser.SHA2 - 756)) | (1 << (mysqlParser.SIGN - 756)) | (1 << (mysqlParser.SIN - 756)) | (1 << (mysqlParser.SLEEP - 756)) | (1 << (mysqlParser.SOUNDEX - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (mysqlParser.SQRT - 820)) | (1 << (mysqlParser.SRID - 820)) | (1 << (mysqlParser.STARTPOINT - 820)) | (1 << (mysqlParser.STRCMP - 820)) | (1 << (mysqlParser.STR_TO_DATE - 820)) | (1 << (mysqlParser.ST_AREA - 820)) | (1 << (mysqlParser.ST_ASBINARY - 820)) | (1 << (mysqlParser.ST_ASTEXT - 820)) | (1 << (mysqlParser.ST_ASWKB - 820)) | (1 << (mysqlParser.ST_ASWKT - 820)) | (1 << (mysqlParser.ST_BUFFER - 820)) | (1 << (mysqlParser.ST_CENTROID - 820)) | (1 << (mysqlParser.ST_CONTAINS - 820)) | (1 << (mysqlParser.ST_CROSSES - 820)) | (1 << (mysqlParser.ST_DIFFERENCE - 820)) | (1 << (mysqlParser.ST_DIMENSION - 820)) | (1 << (mysqlParser.ST_DISJOINT - 820)) | (1 << (mysqlParser.ST_DISTANCE - 820)) | (1 << (mysqlParser.ST_ENDPOINT - 820)) | (1 << (mysqlParser.ST_ENVELOPE - 820)) | (1 << (mysqlParser.ST_EQUALS - 820)) | (1 << (mysqlParser.ST_EXTERIORRING - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYN - 820)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 820)) | (1 << (mysqlParser.ST_INTERIORRINGN - 820)) | (1 << (mysqlParser.ST_INTERSECTION - 820)) | (1 << (mysqlParser.ST_INTERSECTS - 820)) | (1 << (mysqlParser.ST_ISCLOSED - 820)) | (1 << (mysqlParser.ST_ISEMPTY - 820)) | (1 << (mysqlParser.ST_ISSIMPLE - 820)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINEFROMWKB - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (mysqlParser.ST_NUMPOINTS - 820)) | (1 << (mysqlParser.ST_OVERLAPS - 820)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 820)) | (1 << (mysqlParser.ST_POINTFROMWKB - 820)) | (1 << (mysqlParser.ST_POINTN - 820)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYFROMWKB - 820)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (mysqlParser.ST_SRID - 820)) | (1 << (mysqlParser.ST_STARTPOINT - 820)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (mysqlParser.ST_TOUCHES - 820)) | (1 << (mysqlParser.ST_UNION - 820)) | (1 << (mysqlParser.ST_WITHIN - 820)) | (1 << (mysqlParser.ST_X - 820)) | (1 << (mysqlParser.ST_Y - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (mysqlParser.SUBDATE - 884)) | (1 << (mysqlParser.SUBSTRING_INDEX - 884)) | (1 << (mysqlParser.SUBTIME - 884)) | (1 << (mysqlParser.SYSTEM_USER - 884)) | (1 << (mysqlParser.TAN - 884)) | (1 << (mysqlParser.TIMEDIFF - 884)) | (1 << (mysqlParser.TIMESTAMPADD - 884)) | (1 << (mysqlParser.TIMESTAMPDIFF - 884)) | (1 << (mysqlParser.TIME_FORMAT - 884)) | (1 << (mysqlParser.TIME_TO_SEC - 884)) | (1 << (mysqlParser.TOUCHES - 884)) | (1 << (mysqlParser.TO_BASE64 - 884)) | (1 << (mysqlParser.TO_DAYS - 884)) | (1 << (mysqlParser.TO_SECONDS - 884)) | (1 << (mysqlParser.UCASE - 884)) | (1 << (mysqlParser.UNCOMPRESS - 884)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (mysqlParser.UNHEX - 884)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 884)) | (1 << (mysqlParser.UPDATEXML - 884)) | (1 << (mysqlParser.UPPER - 884)) | (1 << (mysqlParser.UUID - 884)) | (1 << (mysqlParser.UUID_SHORT - 884)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (mysqlParser.VERSION - 884)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (mysqlParser.WEEKDAY - 884)) | (1 << (mysqlParser.WEEKOFYEAR - 884)) | (1 << (mysqlParser.WEIGHT_STRING - 884)) | (1 << (mysqlParser.WITHIN - 884)) | (1 << (mysqlParser.YEARWEEK - 884)) | (1 << (mysqlParser.Y_FUNCTION - 884)) | (1 << (mysqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 954)) & ~0x3f) == 0 and ((1 << (_la - 954)) & ((1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 954)) | (1 << (mysqlParser.ID - 954)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 954)))) != 0):
                        self.state = 1427
                        localctx.name = self.uid()




                self.state = 1432
                self.match(mysqlParser.FOREIGN)
                self.state = 1433
                self.match(mysqlParser.KEY)
                self.state = 1435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.LEFT or _la==mysqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (mysqlParser.DATE - 180)) | (1 << (mysqlParser.TIME - 180)) | (1 << (mysqlParser.TIMESTAMP - 180)) | (1 << (mysqlParser.DATETIME - 180)) | (1 << (mysqlParser.YEAR - 180)) | (1 << (mysqlParser.TEXT - 180)) | (1 << (mysqlParser.ENUM - 180)) | (1 << (mysqlParser.COUNT - 180)) | (1 << (mysqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (mysqlParser.ACCOUNT - 244)) | (1 << (mysqlParser.ACTION - 244)) | (1 << (mysqlParser.AFTER - 244)) | (1 << (mysqlParser.AGGREGATE - 244)) | (1 << (mysqlParser.ALGORITHM - 244)) | (1 << (mysqlParser.ANY - 244)) | (1 << (mysqlParser.AT - 244)) | (1 << (mysqlParser.AUTHORS - 244)) | (1 << (mysqlParser.AUTOCOMMIT - 244)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (mysqlParser.AUTO_INCREMENT - 244)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 244)) | (1 << (mysqlParser.BEGIN - 244)) | (1 << (mysqlParser.BINLOG - 244)) | (1 << (mysqlParser.BIT - 244)) | (1 << (mysqlParser.BLOCK - 244)) | (1 << (mysqlParser.BTREE - 244)) | (1 << (mysqlParser.CASCADED - 244)) | (1 << (mysqlParser.CHAIN - 244)) | (1 << (mysqlParser.CHANNEL - 244)) | (1 << (mysqlParser.CHECKSUM - 244)) | (1 << (mysqlParser.CIPHER - 244)) | (1 << (mysqlParser.CLIENT - 244)) | (1 << (mysqlParser.COALESCE - 244)) | (1 << (mysqlParser.CODE - 244)) | (1 << (mysqlParser.COLUMNS - 244)) | (1 << (mysqlParser.COLUMN_FORMAT - 244)) | (1 << (mysqlParser.COMMENT - 244)) | (1 << (mysqlParser.COMMIT - 244)) | (1 << (mysqlParser.COMPACT - 244)) | (1 << (mysqlParser.COMPLETION - 244)) | (1 << (mysqlParser.COMPRESSED - 244)) | (1 << (mysqlParser.COMPRESSION - 244)) | (1 << (mysqlParser.CONCURRENT - 244)) | (1 << (mysqlParser.CONNECTION - 244)) | (1 << (mysqlParser.CONSISTENT - 244)) | (1 << (mysqlParser.CONTAINS - 244)) | (1 << (mysqlParser.CONTEXT - 244)) | (1 << (mysqlParser.CONTRIBUTORS - 244)) | (1 << (mysqlParser.COPY - 244)) | (1 << (mysqlParser.CPU - 244)) | (1 << (mysqlParser.DATA - 244)) | (1 << (mysqlParser.DATAFILE - 244)) | (1 << (mysqlParser.DEALLOCATE - 244)) | (1 << (mysqlParser.DEFAULT_AUTH - 244)) | (1 << (mysqlParser.DEFINER - 244)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 244)) | (1 << (mysqlParser.DIRECTORY - 244)) | (1 << (mysqlParser.DISABLE - 244)) | (1 << (mysqlParser.DISCARD - 244)) | (1 << (mysqlParser.DISK - 244)) | (1 << (mysqlParser.DO - 244)) | (1 << (mysqlParser.DUMPFILE - 244)) | (1 << (mysqlParser.DUPLICATE - 244)) | (1 << (mysqlParser.DYNAMIC - 244)) | (1 << (mysqlParser.ENABLE - 244)) | (1 << (mysqlParser.ENCRYPTION - 244)) | (1 << (mysqlParser.ENDS - 244)) | (1 << (mysqlParser.ENGINE - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (mysqlParser.ENGINES - 308)) | (1 << (mysqlParser.ERROR - 308)) | (1 << (mysqlParser.ERRORS - 308)) | (1 << (mysqlParser.ESCAPE - 308)) | (1 << (mysqlParser.EVEN - 308)) | (1 << (mysqlParser.EVENT - 308)) | (1 << (mysqlParser.EVENTS - 308)) | (1 << (mysqlParser.EVERY - 308)) | (1 << (mysqlParser.EXCHANGE - 308)) | (1 << (mysqlParser.EXCLUSIVE - 308)) | (1 << (mysqlParser.EXPIRE - 308)) | (1 << (mysqlParser.EXTENT_SIZE - 308)) | (1 << (mysqlParser.FAULTS - 308)) | (1 << (mysqlParser.FIELDS - 308)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (mysqlParser.FILTER - 308)) | (1 << (mysqlParser.FIRST - 308)) | (1 << (mysqlParser.FIXED - 308)) | (1 << (mysqlParser.FOLLOWS - 308)) | (1 << (mysqlParser.FULL - 308)) | (1 << (mysqlParser.FUNCTION - 308)) | (1 << (mysqlParser.GLOBAL - 308)) | (1 << (mysqlParser.GRANTS - 308)) | (1 << (mysqlParser.GROUP_REPLICATION - 308)) | (1 << (mysqlParser.HASH - 308)) | (1 << (mysqlParser.HOST - 308)) | (1 << (mysqlParser.IDENTIFIED - 308)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (mysqlParser.IMPORT - 308)) | (1 << (mysqlParser.INDEXES - 308)) | (1 << (mysqlParser.INITIAL_SIZE - 308)) | (1 << (mysqlParser.INPLACE - 308)) | (1 << (mysqlParser.INSERT_METHOD - 308)) | (1 << (mysqlParser.INSTANCE - 308)) | (1 << (mysqlParser.INVOKER - 308)) | (1 << (mysqlParser.IO - 308)) | (1 << (mysqlParser.IO_THREAD - 308)) | (1 << (mysqlParser.IPC - 308)) | (1 << (mysqlParser.ISOLATION - 308)) | (1 << (mysqlParser.ISSUER - 308)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (mysqlParser.LANGUAGE - 308)) | (1 << (mysqlParser.LAST - 308)) | (1 << (mysqlParser.LEAVES - 308)) | (1 << (mysqlParser.LESS - 308)) | (1 << (mysqlParser.LEVEL - 308)) | (1 << (mysqlParser.LIST - 308)) | (1 << (mysqlParser.LOCAL - 308)) | (1 << (mysqlParser.LOGFILE - 308)) | (1 << (mysqlParser.LOGS - 308)) | (1 << (mysqlParser.MASTER - 308)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 308)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (mysqlParser.MASTER_DELAY - 372)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (mysqlParser.MASTER_HOST - 372)) | (1 << (mysqlParser.MASTER_LOG_FILE - 372)) | (1 << (mysqlParser.MASTER_LOG_POS - 372)) | (1 << (mysqlParser.MASTER_PASSWORD - 372)) | (1 << (mysqlParser.MASTER_PORT - 372)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (mysqlParser.MASTER_SSL - 372)) | (1 << (mysqlParser.MASTER_SSL_CA - 372)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_CERT - 372)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (mysqlParser.MASTER_SSL_CRL - 372)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_KEY - 372)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 372)) | (1 << (mysqlParser.MASTER_USER - 372)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_ROWS - 372)) | (1 << (mysqlParser.MAX_SIZE - 372)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (mysqlParser.MERGE - 372)) | (1 << (mysqlParser.MID - 372)) | (1 << (mysqlParser.MIGRATE - 372)) | (1 << (mysqlParser.MIN_ROWS - 372)) | (1 << (mysqlParser.MODIFY - 372)) | (1 << (mysqlParser.MUTEX - 372)) | (1 << (mysqlParser.MYSQL - 372)) | (1 << (mysqlParser.NAME - 372)) | (1 << (mysqlParser.NAMES - 372)) | (1 << (mysqlParser.NCHAR - 372)) | (1 << (mysqlParser.NEVER - 372)) | (1 << (mysqlParser.NO - 372)) | (1 << (mysqlParser.NODEGROUP - 372)) | (1 << (mysqlParser.NONE - 372)) | (1 << (mysqlParser.OFFLINE - 372)) | (1 << (mysqlParser.OFFSET - 372)) | (1 << (mysqlParser.OJ - 372)) | (1 << (mysqlParser.OLD_PASSWORD - 372)) | (1 << (mysqlParser.ONE - 372)) | (1 << (mysqlParser.ONLINE - 372)) | (1 << (mysqlParser.ONLY - 372)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 372)) | (1 << (mysqlParser.OPTIONS - 372)) | (1 << (mysqlParser.OWNER - 372)) | (1 << (mysqlParser.PACK_KEYS - 372)) | (1 << (mysqlParser.PAGE - 372)) | (1 << (mysqlParser.PARSER - 372)) | (1 << (mysqlParser.PARTIAL - 372)) | (1 << (mysqlParser.PARTITIONING - 372)) | (1 << (mysqlParser.PARTITIONS - 372)) | (1 << (mysqlParser.PASSWORD - 372)) | (1 << (mysqlParser.PHASE - 372)) | (1 << (mysqlParser.PLUGIN_DIR - 372)) | (1 << (mysqlParser.PLUGINS - 372)) | (1 << (mysqlParser.PORT - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (mysqlParser.PRECEDES - 436)) | (1 << (mysqlParser.PREPARE - 436)) | (1 << (mysqlParser.PRESERVE - 436)) | (1 << (mysqlParser.PREV - 436)) | (1 << (mysqlParser.PROCESSLIST - 436)) | (1 << (mysqlParser.PROFILE - 436)) | (1 << (mysqlParser.PROFILES - 436)) | (1 << (mysqlParser.PROXY - 436)) | (1 << (mysqlParser.QUERY - 436)) | (1 << (mysqlParser.QUICK - 436)) | (1 << (mysqlParser.REBUILD - 436)) | (1 << (mysqlParser.RECOVER - 436)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (mysqlParser.REDUNDANT - 436)) | (1 << (mysqlParser.RELAY_LOG_FILE - 436)) | (1 << (mysqlParser.RELAY_LOG_POS - 436)) | (1 << (mysqlParser.RELAYLOG - 436)) | (1 << (mysqlParser.REMOVE - 436)) | (1 << (mysqlParser.REORGANIZE - 436)) | (1 << (mysqlParser.REPAIR - 436)) | (1 << (mysqlParser.REPLICATE_DO_DB - 436)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATION - 436)) | (1 << (mysqlParser.RESUME - 436)) | (1 << (mysqlParser.RETURNS - 436)) | (1 << (mysqlParser.ROLLBACK - 436)) | (1 << (mysqlParser.ROLLUP - 436)) | (1 << (mysqlParser.ROTATE - 436)) | (1 << (mysqlParser.ROW - 436)) | (1 << (mysqlParser.ROWS - 436)) | (1 << (mysqlParser.ROW_FORMAT - 436)) | (1 << (mysqlParser.SAVEPOINT - 436)) | (1 << (mysqlParser.SCHEDULE - 436)) | (1 << (mysqlParser.SECURITY - 436)) | (1 << (mysqlParser.SERVER - 436)) | (1 << (mysqlParser.SESSION - 436)) | (1 << (mysqlParser.SHARE - 436)) | (1 << (mysqlParser.SHARED - 436)) | (1 << (mysqlParser.SIGNED - 436)) | (1 << (mysqlParser.SIMPLE - 436)) | (1 << (mysqlParser.SLAVE - 436)) | (1 << (mysqlParser.SNAPSHOT - 436)) | (1 << (mysqlParser.SOCKET - 436)) | (1 << (mysqlParser.SOME - 436)) | (1 << (mysqlParser.SOUNDS - 436)) | (1 << (mysqlParser.SOURCE - 436)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (mysqlParser.SQL_CACHE - 436)) | (1 << (mysqlParser.SQL_NO_CACHE - 436)) | (1 << (mysqlParser.SQL_THREAD - 436)) | (1 << (mysqlParser.START - 436)) | (1 << (mysqlParser.STARTS - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (mysqlParser.STATS_AUTO_RECALC - 500)) | (1 << (mysqlParser.STATS_PERSISTENT - 500)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (mysqlParser.STATUS - 500)) | (1 << (mysqlParser.STOP - 500)) | (1 << (mysqlParser.STORAGE - 500)) | (1 << (mysqlParser.STRING - 500)) | (1 << (mysqlParser.SUBJECT - 500)) | (1 << (mysqlParser.SUBPARTITION - 500)) | (1 << (mysqlParser.SUBPARTITIONS - 500)) | (1 << (mysqlParser.SUSPEND - 500)) | (1 << (mysqlParser.SWAPS - 500)) | (1 << (mysqlParser.SWITCHES - 500)) | (1 << (mysqlParser.TABLESPACE - 500)) | (1 << (mysqlParser.TEMPORARY - 500)) | (1 << (mysqlParser.TEMPTABLE - 500)) | (1 << (mysqlParser.THAN - 500)) | (1 << (mysqlParser.TRANSACTION - 500)) | (1 << (mysqlParser.TRUNCATE - 500)) | (1 << (mysqlParser.UNDEFINED - 500)) | (1 << (mysqlParser.UNDOFILE - 500)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (mysqlParser.UNKNOWN - 500)) | (1 << (mysqlParser.UPGRADE - 500)) | (1 << (mysqlParser.USER - 500)) | (1 << (mysqlParser.VALIDATION - 500)) | (1 << (mysqlParser.VALUE - 500)) | (1 << (mysqlParser.VARIABLES - 500)) | (1 << (mysqlParser.VIEW - 500)) | (1 << (mysqlParser.WAIT - 500)) | (1 << (mysqlParser.WARNINGS - 500)) | (1 << (mysqlParser.WITHOUT - 500)) | (1 << (mysqlParser.WORK - 500)) | (1 << (mysqlParser.WRAPPER - 500)) | (1 << (mysqlParser.X509 - 500)) | (1 << (mysqlParser.XA - 500)) | (1 << (mysqlParser.XML - 500)) | (1 << (mysqlParser.QUARTER - 500)) | (1 << (mysqlParser.MONTH - 500)) | (1 << (mysqlParser.DAY - 500)) | (1 << (mysqlParser.HOUR - 500)) | (1 << (mysqlParser.MINUTE - 500)) | (1 << (mysqlParser.WEEK - 500)) | (1 << (mysqlParser.SECOND - 500)) | (1 << (mysqlParser.MICROSECOND - 500)) | (1 << (mysqlParser.TABLES - 500)) | (1 << (mysqlParser.ROUTINE - 500)) | (1 << (mysqlParser.EXECUTE - 500)) | (1 << (mysqlParser.FILE - 500)) | (1 << (mysqlParser.PROCESS - 500)) | (1 << (mysqlParser.RELOAD - 500)) | (1 << (mysqlParser.SHUTDOWN - 500)) | (1 << (mysqlParser.SUPER - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (mysqlParser.PRIVILEGES - 564)) | (1 << (mysqlParser.ARMSCII8 - 564)) | (1 << (mysqlParser.ASCII - 564)) | (1 << (mysqlParser.BIG5 - 564)) | (1 << (mysqlParser.CP1250 - 564)) | (1 << (mysqlParser.CP1251 - 564)) | (1 << (mysqlParser.CP1256 - 564)) | (1 << (mysqlParser.CP1257 - 564)) | (1 << (mysqlParser.CP850 - 564)) | (1 << (mysqlParser.CP852 - 564)) | (1 << (mysqlParser.CP866 - 564)) | (1 << (mysqlParser.CP932 - 564)) | (1 << (mysqlParser.DEC8 - 564)) | (1 << (mysqlParser.EUCJPMS - 564)) | (1 << (mysqlParser.EUCKR - 564)) | (1 << (mysqlParser.GB2312 - 564)) | (1 << (mysqlParser.GBK - 564)) | (1 << (mysqlParser.GEOSTD8 - 564)) | (1 << (mysqlParser.GREEK - 564)) | (1 << (mysqlParser.HEBREW - 564)) | (1 << (mysqlParser.HP8 - 564)) | (1 << (mysqlParser.KEYBCS2 - 564)) | (1 << (mysqlParser.KOI8R - 564)) | (1 << (mysqlParser.KOI8U - 564)) | (1 << (mysqlParser.LATIN1 - 564)) | (1 << (mysqlParser.LATIN2 - 564)) | (1 << (mysqlParser.LATIN5 - 564)) | (1 << (mysqlParser.LATIN7 - 564)) | (1 << (mysqlParser.MACCE - 564)) | (1 << (mysqlParser.MACROMAN - 564)) | (1 << (mysqlParser.SJIS - 564)) | (1 << (mysqlParser.SWE7 - 564)) | (1 << (mysqlParser.TIS620 - 564)) | (1 << (mysqlParser.UCS2 - 564)) | (1 << (mysqlParser.UJIS - 564)) | (1 << (mysqlParser.UTF16 - 564)) | (1 << (mysqlParser.UTF16LE - 564)) | (1 << (mysqlParser.UTF32 - 564)) | (1 << (mysqlParser.UTF8 - 564)) | (1 << (mysqlParser.UTF8MB3 - 564)) | (1 << (mysqlParser.UTF8MB4 - 564)) | (1 << (mysqlParser.ARCHIVE - 564)) | (1 << (mysqlParser.BLACKHOLE - 564)) | (1 << (mysqlParser.CSV - 564)) | (1 << (mysqlParser.FEDERATED - 564)) | (1 << (mysqlParser.INNODB - 564)) | (1 << (mysqlParser.MEMORY - 564)) | (1 << (mysqlParser.MRG_MYISAM - 564)) | (1 << (mysqlParser.MYISAM - 564)) | (1 << (mysqlParser.NDB - 564)) | (1 << (mysqlParser.NDBCLUSTER - 564)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (mysqlParser.REPEATABLE - 564)) | (1 << (mysqlParser.COMMITTED - 564)) | (1 << (mysqlParser.UNCOMMITTED - 564)) | (1 << (mysqlParser.SERIALIZABLE - 564)) | (1 << (mysqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (mysqlParser.LINESTRING - 564)) | (1 << (mysqlParser.MULTILINESTRING - 564)) | (1 << (mysqlParser.MULTIPOINT - 564)) | (1 << (mysqlParser.MULTIPOLYGON - 564)) | (1 << (mysqlParser.POINT - 564)) | (1 << (mysqlParser.POLYGON - 564)) | (1 << (mysqlParser.ABS - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (mysqlParser.ACOS - 628)) | (1 << (mysqlParser.ADDDATE - 628)) | (1 << (mysqlParser.ADDTIME - 628)) | (1 << (mysqlParser.AES_DECRYPT - 628)) | (1 << (mysqlParser.AES_ENCRYPT - 628)) | (1 << (mysqlParser.AREA - 628)) | (1 << (mysqlParser.ASBINARY - 628)) | (1 << (mysqlParser.ASIN - 628)) | (1 << (mysqlParser.ASTEXT - 628)) | (1 << (mysqlParser.ASWKB - 628)) | (1 << (mysqlParser.ASWKT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (mysqlParser.ATAN - 628)) | (1 << (mysqlParser.ATAN2 - 628)) | (1 << (mysqlParser.BENCHMARK - 628)) | (1 << (mysqlParser.BIN - 628)) | (1 << (mysqlParser.BIT_COUNT - 628)) | (1 << (mysqlParser.BIT_LENGTH - 628)) | (1 << (mysqlParser.BUFFER - 628)) | (1 << (mysqlParser.CEIL - 628)) | (1 << (mysqlParser.CEILING - 628)) | (1 << (mysqlParser.CENTROID - 628)) | (1 << (mysqlParser.CHARACTER_LENGTH - 628)) | (1 << (mysqlParser.CHARSET - 628)) | (1 << (mysqlParser.CHAR_LENGTH - 628)) | (1 << (mysqlParser.COERCIBILITY - 628)) | (1 << (mysqlParser.COLLATION - 628)) | (1 << (mysqlParser.COMPRESS - 628)) | (1 << (mysqlParser.CONCAT - 628)) | (1 << (mysqlParser.CONCAT_WS - 628)) | (1 << (mysqlParser.CONNECTION_ID - 628)) | (1 << (mysqlParser.CONV - 628)) | (1 << (mysqlParser.CONVERT_TZ - 628)) | (1 << (mysqlParser.COS - 628)) | (1 << (mysqlParser.COT - 628)) | (1 << (mysqlParser.CRC32 - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (mysqlParser.CREATE_DIGEST - 628)) | (1 << (mysqlParser.CROSSES - 628)) | (1 << (mysqlParser.DATEDIFF - 628)) | (1 << (mysqlParser.DATE_FORMAT - 628)) | (1 << (mysqlParser.DAYNAME - 628)) | (1 << (mysqlParser.DAYOFMONTH - 628)) | (1 << (mysqlParser.DAYOFWEEK - 628)) | (1 << (mysqlParser.DAYOFYEAR - 628)) | (1 << (mysqlParser.DECODE - 628)) | (1 << (mysqlParser.DEGREES - 628)) | (1 << (mysqlParser.DES_DECRYPT - 628)) | (1 << (mysqlParser.DES_ENCRYPT - 628)) | (1 << (mysqlParser.DIMENSION - 628)) | (1 << (mysqlParser.DISJOINT - 628)) | (1 << (mysqlParser.ELT - 628)) | (1 << (mysqlParser.ENCODE - 628)) | (1 << (mysqlParser.ENCRYPT - 628)) | (1 << (mysqlParser.ENDPOINT - 628)) | (1 << (mysqlParser.ENVELOPE - 628)) | (1 << (mysqlParser.EQUALS - 628)) | (1 << (mysqlParser.EXP - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (mysqlParser.EXPORT_SET - 692)) | (1 << (mysqlParser.EXTERIORRING - 692)) | (1 << (mysqlParser.EXTRACTVALUE - 692)) | (1 << (mysqlParser.FIELD - 692)) | (1 << (mysqlParser.FIND_IN_SET - 692)) | (1 << (mysqlParser.FLOOR - 692)) | (1 << (mysqlParser.FORMAT - 692)) | (1 << (mysqlParser.FOUND_ROWS - 692)) | (1 << (mysqlParser.FROM_BASE64 - 692)) | (1 << (mysqlParser.FROM_DAYS - 692)) | (1 << (mysqlParser.FROM_UNIXTIME - 692)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYN - 692)) | (1 << (mysqlParser.GEOMETRYTYPE - 692)) | (1 << (mysqlParser.GEOMFROMTEXT - 692)) | (1 << (mysqlParser.GEOMFROMWKB - 692)) | (1 << (mysqlParser.GET_FORMAT - 692)) | (1 << (mysqlParser.GET_LOCK - 692)) | (1 << (mysqlParser.GLENGTH - 692)) | (1 << (mysqlParser.GREATEST - 692)) | (1 << (mysqlParser.GTID_SUBSET - 692)) | (1 << (mysqlParser.GTID_SUBTRACT - 692)) | (1 << (mysqlParser.HEX - 692)) | (1 << (mysqlParser.IFNULL - 692)) | (1 << (mysqlParser.INET6_ATON - 692)) | (1 << (mysqlParser.INET6_NTOA - 692)) | (1 << (mysqlParser.INET_ATON - 692)) | (1 << (mysqlParser.INET_NTOA - 692)) | (1 << (mysqlParser.INSTR - 692)) | (1 << (mysqlParser.INTERIORRINGN - 692)) | (1 << (mysqlParser.INTERSECTS - 692)) | (1 << (mysqlParser.ISCLOSED - 692)) | (1 << (mysqlParser.ISEMPTY - 692)) | (1 << (mysqlParser.ISNULL - 692)) | (1 << (mysqlParser.ISSIMPLE - 692)) | (1 << (mysqlParser.IS_FREE_LOCK - 692)) | (1 << (mysqlParser.IS_IPV4 - 692)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 692)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 692)) | (1 << (mysqlParser.IS_IPV6 - 692)) | (1 << (mysqlParser.IS_USED_LOCK - 692)) | (1 << (mysqlParser.LAST_INSERT_ID - 692)) | (1 << (mysqlParser.LCASE - 692)) | (1 << (mysqlParser.LEAST - 692)) | (1 << (mysqlParser.LENGTH - 692)) | (1 << (mysqlParser.LINEFROMTEXT - 692)) | (1 << (mysqlParser.LINEFROMWKB - 692)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 692)) | (1 << (mysqlParser.LN - 692)) | (1 << (mysqlParser.LOAD_FILE - 692)) | (1 << (mysqlParser.LOCATE - 692)) | (1 << (mysqlParser.LOG - 692)) | (1 << (mysqlParser.LOG10 - 692)) | (1 << (mysqlParser.LOG2 - 692)) | (1 << (mysqlParser.LOWER - 692)) | (1 << (mysqlParser.LPAD - 692)) | (1 << (mysqlParser.LTRIM - 692)) | (1 << (mysqlParser.MAKEDATE - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (mysqlParser.MAKETIME - 756)) | (1 << (mysqlParser.MAKE_SET - 756)) | (1 << (mysqlParser.MASTER_POS_WAIT - 756)) | (1 << (mysqlParser.MBRCONTAINS - 756)) | (1 << (mysqlParser.MBRDISJOINT - 756)) | (1 << (mysqlParser.MBREQUAL - 756)) | (1 << (mysqlParser.MBRINTERSECTS - 756)) | (1 << (mysqlParser.MBROVERLAPS - 756)) | (1 << (mysqlParser.MBRTOUCHES - 756)) | (1 << (mysqlParser.MBRWITHIN - 756)) | (1 << (mysqlParser.MD5 - 756)) | (1 << (mysqlParser.MLINEFROMTEXT - 756)) | (1 << (mysqlParser.MLINEFROMWKB - 756)) | (1 << (mysqlParser.MONTHNAME - 756)) | (1 << (mysqlParser.MPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MPOINTFROMWKB - 756)) | (1 << (mysqlParser.MPOLYFROMTEXT - 756)) | (1 << (mysqlParser.MPOLYFROMWKB - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (mysqlParser.NAME_CONST - 756)) | (1 << (mysqlParser.NULLIF - 756)) | (1 << (mysqlParser.NUMGEOMETRIES - 756)) | (1 << (mysqlParser.NUMINTERIORRINGS - 756)) | (1 << (mysqlParser.NUMPOINTS - 756)) | (1 << (mysqlParser.OCT - 756)) | (1 << (mysqlParser.OCTET_LENGTH - 756)) | (1 << (mysqlParser.ORD - 756)) | (1 << (mysqlParser.OVERLAPS - 756)) | (1 << (mysqlParser.PERIOD_ADD - 756)) | (1 << (mysqlParser.PERIOD_DIFF - 756)) | (1 << (mysqlParser.PI - 756)) | (1 << (mysqlParser.POINTFROMTEXT - 756)) | (1 << (mysqlParser.POINTFROMWKB - 756)) | (1 << (mysqlParser.POINTN - 756)) | (1 << (mysqlParser.POLYFROMTEXT - 756)) | (1 << (mysqlParser.POLYFROMWKB - 756)) | (1 << (mysqlParser.POLYGONFROMTEXT - 756)) | (1 << (mysqlParser.POLYGONFROMWKB - 756)) | (1 << (mysqlParser.POW - 756)) | (1 << (mysqlParser.POWER - 756)) | (1 << (mysqlParser.QUOTE - 756)) | (1 << (mysqlParser.RADIANS - 756)) | (1 << (mysqlParser.RAND - 756)) | (1 << (mysqlParser.RANDOM_BYTES - 756)) | (1 << (mysqlParser.RELEASE_LOCK - 756)) | (1 << (mysqlParser.REVERSE - 756)) | (1 << (mysqlParser.ROUND - 756)) | (1 << (mysqlParser.ROW_COUNT - 756)) | (1 << (mysqlParser.RPAD - 756)) | (1 << (mysqlParser.RTRIM - 756)) | (1 << (mysqlParser.SEC_TO_TIME - 756)) | (1 << (mysqlParser.SESSION_USER - 756)) | (1 << (mysqlParser.SHA - 756)) | (1 << (mysqlParser.SHA1 - 756)) | (1 << (mysqlParser.SHA2 - 756)) | (1 << (mysqlParser.SIGN - 756)) | (1 << (mysqlParser.SIN - 756)) | (1 << (mysqlParser.SLEEP - 756)) | (1 << (mysqlParser.SOUNDEX - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (mysqlParser.SQRT - 820)) | (1 << (mysqlParser.SRID - 820)) | (1 << (mysqlParser.STARTPOINT - 820)) | (1 << (mysqlParser.STRCMP - 820)) | (1 << (mysqlParser.STR_TO_DATE - 820)) | (1 << (mysqlParser.ST_AREA - 820)) | (1 << (mysqlParser.ST_ASBINARY - 820)) | (1 << (mysqlParser.ST_ASTEXT - 820)) | (1 << (mysqlParser.ST_ASWKB - 820)) | (1 << (mysqlParser.ST_ASWKT - 820)) | (1 << (mysqlParser.ST_BUFFER - 820)) | (1 << (mysqlParser.ST_CENTROID - 820)) | (1 << (mysqlParser.ST_CONTAINS - 820)) | (1 << (mysqlParser.ST_CROSSES - 820)) | (1 << (mysqlParser.ST_DIFFERENCE - 820)) | (1 << (mysqlParser.ST_DIMENSION - 820)) | (1 << (mysqlParser.ST_DISJOINT - 820)) | (1 << (mysqlParser.ST_DISTANCE - 820)) | (1 << (mysqlParser.ST_ENDPOINT - 820)) | (1 << (mysqlParser.ST_ENVELOPE - 820)) | (1 << (mysqlParser.ST_EQUALS - 820)) | (1 << (mysqlParser.ST_EXTERIORRING - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYN - 820)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 820)) | (1 << (mysqlParser.ST_INTERIORRINGN - 820)) | (1 << (mysqlParser.ST_INTERSECTION - 820)) | (1 << (mysqlParser.ST_INTERSECTS - 820)) | (1 << (mysqlParser.ST_ISCLOSED - 820)) | (1 << (mysqlParser.ST_ISEMPTY - 820)) | (1 << (mysqlParser.ST_ISSIMPLE - 820)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINEFROMWKB - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (mysqlParser.ST_NUMPOINTS - 820)) | (1 << (mysqlParser.ST_OVERLAPS - 820)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 820)) | (1 << (mysqlParser.ST_POINTFROMWKB - 820)) | (1 << (mysqlParser.ST_POINTN - 820)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYFROMWKB - 820)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (mysqlParser.ST_SRID - 820)) | (1 << (mysqlParser.ST_STARTPOINT - 820)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (mysqlParser.ST_TOUCHES - 820)) | (1 << (mysqlParser.ST_UNION - 820)) | (1 << (mysqlParser.ST_WITHIN - 820)) | (1 << (mysqlParser.ST_X - 820)) | (1 << (mysqlParser.ST_Y - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (mysqlParser.SUBDATE - 884)) | (1 << (mysqlParser.SUBSTRING_INDEX - 884)) | (1 << (mysqlParser.SUBTIME - 884)) | (1 << (mysqlParser.SYSTEM_USER - 884)) | (1 << (mysqlParser.TAN - 884)) | (1 << (mysqlParser.TIMEDIFF - 884)) | (1 << (mysqlParser.TIMESTAMPADD - 884)) | (1 << (mysqlParser.TIMESTAMPDIFF - 884)) | (1 << (mysqlParser.TIME_FORMAT - 884)) | (1 << (mysqlParser.TIME_TO_SEC - 884)) | (1 << (mysqlParser.TOUCHES - 884)) | (1 << (mysqlParser.TO_BASE64 - 884)) | (1 << (mysqlParser.TO_DAYS - 884)) | (1 << (mysqlParser.TO_SECONDS - 884)) | (1 << (mysqlParser.UCASE - 884)) | (1 << (mysqlParser.UNCOMPRESS - 884)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (mysqlParser.UNHEX - 884)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 884)) | (1 << (mysqlParser.UPDATEXML - 884)) | (1 << (mysqlParser.UPPER - 884)) | (1 << (mysqlParser.UUID - 884)) | (1 << (mysqlParser.UUID_SHORT - 884)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (mysqlParser.VERSION - 884)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (mysqlParser.WEEKDAY - 884)) | (1 << (mysqlParser.WEEKOFYEAR - 884)) | (1 << (mysqlParser.WEIGHT_STRING - 884)) | (1 << (mysqlParser.WITHIN - 884)) | (1 << (mysqlParser.YEARWEEK - 884)) | (1 << (mysqlParser.Y_FUNCTION - 884)) | (1 << (mysqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 954)) & ~0x3f) == 0 and ((1 << (_la - 954)) & ((1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 954)) | (1 << (mysqlParser.ID - 954)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 954)))) != 0):
                    self.state = 1434
                    localctx.index = self.uid()


                self.state = 1437
                self.indexColumnNames()
                self.state = 1438
                self.referenceDefinition()
                pass

            elif la_ == 4:
                localctx = mysqlParser.CheckTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1440
                self.match(mysqlParser.CHECK)
                self.state = 1441
                self.match(mysqlParser.LR_BRACKET)
                self.state = 1442
                self.expression(0)
                self.state = 1443
                self.match(mysqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReferenceDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.matchType = None # Token

        def REFERENCES(self):
            return self.getToken(mysqlParser.REFERENCES, 0)

        def tableName(self):
            return self.getTypedRuleContext(mysqlParser.TableNameContext,0)


        def indexColumnNames(self):
            return self.getTypedRuleContext(mysqlParser.IndexColumnNamesContext,0)


        def MATCH(self):
            return self.getToken(mysqlParser.MATCH, 0)

        def referenceAction(self):
            return self.getTypedRuleContext(mysqlParser.ReferenceActionContext,0)


        def FULL(self):
            return self.getToken(mysqlParser.FULL, 0)

        def PARTIAL(self):
            return self.getToken(mysqlParser.PARTIAL, 0)

        def SIMPLE(self):
            return self.getToken(mysqlParser.SIMPLE, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_referenceDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceDefinition" ):
                listener.enterReferenceDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceDefinition" ):
                listener.exitReferenceDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferenceDefinition" ):
                return visitor.visitReferenceDefinition(self)
            else:
                return visitor.visitChildren(self)




    def referenceDefinition(self):

        localctx = mysqlParser.ReferenceDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_referenceDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1447
            self.match(mysqlParser.REFERENCES)
            self.state = 1448
            self.tableName()
            self.state = 1449
            self.indexColumnNames()
            self.state = 1452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.MATCH:
                self.state = 1450
                self.match(mysqlParser.MATCH)
                self.state = 1451
                localctx.matchType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.FULL or _la==mysqlParser.PARTIAL or _la==mysqlParser.SIMPLE):
                    localctx.matchType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.ON:
                self.state = 1454
                self.referenceAction()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReferenceActionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.onDelete = None # ReferenceControlTypeContext
            self.onUpdate = None # ReferenceControlTypeContext

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.ON)
            else:
                return self.getToken(mysqlParser.ON, i)

        def DELETE(self):
            return self.getToken(mysqlParser.DELETE, 0)

        def referenceControlType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.ReferenceControlTypeContext)
            else:
                return self.getTypedRuleContext(mysqlParser.ReferenceControlTypeContext,i)


        def UPDATE(self):
            return self.getToken(mysqlParser.UPDATE, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_referenceAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceAction" ):
                listener.enterReferenceAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceAction" ):
                listener.exitReferenceAction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferenceAction" ):
                return visitor.visitReferenceAction(self)
            else:
                return visitor.visitChildren(self)




    def referenceAction(self):

        localctx = mysqlParser.ReferenceActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_referenceAction)
        self._la = 0 # Token type
        try:
            self.state = 1473
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1457
                self.match(mysqlParser.ON)
                self.state = 1458
                self.match(mysqlParser.DELETE)
                self.state = 1459
                localctx.onDelete = self.referenceControlType()
                self.state = 1463
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.ON:
                    self.state = 1460
                    self.match(mysqlParser.ON)
                    self.state = 1461
                    self.match(mysqlParser.UPDATE)
                    self.state = 1462
                    localctx.onUpdate = self.referenceControlType()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1465
                self.match(mysqlParser.ON)
                self.state = 1466
                self.match(mysqlParser.UPDATE)
                self.state = 1467
                localctx.onUpdate = self.referenceControlType()
                self.state = 1471
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.ON:
                    self.state = 1468
                    self.match(mysqlParser.ON)
                    self.state = 1469
                    self.match(mysqlParser.DELETE)
                    self.state = 1470
                    localctx.onDelete = self.referenceControlType()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReferenceControlTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESTRICT(self):
            return self.getToken(mysqlParser.RESTRICT, 0)

        def CASCADE(self):
            return self.getToken(mysqlParser.CASCADE, 0)

        def SET(self):
            return self.getToken(mysqlParser.SET, 0)

        def NULL_LITERAL(self):
            return self.getToken(mysqlParser.NULL_LITERAL, 0)

        def NO(self):
            return self.getToken(mysqlParser.NO, 0)

        def ACTION(self):
            return self.getToken(mysqlParser.ACTION, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_referenceControlType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceControlType" ):
                listener.enterReferenceControlType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceControlType" ):
                listener.exitReferenceControlType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReferenceControlType" ):
                return visitor.visitReferenceControlType(self)
            else:
                return visitor.visitChildren(self)




    def referenceControlType(self):

        localctx = mysqlParser.ReferenceControlTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_referenceControlType)
        try:
            self.state = 1481
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.RESTRICT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1475
                self.match(mysqlParser.RESTRICT)
                pass
            elif token in [mysqlParser.CASCADE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1476
                self.match(mysqlParser.CASCADE)
                pass
            elif token in [mysqlParser.SET]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1477
                self.match(mysqlParser.SET)
                self.state = 1478
                self.match(mysqlParser.NULL_LITERAL)
                pass
            elif token in [mysqlParser.NO]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1479
                self.match(mysqlParser.NO)
                self.state = 1480
                self.match(mysqlParser.ACTION)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndexColumnDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_indexColumnDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SpecialIndexDeclarationContext(IndexColumnDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.IndexColumnDefinitionContext
            super().__init__(parser)
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def indexColumnNames(self):
            return self.getTypedRuleContext(mysqlParser.IndexColumnNamesContext,0)

        def FULLTEXT(self):
            return self.getToken(mysqlParser.FULLTEXT, 0)
        def SPATIAL(self):
            return self.getToken(mysqlParser.SPATIAL, 0)
        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.IndexOptionContext,i)

        def INDEX(self):
            return self.getToken(mysqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(mysqlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialIndexDeclaration" ):
                listener.enterSpecialIndexDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialIndexDeclaration" ):
                listener.exitSpecialIndexDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecialIndexDeclaration" ):
                return visitor.visitSpecialIndexDeclaration(self)
            else:
                return visitor.visitChildren(self)


    class SimpleIndexDeclarationContext(IndexColumnDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.IndexColumnDefinitionContext
            super().__init__(parser)
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def indexColumnNames(self):
            return self.getTypedRuleContext(mysqlParser.IndexColumnNamesContext,0)

        def INDEX(self):
            return self.getToken(mysqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(mysqlParser.KEY, 0)
        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)

        def indexType(self):
            return self.getTypedRuleContext(mysqlParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.IndexOptionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIndexDeclaration" ):
                listener.enterSimpleIndexDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIndexDeclaration" ):
                listener.exitSimpleIndexDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleIndexDeclaration" ):
                return visitor.visitSimpleIndexDeclaration(self)
            else:
                return visitor.visitChildren(self)



    def indexColumnDefinition(self):

        localctx = mysqlParser.IndexColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_indexColumnDefinition)
        self._la = 0 # Token type
        try:
            self.state = 1511
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.INDEX, mysqlParser.KEY]:
                localctx = mysqlParser.SimpleIndexDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1483
                localctx.indexFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.INDEX or _la==mysqlParser.KEY):
                    localctx.indexFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1485
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.LEFT or _la==mysqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (mysqlParser.DATE - 180)) | (1 << (mysqlParser.TIME - 180)) | (1 << (mysqlParser.TIMESTAMP - 180)) | (1 << (mysqlParser.DATETIME - 180)) | (1 << (mysqlParser.YEAR - 180)) | (1 << (mysqlParser.TEXT - 180)) | (1 << (mysqlParser.ENUM - 180)) | (1 << (mysqlParser.COUNT - 180)) | (1 << (mysqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (mysqlParser.ACCOUNT - 244)) | (1 << (mysqlParser.ACTION - 244)) | (1 << (mysqlParser.AFTER - 244)) | (1 << (mysqlParser.AGGREGATE - 244)) | (1 << (mysqlParser.ALGORITHM - 244)) | (1 << (mysqlParser.ANY - 244)) | (1 << (mysqlParser.AT - 244)) | (1 << (mysqlParser.AUTHORS - 244)) | (1 << (mysqlParser.AUTOCOMMIT - 244)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (mysqlParser.AUTO_INCREMENT - 244)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 244)) | (1 << (mysqlParser.BEGIN - 244)) | (1 << (mysqlParser.BINLOG - 244)) | (1 << (mysqlParser.BIT - 244)) | (1 << (mysqlParser.BLOCK - 244)) | (1 << (mysqlParser.BTREE - 244)) | (1 << (mysqlParser.CASCADED - 244)) | (1 << (mysqlParser.CHAIN - 244)) | (1 << (mysqlParser.CHANNEL - 244)) | (1 << (mysqlParser.CHECKSUM - 244)) | (1 << (mysqlParser.CIPHER - 244)) | (1 << (mysqlParser.CLIENT - 244)) | (1 << (mysqlParser.COALESCE - 244)) | (1 << (mysqlParser.CODE - 244)) | (1 << (mysqlParser.COLUMNS - 244)) | (1 << (mysqlParser.COLUMN_FORMAT - 244)) | (1 << (mysqlParser.COMMENT - 244)) | (1 << (mysqlParser.COMMIT - 244)) | (1 << (mysqlParser.COMPACT - 244)) | (1 << (mysqlParser.COMPLETION - 244)) | (1 << (mysqlParser.COMPRESSED - 244)) | (1 << (mysqlParser.COMPRESSION - 244)) | (1 << (mysqlParser.CONCURRENT - 244)) | (1 << (mysqlParser.CONNECTION - 244)) | (1 << (mysqlParser.CONSISTENT - 244)) | (1 << (mysqlParser.CONTAINS - 244)) | (1 << (mysqlParser.CONTEXT - 244)) | (1 << (mysqlParser.CONTRIBUTORS - 244)) | (1 << (mysqlParser.COPY - 244)) | (1 << (mysqlParser.CPU - 244)) | (1 << (mysqlParser.DATA - 244)) | (1 << (mysqlParser.DATAFILE - 244)) | (1 << (mysqlParser.DEALLOCATE - 244)) | (1 << (mysqlParser.DEFAULT_AUTH - 244)) | (1 << (mysqlParser.DEFINER - 244)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 244)) | (1 << (mysqlParser.DIRECTORY - 244)) | (1 << (mysqlParser.DISABLE - 244)) | (1 << (mysqlParser.DISCARD - 244)) | (1 << (mysqlParser.DISK - 244)) | (1 << (mysqlParser.DO - 244)) | (1 << (mysqlParser.DUMPFILE - 244)) | (1 << (mysqlParser.DUPLICATE - 244)) | (1 << (mysqlParser.DYNAMIC - 244)) | (1 << (mysqlParser.ENABLE - 244)) | (1 << (mysqlParser.ENCRYPTION - 244)) | (1 << (mysqlParser.ENDS - 244)) | (1 << (mysqlParser.ENGINE - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (mysqlParser.ENGINES - 308)) | (1 << (mysqlParser.ERROR - 308)) | (1 << (mysqlParser.ERRORS - 308)) | (1 << (mysqlParser.ESCAPE - 308)) | (1 << (mysqlParser.EVEN - 308)) | (1 << (mysqlParser.EVENT - 308)) | (1 << (mysqlParser.EVENTS - 308)) | (1 << (mysqlParser.EVERY - 308)) | (1 << (mysqlParser.EXCHANGE - 308)) | (1 << (mysqlParser.EXCLUSIVE - 308)) | (1 << (mysqlParser.EXPIRE - 308)) | (1 << (mysqlParser.EXTENT_SIZE - 308)) | (1 << (mysqlParser.FAULTS - 308)) | (1 << (mysqlParser.FIELDS - 308)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (mysqlParser.FILTER - 308)) | (1 << (mysqlParser.FIRST - 308)) | (1 << (mysqlParser.FIXED - 308)) | (1 << (mysqlParser.FOLLOWS - 308)) | (1 << (mysqlParser.FULL - 308)) | (1 << (mysqlParser.FUNCTION - 308)) | (1 << (mysqlParser.GLOBAL - 308)) | (1 << (mysqlParser.GRANTS - 308)) | (1 << (mysqlParser.GROUP_REPLICATION - 308)) | (1 << (mysqlParser.HASH - 308)) | (1 << (mysqlParser.HOST - 308)) | (1 << (mysqlParser.IDENTIFIED - 308)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (mysqlParser.IMPORT - 308)) | (1 << (mysqlParser.INDEXES - 308)) | (1 << (mysqlParser.INITIAL_SIZE - 308)) | (1 << (mysqlParser.INPLACE - 308)) | (1 << (mysqlParser.INSERT_METHOD - 308)) | (1 << (mysqlParser.INSTANCE - 308)) | (1 << (mysqlParser.INVOKER - 308)) | (1 << (mysqlParser.IO - 308)) | (1 << (mysqlParser.IO_THREAD - 308)) | (1 << (mysqlParser.IPC - 308)) | (1 << (mysqlParser.ISOLATION - 308)) | (1 << (mysqlParser.ISSUER - 308)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (mysqlParser.LANGUAGE - 308)) | (1 << (mysqlParser.LAST - 308)) | (1 << (mysqlParser.LEAVES - 308)) | (1 << (mysqlParser.LESS - 308)) | (1 << (mysqlParser.LEVEL - 308)) | (1 << (mysqlParser.LIST - 308)) | (1 << (mysqlParser.LOCAL - 308)) | (1 << (mysqlParser.LOGFILE - 308)) | (1 << (mysqlParser.LOGS - 308)) | (1 << (mysqlParser.MASTER - 308)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 308)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (mysqlParser.MASTER_DELAY - 372)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (mysqlParser.MASTER_HOST - 372)) | (1 << (mysqlParser.MASTER_LOG_FILE - 372)) | (1 << (mysqlParser.MASTER_LOG_POS - 372)) | (1 << (mysqlParser.MASTER_PASSWORD - 372)) | (1 << (mysqlParser.MASTER_PORT - 372)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (mysqlParser.MASTER_SSL - 372)) | (1 << (mysqlParser.MASTER_SSL_CA - 372)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_CERT - 372)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (mysqlParser.MASTER_SSL_CRL - 372)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_KEY - 372)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 372)) | (1 << (mysqlParser.MASTER_USER - 372)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_ROWS - 372)) | (1 << (mysqlParser.MAX_SIZE - 372)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (mysqlParser.MERGE - 372)) | (1 << (mysqlParser.MID - 372)) | (1 << (mysqlParser.MIGRATE - 372)) | (1 << (mysqlParser.MIN_ROWS - 372)) | (1 << (mysqlParser.MODIFY - 372)) | (1 << (mysqlParser.MUTEX - 372)) | (1 << (mysqlParser.MYSQL - 372)) | (1 << (mysqlParser.NAME - 372)) | (1 << (mysqlParser.NAMES - 372)) | (1 << (mysqlParser.NCHAR - 372)) | (1 << (mysqlParser.NEVER - 372)) | (1 << (mysqlParser.NO - 372)) | (1 << (mysqlParser.NODEGROUP - 372)) | (1 << (mysqlParser.NONE - 372)) | (1 << (mysqlParser.OFFLINE - 372)) | (1 << (mysqlParser.OFFSET - 372)) | (1 << (mysqlParser.OJ - 372)) | (1 << (mysqlParser.OLD_PASSWORD - 372)) | (1 << (mysqlParser.ONE - 372)) | (1 << (mysqlParser.ONLINE - 372)) | (1 << (mysqlParser.ONLY - 372)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 372)) | (1 << (mysqlParser.OPTIONS - 372)) | (1 << (mysqlParser.OWNER - 372)) | (1 << (mysqlParser.PACK_KEYS - 372)) | (1 << (mysqlParser.PAGE - 372)) | (1 << (mysqlParser.PARSER - 372)) | (1 << (mysqlParser.PARTIAL - 372)) | (1 << (mysqlParser.PARTITIONING - 372)) | (1 << (mysqlParser.PARTITIONS - 372)) | (1 << (mysqlParser.PASSWORD - 372)) | (1 << (mysqlParser.PHASE - 372)) | (1 << (mysqlParser.PLUGIN_DIR - 372)) | (1 << (mysqlParser.PLUGINS - 372)) | (1 << (mysqlParser.PORT - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (mysqlParser.PRECEDES - 436)) | (1 << (mysqlParser.PREPARE - 436)) | (1 << (mysqlParser.PRESERVE - 436)) | (1 << (mysqlParser.PREV - 436)) | (1 << (mysqlParser.PROCESSLIST - 436)) | (1 << (mysqlParser.PROFILE - 436)) | (1 << (mysqlParser.PROFILES - 436)) | (1 << (mysqlParser.PROXY - 436)) | (1 << (mysqlParser.QUERY - 436)) | (1 << (mysqlParser.QUICK - 436)) | (1 << (mysqlParser.REBUILD - 436)) | (1 << (mysqlParser.RECOVER - 436)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (mysqlParser.REDUNDANT - 436)) | (1 << (mysqlParser.RELAY_LOG_FILE - 436)) | (1 << (mysqlParser.RELAY_LOG_POS - 436)) | (1 << (mysqlParser.RELAYLOG - 436)) | (1 << (mysqlParser.REMOVE - 436)) | (1 << (mysqlParser.REORGANIZE - 436)) | (1 << (mysqlParser.REPAIR - 436)) | (1 << (mysqlParser.REPLICATE_DO_DB - 436)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATION - 436)) | (1 << (mysqlParser.RESUME - 436)) | (1 << (mysqlParser.RETURNS - 436)) | (1 << (mysqlParser.ROLLBACK - 436)) | (1 << (mysqlParser.ROLLUP - 436)) | (1 << (mysqlParser.ROTATE - 436)) | (1 << (mysqlParser.ROW - 436)) | (1 << (mysqlParser.ROWS - 436)) | (1 << (mysqlParser.ROW_FORMAT - 436)) | (1 << (mysqlParser.SAVEPOINT - 436)) | (1 << (mysqlParser.SCHEDULE - 436)) | (1 << (mysqlParser.SECURITY - 436)) | (1 << (mysqlParser.SERVER - 436)) | (1 << (mysqlParser.SESSION - 436)) | (1 << (mysqlParser.SHARE - 436)) | (1 << (mysqlParser.SHARED - 436)) | (1 << (mysqlParser.SIGNED - 436)) | (1 << (mysqlParser.SIMPLE - 436)) | (1 << (mysqlParser.SLAVE - 436)) | (1 << (mysqlParser.SNAPSHOT - 436)) | (1 << (mysqlParser.SOCKET - 436)) | (1 << (mysqlParser.SOME - 436)) | (1 << (mysqlParser.SOUNDS - 436)) | (1 << (mysqlParser.SOURCE - 436)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (mysqlParser.SQL_CACHE - 436)) | (1 << (mysqlParser.SQL_NO_CACHE - 436)) | (1 << (mysqlParser.SQL_THREAD - 436)) | (1 << (mysqlParser.START - 436)) | (1 << (mysqlParser.STARTS - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (mysqlParser.STATS_AUTO_RECALC - 500)) | (1 << (mysqlParser.STATS_PERSISTENT - 500)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (mysqlParser.STATUS - 500)) | (1 << (mysqlParser.STOP - 500)) | (1 << (mysqlParser.STORAGE - 500)) | (1 << (mysqlParser.STRING - 500)) | (1 << (mysqlParser.SUBJECT - 500)) | (1 << (mysqlParser.SUBPARTITION - 500)) | (1 << (mysqlParser.SUBPARTITIONS - 500)) | (1 << (mysqlParser.SUSPEND - 500)) | (1 << (mysqlParser.SWAPS - 500)) | (1 << (mysqlParser.SWITCHES - 500)) | (1 << (mysqlParser.TABLESPACE - 500)) | (1 << (mysqlParser.TEMPORARY - 500)) | (1 << (mysqlParser.TEMPTABLE - 500)) | (1 << (mysqlParser.THAN - 500)) | (1 << (mysqlParser.TRANSACTION - 500)) | (1 << (mysqlParser.TRUNCATE - 500)) | (1 << (mysqlParser.UNDEFINED - 500)) | (1 << (mysqlParser.UNDOFILE - 500)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (mysqlParser.UNKNOWN - 500)) | (1 << (mysqlParser.UPGRADE - 500)) | (1 << (mysqlParser.USER - 500)) | (1 << (mysqlParser.VALIDATION - 500)) | (1 << (mysqlParser.VALUE - 500)) | (1 << (mysqlParser.VARIABLES - 500)) | (1 << (mysqlParser.VIEW - 500)) | (1 << (mysqlParser.WAIT - 500)) | (1 << (mysqlParser.WARNINGS - 500)) | (1 << (mysqlParser.WITHOUT - 500)) | (1 << (mysqlParser.WORK - 500)) | (1 << (mysqlParser.WRAPPER - 500)) | (1 << (mysqlParser.X509 - 500)) | (1 << (mysqlParser.XA - 500)) | (1 << (mysqlParser.XML - 500)) | (1 << (mysqlParser.QUARTER - 500)) | (1 << (mysqlParser.MONTH - 500)) | (1 << (mysqlParser.DAY - 500)) | (1 << (mysqlParser.HOUR - 500)) | (1 << (mysqlParser.MINUTE - 500)) | (1 << (mysqlParser.WEEK - 500)) | (1 << (mysqlParser.SECOND - 500)) | (1 << (mysqlParser.MICROSECOND - 500)) | (1 << (mysqlParser.TABLES - 500)) | (1 << (mysqlParser.ROUTINE - 500)) | (1 << (mysqlParser.EXECUTE - 500)) | (1 << (mysqlParser.FILE - 500)) | (1 << (mysqlParser.PROCESS - 500)) | (1 << (mysqlParser.RELOAD - 500)) | (1 << (mysqlParser.SHUTDOWN - 500)) | (1 << (mysqlParser.SUPER - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (mysqlParser.PRIVILEGES - 564)) | (1 << (mysqlParser.ARMSCII8 - 564)) | (1 << (mysqlParser.ASCII - 564)) | (1 << (mysqlParser.BIG5 - 564)) | (1 << (mysqlParser.CP1250 - 564)) | (1 << (mysqlParser.CP1251 - 564)) | (1 << (mysqlParser.CP1256 - 564)) | (1 << (mysqlParser.CP1257 - 564)) | (1 << (mysqlParser.CP850 - 564)) | (1 << (mysqlParser.CP852 - 564)) | (1 << (mysqlParser.CP866 - 564)) | (1 << (mysqlParser.CP932 - 564)) | (1 << (mysqlParser.DEC8 - 564)) | (1 << (mysqlParser.EUCJPMS - 564)) | (1 << (mysqlParser.EUCKR - 564)) | (1 << (mysqlParser.GB2312 - 564)) | (1 << (mysqlParser.GBK - 564)) | (1 << (mysqlParser.GEOSTD8 - 564)) | (1 << (mysqlParser.GREEK - 564)) | (1 << (mysqlParser.HEBREW - 564)) | (1 << (mysqlParser.HP8 - 564)) | (1 << (mysqlParser.KEYBCS2 - 564)) | (1 << (mysqlParser.KOI8R - 564)) | (1 << (mysqlParser.KOI8U - 564)) | (1 << (mysqlParser.LATIN1 - 564)) | (1 << (mysqlParser.LATIN2 - 564)) | (1 << (mysqlParser.LATIN5 - 564)) | (1 << (mysqlParser.LATIN7 - 564)) | (1 << (mysqlParser.MACCE - 564)) | (1 << (mysqlParser.MACROMAN - 564)) | (1 << (mysqlParser.SJIS - 564)) | (1 << (mysqlParser.SWE7 - 564)) | (1 << (mysqlParser.TIS620 - 564)) | (1 << (mysqlParser.UCS2 - 564)) | (1 << (mysqlParser.UJIS - 564)) | (1 << (mysqlParser.UTF16 - 564)) | (1 << (mysqlParser.UTF16LE - 564)) | (1 << (mysqlParser.UTF32 - 564)) | (1 << (mysqlParser.UTF8 - 564)) | (1 << (mysqlParser.UTF8MB3 - 564)) | (1 << (mysqlParser.UTF8MB4 - 564)) | (1 << (mysqlParser.ARCHIVE - 564)) | (1 << (mysqlParser.BLACKHOLE - 564)) | (1 << (mysqlParser.CSV - 564)) | (1 << (mysqlParser.FEDERATED - 564)) | (1 << (mysqlParser.INNODB - 564)) | (1 << (mysqlParser.MEMORY - 564)) | (1 << (mysqlParser.MRG_MYISAM - 564)) | (1 << (mysqlParser.MYISAM - 564)) | (1 << (mysqlParser.NDB - 564)) | (1 << (mysqlParser.NDBCLUSTER - 564)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (mysqlParser.REPEATABLE - 564)) | (1 << (mysqlParser.COMMITTED - 564)) | (1 << (mysqlParser.UNCOMMITTED - 564)) | (1 << (mysqlParser.SERIALIZABLE - 564)) | (1 << (mysqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (mysqlParser.LINESTRING - 564)) | (1 << (mysqlParser.MULTILINESTRING - 564)) | (1 << (mysqlParser.MULTIPOINT - 564)) | (1 << (mysqlParser.MULTIPOLYGON - 564)) | (1 << (mysqlParser.POINT - 564)) | (1 << (mysqlParser.POLYGON - 564)) | (1 << (mysqlParser.ABS - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (mysqlParser.ACOS - 628)) | (1 << (mysqlParser.ADDDATE - 628)) | (1 << (mysqlParser.ADDTIME - 628)) | (1 << (mysqlParser.AES_DECRYPT - 628)) | (1 << (mysqlParser.AES_ENCRYPT - 628)) | (1 << (mysqlParser.AREA - 628)) | (1 << (mysqlParser.ASBINARY - 628)) | (1 << (mysqlParser.ASIN - 628)) | (1 << (mysqlParser.ASTEXT - 628)) | (1 << (mysqlParser.ASWKB - 628)) | (1 << (mysqlParser.ASWKT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (mysqlParser.ATAN - 628)) | (1 << (mysqlParser.ATAN2 - 628)) | (1 << (mysqlParser.BENCHMARK - 628)) | (1 << (mysqlParser.BIN - 628)) | (1 << (mysqlParser.BIT_COUNT - 628)) | (1 << (mysqlParser.BIT_LENGTH - 628)) | (1 << (mysqlParser.BUFFER - 628)) | (1 << (mysqlParser.CEIL - 628)) | (1 << (mysqlParser.CEILING - 628)) | (1 << (mysqlParser.CENTROID - 628)) | (1 << (mysqlParser.CHARACTER_LENGTH - 628)) | (1 << (mysqlParser.CHARSET - 628)) | (1 << (mysqlParser.CHAR_LENGTH - 628)) | (1 << (mysqlParser.COERCIBILITY - 628)) | (1 << (mysqlParser.COLLATION - 628)) | (1 << (mysqlParser.COMPRESS - 628)) | (1 << (mysqlParser.CONCAT - 628)) | (1 << (mysqlParser.CONCAT_WS - 628)) | (1 << (mysqlParser.CONNECTION_ID - 628)) | (1 << (mysqlParser.CONV - 628)) | (1 << (mysqlParser.CONVERT_TZ - 628)) | (1 << (mysqlParser.COS - 628)) | (1 << (mysqlParser.COT - 628)) | (1 << (mysqlParser.CRC32 - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (mysqlParser.CREATE_DIGEST - 628)) | (1 << (mysqlParser.CROSSES - 628)) | (1 << (mysqlParser.DATEDIFF - 628)) | (1 << (mysqlParser.DATE_FORMAT - 628)) | (1 << (mysqlParser.DAYNAME - 628)) | (1 << (mysqlParser.DAYOFMONTH - 628)) | (1 << (mysqlParser.DAYOFWEEK - 628)) | (1 << (mysqlParser.DAYOFYEAR - 628)) | (1 << (mysqlParser.DECODE - 628)) | (1 << (mysqlParser.DEGREES - 628)) | (1 << (mysqlParser.DES_DECRYPT - 628)) | (1 << (mysqlParser.DES_ENCRYPT - 628)) | (1 << (mysqlParser.DIMENSION - 628)) | (1 << (mysqlParser.DISJOINT - 628)) | (1 << (mysqlParser.ELT - 628)) | (1 << (mysqlParser.ENCODE - 628)) | (1 << (mysqlParser.ENCRYPT - 628)) | (1 << (mysqlParser.ENDPOINT - 628)) | (1 << (mysqlParser.ENVELOPE - 628)) | (1 << (mysqlParser.EQUALS - 628)) | (1 << (mysqlParser.EXP - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (mysqlParser.EXPORT_SET - 692)) | (1 << (mysqlParser.EXTERIORRING - 692)) | (1 << (mysqlParser.EXTRACTVALUE - 692)) | (1 << (mysqlParser.FIELD - 692)) | (1 << (mysqlParser.FIND_IN_SET - 692)) | (1 << (mysqlParser.FLOOR - 692)) | (1 << (mysqlParser.FORMAT - 692)) | (1 << (mysqlParser.FOUND_ROWS - 692)) | (1 << (mysqlParser.FROM_BASE64 - 692)) | (1 << (mysqlParser.FROM_DAYS - 692)) | (1 << (mysqlParser.FROM_UNIXTIME - 692)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYN - 692)) | (1 << (mysqlParser.GEOMETRYTYPE - 692)) | (1 << (mysqlParser.GEOMFROMTEXT - 692)) | (1 << (mysqlParser.GEOMFROMWKB - 692)) | (1 << (mysqlParser.GET_FORMAT - 692)) | (1 << (mysqlParser.GET_LOCK - 692)) | (1 << (mysqlParser.GLENGTH - 692)) | (1 << (mysqlParser.GREATEST - 692)) | (1 << (mysqlParser.GTID_SUBSET - 692)) | (1 << (mysqlParser.GTID_SUBTRACT - 692)) | (1 << (mysqlParser.HEX - 692)) | (1 << (mysqlParser.IFNULL - 692)) | (1 << (mysqlParser.INET6_ATON - 692)) | (1 << (mysqlParser.INET6_NTOA - 692)) | (1 << (mysqlParser.INET_ATON - 692)) | (1 << (mysqlParser.INET_NTOA - 692)) | (1 << (mysqlParser.INSTR - 692)) | (1 << (mysqlParser.INTERIORRINGN - 692)) | (1 << (mysqlParser.INTERSECTS - 692)) | (1 << (mysqlParser.ISCLOSED - 692)) | (1 << (mysqlParser.ISEMPTY - 692)) | (1 << (mysqlParser.ISNULL - 692)) | (1 << (mysqlParser.ISSIMPLE - 692)) | (1 << (mysqlParser.IS_FREE_LOCK - 692)) | (1 << (mysqlParser.IS_IPV4 - 692)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 692)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 692)) | (1 << (mysqlParser.IS_IPV6 - 692)) | (1 << (mysqlParser.IS_USED_LOCK - 692)) | (1 << (mysqlParser.LAST_INSERT_ID - 692)) | (1 << (mysqlParser.LCASE - 692)) | (1 << (mysqlParser.LEAST - 692)) | (1 << (mysqlParser.LENGTH - 692)) | (1 << (mysqlParser.LINEFROMTEXT - 692)) | (1 << (mysqlParser.LINEFROMWKB - 692)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 692)) | (1 << (mysqlParser.LN - 692)) | (1 << (mysqlParser.LOAD_FILE - 692)) | (1 << (mysqlParser.LOCATE - 692)) | (1 << (mysqlParser.LOG - 692)) | (1 << (mysqlParser.LOG10 - 692)) | (1 << (mysqlParser.LOG2 - 692)) | (1 << (mysqlParser.LOWER - 692)) | (1 << (mysqlParser.LPAD - 692)) | (1 << (mysqlParser.LTRIM - 692)) | (1 << (mysqlParser.MAKEDATE - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (mysqlParser.MAKETIME - 756)) | (1 << (mysqlParser.MAKE_SET - 756)) | (1 << (mysqlParser.MASTER_POS_WAIT - 756)) | (1 << (mysqlParser.MBRCONTAINS - 756)) | (1 << (mysqlParser.MBRDISJOINT - 756)) | (1 << (mysqlParser.MBREQUAL - 756)) | (1 << (mysqlParser.MBRINTERSECTS - 756)) | (1 << (mysqlParser.MBROVERLAPS - 756)) | (1 << (mysqlParser.MBRTOUCHES - 756)) | (1 << (mysqlParser.MBRWITHIN - 756)) | (1 << (mysqlParser.MD5 - 756)) | (1 << (mysqlParser.MLINEFROMTEXT - 756)) | (1 << (mysqlParser.MLINEFROMWKB - 756)) | (1 << (mysqlParser.MONTHNAME - 756)) | (1 << (mysqlParser.MPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MPOINTFROMWKB - 756)) | (1 << (mysqlParser.MPOLYFROMTEXT - 756)) | (1 << (mysqlParser.MPOLYFROMWKB - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (mysqlParser.NAME_CONST - 756)) | (1 << (mysqlParser.NULLIF - 756)) | (1 << (mysqlParser.NUMGEOMETRIES - 756)) | (1 << (mysqlParser.NUMINTERIORRINGS - 756)) | (1 << (mysqlParser.NUMPOINTS - 756)) | (1 << (mysqlParser.OCT - 756)) | (1 << (mysqlParser.OCTET_LENGTH - 756)) | (1 << (mysqlParser.ORD - 756)) | (1 << (mysqlParser.OVERLAPS - 756)) | (1 << (mysqlParser.PERIOD_ADD - 756)) | (1 << (mysqlParser.PERIOD_DIFF - 756)) | (1 << (mysqlParser.PI - 756)) | (1 << (mysqlParser.POINTFROMTEXT - 756)) | (1 << (mysqlParser.POINTFROMWKB - 756)) | (1 << (mysqlParser.POINTN - 756)) | (1 << (mysqlParser.POLYFROMTEXT - 756)) | (1 << (mysqlParser.POLYFROMWKB - 756)) | (1 << (mysqlParser.POLYGONFROMTEXT - 756)) | (1 << (mysqlParser.POLYGONFROMWKB - 756)) | (1 << (mysqlParser.POW - 756)) | (1 << (mysqlParser.POWER - 756)) | (1 << (mysqlParser.QUOTE - 756)) | (1 << (mysqlParser.RADIANS - 756)) | (1 << (mysqlParser.RAND - 756)) | (1 << (mysqlParser.RANDOM_BYTES - 756)) | (1 << (mysqlParser.RELEASE_LOCK - 756)) | (1 << (mysqlParser.REVERSE - 756)) | (1 << (mysqlParser.ROUND - 756)) | (1 << (mysqlParser.ROW_COUNT - 756)) | (1 << (mysqlParser.RPAD - 756)) | (1 << (mysqlParser.RTRIM - 756)) | (1 << (mysqlParser.SEC_TO_TIME - 756)) | (1 << (mysqlParser.SESSION_USER - 756)) | (1 << (mysqlParser.SHA - 756)) | (1 << (mysqlParser.SHA1 - 756)) | (1 << (mysqlParser.SHA2 - 756)) | (1 << (mysqlParser.SIGN - 756)) | (1 << (mysqlParser.SIN - 756)) | (1 << (mysqlParser.SLEEP - 756)) | (1 << (mysqlParser.SOUNDEX - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (mysqlParser.SQRT - 820)) | (1 << (mysqlParser.SRID - 820)) | (1 << (mysqlParser.STARTPOINT - 820)) | (1 << (mysqlParser.STRCMP - 820)) | (1 << (mysqlParser.STR_TO_DATE - 820)) | (1 << (mysqlParser.ST_AREA - 820)) | (1 << (mysqlParser.ST_ASBINARY - 820)) | (1 << (mysqlParser.ST_ASTEXT - 820)) | (1 << (mysqlParser.ST_ASWKB - 820)) | (1 << (mysqlParser.ST_ASWKT - 820)) | (1 << (mysqlParser.ST_BUFFER - 820)) | (1 << (mysqlParser.ST_CENTROID - 820)) | (1 << (mysqlParser.ST_CONTAINS - 820)) | (1 << (mysqlParser.ST_CROSSES - 820)) | (1 << (mysqlParser.ST_DIFFERENCE - 820)) | (1 << (mysqlParser.ST_DIMENSION - 820)) | (1 << (mysqlParser.ST_DISJOINT - 820)) | (1 << (mysqlParser.ST_DISTANCE - 820)) | (1 << (mysqlParser.ST_ENDPOINT - 820)) | (1 << (mysqlParser.ST_ENVELOPE - 820)) | (1 << (mysqlParser.ST_EQUALS - 820)) | (1 << (mysqlParser.ST_EXTERIORRING - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYN - 820)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 820)) | (1 << (mysqlParser.ST_INTERIORRINGN - 820)) | (1 << (mysqlParser.ST_INTERSECTION - 820)) | (1 << (mysqlParser.ST_INTERSECTS - 820)) | (1 << (mysqlParser.ST_ISCLOSED - 820)) | (1 << (mysqlParser.ST_ISEMPTY - 820)) | (1 << (mysqlParser.ST_ISSIMPLE - 820)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINEFROMWKB - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (mysqlParser.ST_NUMPOINTS - 820)) | (1 << (mysqlParser.ST_OVERLAPS - 820)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 820)) | (1 << (mysqlParser.ST_POINTFROMWKB - 820)) | (1 << (mysqlParser.ST_POINTN - 820)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYFROMWKB - 820)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (mysqlParser.ST_SRID - 820)) | (1 << (mysqlParser.ST_STARTPOINT - 820)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (mysqlParser.ST_TOUCHES - 820)) | (1 << (mysqlParser.ST_UNION - 820)) | (1 << (mysqlParser.ST_WITHIN - 820)) | (1 << (mysqlParser.ST_X - 820)) | (1 << (mysqlParser.ST_Y - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (mysqlParser.SUBDATE - 884)) | (1 << (mysqlParser.SUBSTRING_INDEX - 884)) | (1 << (mysqlParser.SUBTIME - 884)) | (1 << (mysqlParser.SYSTEM_USER - 884)) | (1 << (mysqlParser.TAN - 884)) | (1 << (mysqlParser.TIMEDIFF - 884)) | (1 << (mysqlParser.TIMESTAMPADD - 884)) | (1 << (mysqlParser.TIMESTAMPDIFF - 884)) | (1 << (mysqlParser.TIME_FORMAT - 884)) | (1 << (mysqlParser.TIME_TO_SEC - 884)) | (1 << (mysqlParser.TOUCHES - 884)) | (1 << (mysqlParser.TO_BASE64 - 884)) | (1 << (mysqlParser.TO_DAYS - 884)) | (1 << (mysqlParser.TO_SECONDS - 884)) | (1 << (mysqlParser.UCASE - 884)) | (1 << (mysqlParser.UNCOMPRESS - 884)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (mysqlParser.UNHEX - 884)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 884)) | (1 << (mysqlParser.UPDATEXML - 884)) | (1 << (mysqlParser.UPPER - 884)) | (1 << (mysqlParser.UUID - 884)) | (1 << (mysqlParser.UUID_SHORT - 884)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (mysqlParser.VERSION - 884)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (mysqlParser.WEEKDAY - 884)) | (1 << (mysqlParser.WEEKOFYEAR - 884)) | (1 << (mysqlParser.WEIGHT_STRING - 884)) | (1 << (mysqlParser.WITHIN - 884)) | (1 << (mysqlParser.YEARWEEK - 884)) | (1 << (mysqlParser.Y_FUNCTION - 884)) | (1 << (mysqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 954)) & ~0x3f) == 0 and ((1 << (_la - 954)) & ((1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 954)) | (1 << (mysqlParser.ID - 954)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 954)))) != 0):
                    self.state = 1484
                    self.uid()


                self.state = 1488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.USING:
                    self.state = 1487
                    self.indexType()


                self.state = 1490
                self.indexColumnNames()
                self.state = 1494
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.USING or _la==mysqlParser.WITH or _la==mysqlParser.COMMENT or _la==mysqlParser.KEY_BLOCK_SIZE:
                    self.state = 1491
                    self.indexOption()
                    self.state = 1496
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [mysqlParser.FULLTEXT, mysqlParser.SPATIAL]:
                localctx = mysqlParser.SpecialIndexDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1497
                _la = self._input.LA(1)
                if not(_la==mysqlParser.FULLTEXT or _la==mysqlParser.SPATIAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.INDEX or _la==mysqlParser.KEY:
                    self.state = 1498
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==mysqlParser.INDEX or _la==mysqlParser.KEY):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.LEFT or _la==mysqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (mysqlParser.DATE - 180)) | (1 << (mysqlParser.TIME - 180)) | (1 << (mysqlParser.TIMESTAMP - 180)) | (1 << (mysqlParser.DATETIME - 180)) | (1 << (mysqlParser.YEAR - 180)) | (1 << (mysqlParser.TEXT - 180)) | (1 << (mysqlParser.ENUM - 180)) | (1 << (mysqlParser.COUNT - 180)) | (1 << (mysqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (mysqlParser.ACCOUNT - 244)) | (1 << (mysqlParser.ACTION - 244)) | (1 << (mysqlParser.AFTER - 244)) | (1 << (mysqlParser.AGGREGATE - 244)) | (1 << (mysqlParser.ALGORITHM - 244)) | (1 << (mysqlParser.ANY - 244)) | (1 << (mysqlParser.AT - 244)) | (1 << (mysqlParser.AUTHORS - 244)) | (1 << (mysqlParser.AUTOCOMMIT - 244)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (mysqlParser.AUTO_INCREMENT - 244)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 244)) | (1 << (mysqlParser.BEGIN - 244)) | (1 << (mysqlParser.BINLOG - 244)) | (1 << (mysqlParser.BIT - 244)) | (1 << (mysqlParser.BLOCK - 244)) | (1 << (mysqlParser.BTREE - 244)) | (1 << (mysqlParser.CASCADED - 244)) | (1 << (mysqlParser.CHAIN - 244)) | (1 << (mysqlParser.CHANNEL - 244)) | (1 << (mysqlParser.CHECKSUM - 244)) | (1 << (mysqlParser.CIPHER - 244)) | (1 << (mysqlParser.CLIENT - 244)) | (1 << (mysqlParser.COALESCE - 244)) | (1 << (mysqlParser.CODE - 244)) | (1 << (mysqlParser.COLUMNS - 244)) | (1 << (mysqlParser.COLUMN_FORMAT - 244)) | (1 << (mysqlParser.COMMENT - 244)) | (1 << (mysqlParser.COMMIT - 244)) | (1 << (mysqlParser.COMPACT - 244)) | (1 << (mysqlParser.COMPLETION - 244)) | (1 << (mysqlParser.COMPRESSED - 244)) | (1 << (mysqlParser.COMPRESSION - 244)) | (1 << (mysqlParser.CONCURRENT - 244)) | (1 << (mysqlParser.CONNECTION - 244)) | (1 << (mysqlParser.CONSISTENT - 244)) | (1 << (mysqlParser.CONTAINS - 244)) | (1 << (mysqlParser.CONTEXT - 244)) | (1 << (mysqlParser.CONTRIBUTORS - 244)) | (1 << (mysqlParser.COPY - 244)) | (1 << (mysqlParser.CPU - 244)) | (1 << (mysqlParser.DATA - 244)) | (1 << (mysqlParser.DATAFILE - 244)) | (1 << (mysqlParser.DEALLOCATE - 244)) | (1 << (mysqlParser.DEFAULT_AUTH - 244)) | (1 << (mysqlParser.DEFINER - 244)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 244)) | (1 << (mysqlParser.DIRECTORY - 244)) | (1 << (mysqlParser.DISABLE - 244)) | (1 << (mysqlParser.DISCARD - 244)) | (1 << (mysqlParser.DISK - 244)) | (1 << (mysqlParser.DO - 244)) | (1 << (mysqlParser.DUMPFILE - 244)) | (1 << (mysqlParser.DUPLICATE - 244)) | (1 << (mysqlParser.DYNAMIC - 244)) | (1 << (mysqlParser.ENABLE - 244)) | (1 << (mysqlParser.ENCRYPTION - 244)) | (1 << (mysqlParser.ENDS - 244)) | (1 << (mysqlParser.ENGINE - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (mysqlParser.ENGINES - 308)) | (1 << (mysqlParser.ERROR - 308)) | (1 << (mysqlParser.ERRORS - 308)) | (1 << (mysqlParser.ESCAPE - 308)) | (1 << (mysqlParser.EVEN - 308)) | (1 << (mysqlParser.EVENT - 308)) | (1 << (mysqlParser.EVENTS - 308)) | (1 << (mysqlParser.EVERY - 308)) | (1 << (mysqlParser.EXCHANGE - 308)) | (1 << (mysqlParser.EXCLUSIVE - 308)) | (1 << (mysqlParser.EXPIRE - 308)) | (1 << (mysqlParser.EXTENT_SIZE - 308)) | (1 << (mysqlParser.FAULTS - 308)) | (1 << (mysqlParser.FIELDS - 308)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (mysqlParser.FILTER - 308)) | (1 << (mysqlParser.FIRST - 308)) | (1 << (mysqlParser.FIXED - 308)) | (1 << (mysqlParser.FOLLOWS - 308)) | (1 << (mysqlParser.FULL - 308)) | (1 << (mysqlParser.FUNCTION - 308)) | (1 << (mysqlParser.GLOBAL - 308)) | (1 << (mysqlParser.GRANTS - 308)) | (1 << (mysqlParser.GROUP_REPLICATION - 308)) | (1 << (mysqlParser.HASH - 308)) | (1 << (mysqlParser.HOST - 308)) | (1 << (mysqlParser.IDENTIFIED - 308)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (mysqlParser.IMPORT - 308)) | (1 << (mysqlParser.INDEXES - 308)) | (1 << (mysqlParser.INITIAL_SIZE - 308)) | (1 << (mysqlParser.INPLACE - 308)) | (1 << (mysqlParser.INSERT_METHOD - 308)) | (1 << (mysqlParser.INSTANCE - 308)) | (1 << (mysqlParser.INVOKER - 308)) | (1 << (mysqlParser.IO - 308)) | (1 << (mysqlParser.IO_THREAD - 308)) | (1 << (mysqlParser.IPC - 308)) | (1 << (mysqlParser.ISOLATION - 308)) | (1 << (mysqlParser.ISSUER - 308)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (mysqlParser.LANGUAGE - 308)) | (1 << (mysqlParser.LAST - 308)) | (1 << (mysqlParser.LEAVES - 308)) | (1 << (mysqlParser.LESS - 308)) | (1 << (mysqlParser.LEVEL - 308)) | (1 << (mysqlParser.LIST - 308)) | (1 << (mysqlParser.LOCAL - 308)) | (1 << (mysqlParser.LOGFILE - 308)) | (1 << (mysqlParser.LOGS - 308)) | (1 << (mysqlParser.MASTER - 308)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 308)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (mysqlParser.MASTER_DELAY - 372)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (mysqlParser.MASTER_HOST - 372)) | (1 << (mysqlParser.MASTER_LOG_FILE - 372)) | (1 << (mysqlParser.MASTER_LOG_POS - 372)) | (1 << (mysqlParser.MASTER_PASSWORD - 372)) | (1 << (mysqlParser.MASTER_PORT - 372)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (mysqlParser.MASTER_SSL - 372)) | (1 << (mysqlParser.MASTER_SSL_CA - 372)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_CERT - 372)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (mysqlParser.MASTER_SSL_CRL - 372)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_KEY - 372)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 372)) | (1 << (mysqlParser.MASTER_USER - 372)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_ROWS - 372)) | (1 << (mysqlParser.MAX_SIZE - 372)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (mysqlParser.MERGE - 372)) | (1 << (mysqlParser.MID - 372)) | (1 << (mysqlParser.MIGRATE - 372)) | (1 << (mysqlParser.MIN_ROWS - 372)) | (1 << (mysqlParser.MODIFY - 372)) | (1 << (mysqlParser.MUTEX - 372)) | (1 << (mysqlParser.MYSQL - 372)) | (1 << (mysqlParser.NAME - 372)) | (1 << (mysqlParser.NAMES - 372)) | (1 << (mysqlParser.NCHAR - 372)) | (1 << (mysqlParser.NEVER - 372)) | (1 << (mysqlParser.NO - 372)) | (1 << (mysqlParser.NODEGROUP - 372)) | (1 << (mysqlParser.NONE - 372)) | (1 << (mysqlParser.OFFLINE - 372)) | (1 << (mysqlParser.OFFSET - 372)) | (1 << (mysqlParser.OJ - 372)) | (1 << (mysqlParser.OLD_PASSWORD - 372)) | (1 << (mysqlParser.ONE - 372)) | (1 << (mysqlParser.ONLINE - 372)) | (1 << (mysqlParser.ONLY - 372)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 372)) | (1 << (mysqlParser.OPTIONS - 372)) | (1 << (mysqlParser.OWNER - 372)) | (1 << (mysqlParser.PACK_KEYS - 372)) | (1 << (mysqlParser.PAGE - 372)) | (1 << (mysqlParser.PARSER - 372)) | (1 << (mysqlParser.PARTIAL - 372)) | (1 << (mysqlParser.PARTITIONING - 372)) | (1 << (mysqlParser.PARTITIONS - 372)) | (1 << (mysqlParser.PASSWORD - 372)) | (1 << (mysqlParser.PHASE - 372)) | (1 << (mysqlParser.PLUGIN_DIR - 372)) | (1 << (mysqlParser.PLUGINS - 372)) | (1 << (mysqlParser.PORT - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (mysqlParser.PRECEDES - 436)) | (1 << (mysqlParser.PREPARE - 436)) | (1 << (mysqlParser.PRESERVE - 436)) | (1 << (mysqlParser.PREV - 436)) | (1 << (mysqlParser.PROCESSLIST - 436)) | (1 << (mysqlParser.PROFILE - 436)) | (1 << (mysqlParser.PROFILES - 436)) | (1 << (mysqlParser.PROXY - 436)) | (1 << (mysqlParser.QUERY - 436)) | (1 << (mysqlParser.QUICK - 436)) | (1 << (mysqlParser.REBUILD - 436)) | (1 << (mysqlParser.RECOVER - 436)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (mysqlParser.REDUNDANT - 436)) | (1 << (mysqlParser.RELAY_LOG_FILE - 436)) | (1 << (mysqlParser.RELAY_LOG_POS - 436)) | (1 << (mysqlParser.RELAYLOG - 436)) | (1 << (mysqlParser.REMOVE - 436)) | (1 << (mysqlParser.REORGANIZE - 436)) | (1 << (mysqlParser.REPAIR - 436)) | (1 << (mysqlParser.REPLICATE_DO_DB - 436)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATION - 436)) | (1 << (mysqlParser.RESUME - 436)) | (1 << (mysqlParser.RETURNS - 436)) | (1 << (mysqlParser.ROLLBACK - 436)) | (1 << (mysqlParser.ROLLUP - 436)) | (1 << (mysqlParser.ROTATE - 436)) | (1 << (mysqlParser.ROW - 436)) | (1 << (mysqlParser.ROWS - 436)) | (1 << (mysqlParser.ROW_FORMAT - 436)) | (1 << (mysqlParser.SAVEPOINT - 436)) | (1 << (mysqlParser.SCHEDULE - 436)) | (1 << (mysqlParser.SECURITY - 436)) | (1 << (mysqlParser.SERVER - 436)) | (1 << (mysqlParser.SESSION - 436)) | (1 << (mysqlParser.SHARE - 436)) | (1 << (mysqlParser.SHARED - 436)) | (1 << (mysqlParser.SIGNED - 436)) | (1 << (mysqlParser.SIMPLE - 436)) | (1 << (mysqlParser.SLAVE - 436)) | (1 << (mysqlParser.SNAPSHOT - 436)) | (1 << (mysqlParser.SOCKET - 436)) | (1 << (mysqlParser.SOME - 436)) | (1 << (mysqlParser.SOUNDS - 436)) | (1 << (mysqlParser.SOURCE - 436)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (mysqlParser.SQL_CACHE - 436)) | (1 << (mysqlParser.SQL_NO_CACHE - 436)) | (1 << (mysqlParser.SQL_THREAD - 436)) | (1 << (mysqlParser.START - 436)) | (1 << (mysqlParser.STARTS - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (mysqlParser.STATS_AUTO_RECALC - 500)) | (1 << (mysqlParser.STATS_PERSISTENT - 500)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (mysqlParser.STATUS - 500)) | (1 << (mysqlParser.STOP - 500)) | (1 << (mysqlParser.STORAGE - 500)) | (1 << (mysqlParser.STRING - 500)) | (1 << (mysqlParser.SUBJECT - 500)) | (1 << (mysqlParser.SUBPARTITION - 500)) | (1 << (mysqlParser.SUBPARTITIONS - 500)) | (1 << (mysqlParser.SUSPEND - 500)) | (1 << (mysqlParser.SWAPS - 500)) | (1 << (mysqlParser.SWITCHES - 500)) | (1 << (mysqlParser.TABLESPACE - 500)) | (1 << (mysqlParser.TEMPORARY - 500)) | (1 << (mysqlParser.TEMPTABLE - 500)) | (1 << (mysqlParser.THAN - 500)) | (1 << (mysqlParser.TRANSACTION - 500)) | (1 << (mysqlParser.TRUNCATE - 500)) | (1 << (mysqlParser.UNDEFINED - 500)) | (1 << (mysqlParser.UNDOFILE - 500)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (mysqlParser.UNKNOWN - 500)) | (1 << (mysqlParser.UPGRADE - 500)) | (1 << (mysqlParser.USER - 500)) | (1 << (mysqlParser.VALIDATION - 500)) | (1 << (mysqlParser.VALUE - 500)) | (1 << (mysqlParser.VARIABLES - 500)) | (1 << (mysqlParser.VIEW - 500)) | (1 << (mysqlParser.WAIT - 500)) | (1 << (mysqlParser.WARNINGS - 500)) | (1 << (mysqlParser.WITHOUT - 500)) | (1 << (mysqlParser.WORK - 500)) | (1 << (mysqlParser.WRAPPER - 500)) | (1 << (mysqlParser.X509 - 500)) | (1 << (mysqlParser.XA - 500)) | (1 << (mysqlParser.XML - 500)) | (1 << (mysqlParser.QUARTER - 500)) | (1 << (mysqlParser.MONTH - 500)) | (1 << (mysqlParser.DAY - 500)) | (1 << (mysqlParser.HOUR - 500)) | (1 << (mysqlParser.MINUTE - 500)) | (1 << (mysqlParser.WEEK - 500)) | (1 << (mysqlParser.SECOND - 500)) | (1 << (mysqlParser.MICROSECOND - 500)) | (1 << (mysqlParser.TABLES - 500)) | (1 << (mysqlParser.ROUTINE - 500)) | (1 << (mysqlParser.EXECUTE - 500)) | (1 << (mysqlParser.FILE - 500)) | (1 << (mysqlParser.PROCESS - 500)) | (1 << (mysqlParser.RELOAD - 500)) | (1 << (mysqlParser.SHUTDOWN - 500)) | (1 << (mysqlParser.SUPER - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (mysqlParser.PRIVILEGES - 564)) | (1 << (mysqlParser.ARMSCII8 - 564)) | (1 << (mysqlParser.ASCII - 564)) | (1 << (mysqlParser.BIG5 - 564)) | (1 << (mysqlParser.CP1250 - 564)) | (1 << (mysqlParser.CP1251 - 564)) | (1 << (mysqlParser.CP1256 - 564)) | (1 << (mysqlParser.CP1257 - 564)) | (1 << (mysqlParser.CP850 - 564)) | (1 << (mysqlParser.CP852 - 564)) | (1 << (mysqlParser.CP866 - 564)) | (1 << (mysqlParser.CP932 - 564)) | (1 << (mysqlParser.DEC8 - 564)) | (1 << (mysqlParser.EUCJPMS - 564)) | (1 << (mysqlParser.EUCKR - 564)) | (1 << (mysqlParser.GB2312 - 564)) | (1 << (mysqlParser.GBK - 564)) | (1 << (mysqlParser.GEOSTD8 - 564)) | (1 << (mysqlParser.GREEK - 564)) | (1 << (mysqlParser.HEBREW - 564)) | (1 << (mysqlParser.HP8 - 564)) | (1 << (mysqlParser.KEYBCS2 - 564)) | (1 << (mysqlParser.KOI8R - 564)) | (1 << (mysqlParser.KOI8U - 564)) | (1 << (mysqlParser.LATIN1 - 564)) | (1 << (mysqlParser.LATIN2 - 564)) | (1 << (mysqlParser.LATIN5 - 564)) | (1 << (mysqlParser.LATIN7 - 564)) | (1 << (mysqlParser.MACCE - 564)) | (1 << (mysqlParser.MACROMAN - 564)) | (1 << (mysqlParser.SJIS - 564)) | (1 << (mysqlParser.SWE7 - 564)) | (1 << (mysqlParser.TIS620 - 564)) | (1 << (mysqlParser.UCS2 - 564)) | (1 << (mysqlParser.UJIS - 564)) | (1 << (mysqlParser.UTF16 - 564)) | (1 << (mysqlParser.UTF16LE - 564)) | (1 << (mysqlParser.UTF32 - 564)) | (1 << (mysqlParser.UTF8 - 564)) | (1 << (mysqlParser.UTF8MB3 - 564)) | (1 << (mysqlParser.UTF8MB4 - 564)) | (1 << (mysqlParser.ARCHIVE - 564)) | (1 << (mysqlParser.BLACKHOLE - 564)) | (1 << (mysqlParser.CSV - 564)) | (1 << (mysqlParser.FEDERATED - 564)) | (1 << (mysqlParser.INNODB - 564)) | (1 << (mysqlParser.MEMORY - 564)) | (1 << (mysqlParser.MRG_MYISAM - 564)) | (1 << (mysqlParser.MYISAM - 564)) | (1 << (mysqlParser.NDB - 564)) | (1 << (mysqlParser.NDBCLUSTER - 564)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (mysqlParser.REPEATABLE - 564)) | (1 << (mysqlParser.COMMITTED - 564)) | (1 << (mysqlParser.UNCOMMITTED - 564)) | (1 << (mysqlParser.SERIALIZABLE - 564)) | (1 << (mysqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (mysqlParser.LINESTRING - 564)) | (1 << (mysqlParser.MULTILINESTRING - 564)) | (1 << (mysqlParser.MULTIPOINT - 564)) | (1 << (mysqlParser.MULTIPOLYGON - 564)) | (1 << (mysqlParser.POINT - 564)) | (1 << (mysqlParser.POLYGON - 564)) | (1 << (mysqlParser.ABS - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (mysqlParser.ACOS - 628)) | (1 << (mysqlParser.ADDDATE - 628)) | (1 << (mysqlParser.ADDTIME - 628)) | (1 << (mysqlParser.AES_DECRYPT - 628)) | (1 << (mysqlParser.AES_ENCRYPT - 628)) | (1 << (mysqlParser.AREA - 628)) | (1 << (mysqlParser.ASBINARY - 628)) | (1 << (mysqlParser.ASIN - 628)) | (1 << (mysqlParser.ASTEXT - 628)) | (1 << (mysqlParser.ASWKB - 628)) | (1 << (mysqlParser.ASWKT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (mysqlParser.ATAN - 628)) | (1 << (mysqlParser.ATAN2 - 628)) | (1 << (mysqlParser.BENCHMARK - 628)) | (1 << (mysqlParser.BIN - 628)) | (1 << (mysqlParser.BIT_COUNT - 628)) | (1 << (mysqlParser.BIT_LENGTH - 628)) | (1 << (mysqlParser.BUFFER - 628)) | (1 << (mysqlParser.CEIL - 628)) | (1 << (mysqlParser.CEILING - 628)) | (1 << (mysqlParser.CENTROID - 628)) | (1 << (mysqlParser.CHARACTER_LENGTH - 628)) | (1 << (mysqlParser.CHARSET - 628)) | (1 << (mysqlParser.CHAR_LENGTH - 628)) | (1 << (mysqlParser.COERCIBILITY - 628)) | (1 << (mysqlParser.COLLATION - 628)) | (1 << (mysqlParser.COMPRESS - 628)) | (1 << (mysqlParser.CONCAT - 628)) | (1 << (mysqlParser.CONCAT_WS - 628)) | (1 << (mysqlParser.CONNECTION_ID - 628)) | (1 << (mysqlParser.CONV - 628)) | (1 << (mysqlParser.CONVERT_TZ - 628)) | (1 << (mysqlParser.COS - 628)) | (1 << (mysqlParser.COT - 628)) | (1 << (mysqlParser.CRC32 - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (mysqlParser.CREATE_DIGEST - 628)) | (1 << (mysqlParser.CROSSES - 628)) | (1 << (mysqlParser.DATEDIFF - 628)) | (1 << (mysqlParser.DATE_FORMAT - 628)) | (1 << (mysqlParser.DAYNAME - 628)) | (1 << (mysqlParser.DAYOFMONTH - 628)) | (1 << (mysqlParser.DAYOFWEEK - 628)) | (1 << (mysqlParser.DAYOFYEAR - 628)) | (1 << (mysqlParser.DECODE - 628)) | (1 << (mysqlParser.DEGREES - 628)) | (1 << (mysqlParser.DES_DECRYPT - 628)) | (1 << (mysqlParser.DES_ENCRYPT - 628)) | (1 << (mysqlParser.DIMENSION - 628)) | (1 << (mysqlParser.DISJOINT - 628)) | (1 << (mysqlParser.ELT - 628)) | (1 << (mysqlParser.ENCODE - 628)) | (1 << (mysqlParser.ENCRYPT - 628)) | (1 << (mysqlParser.ENDPOINT - 628)) | (1 << (mysqlParser.ENVELOPE - 628)) | (1 << (mysqlParser.EQUALS - 628)) | (1 << (mysqlParser.EXP - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (mysqlParser.EXPORT_SET - 692)) | (1 << (mysqlParser.EXTERIORRING - 692)) | (1 << (mysqlParser.EXTRACTVALUE - 692)) | (1 << (mysqlParser.FIELD - 692)) | (1 << (mysqlParser.FIND_IN_SET - 692)) | (1 << (mysqlParser.FLOOR - 692)) | (1 << (mysqlParser.FORMAT - 692)) | (1 << (mysqlParser.FOUND_ROWS - 692)) | (1 << (mysqlParser.FROM_BASE64 - 692)) | (1 << (mysqlParser.FROM_DAYS - 692)) | (1 << (mysqlParser.FROM_UNIXTIME - 692)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYN - 692)) | (1 << (mysqlParser.GEOMETRYTYPE - 692)) | (1 << (mysqlParser.GEOMFROMTEXT - 692)) | (1 << (mysqlParser.GEOMFROMWKB - 692)) | (1 << (mysqlParser.GET_FORMAT - 692)) | (1 << (mysqlParser.GET_LOCK - 692)) | (1 << (mysqlParser.GLENGTH - 692)) | (1 << (mysqlParser.GREATEST - 692)) | (1 << (mysqlParser.GTID_SUBSET - 692)) | (1 << (mysqlParser.GTID_SUBTRACT - 692)) | (1 << (mysqlParser.HEX - 692)) | (1 << (mysqlParser.IFNULL - 692)) | (1 << (mysqlParser.INET6_ATON - 692)) | (1 << (mysqlParser.INET6_NTOA - 692)) | (1 << (mysqlParser.INET_ATON - 692)) | (1 << (mysqlParser.INET_NTOA - 692)) | (1 << (mysqlParser.INSTR - 692)) | (1 << (mysqlParser.INTERIORRINGN - 692)) | (1 << (mysqlParser.INTERSECTS - 692)) | (1 << (mysqlParser.ISCLOSED - 692)) | (1 << (mysqlParser.ISEMPTY - 692)) | (1 << (mysqlParser.ISNULL - 692)) | (1 << (mysqlParser.ISSIMPLE - 692)) | (1 << (mysqlParser.IS_FREE_LOCK - 692)) | (1 << (mysqlParser.IS_IPV4 - 692)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 692)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 692)) | (1 << (mysqlParser.IS_IPV6 - 692)) | (1 << (mysqlParser.IS_USED_LOCK - 692)) | (1 << (mysqlParser.LAST_INSERT_ID - 692)) | (1 << (mysqlParser.LCASE - 692)) | (1 << (mysqlParser.LEAST - 692)) | (1 << (mysqlParser.LENGTH - 692)) | (1 << (mysqlParser.LINEFROMTEXT - 692)) | (1 << (mysqlParser.LINEFROMWKB - 692)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 692)) | (1 << (mysqlParser.LN - 692)) | (1 << (mysqlParser.LOAD_FILE - 692)) | (1 << (mysqlParser.LOCATE - 692)) | (1 << (mysqlParser.LOG - 692)) | (1 << (mysqlParser.LOG10 - 692)) | (1 << (mysqlParser.LOG2 - 692)) | (1 << (mysqlParser.LOWER - 692)) | (1 << (mysqlParser.LPAD - 692)) | (1 << (mysqlParser.LTRIM - 692)) | (1 << (mysqlParser.MAKEDATE - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (mysqlParser.MAKETIME - 756)) | (1 << (mysqlParser.MAKE_SET - 756)) | (1 << (mysqlParser.MASTER_POS_WAIT - 756)) | (1 << (mysqlParser.MBRCONTAINS - 756)) | (1 << (mysqlParser.MBRDISJOINT - 756)) | (1 << (mysqlParser.MBREQUAL - 756)) | (1 << (mysqlParser.MBRINTERSECTS - 756)) | (1 << (mysqlParser.MBROVERLAPS - 756)) | (1 << (mysqlParser.MBRTOUCHES - 756)) | (1 << (mysqlParser.MBRWITHIN - 756)) | (1 << (mysqlParser.MD5 - 756)) | (1 << (mysqlParser.MLINEFROMTEXT - 756)) | (1 << (mysqlParser.MLINEFROMWKB - 756)) | (1 << (mysqlParser.MONTHNAME - 756)) | (1 << (mysqlParser.MPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MPOINTFROMWKB - 756)) | (1 << (mysqlParser.MPOLYFROMTEXT - 756)) | (1 << (mysqlParser.MPOLYFROMWKB - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (mysqlParser.NAME_CONST - 756)) | (1 << (mysqlParser.NULLIF - 756)) | (1 << (mysqlParser.NUMGEOMETRIES - 756)) | (1 << (mysqlParser.NUMINTERIORRINGS - 756)) | (1 << (mysqlParser.NUMPOINTS - 756)) | (1 << (mysqlParser.OCT - 756)) | (1 << (mysqlParser.OCTET_LENGTH - 756)) | (1 << (mysqlParser.ORD - 756)) | (1 << (mysqlParser.OVERLAPS - 756)) | (1 << (mysqlParser.PERIOD_ADD - 756)) | (1 << (mysqlParser.PERIOD_DIFF - 756)) | (1 << (mysqlParser.PI - 756)) | (1 << (mysqlParser.POINTFROMTEXT - 756)) | (1 << (mysqlParser.POINTFROMWKB - 756)) | (1 << (mysqlParser.POINTN - 756)) | (1 << (mysqlParser.POLYFROMTEXT - 756)) | (1 << (mysqlParser.POLYFROMWKB - 756)) | (1 << (mysqlParser.POLYGONFROMTEXT - 756)) | (1 << (mysqlParser.POLYGONFROMWKB - 756)) | (1 << (mysqlParser.POW - 756)) | (1 << (mysqlParser.POWER - 756)) | (1 << (mysqlParser.QUOTE - 756)) | (1 << (mysqlParser.RADIANS - 756)) | (1 << (mysqlParser.RAND - 756)) | (1 << (mysqlParser.RANDOM_BYTES - 756)) | (1 << (mysqlParser.RELEASE_LOCK - 756)) | (1 << (mysqlParser.REVERSE - 756)) | (1 << (mysqlParser.ROUND - 756)) | (1 << (mysqlParser.ROW_COUNT - 756)) | (1 << (mysqlParser.RPAD - 756)) | (1 << (mysqlParser.RTRIM - 756)) | (1 << (mysqlParser.SEC_TO_TIME - 756)) | (1 << (mysqlParser.SESSION_USER - 756)) | (1 << (mysqlParser.SHA - 756)) | (1 << (mysqlParser.SHA1 - 756)) | (1 << (mysqlParser.SHA2 - 756)) | (1 << (mysqlParser.SIGN - 756)) | (1 << (mysqlParser.SIN - 756)) | (1 << (mysqlParser.SLEEP - 756)) | (1 << (mysqlParser.SOUNDEX - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (mysqlParser.SQRT - 820)) | (1 << (mysqlParser.SRID - 820)) | (1 << (mysqlParser.STARTPOINT - 820)) | (1 << (mysqlParser.STRCMP - 820)) | (1 << (mysqlParser.STR_TO_DATE - 820)) | (1 << (mysqlParser.ST_AREA - 820)) | (1 << (mysqlParser.ST_ASBINARY - 820)) | (1 << (mysqlParser.ST_ASTEXT - 820)) | (1 << (mysqlParser.ST_ASWKB - 820)) | (1 << (mysqlParser.ST_ASWKT - 820)) | (1 << (mysqlParser.ST_BUFFER - 820)) | (1 << (mysqlParser.ST_CENTROID - 820)) | (1 << (mysqlParser.ST_CONTAINS - 820)) | (1 << (mysqlParser.ST_CROSSES - 820)) | (1 << (mysqlParser.ST_DIFFERENCE - 820)) | (1 << (mysqlParser.ST_DIMENSION - 820)) | (1 << (mysqlParser.ST_DISJOINT - 820)) | (1 << (mysqlParser.ST_DISTANCE - 820)) | (1 << (mysqlParser.ST_ENDPOINT - 820)) | (1 << (mysqlParser.ST_ENVELOPE - 820)) | (1 << (mysqlParser.ST_EQUALS - 820)) | (1 << (mysqlParser.ST_EXTERIORRING - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYN - 820)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 820)) | (1 << (mysqlParser.ST_INTERIORRINGN - 820)) | (1 << (mysqlParser.ST_INTERSECTION - 820)) | (1 << (mysqlParser.ST_INTERSECTS - 820)) | (1 << (mysqlParser.ST_ISCLOSED - 820)) | (1 << (mysqlParser.ST_ISEMPTY - 820)) | (1 << (mysqlParser.ST_ISSIMPLE - 820)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINEFROMWKB - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (mysqlParser.ST_NUMPOINTS - 820)) | (1 << (mysqlParser.ST_OVERLAPS - 820)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 820)) | (1 << (mysqlParser.ST_POINTFROMWKB - 820)) | (1 << (mysqlParser.ST_POINTN - 820)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYFROMWKB - 820)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (mysqlParser.ST_SRID - 820)) | (1 << (mysqlParser.ST_STARTPOINT - 820)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (mysqlParser.ST_TOUCHES - 820)) | (1 << (mysqlParser.ST_UNION - 820)) | (1 << (mysqlParser.ST_WITHIN - 820)) | (1 << (mysqlParser.ST_X - 820)) | (1 << (mysqlParser.ST_Y - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (mysqlParser.SUBDATE - 884)) | (1 << (mysqlParser.SUBSTRING_INDEX - 884)) | (1 << (mysqlParser.SUBTIME - 884)) | (1 << (mysqlParser.SYSTEM_USER - 884)) | (1 << (mysqlParser.TAN - 884)) | (1 << (mysqlParser.TIMEDIFF - 884)) | (1 << (mysqlParser.TIMESTAMPADD - 884)) | (1 << (mysqlParser.TIMESTAMPDIFF - 884)) | (1 << (mysqlParser.TIME_FORMAT - 884)) | (1 << (mysqlParser.TIME_TO_SEC - 884)) | (1 << (mysqlParser.TOUCHES - 884)) | (1 << (mysqlParser.TO_BASE64 - 884)) | (1 << (mysqlParser.TO_DAYS - 884)) | (1 << (mysqlParser.TO_SECONDS - 884)) | (1 << (mysqlParser.UCASE - 884)) | (1 << (mysqlParser.UNCOMPRESS - 884)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (mysqlParser.UNHEX - 884)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 884)) | (1 << (mysqlParser.UPDATEXML - 884)) | (1 << (mysqlParser.UPPER - 884)) | (1 << (mysqlParser.UUID - 884)) | (1 << (mysqlParser.UUID_SHORT - 884)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (mysqlParser.VERSION - 884)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (mysqlParser.WEEKDAY - 884)) | (1 << (mysqlParser.WEEKOFYEAR - 884)) | (1 << (mysqlParser.WEIGHT_STRING - 884)) | (1 << (mysqlParser.WITHIN - 884)) | (1 << (mysqlParser.YEARWEEK - 884)) | (1 << (mysqlParser.Y_FUNCTION - 884)) | (1 << (mysqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 954)) & ~0x3f) == 0 and ((1 << (_la - 954)) & ((1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 954)) | (1 << (mysqlParser.ID - 954)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 954)))) != 0):
                    self.state = 1501
                    self.uid()


                self.state = 1504
                self.indexColumnNames()
                self.state = 1508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.USING or _la==mysqlParser.WITH or _la==mysqlParser.COMMENT or _la==mysqlParser.KEY_BLOCK_SIZE:
                    self.state = 1505
                    self.indexOption()
                    self.state = 1510
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_tableOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableOptionEngineContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ENGINE(self):
            return self.getToken(mysqlParser.ENGINE, 0)
        def engineName(self):
            return self.getTypedRuleContext(mysqlParser.EngineNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionEngine" ):
                listener.enterTableOptionEngine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionEngine" ):
                listener.exitTableOptionEngine(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionEngine" ):
                return visitor.visitTableOptionEngine(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionMaxRowsContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MAX_ROWS(self):
            return self.getToken(mysqlParser.MAX_ROWS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionMaxRows" ):
                listener.enterTableOptionMaxRows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionMaxRows" ):
                listener.exitTableOptionMaxRows(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionMaxRows" ):
                return visitor.visitTableOptionMaxRows(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionCollateContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COLLATE(self):
            return self.getToken(mysqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(mysqlParser.CollationNameContext,0)

        def DEFAULT(self):
            return self.getToken(mysqlParser.DEFAULT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionCollate" ):
                listener.enterTableOptionCollate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionCollate" ):
                listener.exitTableOptionCollate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionCollate" ):
                return visitor.visitTableOptionCollate(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionPersistentContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STATS_PERSISTENT(self):
            return self.getToken(mysqlParser.STATS_PERSISTENT, 0)
        def DEFAULT(self):
            return self.getToken(mysqlParser.DEFAULT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionPersistent" ):
                listener.enterTableOptionPersistent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionPersistent" ):
                listener.exitTableOptionPersistent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionPersistent" ):
                return visitor.visitTableOptionPersistent(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionTablespaceContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLESPACE(self):
            return self.getToken(mysqlParser.TABLESPACE, 0)
        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)

        def tablespaceStorage(self):
            return self.getTypedRuleContext(mysqlParser.TablespaceStorageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionTablespace" ):
                listener.enterTableOptionTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionTablespace" ):
                listener.exitTableOptionTablespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionTablespace" ):
                return visitor.visitTableOptionTablespace(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionPackKeysContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PACK_KEYS(self):
            return self.getToken(mysqlParser.PACK_KEYS, 0)
        def DEFAULT(self):
            return self.getToken(mysqlParser.DEFAULT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionPackKeys" ):
                listener.enterTableOptionPackKeys(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionPackKeys" ):
                listener.exitTableOptionPackKeys(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionPackKeys" ):
                return visitor.visitTableOptionPackKeys(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionPasswordContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PASSWORD(self):
            return self.getToken(mysqlParser.PASSWORD, 0)
        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionPassword" ):
                listener.enterTableOptionPassword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionPassword" ):
                listener.exitTableOptionPassword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionPassword" ):
                return visitor.visitTableOptionPassword(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionUnionContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNION(self):
            return self.getToken(mysqlParser.UNION, 0)
        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.TableNameContext)
            else:
                return self.getTypedRuleContext(mysqlParser.TableNameContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionUnion" ):
                listener.enterTableOptionUnion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionUnion" ):
                listener.exitTableOptionUnion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionUnion" ):
                return visitor.visitTableOptionUnion(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionSamplePageContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STATS_SAMPLE_PAGES(self):
            return self.getToken(mysqlParser.STATS_SAMPLE_PAGES, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionSamplePage" ):
                listener.enterTableOptionSamplePage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionSamplePage" ):
                listener.exitTableOptionSamplePage(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionSamplePage" ):
                return visitor.visitTableOptionSamplePage(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionCharsetContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def charsetName(self):
            return self.getTypedRuleContext(mysqlParser.CharsetNameContext,0)

        def CHARACTER(self):
            return self.getToken(mysqlParser.CHARACTER, 0)
        def SET(self):
            return self.getToken(mysqlParser.SET, 0)
        def CHARSET(self):
            return self.getToken(mysqlParser.CHARSET, 0)
        def DEFAULT(self):
            return self.getToken(mysqlParser.DEFAULT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionCharset" ):
                listener.enterTableOptionCharset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionCharset" ):
                listener.exitTableOptionCharset(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionCharset" ):
                return visitor.visitTableOptionCharset(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionIndexDirectoryContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INDEX(self):
            return self.getToken(mysqlParser.INDEX, 0)
        def DIRECTORY(self):
            return self.getToken(mysqlParser.DIRECTORY, 0)
        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionIndexDirectory" ):
                listener.enterTableOptionIndexDirectory(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionIndexDirectory" ):
                listener.exitTableOptionIndexDirectory(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionIndexDirectory" ):
                return visitor.visitTableOptionIndexDirectory(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionKeyBlockSizeContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def KEY_BLOCK_SIZE(self):
            return self.getToken(mysqlParser.KEY_BLOCK_SIZE, 0)
        def fileSizeLiteral(self):
            return self.getTypedRuleContext(mysqlParser.FileSizeLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionKeyBlockSize" ):
                listener.enterTableOptionKeyBlockSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionKeyBlockSize" ):
                listener.exitTableOptionKeyBlockSize(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionKeyBlockSize" ):
                return visitor.visitTableOptionKeyBlockSize(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionEncryptionContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ENCRYPTION(self):
            return self.getToken(mysqlParser.ENCRYPTION, 0)
        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionEncryption" ):
                listener.enterTableOptionEncryption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionEncryption" ):
                listener.exitTableOptionEncryption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionEncryption" ):
                return visitor.visitTableOptionEncryption(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionDataDirectoryContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DATA(self):
            return self.getToken(mysqlParser.DATA, 0)
        def DIRECTORY(self):
            return self.getToken(mysqlParser.DIRECTORY, 0)
        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionDataDirectory" ):
                listener.enterTableOptionDataDirectory(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionDataDirectory" ):
                listener.exitTableOptionDataDirectory(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionDataDirectory" ):
                return visitor.visitTableOptionDataDirectory(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionRecalculationContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STATS_AUTO_RECALC(self):
            return self.getToken(mysqlParser.STATS_AUTO_RECALC, 0)
        def DEFAULT(self):
            return self.getToken(mysqlParser.DEFAULT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionRecalculation" ):
                listener.enterTableOptionRecalculation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionRecalculation" ):
                listener.exitTableOptionRecalculation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionRecalculation" ):
                return visitor.visitTableOptionRecalculation(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionAutoIncrementContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AUTO_INCREMENT(self):
            return self.getToken(mysqlParser.AUTO_INCREMENT, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionAutoIncrement" ):
                listener.enterTableOptionAutoIncrement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionAutoIncrement" ):
                listener.exitTableOptionAutoIncrement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionAutoIncrement" ):
                return visitor.visitTableOptionAutoIncrement(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionChecksumContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHECKSUM(self):
            return self.getToken(mysqlParser.CHECKSUM, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionChecksum" ):
                listener.enterTableOptionChecksum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionChecksum" ):
                listener.exitTableOptionChecksum(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionChecksum" ):
                return visitor.visitTableOptionChecksum(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionDelayContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DELAY_KEY_WRITE(self):
            return self.getToken(mysqlParser.DELAY_KEY_WRITE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionDelay" ):
                listener.enterTableOptionDelay(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionDelay" ):
                listener.exitTableOptionDelay(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionDelay" ):
                return visitor.visitTableOptionDelay(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionConnectionContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONNECTION(self):
            return self.getToken(mysqlParser.CONNECTION, 0)
        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionConnection" ):
                listener.enterTableOptionConnection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionConnection" ):
                listener.exitTableOptionConnection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionConnection" ):
                return visitor.visitTableOptionConnection(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionCommentContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(mysqlParser.COMMENT, 0)
        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionComment" ):
                listener.enterTableOptionComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionComment" ):
                listener.exitTableOptionComment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionComment" ):
                return visitor.visitTableOptionComment(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionAverageContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AVG_ROW_LENGTH(self):
            return self.getToken(mysqlParser.AVG_ROW_LENGTH, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionAverage" ):
                listener.enterTableOptionAverage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionAverage" ):
                listener.exitTableOptionAverage(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionAverage" ):
                return visitor.visitTableOptionAverage(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionRowFormatContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.TableOptionContext
            super().__init__(parser)
            self.rowFormat = None # Token
            self.copyFrom(ctx)

        def ROW_FORMAT(self):
            return self.getToken(mysqlParser.ROW_FORMAT, 0)
        def DEFAULT(self):
            return self.getToken(mysqlParser.DEFAULT, 0)
        def DYNAMIC(self):
            return self.getToken(mysqlParser.DYNAMIC, 0)
        def FIXED(self):
            return self.getToken(mysqlParser.FIXED, 0)
        def COMPRESSED(self):
            return self.getToken(mysqlParser.COMPRESSED, 0)
        def REDUNDANT(self):
            return self.getToken(mysqlParser.REDUNDANT, 0)
        def COMPACT(self):
            return self.getToken(mysqlParser.COMPACT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionRowFormat" ):
                listener.enterTableOptionRowFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionRowFormat" ):
                listener.exitTableOptionRowFormat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionRowFormat" ):
                return visitor.visitTableOptionRowFormat(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionCompressionContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMPRESSION(self):
            return self.getToken(mysqlParser.COMPRESSION, 0)
        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionCompression" ):
                listener.enterTableOptionCompression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionCompression" ):
                listener.exitTableOptionCompression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionCompression" ):
                return visitor.visitTableOptionCompression(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionInsertMethodContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.TableOptionContext
            super().__init__(parser)
            self.insertMethod = None # Token
            self.copyFrom(ctx)

        def INSERT_METHOD(self):
            return self.getToken(mysqlParser.INSERT_METHOD, 0)
        def NO(self):
            return self.getToken(mysqlParser.NO, 0)
        def FIRST(self):
            return self.getToken(mysqlParser.FIRST, 0)
        def LAST(self):
            return self.getToken(mysqlParser.LAST, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionInsertMethod" ):
                listener.enterTableOptionInsertMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionInsertMethod" ):
                listener.exitTableOptionInsertMethod(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionInsertMethod" ):
                return visitor.visitTableOptionInsertMethod(self)
            else:
                return visitor.visitChildren(self)


    class TableOptionMinRowsContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MIN_ROWS(self):
            return self.getToken(mysqlParser.MIN_ROWS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionMinRows" ):
                listener.enterTableOptionMinRows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionMinRows" ):
                listener.exitTableOptionMinRows(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableOptionMinRows" ):
                return visitor.visitTableOptionMinRows(self)
            else:
                return visitor.visitChildren(self)



    def tableOption(self):

        localctx = mysqlParser.TableOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_tableOption)
        self._la = 0 # Token type
        try:
            self.state = 1660
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                localctx = mysqlParser.TableOptionEngineContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1513
                self.match(mysqlParser.ENGINE)
                self.state = 1515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1514
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1517
                self.engineName()
                pass

            elif la_ == 2:
                localctx = mysqlParser.TableOptionAutoIncrementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1518
                self.match(mysqlParser.AUTO_INCREMENT)
                self.state = 1520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1519
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1522
                self.decimalLiteral()
                pass

            elif la_ == 3:
                localctx = mysqlParser.TableOptionAverageContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1523
                self.match(mysqlParser.AVG_ROW_LENGTH)
                self.state = 1525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1524
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1527
                self.decimalLiteral()
                pass

            elif la_ == 4:
                localctx = mysqlParser.TableOptionCharsetContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1529
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.DEFAULT:
                    self.state = 1528
                    self.match(mysqlParser.DEFAULT)


                self.state = 1534
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [mysqlParser.CHARACTER]:
                    self.state = 1531
                    self.match(mysqlParser.CHARACTER)
                    self.state = 1532
                    self.match(mysqlParser.SET)
                    pass
                elif token in [mysqlParser.CHARSET]:
                    self.state = 1533
                    self.match(mysqlParser.CHARSET)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1536
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1539
                self.charsetName()
                pass

            elif la_ == 5:
                localctx = mysqlParser.TableOptionChecksumContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1540
                self.match(mysqlParser.CHECKSUM)
                self.state = 1542
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1541
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1544
                _la = self._input.LA(1)
                if not(_la==mysqlParser.ZERO_DECIMAL or _la==mysqlParser.ONE_DECIMAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 6:
                localctx = mysqlParser.TableOptionCollateContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.DEFAULT:
                    self.state = 1545
                    self.match(mysqlParser.DEFAULT)


                self.state = 1548
                self.match(mysqlParser.COLLATE)
                self.state = 1550
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1549
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1552
                self.collationName()
                pass

            elif la_ == 7:
                localctx = mysqlParser.TableOptionCommentContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1553
                self.match(mysqlParser.COMMENT)
                self.state = 1555
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1554
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1557
                self.match(mysqlParser.STRING_LITERAL)
                pass

            elif la_ == 8:
                localctx = mysqlParser.TableOptionCompressionContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1558
                self.match(mysqlParser.COMPRESSION)
                self.state = 1560
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1559
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1562
                self.match(mysqlParser.STRING_LITERAL)
                pass

            elif la_ == 9:
                localctx = mysqlParser.TableOptionConnectionContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1563
                self.match(mysqlParser.CONNECTION)
                self.state = 1565
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1564
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1567
                self.match(mysqlParser.STRING_LITERAL)
                pass

            elif la_ == 10:
                localctx = mysqlParser.TableOptionDataDirectoryContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1568
                self.match(mysqlParser.DATA)
                self.state = 1569
                self.match(mysqlParser.DIRECTORY)
                self.state = 1571
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1570
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1573
                self.match(mysqlParser.STRING_LITERAL)
                pass

            elif la_ == 11:
                localctx = mysqlParser.TableOptionDelayContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1574
                self.match(mysqlParser.DELAY_KEY_WRITE)
                self.state = 1576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1575
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1578
                _la = self._input.LA(1)
                if not(_la==mysqlParser.ZERO_DECIMAL or _la==mysqlParser.ONE_DECIMAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 12:
                localctx = mysqlParser.TableOptionEncryptionContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1579
                self.match(mysqlParser.ENCRYPTION)
                self.state = 1581
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1580
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1583
                self.match(mysqlParser.STRING_LITERAL)
                pass

            elif la_ == 13:
                localctx = mysqlParser.TableOptionIndexDirectoryContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1584
                self.match(mysqlParser.INDEX)
                self.state = 1585
                self.match(mysqlParser.DIRECTORY)
                self.state = 1587
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1586
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1589
                self.match(mysqlParser.STRING_LITERAL)
                pass

            elif la_ == 14:
                localctx = mysqlParser.TableOptionInsertMethodContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1590
                self.match(mysqlParser.INSERT_METHOD)
                self.state = 1592
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1591
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1594
                localctx.insertMethod = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.FIRST or _la==mysqlParser.LAST or _la==mysqlParser.NO):
                    localctx.insertMethod = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 15:
                localctx = mysqlParser.TableOptionKeyBlockSizeContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1595
                self.match(mysqlParser.KEY_BLOCK_SIZE)
                self.state = 1597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1596
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1599
                self.fileSizeLiteral()
                pass

            elif la_ == 16:
                localctx = mysqlParser.TableOptionMaxRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 1600
                self.match(mysqlParser.MAX_ROWS)
                self.state = 1602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1601
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1604
                self.decimalLiteral()
                pass

            elif la_ == 17:
                localctx = mysqlParser.TableOptionMinRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 1605
                self.match(mysqlParser.MIN_ROWS)
                self.state = 1607
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1606
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1609
                self.decimalLiteral()
                pass

            elif la_ == 18:
                localctx = mysqlParser.TableOptionPackKeysContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 1610
                self.match(mysqlParser.PACK_KEYS)
                self.state = 1612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1611
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1614
                _la = self._input.LA(1)
                if not(_la==mysqlParser.DEFAULT or _la==mysqlParser.ZERO_DECIMAL or _la==mysqlParser.ONE_DECIMAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 19:
                localctx = mysqlParser.TableOptionPasswordContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 1615
                self.match(mysqlParser.PASSWORD)
                self.state = 1617
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1616
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1619
                self.match(mysqlParser.STRING_LITERAL)
                pass

            elif la_ == 20:
                localctx = mysqlParser.TableOptionRowFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 1620
                self.match(mysqlParser.ROW_FORMAT)
                self.state = 1622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1621
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1624
                localctx.rowFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.DEFAULT or ((((_la - 276)) & ~0x3f) == 0 and ((1 << (_la - 276)) & ((1 << (mysqlParser.COMPACT - 276)) | (1 << (mysqlParser.COMPRESSED - 276)) | (1 << (mysqlParser.DYNAMIC - 276)) | (1 << (mysqlParser.FIXED - 276)))) != 0) or _la==mysqlParser.REDUNDANT):
                    localctx.rowFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 21:
                localctx = mysqlParser.TableOptionRecalculationContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 1625
                self.match(mysqlParser.STATS_AUTO_RECALC)
                self.state = 1627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1626
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1629
                _la = self._input.LA(1)
                if not(_la==mysqlParser.DEFAULT or _la==mysqlParser.ZERO_DECIMAL or _la==mysqlParser.ONE_DECIMAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 22:
                localctx = mysqlParser.TableOptionPersistentContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 1630
                self.match(mysqlParser.STATS_PERSISTENT)
                self.state = 1632
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1631
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1634
                _la = self._input.LA(1)
                if not(_la==mysqlParser.DEFAULT or _la==mysqlParser.ZERO_DECIMAL or _la==mysqlParser.ONE_DECIMAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 23:
                localctx = mysqlParser.TableOptionSamplePageContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 1635
                self.match(mysqlParser.STATS_SAMPLE_PAGES)
                self.state = 1637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1636
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1639
                self.decimalLiteral()
                pass

            elif la_ == 24:
                localctx = mysqlParser.TableOptionTablespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 1640
                self.match(mysqlParser.TABLESPACE)
                self.state = 1641
                self.uid()
                self.state = 1643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.STORAGE:
                    self.state = 1642
                    self.tablespaceStorage()


                pass

            elif la_ == 25:
                localctx = mysqlParser.TableOptionUnionContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 1645
                self.match(mysqlParser.UNION)
                self.state = 1647
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1646
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1649
                self.match(mysqlParser.LR_BRACKET)
                self.state = 1650
                self.tableName()
                self.state = 1655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.COMMA:
                    self.state = 1651
                    self.match(mysqlParser.COMMA)
                    self.state = 1652
                    self.tableName()
                    self.state = 1657
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1658
                self.match(mysqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TablespaceStorageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORAGE(self):
            return self.getToken(mysqlParser.STORAGE, 0)

        def DISK(self):
            return self.getToken(mysqlParser.DISK, 0)

        def MEMORY(self):
            return self.getToken(mysqlParser.MEMORY, 0)

        def DEFAULT(self):
            return self.getToken(mysqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_tablespaceStorage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablespaceStorage" ):
                listener.enterTablespaceStorage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablespaceStorage" ):
                listener.exitTablespaceStorage(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTablespaceStorage" ):
                return visitor.visitTablespaceStorage(self)
            else:
                return visitor.visitChildren(self)




    def tablespaceStorage(self):

        localctx = mysqlParser.TablespaceStorageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_tablespaceStorage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1662
            self.match(mysqlParser.STORAGE)
            self.state = 1663
            _la = self._input.LA(1)
            if not(_la==mysqlParser.DEFAULT or _la==mysqlParser.DISK or _la==mysqlParser.MEMORY):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PartitionDefinitionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.count = None # DecimalLiteralContext
            self.subCount = None # DecimalLiteralContext

        def PARTITION(self):
            return self.getToken(mysqlParser.PARTITION, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.BY)
            else:
                return self.getToken(mysqlParser.BY, i)

        def partitionFunctionDefinition(self):
            return self.getTypedRuleContext(mysqlParser.PartitionFunctionDefinitionContext,0)


        def PARTITIONS(self):
            return self.getToken(mysqlParser.PARTITIONS, 0)

        def SUBPARTITION(self):
            return self.getToken(mysqlParser.SUBPARTITION, 0)

        def subpartitionFunctionDefinition(self):
            return self.getTypedRuleContext(mysqlParser.SubpartitionFunctionDefinitionContext,0)


        def partitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.PartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.PartitionDefinitionContext,i)


        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,i)


        def SUBPARTITIONS(self):
            return self.getToken(mysqlParser.SUBPARTITIONS, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_partitionDefinitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDefinitions" ):
                listener.enterPartitionDefinitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDefinitions" ):
                listener.exitPartitionDefinitions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionDefinitions" ):
                return visitor.visitPartitionDefinitions(self)
            else:
                return visitor.visitChildren(self)




    def partitionDefinitions(self):

        localctx = mysqlParser.PartitionDefinitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_partitionDefinitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1665
            self.match(mysqlParser.PARTITION)
            self.state = 1666
            self.match(mysqlParser.BY)
            self.state = 1667
            self.partitionFunctionDefinition()
            self.state = 1670
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.PARTITIONS:
                self.state = 1668
                self.match(mysqlParser.PARTITIONS)
                self.state = 1669
                localctx.count = self.decimalLiteral()


            self.state = 1679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.SUBPARTITION:
                self.state = 1672
                self.match(mysqlParser.SUBPARTITION)
                self.state = 1673
                self.match(mysqlParser.BY)
                self.state = 1674
                self.subpartitionFunctionDefinition()
                self.state = 1677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.SUBPARTITIONS:
                    self.state = 1675
                    self.match(mysqlParser.SUBPARTITIONS)
                    self.state = 1676
                    localctx.subCount = self.decimalLiteral()




            self.state = 1692
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.state = 1681
                self.match(mysqlParser.LR_BRACKET)
                self.state = 1682
                self.partitionDefinition()
                self.state = 1687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.COMMA:
                    self.state = 1683
                    self.match(mysqlParser.COMMA)
                    self.state = 1684
                    self.partitionDefinition()
                    self.state = 1689
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1690
                self.match(mysqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PartitionFunctionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_partitionFunctionDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PartitionFunctionKeyContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.PartitionFunctionDefinitionContext
            super().__init__(parser)
            self.algType = None # Token
            self.copyFrom(ctx)

        def KEY(self):
            return self.getToken(mysqlParser.KEY, 0)
        def uidList(self):
            return self.getTypedRuleContext(mysqlParser.UidListContext,0)

        def LINEAR(self):
            return self.getToken(mysqlParser.LINEAR, 0)
        def ALGORITHM(self):
            return self.getToken(mysqlParser.ALGORITHM, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionFunctionKey" ):
                listener.enterPartitionFunctionKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionFunctionKey" ):
                listener.exitPartitionFunctionKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionFunctionKey" ):
                return visitor.visitPartitionFunctionKey(self)
            else:
                return visitor.visitChildren(self)


    class PartitionFunctionHashContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.PartitionFunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HASH(self):
            return self.getToken(mysqlParser.HASH, 0)
        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)

        def LINEAR(self):
            return self.getToken(mysqlParser.LINEAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionFunctionHash" ):
                listener.enterPartitionFunctionHash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionFunctionHash" ):
                listener.exitPartitionFunctionHash(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionFunctionHash" ):
                return visitor.visitPartitionFunctionHash(self)
            else:
                return visitor.visitChildren(self)


    class PartitionFunctionListContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.PartitionFunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LIST(self):
            return self.getToken(mysqlParser.LIST, 0)
        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)

        def COLUMNS(self):
            return self.getToken(mysqlParser.COLUMNS, 0)
        def uidList(self):
            return self.getTypedRuleContext(mysqlParser.UidListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionFunctionList" ):
                listener.enterPartitionFunctionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionFunctionList" ):
                listener.exitPartitionFunctionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionFunctionList" ):
                return visitor.visitPartitionFunctionList(self)
            else:
                return visitor.visitChildren(self)


    class PartitionFunctionRangeContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.PartitionFunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RANGE(self):
            return self.getToken(mysqlParser.RANGE, 0)
        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)

        def COLUMNS(self):
            return self.getToken(mysqlParser.COLUMNS, 0)
        def uidList(self):
            return self.getTypedRuleContext(mysqlParser.UidListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionFunctionRange" ):
                listener.enterPartitionFunctionRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionFunctionRange" ):
                listener.exitPartitionFunctionRange(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionFunctionRange" ):
                return visitor.visitPartitionFunctionRange(self)
            else:
                return visitor.visitChildren(self)



    def partitionFunctionDefinition(self):

        localctx = mysqlParser.PartitionFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_partitionFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.state = 1739
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
            if la_ == 1:
                localctx = mysqlParser.PartitionFunctionHashContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.LINEAR:
                    self.state = 1694
                    self.match(mysqlParser.LINEAR)


                self.state = 1697
                self.match(mysqlParser.HASH)
                self.state = 1698
                self.match(mysqlParser.LR_BRACKET)
                self.state = 1699
                self.expression(0)
                self.state = 1700
                self.match(mysqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                localctx = mysqlParser.PartitionFunctionKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.LINEAR:
                    self.state = 1702
                    self.match(mysqlParser.LINEAR)


                self.state = 1705
                self.match(mysqlParser.KEY)
                self.state = 1709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.ALGORITHM:
                    self.state = 1706
                    self.match(mysqlParser.ALGORITHM)
                    self.state = 1707
                    self.match(mysqlParser.EQUAL_SYMBOL)
                    self.state = 1708
                    localctx.algType = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==mysqlParser.ONE_DECIMAL or _la==mysqlParser.TWO_DECIMAL):
                        localctx.algType = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1711
                self.match(mysqlParser.LR_BRACKET)
                self.state = 1712
                self.uidList()
                self.state = 1713
                self.match(mysqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                localctx = mysqlParser.PartitionFunctionRangeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1715
                self.match(mysqlParser.RANGE)
                self.state = 1725
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [mysqlParser.LR_BRACKET]:
                    self.state = 1716
                    self.match(mysqlParser.LR_BRACKET)
                    self.state = 1717
                    self.expression(0)
                    self.state = 1718
                    self.match(mysqlParser.RR_BRACKET)
                    pass
                elif token in [mysqlParser.COLUMNS]:
                    self.state = 1720
                    self.match(mysqlParser.COLUMNS)
                    self.state = 1721
                    self.match(mysqlParser.LR_BRACKET)
                    self.state = 1722
                    self.uidList()
                    self.state = 1723
                    self.match(mysqlParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                localctx = mysqlParser.PartitionFunctionListContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1727
                self.match(mysqlParser.LIST)
                self.state = 1737
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [mysqlParser.LR_BRACKET]:
                    self.state = 1728
                    self.match(mysqlParser.LR_BRACKET)
                    self.state = 1729
                    self.expression(0)
                    self.state = 1730
                    self.match(mysqlParser.RR_BRACKET)
                    pass
                elif token in [mysqlParser.COLUMNS]:
                    self.state = 1732
                    self.match(mysqlParser.COLUMNS)
                    self.state = 1733
                    self.match(mysqlParser.LR_BRACKET)
                    self.state = 1734
                    self.uidList()
                    self.state = 1735
                    self.match(mysqlParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubpartitionFunctionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_subpartitionFunctionDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubPartitionFunctionHashContext(SubpartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.SubpartitionFunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HASH(self):
            return self.getToken(mysqlParser.HASH, 0)
        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)

        def LINEAR(self):
            return self.getToken(mysqlParser.LINEAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubPartitionFunctionHash" ):
                listener.enterSubPartitionFunctionHash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubPartitionFunctionHash" ):
                listener.exitSubPartitionFunctionHash(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubPartitionFunctionHash" ):
                return visitor.visitSubPartitionFunctionHash(self)
            else:
                return visitor.visitChildren(self)


    class SubPartitionFunctionKeyContext(SubpartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.SubpartitionFunctionDefinitionContext
            super().__init__(parser)
            self.algType = None # Token
            self.copyFrom(ctx)

        def KEY(self):
            return self.getToken(mysqlParser.KEY, 0)
        def uidList(self):
            return self.getTypedRuleContext(mysqlParser.UidListContext,0)

        def LINEAR(self):
            return self.getToken(mysqlParser.LINEAR, 0)
        def ALGORITHM(self):
            return self.getToken(mysqlParser.ALGORITHM, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubPartitionFunctionKey" ):
                listener.enterSubPartitionFunctionKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubPartitionFunctionKey" ):
                listener.exitSubPartitionFunctionKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubPartitionFunctionKey" ):
                return visitor.visitSubPartitionFunctionKey(self)
            else:
                return visitor.visitChildren(self)



    def subpartitionFunctionDefinition(self):

        localctx = mysqlParser.SubpartitionFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_subpartitionFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.state = 1762
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
            if la_ == 1:
                localctx = mysqlParser.SubPartitionFunctionHashContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1742
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.LINEAR:
                    self.state = 1741
                    self.match(mysqlParser.LINEAR)


                self.state = 1744
                self.match(mysqlParser.HASH)
                self.state = 1745
                self.match(mysqlParser.LR_BRACKET)
                self.state = 1746
                self.expression(0)
                self.state = 1747
                self.match(mysqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                localctx = mysqlParser.SubPartitionFunctionKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.LINEAR:
                    self.state = 1749
                    self.match(mysqlParser.LINEAR)


                self.state = 1752
                self.match(mysqlParser.KEY)
                self.state = 1756
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.ALGORITHM:
                    self.state = 1753
                    self.match(mysqlParser.ALGORITHM)
                    self.state = 1754
                    self.match(mysqlParser.EQUAL_SYMBOL)
                    self.state = 1755
                    localctx.algType = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==mysqlParser.ONE_DECIMAL or _la==mysqlParser.TWO_DECIMAL):
                        localctx.algType = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1758
                self.match(mysqlParser.LR_BRACKET)
                self.state = 1759
                self.uidList()
                self.state = 1760
                self.match(mysqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PartitionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_partitionDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PartitionComparisionContext(PartitionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.PartitionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PARTITION(self):
            return self.getToken(mysqlParser.PARTITION, 0)
        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)

        def VALUES(self):
            return self.getToken(mysqlParser.VALUES, 0)
        def LESS(self):
            return self.getToken(mysqlParser.LESS, 0)
        def THAN(self):
            return self.getToken(mysqlParser.THAN, 0)
        def MAXVALUE(self):
            return self.getToken(mysqlParser.MAXVALUE, 0)
        def partitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.PartitionOptionContext,i)

        def subpartitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.SubpartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.SubpartitionDefinitionContext,i)

        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)

        def constants(self):
            return self.getTypedRuleContext(mysqlParser.ConstantsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionComparision" ):
                listener.enterPartitionComparision(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionComparision" ):
                listener.exitPartitionComparision(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionComparision" ):
                return visitor.visitPartitionComparision(self)
            else:
                return visitor.visitChildren(self)


    class PartitionListContext(PartitionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.PartitionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PARTITION(self):
            return self.getToken(mysqlParser.PARTITION, 0)
        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)

        def VALUES(self):
            return self.getToken(mysqlParser.VALUES, 0)
        def IN(self):
            return self.getToken(mysqlParser.IN, 0)
        def constants(self):
            return self.getTypedRuleContext(mysqlParser.ConstantsContext,0)

        def partitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.PartitionOptionContext,i)

        def subpartitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.SubpartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.SubpartitionDefinitionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionList" ):
                listener.enterPartitionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionList" ):
                listener.exitPartitionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionList" ):
                return visitor.visitPartitionList(self)
            else:
                return visitor.visitChildren(self)


    class PartitionSimpleContext(PartitionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.PartitionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PARTITION(self):
            return self.getToken(mysqlParser.PARTITION, 0)
        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)

        def partitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.PartitionOptionContext,i)

        def subpartitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.SubpartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.SubpartitionDefinitionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionSimple" ):
                listener.enterPartitionSimple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionSimple" ):
                listener.exitPartitionSimple(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionSimple" ):
                return visitor.visitPartitionSimple(self)
            else:
                return visitor.visitChildren(self)



    def partitionDefinition(self):

        localctx = mysqlParser.PartitionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_partitionDefinition)
        self._la = 0 # Token type
        try:
            self.state = 1836
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                localctx = mysqlParser.PartitionComparisionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1764
                self.match(mysqlParser.PARTITION)
                self.state = 1765
                self.uid()
                self.state = 1766
                self.match(mysqlParser.VALUES)
                self.state = 1767
                self.match(mysqlParser.LESS)
                self.state = 1768
                self.match(mysqlParser.THAN)
                self.state = 1777
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [mysqlParser.LR_BRACKET]:
                    self.state = 1769
                    self.match(mysqlParser.LR_BRACKET)
                    self.state = 1772
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
                    if la_ == 1:
                        self.state = 1770
                        self.expression(0)
                        pass

                    elif la_ == 2:
                        self.state = 1771
                        self.constants()
                        pass


                    self.state = 1774
                    self.match(mysqlParser.RR_BRACKET)
                    pass
                elif token in [mysqlParser.MAXVALUE]:
                    self.state = 1776
                    self.match(mysqlParser.MAXVALUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.INDEX or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & ((1 << (mysqlParser.COMMENT - 274)) | (1 << (mysqlParser.DATA - 274)) | (1 << (mysqlParser.ENGINE - 274)))) != 0) or ((((_la - 392)) & ~0x3f) == 0 and ((1 << (_la - 392)) & ((1 << (mysqlParser.MAX_ROWS - 392)) | (1 << (mysqlParser.MIN_ROWS - 392)) | (1 << (mysqlParser.NODEGROUP - 392)))) != 0) or _la==mysqlParser.STORAGE or _la==mysqlParser.TABLESPACE:
                    self.state = 1779
                    self.partitionOption()
                    self.state = 1784
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1793
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.SUBPARTITION:
                    self.state = 1785
                    self.subpartitionDefinition()
                    self.state = 1790
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,202,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1786
                            self.match(mysqlParser.COMMA)
                            self.state = 1787
                            self.subpartitionDefinition() 
                        self.state = 1792
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,202,self._ctx)



                pass

            elif la_ == 2:
                localctx = mysqlParser.PartitionListContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1795
                self.match(mysqlParser.PARTITION)
                self.state = 1796
                self.uid()
                self.state = 1797
                self.match(mysqlParser.VALUES)
                self.state = 1798
                self.match(mysqlParser.IN)
                self.state = 1799
                self.match(mysqlParser.LR_BRACKET)
                self.state = 1800
                self.constants()
                self.state = 1801
                self.match(mysqlParser.RR_BRACKET)
                self.state = 1805
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.INDEX or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & ((1 << (mysqlParser.COMMENT - 274)) | (1 << (mysqlParser.DATA - 274)) | (1 << (mysqlParser.ENGINE - 274)))) != 0) or ((((_la - 392)) & ~0x3f) == 0 and ((1 << (_la - 392)) & ((1 << (mysqlParser.MAX_ROWS - 392)) | (1 << (mysqlParser.MIN_ROWS - 392)) | (1 << (mysqlParser.NODEGROUP - 392)))) != 0) or _la==mysqlParser.STORAGE or _la==mysqlParser.TABLESPACE:
                    self.state = 1802
                    self.partitionOption()
                    self.state = 1807
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1816
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.SUBPARTITION:
                    self.state = 1808
                    self.subpartitionDefinition()
                    self.state = 1813
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,205,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1809
                            self.match(mysqlParser.COMMA)
                            self.state = 1810
                            self.subpartitionDefinition() 
                        self.state = 1815
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,205,self._ctx)



                pass

            elif la_ == 3:
                localctx = mysqlParser.PartitionSimpleContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1818
                self.match(mysqlParser.PARTITION)
                self.state = 1819
                self.uid()
                self.state = 1823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.INDEX or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & ((1 << (mysqlParser.COMMENT - 274)) | (1 << (mysqlParser.DATA - 274)) | (1 << (mysqlParser.ENGINE - 274)))) != 0) or ((((_la - 392)) & ~0x3f) == 0 and ((1 << (_la - 392)) & ((1 << (mysqlParser.MAX_ROWS - 392)) | (1 << (mysqlParser.MIN_ROWS - 392)) | (1 << (mysqlParser.NODEGROUP - 392)))) != 0) or _la==mysqlParser.STORAGE or _la==mysqlParser.TABLESPACE:
                    self.state = 1820
                    self.partitionOption()
                    self.state = 1825
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1834
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.SUBPARTITION:
                    self.state = 1826
                    self.subpartitionDefinition()
                    self.state = 1831
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,208,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1827
                            self.match(mysqlParser.COMMA)
                            self.state = 1828
                            self.subpartitionDefinition() 
                        self.state = 1833
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,208,self._ctx)



                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubpartitionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBPARTITION(self):
            return self.getToken(mysqlParser.SUBPARTITION, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def partitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.PartitionOptionContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_subpartitionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubpartitionDefinition" ):
                listener.enterSubpartitionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubpartitionDefinition" ):
                listener.exitSubpartitionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubpartitionDefinition" ):
                return visitor.visitSubpartitionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def subpartitionDefinition(self):

        localctx = mysqlParser.SubpartitionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_subpartitionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1838
            self.match(mysqlParser.SUBPARTITION)
            self.state = 1839
            self.uid()
            self.state = 1843
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.INDEX or ((((_la - 274)) & ~0x3f) == 0 and ((1 << (_la - 274)) & ((1 << (mysqlParser.COMMENT - 274)) | (1 << (mysqlParser.DATA - 274)) | (1 << (mysqlParser.ENGINE - 274)))) != 0) or ((((_la - 392)) & ~0x3f) == 0 and ((1 << (_la - 392)) & ((1 << (mysqlParser.MAX_ROWS - 392)) | (1 << (mysqlParser.MIN_ROWS - 392)) | (1 << (mysqlParser.NODEGROUP - 392)))) != 0) or _la==mysqlParser.STORAGE or _la==mysqlParser.TABLESPACE:
                self.state = 1840
                self.partitionOption()
                self.state = 1845
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PartitionOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_partitionOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PartitionOptionCommentContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.PartitionOptionContext
            super().__init__(parser)
            self.comment = None # Token
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(mysqlParser.COMMENT, 0)
        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionComment" ):
                listener.enterPartitionOptionComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionComment" ):
                listener.exitPartitionOptionComment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionOptionComment" ):
                return visitor.visitPartitionOptionComment(self)
            else:
                return visitor.visitChildren(self)


    class PartitionOptionNodeGroupContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.PartitionOptionContext
            super().__init__(parser)
            self.nodegroup = None # UidContext
            self.copyFrom(ctx)

        def NODEGROUP(self):
            return self.getToken(mysqlParser.NODEGROUP, 0)
        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionNodeGroup" ):
                listener.enterPartitionOptionNodeGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionNodeGroup" ):
                listener.exitPartitionOptionNodeGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionOptionNodeGroup" ):
                return visitor.visitPartitionOptionNodeGroup(self)
            else:
                return visitor.visitChildren(self)


    class PartitionOptionIndexDirectoryContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.PartitionOptionContext
            super().__init__(parser)
            self.indexDirectory = None # Token
            self.copyFrom(ctx)

        def INDEX(self):
            return self.getToken(mysqlParser.INDEX, 0)
        def DIRECTORY(self):
            return self.getToken(mysqlParser.DIRECTORY, 0)
        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionIndexDirectory" ):
                listener.enterPartitionOptionIndexDirectory(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionIndexDirectory" ):
                listener.exitPartitionOptionIndexDirectory(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionOptionIndexDirectory" ):
                return visitor.visitPartitionOptionIndexDirectory(self)
            else:
                return visitor.visitChildren(self)


    class PartitionOptionMaxRowsContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.PartitionOptionContext
            super().__init__(parser)
            self.maxRows = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def MAX_ROWS(self):
            return self.getToken(mysqlParser.MAX_ROWS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionMaxRows" ):
                listener.enterPartitionOptionMaxRows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionMaxRows" ):
                listener.exitPartitionOptionMaxRows(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionOptionMaxRows" ):
                return visitor.visitPartitionOptionMaxRows(self)
            else:
                return visitor.visitChildren(self)


    class PartitionOptionTablespaceContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.PartitionOptionContext
            super().__init__(parser)
            self.tablespace = None # UidContext
            self.copyFrom(ctx)

        def TABLESPACE(self):
            return self.getToken(mysqlParser.TABLESPACE, 0)
        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionTablespace" ):
                listener.enterPartitionOptionTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionTablespace" ):
                listener.exitPartitionOptionTablespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionOptionTablespace" ):
                return visitor.visitPartitionOptionTablespace(self)
            else:
                return visitor.visitChildren(self)


    class PartitionOptionEngineContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.PartitionOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ENGINE(self):
            return self.getToken(mysqlParser.ENGINE, 0)
        def engineName(self):
            return self.getTypedRuleContext(mysqlParser.EngineNameContext,0)

        def STORAGE(self):
            return self.getToken(mysqlParser.STORAGE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionEngine" ):
                listener.enterPartitionOptionEngine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionEngine" ):
                listener.exitPartitionOptionEngine(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionOptionEngine" ):
                return visitor.visitPartitionOptionEngine(self)
            else:
                return visitor.visitChildren(self)


    class PartitionOptionMinRowsContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.PartitionOptionContext
            super().__init__(parser)
            self.minRows = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def MIN_ROWS(self):
            return self.getToken(mysqlParser.MIN_ROWS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionMinRows" ):
                listener.enterPartitionOptionMinRows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionMinRows" ):
                listener.exitPartitionOptionMinRows(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionOptionMinRows" ):
                return visitor.visitPartitionOptionMinRows(self)
            else:
                return visitor.visitChildren(self)


    class PartitionOptionDataDirectoryContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.PartitionOptionContext
            super().__init__(parser)
            self.dataDirectory = None # Token
            self.copyFrom(ctx)

        def DATA(self):
            return self.getToken(mysqlParser.DATA, 0)
        def DIRECTORY(self):
            return self.getToken(mysqlParser.DIRECTORY, 0)
        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionDataDirectory" ):
                listener.enterPartitionOptionDataDirectory(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionDataDirectory" ):
                listener.exitPartitionOptionDataDirectory(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartitionOptionDataDirectory" ):
                return visitor.visitPartitionOptionDataDirectory(self)
            else:
                return visitor.visitChildren(self)



    def partitionOption(self):

        localctx = mysqlParser.PartitionOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_partitionOption)
        self._la = 0 # Token type
        try:
            self.state = 1891
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.ENGINE, mysqlParser.STORAGE]:
                localctx = mysqlParser.PartitionOptionEngineContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1847
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.STORAGE:
                    self.state = 1846
                    self.match(mysqlParser.STORAGE)


                self.state = 1849
                self.match(mysqlParser.ENGINE)
                self.state = 1851
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1850
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1853
                self.engineName()
                pass
            elif token in [mysqlParser.COMMENT]:
                localctx = mysqlParser.PartitionOptionCommentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1854
                self.match(mysqlParser.COMMENT)
                self.state = 1856
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1855
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1858
                localctx.comment = self.match(mysqlParser.STRING_LITERAL)
                pass
            elif token in [mysqlParser.DATA]:
                localctx = mysqlParser.PartitionOptionDataDirectoryContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1859
                self.match(mysqlParser.DATA)
                self.state = 1860
                self.match(mysqlParser.DIRECTORY)
                self.state = 1862
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1861
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1864
                localctx.dataDirectory = self.match(mysqlParser.STRING_LITERAL)
                pass
            elif token in [mysqlParser.INDEX]:
                localctx = mysqlParser.PartitionOptionIndexDirectoryContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1865
                self.match(mysqlParser.INDEX)
                self.state = 1866
                self.match(mysqlParser.DIRECTORY)
                self.state = 1868
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1867
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1870
                localctx.indexDirectory = self.match(mysqlParser.STRING_LITERAL)
                pass
            elif token in [mysqlParser.MAX_ROWS]:
                localctx = mysqlParser.PartitionOptionMaxRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1871
                self.match(mysqlParser.MAX_ROWS)
                self.state = 1873
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1872
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1875
                localctx.maxRows = self.decimalLiteral()
                pass
            elif token in [mysqlParser.MIN_ROWS]:
                localctx = mysqlParser.PartitionOptionMinRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1876
                self.match(mysqlParser.MIN_ROWS)
                self.state = 1878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1877
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1880
                localctx.minRows = self.decimalLiteral()
                pass
            elif token in [mysqlParser.TABLESPACE]:
                localctx = mysqlParser.PartitionOptionTablespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1881
                self.match(mysqlParser.TABLESPACE)
                self.state = 1883
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1882
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1885
                localctx.tablespace = self.uid()
                pass
            elif token in [mysqlParser.NODEGROUP]:
                localctx = mysqlParser.PartitionOptionNodeGroupContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1886
                self.match(mysqlParser.NODEGROUP)
                self.state = 1888
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1887
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1890
                localctx.nodegroup = self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterDatabaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_alterDatabase

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AlterUpgradeNameContext(AlterDatabaseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterDatabaseContext
            super().__init__(parser)
            self.dbFormat = None # Token
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(mysqlParser.ALTER, 0)
        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)

        def UPGRADE(self):
            return self.getToken(mysqlParser.UPGRADE, 0)
        def DATA(self):
            return self.getToken(mysqlParser.DATA, 0)
        def DIRECTORY(self):
            return self.getToken(mysqlParser.DIRECTORY, 0)
        def NAME(self):
            return self.getToken(mysqlParser.NAME, 0)
        def DATABASE(self):
            return self.getToken(mysqlParser.DATABASE, 0)
        def SCHEMA(self):
            return self.getToken(mysqlParser.SCHEMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterUpgradeName" ):
                listener.enterAlterUpgradeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterUpgradeName" ):
                listener.exitAlterUpgradeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterUpgradeName" ):
                return visitor.visitAlterUpgradeName(self)
            else:
                return visitor.visitChildren(self)


    class AlterSimpleDatabaseContext(AlterDatabaseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterDatabaseContext
            super().__init__(parser)
            self.dbFormat = None # Token
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(mysqlParser.ALTER, 0)
        def DATABASE(self):
            return self.getToken(mysqlParser.DATABASE, 0)
        def SCHEMA(self):
            return self.getToken(mysqlParser.SCHEMA, 0)
        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)

        def createDatabaseOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.CreateDatabaseOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.CreateDatabaseOptionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterSimpleDatabase" ):
                listener.enterAlterSimpleDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterSimpleDatabase" ):
                listener.exitAlterSimpleDatabase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterSimpleDatabase" ):
                return visitor.visitAlterSimpleDatabase(self)
            else:
                return visitor.visitChildren(self)



    def alterDatabase(self):

        localctx = mysqlParser.AlterDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_alterDatabase)
        self._la = 0 # Token type
        try:
            self.state = 1911
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
            if la_ == 1:
                localctx = mysqlParser.AlterSimpleDatabaseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1893
                self.match(mysqlParser.ALTER)
                self.state = 1894
                localctx.dbFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.DATABASE or _la==mysqlParser.SCHEMA):
                    localctx.dbFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.LEFT or _la==mysqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (mysqlParser.DATE - 180)) | (1 << (mysqlParser.TIME - 180)) | (1 << (mysqlParser.TIMESTAMP - 180)) | (1 << (mysqlParser.DATETIME - 180)) | (1 << (mysqlParser.YEAR - 180)) | (1 << (mysqlParser.TEXT - 180)) | (1 << (mysqlParser.ENUM - 180)) | (1 << (mysqlParser.COUNT - 180)) | (1 << (mysqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (mysqlParser.ACCOUNT - 244)) | (1 << (mysqlParser.ACTION - 244)) | (1 << (mysqlParser.AFTER - 244)) | (1 << (mysqlParser.AGGREGATE - 244)) | (1 << (mysqlParser.ALGORITHM - 244)) | (1 << (mysqlParser.ANY - 244)) | (1 << (mysqlParser.AT - 244)) | (1 << (mysqlParser.AUTHORS - 244)) | (1 << (mysqlParser.AUTOCOMMIT - 244)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (mysqlParser.AUTO_INCREMENT - 244)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 244)) | (1 << (mysqlParser.BEGIN - 244)) | (1 << (mysqlParser.BINLOG - 244)) | (1 << (mysqlParser.BIT - 244)) | (1 << (mysqlParser.BLOCK - 244)) | (1 << (mysqlParser.BTREE - 244)) | (1 << (mysqlParser.CASCADED - 244)) | (1 << (mysqlParser.CHAIN - 244)) | (1 << (mysqlParser.CHANNEL - 244)) | (1 << (mysqlParser.CHECKSUM - 244)) | (1 << (mysqlParser.CIPHER - 244)) | (1 << (mysqlParser.CLIENT - 244)) | (1 << (mysqlParser.COALESCE - 244)) | (1 << (mysqlParser.CODE - 244)) | (1 << (mysqlParser.COLUMNS - 244)) | (1 << (mysqlParser.COLUMN_FORMAT - 244)) | (1 << (mysqlParser.COMMENT - 244)) | (1 << (mysqlParser.COMMIT - 244)) | (1 << (mysqlParser.COMPACT - 244)) | (1 << (mysqlParser.COMPLETION - 244)) | (1 << (mysqlParser.COMPRESSED - 244)) | (1 << (mysqlParser.COMPRESSION - 244)) | (1 << (mysqlParser.CONCURRENT - 244)) | (1 << (mysqlParser.CONNECTION - 244)) | (1 << (mysqlParser.CONSISTENT - 244)) | (1 << (mysqlParser.CONTAINS - 244)) | (1 << (mysqlParser.CONTEXT - 244)) | (1 << (mysqlParser.CONTRIBUTORS - 244)) | (1 << (mysqlParser.COPY - 244)) | (1 << (mysqlParser.CPU - 244)) | (1 << (mysqlParser.DATA - 244)) | (1 << (mysqlParser.DATAFILE - 244)) | (1 << (mysqlParser.DEALLOCATE - 244)) | (1 << (mysqlParser.DEFAULT_AUTH - 244)) | (1 << (mysqlParser.DEFINER - 244)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 244)) | (1 << (mysqlParser.DIRECTORY - 244)) | (1 << (mysqlParser.DISABLE - 244)) | (1 << (mysqlParser.DISCARD - 244)) | (1 << (mysqlParser.DISK - 244)) | (1 << (mysqlParser.DO - 244)) | (1 << (mysqlParser.DUMPFILE - 244)) | (1 << (mysqlParser.DUPLICATE - 244)) | (1 << (mysqlParser.DYNAMIC - 244)) | (1 << (mysqlParser.ENABLE - 244)) | (1 << (mysqlParser.ENCRYPTION - 244)) | (1 << (mysqlParser.ENDS - 244)) | (1 << (mysqlParser.ENGINE - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (mysqlParser.ENGINES - 308)) | (1 << (mysqlParser.ERROR - 308)) | (1 << (mysqlParser.ERRORS - 308)) | (1 << (mysqlParser.ESCAPE - 308)) | (1 << (mysqlParser.EVEN - 308)) | (1 << (mysqlParser.EVENT - 308)) | (1 << (mysqlParser.EVENTS - 308)) | (1 << (mysqlParser.EVERY - 308)) | (1 << (mysqlParser.EXCHANGE - 308)) | (1 << (mysqlParser.EXCLUSIVE - 308)) | (1 << (mysqlParser.EXPIRE - 308)) | (1 << (mysqlParser.EXTENT_SIZE - 308)) | (1 << (mysqlParser.FAULTS - 308)) | (1 << (mysqlParser.FIELDS - 308)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (mysqlParser.FILTER - 308)) | (1 << (mysqlParser.FIRST - 308)) | (1 << (mysqlParser.FIXED - 308)) | (1 << (mysqlParser.FOLLOWS - 308)) | (1 << (mysqlParser.FULL - 308)) | (1 << (mysqlParser.FUNCTION - 308)) | (1 << (mysqlParser.GLOBAL - 308)) | (1 << (mysqlParser.GRANTS - 308)) | (1 << (mysqlParser.GROUP_REPLICATION - 308)) | (1 << (mysqlParser.HASH - 308)) | (1 << (mysqlParser.HOST - 308)) | (1 << (mysqlParser.IDENTIFIED - 308)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (mysqlParser.IMPORT - 308)) | (1 << (mysqlParser.INDEXES - 308)) | (1 << (mysqlParser.INITIAL_SIZE - 308)) | (1 << (mysqlParser.INPLACE - 308)) | (1 << (mysqlParser.INSERT_METHOD - 308)) | (1 << (mysqlParser.INSTANCE - 308)) | (1 << (mysqlParser.INVOKER - 308)) | (1 << (mysqlParser.IO - 308)) | (1 << (mysqlParser.IO_THREAD - 308)) | (1 << (mysqlParser.IPC - 308)) | (1 << (mysqlParser.ISOLATION - 308)) | (1 << (mysqlParser.ISSUER - 308)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (mysqlParser.LANGUAGE - 308)) | (1 << (mysqlParser.LAST - 308)) | (1 << (mysqlParser.LEAVES - 308)) | (1 << (mysqlParser.LESS - 308)) | (1 << (mysqlParser.LEVEL - 308)) | (1 << (mysqlParser.LIST - 308)) | (1 << (mysqlParser.LOCAL - 308)) | (1 << (mysqlParser.LOGFILE - 308)) | (1 << (mysqlParser.LOGS - 308)) | (1 << (mysqlParser.MASTER - 308)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 308)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (mysqlParser.MASTER_DELAY - 372)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (mysqlParser.MASTER_HOST - 372)) | (1 << (mysqlParser.MASTER_LOG_FILE - 372)) | (1 << (mysqlParser.MASTER_LOG_POS - 372)) | (1 << (mysqlParser.MASTER_PASSWORD - 372)) | (1 << (mysqlParser.MASTER_PORT - 372)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (mysqlParser.MASTER_SSL - 372)) | (1 << (mysqlParser.MASTER_SSL_CA - 372)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_CERT - 372)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (mysqlParser.MASTER_SSL_CRL - 372)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_KEY - 372)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 372)) | (1 << (mysqlParser.MASTER_USER - 372)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_ROWS - 372)) | (1 << (mysqlParser.MAX_SIZE - 372)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (mysqlParser.MERGE - 372)) | (1 << (mysqlParser.MID - 372)) | (1 << (mysqlParser.MIGRATE - 372)) | (1 << (mysqlParser.MIN_ROWS - 372)) | (1 << (mysqlParser.MODIFY - 372)) | (1 << (mysqlParser.MUTEX - 372)) | (1 << (mysqlParser.MYSQL - 372)) | (1 << (mysqlParser.NAME - 372)) | (1 << (mysqlParser.NAMES - 372)) | (1 << (mysqlParser.NCHAR - 372)) | (1 << (mysqlParser.NEVER - 372)) | (1 << (mysqlParser.NO - 372)) | (1 << (mysqlParser.NODEGROUP - 372)) | (1 << (mysqlParser.NONE - 372)) | (1 << (mysqlParser.OFFLINE - 372)) | (1 << (mysqlParser.OFFSET - 372)) | (1 << (mysqlParser.OJ - 372)) | (1 << (mysqlParser.OLD_PASSWORD - 372)) | (1 << (mysqlParser.ONE - 372)) | (1 << (mysqlParser.ONLINE - 372)) | (1 << (mysqlParser.ONLY - 372)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 372)) | (1 << (mysqlParser.OPTIONS - 372)) | (1 << (mysqlParser.OWNER - 372)) | (1 << (mysqlParser.PACK_KEYS - 372)) | (1 << (mysqlParser.PAGE - 372)) | (1 << (mysqlParser.PARSER - 372)) | (1 << (mysqlParser.PARTIAL - 372)) | (1 << (mysqlParser.PARTITIONING - 372)) | (1 << (mysqlParser.PARTITIONS - 372)) | (1 << (mysqlParser.PASSWORD - 372)) | (1 << (mysqlParser.PHASE - 372)) | (1 << (mysqlParser.PLUGIN_DIR - 372)) | (1 << (mysqlParser.PLUGINS - 372)) | (1 << (mysqlParser.PORT - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (mysqlParser.PRECEDES - 436)) | (1 << (mysqlParser.PREPARE - 436)) | (1 << (mysqlParser.PRESERVE - 436)) | (1 << (mysqlParser.PREV - 436)) | (1 << (mysqlParser.PROCESSLIST - 436)) | (1 << (mysqlParser.PROFILE - 436)) | (1 << (mysqlParser.PROFILES - 436)) | (1 << (mysqlParser.PROXY - 436)) | (1 << (mysqlParser.QUERY - 436)) | (1 << (mysqlParser.QUICK - 436)) | (1 << (mysqlParser.REBUILD - 436)) | (1 << (mysqlParser.RECOVER - 436)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (mysqlParser.REDUNDANT - 436)) | (1 << (mysqlParser.RELAY_LOG_FILE - 436)) | (1 << (mysqlParser.RELAY_LOG_POS - 436)) | (1 << (mysqlParser.RELAYLOG - 436)) | (1 << (mysqlParser.REMOVE - 436)) | (1 << (mysqlParser.REORGANIZE - 436)) | (1 << (mysqlParser.REPAIR - 436)) | (1 << (mysqlParser.REPLICATE_DO_DB - 436)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATION - 436)) | (1 << (mysqlParser.RESUME - 436)) | (1 << (mysqlParser.RETURNS - 436)) | (1 << (mysqlParser.ROLLBACK - 436)) | (1 << (mysqlParser.ROLLUP - 436)) | (1 << (mysqlParser.ROTATE - 436)) | (1 << (mysqlParser.ROW - 436)) | (1 << (mysqlParser.ROWS - 436)) | (1 << (mysqlParser.ROW_FORMAT - 436)) | (1 << (mysqlParser.SAVEPOINT - 436)) | (1 << (mysqlParser.SCHEDULE - 436)) | (1 << (mysqlParser.SECURITY - 436)) | (1 << (mysqlParser.SERVER - 436)) | (1 << (mysqlParser.SESSION - 436)) | (1 << (mysqlParser.SHARE - 436)) | (1 << (mysqlParser.SHARED - 436)) | (1 << (mysqlParser.SIGNED - 436)) | (1 << (mysqlParser.SIMPLE - 436)) | (1 << (mysqlParser.SLAVE - 436)) | (1 << (mysqlParser.SNAPSHOT - 436)) | (1 << (mysqlParser.SOCKET - 436)) | (1 << (mysqlParser.SOME - 436)) | (1 << (mysqlParser.SOUNDS - 436)) | (1 << (mysqlParser.SOURCE - 436)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (mysqlParser.SQL_CACHE - 436)) | (1 << (mysqlParser.SQL_NO_CACHE - 436)) | (1 << (mysqlParser.SQL_THREAD - 436)) | (1 << (mysqlParser.START - 436)) | (1 << (mysqlParser.STARTS - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (mysqlParser.STATS_AUTO_RECALC - 500)) | (1 << (mysqlParser.STATS_PERSISTENT - 500)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (mysqlParser.STATUS - 500)) | (1 << (mysqlParser.STOP - 500)) | (1 << (mysqlParser.STORAGE - 500)) | (1 << (mysqlParser.STRING - 500)) | (1 << (mysqlParser.SUBJECT - 500)) | (1 << (mysqlParser.SUBPARTITION - 500)) | (1 << (mysqlParser.SUBPARTITIONS - 500)) | (1 << (mysqlParser.SUSPEND - 500)) | (1 << (mysqlParser.SWAPS - 500)) | (1 << (mysqlParser.SWITCHES - 500)) | (1 << (mysqlParser.TABLESPACE - 500)) | (1 << (mysqlParser.TEMPORARY - 500)) | (1 << (mysqlParser.TEMPTABLE - 500)) | (1 << (mysqlParser.THAN - 500)) | (1 << (mysqlParser.TRANSACTION - 500)) | (1 << (mysqlParser.TRUNCATE - 500)) | (1 << (mysqlParser.UNDEFINED - 500)) | (1 << (mysqlParser.UNDOFILE - 500)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (mysqlParser.UNKNOWN - 500)) | (1 << (mysqlParser.UPGRADE - 500)) | (1 << (mysqlParser.USER - 500)) | (1 << (mysqlParser.VALIDATION - 500)) | (1 << (mysqlParser.VALUE - 500)) | (1 << (mysqlParser.VARIABLES - 500)) | (1 << (mysqlParser.VIEW - 500)) | (1 << (mysqlParser.WAIT - 500)) | (1 << (mysqlParser.WARNINGS - 500)) | (1 << (mysqlParser.WITHOUT - 500)) | (1 << (mysqlParser.WORK - 500)) | (1 << (mysqlParser.WRAPPER - 500)) | (1 << (mysqlParser.X509 - 500)) | (1 << (mysqlParser.XA - 500)) | (1 << (mysqlParser.XML - 500)) | (1 << (mysqlParser.QUARTER - 500)) | (1 << (mysqlParser.MONTH - 500)) | (1 << (mysqlParser.DAY - 500)) | (1 << (mysqlParser.HOUR - 500)) | (1 << (mysqlParser.MINUTE - 500)) | (1 << (mysqlParser.WEEK - 500)) | (1 << (mysqlParser.SECOND - 500)) | (1 << (mysqlParser.MICROSECOND - 500)) | (1 << (mysqlParser.TABLES - 500)) | (1 << (mysqlParser.ROUTINE - 500)) | (1 << (mysqlParser.EXECUTE - 500)) | (1 << (mysqlParser.FILE - 500)) | (1 << (mysqlParser.PROCESS - 500)) | (1 << (mysqlParser.RELOAD - 500)) | (1 << (mysqlParser.SHUTDOWN - 500)) | (1 << (mysqlParser.SUPER - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (mysqlParser.PRIVILEGES - 564)) | (1 << (mysqlParser.ARMSCII8 - 564)) | (1 << (mysqlParser.ASCII - 564)) | (1 << (mysqlParser.BIG5 - 564)) | (1 << (mysqlParser.CP1250 - 564)) | (1 << (mysqlParser.CP1251 - 564)) | (1 << (mysqlParser.CP1256 - 564)) | (1 << (mysqlParser.CP1257 - 564)) | (1 << (mysqlParser.CP850 - 564)) | (1 << (mysqlParser.CP852 - 564)) | (1 << (mysqlParser.CP866 - 564)) | (1 << (mysqlParser.CP932 - 564)) | (1 << (mysqlParser.DEC8 - 564)) | (1 << (mysqlParser.EUCJPMS - 564)) | (1 << (mysqlParser.EUCKR - 564)) | (1 << (mysqlParser.GB2312 - 564)) | (1 << (mysqlParser.GBK - 564)) | (1 << (mysqlParser.GEOSTD8 - 564)) | (1 << (mysqlParser.GREEK - 564)) | (1 << (mysqlParser.HEBREW - 564)) | (1 << (mysqlParser.HP8 - 564)) | (1 << (mysqlParser.KEYBCS2 - 564)) | (1 << (mysqlParser.KOI8R - 564)) | (1 << (mysqlParser.KOI8U - 564)) | (1 << (mysqlParser.LATIN1 - 564)) | (1 << (mysqlParser.LATIN2 - 564)) | (1 << (mysqlParser.LATIN5 - 564)) | (1 << (mysqlParser.LATIN7 - 564)) | (1 << (mysqlParser.MACCE - 564)) | (1 << (mysqlParser.MACROMAN - 564)) | (1 << (mysqlParser.SJIS - 564)) | (1 << (mysqlParser.SWE7 - 564)) | (1 << (mysqlParser.TIS620 - 564)) | (1 << (mysqlParser.UCS2 - 564)) | (1 << (mysqlParser.UJIS - 564)) | (1 << (mysqlParser.UTF16 - 564)) | (1 << (mysqlParser.UTF16LE - 564)) | (1 << (mysqlParser.UTF32 - 564)) | (1 << (mysqlParser.UTF8 - 564)) | (1 << (mysqlParser.UTF8MB3 - 564)) | (1 << (mysqlParser.UTF8MB4 - 564)) | (1 << (mysqlParser.ARCHIVE - 564)) | (1 << (mysqlParser.BLACKHOLE - 564)) | (1 << (mysqlParser.CSV - 564)) | (1 << (mysqlParser.FEDERATED - 564)) | (1 << (mysqlParser.INNODB - 564)) | (1 << (mysqlParser.MEMORY - 564)) | (1 << (mysqlParser.MRG_MYISAM - 564)) | (1 << (mysqlParser.MYISAM - 564)) | (1 << (mysqlParser.NDB - 564)) | (1 << (mysqlParser.NDBCLUSTER - 564)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (mysqlParser.REPEATABLE - 564)) | (1 << (mysqlParser.COMMITTED - 564)) | (1 << (mysqlParser.UNCOMMITTED - 564)) | (1 << (mysqlParser.SERIALIZABLE - 564)) | (1 << (mysqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (mysqlParser.LINESTRING - 564)) | (1 << (mysqlParser.MULTILINESTRING - 564)) | (1 << (mysqlParser.MULTIPOINT - 564)) | (1 << (mysqlParser.MULTIPOLYGON - 564)) | (1 << (mysqlParser.POINT - 564)) | (1 << (mysqlParser.POLYGON - 564)) | (1 << (mysqlParser.ABS - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (mysqlParser.ACOS - 628)) | (1 << (mysqlParser.ADDDATE - 628)) | (1 << (mysqlParser.ADDTIME - 628)) | (1 << (mysqlParser.AES_DECRYPT - 628)) | (1 << (mysqlParser.AES_ENCRYPT - 628)) | (1 << (mysqlParser.AREA - 628)) | (1 << (mysqlParser.ASBINARY - 628)) | (1 << (mysqlParser.ASIN - 628)) | (1 << (mysqlParser.ASTEXT - 628)) | (1 << (mysqlParser.ASWKB - 628)) | (1 << (mysqlParser.ASWKT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (mysqlParser.ATAN - 628)) | (1 << (mysqlParser.ATAN2 - 628)) | (1 << (mysqlParser.BENCHMARK - 628)) | (1 << (mysqlParser.BIN - 628)) | (1 << (mysqlParser.BIT_COUNT - 628)) | (1 << (mysqlParser.BIT_LENGTH - 628)) | (1 << (mysqlParser.BUFFER - 628)) | (1 << (mysqlParser.CEIL - 628)) | (1 << (mysqlParser.CEILING - 628)) | (1 << (mysqlParser.CENTROID - 628)) | (1 << (mysqlParser.CHARACTER_LENGTH - 628)) | (1 << (mysqlParser.CHARSET - 628)) | (1 << (mysqlParser.CHAR_LENGTH - 628)) | (1 << (mysqlParser.COERCIBILITY - 628)) | (1 << (mysqlParser.COLLATION - 628)) | (1 << (mysqlParser.COMPRESS - 628)) | (1 << (mysqlParser.CONCAT - 628)) | (1 << (mysqlParser.CONCAT_WS - 628)) | (1 << (mysqlParser.CONNECTION_ID - 628)) | (1 << (mysqlParser.CONV - 628)) | (1 << (mysqlParser.CONVERT_TZ - 628)) | (1 << (mysqlParser.COS - 628)) | (1 << (mysqlParser.COT - 628)) | (1 << (mysqlParser.CRC32 - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (mysqlParser.CREATE_DIGEST - 628)) | (1 << (mysqlParser.CROSSES - 628)) | (1 << (mysqlParser.DATEDIFF - 628)) | (1 << (mysqlParser.DATE_FORMAT - 628)) | (1 << (mysqlParser.DAYNAME - 628)) | (1 << (mysqlParser.DAYOFMONTH - 628)) | (1 << (mysqlParser.DAYOFWEEK - 628)) | (1 << (mysqlParser.DAYOFYEAR - 628)) | (1 << (mysqlParser.DECODE - 628)) | (1 << (mysqlParser.DEGREES - 628)) | (1 << (mysqlParser.DES_DECRYPT - 628)) | (1 << (mysqlParser.DES_ENCRYPT - 628)) | (1 << (mysqlParser.DIMENSION - 628)) | (1 << (mysqlParser.DISJOINT - 628)) | (1 << (mysqlParser.ELT - 628)) | (1 << (mysqlParser.ENCODE - 628)) | (1 << (mysqlParser.ENCRYPT - 628)) | (1 << (mysqlParser.ENDPOINT - 628)) | (1 << (mysqlParser.ENVELOPE - 628)) | (1 << (mysqlParser.EQUALS - 628)) | (1 << (mysqlParser.EXP - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (mysqlParser.EXPORT_SET - 692)) | (1 << (mysqlParser.EXTERIORRING - 692)) | (1 << (mysqlParser.EXTRACTVALUE - 692)) | (1 << (mysqlParser.FIELD - 692)) | (1 << (mysqlParser.FIND_IN_SET - 692)) | (1 << (mysqlParser.FLOOR - 692)) | (1 << (mysqlParser.FORMAT - 692)) | (1 << (mysqlParser.FOUND_ROWS - 692)) | (1 << (mysqlParser.FROM_BASE64 - 692)) | (1 << (mysqlParser.FROM_DAYS - 692)) | (1 << (mysqlParser.FROM_UNIXTIME - 692)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYN - 692)) | (1 << (mysqlParser.GEOMETRYTYPE - 692)) | (1 << (mysqlParser.GEOMFROMTEXT - 692)) | (1 << (mysqlParser.GEOMFROMWKB - 692)) | (1 << (mysqlParser.GET_FORMAT - 692)) | (1 << (mysqlParser.GET_LOCK - 692)) | (1 << (mysqlParser.GLENGTH - 692)) | (1 << (mysqlParser.GREATEST - 692)) | (1 << (mysqlParser.GTID_SUBSET - 692)) | (1 << (mysqlParser.GTID_SUBTRACT - 692)) | (1 << (mysqlParser.HEX - 692)) | (1 << (mysqlParser.IFNULL - 692)) | (1 << (mysqlParser.INET6_ATON - 692)) | (1 << (mysqlParser.INET6_NTOA - 692)) | (1 << (mysqlParser.INET_ATON - 692)) | (1 << (mysqlParser.INET_NTOA - 692)) | (1 << (mysqlParser.INSTR - 692)) | (1 << (mysqlParser.INTERIORRINGN - 692)) | (1 << (mysqlParser.INTERSECTS - 692)) | (1 << (mysqlParser.ISCLOSED - 692)) | (1 << (mysqlParser.ISEMPTY - 692)) | (1 << (mysqlParser.ISNULL - 692)) | (1 << (mysqlParser.ISSIMPLE - 692)) | (1 << (mysqlParser.IS_FREE_LOCK - 692)) | (1 << (mysqlParser.IS_IPV4 - 692)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 692)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 692)) | (1 << (mysqlParser.IS_IPV6 - 692)) | (1 << (mysqlParser.IS_USED_LOCK - 692)) | (1 << (mysqlParser.LAST_INSERT_ID - 692)) | (1 << (mysqlParser.LCASE - 692)) | (1 << (mysqlParser.LEAST - 692)) | (1 << (mysqlParser.LENGTH - 692)) | (1 << (mysqlParser.LINEFROMTEXT - 692)) | (1 << (mysqlParser.LINEFROMWKB - 692)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 692)) | (1 << (mysqlParser.LN - 692)) | (1 << (mysqlParser.LOAD_FILE - 692)) | (1 << (mysqlParser.LOCATE - 692)) | (1 << (mysqlParser.LOG - 692)) | (1 << (mysqlParser.LOG10 - 692)) | (1 << (mysqlParser.LOG2 - 692)) | (1 << (mysqlParser.LOWER - 692)) | (1 << (mysqlParser.LPAD - 692)) | (1 << (mysqlParser.LTRIM - 692)) | (1 << (mysqlParser.MAKEDATE - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (mysqlParser.MAKETIME - 756)) | (1 << (mysqlParser.MAKE_SET - 756)) | (1 << (mysqlParser.MASTER_POS_WAIT - 756)) | (1 << (mysqlParser.MBRCONTAINS - 756)) | (1 << (mysqlParser.MBRDISJOINT - 756)) | (1 << (mysqlParser.MBREQUAL - 756)) | (1 << (mysqlParser.MBRINTERSECTS - 756)) | (1 << (mysqlParser.MBROVERLAPS - 756)) | (1 << (mysqlParser.MBRTOUCHES - 756)) | (1 << (mysqlParser.MBRWITHIN - 756)) | (1 << (mysqlParser.MD5 - 756)) | (1 << (mysqlParser.MLINEFROMTEXT - 756)) | (1 << (mysqlParser.MLINEFROMWKB - 756)) | (1 << (mysqlParser.MONTHNAME - 756)) | (1 << (mysqlParser.MPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MPOINTFROMWKB - 756)) | (1 << (mysqlParser.MPOLYFROMTEXT - 756)) | (1 << (mysqlParser.MPOLYFROMWKB - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (mysqlParser.NAME_CONST - 756)) | (1 << (mysqlParser.NULLIF - 756)) | (1 << (mysqlParser.NUMGEOMETRIES - 756)) | (1 << (mysqlParser.NUMINTERIORRINGS - 756)) | (1 << (mysqlParser.NUMPOINTS - 756)) | (1 << (mysqlParser.OCT - 756)) | (1 << (mysqlParser.OCTET_LENGTH - 756)) | (1 << (mysqlParser.ORD - 756)) | (1 << (mysqlParser.OVERLAPS - 756)) | (1 << (mysqlParser.PERIOD_ADD - 756)) | (1 << (mysqlParser.PERIOD_DIFF - 756)) | (1 << (mysqlParser.PI - 756)) | (1 << (mysqlParser.POINTFROMTEXT - 756)) | (1 << (mysqlParser.POINTFROMWKB - 756)) | (1 << (mysqlParser.POINTN - 756)) | (1 << (mysqlParser.POLYFROMTEXT - 756)) | (1 << (mysqlParser.POLYFROMWKB - 756)) | (1 << (mysqlParser.POLYGONFROMTEXT - 756)) | (1 << (mysqlParser.POLYGONFROMWKB - 756)) | (1 << (mysqlParser.POW - 756)) | (1 << (mysqlParser.POWER - 756)) | (1 << (mysqlParser.QUOTE - 756)) | (1 << (mysqlParser.RADIANS - 756)) | (1 << (mysqlParser.RAND - 756)) | (1 << (mysqlParser.RANDOM_BYTES - 756)) | (1 << (mysqlParser.RELEASE_LOCK - 756)) | (1 << (mysqlParser.REVERSE - 756)) | (1 << (mysqlParser.ROUND - 756)) | (1 << (mysqlParser.ROW_COUNT - 756)) | (1 << (mysqlParser.RPAD - 756)) | (1 << (mysqlParser.RTRIM - 756)) | (1 << (mysqlParser.SEC_TO_TIME - 756)) | (1 << (mysqlParser.SESSION_USER - 756)) | (1 << (mysqlParser.SHA - 756)) | (1 << (mysqlParser.SHA1 - 756)) | (1 << (mysqlParser.SHA2 - 756)) | (1 << (mysqlParser.SIGN - 756)) | (1 << (mysqlParser.SIN - 756)) | (1 << (mysqlParser.SLEEP - 756)) | (1 << (mysqlParser.SOUNDEX - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (mysqlParser.SQRT - 820)) | (1 << (mysqlParser.SRID - 820)) | (1 << (mysqlParser.STARTPOINT - 820)) | (1 << (mysqlParser.STRCMP - 820)) | (1 << (mysqlParser.STR_TO_DATE - 820)) | (1 << (mysqlParser.ST_AREA - 820)) | (1 << (mysqlParser.ST_ASBINARY - 820)) | (1 << (mysqlParser.ST_ASTEXT - 820)) | (1 << (mysqlParser.ST_ASWKB - 820)) | (1 << (mysqlParser.ST_ASWKT - 820)) | (1 << (mysqlParser.ST_BUFFER - 820)) | (1 << (mysqlParser.ST_CENTROID - 820)) | (1 << (mysqlParser.ST_CONTAINS - 820)) | (1 << (mysqlParser.ST_CROSSES - 820)) | (1 << (mysqlParser.ST_DIFFERENCE - 820)) | (1 << (mysqlParser.ST_DIMENSION - 820)) | (1 << (mysqlParser.ST_DISJOINT - 820)) | (1 << (mysqlParser.ST_DISTANCE - 820)) | (1 << (mysqlParser.ST_ENDPOINT - 820)) | (1 << (mysqlParser.ST_ENVELOPE - 820)) | (1 << (mysqlParser.ST_EQUALS - 820)) | (1 << (mysqlParser.ST_EXTERIORRING - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYN - 820)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 820)) | (1 << (mysqlParser.ST_INTERIORRINGN - 820)) | (1 << (mysqlParser.ST_INTERSECTION - 820)) | (1 << (mysqlParser.ST_INTERSECTS - 820)) | (1 << (mysqlParser.ST_ISCLOSED - 820)) | (1 << (mysqlParser.ST_ISEMPTY - 820)) | (1 << (mysqlParser.ST_ISSIMPLE - 820)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINEFROMWKB - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (mysqlParser.ST_NUMPOINTS - 820)) | (1 << (mysqlParser.ST_OVERLAPS - 820)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 820)) | (1 << (mysqlParser.ST_POINTFROMWKB - 820)) | (1 << (mysqlParser.ST_POINTN - 820)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYFROMWKB - 820)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (mysqlParser.ST_SRID - 820)) | (1 << (mysqlParser.ST_STARTPOINT - 820)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (mysqlParser.ST_TOUCHES - 820)) | (1 << (mysqlParser.ST_UNION - 820)) | (1 << (mysqlParser.ST_WITHIN - 820)) | (1 << (mysqlParser.ST_X - 820)) | (1 << (mysqlParser.ST_Y - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (mysqlParser.SUBDATE - 884)) | (1 << (mysqlParser.SUBSTRING_INDEX - 884)) | (1 << (mysqlParser.SUBTIME - 884)) | (1 << (mysqlParser.SYSTEM_USER - 884)) | (1 << (mysqlParser.TAN - 884)) | (1 << (mysqlParser.TIMEDIFF - 884)) | (1 << (mysqlParser.TIMESTAMPADD - 884)) | (1 << (mysqlParser.TIMESTAMPDIFF - 884)) | (1 << (mysqlParser.TIME_FORMAT - 884)) | (1 << (mysqlParser.TIME_TO_SEC - 884)) | (1 << (mysqlParser.TOUCHES - 884)) | (1 << (mysqlParser.TO_BASE64 - 884)) | (1 << (mysqlParser.TO_DAYS - 884)) | (1 << (mysqlParser.TO_SECONDS - 884)) | (1 << (mysqlParser.UCASE - 884)) | (1 << (mysqlParser.UNCOMPRESS - 884)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (mysqlParser.UNHEX - 884)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 884)) | (1 << (mysqlParser.UPDATEXML - 884)) | (1 << (mysqlParser.UPPER - 884)) | (1 << (mysqlParser.UUID - 884)) | (1 << (mysqlParser.UUID_SHORT - 884)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (mysqlParser.VERSION - 884)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (mysqlParser.WEEKDAY - 884)) | (1 << (mysqlParser.WEEKOFYEAR - 884)) | (1 << (mysqlParser.WEIGHT_STRING - 884)) | (1 << (mysqlParser.WITHIN - 884)) | (1 << (mysqlParser.YEARWEEK - 884)) | (1 << (mysqlParser.Y_FUNCTION - 884)) | (1 << (mysqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 954)) & ~0x3f) == 0 and ((1 << (_la - 954)) & ((1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 954)) | (1 << (mysqlParser.ID - 954)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 954)))) != 0):
                    self.state = 1895
                    self.uid()


                self.state = 1899 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1898
                    self.createDatabaseOption()
                    self.state = 1901 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << mysqlParser.CHARACTER) | (1 << mysqlParser.COLLATE) | (1 << mysqlParser.DEFAULT))) != 0)):
                        break

                pass

            elif la_ == 2:
                localctx = mysqlParser.AlterUpgradeNameContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1903
                self.match(mysqlParser.ALTER)
                self.state = 1904
                localctx.dbFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.DATABASE or _la==mysqlParser.SCHEMA):
                    localctx.dbFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1905
                self.uid()
                self.state = 1906
                self.match(mysqlParser.UPGRADE)
                self.state = 1907
                self.match(mysqlParser.DATA)
                self.state = 1908
                self.match(mysqlParser.DIRECTORY)
                self.state = 1909
                self.match(mysqlParser.NAME)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterEventContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(mysqlParser.ALTER, 0)

        def EVENT(self):
            return self.getToken(mysqlParser.EVENT, 0)

        def fullId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.FullIdContext)
            else:
                return self.getTypedRuleContext(mysqlParser.FullIdContext,i)


        def ownerStatement(self):
            return self.getTypedRuleContext(mysqlParser.OwnerStatementContext,0)


        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.ON)
            else:
                return self.getToken(mysqlParser.ON, i)

        def SCHEDULE(self):
            return self.getToken(mysqlParser.SCHEDULE, 0)

        def scheduleExpression(self):
            return self.getTypedRuleContext(mysqlParser.ScheduleExpressionContext,0)


        def COMPLETION(self):
            return self.getToken(mysqlParser.COMPLETION, 0)

        def PRESERVE(self):
            return self.getToken(mysqlParser.PRESERVE, 0)

        def RENAME(self):
            return self.getToken(mysqlParser.RENAME, 0)

        def TO(self):
            return self.getToken(mysqlParser.TO, 0)

        def enableType(self):
            return self.getTypedRuleContext(mysqlParser.EnableTypeContext,0)


        def COMMENT(self):
            return self.getToken(mysqlParser.COMMENT, 0)

        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def DO(self):
            return self.getToken(mysqlParser.DO, 0)

        def routineBody(self):
            return self.getTypedRuleContext(mysqlParser.RoutineBodyContext,0)


        def NOT(self):
            return self.getToken(mysqlParser.NOT, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_alterEvent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterEvent" ):
                listener.enterAlterEvent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterEvent" ):
                listener.exitAlterEvent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterEvent" ):
                return visitor.visitAlterEvent(self)
            else:
                return visitor.visitChildren(self)




    def alterEvent(self):

        localctx = mysqlParser.AlterEventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_alterEvent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1913
            self.match(mysqlParser.ALTER)
            self.state = 1915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.DEFINER:
                self.state = 1914
                self.ownerStatement()


            self.state = 1917
            self.match(mysqlParser.EVENT)
            self.state = 1918
            self.fullId()
            self.state = 1922
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
            if la_ == 1:
                self.state = 1919
                self.match(mysqlParser.ON)
                self.state = 1920
                self.match(mysqlParser.SCHEDULE)
                self.state = 1921
                self.scheduleExpression()


            self.state = 1930
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.ON:
                self.state = 1924
                self.match(mysqlParser.ON)
                self.state = 1925
                self.match(mysqlParser.COMPLETION)
                self.state = 1927
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.NOT:
                    self.state = 1926
                    self.match(mysqlParser.NOT)


                self.state = 1929
                self.match(mysqlParser.PRESERVE)


            self.state = 1935
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.RENAME:
                self.state = 1932
                self.match(mysqlParser.RENAME)
                self.state = 1933
                self.match(mysqlParser.TO)
                self.state = 1934
                self.fullId()


            self.state = 1938
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.DISABLE or _la==mysqlParser.ENABLE:
                self.state = 1937
                self.enableType()


            self.state = 1942
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.COMMENT:
                self.state = 1940
                self.match(mysqlParser.COMMENT)
                self.state = 1941
                self.match(mysqlParser.STRING_LITERAL)


            self.state = 1946
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.DO:
                self.state = 1944
                self.match(mysqlParser.DO)
                self.state = 1945
                self.routineBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(mysqlParser.ALTER, 0)

        def FUNCTION(self):
            return self.getToken(mysqlParser.FUNCTION, 0)

        def fullId(self):
            return self.getTypedRuleContext(mysqlParser.FullIdContext,0)


        def routineOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.RoutineOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.RoutineOptionContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_alterFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterFunction" ):
                listener.enterAlterFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterFunction" ):
                listener.exitAlterFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterFunction" ):
                return visitor.visitAlterFunction(self)
            else:
                return visitor.visitChildren(self)




    def alterFunction(self):

        localctx = mysqlParser.AlterFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_alterFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1948
            self.match(mysqlParser.ALTER)
            self.state = 1949
            self.match(mysqlParser.FUNCTION)
            self.state = 1950
            self.fullId()
            self.state = 1954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.DETERMINISTIC or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (mysqlParser.MODIFIES - 95)) | (1 << (mysqlParser.NOT - 95)) | (1 << (mysqlParser.READS - 95)) | (1 << (mysqlParser.SQL - 95)))) != 0) or _la==mysqlParser.COMMENT or _la==mysqlParser.CONTAINS or _la==mysqlParser.LANGUAGE or _la==mysqlParser.NO:
                self.state = 1951
                self.routineOption()
                self.state = 1956
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterInstanceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(mysqlParser.ALTER, 0)

        def INSTANCE(self):
            return self.getToken(mysqlParser.INSTANCE, 0)

        def ROTATE(self):
            return self.getToken(mysqlParser.ROTATE, 0)

        def INNODB(self):
            return self.getToken(mysqlParser.INNODB, 0)

        def MASTER(self):
            return self.getToken(mysqlParser.MASTER, 0)

        def KEY(self):
            return self.getToken(mysqlParser.KEY, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_alterInstance

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterInstance" ):
                listener.enterAlterInstance(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterInstance" ):
                listener.exitAlterInstance(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterInstance" ):
                return visitor.visitAlterInstance(self)
            else:
                return visitor.visitChildren(self)




    def alterInstance(self):

        localctx = mysqlParser.AlterInstanceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_alterInstance)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1957
            self.match(mysqlParser.ALTER)
            self.state = 1958
            self.match(mysqlParser.INSTANCE)
            self.state = 1959
            self.match(mysqlParser.ROTATE)
            self.state = 1960
            self.match(mysqlParser.INNODB)
            self.state = 1961
            self.match(mysqlParser.MASTER)
            self.state = 1962
            self.match(mysqlParser.KEY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterLogfileGroupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(mysqlParser.ALTER, 0)

        def LOGFILE(self):
            return self.getToken(mysqlParser.LOGFILE, 0)

        def GROUP(self):
            return self.getToken(mysqlParser.GROUP, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def ADD(self):
            return self.getToken(mysqlParser.ADD, 0)

        def UNDOFILE(self):
            return self.getToken(mysqlParser.UNDOFILE, 0)

        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def ENGINE(self):
            return self.getToken(mysqlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(mysqlParser.EngineNameContext,0)


        def INITIAL_SIZE(self):
            return self.getToken(mysqlParser.INITIAL_SIZE, 0)

        def fileSizeLiteral(self):
            return self.getTypedRuleContext(mysqlParser.FileSizeLiteralContext,0)


        def WAIT(self):
            return self.getToken(mysqlParser.WAIT, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_alterLogfileGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterLogfileGroup" ):
                listener.enterAlterLogfileGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterLogfileGroup" ):
                listener.exitAlterLogfileGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterLogfileGroup" ):
                return visitor.visitAlterLogfileGroup(self)
            else:
                return visitor.visitChildren(self)




    def alterLogfileGroup(self):

        localctx = mysqlParser.AlterLogfileGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_alterLogfileGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1964
            self.match(mysqlParser.ALTER)
            self.state = 1965
            self.match(mysqlParser.LOGFILE)
            self.state = 1966
            self.match(mysqlParser.GROUP)
            self.state = 1967
            self.uid()
            self.state = 1968
            self.match(mysqlParser.ADD)
            self.state = 1969
            self.match(mysqlParser.UNDOFILE)
            self.state = 1970
            self.match(mysqlParser.STRING_LITERAL)
            self.state = 1976
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.INITIAL_SIZE:
                self.state = 1971
                self.match(mysqlParser.INITIAL_SIZE)
                self.state = 1973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 1972
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 1975
                self.fileSizeLiteral()


            self.state = 1979
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.WAIT:
                self.state = 1978
                self.match(mysqlParser.WAIT)


            self.state = 1981
            self.match(mysqlParser.ENGINE)
            self.state = 1983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.EQUAL_SYMBOL:
                self.state = 1982
                self.match(mysqlParser.EQUAL_SYMBOL)


            self.state = 1985
            self.engineName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterProcedureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(mysqlParser.ALTER, 0)

        def PROCEDURE(self):
            return self.getToken(mysqlParser.PROCEDURE, 0)

        def fullId(self):
            return self.getTypedRuleContext(mysqlParser.FullIdContext,0)


        def routineOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.RoutineOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.RoutineOptionContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_alterProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterProcedure" ):
                listener.enterAlterProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterProcedure" ):
                listener.exitAlterProcedure(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterProcedure" ):
                return visitor.visitAlterProcedure(self)
            else:
                return visitor.visitChildren(self)




    def alterProcedure(self):

        localctx = mysqlParser.AlterProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_alterProcedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1987
            self.match(mysqlParser.ALTER)
            self.state = 1988
            self.match(mysqlParser.PROCEDURE)
            self.state = 1989
            self.fullId()
            self.state = 1993
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.DETERMINISTIC or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (mysqlParser.MODIFIES - 95)) | (1 << (mysqlParser.NOT - 95)) | (1 << (mysqlParser.READS - 95)) | (1 << (mysqlParser.SQL - 95)))) != 0) or _la==mysqlParser.COMMENT or _la==mysqlParser.CONTAINS or _la==mysqlParser.LANGUAGE or _la==mysqlParser.NO:
                self.state = 1990
                self.routineOption()
                self.state = 1995
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterServerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(mysqlParser.ALTER, 0)

        def SERVER(self):
            return self.getToken(mysqlParser.SERVER, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def OPTIONS(self):
            return self.getToken(mysqlParser.OPTIONS, 0)

        def serverOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.ServerOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.ServerOptionContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_alterServer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterServer" ):
                listener.enterAlterServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterServer" ):
                listener.exitAlterServer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterServer" ):
                return visitor.visitAlterServer(self)
            else:
                return visitor.visitChildren(self)




    def alterServer(self):

        localctx = mysqlParser.AlterServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_alterServer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1996
            self.match(mysqlParser.ALTER)
            self.state = 1997
            self.match(mysqlParser.SERVER)
            self.state = 1998
            self.uid()
            self.state = 1999
            self.match(mysqlParser.OPTIONS)
            self.state = 2000
            self.match(mysqlParser.LR_BRACKET)
            self.state = 2001
            self.serverOption()
            self.state = 2006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.COMMA:
                self.state = 2002
                self.match(mysqlParser.COMMA)
                self.state = 2003
                self.serverOption()
                self.state = 2008
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2009
            self.match(mysqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.creationPlace = None # Token

        def ALTER(self):
            return self.getToken(mysqlParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(mysqlParser.TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(mysqlParser.TableNameContext,0)


        def alterSpecification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.AlterSpecificationContext)
            else:
                return self.getTypedRuleContext(mysqlParser.AlterSpecificationContext,i)


        def IGNORE(self):
            return self.getToken(mysqlParser.IGNORE, 0)

        def partitionDefinitions(self):
            return self.getTypedRuleContext(mysqlParser.PartitionDefinitionsContext,0)


        def ONLINE(self):
            return self.getToken(mysqlParser.ONLINE, 0)

        def OFFLINE(self):
            return self.getToken(mysqlParser.OFFLINE, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_alterTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTable" ):
                listener.enterAlterTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTable" ):
                listener.exitAlterTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTable" ):
                return visitor.visitAlterTable(self)
            else:
                return visitor.visitChildren(self)




    def alterTable(self):

        localctx = mysqlParser.AlterTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_alterTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2011
            self.match(mysqlParser.ALTER)
            self.state = 2013
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.OFFLINE or _la==mysqlParser.ONLINE:
                self.state = 2012
                localctx.creationPlace = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.OFFLINE or _la==mysqlParser.ONLINE):
                    localctx.creationPlace = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2016
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.IGNORE:
                self.state = 2015
                self.match(mysqlParser.IGNORE)


            self.state = 2018
            self.match(mysqlParser.TABLE)
            self.state = 2019
            self.tableName()
            self.state = 2020
            self.alterSpecification()
            self.state = 2025
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.COMMA:
                self.state = 2021
                self.match(mysqlParser.COMMA)
                self.state = 2022
                self.alterSpecification()
                self.state = 2027
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2029
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.PARTITION:
                self.state = 2028
                self.partitionDefinitions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterTablespaceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(mysqlParser.ALTER, 0)

        def TABLESPACE(self):
            return self.getToken(mysqlParser.TABLESPACE, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def DATAFILE(self):
            return self.getToken(mysqlParser.DATAFILE, 0)

        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def ENGINE(self):
            return self.getToken(mysqlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(mysqlParser.EngineNameContext,0)


        def ADD(self):
            return self.getToken(mysqlParser.ADD, 0)

        def DROP(self):
            return self.getToken(mysqlParser.DROP, 0)

        def INITIAL_SIZE(self):
            return self.getToken(mysqlParser.INITIAL_SIZE, 0)

        def fileSizeLiteral(self):
            return self.getTypedRuleContext(mysqlParser.FileSizeLiteralContext,0)


        def WAIT(self):
            return self.getToken(mysqlParser.WAIT, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_alterTablespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTablespace" ):
                listener.enterAlterTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTablespace" ):
                listener.exitAlterTablespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTablespace" ):
                return visitor.visitAlterTablespace(self)
            else:
                return visitor.visitChildren(self)




    def alterTablespace(self):

        localctx = mysqlParser.AlterTablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_alterTablespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2031
            self.match(mysqlParser.ALTER)
            self.state = 2032
            self.match(mysqlParser.TABLESPACE)
            self.state = 2033
            self.uid()
            self.state = 2034
            _la = self._input.LA(1)
            if not(_la==mysqlParser.ADD or _la==mysqlParser.DROP):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2035
            self.match(mysqlParser.DATAFILE)
            self.state = 2036
            self.match(mysqlParser.STRING_LITERAL)
            self.state = 2040
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.INITIAL_SIZE:
                self.state = 2037
                self.match(mysqlParser.INITIAL_SIZE)
                self.state = 2038
                self.match(mysqlParser.EQUAL_SYMBOL)
                self.state = 2039
                self.fileSizeLiteral()


            self.state = 2043
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.WAIT:
                self.state = 2042
                self.match(mysqlParser.WAIT)


            self.state = 2045
            self.match(mysqlParser.ENGINE)
            self.state = 2047
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.EQUAL_SYMBOL:
                self.state = 2046
                self.match(mysqlParser.EQUAL_SYMBOL)


            self.state = 2049
            self.engineName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterViewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.algType = None # Token
            self.secContext = None # Token
            self.checkOpt = None # Token

        def ALTER(self):
            return self.getToken(mysqlParser.ALTER, 0)

        def VIEW(self):
            return self.getToken(mysqlParser.VIEW, 0)

        def fullId(self):
            return self.getTypedRuleContext(mysqlParser.FullIdContext,0)


        def AS(self):
            return self.getToken(mysqlParser.AS, 0)

        def selectStatement(self):
            return self.getTypedRuleContext(mysqlParser.SelectStatementContext,0)


        def ALGORITHM(self):
            return self.getToken(mysqlParser.ALGORITHM, 0)

        def ownerStatement(self):
            return self.getTypedRuleContext(mysqlParser.OwnerStatementContext,0)


        def SQL(self):
            return self.getToken(mysqlParser.SQL, 0)

        def SECURITY(self):
            return self.getToken(mysqlParser.SECURITY, 0)

        def uidList(self):
            return self.getTypedRuleContext(mysqlParser.UidListContext,0)


        def WITH(self):
            return self.getToken(mysqlParser.WITH, 0)

        def CHECK(self):
            return self.getToken(mysqlParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(mysqlParser.OPTION, 0)

        def UNDEFINED(self):
            return self.getToken(mysqlParser.UNDEFINED, 0)

        def MERGE(self):
            return self.getToken(mysqlParser.MERGE, 0)

        def TEMPTABLE(self):
            return self.getToken(mysqlParser.TEMPTABLE, 0)

        def DEFINER(self):
            return self.getToken(mysqlParser.DEFINER, 0)

        def INVOKER(self):
            return self.getToken(mysqlParser.INVOKER, 0)

        def CASCADED(self):
            return self.getToken(mysqlParser.CASCADED, 0)

        def LOCAL(self):
            return self.getToken(mysqlParser.LOCAL, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_alterView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterView" ):
                listener.enterAlterView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterView" ):
                listener.exitAlterView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterView" ):
                return visitor.visitAlterView(self)
            else:
                return visitor.visitChildren(self)




    def alterView(self):

        localctx = mysqlParser.AlterViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_alterView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2051
            self.match(mysqlParser.ALTER)
            self.state = 2055
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.ALGORITHM:
                self.state = 2052
                self.match(mysqlParser.ALGORITHM)
                self.state = 2053
                self.match(mysqlParser.EQUAL_SYMBOL)
                self.state = 2054
                localctx.algType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.MERGE or _la==mysqlParser.TEMPTABLE or _la==mysqlParser.UNDEFINED):
                    localctx.algType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2058
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.DEFINER:
                self.state = 2057
                self.ownerStatement()


            self.state = 2063
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.SQL:
                self.state = 2060
                self.match(mysqlParser.SQL)
                self.state = 2061
                self.match(mysqlParser.SECURITY)
                self.state = 2062
                localctx.secContext = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.DEFINER or _la==mysqlParser.INVOKER):
                    localctx.secContext = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2065
            self.match(mysqlParser.VIEW)
            self.state = 2066
            self.fullId()
            self.state = 2071
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.LR_BRACKET:
                self.state = 2067
                self.match(mysqlParser.LR_BRACKET)
                self.state = 2068
                self.uidList()
                self.state = 2069
                self.match(mysqlParser.RR_BRACKET)


            self.state = 2073
            self.match(mysqlParser.AS)
            self.state = 2074
            self.selectStatement()
            self.state = 2081
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.WITH:
                self.state = 2075
                self.match(mysqlParser.WITH)
                self.state = 2077
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.CASCADED or _la==mysqlParser.LOCAL:
                    self.state = 2076
                    localctx.checkOpt = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==mysqlParser.CASCADED or _la==mysqlParser.LOCAL):
                        localctx.checkOpt = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2079
                self.match(mysqlParser.CHECK)
                self.state = 2080
                self.match(mysqlParser.OPTION)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterSpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_alterSpecification

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AlterByDisableKeysContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DISABLE(self):
            return self.getToken(mysqlParser.DISABLE, 0)
        def KEYS(self):
            return self.getToken(mysqlParser.KEYS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDisableKeys" ):
                listener.enterAlterByDisableKeys(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDisableKeys" ):
                listener.exitAlterByDisableKeys(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByDisableKeys" ):
                return visitor.visitAlterByDisableKeys(self)
            else:
                return visitor.visitChildren(self)


    class AlterByConvertCharsetContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONVERT(self):
            return self.getToken(mysqlParser.CONVERT, 0)
        def TO(self):
            return self.getToken(mysqlParser.TO, 0)
        def CHARACTER(self):
            return self.getToken(mysqlParser.CHARACTER, 0)
        def SET(self):
            return self.getToken(mysqlParser.SET, 0)
        def charsetName(self):
            return self.getTypedRuleContext(mysqlParser.CharsetNameContext,0)

        def COLLATE(self):
            return self.getToken(mysqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(mysqlParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByConvertCharset" ):
                listener.enterAlterByConvertCharset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByConvertCharset" ):
                listener.exitAlterByConvertCharset(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByConvertCharset" ):
                return visitor.visitAlterByConvertCharset(self)
            else:
                return visitor.visitChildren(self)


    class AlterByAddPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(mysqlParser.ADD, 0)
        def PARTITION(self):
            return self.getToken(mysqlParser.PARTITION, 0)
        def partitionDefinition(self):
            return self.getTypedRuleContext(mysqlParser.PartitionDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddPartition" ):
                listener.enterAlterByAddPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddPartition" ):
                listener.exitAlterByAddPartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByAddPartition" ):
                return visitor.visitAlterByAddPartition(self)
            else:
                return visitor.visitChildren(self)


    class AlterByAnalyzePartitiionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANALYZE(self):
            return self.getToken(mysqlParser.ANALYZE, 0)
        def PARTITION(self):
            return self.getToken(mysqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(mysqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(mysqlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAnalyzePartitiion" ):
                listener.enterAlterByAnalyzePartitiion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAnalyzePartitiion" ):
                listener.exitAlterByAnalyzePartitiion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByAnalyzePartitiion" ):
                return visitor.visitAlterByAnalyzePartitiion(self)
            else:
                return visitor.visitChildren(self)


    class AlterByAddForeignKeyContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.name = None # UidContext
            self.indexName = None # UidContext
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(mysqlParser.ADD, 0)
        def FOREIGN(self):
            return self.getToken(mysqlParser.FOREIGN, 0)
        def KEY(self):
            return self.getToken(mysqlParser.KEY, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(mysqlParser.IndexColumnNamesContext,0)

        def referenceDefinition(self):
            return self.getTypedRuleContext(mysqlParser.ReferenceDefinitionContext,0)

        def CONSTRAINT(self):
            return self.getToken(mysqlParser.CONSTRAINT, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UidContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UidContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddForeignKey" ):
                listener.enterAlterByAddForeignKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddForeignKey" ):
                listener.exitAlterByAddForeignKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByAddForeignKey" ):
                return visitor.visitAlterByAddForeignKey(self)
            else:
                return visitor.visitChildren(self)


    class AlterByRemovePartitioningContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REMOVE(self):
            return self.getToken(mysqlParser.REMOVE, 0)
        def PARTITIONING(self):
            return self.getToken(mysqlParser.PARTITIONING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByRemovePartitioning" ):
                listener.enterAlterByRemovePartitioning(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByRemovePartitioning" ):
                listener.exitAlterByRemovePartitioning(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByRemovePartitioning" ):
                return visitor.visitAlterByRemovePartitioning(self)
            else:
                return visitor.visitChildren(self)


    class AlterByRenameContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.renameFormat = None # Token
            self.copyFrom(ctx)

        def RENAME(self):
            return self.getToken(mysqlParser.RENAME, 0)
        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)

        def TO(self):
            return self.getToken(mysqlParser.TO, 0)
        def AS(self):
            return self.getToken(mysqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByRename" ):
                listener.enterAlterByRename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByRename" ):
                listener.exitAlterByRename(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByRename" ):
                return visitor.visitAlterByRename(self)
            else:
                return visitor.visitChildren(self)


    class AlterByOptimizePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPTIMIZE(self):
            return self.getToken(mysqlParser.OPTIMIZE, 0)
        def PARTITION(self):
            return self.getToken(mysqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(mysqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(mysqlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByOptimizePartition" ):
                listener.enterAlterByOptimizePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByOptimizePartition" ):
                listener.exitAlterByOptimizePartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByOptimizePartition" ):
                return visitor.visitAlterByOptimizePartition(self)
            else:
                return visitor.visitChildren(self)


    class AlterByImportTablespaceContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IMPORT(self):
            return self.getToken(mysqlParser.IMPORT, 0)
        def TABLESPACE(self):
            return self.getToken(mysqlParser.TABLESPACE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByImportTablespace" ):
                listener.enterAlterByImportTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByImportTablespace" ):
                listener.exitAlterByImportTablespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByImportTablespace" ):
                return visitor.visitAlterByImportTablespace(self)
            else:
                return visitor.visitChildren(self)


    class AlterByCoalescePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COALESCE(self):
            return self.getToken(mysqlParser.COALESCE, 0)
        def PARTITION(self):
            return self.getToken(mysqlParser.PARTITION, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByCoalescePartition" ):
                listener.enterAlterByCoalescePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByCoalescePartition" ):
                listener.exitAlterByCoalescePartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByCoalescePartition" ):
                return visitor.visitAlterByCoalescePartition(self)
            else:
                return visitor.visitChildren(self)


    class AlterByAddColumnsContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(mysqlParser.ADD, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UidContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UidContext,i)

        def columnDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.ColumnDefinitionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.ColumnDefinitionContext,i)

        def COLUMN(self):
            return self.getToken(mysqlParser.COLUMN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddColumns" ):
                listener.enterAlterByAddColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddColumns" ):
                listener.exitAlterByAddColumns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByAddColumns" ):
                return visitor.visitAlterByAddColumns(self)
            else:
                return visitor.visitChildren(self)


    class AlterByDropForeignKeyContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(mysqlParser.DROP, 0)
        def FOREIGN(self):
            return self.getToken(mysqlParser.FOREIGN, 0)
        def KEY(self):
            return self.getToken(mysqlParser.KEY, 0)
        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDropForeignKey" ):
                listener.enterAlterByDropForeignKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDropForeignKey" ):
                listener.exitAlterByDropForeignKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByDropForeignKey" ):
                return visitor.visitAlterByDropForeignKey(self)
            else:
                return visitor.visitChildren(self)


    class AlterByRebuildPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REBUILD(self):
            return self.getToken(mysqlParser.REBUILD, 0)
        def PARTITION(self):
            return self.getToken(mysqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(mysqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(mysqlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByRebuildPartition" ):
                listener.enterAlterByRebuildPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByRebuildPartition" ):
                listener.exitAlterByRebuildPartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByRebuildPartition" ):
                return visitor.visitAlterByRebuildPartition(self)
            else:
                return visitor.visitChildren(self)


    class AlterByUpgradePartitioningContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UPGRADE(self):
            return self.getToken(mysqlParser.UPGRADE, 0)
        def PARTITIONING(self):
            return self.getToken(mysqlParser.PARTITIONING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByUpgradePartitioning" ):
                listener.enterAlterByUpgradePartitioning(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByUpgradePartitioning" ):
                listener.exitAlterByUpgradePartitioning(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByUpgradePartitioning" ):
                return visitor.visitAlterByUpgradePartitioning(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableOptionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableOption(self):
            return self.getTypedRuleContext(mysqlParser.TableOptionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableOption" ):
                listener.enterAlterTableOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableOption" ):
                listener.exitAlterTableOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableOption" ):
                return visitor.visitAlterTableOption(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableDefaultCharsetContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHARACTER(self):
            return self.getToken(mysqlParser.CHARACTER, 0)
        def SET(self):
            return self.getToken(mysqlParser.SET, 0)
        def charsetName(self):
            return self.getTypedRuleContext(mysqlParser.CharsetNameContext,0)

        def DEFAULT(self):
            return self.getToken(mysqlParser.DEFAULT, 0)
        def COLLATE(self):
            return self.getToken(mysqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(mysqlParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableDefaultCharset" ):
                listener.enterAlterTableDefaultCharset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableDefaultCharset" ):
                listener.exitAlterTableDefaultCharset(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableDefaultCharset" ):
                return visitor.visitAlterTableDefaultCharset(self)
            else:
                return visitor.visitChildren(self)


    class AlterByRepairPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPAIR(self):
            return self.getToken(mysqlParser.REPAIR, 0)
        def PARTITION(self):
            return self.getToken(mysqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(mysqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(mysqlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByRepairPartition" ):
                listener.enterAlterByRepairPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByRepairPartition" ):
                listener.exitAlterByRepairPartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByRepairPartition" ):
                return visitor.visitAlterByRepairPartition(self)
            else:
                return visitor.visitChildren(self)


    class AlterByExchangePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.validationFormat = None # Token
            self.copyFrom(ctx)

        def EXCHANGE(self):
            return self.getToken(mysqlParser.EXCHANGE, 0)
        def PARTITION(self):
            return self.getToken(mysqlParser.PARTITION, 0)
        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.WITH)
            else:
                return self.getToken(mysqlParser.WITH, i)
        def TABLE(self):
            return self.getToken(mysqlParser.TABLE, 0)
        def tableName(self):
            return self.getTypedRuleContext(mysqlParser.TableNameContext,0)

        def VALIDATION(self):
            return self.getToken(mysqlParser.VALIDATION, 0)
        def WITHOUT(self):
            return self.getToken(mysqlParser.WITHOUT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByExchangePartition" ):
                listener.enterAlterByExchangePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByExchangePartition" ):
                listener.exitAlterByExchangePartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByExchangePartition" ):
                return visitor.visitAlterByExchangePartition(self)
            else:
                return visitor.visitChildren(self)


    class AlterByAddIndexContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.keyType = None # Token
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(mysqlParser.ADD, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(mysqlParser.IndexColumnNamesContext,0)

        def INDEX(self):
            return self.getToken(mysqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(mysqlParser.KEY, 0)
        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)

        def indexType(self):
            return self.getTypedRuleContext(mysqlParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.IndexOptionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddIndex" ):
                listener.enterAlterByAddIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddIndex" ):
                listener.exitAlterByAddIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByAddIndex" ):
                return visitor.visitAlterByAddIndex(self)
            else:
                return visitor.visitChildren(self)


    class AlterByDropColumnContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(mysqlParser.DROP, 0)
        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)

        def COLUMN(self):
            return self.getToken(mysqlParser.COLUMN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDropColumn" ):
                listener.enterAlterByDropColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDropColumn" ):
                listener.exitAlterByDropColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByDropColumn" ):
                return visitor.visitAlterByDropColumn(self)
            else:
                return visitor.visitChildren(self)


    class AlterByImportPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IMPORT(self):
            return self.getToken(mysqlParser.IMPORT, 0)
        def PARTITION(self):
            return self.getToken(mysqlParser.PARTITION, 0)
        def TABLESPACE(self):
            return self.getToken(mysqlParser.TABLESPACE, 0)
        def uidList(self):
            return self.getTypedRuleContext(mysqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(mysqlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByImportPartition" ):
                listener.enterAlterByImportPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByImportPartition" ):
                listener.exitAlterByImportPartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByImportPartition" ):
                return visitor.visitAlterByImportPartition(self)
            else:
                return visitor.visitChildren(self)


    class AlterByChangeDefaultContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(mysqlParser.ALTER, 0)
        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)

        def SET(self):
            return self.getToken(mysqlParser.SET, 0)
        def DEFAULT(self):
            return self.getToken(mysqlParser.DEFAULT, 0)
        def defaultValue(self):
            return self.getTypedRuleContext(mysqlParser.DefaultValueContext,0)

        def DROP(self):
            return self.getToken(mysqlParser.DROP, 0)
        def COLUMN(self):
            return self.getToken(mysqlParser.COLUMN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByChangeDefault" ):
                listener.enterAlterByChangeDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByChangeDefault" ):
                listener.exitAlterByChangeDefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByChangeDefault" ):
                return visitor.visitAlterByChangeDefault(self)
            else:
                return visitor.visitChildren(self)


    class AlterByForceContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FORCE(self):
            return self.getToken(mysqlParser.FORCE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByForce" ):
                listener.enterAlterByForce(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByForce" ):
                listener.exitAlterByForce(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByForce" ):
                return visitor.visitAlterByForce(self)
            else:
                return visitor.visitChildren(self)


    class AlterByDropPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(mysqlParser.DROP, 0)
        def PARTITION(self):
            return self.getToken(mysqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(mysqlParser.UidListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDropPartition" ):
                listener.enterAlterByDropPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDropPartition" ):
                listener.exitAlterByDropPartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByDropPartition" ):
                return visitor.visitAlterByDropPartition(self)
            else:
                return visitor.visitChildren(self)


    class AlterByAddSpecialIndexContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.specKeyType = None # Token
            self.keyType = None # Token
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(mysqlParser.ADD, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(mysqlParser.IndexColumnNamesContext,0)

        def FULLTEXT(self):
            return self.getToken(mysqlParser.FULLTEXT, 0)
        def SPATIAL(self):
            return self.getToken(mysqlParser.SPATIAL, 0)
        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.IndexOptionContext,i)

        def INDEX(self):
            return self.getToken(mysqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(mysqlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddSpecialIndex" ):
                listener.enterAlterByAddSpecialIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddSpecialIndex" ):
                listener.exitAlterByAddSpecialIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByAddSpecialIndex" ):
                return visitor.visitAlterByAddSpecialIndex(self)
            else:
                return visitor.visitChildren(self)


    class AlterByModifyColumnContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MODIFY(self):
            return self.getToken(mysqlParser.MODIFY, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UidContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UidContext,i)

        def columnDefinition(self):
            return self.getTypedRuleContext(mysqlParser.ColumnDefinitionContext,0)

        def COLUMN(self):
            return self.getToken(mysqlParser.COLUMN, 0)
        def FIRST(self):
            return self.getToken(mysqlParser.FIRST, 0)
        def AFTER(self):
            return self.getToken(mysqlParser.AFTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByModifyColumn" ):
                listener.enterAlterByModifyColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByModifyColumn" ):
                listener.exitAlterByModifyColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByModifyColumn" ):
                return visitor.visitAlterByModifyColumn(self)
            else:
                return visitor.visitChildren(self)


    class AlterByDropPrimaryKeyContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(mysqlParser.DROP, 0)
        def PRIMARY(self):
            return self.getToken(mysqlParser.PRIMARY, 0)
        def KEY(self):
            return self.getToken(mysqlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDropPrimaryKey" ):
                listener.enterAlterByDropPrimaryKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDropPrimaryKey" ):
                listener.exitAlterByDropPrimaryKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByDropPrimaryKey" ):
                return visitor.visitAlterByDropPrimaryKey(self)
            else:
                return visitor.visitChildren(self)


    class AlterByLockContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.lockType = None # Token
            self.copyFrom(ctx)

        def LOCK(self):
            return self.getToken(mysqlParser.LOCK, 0)
        def DEFAULT(self):
            return self.getToken(mysqlParser.DEFAULT, 0)
        def NONE(self):
            return self.getToken(mysqlParser.NONE, 0)
        def SHARED(self):
            return self.getToken(mysqlParser.SHARED, 0)
        def EXCLUSIVE(self):
            return self.getToken(mysqlParser.EXCLUSIVE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByLock" ):
                listener.enterAlterByLock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByLock" ):
                listener.exitAlterByLock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByLock" ):
                return visitor.visitAlterByLock(self)
            else:
                return visitor.visitChildren(self)


    class AlterByDiscardPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DISCARD(self):
            return self.getToken(mysqlParser.DISCARD, 0)
        def PARTITION(self):
            return self.getToken(mysqlParser.PARTITION, 0)
        def TABLESPACE(self):
            return self.getToken(mysqlParser.TABLESPACE, 0)
        def uidList(self):
            return self.getTypedRuleContext(mysqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(mysqlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDiscardPartition" ):
                listener.enterAlterByDiscardPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDiscardPartition" ):
                listener.exitAlterByDiscardPartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByDiscardPartition" ):
                return visitor.visitAlterByDiscardPartition(self)
            else:
                return visitor.visitChildren(self)


    class AlterByDiscardTablespaceContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DISCARD(self):
            return self.getToken(mysqlParser.DISCARD, 0)
        def TABLESPACE(self):
            return self.getToken(mysqlParser.TABLESPACE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDiscardTablespace" ):
                listener.enterAlterByDiscardTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDiscardTablespace" ):
                listener.exitAlterByDiscardTablespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByDiscardTablespace" ):
                return visitor.visitAlterByDiscardTablespace(self)
            else:
                return visitor.visitChildren(self)


    class AlterByValidateContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.validationFormat = None # Token
            self.copyFrom(ctx)

        def VALIDATION(self):
            return self.getToken(mysqlParser.VALIDATION, 0)
        def WITHOUT(self):
            return self.getToken(mysqlParser.WITHOUT, 0)
        def WITH(self):
            return self.getToken(mysqlParser.WITH, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByValidate" ):
                listener.enterAlterByValidate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByValidate" ):
                listener.exitAlterByValidate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByValidate" ):
                return visitor.visitAlterByValidate(self)
            else:
                return visitor.visitChildren(self)


    class AlterByAddPrimaryKeyContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.name = None # UidContext
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(mysqlParser.ADD, 0)
        def PRIMARY(self):
            return self.getToken(mysqlParser.PRIMARY, 0)
        def KEY(self):
            return self.getToken(mysqlParser.KEY, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(mysqlParser.IndexColumnNamesContext,0)

        def CONSTRAINT(self):
            return self.getToken(mysqlParser.CONSTRAINT, 0)
        def indexType(self):
            return self.getTypedRuleContext(mysqlParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.IndexOptionContext,i)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddPrimaryKey" ):
                listener.enterAlterByAddPrimaryKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddPrimaryKey" ):
                listener.exitAlterByAddPrimaryKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByAddPrimaryKey" ):
                return visitor.visitAlterByAddPrimaryKey(self)
            else:
                return visitor.visitChildren(self)


    class AlterByCheckPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHECK(self):
            return self.getToken(mysqlParser.CHECK, 0)
        def PARTITION(self):
            return self.getToken(mysqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(mysqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(mysqlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByCheckPartition" ):
                listener.enterAlterByCheckPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByCheckPartition" ):
                listener.exitAlterByCheckPartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByCheckPartition" ):
                return visitor.visitAlterByCheckPartition(self)
            else:
                return visitor.visitChildren(self)


    class AlterTableAlgorighmContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.algType = None # Token
            self.copyFrom(ctx)

        def ALGORITHM(self):
            return self.getToken(mysqlParser.ALGORITHM, 0)
        def DEFAULT(self):
            return self.getToken(mysqlParser.DEFAULT, 0)
        def INPLACE(self):
            return self.getToken(mysqlParser.INPLACE, 0)
        def COPY(self):
            return self.getToken(mysqlParser.COPY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTableAlgorighm" ):
                listener.enterAlterTableAlgorighm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTableAlgorighm" ):
                listener.exitAlterTableAlgorighm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterTableAlgorighm" ):
                return visitor.visitAlterTableAlgorighm(self)
            else:
                return visitor.visitChildren(self)


    class AlterByEnableKeysContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ENABLE(self):
            return self.getToken(mysqlParser.ENABLE, 0)
        def KEYS(self):
            return self.getToken(mysqlParser.KEYS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByEnableKeys" ):
                listener.enterAlterByEnableKeys(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByEnableKeys" ):
                listener.exitAlterByEnableKeys(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByEnableKeys" ):
                return visitor.visitAlterByEnableKeys(self)
            else:
                return visitor.visitChildren(self)


    class AlterByReorganizePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REORGANIZE(self):
            return self.getToken(mysqlParser.REORGANIZE, 0)
        def PARTITION(self):
            return self.getToken(mysqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(mysqlParser.UidListContext,0)

        def INTO(self):
            return self.getToken(mysqlParser.INTO, 0)
        def partitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.PartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.PartitionDefinitionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByReorganizePartition" ):
                listener.enterAlterByReorganizePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByReorganizePartition" ):
                listener.exitAlterByReorganizePartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByReorganizePartition" ):
                return visitor.visitAlterByReorganizePartition(self)
            else:
                return visitor.visitChildren(self)


    class AlterByChangeColumnContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.oldColumn = None # UidContext
            self.newColumn = None # UidContext
            self.afterColumn = None # UidContext
            self.copyFrom(ctx)

        def CHANGE(self):
            return self.getToken(mysqlParser.CHANGE, 0)
        def columnDefinition(self):
            return self.getTypedRuleContext(mysqlParser.ColumnDefinitionContext,0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UidContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UidContext,i)

        def COLUMN(self):
            return self.getToken(mysqlParser.COLUMN, 0)
        def FIRST(self):
            return self.getToken(mysqlParser.FIRST, 0)
        def AFTER(self):
            return self.getToken(mysqlParser.AFTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByChangeColumn" ):
                listener.enterAlterByChangeColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByChangeColumn" ):
                listener.exitAlterByChangeColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByChangeColumn" ):
                return visitor.visitAlterByChangeColumn(self)
            else:
                return visitor.visitChildren(self)


    class AlterByAddUniqueKeyContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.name = None # UidContext
            self.keyType = None # Token
            self.indexName = None # UidContext
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(mysqlParser.ADD, 0)
        def UNIQUE(self):
            return self.getToken(mysqlParser.UNIQUE, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(mysqlParser.IndexColumnNamesContext,0)

        def CONSTRAINT(self):
            return self.getToken(mysqlParser.CONSTRAINT, 0)
        def indexType(self):
            return self.getTypedRuleContext(mysqlParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.IndexOptionContext,i)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UidContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UidContext,i)

        def INDEX(self):
            return self.getToken(mysqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(mysqlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddUniqueKey" ):
                listener.enterAlterByAddUniqueKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddUniqueKey" ):
                listener.exitAlterByAddUniqueKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByAddUniqueKey" ):
                return visitor.visitAlterByAddUniqueKey(self)
            else:
                return visitor.visitChildren(self)


    class AlterByTruncatePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRUNCATE(self):
            return self.getToken(mysqlParser.TRUNCATE, 0)
        def PARTITION(self):
            return self.getToken(mysqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(mysqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(mysqlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByTruncatePartition" ):
                listener.enterAlterByTruncatePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByTruncatePartition" ):
                listener.exitAlterByTruncatePartition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByTruncatePartition" ):
                return visitor.visitAlterByTruncatePartition(self)
            else:
                return visitor.visitChildren(self)


    class AlterByDropIndexContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.keyType = None # Token
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(mysqlParser.DROP, 0)
        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)

        def INDEX(self):
            return self.getToken(mysqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(mysqlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDropIndex" ):
                listener.enterAlterByDropIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDropIndex" ):
                listener.exitAlterByDropIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByDropIndex" ):
                return visitor.visitAlterByDropIndex(self)
            else:
                return visitor.visitChildren(self)


    class AlterByAddColumnContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(mysqlParser.ADD, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UidContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UidContext,i)

        def columnDefinition(self):
            return self.getTypedRuleContext(mysqlParser.ColumnDefinitionContext,0)

        def COLUMN(self):
            return self.getToken(mysqlParser.COLUMN, 0)
        def FIRST(self):
            return self.getToken(mysqlParser.FIRST, 0)
        def AFTER(self):
            return self.getToken(mysqlParser.AFTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddColumn" ):
                listener.enterAlterByAddColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddColumn" ):
                listener.exitAlterByAddColumn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByAddColumn" ):
                return visitor.visitAlterByAddColumn(self)
            else:
                return visitor.visitChildren(self)


    class AlterByOrderContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ORDER(self):
            return self.getToken(mysqlParser.ORDER, 0)
        def BY(self):
            return self.getToken(mysqlParser.BY, 0)
        def uidList(self):
            return self.getTypedRuleContext(mysqlParser.UidListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByOrder" ):
                listener.enterAlterByOrder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByOrder" ):
                listener.exitAlterByOrder(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterByOrder" ):
                return visitor.visitAlterByOrder(self)
            else:
                return visitor.visitChildren(self)



    def alterSpecification(self):

        localctx = mysqlParser.AlterSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_alterSpecification)
        self._la = 0 # Token type
        try:
            self.state = 2389
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
            if la_ == 1:
                localctx = mysqlParser.AlterTableOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2083
                self.tableOption()
                pass

            elif la_ == 2:
                localctx = mysqlParser.AlterByAddColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2084
                self.match(mysqlParser.ADD)
                self.state = 2086
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.COLUMN:
                    self.state = 2085
                    self.match(mysqlParser.COLUMN)


                self.state = 2088
                self.uid()
                self.state = 2089
                self.columnDefinition()
                self.state = 2093
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [mysqlParser.FIRST]:
                    self.state = 2090
                    self.match(mysqlParser.FIRST)
                    pass
                elif token in [mysqlParser.AFTER]:
                    self.state = 2091
                    self.match(mysqlParser.AFTER)
                    self.state = 2092
                    self.uid()
                    pass
                elif token in [mysqlParser.EOF, mysqlParser.PARTITION, mysqlParser.MINUS, mysqlParser.COMMA, mysqlParser.SEMI]:
                    pass
                else:
                    pass
                pass

            elif la_ == 3:
                localctx = mysqlParser.AlterByAddColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2095
                self.match(mysqlParser.ADD)
                self.state = 2097
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.COLUMN:
                    self.state = 2096
                    self.match(mysqlParser.COLUMN)


                self.state = 2099
                self.match(mysqlParser.LR_BRACKET)
                self.state = 2100
                self.uid()
                self.state = 2101
                self.columnDefinition()
                self.state = 2108
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.COMMA:
                    self.state = 2102
                    self.match(mysqlParser.COMMA)
                    self.state = 2103
                    self.uid()
                    self.state = 2104
                    self.columnDefinition()
                    self.state = 2110
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2111
                self.match(mysqlParser.RR_BRACKET)
                pass

            elif la_ == 4:
                localctx = mysqlParser.AlterByAddIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2113
                self.match(mysqlParser.ADD)
                self.state = 2114
                localctx.keyType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.INDEX or _la==mysqlParser.KEY):
                    localctx.keyType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2116
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.LEFT or _la==mysqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (mysqlParser.DATE - 180)) | (1 << (mysqlParser.TIME - 180)) | (1 << (mysqlParser.TIMESTAMP - 180)) | (1 << (mysqlParser.DATETIME - 180)) | (1 << (mysqlParser.YEAR - 180)) | (1 << (mysqlParser.TEXT - 180)) | (1 << (mysqlParser.ENUM - 180)) | (1 << (mysqlParser.COUNT - 180)) | (1 << (mysqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (mysqlParser.ACCOUNT - 244)) | (1 << (mysqlParser.ACTION - 244)) | (1 << (mysqlParser.AFTER - 244)) | (1 << (mysqlParser.AGGREGATE - 244)) | (1 << (mysqlParser.ALGORITHM - 244)) | (1 << (mysqlParser.ANY - 244)) | (1 << (mysqlParser.AT - 244)) | (1 << (mysqlParser.AUTHORS - 244)) | (1 << (mysqlParser.AUTOCOMMIT - 244)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (mysqlParser.AUTO_INCREMENT - 244)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 244)) | (1 << (mysqlParser.BEGIN - 244)) | (1 << (mysqlParser.BINLOG - 244)) | (1 << (mysqlParser.BIT - 244)) | (1 << (mysqlParser.BLOCK - 244)) | (1 << (mysqlParser.BTREE - 244)) | (1 << (mysqlParser.CASCADED - 244)) | (1 << (mysqlParser.CHAIN - 244)) | (1 << (mysqlParser.CHANNEL - 244)) | (1 << (mysqlParser.CHECKSUM - 244)) | (1 << (mysqlParser.CIPHER - 244)) | (1 << (mysqlParser.CLIENT - 244)) | (1 << (mysqlParser.COALESCE - 244)) | (1 << (mysqlParser.CODE - 244)) | (1 << (mysqlParser.COLUMNS - 244)) | (1 << (mysqlParser.COLUMN_FORMAT - 244)) | (1 << (mysqlParser.COMMENT - 244)) | (1 << (mysqlParser.COMMIT - 244)) | (1 << (mysqlParser.COMPACT - 244)) | (1 << (mysqlParser.COMPLETION - 244)) | (1 << (mysqlParser.COMPRESSED - 244)) | (1 << (mysqlParser.COMPRESSION - 244)) | (1 << (mysqlParser.CONCURRENT - 244)) | (1 << (mysqlParser.CONNECTION - 244)) | (1 << (mysqlParser.CONSISTENT - 244)) | (1 << (mysqlParser.CONTAINS - 244)) | (1 << (mysqlParser.CONTEXT - 244)) | (1 << (mysqlParser.CONTRIBUTORS - 244)) | (1 << (mysqlParser.COPY - 244)) | (1 << (mysqlParser.CPU - 244)) | (1 << (mysqlParser.DATA - 244)) | (1 << (mysqlParser.DATAFILE - 244)) | (1 << (mysqlParser.DEALLOCATE - 244)) | (1 << (mysqlParser.DEFAULT_AUTH - 244)) | (1 << (mysqlParser.DEFINER - 244)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 244)) | (1 << (mysqlParser.DIRECTORY - 244)) | (1 << (mysqlParser.DISABLE - 244)) | (1 << (mysqlParser.DISCARD - 244)) | (1 << (mysqlParser.DISK - 244)) | (1 << (mysqlParser.DO - 244)) | (1 << (mysqlParser.DUMPFILE - 244)) | (1 << (mysqlParser.DUPLICATE - 244)) | (1 << (mysqlParser.DYNAMIC - 244)) | (1 << (mysqlParser.ENABLE - 244)) | (1 << (mysqlParser.ENCRYPTION - 244)) | (1 << (mysqlParser.ENDS - 244)) | (1 << (mysqlParser.ENGINE - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (mysqlParser.ENGINES - 308)) | (1 << (mysqlParser.ERROR - 308)) | (1 << (mysqlParser.ERRORS - 308)) | (1 << (mysqlParser.ESCAPE - 308)) | (1 << (mysqlParser.EVEN - 308)) | (1 << (mysqlParser.EVENT - 308)) | (1 << (mysqlParser.EVENTS - 308)) | (1 << (mysqlParser.EVERY - 308)) | (1 << (mysqlParser.EXCHANGE - 308)) | (1 << (mysqlParser.EXCLUSIVE - 308)) | (1 << (mysqlParser.EXPIRE - 308)) | (1 << (mysqlParser.EXTENT_SIZE - 308)) | (1 << (mysqlParser.FAULTS - 308)) | (1 << (mysqlParser.FIELDS - 308)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (mysqlParser.FILTER - 308)) | (1 << (mysqlParser.FIRST - 308)) | (1 << (mysqlParser.FIXED - 308)) | (1 << (mysqlParser.FOLLOWS - 308)) | (1 << (mysqlParser.FULL - 308)) | (1 << (mysqlParser.FUNCTION - 308)) | (1 << (mysqlParser.GLOBAL - 308)) | (1 << (mysqlParser.GRANTS - 308)) | (1 << (mysqlParser.GROUP_REPLICATION - 308)) | (1 << (mysqlParser.HASH - 308)) | (1 << (mysqlParser.HOST - 308)) | (1 << (mysqlParser.IDENTIFIED - 308)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (mysqlParser.IMPORT - 308)) | (1 << (mysqlParser.INDEXES - 308)) | (1 << (mysqlParser.INITIAL_SIZE - 308)) | (1 << (mysqlParser.INPLACE - 308)) | (1 << (mysqlParser.INSERT_METHOD - 308)) | (1 << (mysqlParser.INSTANCE - 308)) | (1 << (mysqlParser.INVOKER - 308)) | (1 << (mysqlParser.IO - 308)) | (1 << (mysqlParser.IO_THREAD - 308)) | (1 << (mysqlParser.IPC - 308)) | (1 << (mysqlParser.ISOLATION - 308)) | (1 << (mysqlParser.ISSUER - 308)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (mysqlParser.LANGUAGE - 308)) | (1 << (mysqlParser.LAST - 308)) | (1 << (mysqlParser.LEAVES - 308)) | (1 << (mysqlParser.LESS - 308)) | (1 << (mysqlParser.LEVEL - 308)) | (1 << (mysqlParser.LIST - 308)) | (1 << (mysqlParser.LOCAL - 308)) | (1 << (mysqlParser.LOGFILE - 308)) | (1 << (mysqlParser.LOGS - 308)) | (1 << (mysqlParser.MASTER - 308)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 308)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (mysqlParser.MASTER_DELAY - 372)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (mysqlParser.MASTER_HOST - 372)) | (1 << (mysqlParser.MASTER_LOG_FILE - 372)) | (1 << (mysqlParser.MASTER_LOG_POS - 372)) | (1 << (mysqlParser.MASTER_PASSWORD - 372)) | (1 << (mysqlParser.MASTER_PORT - 372)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (mysqlParser.MASTER_SSL - 372)) | (1 << (mysqlParser.MASTER_SSL_CA - 372)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_CERT - 372)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (mysqlParser.MASTER_SSL_CRL - 372)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_KEY - 372)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 372)) | (1 << (mysqlParser.MASTER_USER - 372)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_ROWS - 372)) | (1 << (mysqlParser.MAX_SIZE - 372)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (mysqlParser.MERGE - 372)) | (1 << (mysqlParser.MID - 372)) | (1 << (mysqlParser.MIGRATE - 372)) | (1 << (mysqlParser.MIN_ROWS - 372)) | (1 << (mysqlParser.MODIFY - 372)) | (1 << (mysqlParser.MUTEX - 372)) | (1 << (mysqlParser.MYSQL - 372)) | (1 << (mysqlParser.NAME - 372)) | (1 << (mysqlParser.NAMES - 372)) | (1 << (mysqlParser.NCHAR - 372)) | (1 << (mysqlParser.NEVER - 372)) | (1 << (mysqlParser.NO - 372)) | (1 << (mysqlParser.NODEGROUP - 372)) | (1 << (mysqlParser.NONE - 372)) | (1 << (mysqlParser.OFFLINE - 372)) | (1 << (mysqlParser.OFFSET - 372)) | (1 << (mysqlParser.OJ - 372)) | (1 << (mysqlParser.OLD_PASSWORD - 372)) | (1 << (mysqlParser.ONE - 372)) | (1 << (mysqlParser.ONLINE - 372)) | (1 << (mysqlParser.ONLY - 372)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 372)) | (1 << (mysqlParser.OPTIONS - 372)) | (1 << (mysqlParser.OWNER - 372)) | (1 << (mysqlParser.PACK_KEYS - 372)) | (1 << (mysqlParser.PAGE - 372)) | (1 << (mysqlParser.PARSER - 372)) | (1 << (mysqlParser.PARTIAL - 372)) | (1 << (mysqlParser.PARTITIONING - 372)) | (1 << (mysqlParser.PARTITIONS - 372)) | (1 << (mysqlParser.PASSWORD - 372)) | (1 << (mysqlParser.PHASE - 372)) | (1 << (mysqlParser.PLUGIN_DIR - 372)) | (1 << (mysqlParser.PLUGINS - 372)) | (1 << (mysqlParser.PORT - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (mysqlParser.PRECEDES - 436)) | (1 << (mysqlParser.PREPARE - 436)) | (1 << (mysqlParser.PRESERVE - 436)) | (1 << (mysqlParser.PREV - 436)) | (1 << (mysqlParser.PROCESSLIST - 436)) | (1 << (mysqlParser.PROFILE - 436)) | (1 << (mysqlParser.PROFILES - 436)) | (1 << (mysqlParser.PROXY - 436)) | (1 << (mysqlParser.QUERY - 436)) | (1 << (mysqlParser.QUICK - 436)) | (1 << (mysqlParser.REBUILD - 436)) | (1 << (mysqlParser.RECOVER - 436)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (mysqlParser.REDUNDANT - 436)) | (1 << (mysqlParser.RELAY_LOG_FILE - 436)) | (1 << (mysqlParser.RELAY_LOG_POS - 436)) | (1 << (mysqlParser.RELAYLOG - 436)) | (1 << (mysqlParser.REMOVE - 436)) | (1 << (mysqlParser.REORGANIZE - 436)) | (1 << (mysqlParser.REPAIR - 436)) | (1 << (mysqlParser.REPLICATE_DO_DB - 436)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATION - 436)) | (1 << (mysqlParser.RESUME - 436)) | (1 << (mysqlParser.RETURNS - 436)) | (1 << (mysqlParser.ROLLBACK - 436)) | (1 << (mysqlParser.ROLLUP - 436)) | (1 << (mysqlParser.ROTATE - 436)) | (1 << (mysqlParser.ROW - 436)) | (1 << (mysqlParser.ROWS - 436)) | (1 << (mysqlParser.ROW_FORMAT - 436)) | (1 << (mysqlParser.SAVEPOINT - 436)) | (1 << (mysqlParser.SCHEDULE - 436)) | (1 << (mysqlParser.SECURITY - 436)) | (1 << (mysqlParser.SERVER - 436)) | (1 << (mysqlParser.SESSION - 436)) | (1 << (mysqlParser.SHARE - 436)) | (1 << (mysqlParser.SHARED - 436)) | (1 << (mysqlParser.SIGNED - 436)) | (1 << (mysqlParser.SIMPLE - 436)) | (1 << (mysqlParser.SLAVE - 436)) | (1 << (mysqlParser.SNAPSHOT - 436)) | (1 << (mysqlParser.SOCKET - 436)) | (1 << (mysqlParser.SOME - 436)) | (1 << (mysqlParser.SOUNDS - 436)) | (1 << (mysqlParser.SOURCE - 436)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (mysqlParser.SQL_CACHE - 436)) | (1 << (mysqlParser.SQL_NO_CACHE - 436)) | (1 << (mysqlParser.SQL_THREAD - 436)) | (1 << (mysqlParser.START - 436)) | (1 << (mysqlParser.STARTS - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (mysqlParser.STATS_AUTO_RECALC - 500)) | (1 << (mysqlParser.STATS_PERSISTENT - 500)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (mysqlParser.STATUS - 500)) | (1 << (mysqlParser.STOP - 500)) | (1 << (mysqlParser.STORAGE - 500)) | (1 << (mysqlParser.STRING - 500)) | (1 << (mysqlParser.SUBJECT - 500)) | (1 << (mysqlParser.SUBPARTITION - 500)) | (1 << (mysqlParser.SUBPARTITIONS - 500)) | (1 << (mysqlParser.SUSPEND - 500)) | (1 << (mysqlParser.SWAPS - 500)) | (1 << (mysqlParser.SWITCHES - 500)) | (1 << (mysqlParser.TABLESPACE - 500)) | (1 << (mysqlParser.TEMPORARY - 500)) | (1 << (mysqlParser.TEMPTABLE - 500)) | (1 << (mysqlParser.THAN - 500)) | (1 << (mysqlParser.TRANSACTION - 500)) | (1 << (mysqlParser.TRUNCATE - 500)) | (1 << (mysqlParser.UNDEFINED - 500)) | (1 << (mysqlParser.UNDOFILE - 500)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (mysqlParser.UNKNOWN - 500)) | (1 << (mysqlParser.UPGRADE - 500)) | (1 << (mysqlParser.USER - 500)) | (1 << (mysqlParser.VALIDATION - 500)) | (1 << (mysqlParser.VALUE - 500)) | (1 << (mysqlParser.VARIABLES - 500)) | (1 << (mysqlParser.VIEW - 500)) | (1 << (mysqlParser.WAIT - 500)) | (1 << (mysqlParser.WARNINGS - 500)) | (1 << (mysqlParser.WITHOUT - 500)) | (1 << (mysqlParser.WORK - 500)) | (1 << (mysqlParser.WRAPPER - 500)) | (1 << (mysqlParser.X509 - 500)) | (1 << (mysqlParser.XA - 500)) | (1 << (mysqlParser.XML - 500)) | (1 << (mysqlParser.QUARTER - 500)) | (1 << (mysqlParser.MONTH - 500)) | (1 << (mysqlParser.DAY - 500)) | (1 << (mysqlParser.HOUR - 500)) | (1 << (mysqlParser.MINUTE - 500)) | (1 << (mysqlParser.WEEK - 500)) | (1 << (mysqlParser.SECOND - 500)) | (1 << (mysqlParser.MICROSECOND - 500)) | (1 << (mysqlParser.TABLES - 500)) | (1 << (mysqlParser.ROUTINE - 500)) | (1 << (mysqlParser.EXECUTE - 500)) | (1 << (mysqlParser.FILE - 500)) | (1 << (mysqlParser.PROCESS - 500)) | (1 << (mysqlParser.RELOAD - 500)) | (1 << (mysqlParser.SHUTDOWN - 500)) | (1 << (mysqlParser.SUPER - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (mysqlParser.PRIVILEGES - 564)) | (1 << (mysqlParser.ARMSCII8 - 564)) | (1 << (mysqlParser.ASCII - 564)) | (1 << (mysqlParser.BIG5 - 564)) | (1 << (mysqlParser.CP1250 - 564)) | (1 << (mysqlParser.CP1251 - 564)) | (1 << (mysqlParser.CP1256 - 564)) | (1 << (mysqlParser.CP1257 - 564)) | (1 << (mysqlParser.CP850 - 564)) | (1 << (mysqlParser.CP852 - 564)) | (1 << (mysqlParser.CP866 - 564)) | (1 << (mysqlParser.CP932 - 564)) | (1 << (mysqlParser.DEC8 - 564)) | (1 << (mysqlParser.EUCJPMS - 564)) | (1 << (mysqlParser.EUCKR - 564)) | (1 << (mysqlParser.GB2312 - 564)) | (1 << (mysqlParser.GBK - 564)) | (1 << (mysqlParser.GEOSTD8 - 564)) | (1 << (mysqlParser.GREEK - 564)) | (1 << (mysqlParser.HEBREW - 564)) | (1 << (mysqlParser.HP8 - 564)) | (1 << (mysqlParser.KEYBCS2 - 564)) | (1 << (mysqlParser.KOI8R - 564)) | (1 << (mysqlParser.KOI8U - 564)) | (1 << (mysqlParser.LATIN1 - 564)) | (1 << (mysqlParser.LATIN2 - 564)) | (1 << (mysqlParser.LATIN5 - 564)) | (1 << (mysqlParser.LATIN7 - 564)) | (1 << (mysqlParser.MACCE - 564)) | (1 << (mysqlParser.MACROMAN - 564)) | (1 << (mysqlParser.SJIS - 564)) | (1 << (mysqlParser.SWE7 - 564)) | (1 << (mysqlParser.TIS620 - 564)) | (1 << (mysqlParser.UCS2 - 564)) | (1 << (mysqlParser.UJIS - 564)) | (1 << (mysqlParser.UTF16 - 564)) | (1 << (mysqlParser.UTF16LE - 564)) | (1 << (mysqlParser.UTF32 - 564)) | (1 << (mysqlParser.UTF8 - 564)) | (1 << (mysqlParser.UTF8MB3 - 564)) | (1 << (mysqlParser.UTF8MB4 - 564)) | (1 << (mysqlParser.ARCHIVE - 564)) | (1 << (mysqlParser.BLACKHOLE - 564)) | (1 << (mysqlParser.CSV - 564)) | (1 << (mysqlParser.FEDERATED - 564)) | (1 << (mysqlParser.INNODB - 564)) | (1 << (mysqlParser.MEMORY - 564)) | (1 << (mysqlParser.MRG_MYISAM - 564)) | (1 << (mysqlParser.MYISAM - 564)) | (1 << (mysqlParser.NDB - 564)) | (1 << (mysqlParser.NDBCLUSTER - 564)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (mysqlParser.REPEATABLE - 564)) | (1 << (mysqlParser.COMMITTED - 564)) | (1 << (mysqlParser.UNCOMMITTED - 564)) | (1 << (mysqlParser.SERIALIZABLE - 564)) | (1 << (mysqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (mysqlParser.LINESTRING - 564)) | (1 << (mysqlParser.MULTILINESTRING - 564)) | (1 << (mysqlParser.MULTIPOINT - 564)) | (1 << (mysqlParser.MULTIPOLYGON - 564)) | (1 << (mysqlParser.POINT - 564)) | (1 << (mysqlParser.POLYGON - 564)) | (1 << (mysqlParser.ABS - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (mysqlParser.ACOS - 628)) | (1 << (mysqlParser.ADDDATE - 628)) | (1 << (mysqlParser.ADDTIME - 628)) | (1 << (mysqlParser.AES_DECRYPT - 628)) | (1 << (mysqlParser.AES_ENCRYPT - 628)) | (1 << (mysqlParser.AREA - 628)) | (1 << (mysqlParser.ASBINARY - 628)) | (1 << (mysqlParser.ASIN - 628)) | (1 << (mysqlParser.ASTEXT - 628)) | (1 << (mysqlParser.ASWKB - 628)) | (1 << (mysqlParser.ASWKT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (mysqlParser.ATAN - 628)) | (1 << (mysqlParser.ATAN2 - 628)) | (1 << (mysqlParser.BENCHMARK - 628)) | (1 << (mysqlParser.BIN - 628)) | (1 << (mysqlParser.BIT_COUNT - 628)) | (1 << (mysqlParser.BIT_LENGTH - 628)) | (1 << (mysqlParser.BUFFER - 628)) | (1 << (mysqlParser.CEIL - 628)) | (1 << (mysqlParser.CEILING - 628)) | (1 << (mysqlParser.CENTROID - 628)) | (1 << (mysqlParser.CHARACTER_LENGTH - 628)) | (1 << (mysqlParser.CHARSET - 628)) | (1 << (mysqlParser.CHAR_LENGTH - 628)) | (1 << (mysqlParser.COERCIBILITY - 628)) | (1 << (mysqlParser.COLLATION - 628)) | (1 << (mysqlParser.COMPRESS - 628)) | (1 << (mysqlParser.CONCAT - 628)) | (1 << (mysqlParser.CONCAT_WS - 628)) | (1 << (mysqlParser.CONNECTION_ID - 628)) | (1 << (mysqlParser.CONV - 628)) | (1 << (mysqlParser.CONVERT_TZ - 628)) | (1 << (mysqlParser.COS - 628)) | (1 << (mysqlParser.COT - 628)) | (1 << (mysqlParser.CRC32 - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (mysqlParser.CREATE_DIGEST - 628)) | (1 << (mysqlParser.CROSSES - 628)) | (1 << (mysqlParser.DATEDIFF - 628)) | (1 << (mysqlParser.DATE_FORMAT - 628)) | (1 << (mysqlParser.DAYNAME - 628)) | (1 << (mysqlParser.DAYOFMONTH - 628)) | (1 << (mysqlParser.DAYOFWEEK - 628)) | (1 << (mysqlParser.DAYOFYEAR - 628)) | (1 << (mysqlParser.DECODE - 628)) | (1 << (mysqlParser.DEGREES - 628)) | (1 << (mysqlParser.DES_DECRYPT - 628)) | (1 << (mysqlParser.DES_ENCRYPT - 628)) | (1 << (mysqlParser.DIMENSION - 628)) | (1 << (mysqlParser.DISJOINT - 628)) | (1 << (mysqlParser.ELT - 628)) | (1 << (mysqlParser.ENCODE - 628)) | (1 << (mysqlParser.ENCRYPT - 628)) | (1 << (mysqlParser.ENDPOINT - 628)) | (1 << (mysqlParser.ENVELOPE - 628)) | (1 << (mysqlParser.EQUALS - 628)) | (1 << (mysqlParser.EXP - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (mysqlParser.EXPORT_SET - 692)) | (1 << (mysqlParser.EXTERIORRING - 692)) | (1 << (mysqlParser.EXTRACTVALUE - 692)) | (1 << (mysqlParser.FIELD - 692)) | (1 << (mysqlParser.FIND_IN_SET - 692)) | (1 << (mysqlParser.FLOOR - 692)) | (1 << (mysqlParser.FORMAT - 692)) | (1 << (mysqlParser.FOUND_ROWS - 692)) | (1 << (mysqlParser.FROM_BASE64 - 692)) | (1 << (mysqlParser.FROM_DAYS - 692)) | (1 << (mysqlParser.FROM_UNIXTIME - 692)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYN - 692)) | (1 << (mysqlParser.GEOMETRYTYPE - 692)) | (1 << (mysqlParser.GEOMFROMTEXT - 692)) | (1 << (mysqlParser.GEOMFROMWKB - 692)) | (1 << (mysqlParser.GET_FORMAT - 692)) | (1 << (mysqlParser.GET_LOCK - 692)) | (1 << (mysqlParser.GLENGTH - 692)) | (1 << (mysqlParser.GREATEST - 692)) | (1 << (mysqlParser.GTID_SUBSET - 692)) | (1 << (mysqlParser.GTID_SUBTRACT - 692)) | (1 << (mysqlParser.HEX - 692)) | (1 << (mysqlParser.IFNULL - 692)) | (1 << (mysqlParser.INET6_ATON - 692)) | (1 << (mysqlParser.INET6_NTOA - 692)) | (1 << (mysqlParser.INET_ATON - 692)) | (1 << (mysqlParser.INET_NTOA - 692)) | (1 << (mysqlParser.INSTR - 692)) | (1 << (mysqlParser.INTERIORRINGN - 692)) | (1 << (mysqlParser.INTERSECTS - 692)) | (1 << (mysqlParser.ISCLOSED - 692)) | (1 << (mysqlParser.ISEMPTY - 692)) | (1 << (mysqlParser.ISNULL - 692)) | (1 << (mysqlParser.ISSIMPLE - 692)) | (1 << (mysqlParser.IS_FREE_LOCK - 692)) | (1 << (mysqlParser.IS_IPV4 - 692)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 692)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 692)) | (1 << (mysqlParser.IS_IPV6 - 692)) | (1 << (mysqlParser.IS_USED_LOCK - 692)) | (1 << (mysqlParser.LAST_INSERT_ID - 692)) | (1 << (mysqlParser.LCASE - 692)) | (1 << (mysqlParser.LEAST - 692)) | (1 << (mysqlParser.LENGTH - 692)) | (1 << (mysqlParser.LINEFROMTEXT - 692)) | (1 << (mysqlParser.LINEFROMWKB - 692)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 692)) | (1 << (mysqlParser.LN - 692)) | (1 << (mysqlParser.LOAD_FILE - 692)) | (1 << (mysqlParser.LOCATE - 692)) | (1 << (mysqlParser.LOG - 692)) | (1 << (mysqlParser.LOG10 - 692)) | (1 << (mysqlParser.LOG2 - 692)) | (1 << (mysqlParser.LOWER - 692)) | (1 << (mysqlParser.LPAD - 692)) | (1 << (mysqlParser.LTRIM - 692)) | (1 << (mysqlParser.MAKEDATE - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (mysqlParser.MAKETIME - 756)) | (1 << (mysqlParser.MAKE_SET - 756)) | (1 << (mysqlParser.MASTER_POS_WAIT - 756)) | (1 << (mysqlParser.MBRCONTAINS - 756)) | (1 << (mysqlParser.MBRDISJOINT - 756)) | (1 << (mysqlParser.MBREQUAL - 756)) | (1 << (mysqlParser.MBRINTERSECTS - 756)) | (1 << (mysqlParser.MBROVERLAPS - 756)) | (1 << (mysqlParser.MBRTOUCHES - 756)) | (1 << (mysqlParser.MBRWITHIN - 756)) | (1 << (mysqlParser.MD5 - 756)) | (1 << (mysqlParser.MLINEFROMTEXT - 756)) | (1 << (mysqlParser.MLINEFROMWKB - 756)) | (1 << (mysqlParser.MONTHNAME - 756)) | (1 << (mysqlParser.MPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MPOINTFROMWKB - 756)) | (1 << (mysqlParser.MPOLYFROMTEXT - 756)) | (1 << (mysqlParser.MPOLYFROMWKB - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (mysqlParser.NAME_CONST - 756)) | (1 << (mysqlParser.NULLIF - 756)) | (1 << (mysqlParser.NUMGEOMETRIES - 756)) | (1 << (mysqlParser.NUMINTERIORRINGS - 756)) | (1 << (mysqlParser.NUMPOINTS - 756)) | (1 << (mysqlParser.OCT - 756)) | (1 << (mysqlParser.OCTET_LENGTH - 756)) | (1 << (mysqlParser.ORD - 756)) | (1 << (mysqlParser.OVERLAPS - 756)) | (1 << (mysqlParser.PERIOD_ADD - 756)) | (1 << (mysqlParser.PERIOD_DIFF - 756)) | (1 << (mysqlParser.PI - 756)) | (1 << (mysqlParser.POINTFROMTEXT - 756)) | (1 << (mysqlParser.POINTFROMWKB - 756)) | (1 << (mysqlParser.POINTN - 756)) | (1 << (mysqlParser.POLYFROMTEXT - 756)) | (1 << (mysqlParser.POLYFROMWKB - 756)) | (1 << (mysqlParser.POLYGONFROMTEXT - 756)) | (1 << (mysqlParser.POLYGONFROMWKB - 756)) | (1 << (mysqlParser.POW - 756)) | (1 << (mysqlParser.POWER - 756)) | (1 << (mysqlParser.QUOTE - 756)) | (1 << (mysqlParser.RADIANS - 756)) | (1 << (mysqlParser.RAND - 756)) | (1 << (mysqlParser.RANDOM_BYTES - 756)) | (1 << (mysqlParser.RELEASE_LOCK - 756)) | (1 << (mysqlParser.REVERSE - 756)) | (1 << (mysqlParser.ROUND - 756)) | (1 << (mysqlParser.ROW_COUNT - 756)) | (1 << (mysqlParser.RPAD - 756)) | (1 << (mysqlParser.RTRIM - 756)) | (1 << (mysqlParser.SEC_TO_TIME - 756)) | (1 << (mysqlParser.SESSION_USER - 756)) | (1 << (mysqlParser.SHA - 756)) | (1 << (mysqlParser.SHA1 - 756)) | (1 << (mysqlParser.SHA2 - 756)) | (1 << (mysqlParser.SIGN - 756)) | (1 << (mysqlParser.SIN - 756)) | (1 << (mysqlParser.SLEEP - 756)) | (1 << (mysqlParser.SOUNDEX - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (mysqlParser.SQRT - 820)) | (1 << (mysqlParser.SRID - 820)) | (1 << (mysqlParser.STARTPOINT - 820)) | (1 << (mysqlParser.STRCMP - 820)) | (1 << (mysqlParser.STR_TO_DATE - 820)) | (1 << (mysqlParser.ST_AREA - 820)) | (1 << (mysqlParser.ST_ASBINARY - 820)) | (1 << (mysqlParser.ST_ASTEXT - 820)) | (1 << (mysqlParser.ST_ASWKB - 820)) | (1 << (mysqlParser.ST_ASWKT - 820)) | (1 << (mysqlParser.ST_BUFFER - 820)) | (1 << (mysqlParser.ST_CENTROID - 820)) | (1 << (mysqlParser.ST_CONTAINS - 820)) | (1 << (mysqlParser.ST_CROSSES - 820)) | (1 << (mysqlParser.ST_DIFFERENCE - 820)) | (1 << (mysqlParser.ST_DIMENSION - 820)) | (1 << (mysqlParser.ST_DISJOINT - 820)) | (1 << (mysqlParser.ST_DISTANCE - 820)) | (1 << (mysqlParser.ST_ENDPOINT - 820)) | (1 << (mysqlParser.ST_ENVELOPE - 820)) | (1 << (mysqlParser.ST_EQUALS - 820)) | (1 << (mysqlParser.ST_EXTERIORRING - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYN - 820)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 820)) | (1 << (mysqlParser.ST_INTERIORRINGN - 820)) | (1 << (mysqlParser.ST_INTERSECTION - 820)) | (1 << (mysqlParser.ST_INTERSECTS - 820)) | (1 << (mysqlParser.ST_ISCLOSED - 820)) | (1 << (mysqlParser.ST_ISEMPTY - 820)) | (1 << (mysqlParser.ST_ISSIMPLE - 820)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINEFROMWKB - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (mysqlParser.ST_NUMPOINTS - 820)) | (1 << (mysqlParser.ST_OVERLAPS - 820)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 820)) | (1 << (mysqlParser.ST_POINTFROMWKB - 820)) | (1 << (mysqlParser.ST_POINTN - 820)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYFROMWKB - 820)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (mysqlParser.ST_SRID - 820)) | (1 << (mysqlParser.ST_STARTPOINT - 820)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (mysqlParser.ST_TOUCHES - 820)) | (1 << (mysqlParser.ST_UNION - 820)) | (1 << (mysqlParser.ST_WITHIN - 820)) | (1 << (mysqlParser.ST_X - 820)) | (1 << (mysqlParser.ST_Y - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (mysqlParser.SUBDATE - 884)) | (1 << (mysqlParser.SUBSTRING_INDEX - 884)) | (1 << (mysqlParser.SUBTIME - 884)) | (1 << (mysqlParser.SYSTEM_USER - 884)) | (1 << (mysqlParser.TAN - 884)) | (1 << (mysqlParser.TIMEDIFF - 884)) | (1 << (mysqlParser.TIMESTAMPADD - 884)) | (1 << (mysqlParser.TIMESTAMPDIFF - 884)) | (1 << (mysqlParser.TIME_FORMAT - 884)) | (1 << (mysqlParser.TIME_TO_SEC - 884)) | (1 << (mysqlParser.TOUCHES - 884)) | (1 << (mysqlParser.TO_BASE64 - 884)) | (1 << (mysqlParser.TO_DAYS - 884)) | (1 << (mysqlParser.TO_SECONDS - 884)) | (1 << (mysqlParser.UCASE - 884)) | (1 << (mysqlParser.UNCOMPRESS - 884)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (mysqlParser.UNHEX - 884)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 884)) | (1 << (mysqlParser.UPDATEXML - 884)) | (1 << (mysqlParser.UPPER - 884)) | (1 << (mysqlParser.UUID - 884)) | (1 << (mysqlParser.UUID_SHORT - 884)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (mysqlParser.VERSION - 884)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (mysqlParser.WEEKDAY - 884)) | (1 << (mysqlParser.WEEKOFYEAR - 884)) | (1 << (mysqlParser.WEIGHT_STRING - 884)) | (1 << (mysqlParser.WITHIN - 884)) | (1 << (mysqlParser.YEARWEEK - 884)) | (1 << (mysqlParser.Y_FUNCTION - 884)) | (1 << (mysqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 954)) & ~0x3f) == 0 and ((1 << (_la - 954)) & ((1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 954)) | (1 << (mysqlParser.ID - 954)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 954)))) != 0):
                    self.state = 2115
                    self.uid()


                self.state = 2119
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.USING:
                    self.state = 2118
                    self.indexType()


                self.state = 2121
                self.indexColumnNames()
                self.state = 2125
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.USING or _la==mysqlParser.WITH or _la==mysqlParser.COMMENT or _la==mysqlParser.KEY_BLOCK_SIZE:
                    self.state = 2122
                    self.indexOption()
                    self.state = 2127
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                localctx = mysqlParser.AlterByAddPrimaryKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2128
                self.match(mysqlParser.ADD)
                self.state = 2133
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.CONSTRAINT:
                    self.state = 2129
                    self.match(mysqlParser.CONSTRAINT)
                    self.state = 2131
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==mysqlParser.LEFT or _la==mysqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (mysqlParser.DATE - 180)) | (1 << (mysqlParser.TIME - 180)) | (1 << (mysqlParser.TIMESTAMP - 180)) | (1 << (mysqlParser.DATETIME - 180)) | (1 << (mysqlParser.YEAR - 180)) | (1 << (mysqlParser.TEXT - 180)) | (1 << (mysqlParser.ENUM - 180)) | (1 << (mysqlParser.COUNT - 180)) | (1 << (mysqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (mysqlParser.ACCOUNT - 244)) | (1 << (mysqlParser.ACTION - 244)) | (1 << (mysqlParser.AFTER - 244)) | (1 << (mysqlParser.AGGREGATE - 244)) | (1 << (mysqlParser.ALGORITHM - 244)) | (1 << (mysqlParser.ANY - 244)) | (1 << (mysqlParser.AT - 244)) | (1 << (mysqlParser.AUTHORS - 244)) | (1 << (mysqlParser.AUTOCOMMIT - 244)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (mysqlParser.AUTO_INCREMENT - 244)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 244)) | (1 << (mysqlParser.BEGIN - 244)) | (1 << (mysqlParser.BINLOG - 244)) | (1 << (mysqlParser.BIT - 244)) | (1 << (mysqlParser.BLOCK - 244)) | (1 << (mysqlParser.BTREE - 244)) | (1 << (mysqlParser.CASCADED - 244)) | (1 << (mysqlParser.CHAIN - 244)) | (1 << (mysqlParser.CHANNEL - 244)) | (1 << (mysqlParser.CHECKSUM - 244)) | (1 << (mysqlParser.CIPHER - 244)) | (1 << (mysqlParser.CLIENT - 244)) | (1 << (mysqlParser.COALESCE - 244)) | (1 << (mysqlParser.CODE - 244)) | (1 << (mysqlParser.COLUMNS - 244)) | (1 << (mysqlParser.COLUMN_FORMAT - 244)) | (1 << (mysqlParser.COMMENT - 244)) | (1 << (mysqlParser.COMMIT - 244)) | (1 << (mysqlParser.COMPACT - 244)) | (1 << (mysqlParser.COMPLETION - 244)) | (1 << (mysqlParser.COMPRESSED - 244)) | (1 << (mysqlParser.COMPRESSION - 244)) | (1 << (mysqlParser.CONCURRENT - 244)) | (1 << (mysqlParser.CONNECTION - 244)) | (1 << (mysqlParser.CONSISTENT - 244)) | (1 << (mysqlParser.CONTAINS - 244)) | (1 << (mysqlParser.CONTEXT - 244)) | (1 << (mysqlParser.CONTRIBUTORS - 244)) | (1 << (mysqlParser.COPY - 244)) | (1 << (mysqlParser.CPU - 244)) | (1 << (mysqlParser.DATA - 244)) | (1 << (mysqlParser.DATAFILE - 244)) | (1 << (mysqlParser.DEALLOCATE - 244)) | (1 << (mysqlParser.DEFAULT_AUTH - 244)) | (1 << (mysqlParser.DEFINER - 244)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 244)) | (1 << (mysqlParser.DIRECTORY - 244)) | (1 << (mysqlParser.DISABLE - 244)) | (1 << (mysqlParser.DISCARD - 244)) | (1 << (mysqlParser.DISK - 244)) | (1 << (mysqlParser.DO - 244)) | (1 << (mysqlParser.DUMPFILE - 244)) | (1 << (mysqlParser.DUPLICATE - 244)) | (1 << (mysqlParser.DYNAMIC - 244)) | (1 << (mysqlParser.ENABLE - 244)) | (1 << (mysqlParser.ENCRYPTION - 244)) | (1 << (mysqlParser.ENDS - 244)) | (1 << (mysqlParser.ENGINE - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (mysqlParser.ENGINES - 308)) | (1 << (mysqlParser.ERROR - 308)) | (1 << (mysqlParser.ERRORS - 308)) | (1 << (mysqlParser.ESCAPE - 308)) | (1 << (mysqlParser.EVEN - 308)) | (1 << (mysqlParser.EVENT - 308)) | (1 << (mysqlParser.EVENTS - 308)) | (1 << (mysqlParser.EVERY - 308)) | (1 << (mysqlParser.EXCHANGE - 308)) | (1 << (mysqlParser.EXCLUSIVE - 308)) | (1 << (mysqlParser.EXPIRE - 308)) | (1 << (mysqlParser.EXTENT_SIZE - 308)) | (1 << (mysqlParser.FAULTS - 308)) | (1 << (mysqlParser.FIELDS - 308)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (mysqlParser.FILTER - 308)) | (1 << (mysqlParser.FIRST - 308)) | (1 << (mysqlParser.FIXED - 308)) | (1 << (mysqlParser.FOLLOWS - 308)) | (1 << (mysqlParser.FULL - 308)) | (1 << (mysqlParser.FUNCTION - 308)) | (1 << (mysqlParser.GLOBAL - 308)) | (1 << (mysqlParser.GRANTS - 308)) | (1 << (mysqlParser.GROUP_REPLICATION - 308)) | (1 << (mysqlParser.HASH - 308)) | (1 << (mysqlParser.HOST - 308)) | (1 << (mysqlParser.IDENTIFIED - 308)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (mysqlParser.IMPORT - 308)) | (1 << (mysqlParser.INDEXES - 308)) | (1 << (mysqlParser.INITIAL_SIZE - 308)) | (1 << (mysqlParser.INPLACE - 308)) | (1 << (mysqlParser.INSERT_METHOD - 308)) | (1 << (mysqlParser.INSTANCE - 308)) | (1 << (mysqlParser.INVOKER - 308)) | (1 << (mysqlParser.IO - 308)) | (1 << (mysqlParser.IO_THREAD - 308)) | (1 << (mysqlParser.IPC - 308)) | (1 << (mysqlParser.ISOLATION - 308)) | (1 << (mysqlParser.ISSUER - 308)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (mysqlParser.LANGUAGE - 308)) | (1 << (mysqlParser.LAST - 308)) | (1 << (mysqlParser.LEAVES - 308)) | (1 << (mysqlParser.LESS - 308)) | (1 << (mysqlParser.LEVEL - 308)) | (1 << (mysqlParser.LIST - 308)) | (1 << (mysqlParser.LOCAL - 308)) | (1 << (mysqlParser.LOGFILE - 308)) | (1 << (mysqlParser.LOGS - 308)) | (1 << (mysqlParser.MASTER - 308)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 308)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (mysqlParser.MASTER_DELAY - 372)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (mysqlParser.MASTER_HOST - 372)) | (1 << (mysqlParser.MASTER_LOG_FILE - 372)) | (1 << (mysqlParser.MASTER_LOG_POS - 372)) | (1 << (mysqlParser.MASTER_PASSWORD - 372)) | (1 << (mysqlParser.MASTER_PORT - 372)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (mysqlParser.MASTER_SSL - 372)) | (1 << (mysqlParser.MASTER_SSL_CA - 372)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_CERT - 372)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (mysqlParser.MASTER_SSL_CRL - 372)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_KEY - 372)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 372)) | (1 << (mysqlParser.MASTER_USER - 372)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_ROWS - 372)) | (1 << (mysqlParser.MAX_SIZE - 372)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (mysqlParser.MERGE - 372)) | (1 << (mysqlParser.MID - 372)) | (1 << (mysqlParser.MIGRATE - 372)) | (1 << (mysqlParser.MIN_ROWS - 372)) | (1 << (mysqlParser.MODIFY - 372)) | (1 << (mysqlParser.MUTEX - 372)) | (1 << (mysqlParser.MYSQL - 372)) | (1 << (mysqlParser.NAME - 372)) | (1 << (mysqlParser.NAMES - 372)) | (1 << (mysqlParser.NCHAR - 372)) | (1 << (mysqlParser.NEVER - 372)) | (1 << (mysqlParser.NO - 372)) | (1 << (mysqlParser.NODEGROUP - 372)) | (1 << (mysqlParser.NONE - 372)) | (1 << (mysqlParser.OFFLINE - 372)) | (1 << (mysqlParser.OFFSET - 372)) | (1 << (mysqlParser.OJ - 372)) | (1 << (mysqlParser.OLD_PASSWORD - 372)) | (1 << (mysqlParser.ONE - 372)) | (1 << (mysqlParser.ONLINE - 372)) | (1 << (mysqlParser.ONLY - 372)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 372)) | (1 << (mysqlParser.OPTIONS - 372)) | (1 << (mysqlParser.OWNER - 372)) | (1 << (mysqlParser.PACK_KEYS - 372)) | (1 << (mysqlParser.PAGE - 372)) | (1 << (mysqlParser.PARSER - 372)) | (1 << (mysqlParser.PARTIAL - 372)) | (1 << (mysqlParser.PARTITIONING - 372)) | (1 << (mysqlParser.PARTITIONS - 372)) | (1 << (mysqlParser.PASSWORD - 372)) | (1 << (mysqlParser.PHASE - 372)) | (1 << (mysqlParser.PLUGIN_DIR - 372)) | (1 << (mysqlParser.PLUGINS - 372)) | (1 << (mysqlParser.PORT - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (mysqlParser.PRECEDES - 436)) | (1 << (mysqlParser.PREPARE - 436)) | (1 << (mysqlParser.PRESERVE - 436)) | (1 << (mysqlParser.PREV - 436)) | (1 << (mysqlParser.PROCESSLIST - 436)) | (1 << (mysqlParser.PROFILE - 436)) | (1 << (mysqlParser.PROFILES - 436)) | (1 << (mysqlParser.PROXY - 436)) | (1 << (mysqlParser.QUERY - 436)) | (1 << (mysqlParser.QUICK - 436)) | (1 << (mysqlParser.REBUILD - 436)) | (1 << (mysqlParser.RECOVER - 436)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (mysqlParser.REDUNDANT - 436)) | (1 << (mysqlParser.RELAY_LOG_FILE - 436)) | (1 << (mysqlParser.RELAY_LOG_POS - 436)) | (1 << (mysqlParser.RELAYLOG - 436)) | (1 << (mysqlParser.REMOVE - 436)) | (1 << (mysqlParser.REORGANIZE - 436)) | (1 << (mysqlParser.REPAIR - 436)) | (1 << (mysqlParser.REPLICATE_DO_DB - 436)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATION - 436)) | (1 << (mysqlParser.RESUME - 436)) | (1 << (mysqlParser.RETURNS - 436)) | (1 << (mysqlParser.ROLLBACK - 436)) | (1 << (mysqlParser.ROLLUP - 436)) | (1 << (mysqlParser.ROTATE - 436)) | (1 << (mysqlParser.ROW - 436)) | (1 << (mysqlParser.ROWS - 436)) | (1 << (mysqlParser.ROW_FORMAT - 436)) | (1 << (mysqlParser.SAVEPOINT - 436)) | (1 << (mysqlParser.SCHEDULE - 436)) | (1 << (mysqlParser.SECURITY - 436)) | (1 << (mysqlParser.SERVER - 436)) | (1 << (mysqlParser.SESSION - 436)) | (1 << (mysqlParser.SHARE - 436)) | (1 << (mysqlParser.SHARED - 436)) | (1 << (mysqlParser.SIGNED - 436)) | (1 << (mysqlParser.SIMPLE - 436)) | (1 << (mysqlParser.SLAVE - 436)) | (1 << (mysqlParser.SNAPSHOT - 436)) | (1 << (mysqlParser.SOCKET - 436)) | (1 << (mysqlParser.SOME - 436)) | (1 << (mysqlParser.SOUNDS - 436)) | (1 << (mysqlParser.SOURCE - 436)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (mysqlParser.SQL_CACHE - 436)) | (1 << (mysqlParser.SQL_NO_CACHE - 436)) | (1 << (mysqlParser.SQL_THREAD - 436)) | (1 << (mysqlParser.START - 436)) | (1 << (mysqlParser.STARTS - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (mysqlParser.STATS_AUTO_RECALC - 500)) | (1 << (mysqlParser.STATS_PERSISTENT - 500)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (mysqlParser.STATUS - 500)) | (1 << (mysqlParser.STOP - 500)) | (1 << (mysqlParser.STORAGE - 500)) | (1 << (mysqlParser.STRING - 500)) | (1 << (mysqlParser.SUBJECT - 500)) | (1 << (mysqlParser.SUBPARTITION - 500)) | (1 << (mysqlParser.SUBPARTITIONS - 500)) | (1 << (mysqlParser.SUSPEND - 500)) | (1 << (mysqlParser.SWAPS - 500)) | (1 << (mysqlParser.SWITCHES - 500)) | (1 << (mysqlParser.TABLESPACE - 500)) | (1 << (mysqlParser.TEMPORARY - 500)) | (1 << (mysqlParser.TEMPTABLE - 500)) | (1 << (mysqlParser.THAN - 500)) | (1 << (mysqlParser.TRANSACTION - 500)) | (1 << (mysqlParser.TRUNCATE - 500)) | (1 << (mysqlParser.UNDEFINED - 500)) | (1 << (mysqlParser.UNDOFILE - 500)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (mysqlParser.UNKNOWN - 500)) | (1 << (mysqlParser.UPGRADE - 500)) | (1 << (mysqlParser.USER - 500)) | (1 << (mysqlParser.VALIDATION - 500)) | (1 << (mysqlParser.VALUE - 500)) | (1 << (mysqlParser.VARIABLES - 500)) | (1 << (mysqlParser.VIEW - 500)) | (1 << (mysqlParser.WAIT - 500)) | (1 << (mysqlParser.WARNINGS - 500)) | (1 << (mysqlParser.WITHOUT - 500)) | (1 << (mysqlParser.WORK - 500)) | (1 << (mysqlParser.WRAPPER - 500)) | (1 << (mysqlParser.X509 - 500)) | (1 << (mysqlParser.XA - 500)) | (1 << (mysqlParser.XML - 500)) | (1 << (mysqlParser.QUARTER - 500)) | (1 << (mysqlParser.MONTH - 500)) | (1 << (mysqlParser.DAY - 500)) | (1 << (mysqlParser.HOUR - 500)) | (1 << (mysqlParser.MINUTE - 500)) | (1 << (mysqlParser.WEEK - 500)) | (1 << (mysqlParser.SECOND - 500)) | (1 << (mysqlParser.MICROSECOND - 500)) | (1 << (mysqlParser.TABLES - 500)) | (1 << (mysqlParser.ROUTINE - 500)) | (1 << (mysqlParser.EXECUTE - 500)) | (1 << (mysqlParser.FILE - 500)) | (1 << (mysqlParser.PROCESS - 500)) | (1 << (mysqlParser.RELOAD - 500)) | (1 << (mysqlParser.SHUTDOWN - 500)) | (1 << (mysqlParser.SUPER - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (mysqlParser.PRIVILEGES - 564)) | (1 << (mysqlParser.ARMSCII8 - 564)) | (1 << (mysqlParser.ASCII - 564)) | (1 << (mysqlParser.BIG5 - 564)) | (1 << (mysqlParser.CP1250 - 564)) | (1 << (mysqlParser.CP1251 - 564)) | (1 << (mysqlParser.CP1256 - 564)) | (1 << (mysqlParser.CP1257 - 564)) | (1 << (mysqlParser.CP850 - 564)) | (1 << (mysqlParser.CP852 - 564)) | (1 << (mysqlParser.CP866 - 564)) | (1 << (mysqlParser.CP932 - 564)) | (1 << (mysqlParser.DEC8 - 564)) | (1 << (mysqlParser.EUCJPMS - 564)) | (1 << (mysqlParser.EUCKR - 564)) | (1 << (mysqlParser.GB2312 - 564)) | (1 << (mysqlParser.GBK - 564)) | (1 << (mysqlParser.GEOSTD8 - 564)) | (1 << (mysqlParser.GREEK - 564)) | (1 << (mysqlParser.HEBREW - 564)) | (1 << (mysqlParser.HP8 - 564)) | (1 << (mysqlParser.KEYBCS2 - 564)) | (1 << (mysqlParser.KOI8R - 564)) | (1 << (mysqlParser.KOI8U - 564)) | (1 << (mysqlParser.LATIN1 - 564)) | (1 << (mysqlParser.LATIN2 - 564)) | (1 << (mysqlParser.LATIN5 - 564)) | (1 << (mysqlParser.LATIN7 - 564)) | (1 << (mysqlParser.MACCE - 564)) | (1 << (mysqlParser.MACROMAN - 564)) | (1 << (mysqlParser.SJIS - 564)) | (1 << (mysqlParser.SWE7 - 564)) | (1 << (mysqlParser.TIS620 - 564)) | (1 << (mysqlParser.UCS2 - 564)) | (1 << (mysqlParser.UJIS - 564)) | (1 << (mysqlParser.UTF16 - 564)) | (1 << (mysqlParser.UTF16LE - 564)) | (1 << (mysqlParser.UTF32 - 564)) | (1 << (mysqlParser.UTF8 - 564)) | (1 << (mysqlParser.UTF8MB3 - 564)) | (1 << (mysqlParser.UTF8MB4 - 564)) | (1 << (mysqlParser.ARCHIVE - 564)) | (1 << (mysqlParser.BLACKHOLE - 564)) | (1 << (mysqlParser.CSV - 564)) | (1 << (mysqlParser.FEDERATED - 564)) | (1 << (mysqlParser.INNODB - 564)) | (1 << (mysqlParser.MEMORY - 564)) | (1 << (mysqlParser.MRG_MYISAM - 564)) | (1 << (mysqlParser.MYISAM - 564)) | (1 << (mysqlParser.NDB - 564)) | (1 << (mysqlParser.NDBCLUSTER - 564)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (mysqlParser.REPEATABLE - 564)) | (1 << (mysqlParser.COMMITTED - 564)) | (1 << (mysqlParser.UNCOMMITTED - 564)) | (1 << (mysqlParser.SERIALIZABLE - 564)) | (1 << (mysqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (mysqlParser.LINESTRING - 564)) | (1 << (mysqlParser.MULTILINESTRING - 564)) | (1 << (mysqlParser.MULTIPOINT - 564)) | (1 << (mysqlParser.MULTIPOLYGON - 564)) | (1 << (mysqlParser.POINT - 564)) | (1 << (mysqlParser.POLYGON - 564)) | (1 << (mysqlParser.ABS - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (mysqlParser.ACOS - 628)) | (1 << (mysqlParser.ADDDATE - 628)) | (1 << (mysqlParser.ADDTIME - 628)) | (1 << (mysqlParser.AES_DECRYPT - 628)) | (1 << (mysqlParser.AES_ENCRYPT - 628)) | (1 << (mysqlParser.AREA - 628)) | (1 << (mysqlParser.ASBINARY - 628)) | (1 << (mysqlParser.ASIN - 628)) | (1 << (mysqlParser.ASTEXT - 628)) | (1 << (mysqlParser.ASWKB - 628)) | (1 << (mysqlParser.ASWKT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (mysqlParser.ATAN - 628)) | (1 << (mysqlParser.ATAN2 - 628)) | (1 << (mysqlParser.BENCHMARK - 628)) | (1 << (mysqlParser.BIN - 628)) | (1 << (mysqlParser.BIT_COUNT - 628)) | (1 << (mysqlParser.BIT_LENGTH - 628)) | (1 << (mysqlParser.BUFFER - 628)) | (1 << (mysqlParser.CEIL - 628)) | (1 << (mysqlParser.CEILING - 628)) | (1 << (mysqlParser.CENTROID - 628)) | (1 << (mysqlParser.CHARACTER_LENGTH - 628)) | (1 << (mysqlParser.CHARSET - 628)) | (1 << (mysqlParser.CHAR_LENGTH - 628)) | (1 << (mysqlParser.COERCIBILITY - 628)) | (1 << (mysqlParser.COLLATION - 628)) | (1 << (mysqlParser.COMPRESS - 628)) | (1 << (mysqlParser.CONCAT - 628)) | (1 << (mysqlParser.CONCAT_WS - 628)) | (1 << (mysqlParser.CONNECTION_ID - 628)) | (1 << (mysqlParser.CONV - 628)) | (1 << (mysqlParser.CONVERT_TZ - 628)) | (1 << (mysqlParser.COS - 628)) | (1 << (mysqlParser.COT - 628)) | (1 << (mysqlParser.CRC32 - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (mysqlParser.CREATE_DIGEST - 628)) | (1 << (mysqlParser.CROSSES - 628)) | (1 << (mysqlParser.DATEDIFF - 628)) | (1 << (mysqlParser.DATE_FORMAT - 628)) | (1 << (mysqlParser.DAYNAME - 628)) | (1 << (mysqlParser.DAYOFMONTH - 628)) | (1 << (mysqlParser.DAYOFWEEK - 628)) | (1 << (mysqlParser.DAYOFYEAR - 628)) | (1 << (mysqlParser.DECODE - 628)) | (1 << (mysqlParser.DEGREES - 628)) | (1 << (mysqlParser.DES_DECRYPT - 628)) | (1 << (mysqlParser.DES_ENCRYPT - 628)) | (1 << (mysqlParser.DIMENSION - 628)) | (1 << (mysqlParser.DISJOINT - 628)) | (1 << (mysqlParser.ELT - 628)) | (1 << (mysqlParser.ENCODE - 628)) | (1 << (mysqlParser.ENCRYPT - 628)) | (1 << (mysqlParser.ENDPOINT - 628)) | (1 << (mysqlParser.ENVELOPE - 628)) | (1 << (mysqlParser.EQUALS - 628)) | (1 << (mysqlParser.EXP - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (mysqlParser.EXPORT_SET - 692)) | (1 << (mysqlParser.EXTERIORRING - 692)) | (1 << (mysqlParser.EXTRACTVALUE - 692)) | (1 << (mysqlParser.FIELD - 692)) | (1 << (mysqlParser.FIND_IN_SET - 692)) | (1 << (mysqlParser.FLOOR - 692)) | (1 << (mysqlParser.FORMAT - 692)) | (1 << (mysqlParser.FOUND_ROWS - 692)) | (1 << (mysqlParser.FROM_BASE64 - 692)) | (1 << (mysqlParser.FROM_DAYS - 692)) | (1 << (mysqlParser.FROM_UNIXTIME - 692)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYN - 692)) | (1 << (mysqlParser.GEOMETRYTYPE - 692)) | (1 << (mysqlParser.GEOMFROMTEXT - 692)) | (1 << (mysqlParser.GEOMFROMWKB - 692)) | (1 << (mysqlParser.GET_FORMAT - 692)) | (1 << (mysqlParser.GET_LOCK - 692)) | (1 << (mysqlParser.GLENGTH - 692)) | (1 << (mysqlParser.GREATEST - 692)) | (1 << (mysqlParser.GTID_SUBSET - 692)) | (1 << (mysqlParser.GTID_SUBTRACT - 692)) | (1 << (mysqlParser.HEX - 692)) | (1 << (mysqlParser.IFNULL - 692)) | (1 << (mysqlParser.INET6_ATON - 692)) | (1 << (mysqlParser.INET6_NTOA - 692)) | (1 << (mysqlParser.INET_ATON - 692)) | (1 << (mysqlParser.INET_NTOA - 692)) | (1 << (mysqlParser.INSTR - 692)) | (1 << (mysqlParser.INTERIORRINGN - 692)) | (1 << (mysqlParser.INTERSECTS - 692)) | (1 << (mysqlParser.ISCLOSED - 692)) | (1 << (mysqlParser.ISEMPTY - 692)) | (1 << (mysqlParser.ISNULL - 692)) | (1 << (mysqlParser.ISSIMPLE - 692)) | (1 << (mysqlParser.IS_FREE_LOCK - 692)) | (1 << (mysqlParser.IS_IPV4 - 692)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 692)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 692)) | (1 << (mysqlParser.IS_IPV6 - 692)) | (1 << (mysqlParser.IS_USED_LOCK - 692)) | (1 << (mysqlParser.LAST_INSERT_ID - 692)) | (1 << (mysqlParser.LCASE - 692)) | (1 << (mysqlParser.LEAST - 692)) | (1 << (mysqlParser.LENGTH - 692)) | (1 << (mysqlParser.LINEFROMTEXT - 692)) | (1 << (mysqlParser.LINEFROMWKB - 692)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 692)) | (1 << (mysqlParser.LN - 692)) | (1 << (mysqlParser.LOAD_FILE - 692)) | (1 << (mysqlParser.LOCATE - 692)) | (1 << (mysqlParser.LOG - 692)) | (1 << (mysqlParser.LOG10 - 692)) | (1 << (mysqlParser.LOG2 - 692)) | (1 << (mysqlParser.LOWER - 692)) | (1 << (mysqlParser.LPAD - 692)) | (1 << (mysqlParser.LTRIM - 692)) | (1 << (mysqlParser.MAKEDATE - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (mysqlParser.MAKETIME - 756)) | (1 << (mysqlParser.MAKE_SET - 756)) | (1 << (mysqlParser.MASTER_POS_WAIT - 756)) | (1 << (mysqlParser.MBRCONTAINS - 756)) | (1 << (mysqlParser.MBRDISJOINT - 756)) | (1 << (mysqlParser.MBREQUAL - 756)) | (1 << (mysqlParser.MBRINTERSECTS - 756)) | (1 << (mysqlParser.MBROVERLAPS - 756)) | (1 << (mysqlParser.MBRTOUCHES - 756)) | (1 << (mysqlParser.MBRWITHIN - 756)) | (1 << (mysqlParser.MD5 - 756)) | (1 << (mysqlParser.MLINEFROMTEXT - 756)) | (1 << (mysqlParser.MLINEFROMWKB - 756)) | (1 << (mysqlParser.MONTHNAME - 756)) | (1 << (mysqlParser.MPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MPOINTFROMWKB - 756)) | (1 << (mysqlParser.MPOLYFROMTEXT - 756)) | (1 << (mysqlParser.MPOLYFROMWKB - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (mysqlParser.NAME_CONST - 756)) | (1 << (mysqlParser.NULLIF - 756)) | (1 << (mysqlParser.NUMGEOMETRIES - 756)) | (1 << (mysqlParser.NUMINTERIORRINGS - 756)) | (1 << (mysqlParser.NUMPOINTS - 756)) | (1 << (mysqlParser.OCT - 756)) | (1 << (mysqlParser.OCTET_LENGTH - 756)) | (1 << (mysqlParser.ORD - 756)) | (1 << (mysqlParser.OVERLAPS - 756)) | (1 << (mysqlParser.PERIOD_ADD - 756)) | (1 << (mysqlParser.PERIOD_DIFF - 756)) | (1 << (mysqlParser.PI - 756)) | (1 << (mysqlParser.POINTFROMTEXT - 756)) | (1 << (mysqlParser.POINTFROMWKB - 756)) | (1 << (mysqlParser.POINTN - 756)) | (1 << (mysqlParser.POLYFROMTEXT - 756)) | (1 << (mysqlParser.POLYFROMWKB - 756)) | (1 << (mysqlParser.POLYGONFROMTEXT - 756)) | (1 << (mysqlParser.POLYGONFROMWKB - 756)) | (1 << (mysqlParser.POW - 756)) | (1 << (mysqlParser.POWER - 756)) | (1 << (mysqlParser.QUOTE - 756)) | (1 << (mysqlParser.RADIANS - 756)) | (1 << (mysqlParser.RAND - 756)) | (1 << (mysqlParser.RANDOM_BYTES - 756)) | (1 << (mysqlParser.RELEASE_LOCK - 756)) | (1 << (mysqlParser.REVERSE - 756)) | (1 << (mysqlParser.ROUND - 756)) | (1 << (mysqlParser.ROW_COUNT - 756)) | (1 << (mysqlParser.RPAD - 756)) | (1 << (mysqlParser.RTRIM - 756)) | (1 << (mysqlParser.SEC_TO_TIME - 756)) | (1 << (mysqlParser.SESSION_USER - 756)) | (1 << (mysqlParser.SHA - 756)) | (1 << (mysqlParser.SHA1 - 756)) | (1 << (mysqlParser.SHA2 - 756)) | (1 << (mysqlParser.SIGN - 756)) | (1 << (mysqlParser.SIN - 756)) | (1 << (mysqlParser.SLEEP - 756)) | (1 << (mysqlParser.SOUNDEX - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (mysqlParser.SQRT - 820)) | (1 << (mysqlParser.SRID - 820)) | (1 << (mysqlParser.STARTPOINT - 820)) | (1 << (mysqlParser.STRCMP - 820)) | (1 << (mysqlParser.STR_TO_DATE - 820)) | (1 << (mysqlParser.ST_AREA - 820)) | (1 << (mysqlParser.ST_ASBINARY - 820)) | (1 << (mysqlParser.ST_ASTEXT - 820)) | (1 << (mysqlParser.ST_ASWKB - 820)) | (1 << (mysqlParser.ST_ASWKT - 820)) | (1 << (mysqlParser.ST_BUFFER - 820)) | (1 << (mysqlParser.ST_CENTROID - 820)) | (1 << (mysqlParser.ST_CONTAINS - 820)) | (1 << (mysqlParser.ST_CROSSES - 820)) | (1 << (mysqlParser.ST_DIFFERENCE - 820)) | (1 << (mysqlParser.ST_DIMENSION - 820)) | (1 << (mysqlParser.ST_DISJOINT - 820)) | (1 << (mysqlParser.ST_DISTANCE - 820)) | (1 << (mysqlParser.ST_ENDPOINT - 820)) | (1 << (mysqlParser.ST_ENVELOPE - 820)) | (1 << (mysqlParser.ST_EQUALS - 820)) | (1 << (mysqlParser.ST_EXTERIORRING - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYN - 820)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 820)) | (1 << (mysqlParser.ST_INTERIORRINGN - 820)) | (1 << (mysqlParser.ST_INTERSECTION - 820)) | (1 << (mysqlParser.ST_INTERSECTS - 820)) | (1 << (mysqlParser.ST_ISCLOSED - 820)) | (1 << (mysqlParser.ST_ISEMPTY - 820)) | (1 << (mysqlParser.ST_ISSIMPLE - 820)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINEFROMWKB - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (mysqlParser.ST_NUMPOINTS - 820)) | (1 << (mysqlParser.ST_OVERLAPS - 820)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 820)) | (1 << (mysqlParser.ST_POINTFROMWKB - 820)) | (1 << (mysqlParser.ST_POINTN - 820)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYFROMWKB - 820)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (mysqlParser.ST_SRID - 820)) | (1 << (mysqlParser.ST_STARTPOINT - 820)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (mysqlParser.ST_TOUCHES - 820)) | (1 << (mysqlParser.ST_UNION - 820)) | (1 << (mysqlParser.ST_WITHIN - 820)) | (1 << (mysqlParser.ST_X - 820)) | (1 << (mysqlParser.ST_Y - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (mysqlParser.SUBDATE - 884)) | (1 << (mysqlParser.SUBSTRING_INDEX - 884)) | (1 << (mysqlParser.SUBTIME - 884)) | (1 << (mysqlParser.SYSTEM_USER - 884)) | (1 << (mysqlParser.TAN - 884)) | (1 << (mysqlParser.TIMEDIFF - 884)) | (1 << (mysqlParser.TIMESTAMPADD - 884)) | (1 << (mysqlParser.TIMESTAMPDIFF - 884)) | (1 << (mysqlParser.TIME_FORMAT - 884)) | (1 << (mysqlParser.TIME_TO_SEC - 884)) | (1 << (mysqlParser.TOUCHES - 884)) | (1 << (mysqlParser.TO_BASE64 - 884)) | (1 << (mysqlParser.TO_DAYS - 884)) | (1 << (mysqlParser.TO_SECONDS - 884)) | (1 << (mysqlParser.UCASE - 884)) | (1 << (mysqlParser.UNCOMPRESS - 884)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (mysqlParser.UNHEX - 884)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 884)) | (1 << (mysqlParser.UPDATEXML - 884)) | (1 << (mysqlParser.UPPER - 884)) | (1 << (mysqlParser.UUID - 884)) | (1 << (mysqlParser.UUID_SHORT - 884)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (mysqlParser.VERSION - 884)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (mysqlParser.WEEKDAY - 884)) | (1 << (mysqlParser.WEEKOFYEAR - 884)) | (1 << (mysqlParser.WEIGHT_STRING - 884)) | (1 << (mysqlParser.WITHIN - 884)) | (1 << (mysqlParser.YEARWEEK - 884)) | (1 << (mysqlParser.Y_FUNCTION - 884)) | (1 << (mysqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 954)) & ~0x3f) == 0 and ((1 << (_la - 954)) & ((1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 954)) | (1 << (mysqlParser.ID - 954)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 954)))) != 0):
                        self.state = 2130
                        localctx.name = self.uid()




                self.state = 2135
                self.match(mysqlParser.PRIMARY)
                self.state = 2136
                self.match(mysqlParser.KEY)
                self.state = 2138
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.USING:
                    self.state = 2137
                    self.indexType()


                self.state = 2140
                self.indexColumnNames()
                self.state = 2144
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.USING or _la==mysqlParser.WITH or _la==mysqlParser.COMMENT or _la==mysqlParser.KEY_BLOCK_SIZE:
                    self.state = 2141
                    self.indexOption()
                    self.state = 2146
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 6:
                localctx = mysqlParser.AlterByAddUniqueKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2147
                self.match(mysqlParser.ADD)
                self.state = 2152
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.CONSTRAINT:
                    self.state = 2148
                    self.match(mysqlParser.CONSTRAINT)
                    self.state = 2150
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==mysqlParser.LEFT or _la==mysqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (mysqlParser.DATE - 180)) | (1 << (mysqlParser.TIME - 180)) | (1 << (mysqlParser.TIMESTAMP - 180)) | (1 << (mysqlParser.DATETIME - 180)) | (1 << (mysqlParser.YEAR - 180)) | (1 << (mysqlParser.TEXT - 180)) | (1 << (mysqlParser.ENUM - 180)) | (1 << (mysqlParser.COUNT - 180)) | (1 << (mysqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (mysqlParser.ACCOUNT - 244)) | (1 << (mysqlParser.ACTION - 244)) | (1 << (mysqlParser.AFTER - 244)) | (1 << (mysqlParser.AGGREGATE - 244)) | (1 << (mysqlParser.ALGORITHM - 244)) | (1 << (mysqlParser.ANY - 244)) | (1 << (mysqlParser.AT - 244)) | (1 << (mysqlParser.AUTHORS - 244)) | (1 << (mysqlParser.AUTOCOMMIT - 244)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (mysqlParser.AUTO_INCREMENT - 244)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 244)) | (1 << (mysqlParser.BEGIN - 244)) | (1 << (mysqlParser.BINLOG - 244)) | (1 << (mysqlParser.BIT - 244)) | (1 << (mysqlParser.BLOCK - 244)) | (1 << (mysqlParser.BTREE - 244)) | (1 << (mysqlParser.CASCADED - 244)) | (1 << (mysqlParser.CHAIN - 244)) | (1 << (mysqlParser.CHANNEL - 244)) | (1 << (mysqlParser.CHECKSUM - 244)) | (1 << (mysqlParser.CIPHER - 244)) | (1 << (mysqlParser.CLIENT - 244)) | (1 << (mysqlParser.COALESCE - 244)) | (1 << (mysqlParser.CODE - 244)) | (1 << (mysqlParser.COLUMNS - 244)) | (1 << (mysqlParser.COLUMN_FORMAT - 244)) | (1 << (mysqlParser.COMMENT - 244)) | (1 << (mysqlParser.COMMIT - 244)) | (1 << (mysqlParser.COMPACT - 244)) | (1 << (mysqlParser.COMPLETION - 244)) | (1 << (mysqlParser.COMPRESSED - 244)) | (1 << (mysqlParser.COMPRESSION - 244)) | (1 << (mysqlParser.CONCURRENT - 244)) | (1 << (mysqlParser.CONNECTION - 244)) | (1 << (mysqlParser.CONSISTENT - 244)) | (1 << (mysqlParser.CONTAINS - 244)) | (1 << (mysqlParser.CONTEXT - 244)) | (1 << (mysqlParser.CONTRIBUTORS - 244)) | (1 << (mysqlParser.COPY - 244)) | (1 << (mysqlParser.CPU - 244)) | (1 << (mysqlParser.DATA - 244)) | (1 << (mysqlParser.DATAFILE - 244)) | (1 << (mysqlParser.DEALLOCATE - 244)) | (1 << (mysqlParser.DEFAULT_AUTH - 244)) | (1 << (mysqlParser.DEFINER - 244)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 244)) | (1 << (mysqlParser.DIRECTORY - 244)) | (1 << (mysqlParser.DISABLE - 244)) | (1 << (mysqlParser.DISCARD - 244)) | (1 << (mysqlParser.DISK - 244)) | (1 << (mysqlParser.DO - 244)) | (1 << (mysqlParser.DUMPFILE - 244)) | (1 << (mysqlParser.DUPLICATE - 244)) | (1 << (mysqlParser.DYNAMIC - 244)) | (1 << (mysqlParser.ENABLE - 244)) | (1 << (mysqlParser.ENCRYPTION - 244)) | (1 << (mysqlParser.ENDS - 244)) | (1 << (mysqlParser.ENGINE - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (mysqlParser.ENGINES - 308)) | (1 << (mysqlParser.ERROR - 308)) | (1 << (mysqlParser.ERRORS - 308)) | (1 << (mysqlParser.ESCAPE - 308)) | (1 << (mysqlParser.EVEN - 308)) | (1 << (mysqlParser.EVENT - 308)) | (1 << (mysqlParser.EVENTS - 308)) | (1 << (mysqlParser.EVERY - 308)) | (1 << (mysqlParser.EXCHANGE - 308)) | (1 << (mysqlParser.EXCLUSIVE - 308)) | (1 << (mysqlParser.EXPIRE - 308)) | (1 << (mysqlParser.EXTENT_SIZE - 308)) | (1 << (mysqlParser.FAULTS - 308)) | (1 << (mysqlParser.FIELDS - 308)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (mysqlParser.FILTER - 308)) | (1 << (mysqlParser.FIRST - 308)) | (1 << (mysqlParser.FIXED - 308)) | (1 << (mysqlParser.FOLLOWS - 308)) | (1 << (mysqlParser.FULL - 308)) | (1 << (mysqlParser.FUNCTION - 308)) | (1 << (mysqlParser.GLOBAL - 308)) | (1 << (mysqlParser.GRANTS - 308)) | (1 << (mysqlParser.GROUP_REPLICATION - 308)) | (1 << (mysqlParser.HASH - 308)) | (1 << (mysqlParser.HOST - 308)) | (1 << (mysqlParser.IDENTIFIED - 308)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (mysqlParser.IMPORT - 308)) | (1 << (mysqlParser.INDEXES - 308)) | (1 << (mysqlParser.INITIAL_SIZE - 308)) | (1 << (mysqlParser.INPLACE - 308)) | (1 << (mysqlParser.INSERT_METHOD - 308)) | (1 << (mysqlParser.INSTANCE - 308)) | (1 << (mysqlParser.INVOKER - 308)) | (1 << (mysqlParser.IO - 308)) | (1 << (mysqlParser.IO_THREAD - 308)) | (1 << (mysqlParser.IPC - 308)) | (1 << (mysqlParser.ISOLATION - 308)) | (1 << (mysqlParser.ISSUER - 308)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (mysqlParser.LANGUAGE - 308)) | (1 << (mysqlParser.LAST - 308)) | (1 << (mysqlParser.LEAVES - 308)) | (1 << (mysqlParser.LESS - 308)) | (1 << (mysqlParser.LEVEL - 308)) | (1 << (mysqlParser.LIST - 308)) | (1 << (mysqlParser.LOCAL - 308)) | (1 << (mysqlParser.LOGFILE - 308)) | (1 << (mysqlParser.LOGS - 308)) | (1 << (mysqlParser.MASTER - 308)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 308)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (mysqlParser.MASTER_DELAY - 372)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (mysqlParser.MASTER_HOST - 372)) | (1 << (mysqlParser.MASTER_LOG_FILE - 372)) | (1 << (mysqlParser.MASTER_LOG_POS - 372)) | (1 << (mysqlParser.MASTER_PASSWORD - 372)) | (1 << (mysqlParser.MASTER_PORT - 372)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (mysqlParser.MASTER_SSL - 372)) | (1 << (mysqlParser.MASTER_SSL_CA - 372)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_CERT - 372)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (mysqlParser.MASTER_SSL_CRL - 372)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_KEY - 372)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 372)) | (1 << (mysqlParser.MASTER_USER - 372)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_ROWS - 372)) | (1 << (mysqlParser.MAX_SIZE - 372)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (mysqlParser.MERGE - 372)) | (1 << (mysqlParser.MID - 372)) | (1 << (mysqlParser.MIGRATE - 372)) | (1 << (mysqlParser.MIN_ROWS - 372)) | (1 << (mysqlParser.MODIFY - 372)) | (1 << (mysqlParser.MUTEX - 372)) | (1 << (mysqlParser.MYSQL - 372)) | (1 << (mysqlParser.NAME - 372)) | (1 << (mysqlParser.NAMES - 372)) | (1 << (mysqlParser.NCHAR - 372)) | (1 << (mysqlParser.NEVER - 372)) | (1 << (mysqlParser.NO - 372)) | (1 << (mysqlParser.NODEGROUP - 372)) | (1 << (mysqlParser.NONE - 372)) | (1 << (mysqlParser.OFFLINE - 372)) | (1 << (mysqlParser.OFFSET - 372)) | (1 << (mysqlParser.OJ - 372)) | (1 << (mysqlParser.OLD_PASSWORD - 372)) | (1 << (mysqlParser.ONE - 372)) | (1 << (mysqlParser.ONLINE - 372)) | (1 << (mysqlParser.ONLY - 372)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 372)) | (1 << (mysqlParser.OPTIONS - 372)) | (1 << (mysqlParser.OWNER - 372)) | (1 << (mysqlParser.PACK_KEYS - 372)) | (1 << (mysqlParser.PAGE - 372)) | (1 << (mysqlParser.PARSER - 372)) | (1 << (mysqlParser.PARTIAL - 372)) | (1 << (mysqlParser.PARTITIONING - 372)) | (1 << (mysqlParser.PARTITIONS - 372)) | (1 << (mysqlParser.PASSWORD - 372)) | (1 << (mysqlParser.PHASE - 372)) | (1 << (mysqlParser.PLUGIN_DIR - 372)) | (1 << (mysqlParser.PLUGINS - 372)) | (1 << (mysqlParser.PORT - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (mysqlParser.PRECEDES - 436)) | (1 << (mysqlParser.PREPARE - 436)) | (1 << (mysqlParser.PRESERVE - 436)) | (1 << (mysqlParser.PREV - 436)) | (1 << (mysqlParser.PROCESSLIST - 436)) | (1 << (mysqlParser.PROFILE - 436)) | (1 << (mysqlParser.PROFILES - 436)) | (1 << (mysqlParser.PROXY - 436)) | (1 << (mysqlParser.QUERY - 436)) | (1 << (mysqlParser.QUICK - 436)) | (1 << (mysqlParser.REBUILD - 436)) | (1 << (mysqlParser.RECOVER - 436)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (mysqlParser.REDUNDANT - 436)) | (1 << (mysqlParser.RELAY_LOG_FILE - 436)) | (1 << (mysqlParser.RELAY_LOG_POS - 436)) | (1 << (mysqlParser.RELAYLOG - 436)) | (1 << (mysqlParser.REMOVE - 436)) | (1 << (mysqlParser.REORGANIZE - 436)) | (1 << (mysqlParser.REPAIR - 436)) | (1 << (mysqlParser.REPLICATE_DO_DB - 436)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATION - 436)) | (1 << (mysqlParser.RESUME - 436)) | (1 << (mysqlParser.RETURNS - 436)) | (1 << (mysqlParser.ROLLBACK - 436)) | (1 << (mysqlParser.ROLLUP - 436)) | (1 << (mysqlParser.ROTATE - 436)) | (1 << (mysqlParser.ROW - 436)) | (1 << (mysqlParser.ROWS - 436)) | (1 << (mysqlParser.ROW_FORMAT - 436)) | (1 << (mysqlParser.SAVEPOINT - 436)) | (1 << (mysqlParser.SCHEDULE - 436)) | (1 << (mysqlParser.SECURITY - 436)) | (1 << (mysqlParser.SERVER - 436)) | (1 << (mysqlParser.SESSION - 436)) | (1 << (mysqlParser.SHARE - 436)) | (1 << (mysqlParser.SHARED - 436)) | (1 << (mysqlParser.SIGNED - 436)) | (1 << (mysqlParser.SIMPLE - 436)) | (1 << (mysqlParser.SLAVE - 436)) | (1 << (mysqlParser.SNAPSHOT - 436)) | (1 << (mysqlParser.SOCKET - 436)) | (1 << (mysqlParser.SOME - 436)) | (1 << (mysqlParser.SOUNDS - 436)) | (1 << (mysqlParser.SOURCE - 436)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (mysqlParser.SQL_CACHE - 436)) | (1 << (mysqlParser.SQL_NO_CACHE - 436)) | (1 << (mysqlParser.SQL_THREAD - 436)) | (1 << (mysqlParser.START - 436)) | (1 << (mysqlParser.STARTS - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (mysqlParser.STATS_AUTO_RECALC - 500)) | (1 << (mysqlParser.STATS_PERSISTENT - 500)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (mysqlParser.STATUS - 500)) | (1 << (mysqlParser.STOP - 500)) | (1 << (mysqlParser.STORAGE - 500)) | (1 << (mysqlParser.STRING - 500)) | (1 << (mysqlParser.SUBJECT - 500)) | (1 << (mysqlParser.SUBPARTITION - 500)) | (1 << (mysqlParser.SUBPARTITIONS - 500)) | (1 << (mysqlParser.SUSPEND - 500)) | (1 << (mysqlParser.SWAPS - 500)) | (1 << (mysqlParser.SWITCHES - 500)) | (1 << (mysqlParser.TABLESPACE - 500)) | (1 << (mysqlParser.TEMPORARY - 500)) | (1 << (mysqlParser.TEMPTABLE - 500)) | (1 << (mysqlParser.THAN - 500)) | (1 << (mysqlParser.TRANSACTION - 500)) | (1 << (mysqlParser.TRUNCATE - 500)) | (1 << (mysqlParser.UNDEFINED - 500)) | (1 << (mysqlParser.UNDOFILE - 500)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (mysqlParser.UNKNOWN - 500)) | (1 << (mysqlParser.UPGRADE - 500)) | (1 << (mysqlParser.USER - 500)) | (1 << (mysqlParser.VALIDATION - 500)) | (1 << (mysqlParser.VALUE - 500)) | (1 << (mysqlParser.VARIABLES - 500)) | (1 << (mysqlParser.VIEW - 500)) | (1 << (mysqlParser.WAIT - 500)) | (1 << (mysqlParser.WARNINGS - 500)) | (1 << (mysqlParser.WITHOUT - 500)) | (1 << (mysqlParser.WORK - 500)) | (1 << (mysqlParser.WRAPPER - 500)) | (1 << (mysqlParser.X509 - 500)) | (1 << (mysqlParser.XA - 500)) | (1 << (mysqlParser.XML - 500)) | (1 << (mysqlParser.QUARTER - 500)) | (1 << (mysqlParser.MONTH - 500)) | (1 << (mysqlParser.DAY - 500)) | (1 << (mysqlParser.HOUR - 500)) | (1 << (mysqlParser.MINUTE - 500)) | (1 << (mysqlParser.WEEK - 500)) | (1 << (mysqlParser.SECOND - 500)) | (1 << (mysqlParser.MICROSECOND - 500)) | (1 << (mysqlParser.TABLES - 500)) | (1 << (mysqlParser.ROUTINE - 500)) | (1 << (mysqlParser.EXECUTE - 500)) | (1 << (mysqlParser.FILE - 500)) | (1 << (mysqlParser.PROCESS - 500)) | (1 << (mysqlParser.RELOAD - 500)) | (1 << (mysqlParser.SHUTDOWN - 500)) | (1 << (mysqlParser.SUPER - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (mysqlParser.PRIVILEGES - 564)) | (1 << (mysqlParser.ARMSCII8 - 564)) | (1 << (mysqlParser.ASCII - 564)) | (1 << (mysqlParser.BIG5 - 564)) | (1 << (mysqlParser.CP1250 - 564)) | (1 << (mysqlParser.CP1251 - 564)) | (1 << (mysqlParser.CP1256 - 564)) | (1 << (mysqlParser.CP1257 - 564)) | (1 << (mysqlParser.CP850 - 564)) | (1 << (mysqlParser.CP852 - 564)) | (1 << (mysqlParser.CP866 - 564)) | (1 << (mysqlParser.CP932 - 564)) | (1 << (mysqlParser.DEC8 - 564)) | (1 << (mysqlParser.EUCJPMS - 564)) | (1 << (mysqlParser.EUCKR - 564)) | (1 << (mysqlParser.GB2312 - 564)) | (1 << (mysqlParser.GBK - 564)) | (1 << (mysqlParser.GEOSTD8 - 564)) | (1 << (mysqlParser.GREEK - 564)) | (1 << (mysqlParser.HEBREW - 564)) | (1 << (mysqlParser.HP8 - 564)) | (1 << (mysqlParser.KEYBCS2 - 564)) | (1 << (mysqlParser.KOI8R - 564)) | (1 << (mysqlParser.KOI8U - 564)) | (1 << (mysqlParser.LATIN1 - 564)) | (1 << (mysqlParser.LATIN2 - 564)) | (1 << (mysqlParser.LATIN5 - 564)) | (1 << (mysqlParser.LATIN7 - 564)) | (1 << (mysqlParser.MACCE - 564)) | (1 << (mysqlParser.MACROMAN - 564)) | (1 << (mysqlParser.SJIS - 564)) | (1 << (mysqlParser.SWE7 - 564)) | (1 << (mysqlParser.TIS620 - 564)) | (1 << (mysqlParser.UCS2 - 564)) | (1 << (mysqlParser.UJIS - 564)) | (1 << (mysqlParser.UTF16 - 564)) | (1 << (mysqlParser.UTF16LE - 564)) | (1 << (mysqlParser.UTF32 - 564)) | (1 << (mysqlParser.UTF8 - 564)) | (1 << (mysqlParser.UTF8MB3 - 564)) | (1 << (mysqlParser.UTF8MB4 - 564)) | (1 << (mysqlParser.ARCHIVE - 564)) | (1 << (mysqlParser.BLACKHOLE - 564)) | (1 << (mysqlParser.CSV - 564)) | (1 << (mysqlParser.FEDERATED - 564)) | (1 << (mysqlParser.INNODB - 564)) | (1 << (mysqlParser.MEMORY - 564)) | (1 << (mysqlParser.MRG_MYISAM - 564)) | (1 << (mysqlParser.MYISAM - 564)) | (1 << (mysqlParser.NDB - 564)) | (1 << (mysqlParser.NDBCLUSTER - 564)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (mysqlParser.REPEATABLE - 564)) | (1 << (mysqlParser.COMMITTED - 564)) | (1 << (mysqlParser.UNCOMMITTED - 564)) | (1 << (mysqlParser.SERIALIZABLE - 564)) | (1 << (mysqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (mysqlParser.LINESTRING - 564)) | (1 << (mysqlParser.MULTILINESTRING - 564)) | (1 << (mysqlParser.MULTIPOINT - 564)) | (1 << (mysqlParser.MULTIPOLYGON - 564)) | (1 << (mysqlParser.POINT - 564)) | (1 << (mysqlParser.POLYGON - 564)) | (1 << (mysqlParser.ABS - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (mysqlParser.ACOS - 628)) | (1 << (mysqlParser.ADDDATE - 628)) | (1 << (mysqlParser.ADDTIME - 628)) | (1 << (mysqlParser.AES_DECRYPT - 628)) | (1 << (mysqlParser.AES_ENCRYPT - 628)) | (1 << (mysqlParser.AREA - 628)) | (1 << (mysqlParser.ASBINARY - 628)) | (1 << (mysqlParser.ASIN - 628)) | (1 << (mysqlParser.ASTEXT - 628)) | (1 << (mysqlParser.ASWKB - 628)) | (1 << (mysqlParser.ASWKT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (mysqlParser.ATAN - 628)) | (1 << (mysqlParser.ATAN2 - 628)) | (1 << (mysqlParser.BENCHMARK - 628)) | (1 << (mysqlParser.BIN - 628)) | (1 << (mysqlParser.BIT_COUNT - 628)) | (1 << (mysqlParser.BIT_LENGTH - 628)) | (1 << (mysqlParser.BUFFER - 628)) | (1 << (mysqlParser.CEIL - 628)) | (1 << (mysqlParser.CEILING - 628)) | (1 << (mysqlParser.CENTROID - 628)) | (1 << (mysqlParser.CHARACTER_LENGTH - 628)) | (1 << (mysqlParser.CHARSET - 628)) | (1 << (mysqlParser.CHAR_LENGTH - 628)) | (1 << (mysqlParser.COERCIBILITY - 628)) | (1 << (mysqlParser.COLLATION - 628)) | (1 << (mysqlParser.COMPRESS - 628)) | (1 << (mysqlParser.CONCAT - 628)) | (1 << (mysqlParser.CONCAT_WS - 628)) | (1 << (mysqlParser.CONNECTION_ID - 628)) | (1 << (mysqlParser.CONV - 628)) | (1 << (mysqlParser.CONVERT_TZ - 628)) | (1 << (mysqlParser.COS - 628)) | (1 << (mysqlParser.COT - 628)) | (1 << (mysqlParser.CRC32 - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (mysqlParser.CREATE_DIGEST - 628)) | (1 << (mysqlParser.CROSSES - 628)) | (1 << (mysqlParser.DATEDIFF - 628)) | (1 << (mysqlParser.DATE_FORMAT - 628)) | (1 << (mysqlParser.DAYNAME - 628)) | (1 << (mysqlParser.DAYOFMONTH - 628)) | (1 << (mysqlParser.DAYOFWEEK - 628)) | (1 << (mysqlParser.DAYOFYEAR - 628)) | (1 << (mysqlParser.DECODE - 628)) | (1 << (mysqlParser.DEGREES - 628)) | (1 << (mysqlParser.DES_DECRYPT - 628)) | (1 << (mysqlParser.DES_ENCRYPT - 628)) | (1 << (mysqlParser.DIMENSION - 628)) | (1 << (mysqlParser.DISJOINT - 628)) | (1 << (mysqlParser.ELT - 628)) | (1 << (mysqlParser.ENCODE - 628)) | (1 << (mysqlParser.ENCRYPT - 628)) | (1 << (mysqlParser.ENDPOINT - 628)) | (1 << (mysqlParser.ENVELOPE - 628)) | (1 << (mysqlParser.EQUALS - 628)) | (1 << (mysqlParser.EXP - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (mysqlParser.EXPORT_SET - 692)) | (1 << (mysqlParser.EXTERIORRING - 692)) | (1 << (mysqlParser.EXTRACTVALUE - 692)) | (1 << (mysqlParser.FIELD - 692)) | (1 << (mysqlParser.FIND_IN_SET - 692)) | (1 << (mysqlParser.FLOOR - 692)) | (1 << (mysqlParser.FORMAT - 692)) | (1 << (mysqlParser.FOUND_ROWS - 692)) | (1 << (mysqlParser.FROM_BASE64 - 692)) | (1 << (mysqlParser.FROM_DAYS - 692)) | (1 << (mysqlParser.FROM_UNIXTIME - 692)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYN - 692)) | (1 << (mysqlParser.GEOMETRYTYPE - 692)) | (1 << (mysqlParser.GEOMFROMTEXT - 692)) | (1 << (mysqlParser.GEOMFROMWKB - 692)) | (1 << (mysqlParser.GET_FORMAT - 692)) | (1 << (mysqlParser.GET_LOCK - 692)) | (1 << (mysqlParser.GLENGTH - 692)) | (1 << (mysqlParser.GREATEST - 692)) | (1 << (mysqlParser.GTID_SUBSET - 692)) | (1 << (mysqlParser.GTID_SUBTRACT - 692)) | (1 << (mysqlParser.HEX - 692)) | (1 << (mysqlParser.IFNULL - 692)) | (1 << (mysqlParser.INET6_ATON - 692)) | (1 << (mysqlParser.INET6_NTOA - 692)) | (1 << (mysqlParser.INET_ATON - 692)) | (1 << (mysqlParser.INET_NTOA - 692)) | (1 << (mysqlParser.INSTR - 692)) | (1 << (mysqlParser.INTERIORRINGN - 692)) | (1 << (mysqlParser.INTERSECTS - 692)) | (1 << (mysqlParser.ISCLOSED - 692)) | (1 << (mysqlParser.ISEMPTY - 692)) | (1 << (mysqlParser.ISNULL - 692)) | (1 << (mysqlParser.ISSIMPLE - 692)) | (1 << (mysqlParser.IS_FREE_LOCK - 692)) | (1 << (mysqlParser.IS_IPV4 - 692)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 692)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 692)) | (1 << (mysqlParser.IS_IPV6 - 692)) | (1 << (mysqlParser.IS_USED_LOCK - 692)) | (1 << (mysqlParser.LAST_INSERT_ID - 692)) | (1 << (mysqlParser.LCASE - 692)) | (1 << (mysqlParser.LEAST - 692)) | (1 << (mysqlParser.LENGTH - 692)) | (1 << (mysqlParser.LINEFROMTEXT - 692)) | (1 << (mysqlParser.LINEFROMWKB - 692)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 692)) | (1 << (mysqlParser.LN - 692)) | (1 << (mysqlParser.LOAD_FILE - 692)) | (1 << (mysqlParser.LOCATE - 692)) | (1 << (mysqlParser.LOG - 692)) | (1 << (mysqlParser.LOG10 - 692)) | (1 << (mysqlParser.LOG2 - 692)) | (1 << (mysqlParser.LOWER - 692)) | (1 << (mysqlParser.LPAD - 692)) | (1 << (mysqlParser.LTRIM - 692)) | (1 << (mysqlParser.MAKEDATE - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (mysqlParser.MAKETIME - 756)) | (1 << (mysqlParser.MAKE_SET - 756)) | (1 << (mysqlParser.MASTER_POS_WAIT - 756)) | (1 << (mysqlParser.MBRCONTAINS - 756)) | (1 << (mysqlParser.MBRDISJOINT - 756)) | (1 << (mysqlParser.MBREQUAL - 756)) | (1 << (mysqlParser.MBRINTERSECTS - 756)) | (1 << (mysqlParser.MBROVERLAPS - 756)) | (1 << (mysqlParser.MBRTOUCHES - 756)) | (1 << (mysqlParser.MBRWITHIN - 756)) | (1 << (mysqlParser.MD5 - 756)) | (1 << (mysqlParser.MLINEFROMTEXT - 756)) | (1 << (mysqlParser.MLINEFROMWKB - 756)) | (1 << (mysqlParser.MONTHNAME - 756)) | (1 << (mysqlParser.MPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MPOINTFROMWKB - 756)) | (1 << (mysqlParser.MPOLYFROMTEXT - 756)) | (1 << (mysqlParser.MPOLYFROMWKB - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (mysqlParser.NAME_CONST - 756)) | (1 << (mysqlParser.NULLIF - 756)) | (1 << (mysqlParser.NUMGEOMETRIES - 756)) | (1 << (mysqlParser.NUMINTERIORRINGS - 756)) | (1 << (mysqlParser.NUMPOINTS - 756)) | (1 << (mysqlParser.OCT - 756)) | (1 << (mysqlParser.OCTET_LENGTH - 756)) | (1 << (mysqlParser.ORD - 756)) | (1 << (mysqlParser.OVERLAPS - 756)) | (1 << (mysqlParser.PERIOD_ADD - 756)) | (1 << (mysqlParser.PERIOD_DIFF - 756)) | (1 << (mysqlParser.PI - 756)) | (1 << (mysqlParser.POINTFROMTEXT - 756)) | (1 << (mysqlParser.POINTFROMWKB - 756)) | (1 << (mysqlParser.POINTN - 756)) | (1 << (mysqlParser.POLYFROMTEXT - 756)) | (1 << (mysqlParser.POLYFROMWKB - 756)) | (1 << (mysqlParser.POLYGONFROMTEXT - 756)) | (1 << (mysqlParser.POLYGONFROMWKB - 756)) | (1 << (mysqlParser.POW - 756)) | (1 << (mysqlParser.POWER - 756)) | (1 << (mysqlParser.QUOTE - 756)) | (1 << (mysqlParser.RADIANS - 756)) | (1 << (mysqlParser.RAND - 756)) | (1 << (mysqlParser.RANDOM_BYTES - 756)) | (1 << (mysqlParser.RELEASE_LOCK - 756)) | (1 << (mysqlParser.REVERSE - 756)) | (1 << (mysqlParser.ROUND - 756)) | (1 << (mysqlParser.ROW_COUNT - 756)) | (1 << (mysqlParser.RPAD - 756)) | (1 << (mysqlParser.RTRIM - 756)) | (1 << (mysqlParser.SEC_TO_TIME - 756)) | (1 << (mysqlParser.SESSION_USER - 756)) | (1 << (mysqlParser.SHA - 756)) | (1 << (mysqlParser.SHA1 - 756)) | (1 << (mysqlParser.SHA2 - 756)) | (1 << (mysqlParser.SIGN - 756)) | (1 << (mysqlParser.SIN - 756)) | (1 << (mysqlParser.SLEEP - 756)) | (1 << (mysqlParser.SOUNDEX - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (mysqlParser.SQRT - 820)) | (1 << (mysqlParser.SRID - 820)) | (1 << (mysqlParser.STARTPOINT - 820)) | (1 << (mysqlParser.STRCMP - 820)) | (1 << (mysqlParser.STR_TO_DATE - 820)) | (1 << (mysqlParser.ST_AREA - 820)) | (1 << (mysqlParser.ST_ASBINARY - 820)) | (1 << (mysqlParser.ST_ASTEXT - 820)) | (1 << (mysqlParser.ST_ASWKB - 820)) | (1 << (mysqlParser.ST_ASWKT - 820)) | (1 << (mysqlParser.ST_BUFFER - 820)) | (1 << (mysqlParser.ST_CENTROID - 820)) | (1 << (mysqlParser.ST_CONTAINS - 820)) | (1 << (mysqlParser.ST_CROSSES - 820)) | (1 << (mysqlParser.ST_DIFFERENCE - 820)) | (1 << (mysqlParser.ST_DIMENSION - 820)) | (1 << (mysqlParser.ST_DISJOINT - 820)) | (1 << (mysqlParser.ST_DISTANCE - 820)) | (1 << (mysqlParser.ST_ENDPOINT - 820)) | (1 << (mysqlParser.ST_ENVELOPE - 820)) | (1 << (mysqlParser.ST_EQUALS - 820)) | (1 << (mysqlParser.ST_EXTERIORRING - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYN - 820)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 820)) | (1 << (mysqlParser.ST_INTERIORRINGN - 820)) | (1 << (mysqlParser.ST_INTERSECTION - 820)) | (1 << (mysqlParser.ST_INTERSECTS - 820)) | (1 << (mysqlParser.ST_ISCLOSED - 820)) | (1 << (mysqlParser.ST_ISEMPTY - 820)) | (1 << (mysqlParser.ST_ISSIMPLE - 820)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINEFROMWKB - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (mysqlParser.ST_NUMPOINTS - 820)) | (1 << (mysqlParser.ST_OVERLAPS - 820)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 820)) | (1 << (mysqlParser.ST_POINTFROMWKB - 820)) | (1 << (mysqlParser.ST_POINTN - 820)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYFROMWKB - 820)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (mysqlParser.ST_SRID - 820)) | (1 << (mysqlParser.ST_STARTPOINT - 820)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (mysqlParser.ST_TOUCHES - 820)) | (1 << (mysqlParser.ST_UNION - 820)) | (1 << (mysqlParser.ST_WITHIN - 820)) | (1 << (mysqlParser.ST_X - 820)) | (1 << (mysqlParser.ST_Y - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (mysqlParser.SUBDATE - 884)) | (1 << (mysqlParser.SUBSTRING_INDEX - 884)) | (1 << (mysqlParser.SUBTIME - 884)) | (1 << (mysqlParser.SYSTEM_USER - 884)) | (1 << (mysqlParser.TAN - 884)) | (1 << (mysqlParser.TIMEDIFF - 884)) | (1 << (mysqlParser.TIMESTAMPADD - 884)) | (1 << (mysqlParser.TIMESTAMPDIFF - 884)) | (1 << (mysqlParser.TIME_FORMAT - 884)) | (1 << (mysqlParser.TIME_TO_SEC - 884)) | (1 << (mysqlParser.TOUCHES - 884)) | (1 << (mysqlParser.TO_BASE64 - 884)) | (1 << (mysqlParser.TO_DAYS - 884)) | (1 << (mysqlParser.TO_SECONDS - 884)) | (1 << (mysqlParser.UCASE - 884)) | (1 << (mysqlParser.UNCOMPRESS - 884)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (mysqlParser.UNHEX - 884)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 884)) | (1 << (mysqlParser.UPDATEXML - 884)) | (1 << (mysqlParser.UPPER - 884)) | (1 << (mysqlParser.UUID - 884)) | (1 << (mysqlParser.UUID_SHORT - 884)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (mysqlParser.VERSION - 884)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (mysqlParser.WEEKDAY - 884)) | (1 << (mysqlParser.WEEKOFYEAR - 884)) | (1 << (mysqlParser.WEIGHT_STRING - 884)) | (1 << (mysqlParser.WITHIN - 884)) | (1 << (mysqlParser.YEARWEEK - 884)) | (1 << (mysqlParser.Y_FUNCTION - 884)) | (1 << (mysqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 954)) & ~0x3f) == 0 and ((1 << (_la - 954)) & ((1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 954)) | (1 << (mysqlParser.ID - 954)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 954)))) != 0):
                        self.state = 2149
                        localctx.name = self.uid()




                self.state = 2154
                self.match(mysqlParser.UNIQUE)
                self.state = 2156
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.INDEX or _la==mysqlParser.KEY:
                    self.state = 2155
                    localctx.keyType = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==mysqlParser.INDEX or _la==mysqlParser.KEY):
                        localctx.keyType = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2159
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.LEFT or _la==mysqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (mysqlParser.DATE - 180)) | (1 << (mysqlParser.TIME - 180)) | (1 << (mysqlParser.TIMESTAMP - 180)) | (1 << (mysqlParser.DATETIME - 180)) | (1 << (mysqlParser.YEAR - 180)) | (1 << (mysqlParser.TEXT - 180)) | (1 << (mysqlParser.ENUM - 180)) | (1 << (mysqlParser.COUNT - 180)) | (1 << (mysqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (mysqlParser.ACCOUNT - 244)) | (1 << (mysqlParser.ACTION - 244)) | (1 << (mysqlParser.AFTER - 244)) | (1 << (mysqlParser.AGGREGATE - 244)) | (1 << (mysqlParser.ALGORITHM - 244)) | (1 << (mysqlParser.ANY - 244)) | (1 << (mysqlParser.AT - 244)) | (1 << (mysqlParser.AUTHORS - 244)) | (1 << (mysqlParser.AUTOCOMMIT - 244)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (mysqlParser.AUTO_INCREMENT - 244)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 244)) | (1 << (mysqlParser.BEGIN - 244)) | (1 << (mysqlParser.BINLOG - 244)) | (1 << (mysqlParser.BIT - 244)) | (1 << (mysqlParser.BLOCK - 244)) | (1 << (mysqlParser.BTREE - 244)) | (1 << (mysqlParser.CASCADED - 244)) | (1 << (mysqlParser.CHAIN - 244)) | (1 << (mysqlParser.CHANNEL - 244)) | (1 << (mysqlParser.CHECKSUM - 244)) | (1 << (mysqlParser.CIPHER - 244)) | (1 << (mysqlParser.CLIENT - 244)) | (1 << (mysqlParser.COALESCE - 244)) | (1 << (mysqlParser.CODE - 244)) | (1 << (mysqlParser.COLUMNS - 244)) | (1 << (mysqlParser.COLUMN_FORMAT - 244)) | (1 << (mysqlParser.COMMENT - 244)) | (1 << (mysqlParser.COMMIT - 244)) | (1 << (mysqlParser.COMPACT - 244)) | (1 << (mysqlParser.COMPLETION - 244)) | (1 << (mysqlParser.COMPRESSED - 244)) | (1 << (mysqlParser.COMPRESSION - 244)) | (1 << (mysqlParser.CONCURRENT - 244)) | (1 << (mysqlParser.CONNECTION - 244)) | (1 << (mysqlParser.CONSISTENT - 244)) | (1 << (mysqlParser.CONTAINS - 244)) | (1 << (mysqlParser.CONTEXT - 244)) | (1 << (mysqlParser.CONTRIBUTORS - 244)) | (1 << (mysqlParser.COPY - 244)) | (1 << (mysqlParser.CPU - 244)) | (1 << (mysqlParser.DATA - 244)) | (1 << (mysqlParser.DATAFILE - 244)) | (1 << (mysqlParser.DEALLOCATE - 244)) | (1 << (mysqlParser.DEFAULT_AUTH - 244)) | (1 << (mysqlParser.DEFINER - 244)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 244)) | (1 << (mysqlParser.DIRECTORY - 244)) | (1 << (mysqlParser.DISABLE - 244)) | (1 << (mysqlParser.DISCARD - 244)) | (1 << (mysqlParser.DISK - 244)) | (1 << (mysqlParser.DO - 244)) | (1 << (mysqlParser.DUMPFILE - 244)) | (1 << (mysqlParser.DUPLICATE - 244)) | (1 << (mysqlParser.DYNAMIC - 244)) | (1 << (mysqlParser.ENABLE - 244)) | (1 << (mysqlParser.ENCRYPTION - 244)) | (1 << (mysqlParser.ENDS - 244)) | (1 << (mysqlParser.ENGINE - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (mysqlParser.ENGINES - 308)) | (1 << (mysqlParser.ERROR - 308)) | (1 << (mysqlParser.ERRORS - 308)) | (1 << (mysqlParser.ESCAPE - 308)) | (1 << (mysqlParser.EVEN - 308)) | (1 << (mysqlParser.EVENT - 308)) | (1 << (mysqlParser.EVENTS - 308)) | (1 << (mysqlParser.EVERY - 308)) | (1 << (mysqlParser.EXCHANGE - 308)) | (1 << (mysqlParser.EXCLUSIVE - 308)) | (1 << (mysqlParser.EXPIRE - 308)) | (1 << (mysqlParser.EXTENT_SIZE - 308)) | (1 << (mysqlParser.FAULTS - 308)) | (1 << (mysqlParser.FIELDS - 308)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (mysqlParser.FILTER - 308)) | (1 << (mysqlParser.FIRST - 308)) | (1 << (mysqlParser.FIXED - 308)) | (1 << (mysqlParser.FOLLOWS - 308)) | (1 << (mysqlParser.FULL - 308)) | (1 << (mysqlParser.FUNCTION - 308)) | (1 << (mysqlParser.GLOBAL - 308)) | (1 << (mysqlParser.GRANTS - 308)) | (1 << (mysqlParser.GROUP_REPLICATION - 308)) | (1 << (mysqlParser.HASH - 308)) | (1 << (mysqlParser.HOST - 308)) | (1 << (mysqlParser.IDENTIFIED - 308)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (mysqlParser.IMPORT - 308)) | (1 << (mysqlParser.INDEXES - 308)) | (1 << (mysqlParser.INITIAL_SIZE - 308)) | (1 << (mysqlParser.INPLACE - 308)) | (1 << (mysqlParser.INSERT_METHOD - 308)) | (1 << (mysqlParser.INSTANCE - 308)) | (1 << (mysqlParser.INVOKER - 308)) | (1 << (mysqlParser.IO - 308)) | (1 << (mysqlParser.IO_THREAD - 308)) | (1 << (mysqlParser.IPC - 308)) | (1 << (mysqlParser.ISOLATION - 308)) | (1 << (mysqlParser.ISSUER - 308)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (mysqlParser.LANGUAGE - 308)) | (1 << (mysqlParser.LAST - 308)) | (1 << (mysqlParser.LEAVES - 308)) | (1 << (mysqlParser.LESS - 308)) | (1 << (mysqlParser.LEVEL - 308)) | (1 << (mysqlParser.LIST - 308)) | (1 << (mysqlParser.LOCAL - 308)) | (1 << (mysqlParser.LOGFILE - 308)) | (1 << (mysqlParser.LOGS - 308)) | (1 << (mysqlParser.MASTER - 308)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 308)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (mysqlParser.MASTER_DELAY - 372)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (mysqlParser.MASTER_HOST - 372)) | (1 << (mysqlParser.MASTER_LOG_FILE - 372)) | (1 << (mysqlParser.MASTER_LOG_POS - 372)) | (1 << (mysqlParser.MASTER_PASSWORD - 372)) | (1 << (mysqlParser.MASTER_PORT - 372)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (mysqlParser.MASTER_SSL - 372)) | (1 << (mysqlParser.MASTER_SSL_CA - 372)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_CERT - 372)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (mysqlParser.MASTER_SSL_CRL - 372)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_KEY - 372)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 372)) | (1 << (mysqlParser.MASTER_USER - 372)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_ROWS - 372)) | (1 << (mysqlParser.MAX_SIZE - 372)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (mysqlParser.MERGE - 372)) | (1 << (mysqlParser.MID - 372)) | (1 << (mysqlParser.MIGRATE - 372)) | (1 << (mysqlParser.MIN_ROWS - 372)) | (1 << (mysqlParser.MODIFY - 372)) | (1 << (mysqlParser.MUTEX - 372)) | (1 << (mysqlParser.MYSQL - 372)) | (1 << (mysqlParser.NAME - 372)) | (1 << (mysqlParser.NAMES - 372)) | (1 << (mysqlParser.NCHAR - 372)) | (1 << (mysqlParser.NEVER - 372)) | (1 << (mysqlParser.NO - 372)) | (1 << (mysqlParser.NODEGROUP - 372)) | (1 << (mysqlParser.NONE - 372)) | (1 << (mysqlParser.OFFLINE - 372)) | (1 << (mysqlParser.OFFSET - 372)) | (1 << (mysqlParser.OJ - 372)) | (1 << (mysqlParser.OLD_PASSWORD - 372)) | (1 << (mysqlParser.ONE - 372)) | (1 << (mysqlParser.ONLINE - 372)) | (1 << (mysqlParser.ONLY - 372)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 372)) | (1 << (mysqlParser.OPTIONS - 372)) | (1 << (mysqlParser.OWNER - 372)) | (1 << (mysqlParser.PACK_KEYS - 372)) | (1 << (mysqlParser.PAGE - 372)) | (1 << (mysqlParser.PARSER - 372)) | (1 << (mysqlParser.PARTIAL - 372)) | (1 << (mysqlParser.PARTITIONING - 372)) | (1 << (mysqlParser.PARTITIONS - 372)) | (1 << (mysqlParser.PASSWORD - 372)) | (1 << (mysqlParser.PHASE - 372)) | (1 << (mysqlParser.PLUGIN_DIR - 372)) | (1 << (mysqlParser.PLUGINS - 372)) | (1 << (mysqlParser.PORT - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (mysqlParser.PRECEDES - 436)) | (1 << (mysqlParser.PREPARE - 436)) | (1 << (mysqlParser.PRESERVE - 436)) | (1 << (mysqlParser.PREV - 436)) | (1 << (mysqlParser.PROCESSLIST - 436)) | (1 << (mysqlParser.PROFILE - 436)) | (1 << (mysqlParser.PROFILES - 436)) | (1 << (mysqlParser.PROXY - 436)) | (1 << (mysqlParser.QUERY - 436)) | (1 << (mysqlParser.QUICK - 436)) | (1 << (mysqlParser.REBUILD - 436)) | (1 << (mysqlParser.RECOVER - 436)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (mysqlParser.REDUNDANT - 436)) | (1 << (mysqlParser.RELAY_LOG_FILE - 436)) | (1 << (mysqlParser.RELAY_LOG_POS - 436)) | (1 << (mysqlParser.RELAYLOG - 436)) | (1 << (mysqlParser.REMOVE - 436)) | (1 << (mysqlParser.REORGANIZE - 436)) | (1 << (mysqlParser.REPAIR - 436)) | (1 << (mysqlParser.REPLICATE_DO_DB - 436)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATION - 436)) | (1 << (mysqlParser.RESUME - 436)) | (1 << (mysqlParser.RETURNS - 436)) | (1 << (mysqlParser.ROLLBACK - 436)) | (1 << (mysqlParser.ROLLUP - 436)) | (1 << (mysqlParser.ROTATE - 436)) | (1 << (mysqlParser.ROW - 436)) | (1 << (mysqlParser.ROWS - 436)) | (1 << (mysqlParser.ROW_FORMAT - 436)) | (1 << (mysqlParser.SAVEPOINT - 436)) | (1 << (mysqlParser.SCHEDULE - 436)) | (1 << (mysqlParser.SECURITY - 436)) | (1 << (mysqlParser.SERVER - 436)) | (1 << (mysqlParser.SESSION - 436)) | (1 << (mysqlParser.SHARE - 436)) | (1 << (mysqlParser.SHARED - 436)) | (1 << (mysqlParser.SIGNED - 436)) | (1 << (mysqlParser.SIMPLE - 436)) | (1 << (mysqlParser.SLAVE - 436)) | (1 << (mysqlParser.SNAPSHOT - 436)) | (1 << (mysqlParser.SOCKET - 436)) | (1 << (mysqlParser.SOME - 436)) | (1 << (mysqlParser.SOUNDS - 436)) | (1 << (mysqlParser.SOURCE - 436)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (mysqlParser.SQL_CACHE - 436)) | (1 << (mysqlParser.SQL_NO_CACHE - 436)) | (1 << (mysqlParser.SQL_THREAD - 436)) | (1 << (mysqlParser.START - 436)) | (1 << (mysqlParser.STARTS - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (mysqlParser.STATS_AUTO_RECALC - 500)) | (1 << (mysqlParser.STATS_PERSISTENT - 500)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (mysqlParser.STATUS - 500)) | (1 << (mysqlParser.STOP - 500)) | (1 << (mysqlParser.STORAGE - 500)) | (1 << (mysqlParser.STRING - 500)) | (1 << (mysqlParser.SUBJECT - 500)) | (1 << (mysqlParser.SUBPARTITION - 500)) | (1 << (mysqlParser.SUBPARTITIONS - 500)) | (1 << (mysqlParser.SUSPEND - 500)) | (1 << (mysqlParser.SWAPS - 500)) | (1 << (mysqlParser.SWITCHES - 500)) | (1 << (mysqlParser.TABLESPACE - 500)) | (1 << (mysqlParser.TEMPORARY - 500)) | (1 << (mysqlParser.TEMPTABLE - 500)) | (1 << (mysqlParser.THAN - 500)) | (1 << (mysqlParser.TRANSACTION - 500)) | (1 << (mysqlParser.TRUNCATE - 500)) | (1 << (mysqlParser.UNDEFINED - 500)) | (1 << (mysqlParser.UNDOFILE - 500)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (mysqlParser.UNKNOWN - 500)) | (1 << (mysqlParser.UPGRADE - 500)) | (1 << (mysqlParser.USER - 500)) | (1 << (mysqlParser.VALIDATION - 500)) | (1 << (mysqlParser.VALUE - 500)) | (1 << (mysqlParser.VARIABLES - 500)) | (1 << (mysqlParser.VIEW - 500)) | (1 << (mysqlParser.WAIT - 500)) | (1 << (mysqlParser.WARNINGS - 500)) | (1 << (mysqlParser.WITHOUT - 500)) | (1 << (mysqlParser.WORK - 500)) | (1 << (mysqlParser.WRAPPER - 500)) | (1 << (mysqlParser.X509 - 500)) | (1 << (mysqlParser.XA - 500)) | (1 << (mysqlParser.XML - 500)) | (1 << (mysqlParser.QUARTER - 500)) | (1 << (mysqlParser.MONTH - 500)) | (1 << (mysqlParser.DAY - 500)) | (1 << (mysqlParser.HOUR - 500)) | (1 << (mysqlParser.MINUTE - 500)) | (1 << (mysqlParser.WEEK - 500)) | (1 << (mysqlParser.SECOND - 500)) | (1 << (mysqlParser.MICROSECOND - 500)) | (1 << (mysqlParser.TABLES - 500)) | (1 << (mysqlParser.ROUTINE - 500)) | (1 << (mysqlParser.EXECUTE - 500)) | (1 << (mysqlParser.FILE - 500)) | (1 << (mysqlParser.PROCESS - 500)) | (1 << (mysqlParser.RELOAD - 500)) | (1 << (mysqlParser.SHUTDOWN - 500)) | (1 << (mysqlParser.SUPER - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (mysqlParser.PRIVILEGES - 564)) | (1 << (mysqlParser.ARMSCII8 - 564)) | (1 << (mysqlParser.ASCII - 564)) | (1 << (mysqlParser.BIG5 - 564)) | (1 << (mysqlParser.CP1250 - 564)) | (1 << (mysqlParser.CP1251 - 564)) | (1 << (mysqlParser.CP1256 - 564)) | (1 << (mysqlParser.CP1257 - 564)) | (1 << (mysqlParser.CP850 - 564)) | (1 << (mysqlParser.CP852 - 564)) | (1 << (mysqlParser.CP866 - 564)) | (1 << (mysqlParser.CP932 - 564)) | (1 << (mysqlParser.DEC8 - 564)) | (1 << (mysqlParser.EUCJPMS - 564)) | (1 << (mysqlParser.EUCKR - 564)) | (1 << (mysqlParser.GB2312 - 564)) | (1 << (mysqlParser.GBK - 564)) | (1 << (mysqlParser.GEOSTD8 - 564)) | (1 << (mysqlParser.GREEK - 564)) | (1 << (mysqlParser.HEBREW - 564)) | (1 << (mysqlParser.HP8 - 564)) | (1 << (mysqlParser.KEYBCS2 - 564)) | (1 << (mysqlParser.KOI8R - 564)) | (1 << (mysqlParser.KOI8U - 564)) | (1 << (mysqlParser.LATIN1 - 564)) | (1 << (mysqlParser.LATIN2 - 564)) | (1 << (mysqlParser.LATIN5 - 564)) | (1 << (mysqlParser.LATIN7 - 564)) | (1 << (mysqlParser.MACCE - 564)) | (1 << (mysqlParser.MACROMAN - 564)) | (1 << (mysqlParser.SJIS - 564)) | (1 << (mysqlParser.SWE7 - 564)) | (1 << (mysqlParser.TIS620 - 564)) | (1 << (mysqlParser.UCS2 - 564)) | (1 << (mysqlParser.UJIS - 564)) | (1 << (mysqlParser.UTF16 - 564)) | (1 << (mysqlParser.UTF16LE - 564)) | (1 << (mysqlParser.UTF32 - 564)) | (1 << (mysqlParser.UTF8 - 564)) | (1 << (mysqlParser.UTF8MB3 - 564)) | (1 << (mysqlParser.UTF8MB4 - 564)) | (1 << (mysqlParser.ARCHIVE - 564)) | (1 << (mysqlParser.BLACKHOLE - 564)) | (1 << (mysqlParser.CSV - 564)) | (1 << (mysqlParser.FEDERATED - 564)) | (1 << (mysqlParser.INNODB - 564)) | (1 << (mysqlParser.MEMORY - 564)) | (1 << (mysqlParser.MRG_MYISAM - 564)) | (1 << (mysqlParser.MYISAM - 564)) | (1 << (mysqlParser.NDB - 564)) | (1 << (mysqlParser.NDBCLUSTER - 564)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (mysqlParser.REPEATABLE - 564)) | (1 << (mysqlParser.COMMITTED - 564)) | (1 << (mysqlParser.UNCOMMITTED - 564)) | (1 << (mysqlParser.SERIALIZABLE - 564)) | (1 << (mysqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (mysqlParser.LINESTRING - 564)) | (1 << (mysqlParser.MULTILINESTRING - 564)) | (1 << (mysqlParser.MULTIPOINT - 564)) | (1 << (mysqlParser.MULTIPOLYGON - 564)) | (1 << (mysqlParser.POINT - 564)) | (1 << (mysqlParser.POLYGON - 564)) | (1 << (mysqlParser.ABS - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (mysqlParser.ACOS - 628)) | (1 << (mysqlParser.ADDDATE - 628)) | (1 << (mysqlParser.ADDTIME - 628)) | (1 << (mysqlParser.AES_DECRYPT - 628)) | (1 << (mysqlParser.AES_ENCRYPT - 628)) | (1 << (mysqlParser.AREA - 628)) | (1 << (mysqlParser.ASBINARY - 628)) | (1 << (mysqlParser.ASIN - 628)) | (1 << (mysqlParser.ASTEXT - 628)) | (1 << (mysqlParser.ASWKB - 628)) | (1 << (mysqlParser.ASWKT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (mysqlParser.ATAN - 628)) | (1 << (mysqlParser.ATAN2 - 628)) | (1 << (mysqlParser.BENCHMARK - 628)) | (1 << (mysqlParser.BIN - 628)) | (1 << (mysqlParser.BIT_COUNT - 628)) | (1 << (mysqlParser.BIT_LENGTH - 628)) | (1 << (mysqlParser.BUFFER - 628)) | (1 << (mysqlParser.CEIL - 628)) | (1 << (mysqlParser.CEILING - 628)) | (1 << (mysqlParser.CENTROID - 628)) | (1 << (mysqlParser.CHARACTER_LENGTH - 628)) | (1 << (mysqlParser.CHARSET - 628)) | (1 << (mysqlParser.CHAR_LENGTH - 628)) | (1 << (mysqlParser.COERCIBILITY - 628)) | (1 << (mysqlParser.COLLATION - 628)) | (1 << (mysqlParser.COMPRESS - 628)) | (1 << (mysqlParser.CONCAT - 628)) | (1 << (mysqlParser.CONCAT_WS - 628)) | (1 << (mysqlParser.CONNECTION_ID - 628)) | (1 << (mysqlParser.CONV - 628)) | (1 << (mysqlParser.CONVERT_TZ - 628)) | (1 << (mysqlParser.COS - 628)) | (1 << (mysqlParser.COT - 628)) | (1 << (mysqlParser.CRC32 - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (mysqlParser.CREATE_DIGEST - 628)) | (1 << (mysqlParser.CROSSES - 628)) | (1 << (mysqlParser.DATEDIFF - 628)) | (1 << (mysqlParser.DATE_FORMAT - 628)) | (1 << (mysqlParser.DAYNAME - 628)) | (1 << (mysqlParser.DAYOFMONTH - 628)) | (1 << (mysqlParser.DAYOFWEEK - 628)) | (1 << (mysqlParser.DAYOFYEAR - 628)) | (1 << (mysqlParser.DECODE - 628)) | (1 << (mysqlParser.DEGREES - 628)) | (1 << (mysqlParser.DES_DECRYPT - 628)) | (1 << (mysqlParser.DES_ENCRYPT - 628)) | (1 << (mysqlParser.DIMENSION - 628)) | (1 << (mysqlParser.DISJOINT - 628)) | (1 << (mysqlParser.ELT - 628)) | (1 << (mysqlParser.ENCODE - 628)) | (1 << (mysqlParser.ENCRYPT - 628)) | (1 << (mysqlParser.ENDPOINT - 628)) | (1 << (mysqlParser.ENVELOPE - 628)) | (1 << (mysqlParser.EQUALS - 628)) | (1 << (mysqlParser.EXP - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (mysqlParser.EXPORT_SET - 692)) | (1 << (mysqlParser.EXTERIORRING - 692)) | (1 << (mysqlParser.EXTRACTVALUE - 692)) | (1 << (mysqlParser.FIELD - 692)) | (1 << (mysqlParser.FIND_IN_SET - 692)) | (1 << (mysqlParser.FLOOR - 692)) | (1 << (mysqlParser.FORMAT - 692)) | (1 << (mysqlParser.FOUND_ROWS - 692)) | (1 << (mysqlParser.FROM_BASE64 - 692)) | (1 << (mysqlParser.FROM_DAYS - 692)) | (1 << (mysqlParser.FROM_UNIXTIME - 692)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYN - 692)) | (1 << (mysqlParser.GEOMETRYTYPE - 692)) | (1 << (mysqlParser.GEOMFROMTEXT - 692)) | (1 << (mysqlParser.GEOMFROMWKB - 692)) | (1 << (mysqlParser.GET_FORMAT - 692)) | (1 << (mysqlParser.GET_LOCK - 692)) | (1 << (mysqlParser.GLENGTH - 692)) | (1 << (mysqlParser.GREATEST - 692)) | (1 << (mysqlParser.GTID_SUBSET - 692)) | (1 << (mysqlParser.GTID_SUBTRACT - 692)) | (1 << (mysqlParser.HEX - 692)) | (1 << (mysqlParser.IFNULL - 692)) | (1 << (mysqlParser.INET6_ATON - 692)) | (1 << (mysqlParser.INET6_NTOA - 692)) | (1 << (mysqlParser.INET_ATON - 692)) | (1 << (mysqlParser.INET_NTOA - 692)) | (1 << (mysqlParser.INSTR - 692)) | (1 << (mysqlParser.INTERIORRINGN - 692)) | (1 << (mysqlParser.INTERSECTS - 692)) | (1 << (mysqlParser.ISCLOSED - 692)) | (1 << (mysqlParser.ISEMPTY - 692)) | (1 << (mysqlParser.ISNULL - 692)) | (1 << (mysqlParser.ISSIMPLE - 692)) | (1 << (mysqlParser.IS_FREE_LOCK - 692)) | (1 << (mysqlParser.IS_IPV4 - 692)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 692)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 692)) | (1 << (mysqlParser.IS_IPV6 - 692)) | (1 << (mysqlParser.IS_USED_LOCK - 692)) | (1 << (mysqlParser.LAST_INSERT_ID - 692)) | (1 << (mysqlParser.LCASE - 692)) | (1 << (mysqlParser.LEAST - 692)) | (1 << (mysqlParser.LENGTH - 692)) | (1 << (mysqlParser.LINEFROMTEXT - 692)) | (1 << (mysqlParser.LINEFROMWKB - 692)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 692)) | (1 << (mysqlParser.LN - 692)) | (1 << (mysqlParser.LOAD_FILE - 692)) | (1 << (mysqlParser.LOCATE - 692)) | (1 << (mysqlParser.LOG - 692)) | (1 << (mysqlParser.LOG10 - 692)) | (1 << (mysqlParser.LOG2 - 692)) | (1 << (mysqlParser.LOWER - 692)) | (1 << (mysqlParser.LPAD - 692)) | (1 << (mysqlParser.LTRIM - 692)) | (1 << (mysqlParser.MAKEDATE - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (mysqlParser.MAKETIME - 756)) | (1 << (mysqlParser.MAKE_SET - 756)) | (1 << (mysqlParser.MASTER_POS_WAIT - 756)) | (1 << (mysqlParser.MBRCONTAINS - 756)) | (1 << (mysqlParser.MBRDISJOINT - 756)) | (1 << (mysqlParser.MBREQUAL - 756)) | (1 << (mysqlParser.MBRINTERSECTS - 756)) | (1 << (mysqlParser.MBROVERLAPS - 756)) | (1 << (mysqlParser.MBRTOUCHES - 756)) | (1 << (mysqlParser.MBRWITHIN - 756)) | (1 << (mysqlParser.MD5 - 756)) | (1 << (mysqlParser.MLINEFROMTEXT - 756)) | (1 << (mysqlParser.MLINEFROMWKB - 756)) | (1 << (mysqlParser.MONTHNAME - 756)) | (1 << (mysqlParser.MPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MPOINTFROMWKB - 756)) | (1 << (mysqlParser.MPOLYFROMTEXT - 756)) | (1 << (mysqlParser.MPOLYFROMWKB - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (mysqlParser.NAME_CONST - 756)) | (1 << (mysqlParser.NULLIF - 756)) | (1 << (mysqlParser.NUMGEOMETRIES - 756)) | (1 << (mysqlParser.NUMINTERIORRINGS - 756)) | (1 << (mysqlParser.NUMPOINTS - 756)) | (1 << (mysqlParser.OCT - 756)) | (1 << (mysqlParser.OCTET_LENGTH - 756)) | (1 << (mysqlParser.ORD - 756)) | (1 << (mysqlParser.OVERLAPS - 756)) | (1 << (mysqlParser.PERIOD_ADD - 756)) | (1 << (mysqlParser.PERIOD_DIFF - 756)) | (1 << (mysqlParser.PI - 756)) | (1 << (mysqlParser.POINTFROMTEXT - 756)) | (1 << (mysqlParser.POINTFROMWKB - 756)) | (1 << (mysqlParser.POINTN - 756)) | (1 << (mysqlParser.POLYFROMTEXT - 756)) | (1 << (mysqlParser.POLYFROMWKB - 756)) | (1 << (mysqlParser.POLYGONFROMTEXT - 756)) | (1 << (mysqlParser.POLYGONFROMWKB - 756)) | (1 << (mysqlParser.POW - 756)) | (1 << (mysqlParser.POWER - 756)) | (1 << (mysqlParser.QUOTE - 756)) | (1 << (mysqlParser.RADIANS - 756)) | (1 << (mysqlParser.RAND - 756)) | (1 << (mysqlParser.RANDOM_BYTES - 756)) | (1 << (mysqlParser.RELEASE_LOCK - 756)) | (1 << (mysqlParser.REVERSE - 756)) | (1 << (mysqlParser.ROUND - 756)) | (1 << (mysqlParser.ROW_COUNT - 756)) | (1 << (mysqlParser.RPAD - 756)) | (1 << (mysqlParser.RTRIM - 756)) | (1 << (mysqlParser.SEC_TO_TIME - 756)) | (1 << (mysqlParser.SESSION_USER - 756)) | (1 << (mysqlParser.SHA - 756)) | (1 << (mysqlParser.SHA1 - 756)) | (1 << (mysqlParser.SHA2 - 756)) | (1 << (mysqlParser.SIGN - 756)) | (1 << (mysqlParser.SIN - 756)) | (1 << (mysqlParser.SLEEP - 756)) | (1 << (mysqlParser.SOUNDEX - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (mysqlParser.SQRT - 820)) | (1 << (mysqlParser.SRID - 820)) | (1 << (mysqlParser.STARTPOINT - 820)) | (1 << (mysqlParser.STRCMP - 820)) | (1 << (mysqlParser.STR_TO_DATE - 820)) | (1 << (mysqlParser.ST_AREA - 820)) | (1 << (mysqlParser.ST_ASBINARY - 820)) | (1 << (mysqlParser.ST_ASTEXT - 820)) | (1 << (mysqlParser.ST_ASWKB - 820)) | (1 << (mysqlParser.ST_ASWKT - 820)) | (1 << (mysqlParser.ST_BUFFER - 820)) | (1 << (mysqlParser.ST_CENTROID - 820)) | (1 << (mysqlParser.ST_CONTAINS - 820)) | (1 << (mysqlParser.ST_CROSSES - 820)) | (1 << (mysqlParser.ST_DIFFERENCE - 820)) | (1 << (mysqlParser.ST_DIMENSION - 820)) | (1 << (mysqlParser.ST_DISJOINT - 820)) | (1 << (mysqlParser.ST_DISTANCE - 820)) | (1 << (mysqlParser.ST_ENDPOINT - 820)) | (1 << (mysqlParser.ST_ENVELOPE - 820)) | (1 << (mysqlParser.ST_EQUALS - 820)) | (1 << (mysqlParser.ST_EXTERIORRING - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYN - 820)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 820)) | (1 << (mysqlParser.ST_INTERIORRINGN - 820)) | (1 << (mysqlParser.ST_INTERSECTION - 820)) | (1 << (mysqlParser.ST_INTERSECTS - 820)) | (1 << (mysqlParser.ST_ISCLOSED - 820)) | (1 << (mysqlParser.ST_ISEMPTY - 820)) | (1 << (mysqlParser.ST_ISSIMPLE - 820)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINEFROMWKB - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (mysqlParser.ST_NUMPOINTS - 820)) | (1 << (mysqlParser.ST_OVERLAPS - 820)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 820)) | (1 << (mysqlParser.ST_POINTFROMWKB - 820)) | (1 << (mysqlParser.ST_POINTN - 820)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYFROMWKB - 820)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (mysqlParser.ST_SRID - 820)) | (1 << (mysqlParser.ST_STARTPOINT - 820)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (mysqlParser.ST_TOUCHES - 820)) | (1 << (mysqlParser.ST_UNION - 820)) | (1 << (mysqlParser.ST_WITHIN - 820)) | (1 << (mysqlParser.ST_X - 820)) | (1 << (mysqlParser.ST_Y - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (mysqlParser.SUBDATE - 884)) | (1 << (mysqlParser.SUBSTRING_INDEX - 884)) | (1 << (mysqlParser.SUBTIME - 884)) | (1 << (mysqlParser.SYSTEM_USER - 884)) | (1 << (mysqlParser.TAN - 884)) | (1 << (mysqlParser.TIMEDIFF - 884)) | (1 << (mysqlParser.TIMESTAMPADD - 884)) | (1 << (mysqlParser.TIMESTAMPDIFF - 884)) | (1 << (mysqlParser.TIME_FORMAT - 884)) | (1 << (mysqlParser.TIME_TO_SEC - 884)) | (1 << (mysqlParser.TOUCHES - 884)) | (1 << (mysqlParser.TO_BASE64 - 884)) | (1 << (mysqlParser.TO_DAYS - 884)) | (1 << (mysqlParser.TO_SECONDS - 884)) | (1 << (mysqlParser.UCASE - 884)) | (1 << (mysqlParser.UNCOMPRESS - 884)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (mysqlParser.UNHEX - 884)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 884)) | (1 << (mysqlParser.UPDATEXML - 884)) | (1 << (mysqlParser.UPPER - 884)) | (1 << (mysqlParser.UUID - 884)) | (1 << (mysqlParser.UUID_SHORT - 884)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (mysqlParser.VERSION - 884)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (mysqlParser.WEEKDAY - 884)) | (1 << (mysqlParser.WEEKOFYEAR - 884)) | (1 << (mysqlParser.WEIGHT_STRING - 884)) | (1 << (mysqlParser.WITHIN - 884)) | (1 << (mysqlParser.YEARWEEK - 884)) | (1 << (mysqlParser.Y_FUNCTION - 884)) | (1 << (mysqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 954)) & ~0x3f) == 0 and ((1 << (_la - 954)) & ((1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 954)) | (1 << (mysqlParser.ID - 954)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 954)))) != 0):
                    self.state = 2158
                    localctx.indexName = self.uid()


                self.state = 2162
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.USING:
                    self.state = 2161
                    self.indexType()


                self.state = 2164
                self.indexColumnNames()
                self.state = 2168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.USING or _la==mysqlParser.WITH or _la==mysqlParser.COMMENT or _la==mysqlParser.KEY_BLOCK_SIZE:
                    self.state = 2165
                    self.indexOption()
                    self.state = 2170
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 7:
                localctx = mysqlParser.AlterByAddSpecialIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2171
                self.match(mysqlParser.ADD)
                self.state = 2172
                localctx.specKeyType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.FULLTEXT or _la==mysqlParser.SPATIAL):
                    localctx.specKeyType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2174
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.INDEX or _la==mysqlParser.KEY:
                    self.state = 2173
                    localctx.keyType = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==mysqlParser.INDEX or _la==mysqlParser.KEY):
                        localctx.keyType = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2177
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.LEFT or _la==mysqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (mysqlParser.DATE - 180)) | (1 << (mysqlParser.TIME - 180)) | (1 << (mysqlParser.TIMESTAMP - 180)) | (1 << (mysqlParser.DATETIME - 180)) | (1 << (mysqlParser.YEAR - 180)) | (1 << (mysqlParser.TEXT - 180)) | (1 << (mysqlParser.ENUM - 180)) | (1 << (mysqlParser.COUNT - 180)) | (1 << (mysqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (mysqlParser.ACCOUNT - 244)) | (1 << (mysqlParser.ACTION - 244)) | (1 << (mysqlParser.AFTER - 244)) | (1 << (mysqlParser.AGGREGATE - 244)) | (1 << (mysqlParser.ALGORITHM - 244)) | (1 << (mysqlParser.ANY - 244)) | (1 << (mysqlParser.AT - 244)) | (1 << (mysqlParser.AUTHORS - 244)) | (1 << (mysqlParser.AUTOCOMMIT - 244)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (mysqlParser.AUTO_INCREMENT - 244)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 244)) | (1 << (mysqlParser.BEGIN - 244)) | (1 << (mysqlParser.BINLOG - 244)) | (1 << (mysqlParser.BIT - 244)) | (1 << (mysqlParser.BLOCK - 244)) | (1 << (mysqlParser.BTREE - 244)) | (1 << (mysqlParser.CASCADED - 244)) | (1 << (mysqlParser.CHAIN - 244)) | (1 << (mysqlParser.CHANNEL - 244)) | (1 << (mysqlParser.CHECKSUM - 244)) | (1 << (mysqlParser.CIPHER - 244)) | (1 << (mysqlParser.CLIENT - 244)) | (1 << (mysqlParser.COALESCE - 244)) | (1 << (mysqlParser.CODE - 244)) | (1 << (mysqlParser.COLUMNS - 244)) | (1 << (mysqlParser.COLUMN_FORMAT - 244)) | (1 << (mysqlParser.COMMENT - 244)) | (1 << (mysqlParser.COMMIT - 244)) | (1 << (mysqlParser.COMPACT - 244)) | (1 << (mysqlParser.COMPLETION - 244)) | (1 << (mysqlParser.COMPRESSED - 244)) | (1 << (mysqlParser.COMPRESSION - 244)) | (1 << (mysqlParser.CONCURRENT - 244)) | (1 << (mysqlParser.CONNECTION - 244)) | (1 << (mysqlParser.CONSISTENT - 244)) | (1 << (mysqlParser.CONTAINS - 244)) | (1 << (mysqlParser.CONTEXT - 244)) | (1 << (mysqlParser.CONTRIBUTORS - 244)) | (1 << (mysqlParser.COPY - 244)) | (1 << (mysqlParser.CPU - 244)) | (1 << (mysqlParser.DATA - 244)) | (1 << (mysqlParser.DATAFILE - 244)) | (1 << (mysqlParser.DEALLOCATE - 244)) | (1 << (mysqlParser.DEFAULT_AUTH - 244)) | (1 << (mysqlParser.DEFINER - 244)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 244)) | (1 << (mysqlParser.DIRECTORY - 244)) | (1 << (mysqlParser.DISABLE - 244)) | (1 << (mysqlParser.DISCARD - 244)) | (1 << (mysqlParser.DISK - 244)) | (1 << (mysqlParser.DO - 244)) | (1 << (mysqlParser.DUMPFILE - 244)) | (1 << (mysqlParser.DUPLICATE - 244)) | (1 << (mysqlParser.DYNAMIC - 244)) | (1 << (mysqlParser.ENABLE - 244)) | (1 << (mysqlParser.ENCRYPTION - 244)) | (1 << (mysqlParser.ENDS - 244)) | (1 << (mysqlParser.ENGINE - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (mysqlParser.ENGINES - 308)) | (1 << (mysqlParser.ERROR - 308)) | (1 << (mysqlParser.ERRORS - 308)) | (1 << (mysqlParser.ESCAPE - 308)) | (1 << (mysqlParser.EVEN - 308)) | (1 << (mysqlParser.EVENT - 308)) | (1 << (mysqlParser.EVENTS - 308)) | (1 << (mysqlParser.EVERY - 308)) | (1 << (mysqlParser.EXCHANGE - 308)) | (1 << (mysqlParser.EXCLUSIVE - 308)) | (1 << (mysqlParser.EXPIRE - 308)) | (1 << (mysqlParser.EXTENT_SIZE - 308)) | (1 << (mysqlParser.FAULTS - 308)) | (1 << (mysqlParser.FIELDS - 308)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (mysqlParser.FILTER - 308)) | (1 << (mysqlParser.FIRST - 308)) | (1 << (mysqlParser.FIXED - 308)) | (1 << (mysqlParser.FOLLOWS - 308)) | (1 << (mysqlParser.FULL - 308)) | (1 << (mysqlParser.FUNCTION - 308)) | (1 << (mysqlParser.GLOBAL - 308)) | (1 << (mysqlParser.GRANTS - 308)) | (1 << (mysqlParser.GROUP_REPLICATION - 308)) | (1 << (mysqlParser.HASH - 308)) | (1 << (mysqlParser.HOST - 308)) | (1 << (mysqlParser.IDENTIFIED - 308)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (mysqlParser.IMPORT - 308)) | (1 << (mysqlParser.INDEXES - 308)) | (1 << (mysqlParser.INITIAL_SIZE - 308)) | (1 << (mysqlParser.INPLACE - 308)) | (1 << (mysqlParser.INSERT_METHOD - 308)) | (1 << (mysqlParser.INSTANCE - 308)) | (1 << (mysqlParser.INVOKER - 308)) | (1 << (mysqlParser.IO - 308)) | (1 << (mysqlParser.IO_THREAD - 308)) | (1 << (mysqlParser.IPC - 308)) | (1 << (mysqlParser.ISOLATION - 308)) | (1 << (mysqlParser.ISSUER - 308)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (mysqlParser.LANGUAGE - 308)) | (1 << (mysqlParser.LAST - 308)) | (1 << (mysqlParser.LEAVES - 308)) | (1 << (mysqlParser.LESS - 308)) | (1 << (mysqlParser.LEVEL - 308)) | (1 << (mysqlParser.LIST - 308)) | (1 << (mysqlParser.LOCAL - 308)) | (1 << (mysqlParser.LOGFILE - 308)) | (1 << (mysqlParser.LOGS - 308)) | (1 << (mysqlParser.MASTER - 308)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 308)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (mysqlParser.MASTER_DELAY - 372)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (mysqlParser.MASTER_HOST - 372)) | (1 << (mysqlParser.MASTER_LOG_FILE - 372)) | (1 << (mysqlParser.MASTER_LOG_POS - 372)) | (1 << (mysqlParser.MASTER_PASSWORD - 372)) | (1 << (mysqlParser.MASTER_PORT - 372)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (mysqlParser.MASTER_SSL - 372)) | (1 << (mysqlParser.MASTER_SSL_CA - 372)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_CERT - 372)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (mysqlParser.MASTER_SSL_CRL - 372)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_KEY - 372)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 372)) | (1 << (mysqlParser.MASTER_USER - 372)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_ROWS - 372)) | (1 << (mysqlParser.MAX_SIZE - 372)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (mysqlParser.MERGE - 372)) | (1 << (mysqlParser.MID - 372)) | (1 << (mysqlParser.MIGRATE - 372)) | (1 << (mysqlParser.MIN_ROWS - 372)) | (1 << (mysqlParser.MODIFY - 372)) | (1 << (mysqlParser.MUTEX - 372)) | (1 << (mysqlParser.MYSQL - 372)) | (1 << (mysqlParser.NAME - 372)) | (1 << (mysqlParser.NAMES - 372)) | (1 << (mysqlParser.NCHAR - 372)) | (1 << (mysqlParser.NEVER - 372)) | (1 << (mysqlParser.NO - 372)) | (1 << (mysqlParser.NODEGROUP - 372)) | (1 << (mysqlParser.NONE - 372)) | (1 << (mysqlParser.OFFLINE - 372)) | (1 << (mysqlParser.OFFSET - 372)) | (1 << (mysqlParser.OJ - 372)) | (1 << (mysqlParser.OLD_PASSWORD - 372)) | (1 << (mysqlParser.ONE - 372)) | (1 << (mysqlParser.ONLINE - 372)) | (1 << (mysqlParser.ONLY - 372)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 372)) | (1 << (mysqlParser.OPTIONS - 372)) | (1 << (mysqlParser.OWNER - 372)) | (1 << (mysqlParser.PACK_KEYS - 372)) | (1 << (mysqlParser.PAGE - 372)) | (1 << (mysqlParser.PARSER - 372)) | (1 << (mysqlParser.PARTIAL - 372)) | (1 << (mysqlParser.PARTITIONING - 372)) | (1 << (mysqlParser.PARTITIONS - 372)) | (1 << (mysqlParser.PASSWORD - 372)) | (1 << (mysqlParser.PHASE - 372)) | (1 << (mysqlParser.PLUGIN_DIR - 372)) | (1 << (mysqlParser.PLUGINS - 372)) | (1 << (mysqlParser.PORT - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (mysqlParser.PRECEDES - 436)) | (1 << (mysqlParser.PREPARE - 436)) | (1 << (mysqlParser.PRESERVE - 436)) | (1 << (mysqlParser.PREV - 436)) | (1 << (mysqlParser.PROCESSLIST - 436)) | (1 << (mysqlParser.PROFILE - 436)) | (1 << (mysqlParser.PROFILES - 436)) | (1 << (mysqlParser.PROXY - 436)) | (1 << (mysqlParser.QUERY - 436)) | (1 << (mysqlParser.QUICK - 436)) | (1 << (mysqlParser.REBUILD - 436)) | (1 << (mysqlParser.RECOVER - 436)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (mysqlParser.REDUNDANT - 436)) | (1 << (mysqlParser.RELAY_LOG_FILE - 436)) | (1 << (mysqlParser.RELAY_LOG_POS - 436)) | (1 << (mysqlParser.RELAYLOG - 436)) | (1 << (mysqlParser.REMOVE - 436)) | (1 << (mysqlParser.REORGANIZE - 436)) | (1 << (mysqlParser.REPAIR - 436)) | (1 << (mysqlParser.REPLICATE_DO_DB - 436)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATION - 436)) | (1 << (mysqlParser.RESUME - 436)) | (1 << (mysqlParser.RETURNS - 436)) | (1 << (mysqlParser.ROLLBACK - 436)) | (1 << (mysqlParser.ROLLUP - 436)) | (1 << (mysqlParser.ROTATE - 436)) | (1 << (mysqlParser.ROW - 436)) | (1 << (mysqlParser.ROWS - 436)) | (1 << (mysqlParser.ROW_FORMAT - 436)) | (1 << (mysqlParser.SAVEPOINT - 436)) | (1 << (mysqlParser.SCHEDULE - 436)) | (1 << (mysqlParser.SECURITY - 436)) | (1 << (mysqlParser.SERVER - 436)) | (1 << (mysqlParser.SESSION - 436)) | (1 << (mysqlParser.SHARE - 436)) | (1 << (mysqlParser.SHARED - 436)) | (1 << (mysqlParser.SIGNED - 436)) | (1 << (mysqlParser.SIMPLE - 436)) | (1 << (mysqlParser.SLAVE - 436)) | (1 << (mysqlParser.SNAPSHOT - 436)) | (1 << (mysqlParser.SOCKET - 436)) | (1 << (mysqlParser.SOME - 436)) | (1 << (mysqlParser.SOUNDS - 436)) | (1 << (mysqlParser.SOURCE - 436)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (mysqlParser.SQL_CACHE - 436)) | (1 << (mysqlParser.SQL_NO_CACHE - 436)) | (1 << (mysqlParser.SQL_THREAD - 436)) | (1 << (mysqlParser.START - 436)) | (1 << (mysqlParser.STARTS - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (mysqlParser.STATS_AUTO_RECALC - 500)) | (1 << (mysqlParser.STATS_PERSISTENT - 500)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (mysqlParser.STATUS - 500)) | (1 << (mysqlParser.STOP - 500)) | (1 << (mysqlParser.STORAGE - 500)) | (1 << (mysqlParser.STRING - 500)) | (1 << (mysqlParser.SUBJECT - 500)) | (1 << (mysqlParser.SUBPARTITION - 500)) | (1 << (mysqlParser.SUBPARTITIONS - 500)) | (1 << (mysqlParser.SUSPEND - 500)) | (1 << (mysqlParser.SWAPS - 500)) | (1 << (mysqlParser.SWITCHES - 500)) | (1 << (mysqlParser.TABLESPACE - 500)) | (1 << (mysqlParser.TEMPORARY - 500)) | (1 << (mysqlParser.TEMPTABLE - 500)) | (1 << (mysqlParser.THAN - 500)) | (1 << (mysqlParser.TRANSACTION - 500)) | (1 << (mysqlParser.TRUNCATE - 500)) | (1 << (mysqlParser.UNDEFINED - 500)) | (1 << (mysqlParser.UNDOFILE - 500)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (mysqlParser.UNKNOWN - 500)) | (1 << (mysqlParser.UPGRADE - 500)) | (1 << (mysqlParser.USER - 500)) | (1 << (mysqlParser.VALIDATION - 500)) | (1 << (mysqlParser.VALUE - 500)) | (1 << (mysqlParser.VARIABLES - 500)) | (1 << (mysqlParser.VIEW - 500)) | (1 << (mysqlParser.WAIT - 500)) | (1 << (mysqlParser.WARNINGS - 500)) | (1 << (mysqlParser.WITHOUT - 500)) | (1 << (mysqlParser.WORK - 500)) | (1 << (mysqlParser.WRAPPER - 500)) | (1 << (mysqlParser.X509 - 500)) | (1 << (mysqlParser.XA - 500)) | (1 << (mysqlParser.XML - 500)) | (1 << (mysqlParser.QUARTER - 500)) | (1 << (mysqlParser.MONTH - 500)) | (1 << (mysqlParser.DAY - 500)) | (1 << (mysqlParser.HOUR - 500)) | (1 << (mysqlParser.MINUTE - 500)) | (1 << (mysqlParser.WEEK - 500)) | (1 << (mysqlParser.SECOND - 500)) | (1 << (mysqlParser.MICROSECOND - 500)) | (1 << (mysqlParser.TABLES - 500)) | (1 << (mysqlParser.ROUTINE - 500)) | (1 << (mysqlParser.EXECUTE - 500)) | (1 << (mysqlParser.FILE - 500)) | (1 << (mysqlParser.PROCESS - 500)) | (1 << (mysqlParser.RELOAD - 500)) | (1 << (mysqlParser.SHUTDOWN - 500)) | (1 << (mysqlParser.SUPER - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (mysqlParser.PRIVILEGES - 564)) | (1 << (mysqlParser.ARMSCII8 - 564)) | (1 << (mysqlParser.ASCII - 564)) | (1 << (mysqlParser.BIG5 - 564)) | (1 << (mysqlParser.CP1250 - 564)) | (1 << (mysqlParser.CP1251 - 564)) | (1 << (mysqlParser.CP1256 - 564)) | (1 << (mysqlParser.CP1257 - 564)) | (1 << (mysqlParser.CP850 - 564)) | (1 << (mysqlParser.CP852 - 564)) | (1 << (mysqlParser.CP866 - 564)) | (1 << (mysqlParser.CP932 - 564)) | (1 << (mysqlParser.DEC8 - 564)) | (1 << (mysqlParser.EUCJPMS - 564)) | (1 << (mysqlParser.EUCKR - 564)) | (1 << (mysqlParser.GB2312 - 564)) | (1 << (mysqlParser.GBK - 564)) | (1 << (mysqlParser.GEOSTD8 - 564)) | (1 << (mysqlParser.GREEK - 564)) | (1 << (mysqlParser.HEBREW - 564)) | (1 << (mysqlParser.HP8 - 564)) | (1 << (mysqlParser.KEYBCS2 - 564)) | (1 << (mysqlParser.KOI8R - 564)) | (1 << (mysqlParser.KOI8U - 564)) | (1 << (mysqlParser.LATIN1 - 564)) | (1 << (mysqlParser.LATIN2 - 564)) | (1 << (mysqlParser.LATIN5 - 564)) | (1 << (mysqlParser.LATIN7 - 564)) | (1 << (mysqlParser.MACCE - 564)) | (1 << (mysqlParser.MACROMAN - 564)) | (1 << (mysqlParser.SJIS - 564)) | (1 << (mysqlParser.SWE7 - 564)) | (1 << (mysqlParser.TIS620 - 564)) | (1 << (mysqlParser.UCS2 - 564)) | (1 << (mysqlParser.UJIS - 564)) | (1 << (mysqlParser.UTF16 - 564)) | (1 << (mysqlParser.UTF16LE - 564)) | (1 << (mysqlParser.UTF32 - 564)) | (1 << (mysqlParser.UTF8 - 564)) | (1 << (mysqlParser.UTF8MB3 - 564)) | (1 << (mysqlParser.UTF8MB4 - 564)) | (1 << (mysqlParser.ARCHIVE - 564)) | (1 << (mysqlParser.BLACKHOLE - 564)) | (1 << (mysqlParser.CSV - 564)) | (1 << (mysqlParser.FEDERATED - 564)) | (1 << (mysqlParser.INNODB - 564)) | (1 << (mysqlParser.MEMORY - 564)) | (1 << (mysqlParser.MRG_MYISAM - 564)) | (1 << (mysqlParser.MYISAM - 564)) | (1 << (mysqlParser.NDB - 564)) | (1 << (mysqlParser.NDBCLUSTER - 564)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (mysqlParser.REPEATABLE - 564)) | (1 << (mysqlParser.COMMITTED - 564)) | (1 << (mysqlParser.UNCOMMITTED - 564)) | (1 << (mysqlParser.SERIALIZABLE - 564)) | (1 << (mysqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (mysqlParser.LINESTRING - 564)) | (1 << (mysqlParser.MULTILINESTRING - 564)) | (1 << (mysqlParser.MULTIPOINT - 564)) | (1 << (mysqlParser.MULTIPOLYGON - 564)) | (1 << (mysqlParser.POINT - 564)) | (1 << (mysqlParser.POLYGON - 564)) | (1 << (mysqlParser.ABS - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (mysqlParser.ACOS - 628)) | (1 << (mysqlParser.ADDDATE - 628)) | (1 << (mysqlParser.ADDTIME - 628)) | (1 << (mysqlParser.AES_DECRYPT - 628)) | (1 << (mysqlParser.AES_ENCRYPT - 628)) | (1 << (mysqlParser.AREA - 628)) | (1 << (mysqlParser.ASBINARY - 628)) | (1 << (mysqlParser.ASIN - 628)) | (1 << (mysqlParser.ASTEXT - 628)) | (1 << (mysqlParser.ASWKB - 628)) | (1 << (mysqlParser.ASWKT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (mysqlParser.ATAN - 628)) | (1 << (mysqlParser.ATAN2 - 628)) | (1 << (mysqlParser.BENCHMARK - 628)) | (1 << (mysqlParser.BIN - 628)) | (1 << (mysqlParser.BIT_COUNT - 628)) | (1 << (mysqlParser.BIT_LENGTH - 628)) | (1 << (mysqlParser.BUFFER - 628)) | (1 << (mysqlParser.CEIL - 628)) | (1 << (mysqlParser.CEILING - 628)) | (1 << (mysqlParser.CENTROID - 628)) | (1 << (mysqlParser.CHARACTER_LENGTH - 628)) | (1 << (mysqlParser.CHARSET - 628)) | (1 << (mysqlParser.CHAR_LENGTH - 628)) | (1 << (mysqlParser.COERCIBILITY - 628)) | (1 << (mysqlParser.COLLATION - 628)) | (1 << (mysqlParser.COMPRESS - 628)) | (1 << (mysqlParser.CONCAT - 628)) | (1 << (mysqlParser.CONCAT_WS - 628)) | (1 << (mysqlParser.CONNECTION_ID - 628)) | (1 << (mysqlParser.CONV - 628)) | (1 << (mysqlParser.CONVERT_TZ - 628)) | (1 << (mysqlParser.COS - 628)) | (1 << (mysqlParser.COT - 628)) | (1 << (mysqlParser.CRC32 - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (mysqlParser.CREATE_DIGEST - 628)) | (1 << (mysqlParser.CROSSES - 628)) | (1 << (mysqlParser.DATEDIFF - 628)) | (1 << (mysqlParser.DATE_FORMAT - 628)) | (1 << (mysqlParser.DAYNAME - 628)) | (1 << (mysqlParser.DAYOFMONTH - 628)) | (1 << (mysqlParser.DAYOFWEEK - 628)) | (1 << (mysqlParser.DAYOFYEAR - 628)) | (1 << (mysqlParser.DECODE - 628)) | (1 << (mysqlParser.DEGREES - 628)) | (1 << (mysqlParser.DES_DECRYPT - 628)) | (1 << (mysqlParser.DES_ENCRYPT - 628)) | (1 << (mysqlParser.DIMENSION - 628)) | (1 << (mysqlParser.DISJOINT - 628)) | (1 << (mysqlParser.ELT - 628)) | (1 << (mysqlParser.ENCODE - 628)) | (1 << (mysqlParser.ENCRYPT - 628)) | (1 << (mysqlParser.ENDPOINT - 628)) | (1 << (mysqlParser.ENVELOPE - 628)) | (1 << (mysqlParser.EQUALS - 628)) | (1 << (mysqlParser.EXP - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (mysqlParser.EXPORT_SET - 692)) | (1 << (mysqlParser.EXTERIORRING - 692)) | (1 << (mysqlParser.EXTRACTVALUE - 692)) | (1 << (mysqlParser.FIELD - 692)) | (1 << (mysqlParser.FIND_IN_SET - 692)) | (1 << (mysqlParser.FLOOR - 692)) | (1 << (mysqlParser.FORMAT - 692)) | (1 << (mysqlParser.FOUND_ROWS - 692)) | (1 << (mysqlParser.FROM_BASE64 - 692)) | (1 << (mysqlParser.FROM_DAYS - 692)) | (1 << (mysqlParser.FROM_UNIXTIME - 692)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYN - 692)) | (1 << (mysqlParser.GEOMETRYTYPE - 692)) | (1 << (mysqlParser.GEOMFROMTEXT - 692)) | (1 << (mysqlParser.GEOMFROMWKB - 692)) | (1 << (mysqlParser.GET_FORMAT - 692)) | (1 << (mysqlParser.GET_LOCK - 692)) | (1 << (mysqlParser.GLENGTH - 692)) | (1 << (mysqlParser.GREATEST - 692)) | (1 << (mysqlParser.GTID_SUBSET - 692)) | (1 << (mysqlParser.GTID_SUBTRACT - 692)) | (1 << (mysqlParser.HEX - 692)) | (1 << (mysqlParser.IFNULL - 692)) | (1 << (mysqlParser.INET6_ATON - 692)) | (1 << (mysqlParser.INET6_NTOA - 692)) | (1 << (mysqlParser.INET_ATON - 692)) | (1 << (mysqlParser.INET_NTOA - 692)) | (1 << (mysqlParser.INSTR - 692)) | (1 << (mysqlParser.INTERIORRINGN - 692)) | (1 << (mysqlParser.INTERSECTS - 692)) | (1 << (mysqlParser.ISCLOSED - 692)) | (1 << (mysqlParser.ISEMPTY - 692)) | (1 << (mysqlParser.ISNULL - 692)) | (1 << (mysqlParser.ISSIMPLE - 692)) | (1 << (mysqlParser.IS_FREE_LOCK - 692)) | (1 << (mysqlParser.IS_IPV4 - 692)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 692)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 692)) | (1 << (mysqlParser.IS_IPV6 - 692)) | (1 << (mysqlParser.IS_USED_LOCK - 692)) | (1 << (mysqlParser.LAST_INSERT_ID - 692)) | (1 << (mysqlParser.LCASE - 692)) | (1 << (mysqlParser.LEAST - 692)) | (1 << (mysqlParser.LENGTH - 692)) | (1 << (mysqlParser.LINEFROMTEXT - 692)) | (1 << (mysqlParser.LINEFROMWKB - 692)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 692)) | (1 << (mysqlParser.LN - 692)) | (1 << (mysqlParser.LOAD_FILE - 692)) | (1 << (mysqlParser.LOCATE - 692)) | (1 << (mysqlParser.LOG - 692)) | (1 << (mysqlParser.LOG10 - 692)) | (1 << (mysqlParser.LOG2 - 692)) | (1 << (mysqlParser.LOWER - 692)) | (1 << (mysqlParser.LPAD - 692)) | (1 << (mysqlParser.LTRIM - 692)) | (1 << (mysqlParser.MAKEDATE - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (mysqlParser.MAKETIME - 756)) | (1 << (mysqlParser.MAKE_SET - 756)) | (1 << (mysqlParser.MASTER_POS_WAIT - 756)) | (1 << (mysqlParser.MBRCONTAINS - 756)) | (1 << (mysqlParser.MBRDISJOINT - 756)) | (1 << (mysqlParser.MBREQUAL - 756)) | (1 << (mysqlParser.MBRINTERSECTS - 756)) | (1 << (mysqlParser.MBROVERLAPS - 756)) | (1 << (mysqlParser.MBRTOUCHES - 756)) | (1 << (mysqlParser.MBRWITHIN - 756)) | (1 << (mysqlParser.MD5 - 756)) | (1 << (mysqlParser.MLINEFROMTEXT - 756)) | (1 << (mysqlParser.MLINEFROMWKB - 756)) | (1 << (mysqlParser.MONTHNAME - 756)) | (1 << (mysqlParser.MPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MPOINTFROMWKB - 756)) | (1 << (mysqlParser.MPOLYFROMTEXT - 756)) | (1 << (mysqlParser.MPOLYFROMWKB - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (mysqlParser.NAME_CONST - 756)) | (1 << (mysqlParser.NULLIF - 756)) | (1 << (mysqlParser.NUMGEOMETRIES - 756)) | (1 << (mysqlParser.NUMINTERIORRINGS - 756)) | (1 << (mysqlParser.NUMPOINTS - 756)) | (1 << (mysqlParser.OCT - 756)) | (1 << (mysqlParser.OCTET_LENGTH - 756)) | (1 << (mysqlParser.ORD - 756)) | (1 << (mysqlParser.OVERLAPS - 756)) | (1 << (mysqlParser.PERIOD_ADD - 756)) | (1 << (mysqlParser.PERIOD_DIFF - 756)) | (1 << (mysqlParser.PI - 756)) | (1 << (mysqlParser.POINTFROMTEXT - 756)) | (1 << (mysqlParser.POINTFROMWKB - 756)) | (1 << (mysqlParser.POINTN - 756)) | (1 << (mysqlParser.POLYFROMTEXT - 756)) | (1 << (mysqlParser.POLYFROMWKB - 756)) | (1 << (mysqlParser.POLYGONFROMTEXT - 756)) | (1 << (mysqlParser.POLYGONFROMWKB - 756)) | (1 << (mysqlParser.POW - 756)) | (1 << (mysqlParser.POWER - 756)) | (1 << (mysqlParser.QUOTE - 756)) | (1 << (mysqlParser.RADIANS - 756)) | (1 << (mysqlParser.RAND - 756)) | (1 << (mysqlParser.RANDOM_BYTES - 756)) | (1 << (mysqlParser.RELEASE_LOCK - 756)) | (1 << (mysqlParser.REVERSE - 756)) | (1 << (mysqlParser.ROUND - 756)) | (1 << (mysqlParser.ROW_COUNT - 756)) | (1 << (mysqlParser.RPAD - 756)) | (1 << (mysqlParser.RTRIM - 756)) | (1 << (mysqlParser.SEC_TO_TIME - 756)) | (1 << (mysqlParser.SESSION_USER - 756)) | (1 << (mysqlParser.SHA - 756)) | (1 << (mysqlParser.SHA1 - 756)) | (1 << (mysqlParser.SHA2 - 756)) | (1 << (mysqlParser.SIGN - 756)) | (1 << (mysqlParser.SIN - 756)) | (1 << (mysqlParser.SLEEP - 756)) | (1 << (mysqlParser.SOUNDEX - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (mysqlParser.SQRT - 820)) | (1 << (mysqlParser.SRID - 820)) | (1 << (mysqlParser.STARTPOINT - 820)) | (1 << (mysqlParser.STRCMP - 820)) | (1 << (mysqlParser.STR_TO_DATE - 820)) | (1 << (mysqlParser.ST_AREA - 820)) | (1 << (mysqlParser.ST_ASBINARY - 820)) | (1 << (mysqlParser.ST_ASTEXT - 820)) | (1 << (mysqlParser.ST_ASWKB - 820)) | (1 << (mysqlParser.ST_ASWKT - 820)) | (1 << (mysqlParser.ST_BUFFER - 820)) | (1 << (mysqlParser.ST_CENTROID - 820)) | (1 << (mysqlParser.ST_CONTAINS - 820)) | (1 << (mysqlParser.ST_CROSSES - 820)) | (1 << (mysqlParser.ST_DIFFERENCE - 820)) | (1 << (mysqlParser.ST_DIMENSION - 820)) | (1 << (mysqlParser.ST_DISJOINT - 820)) | (1 << (mysqlParser.ST_DISTANCE - 820)) | (1 << (mysqlParser.ST_ENDPOINT - 820)) | (1 << (mysqlParser.ST_ENVELOPE - 820)) | (1 << (mysqlParser.ST_EQUALS - 820)) | (1 << (mysqlParser.ST_EXTERIORRING - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYN - 820)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 820)) | (1 << (mysqlParser.ST_INTERIORRINGN - 820)) | (1 << (mysqlParser.ST_INTERSECTION - 820)) | (1 << (mysqlParser.ST_INTERSECTS - 820)) | (1 << (mysqlParser.ST_ISCLOSED - 820)) | (1 << (mysqlParser.ST_ISEMPTY - 820)) | (1 << (mysqlParser.ST_ISSIMPLE - 820)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINEFROMWKB - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (mysqlParser.ST_NUMPOINTS - 820)) | (1 << (mysqlParser.ST_OVERLAPS - 820)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 820)) | (1 << (mysqlParser.ST_POINTFROMWKB - 820)) | (1 << (mysqlParser.ST_POINTN - 820)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYFROMWKB - 820)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (mysqlParser.ST_SRID - 820)) | (1 << (mysqlParser.ST_STARTPOINT - 820)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (mysqlParser.ST_TOUCHES - 820)) | (1 << (mysqlParser.ST_UNION - 820)) | (1 << (mysqlParser.ST_WITHIN - 820)) | (1 << (mysqlParser.ST_X - 820)) | (1 << (mysqlParser.ST_Y - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (mysqlParser.SUBDATE - 884)) | (1 << (mysqlParser.SUBSTRING_INDEX - 884)) | (1 << (mysqlParser.SUBTIME - 884)) | (1 << (mysqlParser.SYSTEM_USER - 884)) | (1 << (mysqlParser.TAN - 884)) | (1 << (mysqlParser.TIMEDIFF - 884)) | (1 << (mysqlParser.TIMESTAMPADD - 884)) | (1 << (mysqlParser.TIMESTAMPDIFF - 884)) | (1 << (mysqlParser.TIME_FORMAT - 884)) | (1 << (mysqlParser.TIME_TO_SEC - 884)) | (1 << (mysqlParser.TOUCHES - 884)) | (1 << (mysqlParser.TO_BASE64 - 884)) | (1 << (mysqlParser.TO_DAYS - 884)) | (1 << (mysqlParser.TO_SECONDS - 884)) | (1 << (mysqlParser.UCASE - 884)) | (1 << (mysqlParser.UNCOMPRESS - 884)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (mysqlParser.UNHEX - 884)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 884)) | (1 << (mysqlParser.UPDATEXML - 884)) | (1 << (mysqlParser.UPPER - 884)) | (1 << (mysqlParser.UUID - 884)) | (1 << (mysqlParser.UUID_SHORT - 884)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (mysqlParser.VERSION - 884)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (mysqlParser.WEEKDAY - 884)) | (1 << (mysqlParser.WEEKOFYEAR - 884)) | (1 << (mysqlParser.WEIGHT_STRING - 884)) | (1 << (mysqlParser.WITHIN - 884)) | (1 << (mysqlParser.YEARWEEK - 884)) | (1 << (mysqlParser.Y_FUNCTION - 884)) | (1 << (mysqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 954)) & ~0x3f) == 0 and ((1 << (_la - 954)) & ((1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 954)) | (1 << (mysqlParser.ID - 954)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 954)))) != 0):
                    self.state = 2176
                    self.uid()


                self.state = 2179
                self.indexColumnNames()
                self.state = 2183
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.USING or _la==mysqlParser.WITH or _la==mysqlParser.COMMENT or _la==mysqlParser.KEY_BLOCK_SIZE:
                    self.state = 2180
                    self.indexOption()
                    self.state = 2185
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 8:
                localctx = mysqlParser.AlterByAddForeignKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 2186
                self.match(mysqlParser.ADD)
                self.state = 2191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.CONSTRAINT:
                    self.state = 2187
                    self.match(mysqlParser.CONSTRAINT)
                    self.state = 2189
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==mysqlParser.LEFT or _la==mysqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (mysqlParser.DATE - 180)) | (1 << (mysqlParser.TIME - 180)) | (1 << (mysqlParser.TIMESTAMP - 180)) | (1 << (mysqlParser.DATETIME - 180)) | (1 << (mysqlParser.YEAR - 180)) | (1 << (mysqlParser.TEXT - 180)) | (1 << (mysqlParser.ENUM - 180)) | (1 << (mysqlParser.COUNT - 180)) | (1 << (mysqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (mysqlParser.ACCOUNT - 244)) | (1 << (mysqlParser.ACTION - 244)) | (1 << (mysqlParser.AFTER - 244)) | (1 << (mysqlParser.AGGREGATE - 244)) | (1 << (mysqlParser.ALGORITHM - 244)) | (1 << (mysqlParser.ANY - 244)) | (1 << (mysqlParser.AT - 244)) | (1 << (mysqlParser.AUTHORS - 244)) | (1 << (mysqlParser.AUTOCOMMIT - 244)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (mysqlParser.AUTO_INCREMENT - 244)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 244)) | (1 << (mysqlParser.BEGIN - 244)) | (1 << (mysqlParser.BINLOG - 244)) | (1 << (mysqlParser.BIT - 244)) | (1 << (mysqlParser.BLOCK - 244)) | (1 << (mysqlParser.BTREE - 244)) | (1 << (mysqlParser.CASCADED - 244)) | (1 << (mysqlParser.CHAIN - 244)) | (1 << (mysqlParser.CHANNEL - 244)) | (1 << (mysqlParser.CHECKSUM - 244)) | (1 << (mysqlParser.CIPHER - 244)) | (1 << (mysqlParser.CLIENT - 244)) | (1 << (mysqlParser.COALESCE - 244)) | (1 << (mysqlParser.CODE - 244)) | (1 << (mysqlParser.COLUMNS - 244)) | (1 << (mysqlParser.COLUMN_FORMAT - 244)) | (1 << (mysqlParser.COMMENT - 244)) | (1 << (mysqlParser.COMMIT - 244)) | (1 << (mysqlParser.COMPACT - 244)) | (1 << (mysqlParser.COMPLETION - 244)) | (1 << (mysqlParser.COMPRESSED - 244)) | (1 << (mysqlParser.COMPRESSION - 244)) | (1 << (mysqlParser.CONCURRENT - 244)) | (1 << (mysqlParser.CONNECTION - 244)) | (1 << (mysqlParser.CONSISTENT - 244)) | (1 << (mysqlParser.CONTAINS - 244)) | (1 << (mysqlParser.CONTEXT - 244)) | (1 << (mysqlParser.CONTRIBUTORS - 244)) | (1 << (mysqlParser.COPY - 244)) | (1 << (mysqlParser.CPU - 244)) | (1 << (mysqlParser.DATA - 244)) | (1 << (mysqlParser.DATAFILE - 244)) | (1 << (mysqlParser.DEALLOCATE - 244)) | (1 << (mysqlParser.DEFAULT_AUTH - 244)) | (1 << (mysqlParser.DEFINER - 244)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 244)) | (1 << (mysqlParser.DIRECTORY - 244)) | (1 << (mysqlParser.DISABLE - 244)) | (1 << (mysqlParser.DISCARD - 244)) | (1 << (mysqlParser.DISK - 244)) | (1 << (mysqlParser.DO - 244)) | (1 << (mysqlParser.DUMPFILE - 244)) | (1 << (mysqlParser.DUPLICATE - 244)) | (1 << (mysqlParser.DYNAMIC - 244)) | (1 << (mysqlParser.ENABLE - 244)) | (1 << (mysqlParser.ENCRYPTION - 244)) | (1 << (mysqlParser.ENDS - 244)) | (1 << (mysqlParser.ENGINE - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (mysqlParser.ENGINES - 308)) | (1 << (mysqlParser.ERROR - 308)) | (1 << (mysqlParser.ERRORS - 308)) | (1 << (mysqlParser.ESCAPE - 308)) | (1 << (mysqlParser.EVEN - 308)) | (1 << (mysqlParser.EVENT - 308)) | (1 << (mysqlParser.EVENTS - 308)) | (1 << (mysqlParser.EVERY - 308)) | (1 << (mysqlParser.EXCHANGE - 308)) | (1 << (mysqlParser.EXCLUSIVE - 308)) | (1 << (mysqlParser.EXPIRE - 308)) | (1 << (mysqlParser.EXTENT_SIZE - 308)) | (1 << (mysqlParser.FAULTS - 308)) | (1 << (mysqlParser.FIELDS - 308)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (mysqlParser.FILTER - 308)) | (1 << (mysqlParser.FIRST - 308)) | (1 << (mysqlParser.FIXED - 308)) | (1 << (mysqlParser.FOLLOWS - 308)) | (1 << (mysqlParser.FULL - 308)) | (1 << (mysqlParser.FUNCTION - 308)) | (1 << (mysqlParser.GLOBAL - 308)) | (1 << (mysqlParser.GRANTS - 308)) | (1 << (mysqlParser.GROUP_REPLICATION - 308)) | (1 << (mysqlParser.HASH - 308)) | (1 << (mysqlParser.HOST - 308)) | (1 << (mysqlParser.IDENTIFIED - 308)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (mysqlParser.IMPORT - 308)) | (1 << (mysqlParser.INDEXES - 308)) | (1 << (mysqlParser.INITIAL_SIZE - 308)) | (1 << (mysqlParser.INPLACE - 308)) | (1 << (mysqlParser.INSERT_METHOD - 308)) | (1 << (mysqlParser.INSTANCE - 308)) | (1 << (mysqlParser.INVOKER - 308)) | (1 << (mysqlParser.IO - 308)) | (1 << (mysqlParser.IO_THREAD - 308)) | (1 << (mysqlParser.IPC - 308)) | (1 << (mysqlParser.ISOLATION - 308)) | (1 << (mysqlParser.ISSUER - 308)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (mysqlParser.LANGUAGE - 308)) | (1 << (mysqlParser.LAST - 308)) | (1 << (mysqlParser.LEAVES - 308)) | (1 << (mysqlParser.LESS - 308)) | (1 << (mysqlParser.LEVEL - 308)) | (1 << (mysqlParser.LIST - 308)) | (1 << (mysqlParser.LOCAL - 308)) | (1 << (mysqlParser.LOGFILE - 308)) | (1 << (mysqlParser.LOGS - 308)) | (1 << (mysqlParser.MASTER - 308)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 308)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (mysqlParser.MASTER_DELAY - 372)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (mysqlParser.MASTER_HOST - 372)) | (1 << (mysqlParser.MASTER_LOG_FILE - 372)) | (1 << (mysqlParser.MASTER_LOG_POS - 372)) | (1 << (mysqlParser.MASTER_PASSWORD - 372)) | (1 << (mysqlParser.MASTER_PORT - 372)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (mysqlParser.MASTER_SSL - 372)) | (1 << (mysqlParser.MASTER_SSL_CA - 372)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_CERT - 372)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (mysqlParser.MASTER_SSL_CRL - 372)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_KEY - 372)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 372)) | (1 << (mysqlParser.MASTER_USER - 372)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_ROWS - 372)) | (1 << (mysqlParser.MAX_SIZE - 372)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (mysqlParser.MERGE - 372)) | (1 << (mysqlParser.MID - 372)) | (1 << (mysqlParser.MIGRATE - 372)) | (1 << (mysqlParser.MIN_ROWS - 372)) | (1 << (mysqlParser.MODIFY - 372)) | (1 << (mysqlParser.MUTEX - 372)) | (1 << (mysqlParser.MYSQL - 372)) | (1 << (mysqlParser.NAME - 372)) | (1 << (mysqlParser.NAMES - 372)) | (1 << (mysqlParser.NCHAR - 372)) | (1 << (mysqlParser.NEVER - 372)) | (1 << (mysqlParser.NO - 372)) | (1 << (mysqlParser.NODEGROUP - 372)) | (1 << (mysqlParser.NONE - 372)) | (1 << (mysqlParser.OFFLINE - 372)) | (1 << (mysqlParser.OFFSET - 372)) | (1 << (mysqlParser.OJ - 372)) | (1 << (mysqlParser.OLD_PASSWORD - 372)) | (1 << (mysqlParser.ONE - 372)) | (1 << (mysqlParser.ONLINE - 372)) | (1 << (mysqlParser.ONLY - 372)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 372)) | (1 << (mysqlParser.OPTIONS - 372)) | (1 << (mysqlParser.OWNER - 372)) | (1 << (mysqlParser.PACK_KEYS - 372)) | (1 << (mysqlParser.PAGE - 372)) | (1 << (mysqlParser.PARSER - 372)) | (1 << (mysqlParser.PARTIAL - 372)) | (1 << (mysqlParser.PARTITIONING - 372)) | (1 << (mysqlParser.PARTITIONS - 372)) | (1 << (mysqlParser.PASSWORD - 372)) | (1 << (mysqlParser.PHASE - 372)) | (1 << (mysqlParser.PLUGIN_DIR - 372)) | (1 << (mysqlParser.PLUGINS - 372)) | (1 << (mysqlParser.PORT - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (mysqlParser.PRECEDES - 436)) | (1 << (mysqlParser.PREPARE - 436)) | (1 << (mysqlParser.PRESERVE - 436)) | (1 << (mysqlParser.PREV - 436)) | (1 << (mysqlParser.PROCESSLIST - 436)) | (1 << (mysqlParser.PROFILE - 436)) | (1 << (mysqlParser.PROFILES - 436)) | (1 << (mysqlParser.PROXY - 436)) | (1 << (mysqlParser.QUERY - 436)) | (1 << (mysqlParser.QUICK - 436)) | (1 << (mysqlParser.REBUILD - 436)) | (1 << (mysqlParser.RECOVER - 436)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (mysqlParser.REDUNDANT - 436)) | (1 << (mysqlParser.RELAY_LOG_FILE - 436)) | (1 << (mysqlParser.RELAY_LOG_POS - 436)) | (1 << (mysqlParser.RELAYLOG - 436)) | (1 << (mysqlParser.REMOVE - 436)) | (1 << (mysqlParser.REORGANIZE - 436)) | (1 << (mysqlParser.REPAIR - 436)) | (1 << (mysqlParser.REPLICATE_DO_DB - 436)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATION - 436)) | (1 << (mysqlParser.RESUME - 436)) | (1 << (mysqlParser.RETURNS - 436)) | (1 << (mysqlParser.ROLLBACK - 436)) | (1 << (mysqlParser.ROLLUP - 436)) | (1 << (mysqlParser.ROTATE - 436)) | (1 << (mysqlParser.ROW - 436)) | (1 << (mysqlParser.ROWS - 436)) | (1 << (mysqlParser.ROW_FORMAT - 436)) | (1 << (mysqlParser.SAVEPOINT - 436)) | (1 << (mysqlParser.SCHEDULE - 436)) | (1 << (mysqlParser.SECURITY - 436)) | (1 << (mysqlParser.SERVER - 436)) | (1 << (mysqlParser.SESSION - 436)) | (1 << (mysqlParser.SHARE - 436)) | (1 << (mysqlParser.SHARED - 436)) | (1 << (mysqlParser.SIGNED - 436)) | (1 << (mysqlParser.SIMPLE - 436)) | (1 << (mysqlParser.SLAVE - 436)) | (1 << (mysqlParser.SNAPSHOT - 436)) | (1 << (mysqlParser.SOCKET - 436)) | (1 << (mysqlParser.SOME - 436)) | (1 << (mysqlParser.SOUNDS - 436)) | (1 << (mysqlParser.SOURCE - 436)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (mysqlParser.SQL_CACHE - 436)) | (1 << (mysqlParser.SQL_NO_CACHE - 436)) | (1 << (mysqlParser.SQL_THREAD - 436)) | (1 << (mysqlParser.START - 436)) | (1 << (mysqlParser.STARTS - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (mysqlParser.STATS_AUTO_RECALC - 500)) | (1 << (mysqlParser.STATS_PERSISTENT - 500)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (mysqlParser.STATUS - 500)) | (1 << (mysqlParser.STOP - 500)) | (1 << (mysqlParser.STORAGE - 500)) | (1 << (mysqlParser.STRING - 500)) | (1 << (mysqlParser.SUBJECT - 500)) | (1 << (mysqlParser.SUBPARTITION - 500)) | (1 << (mysqlParser.SUBPARTITIONS - 500)) | (1 << (mysqlParser.SUSPEND - 500)) | (1 << (mysqlParser.SWAPS - 500)) | (1 << (mysqlParser.SWITCHES - 500)) | (1 << (mysqlParser.TABLESPACE - 500)) | (1 << (mysqlParser.TEMPORARY - 500)) | (1 << (mysqlParser.TEMPTABLE - 500)) | (1 << (mysqlParser.THAN - 500)) | (1 << (mysqlParser.TRANSACTION - 500)) | (1 << (mysqlParser.TRUNCATE - 500)) | (1 << (mysqlParser.UNDEFINED - 500)) | (1 << (mysqlParser.UNDOFILE - 500)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (mysqlParser.UNKNOWN - 500)) | (1 << (mysqlParser.UPGRADE - 500)) | (1 << (mysqlParser.USER - 500)) | (1 << (mysqlParser.VALIDATION - 500)) | (1 << (mysqlParser.VALUE - 500)) | (1 << (mysqlParser.VARIABLES - 500)) | (1 << (mysqlParser.VIEW - 500)) | (1 << (mysqlParser.WAIT - 500)) | (1 << (mysqlParser.WARNINGS - 500)) | (1 << (mysqlParser.WITHOUT - 500)) | (1 << (mysqlParser.WORK - 500)) | (1 << (mysqlParser.WRAPPER - 500)) | (1 << (mysqlParser.X509 - 500)) | (1 << (mysqlParser.XA - 500)) | (1 << (mysqlParser.XML - 500)) | (1 << (mysqlParser.QUARTER - 500)) | (1 << (mysqlParser.MONTH - 500)) | (1 << (mysqlParser.DAY - 500)) | (1 << (mysqlParser.HOUR - 500)) | (1 << (mysqlParser.MINUTE - 500)) | (1 << (mysqlParser.WEEK - 500)) | (1 << (mysqlParser.SECOND - 500)) | (1 << (mysqlParser.MICROSECOND - 500)) | (1 << (mysqlParser.TABLES - 500)) | (1 << (mysqlParser.ROUTINE - 500)) | (1 << (mysqlParser.EXECUTE - 500)) | (1 << (mysqlParser.FILE - 500)) | (1 << (mysqlParser.PROCESS - 500)) | (1 << (mysqlParser.RELOAD - 500)) | (1 << (mysqlParser.SHUTDOWN - 500)) | (1 << (mysqlParser.SUPER - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (mysqlParser.PRIVILEGES - 564)) | (1 << (mysqlParser.ARMSCII8 - 564)) | (1 << (mysqlParser.ASCII - 564)) | (1 << (mysqlParser.BIG5 - 564)) | (1 << (mysqlParser.CP1250 - 564)) | (1 << (mysqlParser.CP1251 - 564)) | (1 << (mysqlParser.CP1256 - 564)) | (1 << (mysqlParser.CP1257 - 564)) | (1 << (mysqlParser.CP850 - 564)) | (1 << (mysqlParser.CP852 - 564)) | (1 << (mysqlParser.CP866 - 564)) | (1 << (mysqlParser.CP932 - 564)) | (1 << (mysqlParser.DEC8 - 564)) | (1 << (mysqlParser.EUCJPMS - 564)) | (1 << (mysqlParser.EUCKR - 564)) | (1 << (mysqlParser.GB2312 - 564)) | (1 << (mysqlParser.GBK - 564)) | (1 << (mysqlParser.GEOSTD8 - 564)) | (1 << (mysqlParser.GREEK - 564)) | (1 << (mysqlParser.HEBREW - 564)) | (1 << (mysqlParser.HP8 - 564)) | (1 << (mysqlParser.KEYBCS2 - 564)) | (1 << (mysqlParser.KOI8R - 564)) | (1 << (mysqlParser.KOI8U - 564)) | (1 << (mysqlParser.LATIN1 - 564)) | (1 << (mysqlParser.LATIN2 - 564)) | (1 << (mysqlParser.LATIN5 - 564)) | (1 << (mysqlParser.LATIN7 - 564)) | (1 << (mysqlParser.MACCE - 564)) | (1 << (mysqlParser.MACROMAN - 564)) | (1 << (mysqlParser.SJIS - 564)) | (1 << (mysqlParser.SWE7 - 564)) | (1 << (mysqlParser.TIS620 - 564)) | (1 << (mysqlParser.UCS2 - 564)) | (1 << (mysqlParser.UJIS - 564)) | (1 << (mysqlParser.UTF16 - 564)) | (1 << (mysqlParser.UTF16LE - 564)) | (1 << (mysqlParser.UTF32 - 564)) | (1 << (mysqlParser.UTF8 - 564)) | (1 << (mysqlParser.UTF8MB3 - 564)) | (1 << (mysqlParser.UTF8MB4 - 564)) | (1 << (mysqlParser.ARCHIVE - 564)) | (1 << (mysqlParser.BLACKHOLE - 564)) | (1 << (mysqlParser.CSV - 564)) | (1 << (mysqlParser.FEDERATED - 564)) | (1 << (mysqlParser.INNODB - 564)) | (1 << (mysqlParser.MEMORY - 564)) | (1 << (mysqlParser.MRG_MYISAM - 564)) | (1 << (mysqlParser.MYISAM - 564)) | (1 << (mysqlParser.NDB - 564)) | (1 << (mysqlParser.NDBCLUSTER - 564)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (mysqlParser.REPEATABLE - 564)) | (1 << (mysqlParser.COMMITTED - 564)) | (1 << (mysqlParser.UNCOMMITTED - 564)) | (1 << (mysqlParser.SERIALIZABLE - 564)) | (1 << (mysqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (mysqlParser.LINESTRING - 564)) | (1 << (mysqlParser.MULTILINESTRING - 564)) | (1 << (mysqlParser.MULTIPOINT - 564)) | (1 << (mysqlParser.MULTIPOLYGON - 564)) | (1 << (mysqlParser.POINT - 564)) | (1 << (mysqlParser.POLYGON - 564)) | (1 << (mysqlParser.ABS - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (mysqlParser.ACOS - 628)) | (1 << (mysqlParser.ADDDATE - 628)) | (1 << (mysqlParser.ADDTIME - 628)) | (1 << (mysqlParser.AES_DECRYPT - 628)) | (1 << (mysqlParser.AES_ENCRYPT - 628)) | (1 << (mysqlParser.AREA - 628)) | (1 << (mysqlParser.ASBINARY - 628)) | (1 << (mysqlParser.ASIN - 628)) | (1 << (mysqlParser.ASTEXT - 628)) | (1 << (mysqlParser.ASWKB - 628)) | (1 << (mysqlParser.ASWKT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (mysqlParser.ATAN - 628)) | (1 << (mysqlParser.ATAN2 - 628)) | (1 << (mysqlParser.BENCHMARK - 628)) | (1 << (mysqlParser.BIN - 628)) | (1 << (mysqlParser.BIT_COUNT - 628)) | (1 << (mysqlParser.BIT_LENGTH - 628)) | (1 << (mysqlParser.BUFFER - 628)) | (1 << (mysqlParser.CEIL - 628)) | (1 << (mysqlParser.CEILING - 628)) | (1 << (mysqlParser.CENTROID - 628)) | (1 << (mysqlParser.CHARACTER_LENGTH - 628)) | (1 << (mysqlParser.CHARSET - 628)) | (1 << (mysqlParser.CHAR_LENGTH - 628)) | (1 << (mysqlParser.COERCIBILITY - 628)) | (1 << (mysqlParser.COLLATION - 628)) | (1 << (mysqlParser.COMPRESS - 628)) | (1 << (mysqlParser.CONCAT - 628)) | (1 << (mysqlParser.CONCAT_WS - 628)) | (1 << (mysqlParser.CONNECTION_ID - 628)) | (1 << (mysqlParser.CONV - 628)) | (1 << (mysqlParser.CONVERT_TZ - 628)) | (1 << (mysqlParser.COS - 628)) | (1 << (mysqlParser.COT - 628)) | (1 << (mysqlParser.CRC32 - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (mysqlParser.CREATE_DIGEST - 628)) | (1 << (mysqlParser.CROSSES - 628)) | (1 << (mysqlParser.DATEDIFF - 628)) | (1 << (mysqlParser.DATE_FORMAT - 628)) | (1 << (mysqlParser.DAYNAME - 628)) | (1 << (mysqlParser.DAYOFMONTH - 628)) | (1 << (mysqlParser.DAYOFWEEK - 628)) | (1 << (mysqlParser.DAYOFYEAR - 628)) | (1 << (mysqlParser.DECODE - 628)) | (1 << (mysqlParser.DEGREES - 628)) | (1 << (mysqlParser.DES_DECRYPT - 628)) | (1 << (mysqlParser.DES_ENCRYPT - 628)) | (1 << (mysqlParser.DIMENSION - 628)) | (1 << (mysqlParser.DISJOINT - 628)) | (1 << (mysqlParser.ELT - 628)) | (1 << (mysqlParser.ENCODE - 628)) | (1 << (mysqlParser.ENCRYPT - 628)) | (1 << (mysqlParser.ENDPOINT - 628)) | (1 << (mysqlParser.ENVELOPE - 628)) | (1 << (mysqlParser.EQUALS - 628)) | (1 << (mysqlParser.EXP - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (mysqlParser.EXPORT_SET - 692)) | (1 << (mysqlParser.EXTERIORRING - 692)) | (1 << (mysqlParser.EXTRACTVALUE - 692)) | (1 << (mysqlParser.FIELD - 692)) | (1 << (mysqlParser.FIND_IN_SET - 692)) | (1 << (mysqlParser.FLOOR - 692)) | (1 << (mysqlParser.FORMAT - 692)) | (1 << (mysqlParser.FOUND_ROWS - 692)) | (1 << (mysqlParser.FROM_BASE64 - 692)) | (1 << (mysqlParser.FROM_DAYS - 692)) | (1 << (mysqlParser.FROM_UNIXTIME - 692)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYN - 692)) | (1 << (mysqlParser.GEOMETRYTYPE - 692)) | (1 << (mysqlParser.GEOMFROMTEXT - 692)) | (1 << (mysqlParser.GEOMFROMWKB - 692)) | (1 << (mysqlParser.GET_FORMAT - 692)) | (1 << (mysqlParser.GET_LOCK - 692)) | (1 << (mysqlParser.GLENGTH - 692)) | (1 << (mysqlParser.GREATEST - 692)) | (1 << (mysqlParser.GTID_SUBSET - 692)) | (1 << (mysqlParser.GTID_SUBTRACT - 692)) | (1 << (mysqlParser.HEX - 692)) | (1 << (mysqlParser.IFNULL - 692)) | (1 << (mysqlParser.INET6_ATON - 692)) | (1 << (mysqlParser.INET6_NTOA - 692)) | (1 << (mysqlParser.INET_ATON - 692)) | (1 << (mysqlParser.INET_NTOA - 692)) | (1 << (mysqlParser.INSTR - 692)) | (1 << (mysqlParser.INTERIORRINGN - 692)) | (1 << (mysqlParser.INTERSECTS - 692)) | (1 << (mysqlParser.ISCLOSED - 692)) | (1 << (mysqlParser.ISEMPTY - 692)) | (1 << (mysqlParser.ISNULL - 692)) | (1 << (mysqlParser.ISSIMPLE - 692)) | (1 << (mysqlParser.IS_FREE_LOCK - 692)) | (1 << (mysqlParser.IS_IPV4 - 692)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 692)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 692)) | (1 << (mysqlParser.IS_IPV6 - 692)) | (1 << (mysqlParser.IS_USED_LOCK - 692)) | (1 << (mysqlParser.LAST_INSERT_ID - 692)) | (1 << (mysqlParser.LCASE - 692)) | (1 << (mysqlParser.LEAST - 692)) | (1 << (mysqlParser.LENGTH - 692)) | (1 << (mysqlParser.LINEFROMTEXT - 692)) | (1 << (mysqlParser.LINEFROMWKB - 692)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 692)) | (1 << (mysqlParser.LN - 692)) | (1 << (mysqlParser.LOAD_FILE - 692)) | (1 << (mysqlParser.LOCATE - 692)) | (1 << (mysqlParser.LOG - 692)) | (1 << (mysqlParser.LOG10 - 692)) | (1 << (mysqlParser.LOG2 - 692)) | (1 << (mysqlParser.LOWER - 692)) | (1 << (mysqlParser.LPAD - 692)) | (1 << (mysqlParser.LTRIM - 692)) | (1 << (mysqlParser.MAKEDATE - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (mysqlParser.MAKETIME - 756)) | (1 << (mysqlParser.MAKE_SET - 756)) | (1 << (mysqlParser.MASTER_POS_WAIT - 756)) | (1 << (mysqlParser.MBRCONTAINS - 756)) | (1 << (mysqlParser.MBRDISJOINT - 756)) | (1 << (mysqlParser.MBREQUAL - 756)) | (1 << (mysqlParser.MBRINTERSECTS - 756)) | (1 << (mysqlParser.MBROVERLAPS - 756)) | (1 << (mysqlParser.MBRTOUCHES - 756)) | (1 << (mysqlParser.MBRWITHIN - 756)) | (1 << (mysqlParser.MD5 - 756)) | (1 << (mysqlParser.MLINEFROMTEXT - 756)) | (1 << (mysqlParser.MLINEFROMWKB - 756)) | (1 << (mysqlParser.MONTHNAME - 756)) | (1 << (mysqlParser.MPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MPOINTFROMWKB - 756)) | (1 << (mysqlParser.MPOLYFROMTEXT - 756)) | (1 << (mysqlParser.MPOLYFROMWKB - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (mysqlParser.NAME_CONST - 756)) | (1 << (mysqlParser.NULLIF - 756)) | (1 << (mysqlParser.NUMGEOMETRIES - 756)) | (1 << (mysqlParser.NUMINTERIORRINGS - 756)) | (1 << (mysqlParser.NUMPOINTS - 756)) | (1 << (mysqlParser.OCT - 756)) | (1 << (mysqlParser.OCTET_LENGTH - 756)) | (1 << (mysqlParser.ORD - 756)) | (1 << (mysqlParser.OVERLAPS - 756)) | (1 << (mysqlParser.PERIOD_ADD - 756)) | (1 << (mysqlParser.PERIOD_DIFF - 756)) | (1 << (mysqlParser.PI - 756)) | (1 << (mysqlParser.POINTFROMTEXT - 756)) | (1 << (mysqlParser.POINTFROMWKB - 756)) | (1 << (mysqlParser.POINTN - 756)) | (1 << (mysqlParser.POLYFROMTEXT - 756)) | (1 << (mysqlParser.POLYFROMWKB - 756)) | (1 << (mysqlParser.POLYGONFROMTEXT - 756)) | (1 << (mysqlParser.POLYGONFROMWKB - 756)) | (1 << (mysqlParser.POW - 756)) | (1 << (mysqlParser.POWER - 756)) | (1 << (mysqlParser.QUOTE - 756)) | (1 << (mysqlParser.RADIANS - 756)) | (1 << (mysqlParser.RAND - 756)) | (1 << (mysqlParser.RANDOM_BYTES - 756)) | (1 << (mysqlParser.RELEASE_LOCK - 756)) | (1 << (mysqlParser.REVERSE - 756)) | (1 << (mysqlParser.ROUND - 756)) | (1 << (mysqlParser.ROW_COUNT - 756)) | (1 << (mysqlParser.RPAD - 756)) | (1 << (mysqlParser.RTRIM - 756)) | (1 << (mysqlParser.SEC_TO_TIME - 756)) | (1 << (mysqlParser.SESSION_USER - 756)) | (1 << (mysqlParser.SHA - 756)) | (1 << (mysqlParser.SHA1 - 756)) | (1 << (mysqlParser.SHA2 - 756)) | (1 << (mysqlParser.SIGN - 756)) | (1 << (mysqlParser.SIN - 756)) | (1 << (mysqlParser.SLEEP - 756)) | (1 << (mysqlParser.SOUNDEX - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (mysqlParser.SQRT - 820)) | (1 << (mysqlParser.SRID - 820)) | (1 << (mysqlParser.STARTPOINT - 820)) | (1 << (mysqlParser.STRCMP - 820)) | (1 << (mysqlParser.STR_TO_DATE - 820)) | (1 << (mysqlParser.ST_AREA - 820)) | (1 << (mysqlParser.ST_ASBINARY - 820)) | (1 << (mysqlParser.ST_ASTEXT - 820)) | (1 << (mysqlParser.ST_ASWKB - 820)) | (1 << (mysqlParser.ST_ASWKT - 820)) | (1 << (mysqlParser.ST_BUFFER - 820)) | (1 << (mysqlParser.ST_CENTROID - 820)) | (1 << (mysqlParser.ST_CONTAINS - 820)) | (1 << (mysqlParser.ST_CROSSES - 820)) | (1 << (mysqlParser.ST_DIFFERENCE - 820)) | (1 << (mysqlParser.ST_DIMENSION - 820)) | (1 << (mysqlParser.ST_DISJOINT - 820)) | (1 << (mysqlParser.ST_DISTANCE - 820)) | (1 << (mysqlParser.ST_ENDPOINT - 820)) | (1 << (mysqlParser.ST_ENVELOPE - 820)) | (1 << (mysqlParser.ST_EQUALS - 820)) | (1 << (mysqlParser.ST_EXTERIORRING - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYN - 820)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 820)) | (1 << (mysqlParser.ST_INTERIORRINGN - 820)) | (1 << (mysqlParser.ST_INTERSECTION - 820)) | (1 << (mysqlParser.ST_INTERSECTS - 820)) | (1 << (mysqlParser.ST_ISCLOSED - 820)) | (1 << (mysqlParser.ST_ISEMPTY - 820)) | (1 << (mysqlParser.ST_ISSIMPLE - 820)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINEFROMWKB - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (mysqlParser.ST_NUMPOINTS - 820)) | (1 << (mysqlParser.ST_OVERLAPS - 820)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 820)) | (1 << (mysqlParser.ST_POINTFROMWKB - 820)) | (1 << (mysqlParser.ST_POINTN - 820)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYFROMWKB - 820)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (mysqlParser.ST_SRID - 820)) | (1 << (mysqlParser.ST_STARTPOINT - 820)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (mysqlParser.ST_TOUCHES - 820)) | (1 << (mysqlParser.ST_UNION - 820)) | (1 << (mysqlParser.ST_WITHIN - 820)) | (1 << (mysqlParser.ST_X - 820)) | (1 << (mysqlParser.ST_Y - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (mysqlParser.SUBDATE - 884)) | (1 << (mysqlParser.SUBSTRING_INDEX - 884)) | (1 << (mysqlParser.SUBTIME - 884)) | (1 << (mysqlParser.SYSTEM_USER - 884)) | (1 << (mysqlParser.TAN - 884)) | (1 << (mysqlParser.TIMEDIFF - 884)) | (1 << (mysqlParser.TIMESTAMPADD - 884)) | (1 << (mysqlParser.TIMESTAMPDIFF - 884)) | (1 << (mysqlParser.TIME_FORMAT - 884)) | (1 << (mysqlParser.TIME_TO_SEC - 884)) | (1 << (mysqlParser.TOUCHES - 884)) | (1 << (mysqlParser.TO_BASE64 - 884)) | (1 << (mysqlParser.TO_DAYS - 884)) | (1 << (mysqlParser.TO_SECONDS - 884)) | (1 << (mysqlParser.UCASE - 884)) | (1 << (mysqlParser.UNCOMPRESS - 884)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (mysqlParser.UNHEX - 884)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 884)) | (1 << (mysqlParser.UPDATEXML - 884)) | (1 << (mysqlParser.UPPER - 884)) | (1 << (mysqlParser.UUID - 884)) | (1 << (mysqlParser.UUID_SHORT - 884)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (mysqlParser.VERSION - 884)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (mysqlParser.WEEKDAY - 884)) | (1 << (mysqlParser.WEEKOFYEAR - 884)) | (1 << (mysqlParser.WEIGHT_STRING - 884)) | (1 << (mysqlParser.WITHIN - 884)) | (1 << (mysqlParser.YEARWEEK - 884)) | (1 << (mysqlParser.Y_FUNCTION - 884)) | (1 << (mysqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 954)) & ~0x3f) == 0 and ((1 << (_la - 954)) & ((1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 954)) | (1 << (mysqlParser.ID - 954)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 954)))) != 0):
                        self.state = 2188
                        localctx.name = self.uid()




                self.state = 2193
                self.match(mysqlParser.FOREIGN)
                self.state = 2194
                self.match(mysqlParser.KEY)
                self.state = 2196
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.LEFT or _la==mysqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (mysqlParser.DATE - 180)) | (1 << (mysqlParser.TIME - 180)) | (1 << (mysqlParser.TIMESTAMP - 180)) | (1 << (mysqlParser.DATETIME - 180)) | (1 << (mysqlParser.YEAR - 180)) | (1 << (mysqlParser.TEXT - 180)) | (1 << (mysqlParser.ENUM - 180)) | (1 << (mysqlParser.COUNT - 180)) | (1 << (mysqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (mysqlParser.ACCOUNT - 244)) | (1 << (mysqlParser.ACTION - 244)) | (1 << (mysqlParser.AFTER - 244)) | (1 << (mysqlParser.AGGREGATE - 244)) | (1 << (mysqlParser.ALGORITHM - 244)) | (1 << (mysqlParser.ANY - 244)) | (1 << (mysqlParser.AT - 244)) | (1 << (mysqlParser.AUTHORS - 244)) | (1 << (mysqlParser.AUTOCOMMIT - 244)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (mysqlParser.AUTO_INCREMENT - 244)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 244)) | (1 << (mysqlParser.BEGIN - 244)) | (1 << (mysqlParser.BINLOG - 244)) | (1 << (mysqlParser.BIT - 244)) | (1 << (mysqlParser.BLOCK - 244)) | (1 << (mysqlParser.BTREE - 244)) | (1 << (mysqlParser.CASCADED - 244)) | (1 << (mysqlParser.CHAIN - 244)) | (1 << (mysqlParser.CHANNEL - 244)) | (1 << (mysqlParser.CHECKSUM - 244)) | (1 << (mysqlParser.CIPHER - 244)) | (1 << (mysqlParser.CLIENT - 244)) | (1 << (mysqlParser.COALESCE - 244)) | (1 << (mysqlParser.CODE - 244)) | (1 << (mysqlParser.COLUMNS - 244)) | (1 << (mysqlParser.COLUMN_FORMAT - 244)) | (1 << (mysqlParser.COMMENT - 244)) | (1 << (mysqlParser.COMMIT - 244)) | (1 << (mysqlParser.COMPACT - 244)) | (1 << (mysqlParser.COMPLETION - 244)) | (1 << (mysqlParser.COMPRESSED - 244)) | (1 << (mysqlParser.COMPRESSION - 244)) | (1 << (mysqlParser.CONCURRENT - 244)) | (1 << (mysqlParser.CONNECTION - 244)) | (1 << (mysqlParser.CONSISTENT - 244)) | (1 << (mysqlParser.CONTAINS - 244)) | (1 << (mysqlParser.CONTEXT - 244)) | (1 << (mysqlParser.CONTRIBUTORS - 244)) | (1 << (mysqlParser.COPY - 244)) | (1 << (mysqlParser.CPU - 244)) | (1 << (mysqlParser.DATA - 244)) | (1 << (mysqlParser.DATAFILE - 244)) | (1 << (mysqlParser.DEALLOCATE - 244)) | (1 << (mysqlParser.DEFAULT_AUTH - 244)) | (1 << (mysqlParser.DEFINER - 244)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 244)) | (1 << (mysqlParser.DIRECTORY - 244)) | (1 << (mysqlParser.DISABLE - 244)) | (1 << (mysqlParser.DISCARD - 244)) | (1 << (mysqlParser.DISK - 244)) | (1 << (mysqlParser.DO - 244)) | (1 << (mysqlParser.DUMPFILE - 244)) | (1 << (mysqlParser.DUPLICATE - 244)) | (1 << (mysqlParser.DYNAMIC - 244)) | (1 << (mysqlParser.ENABLE - 244)) | (1 << (mysqlParser.ENCRYPTION - 244)) | (1 << (mysqlParser.ENDS - 244)) | (1 << (mysqlParser.ENGINE - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (mysqlParser.ENGINES - 308)) | (1 << (mysqlParser.ERROR - 308)) | (1 << (mysqlParser.ERRORS - 308)) | (1 << (mysqlParser.ESCAPE - 308)) | (1 << (mysqlParser.EVEN - 308)) | (1 << (mysqlParser.EVENT - 308)) | (1 << (mysqlParser.EVENTS - 308)) | (1 << (mysqlParser.EVERY - 308)) | (1 << (mysqlParser.EXCHANGE - 308)) | (1 << (mysqlParser.EXCLUSIVE - 308)) | (1 << (mysqlParser.EXPIRE - 308)) | (1 << (mysqlParser.EXTENT_SIZE - 308)) | (1 << (mysqlParser.FAULTS - 308)) | (1 << (mysqlParser.FIELDS - 308)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (mysqlParser.FILTER - 308)) | (1 << (mysqlParser.FIRST - 308)) | (1 << (mysqlParser.FIXED - 308)) | (1 << (mysqlParser.FOLLOWS - 308)) | (1 << (mysqlParser.FULL - 308)) | (1 << (mysqlParser.FUNCTION - 308)) | (1 << (mysqlParser.GLOBAL - 308)) | (1 << (mysqlParser.GRANTS - 308)) | (1 << (mysqlParser.GROUP_REPLICATION - 308)) | (1 << (mysqlParser.HASH - 308)) | (1 << (mysqlParser.HOST - 308)) | (1 << (mysqlParser.IDENTIFIED - 308)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (mysqlParser.IMPORT - 308)) | (1 << (mysqlParser.INDEXES - 308)) | (1 << (mysqlParser.INITIAL_SIZE - 308)) | (1 << (mysqlParser.INPLACE - 308)) | (1 << (mysqlParser.INSERT_METHOD - 308)) | (1 << (mysqlParser.INSTANCE - 308)) | (1 << (mysqlParser.INVOKER - 308)) | (1 << (mysqlParser.IO - 308)) | (1 << (mysqlParser.IO_THREAD - 308)) | (1 << (mysqlParser.IPC - 308)) | (1 << (mysqlParser.ISOLATION - 308)) | (1 << (mysqlParser.ISSUER - 308)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (mysqlParser.LANGUAGE - 308)) | (1 << (mysqlParser.LAST - 308)) | (1 << (mysqlParser.LEAVES - 308)) | (1 << (mysqlParser.LESS - 308)) | (1 << (mysqlParser.LEVEL - 308)) | (1 << (mysqlParser.LIST - 308)) | (1 << (mysqlParser.LOCAL - 308)) | (1 << (mysqlParser.LOGFILE - 308)) | (1 << (mysqlParser.LOGS - 308)) | (1 << (mysqlParser.MASTER - 308)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 308)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (mysqlParser.MASTER_DELAY - 372)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (mysqlParser.MASTER_HOST - 372)) | (1 << (mysqlParser.MASTER_LOG_FILE - 372)) | (1 << (mysqlParser.MASTER_LOG_POS - 372)) | (1 << (mysqlParser.MASTER_PASSWORD - 372)) | (1 << (mysqlParser.MASTER_PORT - 372)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (mysqlParser.MASTER_SSL - 372)) | (1 << (mysqlParser.MASTER_SSL_CA - 372)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_CERT - 372)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (mysqlParser.MASTER_SSL_CRL - 372)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_KEY - 372)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 372)) | (1 << (mysqlParser.MASTER_USER - 372)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_ROWS - 372)) | (1 << (mysqlParser.MAX_SIZE - 372)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (mysqlParser.MERGE - 372)) | (1 << (mysqlParser.MID - 372)) | (1 << (mysqlParser.MIGRATE - 372)) | (1 << (mysqlParser.MIN_ROWS - 372)) | (1 << (mysqlParser.MODIFY - 372)) | (1 << (mysqlParser.MUTEX - 372)) | (1 << (mysqlParser.MYSQL - 372)) | (1 << (mysqlParser.NAME - 372)) | (1 << (mysqlParser.NAMES - 372)) | (1 << (mysqlParser.NCHAR - 372)) | (1 << (mysqlParser.NEVER - 372)) | (1 << (mysqlParser.NO - 372)) | (1 << (mysqlParser.NODEGROUP - 372)) | (1 << (mysqlParser.NONE - 372)) | (1 << (mysqlParser.OFFLINE - 372)) | (1 << (mysqlParser.OFFSET - 372)) | (1 << (mysqlParser.OJ - 372)) | (1 << (mysqlParser.OLD_PASSWORD - 372)) | (1 << (mysqlParser.ONE - 372)) | (1 << (mysqlParser.ONLINE - 372)) | (1 << (mysqlParser.ONLY - 372)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 372)) | (1 << (mysqlParser.OPTIONS - 372)) | (1 << (mysqlParser.OWNER - 372)) | (1 << (mysqlParser.PACK_KEYS - 372)) | (1 << (mysqlParser.PAGE - 372)) | (1 << (mysqlParser.PARSER - 372)) | (1 << (mysqlParser.PARTIAL - 372)) | (1 << (mysqlParser.PARTITIONING - 372)) | (1 << (mysqlParser.PARTITIONS - 372)) | (1 << (mysqlParser.PASSWORD - 372)) | (1 << (mysqlParser.PHASE - 372)) | (1 << (mysqlParser.PLUGIN_DIR - 372)) | (1 << (mysqlParser.PLUGINS - 372)) | (1 << (mysqlParser.PORT - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (mysqlParser.PRECEDES - 436)) | (1 << (mysqlParser.PREPARE - 436)) | (1 << (mysqlParser.PRESERVE - 436)) | (1 << (mysqlParser.PREV - 436)) | (1 << (mysqlParser.PROCESSLIST - 436)) | (1 << (mysqlParser.PROFILE - 436)) | (1 << (mysqlParser.PROFILES - 436)) | (1 << (mysqlParser.PROXY - 436)) | (1 << (mysqlParser.QUERY - 436)) | (1 << (mysqlParser.QUICK - 436)) | (1 << (mysqlParser.REBUILD - 436)) | (1 << (mysqlParser.RECOVER - 436)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (mysqlParser.REDUNDANT - 436)) | (1 << (mysqlParser.RELAY_LOG_FILE - 436)) | (1 << (mysqlParser.RELAY_LOG_POS - 436)) | (1 << (mysqlParser.RELAYLOG - 436)) | (1 << (mysqlParser.REMOVE - 436)) | (1 << (mysqlParser.REORGANIZE - 436)) | (1 << (mysqlParser.REPAIR - 436)) | (1 << (mysqlParser.REPLICATE_DO_DB - 436)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATION - 436)) | (1 << (mysqlParser.RESUME - 436)) | (1 << (mysqlParser.RETURNS - 436)) | (1 << (mysqlParser.ROLLBACK - 436)) | (1 << (mysqlParser.ROLLUP - 436)) | (1 << (mysqlParser.ROTATE - 436)) | (1 << (mysqlParser.ROW - 436)) | (1 << (mysqlParser.ROWS - 436)) | (1 << (mysqlParser.ROW_FORMAT - 436)) | (1 << (mysqlParser.SAVEPOINT - 436)) | (1 << (mysqlParser.SCHEDULE - 436)) | (1 << (mysqlParser.SECURITY - 436)) | (1 << (mysqlParser.SERVER - 436)) | (1 << (mysqlParser.SESSION - 436)) | (1 << (mysqlParser.SHARE - 436)) | (1 << (mysqlParser.SHARED - 436)) | (1 << (mysqlParser.SIGNED - 436)) | (1 << (mysqlParser.SIMPLE - 436)) | (1 << (mysqlParser.SLAVE - 436)) | (1 << (mysqlParser.SNAPSHOT - 436)) | (1 << (mysqlParser.SOCKET - 436)) | (1 << (mysqlParser.SOME - 436)) | (1 << (mysqlParser.SOUNDS - 436)) | (1 << (mysqlParser.SOURCE - 436)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (mysqlParser.SQL_CACHE - 436)) | (1 << (mysqlParser.SQL_NO_CACHE - 436)) | (1 << (mysqlParser.SQL_THREAD - 436)) | (1 << (mysqlParser.START - 436)) | (1 << (mysqlParser.STARTS - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (mysqlParser.STATS_AUTO_RECALC - 500)) | (1 << (mysqlParser.STATS_PERSISTENT - 500)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (mysqlParser.STATUS - 500)) | (1 << (mysqlParser.STOP - 500)) | (1 << (mysqlParser.STORAGE - 500)) | (1 << (mysqlParser.STRING - 500)) | (1 << (mysqlParser.SUBJECT - 500)) | (1 << (mysqlParser.SUBPARTITION - 500)) | (1 << (mysqlParser.SUBPARTITIONS - 500)) | (1 << (mysqlParser.SUSPEND - 500)) | (1 << (mysqlParser.SWAPS - 500)) | (1 << (mysqlParser.SWITCHES - 500)) | (1 << (mysqlParser.TABLESPACE - 500)) | (1 << (mysqlParser.TEMPORARY - 500)) | (1 << (mysqlParser.TEMPTABLE - 500)) | (1 << (mysqlParser.THAN - 500)) | (1 << (mysqlParser.TRANSACTION - 500)) | (1 << (mysqlParser.TRUNCATE - 500)) | (1 << (mysqlParser.UNDEFINED - 500)) | (1 << (mysqlParser.UNDOFILE - 500)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (mysqlParser.UNKNOWN - 500)) | (1 << (mysqlParser.UPGRADE - 500)) | (1 << (mysqlParser.USER - 500)) | (1 << (mysqlParser.VALIDATION - 500)) | (1 << (mysqlParser.VALUE - 500)) | (1 << (mysqlParser.VARIABLES - 500)) | (1 << (mysqlParser.VIEW - 500)) | (1 << (mysqlParser.WAIT - 500)) | (1 << (mysqlParser.WARNINGS - 500)) | (1 << (mysqlParser.WITHOUT - 500)) | (1 << (mysqlParser.WORK - 500)) | (1 << (mysqlParser.WRAPPER - 500)) | (1 << (mysqlParser.X509 - 500)) | (1 << (mysqlParser.XA - 500)) | (1 << (mysqlParser.XML - 500)) | (1 << (mysqlParser.QUARTER - 500)) | (1 << (mysqlParser.MONTH - 500)) | (1 << (mysqlParser.DAY - 500)) | (1 << (mysqlParser.HOUR - 500)) | (1 << (mysqlParser.MINUTE - 500)) | (1 << (mysqlParser.WEEK - 500)) | (1 << (mysqlParser.SECOND - 500)) | (1 << (mysqlParser.MICROSECOND - 500)) | (1 << (mysqlParser.TABLES - 500)) | (1 << (mysqlParser.ROUTINE - 500)) | (1 << (mysqlParser.EXECUTE - 500)) | (1 << (mysqlParser.FILE - 500)) | (1 << (mysqlParser.PROCESS - 500)) | (1 << (mysqlParser.RELOAD - 500)) | (1 << (mysqlParser.SHUTDOWN - 500)) | (1 << (mysqlParser.SUPER - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (mysqlParser.PRIVILEGES - 564)) | (1 << (mysqlParser.ARMSCII8 - 564)) | (1 << (mysqlParser.ASCII - 564)) | (1 << (mysqlParser.BIG5 - 564)) | (1 << (mysqlParser.CP1250 - 564)) | (1 << (mysqlParser.CP1251 - 564)) | (1 << (mysqlParser.CP1256 - 564)) | (1 << (mysqlParser.CP1257 - 564)) | (1 << (mysqlParser.CP850 - 564)) | (1 << (mysqlParser.CP852 - 564)) | (1 << (mysqlParser.CP866 - 564)) | (1 << (mysqlParser.CP932 - 564)) | (1 << (mysqlParser.DEC8 - 564)) | (1 << (mysqlParser.EUCJPMS - 564)) | (1 << (mysqlParser.EUCKR - 564)) | (1 << (mysqlParser.GB2312 - 564)) | (1 << (mysqlParser.GBK - 564)) | (1 << (mysqlParser.GEOSTD8 - 564)) | (1 << (mysqlParser.GREEK - 564)) | (1 << (mysqlParser.HEBREW - 564)) | (1 << (mysqlParser.HP8 - 564)) | (1 << (mysqlParser.KEYBCS2 - 564)) | (1 << (mysqlParser.KOI8R - 564)) | (1 << (mysqlParser.KOI8U - 564)) | (1 << (mysqlParser.LATIN1 - 564)) | (1 << (mysqlParser.LATIN2 - 564)) | (1 << (mysqlParser.LATIN5 - 564)) | (1 << (mysqlParser.LATIN7 - 564)) | (1 << (mysqlParser.MACCE - 564)) | (1 << (mysqlParser.MACROMAN - 564)) | (1 << (mysqlParser.SJIS - 564)) | (1 << (mysqlParser.SWE7 - 564)) | (1 << (mysqlParser.TIS620 - 564)) | (1 << (mysqlParser.UCS2 - 564)) | (1 << (mysqlParser.UJIS - 564)) | (1 << (mysqlParser.UTF16 - 564)) | (1 << (mysqlParser.UTF16LE - 564)) | (1 << (mysqlParser.UTF32 - 564)) | (1 << (mysqlParser.UTF8 - 564)) | (1 << (mysqlParser.UTF8MB3 - 564)) | (1 << (mysqlParser.UTF8MB4 - 564)) | (1 << (mysqlParser.ARCHIVE - 564)) | (1 << (mysqlParser.BLACKHOLE - 564)) | (1 << (mysqlParser.CSV - 564)) | (1 << (mysqlParser.FEDERATED - 564)) | (1 << (mysqlParser.INNODB - 564)) | (1 << (mysqlParser.MEMORY - 564)) | (1 << (mysqlParser.MRG_MYISAM - 564)) | (1 << (mysqlParser.MYISAM - 564)) | (1 << (mysqlParser.NDB - 564)) | (1 << (mysqlParser.NDBCLUSTER - 564)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (mysqlParser.REPEATABLE - 564)) | (1 << (mysqlParser.COMMITTED - 564)) | (1 << (mysqlParser.UNCOMMITTED - 564)) | (1 << (mysqlParser.SERIALIZABLE - 564)) | (1 << (mysqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (mysqlParser.LINESTRING - 564)) | (1 << (mysqlParser.MULTILINESTRING - 564)) | (1 << (mysqlParser.MULTIPOINT - 564)) | (1 << (mysqlParser.MULTIPOLYGON - 564)) | (1 << (mysqlParser.POINT - 564)) | (1 << (mysqlParser.POLYGON - 564)) | (1 << (mysqlParser.ABS - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (mysqlParser.ACOS - 628)) | (1 << (mysqlParser.ADDDATE - 628)) | (1 << (mysqlParser.ADDTIME - 628)) | (1 << (mysqlParser.AES_DECRYPT - 628)) | (1 << (mysqlParser.AES_ENCRYPT - 628)) | (1 << (mysqlParser.AREA - 628)) | (1 << (mysqlParser.ASBINARY - 628)) | (1 << (mysqlParser.ASIN - 628)) | (1 << (mysqlParser.ASTEXT - 628)) | (1 << (mysqlParser.ASWKB - 628)) | (1 << (mysqlParser.ASWKT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (mysqlParser.ATAN - 628)) | (1 << (mysqlParser.ATAN2 - 628)) | (1 << (mysqlParser.BENCHMARK - 628)) | (1 << (mysqlParser.BIN - 628)) | (1 << (mysqlParser.BIT_COUNT - 628)) | (1 << (mysqlParser.BIT_LENGTH - 628)) | (1 << (mysqlParser.BUFFER - 628)) | (1 << (mysqlParser.CEIL - 628)) | (1 << (mysqlParser.CEILING - 628)) | (1 << (mysqlParser.CENTROID - 628)) | (1 << (mysqlParser.CHARACTER_LENGTH - 628)) | (1 << (mysqlParser.CHARSET - 628)) | (1 << (mysqlParser.CHAR_LENGTH - 628)) | (1 << (mysqlParser.COERCIBILITY - 628)) | (1 << (mysqlParser.COLLATION - 628)) | (1 << (mysqlParser.COMPRESS - 628)) | (1 << (mysqlParser.CONCAT - 628)) | (1 << (mysqlParser.CONCAT_WS - 628)) | (1 << (mysqlParser.CONNECTION_ID - 628)) | (1 << (mysqlParser.CONV - 628)) | (1 << (mysqlParser.CONVERT_TZ - 628)) | (1 << (mysqlParser.COS - 628)) | (1 << (mysqlParser.COT - 628)) | (1 << (mysqlParser.CRC32 - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (mysqlParser.CREATE_DIGEST - 628)) | (1 << (mysqlParser.CROSSES - 628)) | (1 << (mysqlParser.DATEDIFF - 628)) | (1 << (mysqlParser.DATE_FORMAT - 628)) | (1 << (mysqlParser.DAYNAME - 628)) | (1 << (mysqlParser.DAYOFMONTH - 628)) | (1 << (mysqlParser.DAYOFWEEK - 628)) | (1 << (mysqlParser.DAYOFYEAR - 628)) | (1 << (mysqlParser.DECODE - 628)) | (1 << (mysqlParser.DEGREES - 628)) | (1 << (mysqlParser.DES_DECRYPT - 628)) | (1 << (mysqlParser.DES_ENCRYPT - 628)) | (1 << (mysqlParser.DIMENSION - 628)) | (1 << (mysqlParser.DISJOINT - 628)) | (1 << (mysqlParser.ELT - 628)) | (1 << (mysqlParser.ENCODE - 628)) | (1 << (mysqlParser.ENCRYPT - 628)) | (1 << (mysqlParser.ENDPOINT - 628)) | (1 << (mysqlParser.ENVELOPE - 628)) | (1 << (mysqlParser.EQUALS - 628)) | (1 << (mysqlParser.EXP - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (mysqlParser.EXPORT_SET - 692)) | (1 << (mysqlParser.EXTERIORRING - 692)) | (1 << (mysqlParser.EXTRACTVALUE - 692)) | (1 << (mysqlParser.FIELD - 692)) | (1 << (mysqlParser.FIND_IN_SET - 692)) | (1 << (mysqlParser.FLOOR - 692)) | (1 << (mysqlParser.FORMAT - 692)) | (1 << (mysqlParser.FOUND_ROWS - 692)) | (1 << (mysqlParser.FROM_BASE64 - 692)) | (1 << (mysqlParser.FROM_DAYS - 692)) | (1 << (mysqlParser.FROM_UNIXTIME - 692)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYN - 692)) | (1 << (mysqlParser.GEOMETRYTYPE - 692)) | (1 << (mysqlParser.GEOMFROMTEXT - 692)) | (1 << (mysqlParser.GEOMFROMWKB - 692)) | (1 << (mysqlParser.GET_FORMAT - 692)) | (1 << (mysqlParser.GET_LOCK - 692)) | (1 << (mysqlParser.GLENGTH - 692)) | (1 << (mysqlParser.GREATEST - 692)) | (1 << (mysqlParser.GTID_SUBSET - 692)) | (1 << (mysqlParser.GTID_SUBTRACT - 692)) | (1 << (mysqlParser.HEX - 692)) | (1 << (mysqlParser.IFNULL - 692)) | (1 << (mysqlParser.INET6_ATON - 692)) | (1 << (mysqlParser.INET6_NTOA - 692)) | (1 << (mysqlParser.INET_ATON - 692)) | (1 << (mysqlParser.INET_NTOA - 692)) | (1 << (mysqlParser.INSTR - 692)) | (1 << (mysqlParser.INTERIORRINGN - 692)) | (1 << (mysqlParser.INTERSECTS - 692)) | (1 << (mysqlParser.ISCLOSED - 692)) | (1 << (mysqlParser.ISEMPTY - 692)) | (1 << (mysqlParser.ISNULL - 692)) | (1 << (mysqlParser.ISSIMPLE - 692)) | (1 << (mysqlParser.IS_FREE_LOCK - 692)) | (1 << (mysqlParser.IS_IPV4 - 692)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 692)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 692)) | (1 << (mysqlParser.IS_IPV6 - 692)) | (1 << (mysqlParser.IS_USED_LOCK - 692)) | (1 << (mysqlParser.LAST_INSERT_ID - 692)) | (1 << (mysqlParser.LCASE - 692)) | (1 << (mysqlParser.LEAST - 692)) | (1 << (mysqlParser.LENGTH - 692)) | (1 << (mysqlParser.LINEFROMTEXT - 692)) | (1 << (mysqlParser.LINEFROMWKB - 692)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 692)) | (1 << (mysqlParser.LN - 692)) | (1 << (mysqlParser.LOAD_FILE - 692)) | (1 << (mysqlParser.LOCATE - 692)) | (1 << (mysqlParser.LOG - 692)) | (1 << (mysqlParser.LOG10 - 692)) | (1 << (mysqlParser.LOG2 - 692)) | (1 << (mysqlParser.LOWER - 692)) | (1 << (mysqlParser.LPAD - 692)) | (1 << (mysqlParser.LTRIM - 692)) | (1 << (mysqlParser.MAKEDATE - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (mysqlParser.MAKETIME - 756)) | (1 << (mysqlParser.MAKE_SET - 756)) | (1 << (mysqlParser.MASTER_POS_WAIT - 756)) | (1 << (mysqlParser.MBRCONTAINS - 756)) | (1 << (mysqlParser.MBRDISJOINT - 756)) | (1 << (mysqlParser.MBREQUAL - 756)) | (1 << (mysqlParser.MBRINTERSECTS - 756)) | (1 << (mysqlParser.MBROVERLAPS - 756)) | (1 << (mysqlParser.MBRTOUCHES - 756)) | (1 << (mysqlParser.MBRWITHIN - 756)) | (1 << (mysqlParser.MD5 - 756)) | (1 << (mysqlParser.MLINEFROMTEXT - 756)) | (1 << (mysqlParser.MLINEFROMWKB - 756)) | (1 << (mysqlParser.MONTHNAME - 756)) | (1 << (mysqlParser.MPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MPOINTFROMWKB - 756)) | (1 << (mysqlParser.MPOLYFROMTEXT - 756)) | (1 << (mysqlParser.MPOLYFROMWKB - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (mysqlParser.NAME_CONST - 756)) | (1 << (mysqlParser.NULLIF - 756)) | (1 << (mysqlParser.NUMGEOMETRIES - 756)) | (1 << (mysqlParser.NUMINTERIORRINGS - 756)) | (1 << (mysqlParser.NUMPOINTS - 756)) | (1 << (mysqlParser.OCT - 756)) | (1 << (mysqlParser.OCTET_LENGTH - 756)) | (1 << (mysqlParser.ORD - 756)) | (1 << (mysqlParser.OVERLAPS - 756)) | (1 << (mysqlParser.PERIOD_ADD - 756)) | (1 << (mysqlParser.PERIOD_DIFF - 756)) | (1 << (mysqlParser.PI - 756)) | (1 << (mysqlParser.POINTFROMTEXT - 756)) | (1 << (mysqlParser.POINTFROMWKB - 756)) | (1 << (mysqlParser.POINTN - 756)) | (1 << (mysqlParser.POLYFROMTEXT - 756)) | (1 << (mysqlParser.POLYFROMWKB - 756)) | (1 << (mysqlParser.POLYGONFROMTEXT - 756)) | (1 << (mysqlParser.POLYGONFROMWKB - 756)) | (1 << (mysqlParser.POW - 756)) | (1 << (mysqlParser.POWER - 756)) | (1 << (mysqlParser.QUOTE - 756)) | (1 << (mysqlParser.RADIANS - 756)) | (1 << (mysqlParser.RAND - 756)) | (1 << (mysqlParser.RANDOM_BYTES - 756)) | (1 << (mysqlParser.RELEASE_LOCK - 756)) | (1 << (mysqlParser.REVERSE - 756)) | (1 << (mysqlParser.ROUND - 756)) | (1 << (mysqlParser.ROW_COUNT - 756)) | (1 << (mysqlParser.RPAD - 756)) | (1 << (mysqlParser.RTRIM - 756)) | (1 << (mysqlParser.SEC_TO_TIME - 756)) | (1 << (mysqlParser.SESSION_USER - 756)) | (1 << (mysqlParser.SHA - 756)) | (1 << (mysqlParser.SHA1 - 756)) | (1 << (mysqlParser.SHA2 - 756)) | (1 << (mysqlParser.SIGN - 756)) | (1 << (mysqlParser.SIN - 756)) | (1 << (mysqlParser.SLEEP - 756)) | (1 << (mysqlParser.SOUNDEX - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (mysqlParser.SQRT - 820)) | (1 << (mysqlParser.SRID - 820)) | (1 << (mysqlParser.STARTPOINT - 820)) | (1 << (mysqlParser.STRCMP - 820)) | (1 << (mysqlParser.STR_TO_DATE - 820)) | (1 << (mysqlParser.ST_AREA - 820)) | (1 << (mysqlParser.ST_ASBINARY - 820)) | (1 << (mysqlParser.ST_ASTEXT - 820)) | (1 << (mysqlParser.ST_ASWKB - 820)) | (1 << (mysqlParser.ST_ASWKT - 820)) | (1 << (mysqlParser.ST_BUFFER - 820)) | (1 << (mysqlParser.ST_CENTROID - 820)) | (1 << (mysqlParser.ST_CONTAINS - 820)) | (1 << (mysqlParser.ST_CROSSES - 820)) | (1 << (mysqlParser.ST_DIFFERENCE - 820)) | (1 << (mysqlParser.ST_DIMENSION - 820)) | (1 << (mysqlParser.ST_DISJOINT - 820)) | (1 << (mysqlParser.ST_DISTANCE - 820)) | (1 << (mysqlParser.ST_ENDPOINT - 820)) | (1 << (mysqlParser.ST_ENVELOPE - 820)) | (1 << (mysqlParser.ST_EQUALS - 820)) | (1 << (mysqlParser.ST_EXTERIORRING - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYN - 820)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 820)) | (1 << (mysqlParser.ST_INTERIORRINGN - 820)) | (1 << (mysqlParser.ST_INTERSECTION - 820)) | (1 << (mysqlParser.ST_INTERSECTS - 820)) | (1 << (mysqlParser.ST_ISCLOSED - 820)) | (1 << (mysqlParser.ST_ISEMPTY - 820)) | (1 << (mysqlParser.ST_ISSIMPLE - 820)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINEFROMWKB - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (mysqlParser.ST_NUMPOINTS - 820)) | (1 << (mysqlParser.ST_OVERLAPS - 820)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 820)) | (1 << (mysqlParser.ST_POINTFROMWKB - 820)) | (1 << (mysqlParser.ST_POINTN - 820)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYFROMWKB - 820)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (mysqlParser.ST_SRID - 820)) | (1 << (mysqlParser.ST_STARTPOINT - 820)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (mysqlParser.ST_TOUCHES - 820)) | (1 << (mysqlParser.ST_UNION - 820)) | (1 << (mysqlParser.ST_WITHIN - 820)) | (1 << (mysqlParser.ST_X - 820)) | (1 << (mysqlParser.ST_Y - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (mysqlParser.SUBDATE - 884)) | (1 << (mysqlParser.SUBSTRING_INDEX - 884)) | (1 << (mysqlParser.SUBTIME - 884)) | (1 << (mysqlParser.SYSTEM_USER - 884)) | (1 << (mysqlParser.TAN - 884)) | (1 << (mysqlParser.TIMEDIFF - 884)) | (1 << (mysqlParser.TIMESTAMPADD - 884)) | (1 << (mysqlParser.TIMESTAMPDIFF - 884)) | (1 << (mysqlParser.TIME_FORMAT - 884)) | (1 << (mysqlParser.TIME_TO_SEC - 884)) | (1 << (mysqlParser.TOUCHES - 884)) | (1 << (mysqlParser.TO_BASE64 - 884)) | (1 << (mysqlParser.TO_DAYS - 884)) | (1 << (mysqlParser.TO_SECONDS - 884)) | (1 << (mysqlParser.UCASE - 884)) | (1 << (mysqlParser.UNCOMPRESS - 884)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (mysqlParser.UNHEX - 884)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 884)) | (1 << (mysqlParser.UPDATEXML - 884)) | (1 << (mysqlParser.UPPER - 884)) | (1 << (mysqlParser.UUID - 884)) | (1 << (mysqlParser.UUID_SHORT - 884)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (mysqlParser.VERSION - 884)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (mysqlParser.WEEKDAY - 884)) | (1 << (mysqlParser.WEEKOFYEAR - 884)) | (1 << (mysqlParser.WEIGHT_STRING - 884)) | (1 << (mysqlParser.WITHIN - 884)) | (1 << (mysqlParser.YEARWEEK - 884)) | (1 << (mysqlParser.Y_FUNCTION - 884)) | (1 << (mysqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 954)) & ~0x3f) == 0 and ((1 << (_la - 954)) & ((1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 954)) | (1 << (mysqlParser.ID - 954)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 954)))) != 0):
                    self.state = 2195
                    localctx.indexName = self.uid()


                self.state = 2198
                self.indexColumnNames()
                self.state = 2199
                self.referenceDefinition()
                pass

            elif la_ == 9:
                localctx = mysqlParser.AlterTableAlgorighmContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 2201
                self.match(mysqlParser.ALGORITHM)
                self.state = 2203
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 2202
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 2205
                localctx.algType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.DEFAULT or _la==mysqlParser.COPY or _la==mysqlParser.INPLACE):
                    localctx.algType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 10:
                localctx = mysqlParser.AlterByChangeDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 2206
                self.match(mysqlParser.ALTER)
                self.state = 2208
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.COLUMN:
                    self.state = 2207
                    self.match(mysqlParser.COLUMN)


                self.state = 2210
                self.uid()
                self.state = 2216
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [mysqlParser.SET]:
                    self.state = 2211
                    self.match(mysqlParser.SET)
                    self.state = 2212
                    self.match(mysqlParser.DEFAULT)
                    self.state = 2213
                    self.defaultValue()
                    pass
                elif token in [mysqlParser.DROP]:
                    self.state = 2214
                    self.match(mysqlParser.DROP)
                    self.state = 2215
                    self.match(mysqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 11:
                localctx = mysqlParser.AlterByChangeColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 2218
                self.match(mysqlParser.CHANGE)
                self.state = 2220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.COLUMN:
                    self.state = 2219
                    self.match(mysqlParser.COLUMN)


                self.state = 2222
                localctx.oldColumn = self.uid()
                self.state = 2223
                localctx.newColumn = self.uid()
                self.state = 2224
                self.columnDefinition()
                self.state = 2228
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [mysqlParser.FIRST]:
                    self.state = 2225
                    self.match(mysqlParser.FIRST)
                    pass
                elif token in [mysqlParser.AFTER]:
                    self.state = 2226
                    self.match(mysqlParser.AFTER)
                    self.state = 2227
                    localctx.afterColumn = self.uid()
                    pass
                elif token in [mysqlParser.EOF, mysqlParser.PARTITION, mysqlParser.MINUS, mysqlParser.COMMA, mysqlParser.SEMI]:
                    pass
                else:
                    pass
                pass

            elif la_ == 12:
                localctx = mysqlParser.AlterByLockContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 2230
                self.match(mysqlParser.LOCK)
                self.state = 2232
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 2231
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 2234
                localctx.lockType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.DEFAULT or _la==mysqlParser.EXCLUSIVE or _la==mysqlParser.NONE or _la==mysqlParser.SHARED):
                    localctx.lockType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 13:
                localctx = mysqlParser.AlterByModifyColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 2235
                self.match(mysqlParser.MODIFY)
                self.state = 2237
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.COLUMN:
                    self.state = 2236
                    self.match(mysqlParser.COLUMN)


                self.state = 2239
                self.uid()
                self.state = 2240
                self.columnDefinition()
                self.state = 2244
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [mysqlParser.FIRST]:
                    self.state = 2241
                    self.match(mysqlParser.FIRST)
                    pass
                elif token in [mysqlParser.AFTER]:
                    self.state = 2242
                    self.match(mysqlParser.AFTER)
                    self.state = 2243
                    self.uid()
                    pass
                elif token in [mysqlParser.EOF, mysqlParser.PARTITION, mysqlParser.MINUS, mysqlParser.COMMA, mysqlParser.SEMI]:
                    pass
                else:
                    pass
                pass

            elif la_ == 14:
                localctx = mysqlParser.AlterByDropColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 2246
                self.match(mysqlParser.DROP)
                self.state = 2248
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.COLUMN:
                    self.state = 2247
                    self.match(mysqlParser.COLUMN)


                self.state = 2250
                self.uid()
                pass

            elif la_ == 15:
                localctx = mysqlParser.AlterByDropPrimaryKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 2251
                self.match(mysqlParser.DROP)
                self.state = 2252
                self.match(mysqlParser.PRIMARY)
                self.state = 2253
                self.match(mysqlParser.KEY)
                pass

            elif la_ == 16:
                localctx = mysqlParser.AlterByDropIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 2254
                self.match(mysqlParser.DROP)
                self.state = 2255
                localctx.keyType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.INDEX or _la==mysqlParser.KEY):
                    localctx.keyType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2256
                self.uid()
                pass

            elif la_ == 17:
                localctx = mysqlParser.AlterByDropForeignKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 2257
                self.match(mysqlParser.DROP)
                self.state = 2258
                self.match(mysqlParser.FOREIGN)
                self.state = 2259
                self.match(mysqlParser.KEY)
                self.state = 2260
                self.uid()
                pass

            elif la_ == 18:
                localctx = mysqlParser.AlterByDisableKeysContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 2261
                self.match(mysqlParser.DISABLE)
                self.state = 2262
                self.match(mysqlParser.KEYS)
                pass

            elif la_ == 19:
                localctx = mysqlParser.AlterByEnableKeysContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 2263
                self.match(mysqlParser.ENABLE)
                self.state = 2264
                self.match(mysqlParser.KEYS)
                pass

            elif la_ == 20:
                localctx = mysqlParser.AlterByRenameContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 2265
                self.match(mysqlParser.RENAME)
                self.state = 2267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.AS or _la==mysqlParser.TO:
                    self.state = 2266
                    localctx.renameFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==mysqlParser.AS or _la==mysqlParser.TO):
                        localctx.renameFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2269
                self.uid()
                pass

            elif la_ == 21:
                localctx = mysqlParser.AlterByOrderContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 2270
                self.match(mysqlParser.ORDER)
                self.state = 2271
                self.match(mysqlParser.BY)
                self.state = 2272
                self.uidList()
                pass

            elif la_ == 22:
                localctx = mysqlParser.AlterByConvertCharsetContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 2273
                self.match(mysqlParser.CONVERT)
                self.state = 2274
                self.match(mysqlParser.TO)
                self.state = 2275
                self.match(mysqlParser.CHARACTER)
                self.state = 2276
                self.match(mysqlParser.SET)
                self.state = 2277
                self.charsetName()
                self.state = 2280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.COLLATE:
                    self.state = 2278
                    self.match(mysqlParser.COLLATE)
                    self.state = 2279
                    self.collationName()


                pass

            elif la_ == 23:
                localctx = mysqlParser.AlterTableDefaultCharsetContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 2283
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.DEFAULT:
                    self.state = 2282
                    self.match(mysqlParser.DEFAULT)


                self.state = 2285
                self.match(mysqlParser.CHARACTER)
                self.state = 2286
                self.match(mysqlParser.SET)
                self.state = 2287
                self.match(mysqlParser.EQUAL_SYMBOL)
                self.state = 2288
                self.charsetName()
                self.state = 2292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.COLLATE:
                    self.state = 2289
                    self.match(mysqlParser.COLLATE)
                    self.state = 2290
                    self.match(mysqlParser.EQUAL_SYMBOL)
                    self.state = 2291
                    self.collationName()


                pass

            elif la_ == 24:
                localctx = mysqlParser.AlterByDiscardTablespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 2294
                self.match(mysqlParser.DISCARD)
                self.state = 2295
                self.match(mysqlParser.TABLESPACE)
                pass

            elif la_ == 25:
                localctx = mysqlParser.AlterByImportTablespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 2296
                self.match(mysqlParser.IMPORT)
                self.state = 2297
                self.match(mysqlParser.TABLESPACE)
                pass

            elif la_ == 26:
                localctx = mysqlParser.AlterByForceContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 2298
                self.match(mysqlParser.FORCE)
                pass

            elif la_ == 27:
                localctx = mysqlParser.AlterByValidateContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 2299
                localctx.validationFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.WITH or _la==mysqlParser.WITHOUT):
                    localctx.validationFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2300
                self.match(mysqlParser.VALIDATION)
                pass

            elif la_ == 28:
                localctx = mysqlParser.AlterByAddPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 2301
                self.match(mysqlParser.ADD)
                self.state = 2302
                self.match(mysqlParser.PARTITION)
                self.state = 2303
                self.partitionDefinition()
                pass

            elif la_ == 29:
                localctx = mysqlParser.AlterByDropPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 2304
                self.match(mysqlParser.DROP)
                self.state = 2305
                self.match(mysqlParser.PARTITION)
                self.state = 2306
                self.uidList()
                pass

            elif la_ == 30:
                localctx = mysqlParser.AlterByDiscardPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 2307
                self.match(mysqlParser.DISCARD)
                self.state = 2308
                self.match(mysqlParser.PARTITION)
                self.state = 2311
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [mysqlParser.LEFT, mysqlParser.RIGHT, mysqlParser.DATE, mysqlParser.TIME, mysqlParser.TIMESTAMP, mysqlParser.DATETIME, mysqlParser.YEAR, mysqlParser.TEXT, mysqlParser.ENUM, mysqlParser.COUNT, mysqlParser.POSITION, mysqlParser.ACCOUNT, mysqlParser.ACTION, mysqlParser.AFTER, mysqlParser.AGGREGATE, mysqlParser.ALGORITHM, mysqlParser.ANY, mysqlParser.AT, mysqlParser.AUTHORS, mysqlParser.AUTOCOMMIT, mysqlParser.AUTOEXTEND_SIZE, mysqlParser.AUTO_INCREMENT, mysqlParser.AVG_ROW_LENGTH, mysqlParser.BEGIN, mysqlParser.BINLOG, mysqlParser.BIT, mysqlParser.BLOCK, mysqlParser.BTREE, mysqlParser.CASCADED, mysqlParser.CHAIN, mysqlParser.CHANNEL, mysqlParser.CHECKSUM, mysqlParser.CIPHER, mysqlParser.CLIENT, mysqlParser.COALESCE, mysqlParser.CODE, mysqlParser.COLUMNS, mysqlParser.COLUMN_FORMAT, mysqlParser.COMMENT, mysqlParser.COMMIT, mysqlParser.COMPACT, mysqlParser.COMPLETION, mysqlParser.COMPRESSED, mysqlParser.COMPRESSION, mysqlParser.CONCURRENT, mysqlParser.CONNECTION, mysqlParser.CONSISTENT, mysqlParser.CONTAINS, mysqlParser.CONTEXT, mysqlParser.CONTRIBUTORS, mysqlParser.COPY, mysqlParser.CPU, mysqlParser.DATA, mysqlParser.DATAFILE, mysqlParser.DEALLOCATE, mysqlParser.DEFAULT_AUTH, mysqlParser.DEFINER, mysqlParser.DELAY_KEY_WRITE, mysqlParser.DIRECTORY, mysqlParser.DISABLE, mysqlParser.DISCARD, mysqlParser.DISK, mysqlParser.DO, mysqlParser.DUMPFILE, mysqlParser.DUPLICATE, mysqlParser.DYNAMIC, mysqlParser.ENABLE, mysqlParser.ENCRYPTION, mysqlParser.ENDS, mysqlParser.ENGINE, mysqlParser.ENGINES, mysqlParser.ERROR, mysqlParser.ERRORS, mysqlParser.ESCAPE, mysqlParser.EVEN, mysqlParser.EVENT, mysqlParser.EVENTS, mysqlParser.EVERY, mysqlParser.EXCHANGE, mysqlParser.EXCLUSIVE, mysqlParser.EXPIRE, mysqlParser.EXTENT_SIZE, mysqlParser.FAULTS, mysqlParser.FIELDS, mysqlParser.FILE_BLOCK_SIZE, mysqlParser.FILTER, mysqlParser.FIRST, mysqlParser.FIXED, mysqlParser.FOLLOWS, mysqlParser.FULL, mysqlParser.FUNCTION, mysqlParser.GLOBAL, mysqlParser.GRANTS, mysqlParser.GROUP_REPLICATION, mysqlParser.HASH, mysqlParser.HOST, mysqlParser.IDENTIFIED, mysqlParser.IGNORE_SERVER_IDS, mysqlParser.IMPORT, mysqlParser.INDEXES, mysqlParser.INITIAL_SIZE, mysqlParser.INPLACE, mysqlParser.INSERT_METHOD, mysqlParser.INSTANCE, mysqlParser.INVOKER, mysqlParser.IO, mysqlParser.IO_THREAD, mysqlParser.IPC, mysqlParser.ISOLATION, mysqlParser.ISSUER, mysqlParser.KEY_BLOCK_SIZE, mysqlParser.LANGUAGE, mysqlParser.LAST, mysqlParser.LEAVES, mysqlParser.LESS, mysqlParser.LEVEL, mysqlParser.LIST, mysqlParser.LOCAL, mysqlParser.LOGFILE, mysqlParser.LOGS, mysqlParser.MASTER, mysqlParser.MASTER_AUTO_POSITION, mysqlParser.MASTER_CONNECT_RETRY, mysqlParser.MASTER_DELAY, mysqlParser.MASTER_HEARTBEAT_PERIOD, mysqlParser.MASTER_HOST, mysqlParser.MASTER_LOG_FILE, mysqlParser.MASTER_LOG_POS, mysqlParser.MASTER_PASSWORD, mysqlParser.MASTER_PORT, mysqlParser.MASTER_RETRY_COUNT, mysqlParser.MASTER_SSL, mysqlParser.MASTER_SSL_CA, mysqlParser.MASTER_SSL_CAPATH, mysqlParser.MASTER_SSL_CERT, mysqlParser.MASTER_SSL_CIPHER, mysqlParser.MASTER_SSL_CRL, mysqlParser.MASTER_SSL_CRLPATH, mysqlParser.MASTER_SSL_KEY, mysqlParser.MASTER_TLS_VERSION, mysqlParser.MASTER_USER, mysqlParser.MAX_CONNECTIONS_PER_HOUR, mysqlParser.MAX_QUERIES_PER_HOUR, mysqlParser.MAX_ROWS, mysqlParser.MAX_SIZE, mysqlParser.MAX_UPDATES_PER_HOUR, mysqlParser.MAX_USER_CONNECTIONS, mysqlParser.MERGE, mysqlParser.MID, mysqlParser.MIGRATE, mysqlParser.MIN_ROWS, mysqlParser.MODIFY, mysqlParser.MUTEX, mysqlParser.MYSQL, mysqlParser.NAME, mysqlParser.NAMES, mysqlParser.NCHAR, mysqlParser.NEVER, mysqlParser.NO, mysqlParser.NODEGROUP, mysqlParser.NONE, mysqlParser.OFFLINE, mysqlParser.OFFSET, mysqlParser.OJ, mysqlParser.OLD_PASSWORD, mysqlParser.ONE, mysqlParser.ONLINE, mysqlParser.ONLY, mysqlParser.OPTIMIZER_COSTS, mysqlParser.OPTIONS, mysqlParser.OWNER, mysqlParser.PACK_KEYS, mysqlParser.PAGE, mysqlParser.PARSER, mysqlParser.PARTIAL, mysqlParser.PARTITIONING, mysqlParser.PARTITIONS, mysqlParser.PASSWORD, mysqlParser.PHASE, mysqlParser.PLUGIN_DIR, mysqlParser.PLUGINS, mysqlParser.PORT, mysqlParser.PRECEDES, mysqlParser.PREPARE, mysqlParser.PRESERVE, mysqlParser.PREV, mysqlParser.PROCESSLIST, mysqlParser.PROFILE, mysqlParser.PROFILES, mysqlParser.PROXY, mysqlParser.QUERY, mysqlParser.QUICK, mysqlParser.REBUILD, mysqlParser.RECOVER, mysqlParser.REDO_BUFFER_SIZE, mysqlParser.REDUNDANT, mysqlParser.RELAY_LOG_FILE, mysqlParser.RELAY_LOG_POS, mysqlParser.RELAYLOG, mysqlParser.REMOVE, mysqlParser.REORGANIZE, mysqlParser.REPAIR, mysqlParser.REPLICATE_DO_DB, mysqlParser.REPLICATE_DO_TABLE, mysqlParser.REPLICATE_IGNORE_DB, mysqlParser.REPLICATE_IGNORE_TABLE, mysqlParser.REPLICATE_REWRITE_DB, mysqlParser.REPLICATE_WILD_DO_TABLE, mysqlParser.REPLICATE_WILD_IGNORE_TABLE, mysqlParser.REPLICATION, mysqlParser.RESUME, mysqlParser.RETURNS, mysqlParser.ROLLBACK, mysqlParser.ROLLUP, mysqlParser.ROTATE, mysqlParser.ROW, mysqlParser.ROWS, mysqlParser.ROW_FORMAT, mysqlParser.SAVEPOINT, mysqlParser.SCHEDULE, mysqlParser.SECURITY, mysqlParser.SERVER, mysqlParser.SESSION, mysqlParser.SHARE, mysqlParser.SHARED, mysqlParser.SIGNED, mysqlParser.SIMPLE, mysqlParser.SLAVE, mysqlParser.SNAPSHOT, mysqlParser.SOCKET, mysqlParser.SOME, mysqlParser.SOUNDS, mysqlParser.SOURCE, mysqlParser.SQL_AFTER_GTIDS, mysqlParser.SQL_AFTER_MTS_GAPS, mysqlParser.SQL_BEFORE_GTIDS, mysqlParser.SQL_BUFFER_RESULT, mysqlParser.SQL_CACHE, mysqlParser.SQL_NO_CACHE, mysqlParser.SQL_THREAD, mysqlParser.START, mysqlParser.STARTS, mysqlParser.STATS_AUTO_RECALC, mysqlParser.STATS_PERSISTENT, mysqlParser.STATS_SAMPLE_PAGES, mysqlParser.STATUS, mysqlParser.STOP, mysqlParser.STORAGE, mysqlParser.STRING, mysqlParser.SUBJECT, mysqlParser.SUBPARTITION, mysqlParser.SUBPARTITIONS, mysqlParser.SUSPEND, mysqlParser.SWAPS, mysqlParser.SWITCHES, mysqlParser.TABLESPACE, mysqlParser.TEMPORARY, mysqlParser.TEMPTABLE, mysqlParser.THAN, mysqlParser.TRANSACTION, mysqlParser.TRUNCATE, mysqlParser.UNDEFINED, mysqlParser.UNDOFILE, mysqlParser.UNDO_BUFFER_SIZE, mysqlParser.UNKNOWN, mysqlParser.UPGRADE, mysqlParser.USER, mysqlParser.VALIDATION, mysqlParser.VALUE, mysqlParser.VARIABLES, mysqlParser.VIEW, mysqlParser.WAIT, mysqlParser.WARNINGS, mysqlParser.WITHOUT, mysqlParser.WORK, mysqlParser.WRAPPER, mysqlParser.X509, mysqlParser.XA, mysqlParser.XML, mysqlParser.QUARTER, mysqlParser.MONTH, mysqlParser.DAY, mysqlParser.HOUR, mysqlParser.MINUTE, mysqlParser.WEEK, mysqlParser.SECOND, mysqlParser.MICROSECOND, mysqlParser.TABLES, mysqlParser.ROUTINE, mysqlParser.EXECUTE, mysqlParser.FILE, mysqlParser.PROCESS, mysqlParser.RELOAD, mysqlParser.SHUTDOWN, mysqlParser.SUPER, mysqlParser.PRIVILEGES, mysqlParser.ARMSCII8, mysqlParser.ASCII, mysqlParser.BIG5, mysqlParser.CP1250, mysqlParser.CP1251, mysqlParser.CP1256, mysqlParser.CP1257, mysqlParser.CP850, mysqlParser.CP852, mysqlParser.CP866, mysqlParser.CP932, mysqlParser.DEC8, mysqlParser.EUCJPMS, mysqlParser.EUCKR, mysqlParser.GB2312, mysqlParser.GBK, mysqlParser.GEOSTD8, mysqlParser.GREEK, mysqlParser.HEBREW, mysqlParser.HP8, mysqlParser.KEYBCS2, mysqlParser.KOI8R, mysqlParser.KOI8U, mysqlParser.LATIN1, mysqlParser.LATIN2, mysqlParser.LATIN5, mysqlParser.LATIN7, mysqlParser.MACCE, mysqlParser.MACROMAN, mysqlParser.SJIS, mysqlParser.SWE7, mysqlParser.TIS620, mysqlParser.UCS2, mysqlParser.UJIS, mysqlParser.UTF16, mysqlParser.UTF16LE, mysqlParser.UTF32, mysqlParser.UTF8, mysqlParser.UTF8MB3, mysqlParser.UTF8MB4, mysqlParser.ARCHIVE, mysqlParser.BLACKHOLE, mysqlParser.CSV, mysqlParser.FEDERATED, mysqlParser.INNODB, mysqlParser.MEMORY, mysqlParser.MRG_MYISAM, mysqlParser.MYISAM, mysqlParser.NDB, mysqlParser.NDBCLUSTER, mysqlParser.PERFOMANCE_SCHEMA, mysqlParser.REPEATABLE, mysqlParser.COMMITTED, mysqlParser.UNCOMMITTED, mysqlParser.SERIALIZABLE, mysqlParser.GEOMETRYCOLLECTION, mysqlParser.LINESTRING, mysqlParser.MULTILINESTRING, mysqlParser.MULTIPOINT, mysqlParser.MULTIPOLYGON, mysqlParser.POINT, mysqlParser.POLYGON, mysqlParser.ABS, mysqlParser.ACOS, mysqlParser.ADDDATE, mysqlParser.ADDTIME, mysqlParser.AES_DECRYPT, mysqlParser.AES_ENCRYPT, mysqlParser.AREA, mysqlParser.ASBINARY, mysqlParser.ASIN, mysqlParser.ASTEXT, mysqlParser.ASWKB, mysqlParser.ASWKT, mysqlParser.ASYMMETRIC_DECRYPT, mysqlParser.ASYMMETRIC_DERIVE, mysqlParser.ASYMMETRIC_ENCRYPT, mysqlParser.ASYMMETRIC_SIGN, mysqlParser.ASYMMETRIC_VERIFY, mysqlParser.ATAN, mysqlParser.ATAN2, mysqlParser.BENCHMARK, mysqlParser.BIN, mysqlParser.BIT_COUNT, mysqlParser.BIT_LENGTH, mysqlParser.BUFFER, mysqlParser.CEIL, mysqlParser.CEILING, mysqlParser.CENTROID, mysqlParser.CHARACTER_LENGTH, mysqlParser.CHARSET, mysqlParser.CHAR_LENGTH, mysqlParser.COERCIBILITY, mysqlParser.COLLATION, mysqlParser.COMPRESS, mysqlParser.CONCAT, mysqlParser.CONCAT_WS, mysqlParser.CONNECTION_ID, mysqlParser.CONV, mysqlParser.CONVERT_TZ, mysqlParser.COS, mysqlParser.COT, mysqlParser.CRC32, mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY, mysqlParser.CREATE_ASYMMETRIC_PUB_KEY, mysqlParser.CREATE_DH_PARAMETERS, mysqlParser.CREATE_DIGEST, mysqlParser.CROSSES, mysqlParser.DATEDIFF, mysqlParser.DATE_FORMAT, mysqlParser.DAYNAME, mysqlParser.DAYOFMONTH, mysqlParser.DAYOFWEEK, mysqlParser.DAYOFYEAR, mysqlParser.DECODE, mysqlParser.DEGREES, mysqlParser.DES_DECRYPT, mysqlParser.DES_ENCRYPT, mysqlParser.DIMENSION, mysqlParser.DISJOINT, mysqlParser.ELT, mysqlParser.ENCODE, mysqlParser.ENCRYPT, mysqlParser.ENDPOINT, mysqlParser.ENVELOPE, mysqlParser.EQUALS, mysqlParser.EXP, mysqlParser.EXPORT_SET, mysqlParser.EXTERIORRING, mysqlParser.EXTRACTVALUE, mysqlParser.FIELD, mysqlParser.FIND_IN_SET, mysqlParser.FLOOR, mysqlParser.FORMAT, mysqlParser.FOUND_ROWS, mysqlParser.FROM_BASE64, mysqlParser.FROM_DAYS, mysqlParser.FROM_UNIXTIME, mysqlParser.GEOMCOLLFROMTEXT, mysqlParser.GEOMCOLLFROMWKB, mysqlParser.GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.GEOMETRYCOLLECTIONFROMWKB, mysqlParser.GEOMETRYFROMTEXT, mysqlParser.GEOMETRYFROMWKB, mysqlParser.GEOMETRYN, mysqlParser.GEOMETRYTYPE, mysqlParser.GEOMFROMTEXT, mysqlParser.GEOMFROMWKB, mysqlParser.GET_FORMAT, mysqlParser.GET_LOCK, mysqlParser.GLENGTH, mysqlParser.GREATEST, mysqlParser.GTID_SUBSET, mysqlParser.GTID_SUBTRACT, mysqlParser.HEX, mysqlParser.IFNULL, mysqlParser.INET6_ATON, mysqlParser.INET6_NTOA, mysqlParser.INET_ATON, mysqlParser.INET_NTOA, mysqlParser.INSTR, mysqlParser.INTERIORRINGN, mysqlParser.INTERSECTS, mysqlParser.ISCLOSED, mysqlParser.ISEMPTY, mysqlParser.ISNULL, mysqlParser.ISSIMPLE, mysqlParser.IS_FREE_LOCK, mysqlParser.IS_IPV4, mysqlParser.IS_IPV4_COMPAT, mysqlParser.IS_IPV4_MAPPED, mysqlParser.IS_IPV6, mysqlParser.IS_USED_LOCK, mysqlParser.LAST_INSERT_ID, mysqlParser.LCASE, mysqlParser.LEAST, mysqlParser.LENGTH, mysqlParser.LINEFROMTEXT, mysqlParser.LINEFROMWKB, mysqlParser.LINESTRINGFROMTEXT, mysqlParser.LINESTRINGFROMWKB, mysqlParser.LN, mysqlParser.LOAD_FILE, mysqlParser.LOCATE, mysqlParser.LOG, mysqlParser.LOG10, mysqlParser.LOG2, mysqlParser.LOWER, mysqlParser.LPAD, mysqlParser.LTRIM, mysqlParser.MAKEDATE, mysqlParser.MAKETIME, mysqlParser.MAKE_SET, mysqlParser.MASTER_POS_WAIT, mysqlParser.MBRCONTAINS, mysqlParser.MBRDISJOINT, mysqlParser.MBREQUAL, mysqlParser.MBRINTERSECTS, mysqlParser.MBROVERLAPS, mysqlParser.MBRTOUCHES, mysqlParser.MBRWITHIN, mysqlParser.MD5, mysqlParser.MLINEFROMTEXT, mysqlParser.MLINEFROMWKB, mysqlParser.MONTHNAME, mysqlParser.MPOINTFROMTEXT, mysqlParser.MPOINTFROMWKB, mysqlParser.MPOLYFROMTEXT, mysqlParser.MPOLYFROMWKB, mysqlParser.MULTILINESTRINGFROMTEXT, mysqlParser.MULTILINESTRINGFROMWKB, mysqlParser.MULTIPOINTFROMTEXT, mysqlParser.MULTIPOINTFROMWKB, mysqlParser.MULTIPOLYGONFROMTEXT, mysqlParser.MULTIPOLYGONFROMWKB, mysqlParser.NAME_CONST, mysqlParser.NULLIF, mysqlParser.NUMGEOMETRIES, mysqlParser.NUMINTERIORRINGS, mysqlParser.NUMPOINTS, mysqlParser.OCT, mysqlParser.OCTET_LENGTH, mysqlParser.ORD, mysqlParser.OVERLAPS, mysqlParser.PERIOD_ADD, mysqlParser.PERIOD_DIFF, mysqlParser.PI, mysqlParser.POINTFROMTEXT, mysqlParser.POINTFROMWKB, mysqlParser.POINTN, mysqlParser.POLYFROMTEXT, mysqlParser.POLYFROMWKB, mysqlParser.POLYGONFROMTEXT, mysqlParser.POLYGONFROMWKB, mysqlParser.POW, mysqlParser.POWER, mysqlParser.QUOTE, mysqlParser.RADIANS, mysqlParser.RAND, mysqlParser.RANDOM_BYTES, mysqlParser.RELEASE_LOCK, mysqlParser.REVERSE, mysqlParser.ROUND, mysqlParser.ROW_COUNT, mysqlParser.RPAD, mysqlParser.RTRIM, mysqlParser.SEC_TO_TIME, mysqlParser.SESSION_USER, mysqlParser.SHA, mysqlParser.SHA1, mysqlParser.SHA2, mysqlParser.SIGN, mysqlParser.SIN, mysqlParser.SLEEP, mysqlParser.SOUNDEX, mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, mysqlParser.SQRT, mysqlParser.SRID, mysqlParser.STARTPOINT, mysqlParser.STRCMP, mysqlParser.STR_TO_DATE, mysqlParser.ST_AREA, mysqlParser.ST_ASBINARY, mysqlParser.ST_ASTEXT, mysqlParser.ST_ASWKB, mysqlParser.ST_ASWKT, mysqlParser.ST_BUFFER, mysqlParser.ST_CENTROID, mysqlParser.ST_CONTAINS, mysqlParser.ST_CROSSES, mysqlParser.ST_DIFFERENCE, mysqlParser.ST_DIMENSION, mysqlParser.ST_DISJOINT, mysqlParser.ST_DISTANCE, mysqlParser.ST_ENDPOINT, mysqlParser.ST_ENVELOPE, mysqlParser.ST_EQUALS, mysqlParser.ST_EXTERIORRING, mysqlParser.ST_GEOMCOLLFROMTEXT, mysqlParser.ST_GEOMCOLLFROMTXT, mysqlParser.ST_GEOMCOLLFROMWKB, mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, mysqlParser.ST_GEOMETRYFROMTEXT, mysqlParser.ST_GEOMETRYFROMWKB, mysqlParser.ST_GEOMETRYN, mysqlParser.ST_GEOMETRYTYPE, mysqlParser.ST_GEOMFROMTEXT, mysqlParser.ST_GEOMFROMWKB, mysqlParser.ST_INTERIORRINGN, mysqlParser.ST_INTERSECTION, mysqlParser.ST_INTERSECTS, mysqlParser.ST_ISCLOSED, mysqlParser.ST_ISEMPTY, mysqlParser.ST_ISSIMPLE, mysqlParser.ST_LINEFROMTEXT, mysqlParser.ST_LINEFROMWKB, mysqlParser.ST_LINESTRINGFROMTEXT, mysqlParser.ST_LINESTRINGFROMWKB, mysqlParser.ST_NUMGEOMETRIES, mysqlParser.ST_NUMINTERIORRING, mysqlParser.ST_NUMINTERIORRINGS, mysqlParser.ST_NUMPOINTS, mysqlParser.ST_OVERLAPS, mysqlParser.ST_POINTFROMTEXT, mysqlParser.ST_POINTFROMWKB, mysqlParser.ST_POINTN, mysqlParser.ST_POLYFROMTEXT, mysqlParser.ST_POLYFROMWKB, mysqlParser.ST_POLYGONFROMTEXT, mysqlParser.ST_POLYGONFROMWKB, mysqlParser.ST_SRID, mysqlParser.ST_STARTPOINT, mysqlParser.ST_SYMDIFFERENCE, mysqlParser.ST_TOUCHES, mysqlParser.ST_UNION, mysqlParser.ST_WITHIN, mysqlParser.ST_X, mysqlParser.ST_Y, mysqlParser.SUBDATE, mysqlParser.SUBSTRING_INDEX, mysqlParser.SUBTIME, mysqlParser.SYSTEM_USER, mysqlParser.TAN, mysqlParser.TIMEDIFF, mysqlParser.TIMESTAMPADD, mysqlParser.TIMESTAMPDIFF, mysqlParser.TIME_FORMAT, mysqlParser.TIME_TO_SEC, mysqlParser.TOUCHES, mysqlParser.TO_BASE64, mysqlParser.TO_DAYS, mysqlParser.TO_SECONDS, mysqlParser.UCASE, mysqlParser.UNCOMPRESS, mysqlParser.UNCOMPRESSED_LENGTH, mysqlParser.UNHEX, mysqlParser.UNIX_TIMESTAMP, mysqlParser.UPDATEXML, mysqlParser.UPPER, mysqlParser.UUID, mysqlParser.UUID_SHORT, mysqlParser.VALIDATE_PASSWORD_STRENGTH, mysqlParser.VERSION, mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, mysqlParser.WEEKDAY, mysqlParser.WEEKOFYEAR, mysqlParser.WEIGHT_STRING, mysqlParser.WITHIN, mysqlParser.YEARWEEK, mysqlParser.Y_FUNCTION, mysqlParser.X_FUNCTION, mysqlParser.CHARSET_REVERSE_QOUTE_STRING, mysqlParser.ID, mysqlParser.REVERSE_QUOTE_ID]:
                    self.state = 2309
                    self.uidList()
                    pass
                elif token in [mysqlParser.ALL]:
                    self.state = 2310
                    self.match(mysqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2313
                self.match(mysqlParser.TABLESPACE)
                pass

            elif la_ == 31:
                localctx = mysqlParser.AlterByImportPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 2314
                self.match(mysqlParser.IMPORT)
                self.state = 2315
                self.match(mysqlParser.PARTITION)
                self.state = 2318
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [mysqlParser.LEFT, mysqlParser.RIGHT, mysqlParser.DATE, mysqlParser.TIME, mysqlParser.TIMESTAMP, mysqlParser.DATETIME, mysqlParser.YEAR, mysqlParser.TEXT, mysqlParser.ENUM, mysqlParser.COUNT, mysqlParser.POSITION, mysqlParser.ACCOUNT, mysqlParser.ACTION, mysqlParser.AFTER, mysqlParser.AGGREGATE, mysqlParser.ALGORITHM, mysqlParser.ANY, mysqlParser.AT, mysqlParser.AUTHORS, mysqlParser.AUTOCOMMIT, mysqlParser.AUTOEXTEND_SIZE, mysqlParser.AUTO_INCREMENT, mysqlParser.AVG_ROW_LENGTH, mysqlParser.BEGIN, mysqlParser.BINLOG, mysqlParser.BIT, mysqlParser.BLOCK, mysqlParser.BTREE, mysqlParser.CASCADED, mysqlParser.CHAIN, mysqlParser.CHANNEL, mysqlParser.CHECKSUM, mysqlParser.CIPHER, mysqlParser.CLIENT, mysqlParser.COALESCE, mysqlParser.CODE, mysqlParser.COLUMNS, mysqlParser.COLUMN_FORMAT, mysqlParser.COMMENT, mysqlParser.COMMIT, mysqlParser.COMPACT, mysqlParser.COMPLETION, mysqlParser.COMPRESSED, mysqlParser.COMPRESSION, mysqlParser.CONCURRENT, mysqlParser.CONNECTION, mysqlParser.CONSISTENT, mysqlParser.CONTAINS, mysqlParser.CONTEXT, mysqlParser.CONTRIBUTORS, mysqlParser.COPY, mysqlParser.CPU, mysqlParser.DATA, mysqlParser.DATAFILE, mysqlParser.DEALLOCATE, mysqlParser.DEFAULT_AUTH, mysqlParser.DEFINER, mysqlParser.DELAY_KEY_WRITE, mysqlParser.DIRECTORY, mysqlParser.DISABLE, mysqlParser.DISCARD, mysqlParser.DISK, mysqlParser.DO, mysqlParser.DUMPFILE, mysqlParser.DUPLICATE, mysqlParser.DYNAMIC, mysqlParser.ENABLE, mysqlParser.ENCRYPTION, mysqlParser.ENDS, mysqlParser.ENGINE, mysqlParser.ENGINES, mysqlParser.ERROR, mysqlParser.ERRORS, mysqlParser.ESCAPE, mysqlParser.EVEN, mysqlParser.EVENT, mysqlParser.EVENTS, mysqlParser.EVERY, mysqlParser.EXCHANGE, mysqlParser.EXCLUSIVE, mysqlParser.EXPIRE, mysqlParser.EXTENT_SIZE, mysqlParser.FAULTS, mysqlParser.FIELDS, mysqlParser.FILE_BLOCK_SIZE, mysqlParser.FILTER, mysqlParser.FIRST, mysqlParser.FIXED, mysqlParser.FOLLOWS, mysqlParser.FULL, mysqlParser.FUNCTION, mysqlParser.GLOBAL, mysqlParser.GRANTS, mysqlParser.GROUP_REPLICATION, mysqlParser.HASH, mysqlParser.HOST, mysqlParser.IDENTIFIED, mysqlParser.IGNORE_SERVER_IDS, mysqlParser.IMPORT, mysqlParser.INDEXES, mysqlParser.INITIAL_SIZE, mysqlParser.INPLACE, mysqlParser.INSERT_METHOD, mysqlParser.INSTANCE, mysqlParser.INVOKER, mysqlParser.IO, mysqlParser.IO_THREAD, mysqlParser.IPC, mysqlParser.ISOLATION, mysqlParser.ISSUER, mysqlParser.KEY_BLOCK_SIZE, mysqlParser.LANGUAGE, mysqlParser.LAST, mysqlParser.LEAVES, mysqlParser.LESS, mysqlParser.LEVEL, mysqlParser.LIST, mysqlParser.LOCAL, mysqlParser.LOGFILE, mysqlParser.LOGS, mysqlParser.MASTER, mysqlParser.MASTER_AUTO_POSITION, mysqlParser.MASTER_CONNECT_RETRY, mysqlParser.MASTER_DELAY, mysqlParser.MASTER_HEARTBEAT_PERIOD, mysqlParser.MASTER_HOST, mysqlParser.MASTER_LOG_FILE, mysqlParser.MASTER_LOG_POS, mysqlParser.MASTER_PASSWORD, mysqlParser.MASTER_PORT, mysqlParser.MASTER_RETRY_COUNT, mysqlParser.MASTER_SSL, mysqlParser.MASTER_SSL_CA, mysqlParser.MASTER_SSL_CAPATH, mysqlParser.MASTER_SSL_CERT, mysqlParser.MASTER_SSL_CIPHER, mysqlParser.MASTER_SSL_CRL, mysqlParser.MASTER_SSL_CRLPATH, mysqlParser.MASTER_SSL_KEY, mysqlParser.MASTER_TLS_VERSION, mysqlParser.MASTER_USER, mysqlParser.MAX_CONNECTIONS_PER_HOUR, mysqlParser.MAX_QUERIES_PER_HOUR, mysqlParser.MAX_ROWS, mysqlParser.MAX_SIZE, mysqlParser.MAX_UPDATES_PER_HOUR, mysqlParser.MAX_USER_CONNECTIONS, mysqlParser.MERGE, mysqlParser.MID, mysqlParser.MIGRATE, mysqlParser.MIN_ROWS, mysqlParser.MODIFY, mysqlParser.MUTEX, mysqlParser.MYSQL, mysqlParser.NAME, mysqlParser.NAMES, mysqlParser.NCHAR, mysqlParser.NEVER, mysqlParser.NO, mysqlParser.NODEGROUP, mysqlParser.NONE, mysqlParser.OFFLINE, mysqlParser.OFFSET, mysqlParser.OJ, mysqlParser.OLD_PASSWORD, mysqlParser.ONE, mysqlParser.ONLINE, mysqlParser.ONLY, mysqlParser.OPTIMIZER_COSTS, mysqlParser.OPTIONS, mysqlParser.OWNER, mysqlParser.PACK_KEYS, mysqlParser.PAGE, mysqlParser.PARSER, mysqlParser.PARTIAL, mysqlParser.PARTITIONING, mysqlParser.PARTITIONS, mysqlParser.PASSWORD, mysqlParser.PHASE, mysqlParser.PLUGIN_DIR, mysqlParser.PLUGINS, mysqlParser.PORT, mysqlParser.PRECEDES, mysqlParser.PREPARE, mysqlParser.PRESERVE, mysqlParser.PREV, mysqlParser.PROCESSLIST, mysqlParser.PROFILE, mysqlParser.PROFILES, mysqlParser.PROXY, mysqlParser.QUERY, mysqlParser.QUICK, mysqlParser.REBUILD, mysqlParser.RECOVER, mysqlParser.REDO_BUFFER_SIZE, mysqlParser.REDUNDANT, mysqlParser.RELAY_LOG_FILE, mysqlParser.RELAY_LOG_POS, mysqlParser.RELAYLOG, mysqlParser.REMOVE, mysqlParser.REORGANIZE, mysqlParser.REPAIR, mysqlParser.REPLICATE_DO_DB, mysqlParser.REPLICATE_DO_TABLE, mysqlParser.REPLICATE_IGNORE_DB, mysqlParser.REPLICATE_IGNORE_TABLE, mysqlParser.REPLICATE_REWRITE_DB, mysqlParser.REPLICATE_WILD_DO_TABLE, mysqlParser.REPLICATE_WILD_IGNORE_TABLE, mysqlParser.REPLICATION, mysqlParser.RESUME, mysqlParser.RETURNS, mysqlParser.ROLLBACK, mysqlParser.ROLLUP, mysqlParser.ROTATE, mysqlParser.ROW, mysqlParser.ROWS, mysqlParser.ROW_FORMAT, mysqlParser.SAVEPOINT, mysqlParser.SCHEDULE, mysqlParser.SECURITY, mysqlParser.SERVER, mysqlParser.SESSION, mysqlParser.SHARE, mysqlParser.SHARED, mysqlParser.SIGNED, mysqlParser.SIMPLE, mysqlParser.SLAVE, mysqlParser.SNAPSHOT, mysqlParser.SOCKET, mysqlParser.SOME, mysqlParser.SOUNDS, mysqlParser.SOURCE, mysqlParser.SQL_AFTER_GTIDS, mysqlParser.SQL_AFTER_MTS_GAPS, mysqlParser.SQL_BEFORE_GTIDS, mysqlParser.SQL_BUFFER_RESULT, mysqlParser.SQL_CACHE, mysqlParser.SQL_NO_CACHE, mysqlParser.SQL_THREAD, mysqlParser.START, mysqlParser.STARTS, mysqlParser.STATS_AUTO_RECALC, mysqlParser.STATS_PERSISTENT, mysqlParser.STATS_SAMPLE_PAGES, mysqlParser.STATUS, mysqlParser.STOP, mysqlParser.STORAGE, mysqlParser.STRING, mysqlParser.SUBJECT, mysqlParser.SUBPARTITION, mysqlParser.SUBPARTITIONS, mysqlParser.SUSPEND, mysqlParser.SWAPS, mysqlParser.SWITCHES, mysqlParser.TABLESPACE, mysqlParser.TEMPORARY, mysqlParser.TEMPTABLE, mysqlParser.THAN, mysqlParser.TRANSACTION, mysqlParser.TRUNCATE, mysqlParser.UNDEFINED, mysqlParser.UNDOFILE, mysqlParser.UNDO_BUFFER_SIZE, mysqlParser.UNKNOWN, mysqlParser.UPGRADE, mysqlParser.USER, mysqlParser.VALIDATION, mysqlParser.VALUE, mysqlParser.VARIABLES, mysqlParser.VIEW, mysqlParser.WAIT, mysqlParser.WARNINGS, mysqlParser.WITHOUT, mysqlParser.WORK, mysqlParser.WRAPPER, mysqlParser.X509, mysqlParser.XA, mysqlParser.XML, mysqlParser.QUARTER, mysqlParser.MONTH, mysqlParser.DAY, mysqlParser.HOUR, mysqlParser.MINUTE, mysqlParser.WEEK, mysqlParser.SECOND, mysqlParser.MICROSECOND, mysqlParser.TABLES, mysqlParser.ROUTINE, mysqlParser.EXECUTE, mysqlParser.FILE, mysqlParser.PROCESS, mysqlParser.RELOAD, mysqlParser.SHUTDOWN, mysqlParser.SUPER, mysqlParser.PRIVILEGES, mysqlParser.ARMSCII8, mysqlParser.ASCII, mysqlParser.BIG5, mysqlParser.CP1250, mysqlParser.CP1251, mysqlParser.CP1256, mysqlParser.CP1257, mysqlParser.CP850, mysqlParser.CP852, mysqlParser.CP866, mysqlParser.CP932, mysqlParser.DEC8, mysqlParser.EUCJPMS, mysqlParser.EUCKR, mysqlParser.GB2312, mysqlParser.GBK, mysqlParser.GEOSTD8, mysqlParser.GREEK, mysqlParser.HEBREW, mysqlParser.HP8, mysqlParser.KEYBCS2, mysqlParser.KOI8R, mysqlParser.KOI8U, mysqlParser.LATIN1, mysqlParser.LATIN2, mysqlParser.LATIN5, mysqlParser.LATIN7, mysqlParser.MACCE, mysqlParser.MACROMAN, mysqlParser.SJIS, mysqlParser.SWE7, mysqlParser.TIS620, mysqlParser.UCS2, mysqlParser.UJIS, mysqlParser.UTF16, mysqlParser.UTF16LE, mysqlParser.UTF32, mysqlParser.UTF8, mysqlParser.UTF8MB3, mysqlParser.UTF8MB4, mysqlParser.ARCHIVE, mysqlParser.BLACKHOLE, mysqlParser.CSV, mysqlParser.FEDERATED, mysqlParser.INNODB, mysqlParser.MEMORY, mysqlParser.MRG_MYISAM, mysqlParser.MYISAM, mysqlParser.NDB, mysqlParser.NDBCLUSTER, mysqlParser.PERFOMANCE_SCHEMA, mysqlParser.REPEATABLE, mysqlParser.COMMITTED, mysqlParser.UNCOMMITTED, mysqlParser.SERIALIZABLE, mysqlParser.GEOMETRYCOLLECTION, mysqlParser.LINESTRING, mysqlParser.MULTILINESTRING, mysqlParser.MULTIPOINT, mysqlParser.MULTIPOLYGON, mysqlParser.POINT, mysqlParser.POLYGON, mysqlParser.ABS, mysqlParser.ACOS, mysqlParser.ADDDATE, mysqlParser.ADDTIME, mysqlParser.AES_DECRYPT, mysqlParser.AES_ENCRYPT, mysqlParser.AREA, mysqlParser.ASBINARY, mysqlParser.ASIN, mysqlParser.ASTEXT, mysqlParser.ASWKB, mysqlParser.ASWKT, mysqlParser.ASYMMETRIC_DECRYPT, mysqlParser.ASYMMETRIC_DERIVE, mysqlParser.ASYMMETRIC_ENCRYPT, mysqlParser.ASYMMETRIC_SIGN, mysqlParser.ASYMMETRIC_VERIFY, mysqlParser.ATAN, mysqlParser.ATAN2, mysqlParser.BENCHMARK, mysqlParser.BIN, mysqlParser.BIT_COUNT, mysqlParser.BIT_LENGTH, mysqlParser.BUFFER, mysqlParser.CEIL, mysqlParser.CEILING, mysqlParser.CENTROID, mysqlParser.CHARACTER_LENGTH, mysqlParser.CHARSET, mysqlParser.CHAR_LENGTH, mysqlParser.COERCIBILITY, mysqlParser.COLLATION, mysqlParser.COMPRESS, mysqlParser.CONCAT, mysqlParser.CONCAT_WS, mysqlParser.CONNECTION_ID, mysqlParser.CONV, mysqlParser.CONVERT_TZ, mysqlParser.COS, mysqlParser.COT, mysqlParser.CRC32, mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY, mysqlParser.CREATE_ASYMMETRIC_PUB_KEY, mysqlParser.CREATE_DH_PARAMETERS, mysqlParser.CREATE_DIGEST, mysqlParser.CROSSES, mysqlParser.DATEDIFF, mysqlParser.DATE_FORMAT, mysqlParser.DAYNAME, mysqlParser.DAYOFMONTH, mysqlParser.DAYOFWEEK, mysqlParser.DAYOFYEAR, mysqlParser.DECODE, mysqlParser.DEGREES, mysqlParser.DES_DECRYPT, mysqlParser.DES_ENCRYPT, mysqlParser.DIMENSION, mysqlParser.DISJOINT, mysqlParser.ELT, mysqlParser.ENCODE, mysqlParser.ENCRYPT, mysqlParser.ENDPOINT, mysqlParser.ENVELOPE, mysqlParser.EQUALS, mysqlParser.EXP, mysqlParser.EXPORT_SET, mysqlParser.EXTERIORRING, mysqlParser.EXTRACTVALUE, mysqlParser.FIELD, mysqlParser.FIND_IN_SET, mysqlParser.FLOOR, mysqlParser.FORMAT, mysqlParser.FOUND_ROWS, mysqlParser.FROM_BASE64, mysqlParser.FROM_DAYS, mysqlParser.FROM_UNIXTIME, mysqlParser.GEOMCOLLFROMTEXT, mysqlParser.GEOMCOLLFROMWKB, mysqlParser.GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.GEOMETRYCOLLECTIONFROMWKB, mysqlParser.GEOMETRYFROMTEXT, mysqlParser.GEOMETRYFROMWKB, mysqlParser.GEOMETRYN, mysqlParser.GEOMETRYTYPE, mysqlParser.GEOMFROMTEXT, mysqlParser.GEOMFROMWKB, mysqlParser.GET_FORMAT, mysqlParser.GET_LOCK, mysqlParser.GLENGTH, mysqlParser.GREATEST, mysqlParser.GTID_SUBSET, mysqlParser.GTID_SUBTRACT, mysqlParser.HEX, mysqlParser.IFNULL, mysqlParser.INET6_ATON, mysqlParser.INET6_NTOA, mysqlParser.INET_ATON, mysqlParser.INET_NTOA, mysqlParser.INSTR, mysqlParser.INTERIORRINGN, mysqlParser.INTERSECTS, mysqlParser.ISCLOSED, mysqlParser.ISEMPTY, mysqlParser.ISNULL, mysqlParser.ISSIMPLE, mysqlParser.IS_FREE_LOCK, mysqlParser.IS_IPV4, mysqlParser.IS_IPV4_COMPAT, mysqlParser.IS_IPV4_MAPPED, mysqlParser.IS_IPV6, mysqlParser.IS_USED_LOCK, mysqlParser.LAST_INSERT_ID, mysqlParser.LCASE, mysqlParser.LEAST, mysqlParser.LENGTH, mysqlParser.LINEFROMTEXT, mysqlParser.LINEFROMWKB, mysqlParser.LINESTRINGFROMTEXT, mysqlParser.LINESTRINGFROMWKB, mysqlParser.LN, mysqlParser.LOAD_FILE, mysqlParser.LOCATE, mysqlParser.LOG, mysqlParser.LOG10, mysqlParser.LOG2, mysqlParser.LOWER, mysqlParser.LPAD, mysqlParser.LTRIM, mysqlParser.MAKEDATE, mysqlParser.MAKETIME, mysqlParser.MAKE_SET, mysqlParser.MASTER_POS_WAIT, mysqlParser.MBRCONTAINS, mysqlParser.MBRDISJOINT, mysqlParser.MBREQUAL, mysqlParser.MBRINTERSECTS, mysqlParser.MBROVERLAPS, mysqlParser.MBRTOUCHES, mysqlParser.MBRWITHIN, mysqlParser.MD5, mysqlParser.MLINEFROMTEXT, mysqlParser.MLINEFROMWKB, mysqlParser.MONTHNAME, mysqlParser.MPOINTFROMTEXT, mysqlParser.MPOINTFROMWKB, mysqlParser.MPOLYFROMTEXT, mysqlParser.MPOLYFROMWKB, mysqlParser.MULTILINESTRINGFROMTEXT, mysqlParser.MULTILINESTRINGFROMWKB, mysqlParser.MULTIPOINTFROMTEXT, mysqlParser.MULTIPOINTFROMWKB, mysqlParser.MULTIPOLYGONFROMTEXT, mysqlParser.MULTIPOLYGONFROMWKB, mysqlParser.NAME_CONST, mysqlParser.NULLIF, mysqlParser.NUMGEOMETRIES, mysqlParser.NUMINTERIORRINGS, mysqlParser.NUMPOINTS, mysqlParser.OCT, mysqlParser.OCTET_LENGTH, mysqlParser.ORD, mysqlParser.OVERLAPS, mysqlParser.PERIOD_ADD, mysqlParser.PERIOD_DIFF, mysqlParser.PI, mysqlParser.POINTFROMTEXT, mysqlParser.POINTFROMWKB, mysqlParser.POINTN, mysqlParser.POLYFROMTEXT, mysqlParser.POLYFROMWKB, mysqlParser.POLYGONFROMTEXT, mysqlParser.POLYGONFROMWKB, mysqlParser.POW, mysqlParser.POWER, mysqlParser.QUOTE, mysqlParser.RADIANS, mysqlParser.RAND, mysqlParser.RANDOM_BYTES, mysqlParser.RELEASE_LOCK, mysqlParser.REVERSE, mysqlParser.ROUND, mysqlParser.ROW_COUNT, mysqlParser.RPAD, mysqlParser.RTRIM, mysqlParser.SEC_TO_TIME, mysqlParser.SESSION_USER, mysqlParser.SHA, mysqlParser.SHA1, mysqlParser.SHA2, mysqlParser.SIGN, mysqlParser.SIN, mysqlParser.SLEEP, mysqlParser.SOUNDEX, mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, mysqlParser.SQRT, mysqlParser.SRID, mysqlParser.STARTPOINT, mysqlParser.STRCMP, mysqlParser.STR_TO_DATE, mysqlParser.ST_AREA, mysqlParser.ST_ASBINARY, mysqlParser.ST_ASTEXT, mysqlParser.ST_ASWKB, mysqlParser.ST_ASWKT, mysqlParser.ST_BUFFER, mysqlParser.ST_CENTROID, mysqlParser.ST_CONTAINS, mysqlParser.ST_CROSSES, mysqlParser.ST_DIFFERENCE, mysqlParser.ST_DIMENSION, mysqlParser.ST_DISJOINT, mysqlParser.ST_DISTANCE, mysqlParser.ST_ENDPOINT, mysqlParser.ST_ENVELOPE, mysqlParser.ST_EQUALS, mysqlParser.ST_EXTERIORRING, mysqlParser.ST_GEOMCOLLFROMTEXT, mysqlParser.ST_GEOMCOLLFROMTXT, mysqlParser.ST_GEOMCOLLFROMWKB, mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, mysqlParser.ST_GEOMETRYFROMTEXT, mysqlParser.ST_GEOMETRYFROMWKB, mysqlParser.ST_GEOMETRYN, mysqlParser.ST_GEOMETRYTYPE, mysqlParser.ST_GEOMFROMTEXT, mysqlParser.ST_GEOMFROMWKB, mysqlParser.ST_INTERIORRINGN, mysqlParser.ST_INTERSECTION, mysqlParser.ST_INTERSECTS, mysqlParser.ST_ISCLOSED, mysqlParser.ST_ISEMPTY, mysqlParser.ST_ISSIMPLE, mysqlParser.ST_LINEFROMTEXT, mysqlParser.ST_LINEFROMWKB, mysqlParser.ST_LINESTRINGFROMTEXT, mysqlParser.ST_LINESTRINGFROMWKB, mysqlParser.ST_NUMGEOMETRIES, mysqlParser.ST_NUMINTERIORRING, mysqlParser.ST_NUMINTERIORRINGS, mysqlParser.ST_NUMPOINTS, mysqlParser.ST_OVERLAPS, mysqlParser.ST_POINTFROMTEXT, mysqlParser.ST_POINTFROMWKB, mysqlParser.ST_POINTN, mysqlParser.ST_POLYFROMTEXT, mysqlParser.ST_POLYFROMWKB, mysqlParser.ST_POLYGONFROMTEXT, mysqlParser.ST_POLYGONFROMWKB, mysqlParser.ST_SRID, mysqlParser.ST_STARTPOINT, mysqlParser.ST_SYMDIFFERENCE, mysqlParser.ST_TOUCHES, mysqlParser.ST_UNION, mysqlParser.ST_WITHIN, mysqlParser.ST_X, mysqlParser.ST_Y, mysqlParser.SUBDATE, mysqlParser.SUBSTRING_INDEX, mysqlParser.SUBTIME, mysqlParser.SYSTEM_USER, mysqlParser.TAN, mysqlParser.TIMEDIFF, mysqlParser.TIMESTAMPADD, mysqlParser.TIMESTAMPDIFF, mysqlParser.TIME_FORMAT, mysqlParser.TIME_TO_SEC, mysqlParser.TOUCHES, mysqlParser.TO_BASE64, mysqlParser.TO_DAYS, mysqlParser.TO_SECONDS, mysqlParser.UCASE, mysqlParser.UNCOMPRESS, mysqlParser.UNCOMPRESSED_LENGTH, mysqlParser.UNHEX, mysqlParser.UNIX_TIMESTAMP, mysqlParser.UPDATEXML, mysqlParser.UPPER, mysqlParser.UUID, mysqlParser.UUID_SHORT, mysqlParser.VALIDATE_PASSWORD_STRENGTH, mysqlParser.VERSION, mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, mysqlParser.WEEKDAY, mysqlParser.WEEKOFYEAR, mysqlParser.WEIGHT_STRING, mysqlParser.WITHIN, mysqlParser.YEARWEEK, mysqlParser.Y_FUNCTION, mysqlParser.X_FUNCTION, mysqlParser.CHARSET_REVERSE_QOUTE_STRING, mysqlParser.ID, mysqlParser.REVERSE_QUOTE_ID]:
                    self.state = 2316
                    self.uidList()
                    pass
                elif token in [mysqlParser.ALL]:
                    self.state = 2317
                    self.match(mysqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2320
                self.match(mysqlParser.TABLESPACE)
                pass

            elif la_ == 32:
                localctx = mysqlParser.AlterByTruncatePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 2321
                self.match(mysqlParser.TRUNCATE)
                self.state = 2322
                self.match(mysqlParser.PARTITION)
                self.state = 2325
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [mysqlParser.LEFT, mysqlParser.RIGHT, mysqlParser.DATE, mysqlParser.TIME, mysqlParser.TIMESTAMP, mysqlParser.DATETIME, mysqlParser.YEAR, mysqlParser.TEXT, mysqlParser.ENUM, mysqlParser.COUNT, mysqlParser.POSITION, mysqlParser.ACCOUNT, mysqlParser.ACTION, mysqlParser.AFTER, mysqlParser.AGGREGATE, mysqlParser.ALGORITHM, mysqlParser.ANY, mysqlParser.AT, mysqlParser.AUTHORS, mysqlParser.AUTOCOMMIT, mysqlParser.AUTOEXTEND_SIZE, mysqlParser.AUTO_INCREMENT, mysqlParser.AVG_ROW_LENGTH, mysqlParser.BEGIN, mysqlParser.BINLOG, mysqlParser.BIT, mysqlParser.BLOCK, mysqlParser.BTREE, mysqlParser.CASCADED, mysqlParser.CHAIN, mysqlParser.CHANNEL, mysqlParser.CHECKSUM, mysqlParser.CIPHER, mysqlParser.CLIENT, mysqlParser.COALESCE, mysqlParser.CODE, mysqlParser.COLUMNS, mysqlParser.COLUMN_FORMAT, mysqlParser.COMMENT, mysqlParser.COMMIT, mysqlParser.COMPACT, mysqlParser.COMPLETION, mysqlParser.COMPRESSED, mysqlParser.COMPRESSION, mysqlParser.CONCURRENT, mysqlParser.CONNECTION, mysqlParser.CONSISTENT, mysqlParser.CONTAINS, mysqlParser.CONTEXT, mysqlParser.CONTRIBUTORS, mysqlParser.COPY, mysqlParser.CPU, mysqlParser.DATA, mysqlParser.DATAFILE, mysqlParser.DEALLOCATE, mysqlParser.DEFAULT_AUTH, mysqlParser.DEFINER, mysqlParser.DELAY_KEY_WRITE, mysqlParser.DIRECTORY, mysqlParser.DISABLE, mysqlParser.DISCARD, mysqlParser.DISK, mysqlParser.DO, mysqlParser.DUMPFILE, mysqlParser.DUPLICATE, mysqlParser.DYNAMIC, mysqlParser.ENABLE, mysqlParser.ENCRYPTION, mysqlParser.ENDS, mysqlParser.ENGINE, mysqlParser.ENGINES, mysqlParser.ERROR, mysqlParser.ERRORS, mysqlParser.ESCAPE, mysqlParser.EVEN, mysqlParser.EVENT, mysqlParser.EVENTS, mysqlParser.EVERY, mysqlParser.EXCHANGE, mysqlParser.EXCLUSIVE, mysqlParser.EXPIRE, mysqlParser.EXTENT_SIZE, mysqlParser.FAULTS, mysqlParser.FIELDS, mysqlParser.FILE_BLOCK_SIZE, mysqlParser.FILTER, mysqlParser.FIRST, mysqlParser.FIXED, mysqlParser.FOLLOWS, mysqlParser.FULL, mysqlParser.FUNCTION, mysqlParser.GLOBAL, mysqlParser.GRANTS, mysqlParser.GROUP_REPLICATION, mysqlParser.HASH, mysqlParser.HOST, mysqlParser.IDENTIFIED, mysqlParser.IGNORE_SERVER_IDS, mysqlParser.IMPORT, mysqlParser.INDEXES, mysqlParser.INITIAL_SIZE, mysqlParser.INPLACE, mysqlParser.INSERT_METHOD, mysqlParser.INSTANCE, mysqlParser.INVOKER, mysqlParser.IO, mysqlParser.IO_THREAD, mysqlParser.IPC, mysqlParser.ISOLATION, mysqlParser.ISSUER, mysqlParser.KEY_BLOCK_SIZE, mysqlParser.LANGUAGE, mysqlParser.LAST, mysqlParser.LEAVES, mysqlParser.LESS, mysqlParser.LEVEL, mysqlParser.LIST, mysqlParser.LOCAL, mysqlParser.LOGFILE, mysqlParser.LOGS, mysqlParser.MASTER, mysqlParser.MASTER_AUTO_POSITION, mysqlParser.MASTER_CONNECT_RETRY, mysqlParser.MASTER_DELAY, mysqlParser.MASTER_HEARTBEAT_PERIOD, mysqlParser.MASTER_HOST, mysqlParser.MASTER_LOG_FILE, mysqlParser.MASTER_LOG_POS, mysqlParser.MASTER_PASSWORD, mysqlParser.MASTER_PORT, mysqlParser.MASTER_RETRY_COUNT, mysqlParser.MASTER_SSL, mysqlParser.MASTER_SSL_CA, mysqlParser.MASTER_SSL_CAPATH, mysqlParser.MASTER_SSL_CERT, mysqlParser.MASTER_SSL_CIPHER, mysqlParser.MASTER_SSL_CRL, mysqlParser.MASTER_SSL_CRLPATH, mysqlParser.MASTER_SSL_KEY, mysqlParser.MASTER_TLS_VERSION, mysqlParser.MASTER_USER, mysqlParser.MAX_CONNECTIONS_PER_HOUR, mysqlParser.MAX_QUERIES_PER_HOUR, mysqlParser.MAX_ROWS, mysqlParser.MAX_SIZE, mysqlParser.MAX_UPDATES_PER_HOUR, mysqlParser.MAX_USER_CONNECTIONS, mysqlParser.MERGE, mysqlParser.MID, mysqlParser.MIGRATE, mysqlParser.MIN_ROWS, mysqlParser.MODIFY, mysqlParser.MUTEX, mysqlParser.MYSQL, mysqlParser.NAME, mysqlParser.NAMES, mysqlParser.NCHAR, mysqlParser.NEVER, mysqlParser.NO, mysqlParser.NODEGROUP, mysqlParser.NONE, mysqlParser.OFFLINE, mysqlParser.OFFSET, mysqlParser.OJ, mysqlParser.OLD_PASSWORD, mysqlParser.ONE, mysqlParser.ONLINE, mysqlParser.ONLY, mysqlParser.OPTIMIZER_COSTS, mysqlParser.OPTIONS, mysqlParser.OWNER, mysqlParser.PACK_KEYS, mysqlParser.PAGE, mysqlParser.PARSER, mysqlParser.PARTIAL, mysqlParser.PARTITIONING, mysqlParser.PARTITIONS, mysqlParser.PASSWORD, mysqlParser.PHASE, mysqlParser.PLUGIN_DIR, mysqlParser.PLUGINS, mysqlParser.PORT, mysqlParser.PRECEDES, mysqlParser.PREPARE, mysqlParser.PRESERVE, mysqlParser.PREV, mysqlParser.PROCESSLIST, mysqlParser.PROFILE, mysqlParser.PROFILES, mysqlParser.PROXY, mysqlParser.QUERY, mysqlParser.QUICK, mysqlParser.REBUILD, mysqlParser.RECOVER, mysqlParser.REDO_BUFFER_SIZE, mysqlParser.REDUNDANT, mysqlParser.RELAY_LOG_FILE, mysqlParser.RELAY_LOG_POS, mysqlParser.RELAYLOG, mysqlParser.REMOVE, mysqlParser.REORGANIZE, mysqlParser.REPAIR, mysqlParser.REPLICATE_DO_DB, mysqlParser.REPLICATE_DO_TABLE, mysqlParser.REPLICATE_IGNORE_DB, mysqlParser.REPLICATE_IGNORE_TABLE, mysqlParser.REPLICATE_REWRITE_DB, mysqlParser.REPLICATE_WILD_DO_TABLE, mysqlParser.REPLICATE_WILD_IGNORE_TABLE, mysqlParser.REPLICATION, mysqlParser.RESUME, mysqlParser.RETURNS, mysqlParser.ROLLBACK, mysqlParser.ROLLUP, mysqlParser.ROTATE, mysqlParser.ROW, mysqlParser.ROWS, mysqlParser.ROW_FORMAT, mysqlParser.SAVEPOINT, mysqlParser.SCHEDULE, mysqlParser.SECURITY, mysqlParser.SERVER, mysqlParser.SESSION, mysqlParser.SHARE, mysqlParser.SHARED, mysqlParser.SIGNED, mysqlParser.SIMPLE, mysqlParser.SLAVE, mysqlParser.SNAPSHOT, mysqlParser.SOCKET, mysqlParser.SOME, mysqlParser.SOUNDS, mysqlParser.SOURCE, mysqlParser.SQL_AFTER_GTIDS, mysqlParser.SQL_AFTER_MTS_GAPS, mysqlParser.SQL_BEFORE_GTIDS, mysqlParser.SQL_BUFFER_RESULT, mysqlParser.SQL_CACHE, mysqlParser.SQL_NO_CACHE, mysqlParser.SQL_THREAD, mysqlParser.START, mysqlParser.STARTS, mysqlParser.STATS_AUTO_RECALC, mysqlParser.STATS_PERSISTENT, mysqlParser.STATS_SAMPLE_PAGES, mysqlParser.STATUS, mysqlParser.STOP, mysqlParser.STORAGE, mysqlParser.STRING, mysqlParser.SUBJECT, mysqlParser.SUBPARTITION, mysqlParser.SUBPARTITIONS, mysqlParser.SUSPEND, mysqlParser.SWAPS, mysqlParser.SWITCHES, mysqlParser.TABLESPACE, mysqlParser.TEMPORARY, mysqlParser.TEMPTABLE, mysqlParser.THAN, mysqlParser.TRANSACTION, mysqlParser.TRUNCATE, mysqlParser.UNDEFINED, mysqlParser.UNDOFILE, mysqlParser.UNDO_BUFFER_SIZE, mysqlParser.UNKNOWN, mysqlParser.UPGRADE, mysqlParser.USER, mysqlParser.VALIDATION, mysqlParser.VALUE, mysqlParser.VARIABLES, mysqlParser.VIEW, mysqlParser.WAIT, mysqlParser.WARNINGS, mysqlParser.WITHOUT, mysqlParser.WORK, mysqlParser.WRAPPER, mysqlParser.X509, mysqlParser.XA, mysqlParser.XML, mysqlParser.QUARTER, mysqlParser.MONTH, mysqlParser.DAY, mysqlParser.HOUR, mysqlParser.MINUTE, mysqlParser.WEEK, mysqlParser.SECOND, mysqlParser.MICROSECOND, mysqlParser.TABLES, mysqlParser.ROUTINE, mysqlParser.EXECUTE, mysqlParser.FILE, mysqlParser.PROCESS, mysqlParser.RELOAD, mysqlParser.SHUTDOWN, mysqlParser.SUPER, mysqlParser.PRIVILEGES, mysqlParser.ARMSCII8, mysqlParser.ASCII, mysqlParser.BIG5, mysqlParser.CP1250, mysqlParser.CP1251, mysqlParser.CP1256, mysqlParser.CP1257, mysqlParser.CP850, mysqlParser.CP852, mysqlParser.CP866, mysqlParser.CP932, mysqlParser.DEC8, mysqlParser.EUCJPMS, mysqlParser.EUCKR, mysqlParser.GB2312, mysqlParser.GBK, mysqlParser.GEOSTD8, mysqlParser.GREEK, mysqlParser.HEBREW, mysqlParser.HP8, mysqlParser.KEYBCS2, mysqlParser.KOI8R, mysqlParser.KOI8U, mysqlParser.LATIN1, mysqlParser.LATIN2, mysqlParser.LATIN5, mysqlParser.LATIN7, mysqlParser.MACCE, mysqlParser.MACROMAN, mysqlParser.SJIS, mysqlParser.SWE7, mysqlParser.TIS620, mysqlParser.UCS2, mysqlParser.UJIS, mysqlParser.UTF16, mysqlParser.UTF16LE, mysqlParser.UTF32, mysqlParser.UTF8, mysqlParser.UTF8MB3, mysqlParser.UTF8MB4, mysqlParser.ARCHIVE, mysqlParser.BLACKHOLE, mysqlParser.CSV, mysqlParser.FEDERATED, mysqlParser.INNODB, mysqlParser.MEMORY, mysqlParser.MRG_MYISAM, mysqlParser.MYISAM, mysqlParser.NDB, mysqlParser.NDBCLUSTER, mysqlParser.PERFOMANCE_SCHEMA, mysqlParser.REPEATABLE, mysqlParser.COMMITTED, mysqlParser.UNCOMMITTED, mysqlParser.SERIALIZABLE, mysqlParser.GEOMETRYCOLLECTION, mysqlParser.LINESTRING, mysqlParser.MULTILINESTRING, mysqlParser.MULTIPOINT, mysqlParser.MULTIPOLYGON, mysqlParser.POINT, mysqlParser.POLYGON, mysqlParser.ABS, mysqlParser.ACOS, mysqlParser.ADDDATE, mysqlParser.ADDTIME, mysqlParser.AES_DECRYPT, mysqlParser.AES_ENCRYPT, mysqlParser.AREA, mysqlParser.ASBINARY, mysqlParser.ASIN, mysqlParser.ASTEXT, mysqlParser.ASWKB, mysqlParser.ASWKT, mysqlParser.ASYMMETRIC_DECRYPT, mysqlParser.ASYMMETRIC_DERIVE, mysqlParser.ASYMMETRIC_ENCRYPT, mysqlParser.ASYMMETRIC_SIGN, mysqlParser.ASYMMETRIC_VERIFY, mysqlParser.ATAN, mysqlParser.ATAN2, mysqlParser.BENCHMARK, mysqlParser.BIN, mysqlParser.BIT_COUNT, mysqlParser.BIT_LENGTH, mysqlParser.BUFFER, mysqlParser.CEIL, mysqlParser.CEILING, mysqlParser.CENTROID, mysqlParser.CHARACTER_LENGTH, mysqlParser.CHARSET, mysqlParser.CHAR_LENGTH, mysqlParser.COERCIBILITY, mysqlParser.COLLATION, mysqlParser.COMPRESS, mysqlParser.CONCAT, mysqlParser.CONCAT_WS, mysqlParser.CONNECTION_ID, mysqlParser.CONV, mysqlParser.CONVERT_TZ, mysqlParser.COS, mysqlParser.COT, mysqlParser.CRC32, mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY, mysqlParser.CREATE_ASYMMETRIC_PUB_KEY, mysqlParser.CREATE_DH_PARAMETERS, mysqlParser.CREATE_DIGEST, mysqlParser.CROSSES, mysqlParser.DATEDIFF, mysqlParser.DATE_FORMAT, mysqlParser.DAYNAME, mysqlParser.DAYOFMONTH, mysqlParser.DAYOFWEEK, mysqlParser.DAYOFYEAR, mysqlParser.DECODE, mysqlParser.DEGREES, mysqlParser.DES_DECRYPT, mysqlParser.DES_ENCRYPT, mysqlParser.DIMENSION, mysqlParser.DISJOINT, mysqlParser.ELT, mysqlParser.ENCODE, mysqlParser.ENCRYPT, mysqlParser.ENDPOINT, mysqlParser.ENVELOPE, mysqlParser.EQUALS, mysqlParser.EXP, mysqlParser.EXPORT_SET, mysqlParser.EXTERIORRING, mysqlParser.EXTRACTVALUE, mysqlParser.FIELD, mysqlParser.FIND_IN_SET, mysqlParser.FLOOR, mysqlParser.FORMAT, mysqlParser.FOUND_ROWS, mysqlParser.FROM_BASE64, mysqlParser.FROM_DAYS, mysqlParser.FROM_UNIXTIME, mysqlParser.GEOMCOLLFROMTEXT, mysqlParser.GEOMCOLLFROMWKB, mysqlParser.GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.GEOMETRYCOLLECTIONFROMWKB, mysqlParser.GEOMETRYFROMTEXT, mysqlParser.GEOMETRYFROMWKB, mysqlParser.GEOMETRYN, mysqlParser.GEOMETRYTYPE, mysqlParser.GEOMFROMTEXT, mysqlParser.GEOMFROMWKB, mysqlParser.GET_FORMAT, mysqlParser.GET_LOCK, mysqlParser.GLENGTH, mysqlParser.GREATEST, mysqlParser.GTID_SUBSET, mysqlParser.GTID_SUBTRACT, mysqlParser.HEX, mysqlParser.IFNULL, mysqlParser.INET6_ATON, mysqlParser.INET6_NTOA, mysqlParser.INET_ATON, mysqlParser.INET_NTOA, mysqlParser.INSTR, mysqlParser.INTERIORRINGN, mysqlParser.INTERSECTS, mysqlParser.ISCLOSED, mysqlParser.ISEMPTY, mysqlParser.ISNULL, mysqlParser.ISSIMPLE, mysqlParser.IS_FREE_LOCK, mysqlParser.IS_IPV4, mysqlParser.IS_IPV4_COMPAT, mysqlParser.IS_IPV4_MAPPED, mysqlParser.IS_IPV6, mysqlParser.IS_USED_LOCK, mysqlParser.LAST_INSERT_ID, mysqlParser.LCASE, mysqlParser.LEAST, mysqlParser.LENGTH, mysqlParser.LINEFROMTEXT, mysqlParser.LINEFROMWKB, mysqlParser.LINESTRINGFROMTEXT, mysqlParser.LINESTRINGFROMWKB, mysqlParser.LN, mysqlParser.LOAD_FILE, mysqlParser.LOCATE, mysqlParser.LOG, mysqlParser.LOG10, mysqlParser.LOG2, mysqlParser.LOWER, mysqlParser.LPAD, mysqlParser.LTRIM, mysqlParser.MAKEDATE, mysqlParser.MAKETIME, mysqlParser.MAKE_SET, mysqlParser.MASTER_POS_WAIT, mysqlParser.MBRCONTAINS, mysqlParser.MBRDISJOINT, mysqlParser.MBREQUAL, mysqlParser.MBRINTERSECTS, mysqlParser.MBROVERLAPS, mysqlParser.MBRTOUCHES, mysqlParser.MBRWITHIN, mysqlParser.MD5, mysqlParser.MLINEFROMTEXT, mysqlParser.MLINEFROMWKB, mysqlParser.MONTHNAME, mysqlParser.MPOINTFROMTEXT, mysqlParser.MPOINTFROMWKB, mysqlParser.MPOLYFROMTEXT, mysqlParser.MPOLYFROMWKB, mysqlParser.MULTILINESTRINGFROMTEXT, mysqlParser.MULTILINESTRINGFROMWKB, mysqlParser.MULTIPOINTFROMTEXT, mysqlParser.MULTIPOINTFROMWKB, mysqlParser.MULTIPOLYGONFROMTEXT, mysqlParser.MULTIPOLYGONFROMWKB, mysqlParser.NAME_CONST, mysqlParser.NULLIF, mysqlParser.NUMGEOMETRIES, mysqlParser.NUMINTERIORRINGS, mysqlParser.NUMPOINTS, mysqlParser.OCT, mysqlParser.OCTET_LENGTH, mysqlParser.ORD, mysqlParser.OVERLAPS, mysqlParser.PERIOD_ADD, mysqlParser.PERIOD_DIFF, mysqlParser.PI, mysqlParser.POINTFROMTEXT, mysqlParser.POINTFROMWKB, mysqlParser.POINTN, mysqlParser.POLYFROMTEXT, mysqlParser.POLYFROMWKB, mysqlParser.POLYGONFROMTEXT, mysqlParser.POLYGONFROMWKB, mysqlParser.POW, mysqlParser.POWER, mysqlParser.QUOTE, mysqlParser.RADIANS, mysqlParser.RAND, mysqlParser.RANDOM_BYTES, mysqlParser.RELEASE_LOCK, mysqlParser.REVERSE, mysqlParser.ROUND, mysqlParser.ROW_COUNT, mysqlParser.RPAD, mysqlParser.RTRIM, mysqlParser.SEC_TO_TIME, mysqlParser.SESSION_USER, mysqlParser.SHA, mysqlParser.SHA1, mysqlParser.SHA2, mysqlParser.SIGN, mysqlParser.SIN, mysqlParser.SLEEP, mysqlParser.SOUNDEX, mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, mysqlParser.SQRT, mysqlParser.SRID, mysqlParser.STARTPOINT, mysqlParser.STRCMP, mysqlParser.STR_TO_DATE, mysqlParser.ST_AREA, mysqlParser.ST_ASBINARY, mysqlParser.ST_ASTEXT, mysqlParser.ST_ASWKB, mysqlParser.ST_ASWKT, mysqlParser.ST_BUFFER, mysqlParser.ST_CENTROID, mysqlParser.ST_CONTAINS, mysqlParser.ST_CROSSES, mysqlParser.ST_DIFFERENCE, mysqlParser.ST_DIMENSION, mysqlParser.ST_DISJOINT, mysqlParser.ST_DISTANCE, mysqlParser.ST_ENDPOINT, mysqlParser.ST_ENVELOPE, mysqlParser.ST_EQUALS, mysqlParser.ST_EXTERIORRING, mysqlParser.ST_GEOMCOLLFROMTEXT, mysqlParser.ST_GEOMCOLLFROMTXT, mysqlParser.ST_GEOMCOLLFROMWKB, mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, mysqlParser.ST_GEOMETRYFROMTEXT, mysqlParser.ST_GEOMETRYFROMWKB, mysqlParser.ST_GEOMETRYN, mysqlParser.ST_GEOMETRYTYPE, mysqlParser.ST_GEOMFROMTEXT, mysqlParser.ST_GEOMFROMWKB, mysqlParser.ST_INTERIORRINGN, mysqlParser.ST_INTERSECTION, mysqlParser.ST_INTERSECTS, mysqlParser.ST_ISCLOSED, mysqlParser.ST_ISEMPTY, mysqlParser.ST_ISSIMPLE, mysqlParser.ST_LINEFROMTEXT, mysqlParser.ST_LINEFROMWKB, mysqlParser.ST_LINESTRINGFROMTEXT, mysqlParser.ST_LINESTRINGFROMWKB, mysqlParser.ST_NUMGEOMETRIES, mysqlParser.ST_NUMINTERIORRING, mysqlParser.ST_NUMINTERIORRINGS, mysqlParser.ST_NUMPOINTS, mysqlParser.ST_OVERLAPS, mysqlParser.ST_POINTFROMTEXT, mysqlParser.ST_POINTFROMWKB, mysqlParser.ST_POINTN, mysqlParser.ST_POLYFROMTEXT, mysqlParser.ST_POLYFROMWKB, mysqlParser.ST_POLYGONFROMTEXT, mysqlParser.ST_POLYGONFROMWKB, mysqlParser.ST_SRID, mysqlParser.ST_STARTPOINT, mysqlParser.ST_SYMDIFFERENCE, mysqlParser.ST_TOUCHES, mysqlParser.ST_UNION, mysqlParser.ST_WITHIN, mysqlParser.ST_X, mysqlParser.ST_Y, mysqlParser.SUBDATE, mysqlParser.SUBSTRING_INDEX, mysqlParser.SUBTIME, mysqlParser.SYSTEM_USER, mysqlParser.TAN, mysqlParser.TIMEDIFF, mysqlParser.TIMESTAMPADD, mysqlParser.TIMESTAMPDIFF, mysqlParser.TIME_FORMAT, mysqlParser.TIME_TO_SEC, mysqlParser.TOUCHES, mysqlParser.TO_BASE64, mysqlParser.TO_DAYS, mysqlParser.TO_SECONDS, mysqlParser.UCASE, mysqlParser.UNCOMPRESS, mysqlParser.UNCOMPRESSED_LENGTH, mysqlParser.UNHEX, mysqlParser.UNIX_TIMESTAMP, mysqlParser.UPDATEXML, mysqlParser.UPPER, mysqlParser.UUID, mysqlParser.UUID_SHORT, mysqlParser.VALIDATE_PASSWORD_STRENGTH, mysqlParser.VERSION, mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, mysqlParser.WEEKDAY, mysqlParser.WEEKOFYEAR, mysqlParser.WEIGHT_STRING, mysqlParser.WITHIN, mysqlParser.YEARWEEK, mysqlParser.Y_FUNCTION, mysqlParser.X_FUNCTION, mysqlParser.CHARSET_REVERSE_QOUTE_STRING, mysqlParser.ID, mysqlParser.REVERSE_QUOTE_ID]:
                    self.state = 2323
                    self.uidList()
                    pass
                elif token in [mysqlParser.ALL]:
                    self.state = 2324
                    self.match(mysqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 33:
                localctx = mysqlParser.AlterByCoalescePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 2327
                self.match(mysqlParser.COALESCE)
                self.state = 2328
                self.match(mysqlParser.PARTITION)
                self.state = 2329
                self.decimalLiteral()
                pass

            elif la_ == 34:
                localctx = mysqlParser.AlterByReorganizePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 2330
                self.match(mysqlParser.REORGANIZE)
                self.state = 2331
                self.match(mysqlParser.PARTITION)
                self.state = 2332
                self.uidList()
                self.state = 2333
                self.match(mysqlParser.INTO)
                self.state = 2334
                self.match(mysqlParser.LR_BRACKET)
                self.state = 2335
                self.partitionDefinition()
                self.state = 2340
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.COMMA:
                    self.state = 2336
                    self.match(mysqlParser.COMMA)
                    self.state = 2337
                    self.partitionDefinition()
                    self.state = 2342
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2343
                self.match(mysqlParser.RR_BRACKET)
                pass

            elif la_ == 35:
                localctx = mysqlParser.AlterByExchangePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 2345
                self.match(mysqlParser.EXCHANGE)
                self.state = 2346
                self.match(mysqlParser.PARTITION)
                self.state = 2347
                self.uid()
                self.state = 2348
                self.match(mysqlParser.WITH)
                self.state = 2349
                self.match(mysqlParser.TABLE)
                self.state = 2350
                self.tableName()
                self.state = 2353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.WITH or _la==mysqlParser.WITHOUT:
                    self.state = 2351
                    localctx.validationFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==mysqlParser.WITH or _la==mysqlParser.WITHOUT):
                        localctx.validationFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2352
                    self.match(mysqlParser.VALIDATION)


                pass

            elif la_ == 36:
                localctx = mysqlParser.AlterByAnalyzePartitiionContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 2355
                self.match(mysqlParser.ANALYZE)
                self.state = 2356
                self.match(mysqlParser.PARTITION)
                self.state = 2359
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [mysqlParser.LEFT, mysqlParser.RIGHT, mysqlParser.DATE, mysqlParser.TIME, mysqlParser.TIMESTAMP, mysqlParser.DATETIME, mysqlParser.YEAR, mysqlParser.TEXT, mysqlParser.ENUM, mysqlParser.COUNT, mysqlParser.POSITION, mysqlParser.ACCOUNT, mysqlParser.ACTION, mysqlParser.AFTER, mysqlParser.AGGREGATE, mysqlParser.ALGORITHM, mysqlParser.ANY, mysqlParser.AT, mysqlParser.AUTHORS, mysqlParser.AUTOCOMMIT, mysqlParser.AUTOEXTEND_SIZE, mysqlParser.AUTO_INCREMENT, mysqlParser.AVG_ROW_LENGTH, mysqlParser.BEGIN, mysqlParser.BINLOG, mysqlParser.BIT, mysqlParser.BLOCK, mysqlParser.BTREE, mysqlParser.CASCADED, mysqlParser.CHAIN, mysqlParser.CHANNEL, mysqlParser.CHECKSUM, mysqlParser.CIPHER, mysqlParser.CLIENT, mysqlParser.COALESCE, mysqlParser.CODE, mysqlParser.COLUMNS, mysqlParser.COLUMN_FORMAT, mysqlParser.COMMENT, mysqlParser.COMMIT, mysqlParser.COMPACT, mysqlParser.COMPLETION, mysqlParser.COMPRESSED, mysqlParser.COMPRESSION, mysqlParser.CONCURRENT, mysqlParser.CONNECTION, mysqlParser.CONSISTENT, mysqlParser.CONTAINS, mysqlParser.CONTEXT, mysqlParser.CONTRIBUTORS, mysqlParser.COPY, mysqlParser.CPU, mysqlParser.DATA, mysqlParser.DATAFILE, mysqlParser.DEALLOCATE, mysqlParser.DEFAULT_AUTH, mysqlParser.DEFINER, mysqlParser.DELAY_KEY_WRITE, mysqlParser.DIRECTORY, mysqlParser.DISABLE, mysqlParser.DISCARD, mysqlParser.DISK, mysqlParser.DO, mysqlParser.DUMPFILE, mysqlParser.DUPLICATE, mysqlParser.DYNAMIC, mysqlParser.ENABLE, mysqlParser.ENCRYPTION, mysqlParser.ENDS, mysqlParser.ENGINE, mysqlParser.ENGINES, mysqlParser.ERROR, mysqlParser.ERRORS, mysqlParser.ESCAPE, mysqlParser.EVEN, mysqlParser.EVENT, mysqlParser.EVENTS, mysqlParser.EVERY, mysqlParser.EXCHANGE, mysqlParser.EXCLUSIVE, mysqlParser.EXPIRE, mysqlParser.EXTENT_SIZE, mysqlParser.FAULTS, mysqlParser.FIELDS, mysqlParser.FILE_BLOCK_SIZE, mysqlParser.FILTER, mysqlParser.FIRST, mysqlParser.FIXED, mysqlParser.FOLLOWS, mysqlParser.FULL, mysqlParser.FUNCTION, mysqlParser.GLOBAL, mysqlParser.GRANTS, mysqlParser.GROUP_REPLICATION, mysqlParser.HASH, mysqlParser.HOST, mysqlParser.IDENTIFIED, mysqlParser.IGNORE_SERVER_IDS, mysqlParser.IMPORT, mysqlParser.INDEXES, mysqlParser.INITIAL_SIZE, mysqlParser.INPLACE, mysqlParser.INSERT_METHOD, mysqlParser.INSTANCE, mysqlParser.INVOKER, mysqlParser.IO, mysqlParser.IO_THREAD, mysqlParser.IPC, mysqlParser.ISOLATION, mysqlParser.ISSUER, mysqlParser.KEY_BLOCK_SIZE, mysqlParser.LANGUAGE, mysqlParser.LAST, mysqlParser.LEAVES, mysqlParser.LESS, mysqlParser.LEVEL, mysqlParser.LIST, mysqlParser.LOCAL, mysqlParser.LOGFILE, mysqlParser.LOGS, mysqlParser.MASTER, mysqlParser.MASTER_AUTO_POSITION, mysqlParser.MASTER_CONNECT_RETRY, mysqlParser.MASTER_DELAY, mysqlParser.MASTER_HEARTBEAT_PERIOD, mysqlParser.MASTER_HOST, mysqlParser.MASTER_LOG_FILE, mysqlParser.MASTER_LOG_POS, mysqlParser.MASTER_PASSWORD, mysqlParser.MASTER_PORT, mysqlParser.MASTER_RETRY_COUNT, mysqlParser.MASTER_SSL, mysqlParser.MASTER_SSL_CA, mysqlParser.MASTER_SSL_CAPATH, mysqlParser.MASTER_SSL_CERT, mysqlParser.MASTER_SSL_CIPHER, mysqlParser.MASTER_SSL_CRL, mysqlParser.MASTER_SSL_CRLPATH, mysqlParser.MASTER_SSL_KEY, mysqlParser.MASTER_TLS_VERSION, mysqlParser.MASTER_USER, mysqlParser.MAX_CONNECTIONS_PER_HOUR, mysqlParser.MAX_QUERIES_PER_HOUR, mysqlParser.MAX_ROWS, mysqlParser.MAX_SIZE, mysqlParser.MAX_UPDATES_PER_HOUR, mysqlParser.MAX_USER_CONNECTIONS, mysqlParser.MERGE, mysqlParser.MID, mysqlParser.MIGRATE, mysqlParser.MIN_ROWS, mysqlParser.MODIFY, mysqlParser.MUTEX, mysqlParser.MYSQL, mysqlParser.NAME, mysqlParser.NAMES, mysqlParser.NCHAR, mysqlParser.NEVER, mysqlParser.NO, mysqlParser.NODEGROUP, mysqlParser.NONE, mysqlParser.OFFLINE, mysqlParser.OFFSET, mysqlParser.OJ, mysqlParser.OLD_PASSWORD, mysqlParser.ONE, mysqlParser.ONLINE, mysqlParser.ONLY, mysqlParser.OPTIMIZER_COSTS, mysqlParser.OPTIONS, mysqlParser.OWNER, mysqlParser.PACK_KEYS, mysqlParser.PAGE, mysqlParser.PARSER, mysqlParser.PARTIAL, mysqlParser.PARTITIONING, mysqlParser.PARTITIONS, mysqlParser.PASSWORD, mysqlParser.PHASE, mysqlParser.PLUGIN_DIR, mysqlParser.PLUGINS, mysqlParser.PORT, mysqlParser.PRECEDES, mysqlParser.PREPARE, mysqlParser.PRESERVE, mysqlParser.PREV, mysqlParser.PROCESSLIST, mysqlParser.PROFILE, mysqlParser.PROFILES, mysqlParser.PROXY, mysqlParser.QUERY, mysqlParser.QUICK, mysqlParser.REBUILD, mysqlParser.RECOVER, mysqlParser.REDO_BUFFER_SIZE, mysqlParser.REDUNDANT, mysqlParser.RELAY_LOG_FILE, mysqlParser.RELAY_LOG_POS, mysqlParser.RELAYLOG, mysqlParser.REMOVE, mysqlParser.REORGANIZE, mysqlParser.REPAIR, mysqlParser.REPLICATE_DO_DB, mysqlParser.REPLICATE_DO_TABLE, mysqlParser.REPLICATE_IGNORE_DB, mysqlParser.REPLICATE_IGNORE_TABLE, mysqlParser.REPLICATE_REWRITE_DB, mysqlParser.REPLICATE_WILD_DO_TABLE, mysqlParser.REPLICATE_WILD_IGNORE_TABLE, mysqlParser.REPLICATION, mysqlParser.RESUME, mysqlParser.RETURNS, mysqlParser.ROLLBACK, mysqlParser.ROLLUP, mysqlParser.ROTATE, mysqlParser.ROW, mysqlParser.ROWS, mysqlParser.ROW_FORMAT, mysqlParser.SAVEPOINT, mysqlParser.SCHEDULE, mysqlParser.SECURITY, mysqlParser.SERVER, mysqlParser.SESSION, mysqlParser.SHARE, mysqlParser.SHARED, mysqlParser.SIGNED, mysqlParser.SIMPLE, mysqlParser.SLAVE, mysqlParser.SNAPSHOT, mysqlParser.SOCKET, mysqlParser.SOME, mysqlParser.SOUNDS, mysqlParser.SOURCE, mysqlParser.SQL_AFTER_GTIDS, mysqlParser.SQL_AFTER_MTS_GAPS, mysqlParser.SQL_BEFORE_GTIDS, mysqlParser.SQL_BUFFER_RESULT, mysqlParser.SQL_CACHE, mysqlParser.SQL_NO_CACHE, mysqlParser.SQL_THREAD, mysqlParser.START, mysqlParser.STARTS, mysqlParser.STATS_AUTO_RECALC, mysqlParser.STATS_PERSISTENT, mysqlParser.STATS_SAMPLE_PAGES, mysqlParser.STATUS, mysqlParser.STOP, mysqlParser.STORAGE, mysqlParser.STRING, mysqlParser.SUBJECT, mysqlParser.SUBPARTITION, mysqlParser.SUBPARTITIONS, mysqlParser.SUSPEND, mysqlParser.SWAPS, mysqlParser.SWITCHES, mysqlParser.TABLESPACE, mysqlParser.TEMPORARY, mysqlParser.TEMPTABLE, mysqlParser.THAN, mysqlParser.TRANSACTION, mysqlParser.TRUNCATE, mysqlParser.UNDEFINED, mysqlParser.UNDOFILE, mysqlParser.UNDO_BUFFER_SIZE, mysqlParser.UNKNOWN, mysqlParser.UPGRADE, mysqlParser.USER, mysqlParser.VALIDATION, mysqlParser.VALUE, mysqlParser.VARIABLES, mysqlParser.VIEW, mysqlParser.WAIT, mysqlParser.WARNINGS, mysqlParser.WITHOUT, mysqlParser.WORK, mysqlParser.WRAPPER, mysqlParser.X509, mysqlParser.XA, mysqlParser.XML, mysqlParser.QUARTER, mysqlParser.MONTH, mysqlParser.DAY, mysqlParser.HOUR, mysqlParser.MINUTE, mysqlParser.WEEK, mysqlParser.SECOND, mysqlParser.MICROSECOND, mysqlParser.TABLES, mysqlParser.ROUTINE, mysqlParser.EXECUTE, mysqlParser.FILE, mysqlParser.PROCESS, mysqlParser.RELOAD, mysqlParser.SHUTDOWN, mysqlParser.SUPER, mysqlParser.PRIVILEGES, mysqlParser.ARMSCII8, mysqlParser.ASCII, mysqlParser.BIG5, mysqlParser.CP1250, mysqlParser.CP1251, mysqlParser.CP1256, mysqlParser.CP1257, mysqlParser.CP850, mysqlParser.CP852, mysqlParser.CP866, mysqlParser.CP932, mysqlParser.DEC8, mysqlParser.EUCJPMS, mysqlParser.EUCKR, mysqlParser.GB2312, mysqlParser.GBK, mysqlParser.GEOSTD8, mysqlParser.GREEK, mysqlParser.HEBREW, mysqlParser.HP8, mysqlParser.KEYBCS2, mysqlParser.KOI8R, mysqlParser.KOI8U, mysqlParser.LATIN1, mysqlParser.LATIN2, mysqlParser.LATIN5, mysqlParser.LATIN7, mysqlParser.MACCE, mysqlParser.MACROMAN, mysqlParser.SJIS, mysqlParser.SWE7, mysqlParser.TIS620, mysqlParser.UCS2, mysqlParser.UJIS, mysqlParser.UTF16, mysqlParser.UTF16LE, mysqlParser.UTF32, mysqlParser.UTF8, mysqlParser.UTF8MB3, mysqlParser.UTF8MB4, mysqlParser.ARCHIVE, mysqlParser.BLACKHOLE, mysqlParser.CSV, mysqlParser.FEDERATED, mysqlParser.INNODB, mysqlParser.MEMORY, mysqlParser.MRG_MYISAM, mysqlParser.MYISAM, mysqlParser.NDB, mysqlParser.NDBCLUSTER, mysqlParser.PERFOMANCE_SCHEMA, mysqlParser.REPEATABLE, mysqlParser.COMMITTED, mysqlParser.UNCOMMITTED, mysqlParser.SERIALIZABLE, mysqlParser.GEOMETRYCOLLECTION, mysqlParser.LINESTRING, mysqlParser.MULTILINESTRING, mysqlParser.MULTIPOINT, mysqlParser.MULTIPOLYGON, mysqlParser.POINT, mysqlParser.POLYGON, mysqlParser.ABS, mysqlParser.ACOS, mysqlParser.ADDDATE, mysqlParser.ADDTIME, mysqlParser.AES_DECRYPT, mysqlParser.AES_ENCRYPT, mysqlParser.AREA, mysqlParser.ASBINARY, mysqlParser.ASIN, mysqlParser.ASTEXT, mysqlParser.ASWKB, mysqlParser.ASWKT, mysqlParser.ASYMMETRIC_DECRYPT, mysqlParser.ASYMMETRIC_DERIVE, mysqlParser.ASYMMETRIC_ENCRYPT, mysqlParser.ASYMMETRIC_SIGN, mysqlParser.ASYMMETRIC_VERIFY, mysqlParser.ATAN, mysqlParser.ATAN2, mysqlParser.BENCHMARK, mysqlParser.BIN, mysqlParser.BIT_COUNT, mysqlParser.BIT_LENGTH, mysqlParser.BUFFER, mysqlParser.CEIL, mysqlParser.CEILING, mysqlParser.CENTROID, mysqlParser.CHARACTER_LENGTH, mysqlParser.CHARSET, mysqlParser.CHAR_LENGTH, mysqlParser.COERCIBILITY, mysqlParser.COLLATION, mysqlParser.COMPRESS, mysqlParser.CONCAT, mysqlParser.CONCAT_WS, mysqlParser.CONNECTION_ID, mysqlParser.CONV, mysqlParser.CONVERT_TZ, mysqlParser.COS, mysqlParser.COT, mysqlParser.CRC32, mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY, mysqlParser.CREATE_ASYMMETRIC_PUB_KEY, mysqlParser.CREATE_DH_PARAMETERS, mysqlParser.CREATE_DIGEST, mysqlParser.CROSSES, mysqlParser.DATEDIFF, mysqlParser.DATE_FORMAT, mysqlParser.DAYNAME, mysqlParser.DAYOFMONTH, mysqlParser.DAYOFWEEK, mysqlParser.DAYOFYEAR, mysqlParser.DECODE, mysqlParser.DEGREES, mysqlParser.DES_DECRYPT, mysqlParser.DES_ENCRYPT, mysqlParser.DIMENSION, mysqlParser.DISJOINT, mysqlParser.ELT, mysqlParser.ENCODE, mysqlParser.ENCRYPT, mysqlParser.ENDPOINT, mysqlParser.ENVELOPE, mysqlParser.EQUALS, mysqlParser.EXP, mysqlParser.EXPORT_SET, mysqlParser.EXTERIORRING, mysqlParser.EXTRACTVALUE, mysqlParser.FIELD, mysqlParser.FIND_IN_SET, mysqlParser.FLOOR, mysqlParser.FORMAT, mysqlParser.FOUND_ROWS, mysqlParser.FROM_BASE64, mysqlParser.FROM_DAYS, mysqlParser.FROM_UNIXTIME, mysqlParser.GEOMCOLLFROMTEXT, mysqlParser.GEOMCOLLFROMWKB, mysqlParser.GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.GEOMETRYCOLLECTIONFROMWKB, mysqlParser.GEOMETRYFROMTEXT, mysqlParser.GEOMETRYFROMWKB, mysqlParser.GEOMETRYN, mysqlParser.GEOMETRYTYPE, mysqlParser.GEOMFROMTEXT, mysqlParser.GEOMFROMWKB, mysqlParser.GET_FORMAT, mysqlParser.GET_LOCK, mysqlParser.GLENGTH, mysqlParser.GREATEST, mysqlParser.GTID_SUBSET, mysqlParser.GTID_SUBTRACT, mysqlParser.HEX, mysqlParser.IFNULL, mysqlParser.INET6_ATON, mysqlParser.INET6_NTOA, mysqlParser.INET_ATON, mysqlParser.INET_NTOA, mysqlParser.INSTR, mysqlParser.INTERIORRINGN, mysqlParser.INTERSECTS, mysqlParser.ISCLOSED, mysqlParser.ISEMPTY, mysqlParser.ISNULL, mysqlParser.ISSIMPLE, mysqlParser.IS_FREE_LOCK, mysqlParser.IS_IPV4, mysqlParser.IS_IPV4_COMPAT, mysqlParser.IS_IPV4_MAPPED, mysqlParser.IS_IPV6, mysqlParser.IS_USED_LOCK, mysqlParser.LAST_INSERT_ID, mysqlParser.LCASE, mysqlParser.LEAST, mysqlParser.LENGTH, mysqlParser.LINEFROMTEXT, mysqlParser.LINEFROMWKB, mysqlParser.LINESTRINGFROMTEXT, mysqlParser.LINESTRINGFROMWKB, mysqlParser.LN, mysqlParser.LOAD_FILE, mysqlParser.LOCATE, mysqlParser.LOG, mysqlParser.LOG10, mysqlParser.LOG2, mysqlParser.LOWER, mysqlParser.LPAD, mysqlParser.LTRIM, mysqlParser.MAKEDATE, mysqlParser.MAKETIME, mysqlParser.MAKE_SET, mysqlParser.MASTER_POS_WAIT, mysqlParser.MBRCONTAINS, mysqlParser.MBRDISJOINT, mysqlParser.MBREQUAL, mysqlParser.MBRINTERSECTS, mysqlParser.MBROVERLAPS, mysqlParser.MBRTOUCHES, mysqlParser.MBRWITHIN, mysqlParser.MD5, mysqlParser.MLINEFROMTEXT, mysqlParser.MLINEFROMWKB, mysqlParser.MONTHNAME, mysqlParser.MPOINTFROMTEXT, mysqlParser.MPOINTFROMWKB, mysqlParser.MPOLYFROMTEXT, mysqlParser.MPOLYFROMWKB, mysqlParser.MULTILINESTRINGFROMTEXT, mysqlParser.MULTILINESTRINGFROMWKB, mysqlParser.MULTIPOINTFROMTEXT, mysqlParser.MULTIPOINTFROMWKB, mysqlParser.MULTIPOLYGONFROMTEXT, mysqlParser.MULTIPOLYGONFROMWKB, mysqlParser.NAME_CONST, mysqlParser.NULLIF, mysqlParser.NUMGEOMETRIES, mysqlParser.NUMINTERIORRINGS, mysqlParser.NUMPOINTS, mysqlParser.OCT, mysqlParser.OCTET_LENGTH, mysqlParser.ORD, mysqlParser.OVERLAPS, mysqlParser.PERIOD_ADD, mysqlParser.PERIOD_DIFF, mysqlParser.PI, mysqlParser.POINTFROMTEXT, mysqlParser.POINTFROMWKB, mysqlParser.POINTN, mysqlParser.POLYFROMTEXT, mysqlParser.POLYFROMWKB, mysqlParser.POLYGONFROMTEXT, mysqlParser.POLYGONFROMWKB, mysqlParser.POW, mysqlParser.POWER, mysqlParser.QUOTE, mysqlParser.RADIANS, mysqlParser.RAND, mysqlParser.RANDOM_BYTES, mysqlParser.RELEASE_LOCK, mysqlParser.REVERSE, mysqlParser.ROUND, mysqlParser.ROW_COUNT, mysqlParser.RPAD, mysqlParser.RTRIM, mysqlParser.SEC_TO_TIME, mysqlParser.SESSION_USER, mysqlParser.SHA, mysqlParser.SHA1, mysqlParser.SHA2, mysqlParser.SIGN, mysqlParser.SIN, mysqlParser.SLEEP, mysqlParser.SOUNDEX, mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, mysqlParser.SQRT, mysqlParser.SRID, mysqlParser.STARTPOINT, mysqlParser.STRCMP, mysqlParser.STR_TO_DATE, mysqlParser.ST_AREA, mysqlParser.ST_ASBINARY, mysqlParser.ST_ASTEXT, mysqlParser.ST_ASWKB, mysqlParser.ST_ASWKT, mysqlParser.ST_BUFFER, mysqlParser.ST_CENTROID, mysqlParser.ST_CONTAINS, mysqlParser.ST_CROSSES, mysqlParser.ST_DIFFERENCE, mysqlParser.ST_DIMENSION, mysqlParser.ST_DISJOINT, mysqlParser.ST_DISTANCE, mysqlParser.ST_ENDPOINT, mysqlParser.ST_ENVELOPE, mysqlParser.ST_EQUALS, mysqlParser.ST_EXTERIORRING, mysqlParser.ST_GEOMCOLLFROMTEXT, mysqlParser.ST_GEOMCOLLFROMTXT, mysqlParser.ST_GEOMCOLLFROMWKB, mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, mysqlParser.ST_GEOMETRYFROMTEXT, mysqlParser.ST_GEOMETRYFROMWKB, mysqlParser.ST_GEOMETRYN, mysqlParser.ST_GEOMETRYTYPE, mysqlParser.ST_GEOMFROMTEXT, mysqlParser.ST_GEOMFROMWKB, mysqlParser.ST_INTERIORRINGN, mysqlParser.ST_INTERSECTION, mysqlParser.ST_INTERSECTS, mysqlParser.ST_ISCLOSED, mysqlParser.ST_ISEMPTY, mysqlParser.ST_ISSIMPLE, mysqlParser.ST_LINEFROMTEXT, mysqlParser.ST_LINEFROMWKB, mysqlParser.ST_LINESTRINGFROMTEXT, mysqlParser.ST_LINESTRINGFROMWKB, mysqlParser.ST_NUMGEOMETRIES, mysqlParser.ST_NUMINTERIORRING, mysqlParser.ST_NUMINTERIORRINGS, mysqlParser.ST_NUMPOINTS, mysqlParser.ST_OVERLAPS, mysqlParser.ST_POINTFROMTEXT, mysqlParser.ST_POINTFROMWKB, mysqlParser.ST_POINTN, mysqlParser.ST_POLYFROMTEXT, mysqlParser.ST_POLYFROMWKB, mysqlParser.ST_POLYGONFROMTEXT, mysqlParser.ST_POLYGONFROMWKB, mysqlParser.ST_SRID, mysqlParser.ST_STARTPOINT, mysqlParser.ST_SYMDIFFERENCE, mysqlParser.ST_TOUCHES, mysqlParser.ST_UNION, mysqlParser.ST_WITHIN, mysqlParser.ST_X, mysqlParser.ST_Y, mysqlParser.SUBDATE, mysqlParser.SUBSTRING_INDEX, mysqlParser.SUBTIME, mysqlParser.SYSTEM_USER, mysqlParser.TAN, mysqlParser.TIMEDIFF, mysqlParser.TIMESTAMPADD, mysqlParser.TIMESTAMPDIFF, mysqlParser.TIME_FORMAT, mysqlParser.TIME_TO_SEC, mysqlParser.TOUCHES, mysqlParser.TO_BASE64, mysqlParser.TO_DAYS, mysqlParser.TO_SECONDS, mysqlParser.UCASE, mysqlParser.UNCOMPRESS, mysqlParser.UNCOMPRESSED_LENGTH, mysqlParser.UNHEX, mysqlParser.UNIX_TIMESTAMP, mysqlParser.UPDATEXML, mysqlParser.UPPER, mysqlParser.UUID, mysqlParser.UUID_SHORT, mysqlParser.VALIDATE_PASSWORD_STRENGTH, mysqlParser.VERSION, mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, mysqlParser.WEEKDAY, mysqlParser.WEEKOFYEAR, mysqlParser.WEIGHT_STRING, mysqlParser.WITHIN, mysqlParser.YEARWEEK, mysqlParser.Y_FUNCTION, mysqlParser.X_FUNCTION, mysqlParser.CHARSET_REVERSE_QOUTE_STRING, mysqlParser.ID, mysqlParser.REVERSE_QUOTE_ID]:
                    self.state = 2357
                    self.uidList()
                    pass
                elif token in [mysqlParser.ALL]:
                    self.state = 2358
                    self.match(mysqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 37:
                localctx = mysqlParser.AlterByCheckPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 2361
                self.match(mysqlParser.CHECK)
                self.state = 2362
                self.match(mysqlParser.PARTITION)
                self.state = 2365
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [mysqlParser.LEFT, mysqlParser.RIGHT, mysqlParser.DATE, mysqlParser.TIME, mysqlParser.TIMESTAMP, mysqlParser.DATETIME, mysqlParser.YEAR, mysqlParser.TEXT, mysqlParser.ENUM, mysqlParser.COUNT, mysqlParser.POSITION, mysqlParser.ACCOUNT, mysqlParser.ACTION, mysqlParser.AFTER, mysqlParser.AGGREGATE, mysqlParser.ALGORITHM, mysqlParser.ANY, mysqlParser.AT, mysqlParser.AUTHORS, mysqlParser.AUTOCOMMIT, mysqlParser.AUTOEXTEND_SIZE, mysqlParser.AUTO_INCREMENT, mysqlParser.AVG_ROW_LENGTH, mysqlParser.BEGIN, mysqlParser.BINLOG, mysqlParser.BIT, mysqlParser.BLOCK, mysqlParser.BTREE, mysqlParser.CASCADED, mysqlParser.CHAIN, mysqlParser.CHANNEL, mysqlParser.CHECKSUM, mysqlParser.CIPHER, mysqlParser.CLIENT, mysqlParser.COALESCE, mysqlParser.CODE, mysqlParser.COLUMNS, mysqlParser.COLUMN_FORMAT, mysqlParser.COMMENT, mysqlParser.COMMIT, mysqlParser.COMPACT, mysqlParser.COMPLETION, mysqlParser.COMPRESSED, mysqlParser.COMPRESSION, mysqlParser.CONCURRENT, mysqlParser.CONNECTION, mysqlParser.CONSISTENT, mysqlParser.CONTAINS, mysqlParser.CONTEXT, mysqlParser.CONTRIBUTORS, mysqlParser.COPY, mysqlParser.CPU, mysqlParser.DATA, mysqlParser.DATAFILE, mysqlParser.DEALLOCATE, mysqlParser.DEFAULT_AUTH, mysqlParser.DEFINER, mysqlParser.DELAY_KEY_WRITE, mysqlParser.DIRECTORY, mysqlParser.DISABLE, mysqlParser.DISCARD, mysqlParser.DISK, mysqlParser.DO, mysqlParser.DUMPFILE, mysqlParser.DUPLICATE, mysqlParser.DYNAMIC, mysqlParser.ENABLE, mysqlParser.ENCRYPTION, mysqlParser.ENDS, mysqlParser.ENGINE, mysqlParser.ENGINES, mysqlParser.ERROR, mysqlParser.ERRORS, mysqlParser.ESCAPE, mysqlParser.EVEN, mysqlParser.EVENT, mysqlParser.EVENTS, mysqlParser.EVERY, mysqlParser.EXCHANGE, mysqlParser.EXCLUSIVE, mysqlParser.EXPIRE, mysqlParser.EXTENT_SIZE, mysqlParser.FAULTS, mysqlParser.FIELDS, mysqlParser.FILE_BLOCK_SIZE, mysqlParser.FILTER, mysqlParser.FIRST, mysqlParser.FIXED, mysqlParser.FOLLOWS, mysqlParser.FULL, mysqlParser.FUNCTION, mysqlParser.GLOBAL, mysqlParser.GRANTS, mysqlParser.GROUP_REPLICATION, mysqlParser.HASH, mysqlParser.HOST, mysqlParser.IDENTIFIED, mysqlParser.IGNORE_SERVER_IDS, mysqlParser.IMPORT, mysqlParser.INDEXES, mysqlParser.INITIAL_SIZE, mysqlParser.INPLACE, mysqlParser.INSERT_METHOD, mysqlParser.INSTANCE, mysqlParser.INVOKER, mysqlParser.IO, mysqlParser.IO_THREAD, mysqlParser.IPC, mysqlParser.ISOLATION, mysqlParser.ISSUER, mysqlParser.KEY_BLOCK_SIZE, mysqlParser.LANGUAGE, mysqlParser.LAST, mysqlParser.LEAVES, mysqlParser.LESS, mysqlParser.LEVEL, mysqlParser.LIST, mysqlParser.LOCAL, mysqlParser.LOGFILE, mysqlParser.LOGS, mysqlParser.MASTER, mysqlParser.MASTER_AUTO_POSITION, mysqlParser.MASTER_CONNECT_RETRY, mysqlParser.MASTER_DELAY, mysqlParser.MASTER_HEARTBEAT_PERIOD, mysqlParser.MASTER_HOST, mysqlParser.MASTER_LOG_FILE, mysqlParser.MASTER_LOG_POS, mysqlParser.MASTER_PASSWORD, mysqlParser.MASTER_PORT, mysqlParser.MASTER_RETRY_COUNT, mysqlParser.MASTER_SSL, mysqlParser.MASTER_SSL_CA, mysqlParser.MASTER_SSL_CAPATH, mysqlParser.MASTER_SSL_CERT, mysqlParser.MASTER_SSL_CIPHER, mysqlParser.MASTER_SSL_CRL, mysqlParser.MASTER_SSL_CRLPATH, mysqlParser.MASTER_SSL_KEY, mysqlParser.MASTER_TLS_VERSION, mysqlParser.MASTER_USER, mysqlParser.MAX_CONNECTIONS_PER_HOUR, mysqlParser.MAX_QUERIES_PER_HOUR, mysqlParser.MAX_ROWS, mysqlParser.MAX_SIZE, mysqlParser.MAX_UPDATES_PER_HOUR, mysqlParser.MAX_USER_CONNECTIONS, mysqlParser.MERGE, mysqlParser.MID, mysqlParser.MIGRATE, mysqlParser.MIN_ROWS, mysqlParser.MODIFY, mysqlParser.MUTEX, mysqlParser.MYSQL, mysqlParser.NAME, mysqlParser.NAMES, mysqlParser.NCHAR, mysqlParser.NEVER, mysqlParser.NO, mysqlParser.NODEGROUP, mysqlParser.NONE, mysqlParser.OFFLINE, mysqlParser.OFFSET, mysqlParser.OJ, mysqlParser.OLD_PASSWORD, mysqlParser.ONE, mysqlParser.ONLINE, mysqlParser.ONLY, mysqlParser.OPTIMIZER_COSTS, mysqlParser.OPTIONS, mysqlParser.OWNER, mysqlParser.PACK_KEYS, mysqlParser.PAGE, mysqlParser.PARSER, mysqlParser.PARTIAL, mysqlParser.PARTITIONING, mysqlParser.PARTITIONS, mysqlParser.PASSWORD, mysqlParser.PHASE, mysqlParser.PLUGIN_DIR, mysqlParser.PLUGINS, mysqlParser.PORT, mysqlParser.PRECEDES, mysqlParser.PREPARE, mysqlParser.PRESERVE, mysqlParser.PREV, mysqlParser.PROCESSLIST, mysqlParser.PROFILE, mysqlParser.PROFILES, mysqlParser.PROXY, mysqlParser.QUERY, mysqlParser.QUICK, mysqlParser.REBUILD, mysqlParser.RECOVER, mysqlParser.REDO_BUFFER_SIZE, mysqlParser.REDUNDANT, mysqlParser.RELAY_LOG_FILE, mysqlParser.RELAY_LOG_POS, mysqlParser.RELAYLOG, mysqlParser.REMOVE, mysqlParser.REORGANIZE, mysqlParser.REPAIR, mysqlParser.REPLICATE_DO_DB, mysqlParser.REPLICATE_DO_TABLE, mysqlParser.REPLICATE_IGNORE_DB, mysqlParser.REPLICATE_IGNORE_TABLE, mysqlParser.REPLICATE_REWRITE_DB, mysqlParser.REPLICATE_WILD_DO_TABLE, mysqlParser.REPLICATE_WILD_IGNORE_TABLE, mysqlParser.REPLICATION, mysqlParser.RESUME, mysqlParser.RETURNS, mysqlParser.ROLLBACK, mysqlParser.ROLLUP, mysqlParser.ROTATE, mysqlParser.ROW, mysqlParser.ROWS, mysqlParser.ROW_FORMAT, mysqlParser.SAVEPOINT, mysqlParser.SCHEDULE, mysqlParser.SECURITY, mysqlParser.SERVER, mysqlParser.SESSION, mysqlParser.SHARE, mysqlParser.SHARED, mysqlParser.SIGNED, mysqlParser.SIMPLE, mysqlParser.SLAVE, mysqlParser.SNAPSHOT, mysqlParser.SOCKET, mysqlParser.SOME, mysqlParser.SOUNDS, mysqlParser.SOURCE, mysqlParser.SQL_AFTER_GTIDS, mysqlParser.SQL_AFTER_MTS_GAPS, mysqlParser.SQL_BEFORE_GTIDS, mysqlParser.SQL_BUFFER_RESULT, mysqlParser.SQL_CACHE, mysqlParser.SQL_NO_CACHE, mysqlParser.SQL_THREAD, mysqlParser.START, mysqlParser.STARTS, mysqlParser.STATS_AUTO_RECALC, mysqlParser.STATS_PERSISTENT, mysqlParser.STATS_SAMPLE_PAGES, mysqlParser.STATUS, mysqlParser.STOP, mysqlParser.STORAGE, mysqlParser.STRING, mysqlParser.SUBJECT, mysqlParser.SUBPARTITION, mysqlParser.SUBPARTITIONS, mysqlParser.SUSPEND, mysqlParser.SWAPS, mysqlParser.SWITCHES, mysqlParser.TABLESPACE, mysqlParser.TEMPORARY, mysqlParser.TEMPTABLE, mysqlParser.THAN, mysqlParser.TRANSACTION, mysqlParser.TRUNCATE, mysqlParser.UNDEFINED, mysqlParser.UNDOFILE, mysqlParser.UNDO_BUFFER_SIZE, mysqlParser.UNKNOWN, mysqlParser.UPGRADE, mysqlParser.USER, mysqlParser.VALIDATION, mysqlParser.VALUE, mysqlParser.VARIABLES, mysqlParser.VIEW, mysqlParser.WAIT, mysqlParser.WARNINGS, mysqlParser.WITHOUT, mysqlParser.WORK, mysqlParser.WRAPPER, mysqlParser.X509, mysqlParser.XA, mysqlParser.XML, mysqlParser.QUARTER, mysqlParser.MONTH, mysqlParser.DAY, mysqlParser.HOUR, mysqlParser.MINUTE, mysqlParser.WEEK, mysqlParser.SECOND, mysqlParser.MICROSECOND, mysqlParser.TABLES, mysqlParser.ROUTINE, mysqlParser.EXECUTE, mysqlParser.FILE, mysqlParser.PROCESS, mysqlParser.RELOAD, mysqlParser.SHUTDOWN, mysqlParser.SUPER, mysqlParser.PRIVILEGES, mysqlParser.ARMSCII8, mysqlParser.ASCII, mysqlParser.BIG5, mysqlParser.CP1250, mysqlParser.CP1251, mysqlParser.CP1256, mysqlParser.CP1257, mysqlParser.CP850, mysqlParser.CP852, mysqlParser.CP866, mysqlParser.CP932, mysqlParser.DEC8, mysqlParser.EUCJPMS, mysqlParser.EUCKR, mysqlParser.GB2312, mysqlParser.GBK, mysqlParser.GEOSTD8, mysqlParser.GREEK, mysqlParser.HEBREW, mysqlParser.HP8, mysqlParser.KEYBCS2, mysqlParser.KOI8R, mysqlParser.KOI8U, mysqlParser.LATIN1, mysqlParser.LATIN2, mysqlParser.LATIN5, mysqlParser.LATIN7, mysqlParser.MACCE, mysqlParser.MACROMAN, mysqlParser.SJIS, mysqlParser.SWE7, mysqlParser.TIS620, mysqlParser.UCS2, mysqlParser.UJIS, mysqlParser.UTF16, mysqlParser.UTF16LE, mysqlParser.UTF32, mysqlParser.UTF8, mysqlParser.UTF8MB3, mysqlParser.UTF8MB4, mysqlParser.ARCHIVE, mysqlParser.BLACKHOLE, mysqlParser.CSV, mysqlParser.FEDERATED, mysqlParser.INNODB, mysqlParser.MEMORY, mysqlParser.MRG_MYISAM, mysqlParser.MYISAM, mysqlParser.NDB, mysqlParser.NDBCLUSTER, mysqlParser.PERFOMANCE_SCHEMA, mysqlParser.REPEATABLE, mysqlParser.COMMITTED, mysqlParser.UNCOMMITTED, mysqlParser.SERIALIZABLE, mysqlParser.GEOMETRYCOLLECTION, mysqlParser.LINESTRING, mysqlParser.MULTILINESTRING, mysqlParser.MULTIPOINT, mysqlParser.MULTIPOLYGON, mysqlParser.POINT, mysqlParser.POLYGON, mysqlParser.ABS, mysqlParser.ACOS, mysqlParser.ADDDATE, mysqlParser.ADDTIME, mysqlParser.AES_DECRYPT, mysqlParser.AES_ENCRYPT, mysqlParser.AREA, mysqlParser.ASBINARY, mysqlParser.ASIN, mysqlParser.ASTEXT, mysqlParser.ASWKB, mysqlParser.ASWKT, mysqlParser.ASYMMETRIC_DECRYPT, mysqlParser.ASYMMETRIC_DERIVE, mysqlParser.ASYMMETRIC_ENCRYPT, mysqlParser.ASYMMETRIC_SIGN, mysqlParser.ASYMMETRIC_VERIFY, mysqlParser.ATAN, mysqlParser.ATAN2, mysqlParser.BENCHMARK, mysqlParser.BIN, mysqlParser.BIT_COUNT, mysqlParser.BIT_LENGTH, mysqlParser.BUFFER, mysqlParser.CEIL, mysqlParser.CEILING, mysqlParser.CENTROID, mysqlParser.CHARACTER_LENGTH, mysqlParser.CHARSET, mysqlParser.CHAR_LENGTH, mysqlParser.COERCIBILITY, mysqlParser.COLLATION, mysqlParser.COMPRESS, mysqlParser.CONCAT, mysqlParser.CONCAT_WS, mysqlParser.CONNECTION_ID, mysqlParser.CONV, mysqlParser.CONVERT_TZ, mysqlParser.COS, mysqlParser.COT, mysqlParser.CRC32, mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY, mysqlParser.CREATE_ASYMMETRIC_PUB_KEY, mysqlParser.CREATE_DH_PARAMETERS, mysqlParser.CREATE_DIGEST, mysqlParser.CROSSES, mysqlParser.DATEDIFF, mysqlParser.DATE_FORMAT, mysqlParser.DAYNAME, mysqlParser.DAYOFMONTH, mysqlParser.DAYOFWEEK, mysqlParser.DAYOFYEAR, mysqlParser.DECODE, mysqlParser.DEGREES, mysqlParser.DES_DECRYPT, mysqlParser.DES_ENCRYPT, mysqlParser.DIMENSION, mysqlParser.DISJOINT, mysqlParser.ELT, mysqlParser.ENCODE, mysqlParser.ENCRYPT, mysqlParser.ENDPOINT, mysqlParser.ENVELOPE, mysqlParser.EQUALS, mysqlParser.EXP, mysqlParser.EXPORT_SET, mysqlParser.EXTERIORRING, mysqlParser.EXTRACTVALUE, mysqlParser.FIELD, mysqlParser.FIND_IN_SET, mysqlParser.FLOOR, mysqlParser.FORMAT, mysqlParser.FOUND_ROWS, mysqlParser.FROM_BASE64, mysqlParser.FROM_DAYS, mysqlParser.FROM_UNIXTIME, mysqlParser.GEOMCOLLFROMTEXT, mysqlParser.GEOMCOLLFROMWKB, mysqlParser.GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.GEOMETRYCOLLECTIONFROMWKB, mysqlParser.GEOMETRYFROMTEXT, mysqlParser.GEOMETRYFROMWKB, mysqlParser.GEOMETRYN, mysqlParser.GEOMETRYTYPE, mysqlParser.GEOMFROMTEXT, mysqlParser.GEOMFROMWKB, mysqlParser.GET_FORMAT, mysqlParser.GET_LOCK, mysqlParser.GLENGTH, mysqlParser.GREATEST, mysqlParser.GTID_SUBSET, mysqlParser.GTID_SUBTRACT, mysqlParser.HEX, mysqlParser.IFNULL, mysqlParser.INET6_ATON, mysqlParser.INET6_NTOA, mysqlParser.INET_ATON, mysqlParser.INET_NTOA, mysqlParser.INSTR, mysqlParser.INTERIORRINGN, mysqlParser.INTERSECTS, mysqlParser.ISCLOSED, mysqlParser.ISEMPTY, mysqlParser.ISNULL, mysqlParser.ISSIMPLE, mysqlParser.IS_FREE_LOCK, mysqlParser.IS_IPV4, mysqlParser.IS_IPV4_COMPAT, mysqlParser.IS_IPV4_MAPPED, mysqlParser.IS_IPV6, mysqlParser.IS_USED_LOCK, mysqlParser.LAST_INSERT_ID, mysqlParser.LCASE, mysqlParser.LEAST, mysqlParser.LENGTH, mysqlParser.LINEFROMTEXT, mysqlParser.LINEFROMWKB, mysqlParser.LINESTRINGFROMTEXT, mysqlParser.LINESTRINGFROMWKB, mysqlParser.LN, mysqlParser.LOAD_FILE, mysqlParser.LOCATE, mysqlParser.LOG, mysqlParser.LOG10, mysqlParser.LOG2, mysqlParser.LOWER, mysqlParser.LPAD, mysqlParser.LTRIM, mysqlParser.MAKEDATE, mysqlParser.MAKETIME, mysqlParser.MAKE_SET, mysqlParser.MASTER_POS_WAIT, mysqlParser.MBRCONTAINS, mysqlParser.MBRDISJOINT, mysqlParser.MBREQUAL, mysqlParser.MBRINTERSECTS, mysqlParser.MBROVERLAPS, mysqlParser.MBRTOUCHES, mysqlParser.MBRWITHIN, mysqlParser.MD5, mysqlParser.MLINEFROMTEXT, mysqlParser.MLINEFROMWKB, mysqlParser.MONTHNAME, mysqlParser.MPOINTFROMTEXT, mysqlParser.MPOINTFROMWKB, mysqlParser.MPOLYFROMTEXT, mysqlParser.MPOLYFROMWKB, mysqlParser.MULTILINESTRINGFROMTEXT, mysqlParser.MULTILINESTRINGFROMWKB, mysqlParser.MULTIPOINTFROMTEXT, mysqlParser.MULTIPOINTFROMWKB, mysqlParser.MULTIPOLYGONFROMTEXT, mysqlParser.MULTIPOLYGONFROMWKB, mysqlParser.NAME_CONST, mysqlParser.NULLIF, mysqlParser.NUMGEOMETRIES, mysqlParser.NUMINTERIORRINGS, mysqlParser.NUMPOINTS, mysqlParser.OCT, mysqlParser.OCTET_LENGTH, mysqlParser.ORD, mysqlParser.OVERLAPS, mysqlParser.PERIOD_ADD, mysqlParser.PERIOD_DIFF, mysqlParser.PI, mysqlParser.POINTFROMTEXT, mysqlParser.POINTFROMWKB, mysqlParser.POINTN, mysqlParser.POLYFROMTEXT, mysqlParser.POLYFROMWKB, mysqlParser.POLYGONFROMTEXT, mysqlParser.POLYGONFROMWKB, mysqlParser.POW, mysqlParser.POWER, mysqlParser.QUOTE, mysqlParser.RADIANS, mysqlParser.RAND, mysqlParser.RANDOM_BYTES, mysqlParser.RELEASE_LOCK, mysqlParser.REVERSE, mysqlParser.ROUND, mysqlParser.ROW_COUNT, mysqlParser.RPAD, mysqlParser.RTRIM, mysqlParser.SEC_TO_TIME, mysqlParser.SESSION_USER, mysqlParser.SHA, mysqlParser.SHA1, mysqlParser.SHA2, mysqlParser.SIGN, mysqlParser.SIN, mysqlParser.SLEEP, mysqlParser.SOUNDEX, mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, mysqlParser.SQRT, mysqlParser.SRID, mysqlParser.STARTPOINT, mysqlParser.STRCMP, mysqlParser.STR_TO_DATE, mysqlParser.ST_AREA, mysqlParser.ST_ASBINARY, mysqlParser.ST_ASTEXT, mysqlParser.ST_ASWKB, mysqlParser.ST_ASWKT, mysqlParser.ST_BUFFER, mysqlParser.ST_CENTROID, mysqlParser.ST_CONTAINS, mysqlParser.ST_CROSSES, mysqlParser.ST_DIFFERENCE, mysqlParser.ST_DIMENSION, mysqlParser.ST_DISJOINT, mysqlParser.ST_DISTANCE, mysqlParser.ST_ENDPOINT, mysqlParser.ST_ENVELOPE, mysqlParser.ST_EQUALS, mysqlParser.ST_EXTERIORRING, mysqlParser.ST_GEOMCOLLFROMTEXT, mysqlParser.ST_GEOMCOLLFROMTXT, mysqlParser.ST_GEOMCOLLFROMWKB, mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, mysqlParser.ST_GEOMETRYFROMTEXT, mysqlParser.ST_GEOMETRYFROMWKB, mysqlParser.ST_GEOMETRYN, mysqlParser.ST_GEOMETRYTYPE, mysqlParser.ST_GEOMFROMTEXT, mysqlParser.ST_GEOMFROMWKB, mysqlParser.ST_INTERIORRINGN, mysqlParser.ST_INTERSECTION, mysqlParser.ST_INTERSECTS, mysqlParser.ST_ISCLOSED, mysqlParser.ST_ISEMPTY, mysqlParser.ST_ISSIMPLE, mysqlParser.ST_LINEFROMTEXT, mysqlParser.ST_LINEFROMWKB, mysqlParser.ST_LINESTRINGFROMTEXT, mysqlParser.ST_LINESTRINGFROMWKB, mysqlParser.ST_NUMGEOMETRIES, mysqlParser.ST_NUMINTERIORRING, mysqlParser.ST_NUMINTERIORRINGS, mysqlParser.ST_NUMPOINTS, mysqlParser.ST_OVERLAPS, mysqlParser.ST_POINTFROMTEXT, mysqlParser.ST_POINTFROMWKB, mysqlParser.ST_POINTN, mysqlParser.ST_POLYFROMTEXT, mysqlParser.ST_POLYFROMWKB, mysqlParser.ST_POLYGONFROMTEXT, mysqlParser.ST_POLYGONFROMWKB, mysqlParser.ST_SRID, mysqlParser.ST_STARTPOINT, mysqlParser.ST_SYMDIFFERENCE, mysqlParser.ST_TOUCHES, mysqlParser.ST_UNION, mysqlParser.ST_WITHIN, mysqlParser.ST_X, mysqlParser.ST_Y, mysqlParser.SUBDATE, mysqlParser.SUBSTRING_INDEX, mysqlParser.SUBTIME, mysqlParser.SYSTEM_USER, mysqlParser.TAN, mysqlParser.TIMEDIFF, mysqlParser.TIMESTAMPADD, mysqlParser.TIMESTAMPDIFF, mysqlParser.TIME_FORMAT, mysqlParser.TIME_TO_SEC, mysqlParser.TOUCHES, mysqlParser.TO_BASE64, mysqlParser.TO_DAYS, mysqlParser.TO_SECONDS, mysqlParser.UCASE, mysqlParser.UNCOMPRESS, mysqlParser.UNCOMPRESSED_LENGTH, mysqlParser.UNHEX, mysqlParser.UNIX_TIMESTAMP, mysqlParser.UPDATEXML, mysqlParser.UPPER, mysqlParser.UUID, mysqlParser.UUID_SHORT, mysqlParser.VALIDATE_PASSWORD_STRENGTH, mysqlParser.VERSION, mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, mysqlParser.WEEKDAY, mysqlParser.WEEKOFYEAR, mysqlParser.WEIGHT_STRING, mysqlParser.WITHIN, mysqlParser.YEARWEEK, mysqlParser.Y_FUNCTION, mysqlParser.X_FUNCTION, mysqlParser.CHARSET_REVERSE_QOUTE_STRING, mysqlParser.ID, mysqlParser.REVERSE_QUOTE_ID]:
                    self.state = 2363
                    self.uidList()
                    pass
                elif token in [mysqlParser.ALL]:
                    self.state = 2364
                    self.match(mysqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 38:
                localctx = mysqlParser.AlterByOptimizePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 2367
                self.match(mysqlParser.OPTIMIZE)
                self.state = 2368
                self.match(mysqlParser.PARTITION)
                self.state = 2371
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [mysqlParser.LEFT, mysqlParser.RIGHT, mysqlParser.DATE, mysqlParser.TIME, mysqlParser.TIMESTAMP, mysqlParser.DATETIME, mysqlParser.YEAR, mysqlParser.TEXT, mysqlParser.ENUM, mysqlParser.COUNT, mysqlParser.POSITION, mysqlParser.ACCOUNT, mysqlParser.ACTION, mysqlParser.AFTER, mysqlParser.AGGREGATE, mysqlParser.ALGORITHM, mysqlParser.ANY, mysqlParser.AT, mysqlParser.AUTHORS, mysqlParser.AUTOCOMMIT, mysqlParser.AUTOEXTEND_SIZE, mysqlParser.AUTO_INCREMENT, mysqlParser.AVG_ROW_LENGTH, mysqlParser.BEGIN, mysqlParser.BINLOG, mysqlParser.BIT, mysqlParser.BLOCK, mysqlParser.BTREE, mysqlParser.CASCADED, mysqlParser.CHAIN, mysqlParser.CHANNEL, mysqlParser.CHECKSUM, mysqlParser.CIPHER, mysqlParser.CLIENT, mysqlParser.COALESCE, mysqlParser.CODE, mysqlParser.COLUMNS, mysqlParser.COLUMN_FORMAT, mysqlParser.COMMENT, mysqlParser.COMMIT, mysqlParser.COMPACT, mysqlParser.COMPLETION, mysqlParser.COMPRESSED, mysqlParser.COMPRESSION, mysqlParser.CONCURRENT, mysqlParser.CONNECTION, mysqlParser.CONSISTENT, mysqlParser.CONTAINS, mysqlParser.CONTEXT, mysqlParser.CONTRIBUTORS, mysqlParser.COPY, mysqlParser.CPU, mysqlParser.DATA, mysqlParser.DATAFILE, mysqlParser.DEALLOCATE, mysqlParser.DEFAULT_AUTH, mysqlParser.DEFINER, mysqlParser.DELAY_KEY_WRITE, mysqlParser.DIRECTORY, mysqlParser.DISABLE, mysqlParser.DISCARD, mysqlParser.DISK, mysqlParser.DO, mysqlParser.DUMPFILE, mysqlParser.DUPLICATE, mysqlParser.DYNAMIC, mysqlParser.ENABLE, mysqlParser.ENCRYPTION, mysqlParser.ENDS, mysqlParser.ENGINE, mysqlParser.ENGINES, mysqlParser.ERROR, mysqlParser.ERRORS, mysqlParser.ESCAPE, mysqlParser.EVEN, mysqlParser.EVENT, mysqlParser.EVENTS, mysqlParser.EVERY, mysqlParser.EXCHANGE, mysqlParser.EXCLUSIVE, mysqlParser.EXPIRE, mysqlParser.EXTENT_SIZE, mysqlParser.FAULTS, mysqlParser.FIELDS, mysqlParser.FILE_BLOCK_SIZE, mysqlParser.FILTER, mysqlParser.FIRST, mysqlParser.FIXED, mysqlParser.FOLLOWS, mysqlParser.FULL, mysqlParser.FUNCTION, mysqlParser.GLOBAL, mysqlParser.GRANTS, mysqlParser.GROUP_REPLICATION, mysqlParser.HASH, mysqlParser.HOST, mysqlParser.IDENTIFIED, mysqlParser.IGNORE_SERVER_IDS, mysqlParser.IMPORT, mysqlParser.INDEXES, mysqlParser.INITIAL_SIZE, mysqlParser.INPLACE, mysqlParser.INSERT_METHOD, mysqlParser.INSTANCE, mysqlParser.INVOKER, mysqlParser.IO, mysqlParser.IO_THREAD, mysqlParser.IPC, mysqlParser.ISOLATION, mysqlParser.ISSUER, mysqlParser.KEY_BLOCK_SIZE, mysqlParser.LANGUAGE, mysqlParser.LAST, mysqlParser.LEAVES, mysqlParser.LESS, mysqlParser.LEVEL, mysqlParser.LIST, mysqlParser.LOCAL, mysqlParser.LOGFILE, mysqlParser.LOGS, mysqlParser.MASTER, mysqlParser.MASTER_AUTO_POSITION, mysqlParser.MASTER_CONNECT_RETRY, mysqlParser.MASTER_DELAY, mysqlParser.MASTER_HEARTBEAT_PERIOD, mysqlParser.MASTER_HOST, mysqlParser.MASTER_LOG_FILE, mysqlParser.MASTER_LOG_POS, mysqlParser.MASTER_PASSWORD, mysqlParser.MASTER_PORT, mysqlParser.MASTER_RETRY_COUNT, mysqlParser.MASTER_SSL, mysqlParser.MASTER_SSL_CA, mysqlParser.MASTER_SSL_CAPATH, mysqlParser.MASTER_SSL_CERT, mysqlParser.MASTER_SSL_CIPHER, mysqlParser.MASTER_SSL_CRL, mysqlParser.MASTER_SSL_CRLPATH, mysqlParser.MASTER_SSL_KEY, mysqlParser.MASTER_TLS_VERSION, mysqlParser.MASTER_USER, mysqlParser.MAX_CONNECTIONS_PER_HOUR, mysqlParser.MAX_QUERIES_PER_HOUR, mysqlParser.MAX_ROWS, mysqlParser.MAX_SIZE, mysqlParser.MAX_UPDATES_PER_HOUR, mysqlParser.MAX_USER_CONNECTIONS, mysqlParser.MERGE, mysqlParser.MID, mysqlParser.MIGRATE, mysqlParser.MIN_ROWS, mysqlParser.MODIFY, mysqlParser.MUTEX, mysqlParser.MYSQL, mysqlParser.NAME, mysqlParser.NAMES, mysqlParser.NCHAR, mysqlParser.NEVER, mysqlParser.NO, mysqlParser.NODEGROUP, mysqlParser.NONE, mysqlParser.OFFLINE, mysqlParser.OFFSET, mysqlParser.OJ, mysqlParser.OLD_PASSWORD, mysqlParser.ONE, mysqlParser.ONLINE, mysqlParser.ONLY, mysqlParser.OPTIMIZER_COSTS, mysqlParser.OPTIONS, mysqlParser.OWNER, mysqlParser.PACK_KEYS, mysqlParser.PAGE, mysqlParser.PARSER, mysqlParser.PARTIAL, mysqlParser.PARTITIONING, mysqlParser.PARTITIONS, mysqlParser.PASSWORD, mysqlParser.PHASE, mysqlParser.PLUGIN_DIR, mysqlParser.PLUGINS, mysqlParser.PORT, mysqlParser.PRECEDES, mysqlParser.PREPARE, mysqlParser.PRESERVE, mysqlParser.PREV, mysqlParser.PROCESSLIST, mysqlParser.PROFILE, mysqlParser.PROFILES, mysqlParser.PROXY, mysqlParser.QUERY, mysqlParser.QUICK, mysqlParser.REBUILD, mysqlParser.RECOVER, mysqlParser.REDO_BUFFER_SIZE, mysqlParser.REDUNDANT, mysqlParser.RELAY_LOG_FILE, mysqlParser.RELAY_LOG_POS, mysqlParser.RELAYLOG, mysqlParser.REMOVE, mysqlParser.REORGANIZE, mysqlParser.REPAIR, mysqlParser.REPLICATE_DO_DB, mysqlParser.REPLICATE_DO_TABLE, mysqlParser.REPLICATE_IGNORE_DB, mysqlParser.REPLICATE_IGNORE_TABLE, mysqlParser.REPLICATE_REWRITE_DB, mysqlParser.REPLICATE_WILD_DO_TABLE, mysqlParser.REPLICATE_WILD_IGNORE_TABLE, mysqlParser.REPLICATION, mysqlParser.RESUME, mysqlParser.RETURNS, mysqlParser.ROLLBACK, mysqlParser.ROLLUP, mysqlParser.ROTATE, mysqlParser.ROW, mysqlParser.ROWS, mysqlParser.ROW_FORMAT, mysqlParser.SAVEPOINT, mysqlParser.SCHEDULE, mysqlParser.SECURITY, mysqlParser.SERVER, mysqlParser.SESSION, mysqlParser.SHARE, mysqlParser.SHARED, mysqlParser.SIGNED, mysqlParser.SIMPLE, mysqlParser.SLAVE, mysqlParser.SNAPSHOT, mysqlParser.SOCKET, mysqlParser.SOME, mysqlParser.SOUNDS, mysqlParser.SOURCE, mysqlParser.SQL_AFTER_GTIDS, mysqlParser.SQL_AFTER_MTS_GAPS, mysqlParser.SQL_BEFORE_GTIDS, mysqlParser.SQL_BUFFER_RESULT, mysqlParser.SQL_CACHE, mysqlParser.SQL_NO_CACHE, mysqlParser.SQL_THREAD, mysqlParser.START, mysqlParser.STARTS, mysqlParser.STATS_AUTO_RECALC, mysqlParser.STATS_PERSISTENT, mysqlParser.STATS_SAMPLE_PAGES, mysqlParser.STATUS, mysqlParser.STOP, mysqlParser.STORAGE, mysqlParser.STRING, mysqlParser.SUBJECT, mysqlParser.SUBPARTITION, mysqlParser.SUBPARTITIONS, mysqlParser.SUSPEND, mysqlParser.SWAPS, mysqlParser.SWITCHES, mysqlParser.TABLESPACE, mysqlParser.TEMPORARY, mysqlParser.TEMPTABLE, mysqlParser.THAN, mysqlParser.TRANSACTION, mysqlParser.TRUNCATE, mysqlParser.UNDEFINED, mysqlParser.UNDOFILE, mysqlParser.UNDO_BUFFER_SIZE, mysqlParser.UNKNOWN, mysqlParser.UPGRADE, mysqlParser.USER, mysqlParser.VALIDATION, mysqlParser.VALUE, mysqlParser.VARIABLES, mysqlParser.VIEW, mysqlParser.WAIT, mysqlParser.WARNINGS, mysqlParser.WITHOUT, mysqlParser.WORK, mysqlParser.WRAPPER, mysqlParser.X509, mysqlParser.XA, mysqlParser.XML, mysqlParser.QUARTER, mysqlParser.MONTH, mysqlParser.DAY, mysqlParser.HOUR, mysqlParser.MINUTE, mysqlParser.WEEK, mysqlParser.SECOND, mysqlParser.MICROSECOND, mysqlParser.TABLES, mysqlParser.ROUTINE, mysqlParser.EXECUTE, mysqlParser.FILE, mysqlParser.PROCESS, mysqlParser.RELOAD, mysqlParser.SHUTDOWN, mysqlParser.SUPER, mysqlParser.PRIVILEGES, mysqlParser.ARMSCII8, mysqlParser.ASCII, mysqlParser.BIG5, mysqlParser.CP1250, mysqlParser.CP1251, mysqlParser.CP1256, mysqlParser.CP1257, mysqlParser.CP850, mysqlParser.CP852, mysqlParser.CP866, mysqlParser.CP932, mysqlParser.DEC8, mysqlParser.EUCJPMS, mysqlParser.EUCKR, mysqlParser.GB2312, mysqlParser.GBK, mysqlParser.GEOSTD8, mysqlParser.GREEK, mysqlParser.HEBREW, mysqlParser.HP8, mysqlParser.KEYBCS2, mysqlParser.KOI8R, mysqlParser.KOI8U, mysqlParser.LATIN1, mysqlParser.LATIN2, mysqlParser.LATIN5, mysqlParser.LATIN7, mysqlParser.MACCE, mysqlParser.MACROMAN, mysqlParser.SJIS, mysqlParser.SWE7, mysqlParser.TIS620, mysqlParser.UCS2, mysqlParser.UJIS, mysqlParser.UTF16, mysqlParser.UTF16LE, mysqlParser.UTF32, mysqlParser.UTF8, mysqlParser.UTF8MB3, mysqlParser.UTF8MB4, mysqlParser.ARCHIVE, mysqlParser.BLACKHOLE, mysqlParser.CSV, mysqlParser.FEDERATED, mysqlParser.INNODB, mysqlParser.MEMORY, mysqlParser.MRG_MYISAM, mysqlParser.MYISAM, mysqlParser.NDB, mysqlParser.NDBCLUSTER, mysqlParser.PERFOMANCE_SCHEMA, mysqlParser.REPEATABLE, mysqlParser.COMMITTED, mysqlParser.UNCOMMITTED, mysqlParser.SERIALIZABLE, mysqlParser.GEOMETRYCOLLECTION, mysqlParser.LINESTRING, mysqlParser.MULTILINESTRING, mysqlParser.MULTIPOINT, mysqlParser.MULTIPOLYGON, mysqlParser.POINT, mysqlParser.POLYGON, mysqlParser.ABS, mysqlParser.ACOS, mysqlParser.ADDDATE, mysqlParser.ADDTIME, mysqlParser.AES_DECRYPT, mysqlParser.AES_ENCRYPT, mysqlParser.AREA, mysqlParser.ASBINARY, mysqlParser.ASIN, mysqlParser.ASTEXT, mysqlParser.ASWKB, mysqlParser.ASWKT, mysqlParser.ASYMMETRIC_DECRYPT, mysqlParser.ASYMMETRIC_DERIVE, mysqlParser.ASYMMETRIC_ENCRYPT, mysqlParser.ASYMMETRIC_SIGN, mysqlParser.ASYMMETRIC_VERIFY, mysqlParser.ATAN, mysqlParser.ATAN2, mysqlParser.BENCHMARK, mysqlParser.BIN, mysqlParser.BIT_COUNT, mysqlParser.BIT_LENGTH, mysqlParser.BUFFER, mysqlParser.CEIL, mysqlParser.CEILING, mysqlParser.CENTROID, mysqlParser.CHARACTER_LENGTH, mysqlParser.CHARSET, mysqlParser.CHAR_LENGTH, mysqlParser.COERCIBILITY, mysqlParser.COLLATION, mysqlParser.COMPRESS, mysqlParser.CONCAT, mysqlParser.CONCAT_WS, mysqlParser.CONNECTION_ID, mysqlParser.CONV, mysqlParser.CONVERT_TZ, mysqlParser.COS, mysqlParser.COT, mysqlParser.CRC32, mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY, mysqlParser.CREATE_ASYMMETRIC_PUB_KEY, mysqlParser.CREATE_DH_PARAMETERS, mysqlParser.CREATE_DIGEST, mysqlParser.CROSSES, mysqlParser.DATEDIFF, mysqlParser.DATE_FORMAT, mysqlParser.DAYNAME, mysqlParser.DAYOFMONTH, mysqlParser.DAYOFWEEK, mysqlParser.DAYOFYEAR, mysqlParser.DECODE, mysqlParser.DEGREES, mysqlParser.DES_DECRYPT, mysqlParser.DES_ENCRYPT, mysqlParser.DIMENSION, mysqlParser.DISJOINT, mysqlParser.ELT, mysqlParser.ENCODE, mysqlParser.ENCRYPT, mysqlParser.ENDPOINT, mysqlParser.ENVELOPE, mysqlParser.EQUALS, mysqlParser.EXP, mysqlParser.EXPORT_SET, mysqlParser.EXTERIORRING, mysqlParser.EXTRACTVALUE, mysqlParser.FIELD, mysqlParser.FIND_IN_SET, mysqlParser.FLOOR, mysqlParser.FORMAT, mysqlParser.FOUND_ROWS, mysqlParser.FROM_BASE64, mysqlParser.FROM_DAYS, mysqlParser.FROM_UNIXTIME, mysqlParser.GEOMCOLLFROMTEXT, mysqlParser.GEOMCOLLFROMWKB, mysqlParser.GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.GEOMETRYCOLLECTIONFROMWKB, mysqlParser.GEOMETRYFROMTEXT, mysqlParser.GEOMETRYFROMWKB, mysqlParser.GEOMETRYN, mysqlParser.GEOMETRYTYPE, mysqlParser.GEOMFROMTEXT, mysqlParser.GEOMFROMWKB, mysqlParser.GET_FORMAT, mysqlParser.GET_LOCK, mysqlParser.GLENGTH, mysqlParser.GREATEST, mysqlParser.GTID_SUBSET, mysqlParser.GTID_SUBTRACT, mysqlParser.HEX, mysqlParser.IFNULL, mysqlParser.INET6_ATON, mysqlParser.INET6_NTOA, mysqlParser.INET_ATON, mysqlParser.INET_NTOA, mysqlParser.INSTR, mysqlParser.INTERIORRINGN, mysqlParser.INTERSECTS, mysqlParser.ISCLOSED, mysqlParser.ISEMPTY, mysqlParser.ISNULL, mysqlParser.ISSIMPLE, mysqlParser.IS_FREE_LOCK, mysqlParser.IS_IPV4, mysqlParser.IS_IPV4_COMPAT, mysqlParser.IS_IPV4_MAPPED, mysqlParser.IS_IPV6, mysqlParser.IS_USED_LOCK, mysqlParser.LAST_INSERT_ID, mysqlParser.LCASE, mysqlParser.LEAST, mysqlParser.LENGTH, mysqlParser.LINEFROMTEXT, mysqlParser.LINEFROMWKB, mysqlParser.LINESTRINGFROMTEXT, mysqlParser.LINESTRINGFROMWKB, mysqlParser.LN, mysqlParser.LOAD_FILE, mysqlParser.LOCATE, mysqlParser.LOG, mysqlParser.LOG10, mysqlParser.LOG2, mysqlParser.LOWER, mysqlParser.LPAD, mysqlParser.LTRIM, mysqlParser.MAKEDATE, mysqlParser.MAKETIME, mysqlParser.MAKE_SET, mysqlParser.MASTER_POS_WAIT, mysqlParser.MBRCONTAINS, mysqlParser.MBRDISJOINT, mysqlParser.MBREQUAL, mysqlParser.MBRINTERSECTS, mysqlParser.MBROVERLAPS, mysqlParser.MBRTOUCHES, mysqlParser.MBRWITHIN, mysqlParser.MD5, mysqlParser.MLINEFROMTEXT, mysqlParser.MLINEFROMWKB, mysqlParser.MONTHNAME, mysqlParser.MPOINTFROMTEXT, mysqlParser.MPOINTFROMWKB, mysqlParser.MPOLYFROMTEXT, mysqlParser.MPOLYFROMWKB, mysqlParser.MULTILINESTRINGFROMTEXT, mysqlParser.MULTILINESTRINGFROMWKB, mysqlParser.MULTIPOINTFROMTEXT, mysqlParser.MULTIPOINTFROMWKB, mysqlParser.MULTIPOLYGONFROMTEXT, mysqlParser.MULTIPOLYGONFROMWKB, mysqlParser.NAME_CONST, mysqlParser.NULLIF, mysqlParser.NUMGEOMETRIES, mysqlParser.NUMINTERIORRINGS, mysqlParser.NUMPOINTS, mysqlParser.OCT, mysqlParser.OCTET_LENGTH, mysqlParser.ORD, mysqlParser.OVERLAPS, mysqlParser.PERIOD_ADD, mysqlParser.PERIOD_DIFF, mysqlParser.PI, mysqlParser.POINTFROMTEXT, mysqlParser.POINTFROMWKB, mysqlParser.POINTN, mysqlParser.POLYFROMTEXT, mysqlParser.POLYFROMWKB, mysqlParser.POLYGONFROMTEXT, mysqlParser.POLYGONFROMWKB, mysqlParser.POW, mysqlParser.POWER, mysqlParser.QUOTE, mysqlParser.RADIANS, mysqlParser.RAND, mysqlParser.RANDOM_BYTES, mysqlParser.RELEASE_LOCK, mysqlParser.REVERSE, mysqlParser.ROUND, mysqlParser.ROW_COUNT, mysqlParser.RPAD, mysqlParser.RTRIM, mysqlParser.SEC_TO_TIME, mysqlParser.SESSION_USER, mysqlParser.SHA, mysqlParser.SHA1, mysqlParser.SHA2, mysqlParser.SIGN, mysqlParser.SIN, mysqlParser.SLEEP, mysqlParser.SOUNDEX, mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, mysqlParser.SQRT, mysqlParser.SRID, mysqlParser.STARTPOINT, mysqlParser.STRCMP, mysqlParser.STR_TO_DATE, mysqlParser.ST_AREA, mysqlParser.ST_ASBINARY, mysqlParser.ST_ASTEXT, mysqlParser.ST_ASWKB, mysqlParser.ST_ASWKT, mysqlParser.ST_BUFFER, mysqlParser.ST_CENTROID, mysqlParser.ST_CONTAINS, mysqlParser.ST_CROSSES, mysqlParser.ST_DIFFERENCE, mysqlParser.ST_DIMENSION, mysqlParser.ST_DISJOINT, mysqlParser.ST_DISTANCE, mysqlParser.ST_ENDPOINT, mysqlParser.ST_ENVELOPE, mysqlParser.ST_EQUALS, mysqlParser.ST_EXTERIORRING, mysqlParser.ST_GEOMCOLLFROMTEXT, mysqlParser.ST_GEOMCOLLFROMTXT, mysqlParser.ST_GEOMCOLLFROMWKB, mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, mysqlParser.ST_GEOMETRYFROMTEXT, mysqlParser.ST_GEOMETRYFROMWKB, mysqlParser.ST_GEOMETRYN, mysqlParser.ST_GEOMETRYTYPE, mysqlParser.ST_GEOMFROMTEXT, mysqlParser.ST_GEOMFROMWKB, mysqlParser.ST_INTERIORRINGN, mysqlParser.ST_INTERSECTION, mysqlParser.ST_INTERSECTS, mysqlParser.ST_ISCLOSED, mysqlParser.ST_ISEMPTY, mysqlParser.ST_ISSIMPLE, mysqlParser.ST_LINEFROMTEXT, mysqlParser.ST_LINEFROMWKB, mysqlParser.ST_LINESTRINGFROMTEXT, mysqlParser.ST_LINESTRINGFROMWKB, mysqlParser.ST_NUMGEOMETRIES, mysqlParser.ST_NUMINTERIORRING, mysqlParser.ST_NUMINTERIORRINGS, mysqlParser.ST_NUMPOINTS, mysqlParser.ST_OVERLAPS, mysqlParser.ST_POINTFROMTEXT, mysqlParser.ST_POINTFROMWKB, mysqlParser.ST_POINTN, mysqlParser.ST_POLYFROMTEXT, mysqlParser.ST_POLYFROMWKB, mysqlParser.ST_POLYGONFROMTEXT, mysqlParser.ST_POLYGONFROMWKB, mysqlParser.ST_SRID, mysqlParser.ST_STARTPOINT, mysqlParser.ST_SYMDIFFERENCE, mysqlParser.ST_TOUCHES, mysqlParser.ST_UNION, mysqlParser.ST_WITHIN, mysqlParser.ST_X, mysqlParser.ST_Y, mysqlParser.SUBDATE, mysqlParser.SUBSTRING_INDEX, mysqlParser.SUBTIME, mysqlParser.SYSTEM_USER, mysqlParser.TAN, mysqlParser.TIMEDIFF, mysqlParser.TIMESTAMPADD, mysqlParser.TIMESTAMPDIFF, mysqlParser.TIME_FORMAT, mysqlParser.TIME_TO_SEC, mysqlParser.TOUCHES, mysqlParser.TO_BASE64, mysqlParser.TO_DAYS, mysqlParser.TO_SECONDS, mysqlParser.UCASE, mysqlParser.UNCOMPRESS, mysqlParser.UNCOMPRESSED_LENGTH, mysqlParser.UNHEX, mysqlParser.UNIX_TIMESTAMP, mysqlParser.UPDATEXML, mysqlParser.UPPER, mysqlParser.UUID, mysqlParser.UUID_SHORT, mysqlParser.VALIDATE_PASSWORD_STRENGTH, mysqlParser.VERSION, mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, mysqlParser.WEEKDAY, mysqlParser.WEEKOFYEAR, mysqlParser.WEIGHT_STRING, mysqlParser.WITHIN, mysqlParser.YEARWEEK, mysqlParser.Y_FUNCTION, mysqlParser.X_FUNCTION, mysqlParser.CHARSET_REVERSE_QOUTE_STRING, mysqlParser.ID, mysqlParser.REVERSE_QUOTE_ID]:
                    self.state = 2369
                    self.uidList()
                    pass
                elif token in [mysqlParser.ALL]:
                    self.state = 2370
                    self.match(mysqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 39:
                localctx = mysqlParser.AlterByRebuildPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 2373
                self.match(mysqlParser.REBUILD)
                self.state = 2374
                self.match(mysqlParser.PARTITION)
                self.state = 2377
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [mysqlParser.LEFT, mysqlParser.RIGHT, mysqlParser.DATE, mysqlParser.TIME, mysqlParser.TIMESTAMP, mysqlParser.DATETIME, mysqlParser.YEAR, mysqlParser.TEXT, mysqlParser.ENUM, mysqlParser.COUNT, mysqlParser.POSITION, mysqlParser.ACCOUNT, mysqlParser.ACTION, mysqlParser.AFTER, mysqlParser.AGGREGATE, mysqlParser.ALGORITHM, mysqlParser.ANY, mysqlParser.AT, mysqlParser.AUTHORS, mysqlParser.AUTOCOMMIT, mysqlParser.AUTOEXTEND_SIZE, mysqlParser.AUTO_INCREMENT, mysqlParser.AVG_ROW_LENGTH, mysqlParser.BEGIN, mysqlParser.BINLOG, mysqlParser.BIT, mysqlParser.BLOCK, mysqlParser.BTREE, mysqlParser.CASCADED, mysqlParser.CHAIN, mysqlParser.CHANNEL, mysqlParser.CHECKSUM, mysqlParser.CIPHER, mysqlParser.CLIENT, mysqlParser.COALESCE, mysqlParser.CODE, mysqlParser.COLUMNS, mysqlParser.COLUMN_FORMAT, mysqlParser.COMMENT, mysqlParser.COMMIT, mysqlParser.COMPACT, mysqlParser.COMPLETION, mysqlParser.COMPRESSED, mysqlParser.COMPRESSION, mysqlParser.CONCURRENT, mysqlParser.CONNECTION, mysqlParser.CONSISTENT, mysqlParser.CONTAINS, mysqlParser.CONTEXT, mysqlParser.CONTRIBUTORS, mysqlParser.COPY, mysqlParser.CPU, mysqlParser.DATA, mysqlParser.DATAFILE, mysqlParser.DEALLOCATE, mysqlParser.DEFAULT_AUTH, mysqlParser.DEFINER, mysqlParser.DELAY_KEY_WRITE, mysqlParser.DIRECTORY, mysqlParser.DISABLE, mysqlParser.DISCARD, mysqlParser.DISK, mysqlParser.DO, mysqlParser.DUMPFILE, mysqlParser.DUPLICATE, mysqlParser.DYNAMIC, mysqlParser.ENABLE, mysqlParser.ENCRYPTION, mysqlParser.ENDS, mysqlParser.ENGINE, mysqlParser.ENGINES, mysqlParser.ERROR, mysqlParser.ERRORS, mysqlParser.ESCAPE, mysqlParser.EVEN, mysqlParser.EVENT, mysqlParser.EVENTS, mysqlParser.EVERY, mysqlParser.EXCHANGE, mysqlParser.EXCLUSIVE, mysqlParser.EXPIRE, mysqlParser.EXTENT_SIZE, mysqlParser.FAULTS, mysqlParser.FIELDS, mysqlParser.FILE_BLOCK_SIZE, mysqlParser.FILTER, mysqlParser.FIRST, mysqlParser.FIXED, mysqlParser.FOLLOWS, mysqlParser.FULL, mysqlParser.FUNCTION, mysqlParser.GLOBAL, mysqlParser.GRANTS, mysqlParser.GROUP_REPLICATION, mysqlParser.HASH, mysqlParser.HOST, mysqlParser.IDENTIFIED, mysqlParser.IGNORE_SERVER_IDS, mysqlParser.IMPORT, mysqlParser.INDEXES, mysqlParser.INITIAL_SIZE, mysqlParser.INPLACE, mysqlParser.INSERT_METHOD, mysqlParser.INSTANCE, mysqlParser.INVOKER, mysqlParser.IO, mysqlParser.IO_THREAD, mysqlParser.IPC, mysqlParser.ISOLATION, mysqlParser.ISSUER, mysqlParser.KEY_BLOCK_SIZE, mysqlParser.LANGUAGE, mysqlParser.LAST, mysqlParser.LEAVES, mysqlParser.LESS, mysqlParser.LEVEL, mysqlParser.LIST, mysqlParser.LOCAL, mysqlParser.LOGFILE, mysqlParser.LOGS, mysqlParser.MASTER, mysqlParser.MASTER_AUTO_POSITION, mysqlParser.MASTER_CONNECT_RETRY, mysqlParser.MASTER_DELAY, mysqlParser.MASTER_HEARTBEAT_PERIOD, mysqlParser.MASTER_HOST, mysqlParser.MASTER_LOG_FILE, mysqlParser.MASTER_LOG_POS, mysqlParser.MASTER_PASSWORD, mysqlParser.MASTER_PORT, mysqlParser.MASTER_RETRY_COUNT, mysqlParser.MASTER_SSL, mysqlParser.MASTER_SSL_CA, mysqlParser.MASTER_SSL_CAPATH, mysqlParser.MASTER_SSL_CERT, mysqlParser.MASTER_SSL_CIPHER, mysqlParser.MASTER_SSL_CRL, mysqlParser.MASTER_SSL_CRLPATH, mysqlParser.MASTER_SSL_KEY, mysqlParser.MASTER_TLS_VERSION, mysqlParser.MASTER_USER, mysqlParser.MAX_CONNECTIONS_PER_HOUR, mysqlParser.MAX_QUERIES_PER_HOUR, mysqlParser.MAX_ROWS, mysqlParser.MAX_SIZE, mysqlParser.MAX_UPDATES_PER_HOUR, mysqlParser.MAX_USER_CONNECTIONS, mysqlParser.MERGE, mysqlParser.MID, mysqlParser.MIGRATE, mysqlParser.MIN_ROWS, mysqlParser.MODIFY, mysqlParser.MUTEX, mysqlParser.MYSQL, mysqlParser.NAME, mysqlParser.NAMES, mysqlParser.NCHAR, mysqlParser.NEVER, mysqlParser.NO, mysqlParser.NODEGROUP, mysqlParser.NONE, mysqlParser.OFFLINE, mysqlParser.OFFSET, mysqlParser.OJ, mysqlParser.OLD_PASSWORD, mysqlParser.ONE, mysqlParser.ONLINE, mysqlParser.ONLY, mysqlParser.OPTIMIZER_COSTS, mysqlParser.OPTIONS, mysqlParser.OWNER, mysqlParser.PACK_KEYS, mysqlParser.PAGE, mysqlParser.PARSER, mysqlParser.PARTIAL, mysqlParser.PARTITIONING, mysqlParser.PARTITIONS, mysqlParser.PASSWORD, mysqlParser.PHASE, mysqlParser.PLUGIN_DIR, mysqlParser.PLUGINS, mysqlParser.PORT, mysqlParser.PRECEDES, mysqlParser.PREPARE, mysqlParser.PRESERVE, mysqlParser.PREV, mysqlParser.PROCESSLIST, mysqlParser.PROFILE, mysqlParser.PROFILES, mysqlParser.PROXY, mysqlParser.QUERY, mysqlParser.QUICK, mysqlParser.REBUILD, mysqlParser.RECOVER, mysqlParser.REDO_BUFFER_SIZE, mysqlParser.REDUNDANT, mysqlParser.RELAY_LOG_FILE, mysqlParser.RELAY_LOG_POS, mysqlParser.RELAYLOG, mysqlParser.REMOVE, mysqlParser.REORGANIZE, mysqlParser.REPAIR, mysqlParser.REPLICATE_DO_DB, mysqlParser.REPLICATE_DO_TABLE, mysqlParser.REPLICATE_IGNORE_DB, mysqlParser.REPLICATE_IGNORE_TABLE, mysqlParser.REPLICATE_REWRITE_DB, mysqlParser.REPLICATE_WILD_DO_TABLE, mysqlParser.REPLICATE_WILD_IGNORE_TABLE, mysqlParser.REPLICATION, mysqlParser.RESUME, mysqlParser.RETURNS, mysqlParser.ROLLBACK, mysqlParser.ROLLUP, mysqlParser.ROTATE, mysqlParser.ROW, mysqlParser.ROWS, mysqlParser.ROW_FORMAT, mysqlParser.SAVEPOINT, mysqlParser.SCHEDULE, mysqlParser.SECURITY, mysqlParser.SERVER, mysqlParser.SESSION, mysqlParser.SHARE, mysqlParser.SHARED, mysqlParser.SIGNED, mysqlParser.SIMPLE, mysqlParser.SLAVE, mysqlParser.SNAPSHOT, mysqlParser.SOCKET, mysqlParser.SOME, mysqlParser.SOUNDS, mysqlParser.SOURCE, mysqlParser.SQL_AFTER_GTIDS, mysqlParser.SQL_AFTER_MTS_GAPS, mysqlParser.SQL_BEFORE_GTIDS, mysqlParser.SQL_BUFFER_RESULT, mysqlParser.SQL_CACHE, mysqlParser.SQL_NO_CACHE, mysqlParser.SQL_THREAD, mysqlParser.START, mysqlParser.STARTS, mysqlParser.STATS_AUTO_RECALC, mysqlParser.STATS_PERSISTENT, mysqlParser.STATS_SAMPLE_PAGES, mysqlParser.STATUS, mysqlParser.STOP, mysqlParser.STORAGE, mysqlParser.STRING, mysqlParser.SUBJECT, mysqlParser.SUBPARTITION, mysqlParser.SUBPARTITIONS, mysqlParser.SUSPEND, mysqlParser.SWAPS, mysqlParser.SWITCHES, mysqlParser.TABLESPACE, mysqlParser.TEMPORARY, mysqlParser.TEMPTABLE, mysqlParser.THAN, mysqlParser.TRANSACTION, mysqlParser.TRUNCATE, mysqlParser.UNDEFINED, mysqlParser.UNDOFILE, mysqlParser.UNDO_BUFFER_SIZE, mysqlParser.UNKNOWN, mysqlParser.UPGRADE, mysqlParser.USER, mysqlParser.VALIDATION, mysqlParser.VALUE, mysqlParser.VARIABLES, mysqlParser.VIEW, mysqlParser.WAIT, mysqlParser.WARNINGS, mysqlParser.WITHOUT, mysqlParser.WORK, mysqlParser.WRAPPER, mysqlParser.X509, mysqlParser.XA, mysqlParser.XML, mysqlParser.QUARTER, mysqlParser.MONTH, mysqlParser.DAY, mysqlParser.HOUR, mysqlParser.MINUTE, mysqlParser.WEEK, mysqlParser.SECOND, mysqlParser.MICROSECOND, mysqlParser.TABLES, mysqlParser.ROUTINE, mysqlParser.EXECUTE, mysqlParser.FILE, mysqlParser.PROCESS, mysqlParser.RELOAD, mysqlParser.SHUTDOWN, mysqlParser.SUPER, mysqlParser.PRIVILEGES, mysqlParser.ARMSCII8, mysqlParser.ASCII, mysqlParser.BIG5, mysqlParser.CP1250, mysqlParser.CP1251, mysqlParser.CP1256, mysqlParser.CP1257, mysqlParser.CP850, mysqlParser.CP852, mysqlParser.CP866, mysqlParser.CP932, mysqlParser.DEC8, mysqlParser.EUCJPMS, mysqlParser.EUCKR, mysqlParser.GB2312, mysqlParser.GBK, mysqlParser.GEOSTD8, mysqlParser.GREEK, mysqlParser.HEBREW, mysqlParser.HP8, mysqlParser.KEYBCS2, mysqlParser.KOI8R, mysqlParser.KOI8U, mysqlParser.LATIN1, mysqlParser.LATIN2, mysqlParser.LATIN5, mysqlParser.LATIN7, mysqlParser.MACCE, mysqlParser.MACROMAN, mysqlParser.SJIS, mysqlParser.SWE7, mysqlParser.TIS620, mysqlParser.UCS2, mysqlParser.UJIS, mysqlParser.UTF16, mysqlParser.UTF16LE, mysqlParser.UTF32, mysqlParser.UTF8, mysqlParser.UTF8MB3, mysqlParser.UTF8MB4, mysqlParser.ARCHIVE, mysqlParser.BLACKHOLE, mysqlParser.CSV, mysqlParser.FEDERATED, mysqlParser.INNODB, mysqlParser.MEMORY, mysqlParser.MRG_MYISAM, mysqlParser.MYISAM, mysqlParser.NDB, mysqlParser.NDBCLUSTER, mysqlParser.PERFOMANCE_SCHEMA, mysqlParser.REPEATABLE, mysqlParser.COMMITTED, mysqlParser.UNCOMMITTED, mysqlParser.SERIALIZABLE, mysqlParser.GEOMETRYCOLLECTION, mysqlParser.LINESTRING, mysqlParser.MULTILINESTRING, mysqlParser.MULTIPOINT, mysqlParser.MULTIPOLYGON, mysqlParser.POINT, mysqlParser.POLYGON, mysqlParser.ABS, mysqlParser.ACOS, mysqlParser.ADDDATE, mysqlParser.ADDTIME, mysqlParser.AES_DECRYPT, mysqlParser.AES_ENCRYPT, mysqlParser.AREA, mysqlParser.ASBINARY, mysqlParser.ASIN, mysqlParser.ASTEXT, mysqlParser.ASWKB, mysqlParser.ASWKT, mysqlParser.ASYMMETRIC_DECRYPT, mysqlParser.ASYMMETRIC_DERIVE, mysqlParser.ASYMMETRIC_ENCRYPT, mysqlParser.ASYMMETRIC_SIGN, mysqlParser.ASYMMETRIC_VERIFY, mysqlParser.ATAN, mysqlParser.ATAN2, mysqlParser.BENCHMARK, mysqlParser.BIN, mysqlParser.BIT_COUNT, mysqlParser.BIT_LENGTH, mysqlParser.BUFFER, mysqlParser.CEIL, mysqlParser.CEILING, mysqlParser.CENTROID, mysqlParser.CHARACTER_LENGTH, mysqlParser.CHARSET, mysqlParser.CHAR_LENGTH, mysqlParser.COERCIBILITY, mysqlParser.COLLATION, mysqlParser.COMPRESS, mysqlParser.CONCAT, mysqlParser.CONCAT_WS, mysqlParser.CONNECTION_ID, mysqlParser.CONV, mysqlParser.CONVERT_TZ, mysqlParser.COS, mysqlParser.COT, mysqlParser.CRC32, mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY, mysqlParser.CREATE_ASYMMETRIC_PUB_KEY, mysqlParser.CREATE_DH_PARAMETERS, mysqlParser.CREATE_DIGEST, mysqlParser.CROSSES, mysqlParser.DATEDIFF, mysqlParser.DATE_FORMAT, mysqlParser.DAYNAME, mysqlParser.DAYOFMONTH, mysqlParser.DAYOFWEEK, mysqlParser.DAYOFYEAR, mysqlParser.DECODE, mysqlParser.DEGREES, mysqlParser.DES_DECRYPT, mysqlParser.DES_ENCRYPT, mysqlParser.DIMENSION, mysqlParser.DISJOINT, mysqlParser.ELT, mysqlParser.ENCODE, mysqlParser.ENCRYPT, mysqlParser.ENDPOINT, mysqlParser.ENVELOPE, mysqlParser.EQUALS, mysqlParser.EXP, mysqlParser.EXPORT_SET, mysqlParser.EXTERIORRING, mysqlParser.EXTRACTVALUE, mysqlParser.FIELD, mysqlParser.FIND_IN_SET, mysqlParser.FLOOR, mysqlParser.FORMAT, mysqlParser.FOUND_ROWS, mysqlParser.FROM_BASE64, mysqlParser.FROM_DAYS, mysqlParser.FROM_UNIXTIME, mysqlParser.GEOMCOLLFROMTEXT, mysqlParser.GEOMCOLLFROMWKB, mysqlParser.GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.GEOMETRYCOLLECTIONFROMWKB, mysqlParser.GEOMETRYFROMTEXT, mysqlParser.GEOMETRYFROMWKB, mysqlParser.GEOMETRYN, mysqlParser.GEOMETRYTYPE, mysqlParser.GEOMFROMTEXT, mysqlParser.GEOMFROMWKB, mysqlParser.GET_FORMAT, mysqlParser.GET_LOCK, mysqlParser.GLENGTH, mysqlParser.GREATEST, mysqlParser.GTID_SUBSET, mysqlParser.GTID_SUBTRACT, mysqlParser.HEX, mysqlParser.IFNULL, mysqlParser.INET6_ATON, mysqlParser.INET6_NTOA, mysqlParser.INET_ATON, mysqlParser.INET_NTOA, mysqlParser.INSTR, mysqlParser.INTERIORRINGN, mysqlParser.INTERSECTS, mysqlParser.ISCLOSED, mysqlParser.ISEMPTY, mysqlParser.ISNULL, mysqlParser.ISSIMPLE, mysqlParser.IS_FREE_LOCK, mysqlParser.IS_IPV4, mysqlParser.IS_IPV4_COMPAT, mysqlParser.IS_IPV4_MAPPED, mysqlParser.IS_IPV6, mysqlParser.IS_USED_LOCK, mysqlParser.LAST_INSERT_ID, mysqlParser.LCASE, mysqlParser.LEAST, mysqlParser.LENGTH, mysqlParser.LINEFROMTEXT, mysqlParser.LINEFROMWKB, mysqlParser.LINESTRINGFROMTEXT, mysqlParser.LINESTRINGFROMWKB, mysqlParser.LN, mysqlParser.LOAD_FILE, mysqlParser.LOCATE, mysqlParser.LOG, mysqlParser.LOG10, mysqlParser.LOG2, mysqlParser.LOWER, mysqlParser.LPAD, mysqlParser.LTRIM, mysqlParser.MAKEDATE, mysqlParser.MAKETIME, mysqlParser.MAKE_SET, mysqlParser.MASTER_POS_WAIT, mysqlParser.MBRCONTAINS, mysqlParser.MBRDISJOINT, mysqlParser.MBREQUAL, mysqlParser.MBRINTERSECTS, mysqlParser.MBROVERLAPS, mysqlParser.MBRTOUCHES, mysqlParser.MBRWITHIN, mysqlParser.MD5, mysqlParser.MLINEFROMTEXT, mysqlParser.MLINEFROMWKB, mysqlParser.MONTHNAME, mysqlParser.MPOINTFROMTEXT, mysqlParser.MPOINTFROMWKB, mysqlParser.MPOLYFROMTEXT, mysqlParser.MPOLYFROMWKB, mysqlParser.MULTILINESTRINGFROMTEXT, mysqlParser.MULTILINESTRINGFROMWKB, mysqlParser.MULTIPOINTFROMTEXT, mysqlParser.MULTIPOINTFROMWKB, mysqlParser.MULTIPOLYGONFROMTEXT, mysqlParser.MULTIPOLYGONFROMWKB, mysqlParser.NAME_CONST, mysqlParser.NULLIF, mysqlParser.NUMGEOMETRIES, mysqlParser.NUMINTERIORRINGS, mysqlParser.NUMPOINTS, mysqlParser.OCT, mysqlParser.OCTET_LENGTH, mysqlParser.ORD, mysqlParser.OVERLAPS, mysqlParser.PERIOD_ADD, mysqlParser.PERIOD_DIFF, mysqlParser.PI, mysqlParser.POINTFROMTEXT, mysqlParser.POINTFROMWKB, mysqlParser.POINTN, mysqlParser.POLYFROMTEXT, mysqlParser.POLYFROMWKB, mysqlParser.POLYGONFROMTEXT, mysqlParser.POLYGONFROMWKB, mysqlParser.POW, mysqlParser.POWER, mysqlParser.QUOTE, mysqlParser.RADIANS, mysqlParser.RAND, mysqlParser.RANDOM_BYTES, mysqlParser.RELEASE_LOCK, mysqlParser.REVERSE, mysqlParser.ROUND, mysqlParser.ROW_COUNT, mysqlParser.RPAD, mysqlParser.RTRIM, mysqlParser.SEC_TO_TIME, mysqlParser.SESSION_USER, mysqlParser.SHA, mysqlParser.SHA1, mysqlParser.SHA2, mysqlParser.SIGN, mysqlParser.SIN, mysqlParser.SLEEP, mysqlParser.SOUNDEX, mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, mysqlParser.SQRT, mysqlParser.SRID, mysqlParser.STARTPOINT, mysqlParser.STRCMP, mysqlParser.STR_TO_DATE, mysqlParser.ST_AREA, mysqlParser.ST_ASBINARY, mysqlParser.ST_ASTEXT, mysqlParser.ST_ASWKB, mysqlParser.ST_ASWKT, mysqlParser.ST_BUFFER, mysqlParser.ST_CENTROID, mysqlParser.ST_CONTAINS, mysqlParser.ST_CROSSES, mysqlParser.ST_DIFFERENCE, mysqlParser.ST_DIMENSION, mysqlParser.ST_DISJOINT, mysqlParser.ST_DISTANCE, mysqlParser.ST_ENDPOINT, mysqlParser.ST_ENVELOPE, mysqlParser.ST_EQUALS, mysqlParser.ST_EXTERIORRING, mysqlParser.ST_GEOMCOLLFROMTEXT, mysqlParser.ST_GEOMCOLLFROMTXT, mysqlParser.ST_GEOMCOLLFROMWKB, mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, mysqlParser.ST_GEOMETRYFROMTEXT, mysqlParser.ST_GEOMETRYFROMWKB, mysqlParser.ST_GEOMETRYN, mysqlParser.ST_GEOMETRYTYPE, mysqlParser.ST_GEOMFROMTEXT, mysqlParser.ST_GEOMFROMWKB, mysqlParser.ST_INTERIORRINGN, mysqlParser.ST_INTERSECTION, mysqlParser.ST_INTERSECTS, mysqlParser.ST_ISCLOSED, mysqlParser.ST_ISEMPTY, mysqlParser.ST_ISSIMPLE, mysqlParser.ST_LINEFROMTEXT, mysqlParser.ST_LINEFROMWKB, mysqlParser.ST_LINESTRINGFROMTEXT, mysqlParser.ST_LINESTRINGFROMWKB, mysqlParser.ST_NUMGEOMETRIES, mysqlParser.ST_NUMINTERIORRING, mysqlParser.ST_NUMINTERIORRINGS, mysqlParser.ST_NUMPOINTS, mysqlParser.ST_OVERLAPS, mysqlParser.ST_POINTFROMTEXT, mysqlParser.ST_POINTFROMWKB, mysqlParser.ST_POINTN, mysqlParser.ST_POLYFROMTEXT, mysqlParser.ST_POLYFROMWKB, mysqlParser.ST_POLYGONFROMTEXT, mysqlParser.ST_POLYGONFROMWKB, mysqlParser.ST_SRID, mysqlParser.ST_STARTPOINT, mysqlParser.ST_SYMDIFFERENCE, mysqlParser.ST_TOUCHES, mysqlParser.ST_UNION, mysqlParser.ST_WITHIN, mysqlParser.ST_X, mysqlParser.ST_Y, mysqlParser.SUBDATE, mysqlParser.SUBSTRING_INDEX, mysqlParser.SUBTIME, mysqlParser.SYSTEM_USER, mysqlParser.TAN, mysqlParser.TIMEDIFF, mysqlParser.TIMESTAMPADD, mysqlParser.TIMESTAMPDIFF, mysqlParser.TIME_FORMAT, mysqlParser.TIME_TO_SEC, mysqlParser.TOUCHES, mysqlParser.TO_BASE64, mysqlParser.TO_DAYS, mysqlParser.TO_SECONDS, mysqlParser.UCASE, mysqlParser.UNCOMPRESS, mysqlParser.UNCOMPRESSED_LENGTH, mysqlParser.UNHEX, mysqlParser.UNIX_TIMESTAMP, mysqlParser.UPDATEXML, mysqlParser.UPPER, mysqlParser.UUID, mysqlParser.UUID_SHORT, mysqlParser.VALIDATE_PASSWORD_STRENGTH, mysqlParser.VERSION, mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, mysqlParser.WEEKDAY, mysqlParser.WEEKOFYEAR, mysqlParser.WEIGHT_STRING, mysqlParser.WITHIN, mysqlParser.YEARWEEK, mysqlParser.Y_FUNCTION, mysqlParser.X_FUNCTION, mysqlParser.CHARSET_REVERSE_QOUTE_STRING, mysqlParser.ID, mysqlParser.REVERSE_QUOTE_ID]:
                    self.state = 2375
                    self.uidList()
                    pass
                elif token in [mysqlParser.ALL]:
                    self.state = 2376
                    self.match(mysqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 40:
                localctx = mysqlParser.AlterByRepairPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 2379
                self.match(mysqlParser.REPAIR)
                self.state = 2380
                self.match(mysqlParser.PARTITION)
                self.state = 2383
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [mysqlParser.LEFT, mysqlParser.RIGHT, mysqlParser.DATE, mysqlParser.TIME, mysqlParser.TIMESTAMP, mysqlParser.DATETIME, mysqlParser.YEAR, mysqlParser.TEXT, mysqlParser.ENUM, mysqlParser.COUNT, mysqlParser.POSITION, mysqlParser.ACCOUNT, mysqlParser.ACTION, mysqlParser.AFTER, mysqlParser.AGGREGATE, mysqlParser.ALGORITHM, mysqlParser.ANY, mysqlParser.AT, mysqlParser.AUTHORS, mysqlParser.AUTOCOMMIT, mysqlParser.AUTOEXTEND_SIZE, mysqlParser.AUTO_INCREMENT, mysqlParser.AVG_ROW_LENGTH, mysqlParser.BEGIN, mysqlParser.BINLOG, mysqlParser.BIT, mysqlParser.BLOCK, mysqlParser.BTREE, mysqlParser.CASCADED, mysqlParser.CHAIN, mysqlParser.CHANNEL, mysqlParser.CHECKSUM, mysqlParser.CIPHER, mysqlParser.CLIENT, mysqlParser.COALESCE, mysqlParser.CODE, mysqlParser.COLUMNS, mysqlParser.COLUMN_FORMAT, mysqlParser.COMMENT, mysqlParser.COMMIT, mysqlParser.COMPACT, mysqlParser.COMPLETION, mysqlParser.COMPRESSED, mysqlParser.COMPRESSION, mysqlParser.CONCURRENT, mysqlParser.CONNECTION, mysqlParser.CONSISTENT, mysqlParser.CONTAINS, mysqlParser.CONTEXT, mysqlParser.CONTRIBUTORS, mysqlParser.COPY, mysqlParser.CPU, mysqlParser.DATA, mysqlParser.DATAFILE, mysqlParser.DEALLOCATE, mysqlParser.DEFAULT_AUTH, mysqlParser.DEFINER, mysqlParser.DELAY_KEY_WRITE, mysqlParser.DIRECTORY, mysqlParser.DISABLE, mysqlParser.DISCARD, mysqlParser.DISK, mysqlParser.DO, mysqlParser.DUMPFILE, mysqlParser.DUPLICATE, mysqlParser.DYNAMIC, mysqlParser.ENABLE, mysqlParser.ENCRYPTION, mysqlParser.ENDS, mysqlParser.ENGINE, mysqlParser.ENGINES, mysqlParser.ERROR, mysqlParser.ERRORS, mysqlParser.ESCAPE, mysqlParser.EVEN, mysqlParser.EVENT, mysqlParser.EVENTS, mysqlParser.EVERY, mysqlParser.EXCHANGE, mysqlParser.EXCLUSIVE, mysqlParser.EXPIRE, mysqlParser.EXTENT_SIZE, mysqlParser.FAULTS, mysqlParser.FIELDS, mysqlParser.FILE_BLOCK_SIZE, mysqlParser.FILTER, mysqlParser.FIRST, mysqlParser.FIXED, mysqlParser.FOLLOWS, mysqlParser.FULL, mysqlParser.FUNCTION, mysqlParser.GLOBAL, mysqlParser.GRANTS, mysqlParser.GROUP_REPLICATION, mysqlParser.HASH, mysqlParser.HOST, mysqlParser.IDENTIFIED, mysqlParser.IGNORE_SERVER_IDS, mysqlParser.IMPORT, mysqlParser.INDEXES, mysqlParser.INITIAL_SIZE, mysqlParser.INPLACE, mysqlParser.INSERT_METHOD, mysqlParser.INSTANCE, mysqlParser.INVOKER, mysqlParser.IO, mysqlParser.IO_THREAD, mysqlParser.IPC, mysqlParser.ISOLATION, mysqlParser.ISSUER, mysqlParser.KEY_BLOCK_SIZE, mysqlParser.LANGUAGE, mysqlParser.LAST, mysqlParser.LEAVES, mysqlParser.LESS, mysqlParser.LEVEL, mysqlParser.LIST, mysqlParser.LOCAL, mysqlParser.LOGFILE, mysqlParser.LOGS, mysqlParser.MASTER, mysqlParser.MASTER_AUTO_POSITION, mysqlParser.MASTER_CONNECT_RETRY, mysqlParser.MASTER_DELAY, mysqlParser.MASTER_HEARTBEAT_PERIOD, mysqlParser.MASTER_HOST, mysqlParser.MASTER_LOG_FILE, mysqlParser.MASTER_LOG_POS, mysqlParser.MASTER_PASSWORD, mysqlParser.MASTER_PORT, mysqlParser.MASTER_RETRY_COUNT, mysqlParser.MASTER_SSL, mysqlParser.MASTER_SSL_CA, mysqlParser.MASTER_SSL_CAPATH, mysqlParser.MASTER_SSL_CERT, mysqlParser.MASTER_SSL_CIPHER, mysqlParser.MASTER_SSL_CRL, mysqlParser.MASTER_SSL_CRLPATH, mysqlParser.MASTER_SSL_KEY, mysqlParser.MASTER_TLS_VERSION, mysqlParser.MASTER_USER, mysqlParser.MAX_CONNECTIONS_PER_HOUR, mysqlParser.MAX_QUERIES_PER_HOUR, mysqlParser.MAX_ROWS, mysqlParser.MAX_SIZE, mysqlParser.MAX_UPDATES_PER_HOUR, mysqlParser.MAX_USER_CONNECTIONS, mysqlParser.MERGE, mysqlParser.MID, mysqlParser.MIGRATE, mysqlParser.MIN_ROWS, mysqlParser.MODIFY, mysqlParser.MUTEX, mysqlParser.MYSQL, mysqlParser.NAME, mysqlParser.NAMES, mysqlParser.NCHAR, mysqlParser.NEVER, mysqlParser.NO, mysqlParser.NODEGROUP, mysqlParser.NONE, mysqlParser.OFFLINE, mysqlParser.OFFSET, mysqlParser.OJ, mysqlParser.OLD_PASSWORD, mysqlParser.ONE, mysqlParser.ONLINE, mysqlParser.ONLY, mysqlParser.OPTIMIZER_COSTS, mysqlParser.OPTIONS, mysqlParser.OWNER, mysqlParser.PACK_KEYS, mysqlParser.PAGE, mysqlParser.PARSER, mysqlParser.PARTIAL, mysqlParser.PARTITIONING, mysqlParser.PARTITIONS, mysqlParser.PASSWORD, mysqlParser.PHASE, mysqlParser.PLUGIN_DIR, mysqlParser.PLUGINS, mysqlParser.PORT, mysqlParser.PRECEDES, mysqlParser.PREPARE, mysqlParser.PRESERVE, mysqlParser.PREV, mysqlParser.PROCESSLIST, mysqlParser.PROFILE, mysqlParser.PROFILES, mysqlParser.PROXY, mysqlParser.QUERY, mysqlParser.QUICK, mysqlParser.REBUILD, mysqlParser.RECOVER, mysqlParser.REDO_BUFFER_SIZE, mysqlParser.REDUNDANT, mysqlParser.RELAY_LOG_FILE, mysqlParser.RELAY_LOG_POS, mysqlParser.RELAYLOG, mysqlParser.REMOVE, mysqlParser.REORGANIZE, mysqlParser.REPAIR, mysqlParser.REPLICATE_DO_DB, mysqlParser.REPLICATE_DO_TABLE, mysqlParser.REPLICATE_IGNORE_DB, mysqlParser.REPLICATE_IGNORE_TABLE, mysqlParser.REPLICATE_REWRITE_DB, mysqlParser.REPLICATE_WILD_DO_TABLE, mysqlParser.REPLICATE_WILD_IGNORE_TABLE, mysqlParser.REPLICATION, mysqlParser.RESUME, mysqlParser.RETURNS, mysqlParser.ROLLBACK, mysqlParser.ROLLUP, mysqlParser.ROTATE, mysqlParser.ROW, mysqlParser.ROWS, mysqlParser.ROW_FORMAT, mysqlParser.SAVEPOINT, mysqlParser.SCHEDULE, mysqlParser.SECURITY, mysqlParser.SERVER, mysqlParser.SESSION, mysqlParser.SHARE, mysqlParser.SHARED, mysqlParser.SIGNED, mysqlParser.SIMPLE, mysqlParser.SLAVE, mysqlParser.SNAPSHOT, mysqlParser.SOCKET, mysqlParser.SOME, mysqlParser.SOUNDS, mysqlParser.SOURCE, mysqlParser.SQL_AFTER_GTIDS, mysqlParser.SQL_AFTER_MTS_GAPS, mysqlParser.SQL_BEFORE_GTIDS, mysqlParser.SQL_BUFFER_RESULT, mysqlParser.SQL_CACHE, mysqlParser.SQL_NO_CACHE, mysqlParser.SQL_THREAD, mysqlParser.START, mysqlParser.STARTS, mysqlParser.STATS_AUTO_RECALC, mysqlParser.STATS_PERSISTENT, mysqlParser.STATS_SAMPLE_PAGES, mysqlParser.STATUS, mysqlParser.STOP, mysqlParser.STORAGE, mysqlParser.STRING, mysqlParser.SUBJECT, mysqlParser.SUBPARTITION, mysqlParser.SUBPARTITIONS, mysqlParser.SUSPEND, mysqlParser.SWAPS, mysqlParser.SWITCHES, mysqlParser.TABLESPACE, mysqlParser.TEMPORARY, mysqlParser.TEMPTABLE, mysqlParser.THAN, mysqlParser.TRANSACTION, mysqlParser.TRUNCATE, mysqlParser.UNDEFINED, mysqlParser.UNDOFILE, mysqlParser.UNDO_BUFFER_SIZE, mysqlParser.UNKNOWN, mysqlParser.UPGRADE, mysqlParser.USER, mysqlParser.VALIDATION, mysqlParser.VALUE, mysqlParser.VARIABLES, mysqlParser.VIEW, mysqlParser.WAIT, mysqlParser.WARNINGS, mysqlParser.WITHOUT, mysqlParser.WORK, mysqlParser.WRAPPER, mysqlParser.X509, mysqlParser.XA, mysqlParser.XML, mysqlParser.QUARTER, mysqlParser.MONTH, mysqlParser.DAY, mysqlParser.HOUR, mysqlParser.MINUTE, mysqlParser.WEEK, mysqlParser.SECOND, mysqlParser.MICROSECOND, mysqlParser.TABLES, mysqlParser.ROUTINE, mysqlParser.EXECUTE, mysqlParser.FILE, mysqlParser.PROCESS, mysqlParser.RELOAD, mysqlParser.SHUTDOWN, mysqlParser.SUPER, mysqlParser.PRIVILEGES, mysqlParser.ARMSCII8, mysqlParser.ASCII, mysqlParser.BIG5, mysqlParser.CP1250, mysqlParser.CP1251, mysqlParser.CP1256, mysqlParser.CP1257, mysqlParser.CP850, mysqlParser.CP852, mysqlParser.CP866, mysqlParser.CP932, mysqlParser.DEC8, mysqlParser.EUCJPMS, mysqlParser.EUCKR, mysqlParser.GB2312, mysqlParser.GBK, mysqlParser.GEOSTD8, mysqlParser.GREEK, mysqlParser.HEBREW, mysqlParser.HP8, mysqlParser.KEYBCS2, mysqlParser.KOI8R, mysqlParser.KOI8U, mysqlParser.LATIN1, mysqlParser.LATIN2, mysqlParser.LATIN5, mysqlParser.LATIN7, mysqlParser.MACCE, mysqlParser.MACROMAN, mysqlParser.SJIS, mysqlParser.SWE7, mysqlParser.TIS620, mysqlParser.UCS2, mysqlParser.UJIS, mysqlParser.UTF16, mysqlParser.UTF16LE, mysqlParser.UTF32, mysqlParser.UTF8, mysqlParser.UTF8MB3, mysqlParser.UTF8MB4, mysqlParser.ARCHIVE, mysqlParser.BLACKHOLE, mysqlParser.CSV, mysqlParser.FEDERATED, mysqlParser.INNODB, mysqlParser.MEMORY, mysqlParser.MRG_MYISAM, mysqlParser.MYISAM, mysqlParser.NDB, mysqlParser.NDBCLUSTER, mysqlParser.PERFOMANCE_SCHEMA, mysqlParser.REPEATABLE, mysqlParser.COMMITTED, mysqlParser.UNCOMMITTED, mysqlParser.SERIALIZABLE, mysqlParser.GEOMETRYCOLLECTION, mysqlParser.LINESTRING, mysqlParser.MULTILINESTRING, mysqlParser.MULTIPOINT, mysqlParser.MULTIPOLYGON, mysqlParser.POINT, mysqlParser.POLYGON, mysqlParser.ABS, mysqlParser.ACOS, mysqlParser.ADDDATE, mysqlParser.ADDTIME, mysqlParser.AES_DECRYPT, mysqlParser.AES_ENCRYPT, mysqlParser.AREA, mysqlParser.ASBINARY, mysqlParser.ASIN, mysqlParser.ASTEXT, mysqlParser.ASWKB, mysqlParser.ASWKT, mysqlParser.ASYMMETRIC_DECRYPT, mysqlParser.ASYMMETRIC_DERIVE, mysqlParser.ASYMMETRIC_ENCRYPT, mysqlParser.ASYMMETRIC_SIGN, mysqlParser.ASYMMETRIC_VERIFY, mysqlParser.ATAN, mysqlParser.ATAN2, mysqlParser.BENCHMARK, mysqlParser.BIN, mysqlParser.BIT_COUNT, mysqlParser.BIT_LENGTH, mysqlParser.BUFFER, mysqlParser.CEIL, mysqlParser.CEILING, mysqlParser.CENTROID, mysqlParser.CHARACTER_LENGTH, mysqlParser.CHARSET, mysqlParser.CHAR_LENGTH, mysqlParser.COERCIBILITY, mysqlParser.COLLATION, mysqlParser.COMPRESS, mysqlParser.CONCAT, mysqlParser.CONCAT_WS, mysqlParser.CONNECTION_ID, mysqlParser.CONV, mysqlParser.CONVERT_TZ, mysqlParser.COS, mysqlParser.COT, mysqlParser.CRC32, mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY, mysqlParser.CREATE_ASYMMETRIC_PUB_KEY, mysqlParser.CREATE_DH_PARAMETERS, mysqlParser.CREATE_DIGEST, mysqlParser.CROSSES, mysqlParser.DATEDIFF, mysqlParser.DATE_FORMAT, mysqlParser.DAYNAME, mysqlParser.DAYOFMONTH, mysqlParser.DAYOFWEEK, mysqlParser.DAYOFYEAR, mysqlParser.DECODE, mysqlParser.DEGREES, mysqlParser.DES_DECRYPT, mysqlParser.DES_ENCRYPT, mysqlParser.DIMENSION, mysqlParser.DISJOINT, mysqlParser.ELT, mysqlParser.ENCODE, mysqlParser.ENCRYPT, mysqlParser.ENDPOINT, mysqlParser.ENVELOPE, mysqlParser.EQUALS, mysqlParser.EXP, mysqlParser.EXPORT_SET, mysqlParser.EXTERIORRING, mysqlParser.EXTRACTVALUE, mysqlParser.FIELD, mysqlParser.FIND_IN_SET, mysqlParser.FLOOR, mysqlParser.FORMAT, mysqlParser.FOUND_ROWS, mysqlParser.FROM_BASE64, mysqlParser.FROM_DAYS, mysqlParser.FROM_UNIXTIME, mysqlParser.GEOMCOLLFROMTEXT, mysqlParser.GEOMCOLLFROMWKB, mysqlParser.GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.GEOMETRYCOLLECTIONFROMWKB, mysqlParser.GEOMETRYFROMTEXT, mysqlParser.GEOMETRYFROMWKB, mysqlParser.GEOMETRYN, mysqlParser.GEOMETRYTYPE, mysqlParser.GEOMFROMTEXT, mysqlParser.GEOMFROMWKB, mysqlParser.GET_FORMAT, mysqlParser.GET_LOCK, mysqlParser.GLENGTH, mysqlParser.GREATEST, mysqlParser.GTID_SUBSET, mysqlParser.GTID_SUBTRACT, mysqlParser.HEX, mysqlParser.IFNULL, mysqlParser.INET6_ATON, mysqlParser.INET6_NTOA, mysqlParser.INET_ATON, mysqlParser.INET_NTOA, mysqlParser.INSTR, mysqlParser.INTERIORRINGN, mysqlParser.INTERSECTS, mysqlParser.ISCLOSED, mysqlParser.ISEMPTY, mysqlParser.ISNULL, mysqlParser.ISSIMPLE, mysqlParser.IS_FREE_LOCK, mysqlParser.IS_IPV4, mysqlParser.IS_IPV4_COMPAT, mysqlParser.IS_IPV4_MAPPED, mysqlParser.IS_IPV6, mysqlParser.IS_USED_LOCK, mysqlParser.LAST_INSERT_ID, mysqlParser.LCASE, mysqlParser.LEAST, mysqlParser.LENGTH, mysqlParser.LINEFROMTEXT, mysqlParser.LINEFROMWKB, mysqlParser.LINESTRINGFROMTEXT, mysqlParser.LINESTRINGFROMWKB, mysqlParser.LN, mysqlParser.LOAD_FILE, mysqlParser.LOCATE, mysqlParser.LOG, mysqlParser.LOG10, mysqlParser.LOG2, mysqlParser.LOWER, mysqlParser.LPAD, mysqlParser.LTRIM, mysqlParser.MAKEDATE, mysqlParser.MAKETIME, mysqlParser.MAKE_SET, mysqlParser.MASTER_POS_WAIT, mysqlParser.MBRCONTAINS, mysqlParser.MBRDISJOINT, mysqlParser.MBREQUAL, mysqlParser.MBRINTERSECTS, mysqlParser.MBROVERLAPS, mysqlParser.MBRTOUCHES, mysqlParser.MBRWITHIN, mysqlParser.MD5, mysqlParser.MLINEFROMTEXT, mysqlParser.MLINEFROMWKB, mysqlParser.MONTHNAME, mysqlParser.MPOINTFROMTEXT, mysqlParser.MPOINTFROMWKB, mysqlParser.MPOLYFROMTEXT, mysqlParser.MPOLYFROMWKB, mysqlParser.MULTILINESTRINGFROMTEXT, mysqlParser.MULTILINESTRINGFROMWKB, mysqlParser.MULTIPOINTFROMTEXT, mysqlParser.MULTIPOINTFROMWKB, mysqlParser.MULTIPOLYGONFROMTEXT, mysqlParser.MULTIPOLYGONFROMWKB, mysqlParser.NAME_CONST, mysqlParser.NULLIF, mysqlParser.NUMGEOMETRIES, mysqlParser.NUMINTERIORRINGS, mysqlParser.NUMPOINTS, mysqlParser.OCT, mysqlParser.OCTET_LENGTH, mysqlParser.ORD, mysqlParser.OVERLAPS, mysqlParser.PERIOD_ADD, mysqlParser.PERIOD_DIFF, mysqlParser.PI, mysqlParser.POINTFROMTEXT, mysqlParser.POINTFROMWKB, mysqlParser.POINTN, mysqlParser.POLYFROMTEXT, mysqlParser.POLYFROMWKB, mysqlParser.POLYGONFROMTEXT, mysqlParser.POLYGONFROMWKB, mysqlParser.POW, mysqlParser.POWER, mysqlParser.QUOTE, mysqlParser.RADIANS, mysqlParser.RAND, mysqlParser.RANDOM_BYTES, mysqlParser.RELEASE_LOCK, mysqlParser.REVERSE, mysqlParser.ROUND, mysqlParser.ROW_COUNT, mysqlParser.RPAD, mysqlParser.RTRIM, mysqlParser.SEC_TO_TIME, mysqlParser.SESSION_USER, mysqlParser.SHA, mysqlParser.SHA1, mysqlParser.SHA2, mysqlParser.SIGN, mysqlParser.SIN, mysqlParser.SLEEP, mysqlParser.SOUNDEX, mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, mysqlParser.SQRT, mysqlParser.SRID, mysqlParser.STARTPOINT, mysqlParser.STRCMP, mysqlParser.STR_TO_DATE, mysqlParser.ST_AREA, mysqlParser.ST_ASBINARY, mysqlParser.ST_ASTEXT, mysqlParser.ST_ASWKB, mysqlParser.ST_ASWKT, mysqlParser.ST_BUFFER, mysqlParser.ST_CENTROID, mysqlParser.ST_CONTAINS, mysqlParser.ST_CROSSES, mysqlParser.ST_DIFFERENCE, mysqlParser.ST_DIMENSION, mysqlParser.ST_DISJOINT, mysqlParser.ST_DISTANCE, mysqlParser.ST_ENDPOINT, mysqlParser.ST_ENVELOPE, mysqlParser.ST_EQUALS, mysqlParser.ST_EXTERIORRING, mysqlParser.ST_GEOMCOLLFROMTEXT, mysqlParser.ST_GEOMCOLLFROMTXT, mysqlParser.ST_GEOMCOLLFROMWKB, mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, mysqlParser.ST_GEOMETRYFROMTEXT, mysqlParser.ST_GEOMETRYFROMWKB, mysqlParser.ST_GEOMETRYN, mysqlParser.ST_GEOMETRYTYPE, mysqlParser.ST_GEOMFROMTEXT, mysqlParser.ST_GEOMFROMWKB, mysqlParser.ST_INTERIORRINGN, mysqlParser.ST_INTERSECTION, mysqlParser.ST_INTERSECTS, mysqlParser.ST_ISCLOSED, mysqlParser.ST_ISEMPTY, mysqlParser.ST_ISSIMPLE, mysqlParser.ST_LINEFROMTEXT, mysqlParser.ST_LINEFROMWKB, mysqlParser.ST_LINESTRINGFROMTEXT, mysqlParser.ST_LINESTRINGFROMWKB, mysqlParser.ST_NUMGEOMETRIES, mysqlParser.ST_NUMINTERIORRING, mysqlParser.ST_NUMINTERIORRINGS, mysqlParser.ST_NUMPOINTS, mysqlParser.ST_OVERLAPS, mysqlParser.ST_POINTFROMTEXT, mysqlParser.ST_POINTFROMWKB, mysqlParser.ST_POINTN, mysqlParser.ST_POLYFROMTEXT, mysqlParser.ST_POLYFROMWKB, mysqlParser.ST_POLYGONFROMTEXT, mysqlParser.ST_POLYGONFROMWKB, mysqlParser.ST_SRID, mysqlParser.ST_STARTPOINT, mysqlParser.ST_SYMDIFFERENCE, mysqlParser.ST_TOUCHES, mysqlParser.ST_UNION, mysqlParser.ST_WITHIN, mysqlParser.ST_X, mysqlParser.ST_Y, mysqlParser.SUBDATE, mysqlParser.SUBSTRING_INDEX, mysqlParser.SUBTIME, mysqlParser.SYSTEM_USER, mysqlParser.TAN, mysqlParser.TIMEDIFF, mysqlParser.TIMESTAMPADD, mysqlParser.TIMESTAMPDIFF, mysqlParser.TIME_FORMAT, mysqlParser.TIME_TO_SEC, mysqlParser.TOUCHES, mysqlParser.TO_BASE64, mysqlParser.TO_DAYS, mysqlParser.TO_SECONDS, mysqlParser.UCASE, mysqlParser.UNCOMPRESS, mysqlParser.UNCOMPRESSED_LENGTH, mysqlParser.UNHEX, mysqlParser.UNIX_TIMESTAMP, mysqlParser.UPDATEXML, mysqlParser.UPPER, mysqlParser.UUID, mysqlParser.UUID_SHORT, mysqlParser.VALIDATE_PASSWORD_STRENGTH, mysqlParser.VERSION, mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, mysqlParser.WEEKDAY, mysqlParser.WEEKOFYEAR, mysqlParser.WEIGHT_STRING, mysqlParser.WITHIN, mysqlParser.YEARWEEK, mysqlParser.Y_FUNCTION, mysqlParser.X_FUNCTION, mysqlParser.CHARSET_REVERSE_QOUTE_STRING, mysqlParser.ID, mysqlParser.REVERSE_QUOTE_ID]:
                    self.state = 2381
                    self.uidList()
                    pass
                elif token in [mysqlParser.ALL]:
                    self.state = 2382
                    self.match(mysqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 41:
                localctx = mysqlParser.AlterByRemovePartitioningContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 2385
                self.match(mysqlParser.REMOVE)
                self.state = 2386
                self.match(mysqlParser.PARTITIONING)
                pass

            elif la_ == 42:
                localctx = mysqlParser.AlterByUpgradePartitioningContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 2387
                self.match(mysqlParser.UPGRADE)
                self.state = 2388
                self.match(mysqlParser.PARTITIONING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropDatabaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dbFormat = None # Token

        def DROP(self):
            return self.getToken(mysqlParser.DROP, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def DATABASE(self):
            return self.getToken(mysqlParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(mysqlParser.SCHEMA, 0)

        def ifExists(self):
            return self.getTypedRuleContext(mysqlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_dropDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropDatabase" ):
                listener.enterDropDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropDatabase" ):
                listener.exitDropDatabase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropDatabase" ):
                return visitor.visitDropDatabase(self)
            else:
                return visitor.visitChildren(self)




    def dropDatabase(self):

        localctx = mysqlParser.DropDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_dropDatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2391
            self.match(mysqlParser.DROP)
            self.state = 2392
            localctx.dbFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==mysqlParser.DATABASE or _la==mysqlParser.SCHEMA):
                localctx.dbFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.IF:
                self.state = 2393
                self.ifExists()


            self.state = 2396
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropEventContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(mysqlParser.DROP, 0)

        def EVENT(self):
            return self.getToken(mysqlParser.EVENT, 0)

        def fullId(self):
            return self.getTypedRuleContext(mysqlParser.FullIdContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(mysqlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_dropEvent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropEvent" ):
                listener.enterDropEvent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropEvent" ):
                listener.exitDropEvent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropEvent" ):
                return visitor.visitDropEvent(self)
            else:
                return visitor.visitChildren(self)




    def dropEvent(self):

        localctx = mysqlParser.DropEventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_dropEvent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2398
            self.match(mysqlParser.DROP)
            self.state = 2399
            self.match(mysqlParser.EVENT)
            self.state = 2401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.IF:
                self.state = 2400
                self.ifExists()


            self.state = 2403
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropIndexContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.creationPlace = None # Token
            self.algType = None # Token
            self.lockType = None # Token

        def DROP(self):
            return self.getToken(mysqlParser.DROP, 0)

        def INDEX(self):
            return self.getToken(mysqlParser.INDEX, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def ON(self):
            return self.getToken(mysqlParser.ON, 0)

        def tableName(self):
            return self.getTypedRuleContext(mysqlParser.TableNameContext,0)


        def ALGORITHM(self):
            return self.getToken(mysqlParser.ALGORITHM, 0)

        def LOCK(self):
            return self.getToken(mysqlParser.LOCK, 0)

        def ONLINE(self):
            return self.getToken(mysqlParser.ONLINE, 0)

        def OFFLINE(self):
            return self.getToken(mysqlParser.OFFLINE, 0)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.DEFAULT)
            else:
                return self.getToken(mysqlParser.DEFAULT, i)

        def INPLACE(self):
            return self.getToken(mysqlParser.INPLACE, 0)

        def COPY(self):
            return self.getToken(mysqlParser.COPY, 0)

        def NONE(self):
            return self.getToken(mysqlParser.NONE, 0)

        def SHARED(self):
            return self.getToken(mysqlParser.SHARED, 0)

        def EXCLUSIVE(self):
            return self.getToken(mysqlParser.EXCLUSIVE, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_dropIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropIndex" ):
                listener.enterDropIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropIndex" ):
                listener.exitDropIndex(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropIndex" ):
                return visitor.visitDropIndex(self)
            else:
                return visitor.visitChildren(self)




    def dropIndex(self):

        localctx = mysqlParser.DropIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_dropIndex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2405
            self.match(mysqlParser.DROP)
            self.state = 2406
            self.match(mysqlParser.INDEX)
            self.state = 2408
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,302,self._ctx)
            if la_ == 1:
                self.state = 2407
                localctx.creationPlace = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.OFFLINE or _la==mysqlParser.ONLINE):
                    localctx.creationPlace = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2410
            self.uid()
            self.state = 2411
            self.match(mysqlParser.ON)
            self.state = 2412
            self.tableName()
            self.state = 2418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.ALGORITHM:
                self.state = 2413
                self.match(mysqlParser.ALGORITHM)
                self.state = 2415
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 2414
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 2417
                localctx.algType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.DEFAULT or _la==mysqlParser.COPY or _la==mysqlParser.INPLACE):
                    localctx.algType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.LOCK:
                self.state = 2420
                self.match(mysqlParser.LOCK)
                self.state = 2422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 2421
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 2424
                localctx.lockType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.DEFAULT or _la==mysqlParser.EXCLUSIVE or _la==mysqlParser.NONE or _la==mysqlParser.SHARED):
                    localctx.lockType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropLogfileGroupContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(mysqlParser.DROP, 0)

        def LOGFILE(self):
            return self.getToken(mysqlParser.LOGFILE, 0)

        def GROUP(self):
            return self.getToken(mysqlParser.GROUP, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def ENGINE(self):
            return self.getToken(mysqlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(mysqlParser.EngineNameContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_dropLogfileGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropLogfileGroup" ):
                listener.enterDropLogfileGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropLogfileGroup" ):
                listener.exitDropLogfileGroup(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropLogfileGroup" ):
                return visitor.visitDropLogfileGroup(self)
            else:
                return visitor.visitChildren(self)




    def dropLogfileGroup(self):

        localctx = mysqlParser.DropLogfileGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_dropLogfileGroup)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2427
            self.match(mysqlParser.DROP)
            self.state = 2428
            self.match(mysqlParser.LOGFILE)
            self.state = 2429
            self.match(mysqlParser.GROUP)
            self.state = 2430
            self.uid()
            self.state = 2431
            self.match(mysqlParser.ENGINE)
            self.state = 2432
            self.match(mysqlParser.EQUAL_SYMBOL)
            self.state = 2433
            self.engineName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropProcedureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(mysqlParser.DROP, 0)

        def PROCEDURE(self):
            return self.getToken(mysqlParser.PROCEDURE, 0)

        def fullId(self):
            return self.getTypedRuleContext(mysqlParser.FullIdContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(mysqlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_dropProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropProcedure" ):
                listener.enterDropProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropProcedure" ):
                listener.exitDropProcedure(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropProcedure" ):
                return visitor.visitDropProcedure(self)
            else:
                return visitor.visitChildren(self)




    def dropProcedure(self):

        localctx = mysqlParser.DropProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_dropProcedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2435
            self.match(mysqlParser.DROP)
            self.state = 2436
            self.match(mysqlParser.PROCEDURE)
            self.state = 2438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.IF:
                self.state = 2437
                self.ifExists()


            self.state = 2440
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(mysqlParser.DROP, 0)

        def FUNCTION(self):
            return self.getToken(mysqlParser.FUNCTION, 0)

        def fullId(self):
            return self.getTypedRuleContext(mysqlParser.FullIdContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(mysqlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_dropFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropFunction" ):
                listener.enterDropFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropFunction" ):
                listener.exitDropFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropFunction" ):
                return visitor.visitDropFunction(self)
            else:
                return visitor.visitChildren(self)




    def dropFunction(self):

        localctx = mysqlParser.DropFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_dropFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2442
            self.match(mysqlParser.DROP)
            self.state = 2443
            self.match(mysqlParser.FUNCTION)
            self.state = 2445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.IF:
                self.state = 2444
                self.ifExists()


            self.state = 2447
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropServerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(mysqlParser.DROP, 0)

        def SERVER(self):
            return self.getToken(mysqlParser.SERVER, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(mysqlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_dropServer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropServer" ):
                listener.enterDropServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropServer" ):
                listener.exitDropServer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropServer" ):
                return visitor.visitDropServer(self)
            else:
                return visitor.visitChildren(self)




    def dropServer(self):

        localctx = mysqlParser.DropServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_dropServer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2449
            self.match(mysqlParser.DROP)
            self.state = 2450
            self.match(mysqlParser.SERVER)
            self.state = 2452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.IF:
                self.state = 2451
                self.ifExists()


            self.state = 2454
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dropType = None # Token

        def DROP(self):
            return self.getToken(mysqlParser.DROP, 0)

        def TABLE(self):
            return self.getToken(mysqlParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(mysqlParser.TablesContext,0)


        def TEMPORARY(self):
            return self.getToken(mysqlParser.TEMPORARY, 0)

        def ifExists(self):
            return self.getTypedRuleContext(mysqlParser.IfExistsContext,0)


        def RESTRICT(self):
            return self.getToken(mysqlParser.RESTRICT, 0)

        def CASCADE(self):
            return self.getToken(mysqlParser.CASCADE, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_dropTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTable" ):
                listener.enterDropTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTable" ):
                listener.exitDropTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTable" ):
                return visitor.visitDropTable(self)
            else:
                return visitor.visitChildren(self)




    def dropTable(self):

        localctx = mysqlParser.DropTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_dropTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2456
            self.match(mysqlParser.DROP)
            self.state = 2458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.TEMPORARY:
                self.state = 2457
                self.match(mysqlParser.TEMPORARY)


            self.state = 2460
            self.match(mysqlParser.TABLE)
            self.state = 2462
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.IF:
                self.state = 2461
                self.ifExists()


            self.state = 2464
            self.tables()
            self.state = 2466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.CASCADE or _la==mysqlParser.RESTRICT:
                self.state = 2465
                localctx.dropType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.CASCADE or _la==mysqlParser.RESTRICT):
                    localctx.dropType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropTablespaceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(mysqlParser.DROP, 0)

        def TABLESPACE(self):
            return self.getToken(mysqlParser.TABLESPACE, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def ENGINE(self):
            return self.getToken(mysqlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(mysqlParser.EngineNameContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_dropTablespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTablespace" ):
                listener.enterDropTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTablespace" ):
                listener.exitDropTablespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTablespace" ):
                return visitor.visitDropTablespace(self)
            else:
                return visitor.visitChildren(self)




    def dropTablespace(self):

        localctx = mysqlParser.DropTablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_dropTablespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2468
            self.match(mysqlParser.DROP)
            self.state = 2469
            self.match(mysqlParser.TABLESPACE)
            self.state = 2470
            self.uid()
            self.state = 2476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.ENGINE:
                self.state = 2471
                self.match(mysqlParser.ENGINE)
                self.state = 2473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EQUAL_SYMBOL:
                    self.state = 2472
                    self.match(mysqlParser.EQUAL_SYMBOL)


                self.state = 2475
                self.engineName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropTriggerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(mysqlParser.DROP, 0)

        def TRIGGER(self):
            return self.getToken(mysqlParser.TRIGGER, 0)

        def fullId(self):
            return self.getTypedRuleContext(mysqlParser.FullIdContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(mysqlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_dropTrigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTrigger" ):
                listener.enterDropTrigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTrigger" ):
                listener.exitDropTrigger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropTrigger" ):
                return visitor.visitDropTrigger(self)
            else:
                return visitor.visitChildren(self)




    def dropTrigger(self):

        localctx = mysqlParser.DropTriggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_dropTrigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2478
            self.match(mysqlParser.DROP)
            self.state = 2479
            self.match(mysqlParser.TRIGGER)
            self.state = 2481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.IF:
                self.state = 2480
                self.ifExists()


            self.state = 2483
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropViewContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dropType = None # Token

        def DROP(self):
            return self.getToken(mysqlParser.DROP, 0)

        def VIEW(self):
            return self.getToken(mysqlParser.VIEW, 0)

        def fullId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.FullIdContext)
            else:
                return self.getTypedRuleContext(mysqlParser.FullIdContext,i)


        def ifExists(self):
            return self.getTypedRuleContext(mysqlParser.IfExistsContext,0)


        def RESTRICT(self):
            return self.getToken(mysqlParser.RESTRICT, 0)

        def CASCADE(self):
            return self.getToken(mysqlParser.CASCADE, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_dropView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropView" ):
                listener.enterDropView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropView" ):
                listener.exitDropView(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropView" ):
                return visitor.visitDropView(self)
            else:
                return visitor.visitChildren(self)




    def dropView(self):

        localctx = mysqlParser.DropViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_dropView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2485
            self.match(mysqlParser.DROP)
            self.state = 2486
            self.match(mysqlParser.VIEW)
            self.state = 2488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.IF:
                self.state = 2487
                self.ifExists()


            self.state = 2490
            self.fullId()
            self.state = 2495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.COMMA:
                self.state = 2491
                self.match(mysqlParser.COMMA)
                self.state = 2492
                self.fullId()
                self.state = 2497
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2499
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.CASCADE or _la==mysqlParser.RESTRICT:
                self.state = 2498
                localctx.dropType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.CASCADE or _la==mysqlParser.RESTRICT):
                    localctx.dropType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RenameTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(mysqlParser.RENAME, 0)

        def TABLE(self):
            return self.getToken(mysqlParser.TABLE, 0)

        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.TableNameContext)
            else:
                return self.getTypedRuleContext(mysqlParser.TableNameContext,i)


        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.TO)
            else:
                return self.getToken(mysqlParser.TO, i)

        def getRuleIndex(self):
            return mysqlParser.RULE_renameTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTable" ):
                listener.enterRenameTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTable" ):
                listener.exitRenameTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameTable" ):
                return visitor.visitRenameTable(self)
            else:
                return visitor.visitChildren(self)




    def renameTable(self):

        localctx = mysqlParser.RenameTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_renameTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2501
            self.match(mysqlParser.RENAME)
            self.state = 2502
            self.match(mysqlParser.TABLE)
            self.state = 2503
            self.tableName()
            self.state = 2504
            self.match(mysqlParser.TO)
            self.state = 2505
            self.tableName()
            self.state = 2513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.COMMA:
                self.state = 2506
                self.match(mysqlParser.COMMA)
                self.state = 2507
                self.tableName()
                self.state = 2508
                self.match(mysqlParser.TO)
                self.state = 2509
                self.tableName()
                self.state = 2515
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TruncateTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUNCATE(self):
            return self.getToken(mysqlParser.TRUNCATE, 0)

        def tableName(self):
            return self.getTypedRuleContext(mysqlParser.TableNameContext,0)


        def TABLE(self):
            return self.getToken(mysqlParser.TABLE, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_truncateTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncateTable" ):
                listener.enterTruncateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncateTable" ):
                listener.exitTruncateTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTruncateTable" ):
                return visitor.visitTruncateTable(self)
            else:
                return visitor.visitChildren(self)




    def truncateTable(self):

        localctx = mysqlParser.TruncateTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_truncateTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2516
            self.match(mysqlParser.TRUNCATE)
            self.state = 2518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.TABLE:
                self.state = 2517
                self.match(mysqlParser.TABLE)


            self.state = 2520
            self.tableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(mysqlParser.CALL, 0)

        def fullId(self):
            return self.getTypedRuleContext(mysqlParser.FullIdContext,0)


        def constants(self):
            return self.getTypedRuleContext(mysqlParser.ConstantsContext,0)


        def expressions(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_callStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallStatement" ):
                listener.enterCallStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallStatement" ):
                listener.exitCallStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallStatement" ):
                return visitor.visitCallStatement(self)
            else:
                return visitor.visitChildren(self)




    def callStatement(self):

        localctx = mysqlParser.CallStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_callStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2522
            self.match(mysqlParser.CALL)
            self.state = 2523
            self.fullId()
            self.state = 2530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.LR_BRACKET:
                self.state = 2524
                self.match(mysqlParser.LR_BRACKET)
                self.state = 2527
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,321,self._ctx)
                if la_ == 1:
                    self.state = 2525
                    self.constants()

                elif la_ == 2:
                    self.state = 2526
                    self.expressions()


                self.state = 2529
                self.match(mysqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeleteStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleDeleteStatement(self):
            return self.getTypedRuleContext(mysqlParser.SingleDeleteStatementContext,0)


        def multipleDeleteStatement(self):
            return self.getTypedRuleContext(mysqlParser.MultipleDeleteStatementContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_deleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteStatement" ):
                listener.enterDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteStatement" ):
                listener.exitDeleteStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeleteStatement" ):
                return visitor.visitDeleteStatement(self)
            else:
                return visitor.visitChildren(self)




    def deleteStatement(self):

        localctx = mysqlParser.DeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_deleteStatement)
        try:
            self.state = 2534
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,323,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2532
                self.singleDeleteStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2533
                self.multipleDeleteStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DoStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(mysqlParser.DO, 0)

        def expressions(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_doStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoStatement" ):
                listener.enterDoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoStatement" ):
                listener.exitDoStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoStatement" ):
                return visitor.visitDoStatement(self)
            else:
                return visitor.visitChildren(self)




    def doStatement(self):

        localctx = mysqlParser.DoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_doStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2536
            self.match(mysqlParser.DO)
            self.state = 2537
            self.expressions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HandlerStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def handlerOpenStatement(self):
            return self.getTypedRuleContext(mysqlParser.HandlerOpenStatementContext,0)


        def handlerReadIndexStatement(self):
            return self.getTypedRuleContext(mysqlParser.HandlerReadIndexStatementContext,0)


        def handlerReadStatement(self):
            return self.getTypedRuleContext(mysqlParser.HandlerReadStatementContext,0)


        def handlerCloseStatement(self):
            return self.getTypedRuleContext(mysqlParser.HandlerCloseStatementContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_handlerStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerStatement" ):
                listener.enterHandlerStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerStatement" ):
                listener.exitHandlerStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHandlerStatement" ):
                return visitor.visitHandlerStatement(self)
            else:
                return visitor.visitChildren(self)




    def handlerStatement(self):

        localctx = mysqlParser.HandlerStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_handlerStatement)
        try:
            self.state = 2543
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,324,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2539
                self.handlerOpenStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2540
                self.handlerReadIndexStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2541
                self.handlerReadStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2542
                self.handlerCloseStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InsertStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token
            self.partitions = None # UidListContext
            self.columns = None # UidListContext
            self.setFirst = None # UpdatedElementContext
            self._updatedElement = None # UpdatedElementContext
            self.setElements = list() # of UpdatedElementContexts
            self.duplicatedFirst = None # UpdatedElementContext
            self.duplicatedElements = list() # of UpdatedElementContexts

        def INSERT(self):
            return self.getToken(mysqlParser.INSERT, 0)

        def tableName(self):
            return self.getTypedRuleContext(mysqlParser.TableNameContext,0)


        def insertStatementValue(self):
            return self.getTypedRuleContext(mysqlParser.InsertStatementValueContext,0)


        def SET(self):
            return self.getToken(mysqlParser.SET, 0)

        def IGNORE(self):
            return self.getToken(mysqlParser.IGNORE, 0)

        def INTO(self):
            return self.getToken(mysqlParser.INTO, 0)

        def PARTITION(self):
            return self.getToken(mysqlParser.PARTITION, 0)

        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UpdatedElementContext,i)


        def ON(self):
            return self.getToken(mysqlParser.ON, 0)

        def DUPLICATE(self):
            return self.getToken(mysqlParser.DUPLICATE, 0)

        def KEY(self):
            return self.getToken(mysqlParser.KEY, 0)

        def UPDATE(self):
            return self.getToken(mysqlParser.UPDATE, 0)

        def uidList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UidListContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UidListContext,i)


        def LOW_PRIORITY(self):
            return self.getToken(mysqlParser.LOW_PRIORITY, 0)

        def DELAYED(self):
            return self.getToken(mysqlParser.DELAYED, 0)

        def HIGH_PRIORITY(self):
            return self.getToken(mysqlParser.HIGH_PRIORITY, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_insertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertStatement" ):
                listener.enterInsertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertStatement" ):
                listener.exitInsertStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertStatement" ):
                return visitor.visitInsertStatement(self)
            else:
                return visitor.visitChildren(self)




    def insertStatement(self):

        localctx = mysqlParser.InsertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_insertStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2545
            self.match(mysqlParser.INSERT)
            self.state = 2547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (mysqlParser.DELAYED - 37)) | (1 << (mysqlParser.HIGH_PRIORITY - 37)) | (1 << (mysqlParser.LOW_PRIORITY - 37)))) != 0):
                self.state = 2546
                localctx.priority = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (mysqlParser.DELAYED - 37)) | (1 << (mysqlParser.HIGH_PRIORITY - 37)) | (1 << (mysqlParser.LOW_PRIORITY - 37)))) != 0)):
                    localctx.priority = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2550
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.IGNORE:
                self.state = 2549
                self.match(mysqlParser.IGNORE)


            self.state = 2553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.INTO:
                self.state = 2552
                self.match(mysqlParser.INTO)


            self.state = 2555
            self.tableName()
            self.state = 2561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.PARTITION:
                self.state = 2556
                self.match(mysqlParser.PARTITION)
                self.state = 2557
                self.match(mysqlParser.LR_BRACKET)
                self.state = 2558
                localctx.partitions = self.uidList()
                self.state = 2559
                self.match(mysqlParser.RR_BRACKET)


            self.state = 2579
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.SELECT, mysqlParser.VALUES, mysqlParser.VALUE, mysqlParser.LR_BRACKET]:
                self.state = 2567
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,329,self._ctx)
                if la_ == 1:
                    self.state = 2563
                    self.match(mysqlParser.LR_BRACKET)
                    self.state = 2564
                    localctx.columns = self.uidList()
                    self.state = 2565
                    self.match(mysqlParser.RR_BRACKET)


                self.state = 2569
                self.insertStatementValue()
                pass
            elif token in [mysqlParser.SET]:
                self.state = 2570
                self.match(mysqlParser.SET)
                self.state = 2571
                localctx.setFirst = self.updatedElement()
                self.state = 2576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.COMMA:
                    self.state = 2572
                    self.match(mysqlParser.COMMA)
                    self.state = 2573
                    localctx._updatedElement = self.updatedElement()
                    localctx.setElements.append(localctx._updatedElement)
                    self.state = 2578
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 2593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.ON:
                self.state = 2581
                self.match(mysqlParser.ON)
                self.state = 2582
                self.match(mysqlParser.DUPLICATE)
                self.state = 2583
                self.match(mysqlParser.KEY)
                self.state = 2584
                self.match(mysqlParser.UPDATE)
                self.state = 2585
                localctx.duplicatedFirst = self.updatedElement()
                self.state = 2590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.COMMA:
                    self.state = 2586
                    self.match(mysqlParser.COMMA)
                    self.state = 2587
                    localctx._updatedElement = self.updatedElement()
                    localctx.duplicatedElements.append(localctx._updatedElement)
                    self.state = 2592
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LoadDataStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token
            self.filename = None # Token
            self.violation = None # Token
            self.charset = None # CharsetNameContext
            self.fieldsFormat = None # Token
            self.terminationField = None # Token
            self.enclosion = None # Token
            self.escaping = None # Token
            self.starting = None # Token
            self.terminationLine = None # Token
            self.linesFormat = None # Token

        def LOAD(self):
            return self.getToken(mysqlParser.LOAD, 0)

        def DATA(self):
            return self.getToken(mysqlParser.DATA, 0)

        def INFILE(self):
            return self.getToken(mysqlParser.INFILE, 0)

        def INTO(self):
            return self.getToken(mysqlParser.INTO, 0)

        def TABLE(self):
            return self.getToken(mysqlParser.TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(mysqlParser.TableNameContext,0)


        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.STRING_LITERAL)
            else:
                return self.getToken(mysqlParser.STRING_LITERAL, i)

        def LOCAL(self):
            return self.getToken(mysqlParser.LOCAL, 0)

        def PARTITION(self):
            return self.getToken(mysqlParser.PARTITION, 0)

        def uidList(self):
            return self.getTypedRuleContext(mysqlParser.UidListContext,0)


        def CHARACTER(self):
            return self.getToken(mysqlParser.CHARACTER, 0)

        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.SET)
            else:
                return self.getToken(mysqlParser.SET, i)

        def LINES(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.LINES)
            else:
                return self.getToken(mysqlParser.LINES, i)

        def IGNORE(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.IGNORE)
            else:
                return self.getToken(mysqlParser.IGNORE, i)

        def decimalLiteral(self):
            return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,0)


        def assignmentField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.AssignmentFieldContext)
            else:
                return self.getTypedRuleContext(mysqlParser.AssignmentFieldContext,i)


        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UpdatedElementContext,i)


        def charsetName(self):
            return self.getTypedRuleContext(mysqlParser.CharsetNameContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(mysqlParser.LOW_PRIORITY, 0)

        def CONCURRENT(self):
            return self.getToken(mysqlParser.CONCURRENT, 0)

        def REPLACE(self):
            return self.getToken(mysqlParser.REPLACE, 0)

        def FIELDS(self):
            return self.getToken(mysqlParser.FIELDS, 0)

        def COLUMNS(self):
            return self.getToken(mysqlParser.COLUMNS, 0)

        def ROWS(self):
            return self.getToken(mysqlParser.ROWS, 0)

        def TERMINATED(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.TERMINATED)
            else:
                return self.getToken(mysqlParser.TERMINATED, i)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.BY)
            else:
                return self.getToken(mysqlParser.BY, i)

        def ENCLOSED(self):
            return self.getToken(mysqlParser.ENCLOSED, 0)

        def ESCAPED(self):
            return self.getToken(mysqlParser.ESCAPED, 0)

        def STARTING(self):
            return self.getToken(mysqlParser.STARTING, 0)

        def OPTIONALLY(self):
            return self.getToken(mysqlParser.OPTIONALLY, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_loadDataStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadDataStatement" ):
                listener.enterLoadDataStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadDataStatement" ):
                listener.exitLoadDataStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoadDataStatement" ):
                return visitor.visitLoadDataStatement(self)
            else:
                return visitor.visitChildren(self)




    def loadDataStatement(self):

        localctx = mysqlParser.LoadDataStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_loadDataStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2595
            self.match(mysqlParser.LOAD)
            self.state = 2596
            self.match(mysqlParser.DATA)
            self.state = 2598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.LOW_PRIORITY or _la==mysqlParser.CONCURRENT:
                self.state = 2597
                localctx.priority = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.LOW_PRIORITY or _la==mysqlParser.CONCURRENT):
                    localctx.priority = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.LOCAL:
                self.state = 2600
                self.match(mysqlParser.LOCAL)


            self.state = 2603
            self.match(mysqlParser.INFILE)
            self.state = 2604
            localctx.filename = self.match(mysqlParser.STRING_LITERAL)
            self.state = 2606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.IGNORE or _la==mysqlParser.REPLACE:
                self.state = 2605
                localctx.violation = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.IGNORE or _la==mysqlParser.REPLACE):
                    localctx.violation = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2608
            self.match(mysqlParser.INTO)
            self.state = 2609
            self.match(mysqlParser.TABLE)
            self.state = 2610
            self.tableName()
            self.state = 2616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.PARTITION:
                self.state = 2611
                self.match(mysqlParser.PARTITION)
                self.state = 2612
                self.match(mysqlParser.LR_BRACKET)
                self.state = 2613
                self.uidList()
                self.state = 2614
                self.match(mysqlParser.RR_BRACKET)


            self.state = 2621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.CHARACTER:
                self.state = 2618
                self.match(mysqlParser.CHARACTER)
                self.state = 2619
                self.match(mysqlParser.SET)
                self.state = 2620
                localctx.charset = self.charsetName()


            self.state = 2642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.COLUMNS or _la==mysqlParser.FIELDS:
                self.state = 2623
                localctx.fieldsFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.COLUMNS or _la==mysqlParser.FIELDS):
                    localctx.fieldsFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.TERMINATED:
                    self.state = 2624
                    self.match(mysqlParser.TERMINATED)
                    self.state = 2625
                    self.match(mysqlParser.BY)
                    self.state = 2626
                    localctx.terminationField = self.match(mysqlParser.STRING_LITERAL)


                self.state = 2635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.ENCLOSED or _la==mysqlParser.OPTIONALLY:
                    self.state = 2630
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==mysqlParser.OPTIONALLY:
                        self.state = 2629
                        self.match(mysqlParser.OPTIONALLY)


                    self.state = 2632
                    self.match(mysqlParser.ENCLOSED)
                    self.state = 2633
                    self.match(mysqlParser.BY)
                    self.state = 2634
                    localctx.enclosion = self.match(mysqlParser.STRING_LITERAL)


                self.state = 2640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.ESCAPED:
                    self.state = 2637
                    self.match(mysqlParser.ESCAPED)
                    self.state = 2638
                    self.match(mysqlParser.BY)
                    self.state = 2639
                    localctx.escaping = self.match(mysqlParser.STRING_LITERAL)




            self.state = 2655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.LINES:
                self.state = 2644
                self.match(mysqlParser.LINES)
                self.state = 2648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.STARTING:
                    self.state = 2645
                    self.match(mysqlParser.STARTING)
                    self.state = 2646
                    self.match(mysqlParser.BY)
                    self.state = 2647
                    localctx.starting = self.match(mysqlParser.STRING_LITERAL)


                self.state = 2653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.TERMINATED:
                    self.state = 2650
                    self.match(mysqlParser.TERMINATED)
                    self.state = 2651
                    self.match(mysqlParser.BY)
                    self.state = 2652
                    localctx.terminationLine = self.match(mysqlParser.STRING_LITERAL)




            self.state = 2661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.IGNORE:
                self.state = 2657
                self.match(mysqlParser.IGNORE)
                self.state = 2658
                self.decimalLiteral()
                self.state = 2659
                localctx.linesFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.LINES or _la==mysqlParser.ROWS):
                    localctx.linesFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.LR_BRACKET:
                self.state = 2663
                self.match(mysqlParser.LR_BRACKET)
                self.state = 2664
                self.assignmentField()
                self.state = 2669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.COMMA:
                    self.state = 2665
                    self.match(mysqlParser.COMMA)
                    self.state = 2666
                    self.assignmentField()
                    self.state = 2671
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2672
                self.match(mysqlParser.RR_BRACKET)


            self.state = 2685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.SET:
                self.state = 2676
                self.match(mysqlParser.SET)
                self.state = 2677
                self.updatedElement()
                self.state = 2682
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.COMMA:
                    self.state = 2678
                    self.match(mysqlParser.COMMA)
                    self.state = 2679
                    self.updatedElement()
                    self.state = 2684
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LoadXmlStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token
            self.violation = None # Token
            self.tag = None # Token
            self.linesFormat = None # Token

        def LOAD(self):
            return self.getToken(mysqlParser.LOAD, 0)

        def XML(self):
            return self.getToken(mysqlParser.XML, 0)

        def INFILE(self):
            return self.getToken(mysqlParser.INFILE, 0)

        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.STRING_LITERAL)
            else:
                return self.getToken(mysqlParser.STRING_LITERAL, i)

        def INTO(self):
            return self.getToken(mysqlParser.INTO, 0)

        def TABLE(self):
            return self.getToken(mysqlParser.TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(mysqlParser.TableNameContext,0)


        def LOCAL(self):
            return self.getToken(mysqlParser.LOCAL, 0)

        def CHARACTER(self):
            return self.getToken(mysqlParser.CHARACTER, 0)

        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.SET)
            else:
                return self.getToken(mysqlParser.SET, i)

        def charsetName(self):
            return self.getTypedRuleContext(mysqlParser.CharsetNameContext,0)


        def ROWS(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.ROWS)
            else:
                return self.getToken(mysqlParser.ROWS, i)

        def IDENTIFIED(self):
            return self.getToken(mysqlParser.IDENTIFIED, 0)

        def BY(self):
            return self.getToken(mysqlParser.BY, 0)

        def IGNORE(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.IGNORE)
            else:
                return self.getToken(mysqlParser.IGNORE, i)

        def decimalLiteral(self):
            return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,0)


        def assignmentField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.AssignmentFieldContext)
            else:
                return self.getTypedRuleContext(mysqlParser.AssignmentFieldContext,i)


        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UpdatedElementContext,i)


        def LOW_PRIORITY(self):
            return self.getToken(mysqlParser.LOW_PRIORITY, 0)

        def CONCURRENT(self):
            return self.getToken(mysqlParser.CONCURRENT, 0)

        def REPLACE(self):
            return self.getToken(mysqlParser.REPLACE, 0)

        def LINES(self):
            return self.getToken(mysqlParser.LINES, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_loadXmlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadXmlStatement" ):
                listener.enterLoadXmlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadXmlStatement" ):
                listener.exitLoadXmlStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoadXmlStatement" ):
                return visitor.visitLoadXmlStatement(self)
            else:
                return visitor.visitChildren(self)




    def loadXmlStatement(self):

        localctx = mysqlParser.LoadXmlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_loadXmlStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2687
            self.match(mysqlParser.LOAD)
            self.state = 2688
            self.match(mysqlParser.XML)
            self.state = 2690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.LOW_PRIORITY or _la==mysqlParser.CONCURRENT:
                self.state = 2689
                localctx.priority = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.LOW_PRIORITY or _la==mysqlParser.CONCURRENT):
                    localctx.priority = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2693
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.LOCAL:
                self.state = 2692
                self.match(mysqlParser.LOCAL)


            self.state = 2695
            self.match(mysqlParser.INFILE)
            self.state = 2696
            self.match(mysqlParser.STRING_LITERAL)
            self.state = 2698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.IGNORE or _la==mysqlParser.REPLACE:
                self.state = 2697
                localctx.violation = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.IGNORE or _la==mysqlParser.REPLACE):
                    localctx.violation = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2700
            self.match(mysqlParser.INTO)
            self.state = 2701
            self.match(mysqlParser.TABLE)
            self.state = 2702
            self.tableName()
            self.state = 2706
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.CHARACTER:
                self.state = 2703
                self.match(mysqlParser.CHARACTER)
                self.state = 2704
                self.match(mysqlParser.SET)
                self.state = 2705
                self.charsetName()


            self.state = 2714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.ROWS:
                self.state = 2708
                self.match(mysqlParser.ROWS)
                self.state = 2709
                self.match(mysqlParser.IDENTIFIED)
                self.state = 2710
                self.match(mysqlParser.BY)
                self.state = 2711
                self.match(mysqlParser.LESS_SYMBOL)
                self.state = 2712
                localctx.tag = self.match(mysqlParser.STRING_LITERAL)
                self.state = 2713
                self.match(mysqlParser.GREATER_SYMBOL)


            self.state = 2720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.IGNORE:
                self.state = 2716
                self.match(mysqlParser.IGNORE)
                self.state = 2717
                self.decimalLiteral()
                self.state = 2718
                localctx.linesFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.LINES or _la==mysqlParser.ROWS):
                    localctx.linesFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2733
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.LR_BRACKET:
                self.state = 2722
                self.match(mysqlParser.LR_BRACKET)
                self.state = 2723
                self.assignmentField()
                self.state = 2728
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.COMMA:
                    self.state = 2724
                    self.match(mysqlParser.COMMA)
                    self.state = 2725
                    self.assignmentField()
                    self.state = 2730
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2731
                self.match(mysqlParser.RR_BRACKET)


            self.state = 2744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.SET:
                self.state = 2735
                self.match(mysqlParser.SET)
                self.state = 2736
                self.updatedElement()
                self.state = 2741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.COMMA:
                    self.state = 2737
                    self.match(mysqlParser.COMMA)
                    self.state = 2738
                    self.updatedElement()
                    self.state = 2743
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReplaceStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token
            self.partitions = None # UidListContext
            self.columns = None # UidListContext
            self.setFirst = None # UpdatedElementContext
            self._updatedElement = None # UpdatedElementContext
            self.setElements = list() # of UpdatedElementContexts

        def REPLACE(self):
            return self.getToken(mysqlParser.REPLACE, 0)

        def tableName(self):
            return self.getTypedRuleContext(mysqlParser.TableNameContext,0)


        def insertStatementValue(self):
            return self.getTypedRuleContext(mysqlParser.InsertStatementValueContext,0)


        def SET(self):
            return self.getToken(mysqlParser.SET, 0)

        def INTO(self):
            return self.getToken(mysqlParser.INTO, 0)

        def PARTITION(self):
            return self.getToken(mysqlParser.PARTITION, 0)

        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UpdatedElementContext,i)


        def uidList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UidListContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UidListContext,i)


        def LOW_PRIORITY(self):
            return self.getToken(mysqlParser.LOW_PRIORITY, 0)

        def DELAYED(self):
            return self.getToken(mysqlParser.DELAYED, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_replaceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceStatement" ):
                listener.enterReplaceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceStatement" ):
                listener.exitReplaceStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplaceStatement" ):
                return visitor.visitReplaceStatement(self)
            else:
                return visitor.visitChildren(self)




    def replaceStatement(self):

        localctx = mysqlParser.ReplaceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_replaceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2746
            self.match(mysqlParser.REPLACE)
            self.state = 2748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.DELAYED or _la==mysqlParser.LOW_PRIORITY:
                self.state = 2747
                localctx.priority = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.DELAYED or _la==mysqlParser.LOW_PRIORITY):
                    localctx.priority = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.INTO:
                self.state = 2750
                self.match(mysqlParser.INTO)


            self.state = 2753
            self.tableName()
            self.state = 2759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.PARTITION:
                self.state = 2754
                self.match(mysqlParser.PARTITION)
                self.state = 2755
                self.match(mysqlParser.LR_BRACKET)
                self.state = 2756
                localctx.partitions = self.uidList()
                self.state = 2757
                self.match(mysqlParser.RR_BRACKET)


            self.state = 2777
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.SELECT, mysqlParser.VALUES, mysqlParser.VALUE, mysqlParser.LR_BRACKET]:
                self.state = 2765
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,365,self._ctx)
                if la_ == 1:
                    self.state = 2761
                    self.match(mysqlParser.LR_BRACKET)
                    self.state = 2762
                    localctx.columns = self.uidList()
                    self.state = 2763
                    self.match(mysqlParser.RR_BRACKET)


                self.state = 2767
                self.insertStatementValue()
                pass
            elif token in [mysqlParser.SET]:
                self.state = 2768
                self.match(mysqlParser.SET)
                self.state = 2769
                localctx.setFirst = self.updatedElement()
                self.state = 2774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.COMMA:
                    self.state = 2770
                    self.match(mysqlParser.COMMA)
                    self.state = 2771
                    localctx._updatedElement = self.updatedElement()
                    localctx.setElements.append(localctx._updatedElement)
                    self.state = 2776
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_selectStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UnionSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.SelectStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecificationNointo(self):
            return self.getTypedRuleContext(mysqlParser.QuerySpecificationNointoContext,0)

        def unionStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UnionStatementContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UnionStatementContext,i)

        def UNION(self):
            return self.getToken(mysqlParser.UNION, 0)
        def orderByClause(self):
            return self.getTypedRuleContext(mysqlParser.OrderByClauseContext,0)

        def limitClause(self):
            return self.getTypedRuleContext(mysqlParser.LimitClauseContext,0)

        def lockClause(self):
            return self.getTypedRuleContext(mysqlParser.LockClauseContext,0)

        def querySpecification(self):
            return self.getTypedRuleContext(mysqlParser.QuerySpecificationContext,0)

        def queryExpression(self):
            return self.getTypedRuleContext(mysqlParser.QueryExpressionContext,0)

        def ALL(self):
            return self.getToken(mysqlParser.ALL, 0)
        def DISTINCT(self):
            return self.getToken(mysqlParser.DISTINCT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionSelect" ):
                listener.enterUnionSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionSelect" ):
                listener.exitUnionSelect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionSelect" ):
                return visitor.visitUnionSelect(self)
            else:
                return visitor.visitChildren(self)


    class UnionParenthesisSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.SelectStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryExpressionNointo(self):
            return self.getTypedRuleContext(mysqlParser.QueryExpressionNointoContext,0)

        def unionParenthesis(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UnionParenthesisContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UnionParenthesisContext,i)

        def UNION(self):
            return self.getToken(mysqlParser.UNION, 0)
        def queryExpression(self):
            return self.getTypedRuleContext(mysqlParser.QueryExpressionContext,0)

        def orderByClause(self):
            return self.getTypedRuleContext(mysqlParser.OrderByClauseContext,0)

        def limitClause(self):
            return self.getTypedRuleContext(mysqlParser.LimitClauseContext,0)

        def lockClause(self):
            return self.getTypedRuleContext(mysqlParser.LockClauseContext,0)

        def ALL(self):
            return self.getToken(mysqlParser.ALL, 0)
        def DISTINCT(self):
            return self.getToken(mysqlParser.DISTINCT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionParenthesisSelect" ):
                listener.enterUnionParenthesisSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionParenthesisSelect" ):
                listener.exitUnionParenthesisSelect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionParenthesisSelect" ):
                return visitor.visitUnionParenthesisSelect(self)
            else:
                return visitor.visitChildren(self)


    class SimpleSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.SelectStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(mysqlParser.QuerySpecificationContext,0)

        def lockClause(self):
            return self.getTypedRuleContext(mysqlParser.LockClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleSelect" ):
                listener.enterSimpleSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleSelect" ):
                listener.exitSimpleSelect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleSelect" ):
                return visitor.visitSimpleSelect(self)
            else:
                return visitor.visitChildren(self)


    class ParenthesisSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.SelectStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryExpression(self):
            return self.getTypedRuleContext(mysqlParser.QueryExpressionContext,0)

        def lockClause(self):
            return self.getTypedRuleContext(mysqlParser.LockClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesisSelect" ):
                listener.enterParenthesisSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesisSelect" ):
                listener.exitParenthesisSelect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesisSelect" ):
                return visitor.visitParenthesisSelect(self)
            else:
                return visitor.visitChildren(self)



    def selectStatement(self):

        localctx = mysqlParser.SelectStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_selectStatement)
        self._la = 0 # Token type
        try:
            self.state = 2834
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,383,self._ctx)
            if la_ == 1:
                localctx = mysqlParser.SimpleSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2779
                self.querySpecification()
                self.state = 2781
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.FOR or _la==mysqlParser.LOCK:
                    self.state = 2780
                    self.lockClause()


                pass

            elif la_ == 2:
                localctx = mysqlParser.ParenthesisSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2783
                self.queryExpression()
                self.state = 2785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.FOR or _la==mysqlParser.LOCK:
                    self.state = 2784
                    self.lockClause()


                pass

            elif la_ == 3:
                localctx = mysqlParser.UnionSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2787
                self.querySpecificationNointo()
                self.state = 2789 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2788
                        self.unionStatement()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2791 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,370,self._ctx)

                self.state = 2801
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.UNION:
                    self.state = 2793
                    self.match(mysqlParser.UNION)
                    self.state = 2795
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==mysqlParser.ALL or _la==mysqlParser.DISTINCT:
                        self.state = 2794
                        _la = self._input.LA(1)
                        if not(_la==mysqlParser.ALL or _la==mysqlParser.DISTINCT):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 2799
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [mysqlParser.SELECT]:
                        self.state = 2797
                        self.querySpecification()
                        pass
                    elif token in [mysqlParser.LR_BRACKET]:
                        self.state = 2798
                        self.queryExpression()
                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 2804
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.ORDER:
                    self.state = 2803
                    self.orderByClause()


                self.state = 2807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.LIMIT:
                    self.state = 2806
                    self.limitClause()


                self.state = 2810
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.FOR or _la==mysqlParser.LOCK:
                    self.state = 2809
                    self.lockClause()


                pass

            elif la_ == 4:
                localctx = mysqlParser.UnionParenthesisSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2812
                self.queryExpressionNointo()
                self.state = 2814 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2813
                        self.unionParenthesis()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2816 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,377,self._ctx)

                self.state = 2823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.UNION:
                    self.state = 2818
                    self.match(mysqlParser.UNION)
                    self.state = 2820
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==mysqlParser.ALL or _la==mysqlParser.DISTINCT:
                        self.state = 2819
                        _la = self._input.LA(1)
                        if not(_la==mysqlParser.ALL or _la==mysqlParser.DISTINCT):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 2822
                    self.queryExpression()


                self.state = 2826
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.ORDER:
                    self.state = 2825
                    self.orderByClause()


                self.state = 2829
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.LIMIT:
                    self.state = 2828
                    self.limitClause()


                self.state = 2832
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.FOR or _la==mysqlParser.LOCK:
                    self.state = 2831
                    self.lockClause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UpdateStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleUpdateStatement(self):
            return self.getTypedRuleContext(mysqlParser.SingleUpdateStatementContext,0)


        def multipleUpdateStatement(self):
            return self.getTypedRuleContext(mysqlParser.MultipleUpdateStatementContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_updateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateStatement" ):
                listener.enterUpdateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateStatement" ):
                listener.exitUpdateStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdateStatement" ):
                return visitor.visitUpdateStatement(self)
            else:
                return visitor.visitChildren(self)




    def updateStatement(self):

        localctx = mysqlParser.UpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_updateStatement)
        try:
            self.state = 2838
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,384,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2836
                self.singleUpdateStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2837
                self.multipleUpdateStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InsertStatementValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.insertFormat = None # Token

        def selectStatement(self):
            return self.getTypedRuleContext(mysqlParser.SelectStatementContext,0)


        def expressions(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.ExpressionsContext)
            else:
                return self.getTypedRuleContext(mysqlParser.ExpressionsContext,i)


        def VALUES(self):
            return self.getToken(mysqlParser.VALUES, 0)

        def VALUE(self):
            return self.getToken(mysqlParser.VALUE, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_insertStatementValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertStatementValue" ):
                listener.enterInsertStatementValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertStatementValue" ):
                listener.exitInsertStatementValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsertStatementValue" ):
                return visitor.visitInsertStatementValue(self)
            else:
                return visitor.visitChildren(self)




    def insertStatementValue(self):

        localctx = mysqlParser.InsertStatementValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_insertStatementValue)
        self._la = 0 # Token type
        try:
            self.state = 2855
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.SELECT, mysqlParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2840
                self.selectStatement()
                pass
            elif token in [mysqlParser.VALUES, mysqlParser.VALUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2841
                localctx.insertFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.VALUES or _la==mysqlParser.VALUE):
                    localctx.insertFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2842
                self.match(mysqlParser.LR_BRACKET)
                self.state = 2843
                self.expressions()
                self.state = 2844
                self.match(mysqlParser.RR_BRACKET)
                self.state = 2852
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.COMMA:
                    self.state = 2845
                    self.match(mysqlParser.COMMA)
                    self.state = 2846
                    self.match(mysqlParser.LR_BRACKET)
                    self.state = 2847
                    self.expressions()
                    self.state = 2848
                    self.match(mysqlParser.RR_BRACKET)
                    self.state = 2854
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UpdatedElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullColumnName(self):
            return self.getTypedRuleContext(mysqlParser.FullColumnNameContext,0)


        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_updatedElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdatedElement" ):
                listener.enterUpdatedElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdatedElement" ):
                listener.exitUpdatedElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdatedElement" ):
                return visitor.visitUpdatedElement(self)
            else:
                return visitor.visitChildren(self)




    def updatedElement(self):

        localctx = mysqlParser.UpdatedElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_updatedElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2857
            self.fullColumnName()
            self.state = 2858
            self.match(mysqlParser.EQUAL_SYMBOL)
            self.state = 2859
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentFieldContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def LOCAL_ID(self):
            return self.getToken(mysqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_assignmentField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentField" ):
                listener.enterAssignmentField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentField" ):
                listener.exitAssignmentField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentField" ):
                return visitor.visitAssignmentField(self)
            else:
                return visitor.visitChildren(self)




    def assignmentField(self):

        localctx = mysqlParser.AssignmentFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_assignmentField)
        try:
            self.state = 2863
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.LEFT, mysqlParser.RIGHT, mysqlParser.DATE, mysqlParser.TIME, mysqlParser.TIMESTAMP, mysqlParser.DATETIME, mysqlParser.YEAR, mysqlParser.TEXT, mysqlParser.ENUM, mysqlParser.COUNT, mysqlParser.POSITION, mysqlParser.ACCOUNT, mysqlParser.ACTION, mysqlParser.AFTER, mysqlParser.AGGREGATE, mysqlParser.ALGORITHM, mysqlParser.ANY, mysqlParser.AT, mysqlParser.AUTHORS, mysqlParser.AUTOCOMMIT, mysqlParser.AUTOEXTEND_SIZE, mysqlParser.AUTO_INCREMENT, mysqlParser.AVG_ROW_LENGTH, mysqlParser.BEGIN, mysqlParser.BINLOG, mysqlParser.BIT, mysqlParser.BLOCK, mysqlParser.BTREE, mysqlParser.CASCADED, mysqlParser.CHAIN, mysqlParser.CHANNEL, mysqlParser.CHECKSUM, mysqlParser.CIPHER, mysqlParser.CLIENT, mysqlParser.COALESCE, mysqlParser.CODE, mysqlParser.COLUMNS, mysqlParser.COLUMN_FORMAT, mysqlParser.COMMENT, mysqlParser.COMMIT, mysqlParser.COMPACT, mysqlParser.COMPLETION, mysqlParser.COMPRESSED, mysqlParser.COMPRESSION, mysqlParser.CONCURRENT, mysqlParser.CONNECTION, mysqlParser.CONSISTENT, mysqlParser.CONTAINS, mysqlParser.CONTEXT, mysqlParser.CONTRIBUTORS, mysqlParser.COPY, mysqlParser.CPU, mysqlParser.DATA, mysqlParser.DATAFILE, mysqlParser.DEALLOCATE, mysqlParser.DEFAULT_AUTH, mysqlParser.DEFINER, mysqlParser.DELAY_KEY_WRITE, mysqlParser.DIRECTORY, mysqlParser.DISABLE, mysqlParser.DISCARD, mysqlParser.DISK, mysqlParser.DO, mysqlParser.DUMPFILE, mysqlParser.DUPLICATE, mysqlParser.DYNAMIC, mysqlParser.ENABLE, mysqlParser.ENCRYPTION, mysqlParser.ENDS, mysqlParser.ENGINE, mysqlParser.ENGINES, mysqlParser.ERROR, mysqlParser.ERRORS, mysqlParser.ESCAPE, mysqlParser.EVEN, mysqlParser.EVENT, mysqlParser.EVENTS, mysqlParser.EVERY, mysqlParser.EXCHANGE, mysqlParser.EXCLUSIVE, mysqlParser.EXPIRE, mysqlParser.EXTENT_SIZE, mysqlParser.FAULTS, mysqlParser.FIELDS, mysqlParser.FILE_BLOCK_SIZE, mysqlParser.FILTER, mysqlParser.FIRST, mysqlParser.FIXED, mysqlParser.FOLLOWS, mysqlParser.FULL, mysqlParser.FUNCTION, mysqlParser.GLOBAL, mysqlParser.GRANTS, mysqlParser.GROUP_REPLICATION, mysqlParser.HASH, mysqlParser.HOST, mysqlParser.IDENTIFIED, mysqlParser.IGNORE_SERVER_IDS, mysqlParser.IMPORT, mysqlParser.INDEXES, mysqlParser.INITIAL_SIZE, mysqlParser.INPLACE, mysqlParser.INSERT_METHOD, mysqlParser.INSTANCE, mysqlParser.INVOKER, mysqlParser.IO, mysqlParser.IO_THREAD, mysqlParser.IPC, mysqlParser.ISOLATION, mysqlParser.ISSUER, mysqlParser.KEY_BLOCK_SIZE, mysqlParser.LANGUAGE, mysqlParser.LAST, mysqlParser.LEAVES, mysqlParser.LESS, mysqlParser.LEVEL, mysqlParser.LIST, mysqlParser.LOCAL, mysqlParser.LOGFILE, mysqlParser.LOGS, mysqlParser.MASTER, mysqlParser.MASTER_AUTO_POSITION, mysqlParser.MASTER_CONNECT_RETRY, mysqlParser.MASTER_DELAY, mysqlParser.MASTER_HEARTBEAT_PERIOD, mysqlParser.MASTER_HOST, mysqlParser.MASTER_LOG_FILE, mysqlParser.MASTER_LOG_POS, mysqlParser.MASTER_PASSWORD, mysqlParser.MASTER_PORT, mysqlParser.MASTER_RETRY_COUNT, mysqlParser.MASTER_SSL, mysqlParser.MASTER_SSL_CA, mysqlParser.MASTER_SSL_CAPATH, mysqlParser.MASTER_SSL_CERT, mysqlParser.MASTER_SSL_CIPHER, mysqlParser.MASTER_SSL_CRL, mysqlParser.MASTER_SSL_CRLPATH, mysqlParser.MASTER_SSL_KEY, mysqlParser.MASTER_TLS_VERSION, mysqlParser.MASTER_USER, mysqlParser.MAX_CONNECTIONS_PER_HOUR, mysqlParser.MAX_QUERIES_PER_HOUR, mysqlParser.MAX_ROWS, mysqlParser.MAX_SIZE, mysqlParser.MAX_UPDATES_PER_HOUR, mysqlParser.MAX_USER_CONNECTIONS, mysqlParser.MERGE, mysqlParser.MID, mysqlParser.MIGRATE, mysqlParser.MIN_ROWS, mysqlParser.MODIFY, mysqlParser.MUTEX, mysqlParser.MYSQL, mysqlParser.NAME, mysqlParser.NAMES, mysqlParser.NCHAR, mysqlParser.NEVER, mysqlParser.NO, mysqlParser.NODEGROUP, mysqlParser.NONE, mysqlParser.OFFLINE, mysqlParser.OFFSET, mysqlParser.OJ, mysqlParser.OLD_PASSWORD, mysqlParser.ONE, mysqlParser.ONLINE, mysqlParser.ONLY, mysqlParser.OPTIMIZER_COSTS, mysqlParser.OPTIONS, mysqlParser.OWNER, mysqlParser.PACK_KEYS, mysqlParser.PAGE, mysqlParser.PARSER, mysqlParser.PARTIAL, mysqlParser.PARTITIONING, mysqlParser.PARTITIONS, mysqlParser.PASSWORD, mysqlParser.PHASE, mysqlParser.PLUGIN_DIR, mysqlParser.PLUGINS, mysqlParser.PORT, mysqlParser.PRECEDES, mysqlParser.PREPARE, mysqlParser.PRESERVE, mysqlParser.PREV, mysqlParser.PROCESSLIST, mysqlParser.PROFILE, mysqlParser.PROFILES, mysqlParser.PROXY, mysqlParser.QUERY, mysqlParser.QUICK, mysqlParser.REBUILD, mysqlParser.RECOVER, mysqlParser.REDO_BUFFER_SIZE, mysqlParser.REDUNDANT, mysqlParser.RELAY_LOG_FILE, mysqlParser.RELAY_LOG_POS, mysqlParser.RELAYLOG, mysqlParser.REMOVE, mysqlParser.REORGANIZE, mysqlParser.REPAIR, mysqlParser.REPLICATE_DO_DB, mysqlParser.REPLICATE_DO_TABLE, mysqlParser.REPLICATE_IGNORE_DB, mysqlParser.REPLICATE_IGNORE_TABLE, mysqlParser.REPLICATE_REWRITE_DB, mysqlParser.REPLICATE_WILD_DO_TABLE, mysqlParser.REPLICATE_WILD_IGNORE_TABLE, mysqlParser.REPLICATION, mysqlParser.RESUME, mysqlParser.RETURNS, mysqlParser.ROLLBACK, mysqlParser.ROLLUP, mysqlParser.ROTATE, mysqlParser.ROW, mysqlParser.ROWS, mysqlParser.ROW_FORMAT, mysqlParser.SAVEPOINT, mysqlParser.SCHEDULE, mysqlParser.SECURITY, mysqlParser.SERVER, mysqlParser.SESSION, mysqlParser.SHARE, mysqlParser.SHARED, mysqlParser.SIGNED, mysqlParser.SIMPLE, mysqlParser.SLAVE, mysqlParser.SNAPSHOT, mysqlParser.SOCKET, mysqlParser.SOME, mysqlParser.SOUNDS, mysqlParser.SOURCE, mysqlParser.SQL_AFTER_GTIDS, mysqlParser.SQL_AFTER_MTS_GAPS, mysqlParser.SQL_BEFORE_GTIDS, mysqlParser.SQL_BUFFER_RESULT, mysqlParser.SQL_CACHE, mysqlParser.SQL_NO_CACHE, mysqlParser.SQL_THREAD, mysqlParser.START, mysqlParser.STARTS, mysqlParser.STATS_AUTO_RECALC, mysqlParser.STATS_PERSISTENT, mysqlParser.STATS_SAMPLE_PAGES, mysqlParser.STATUS, mysqlParser.STOP, mysqlParser.STORAGE, mysqlParser.STRING, mysqlParser.SUBJECT, mysqlParser.SUBPARTITION, mysqlParser.SUBPARTITIONS, mysqlParser.SUSPEND, mysqlParser.SWAPS, mysqlParser.SWITCHES, mysqlParser.TABLESPACE, mysqlParser.TEMPORARY, mysqlParser.TEMPTABLE, mysqlParser.THAN, mysqlParser.TRANSACTION, mysqlParser.TRUNCATE, mysqlParser.UNDEFINED, mysqlParser.UNDOFILE, mysqlParser.UNDO_BUFFER_SIZE, mysqlParser.UNKNOWN, mysqlParser.UPGRADE, mysqlParser.USER, mysqlParser.VALIDATION, mysqlParser.VALUE, mysqlParser.VARIABLES, mysqlParser.VIEW, mysqlParser.WAIT, mysqlParser.WARNINGS, mysqlParser.WITHOUT, mysqlParser.WORK, mysqlParser.WRAPPER, mysqlParser.X509, mysqlParser.XA, mysqlParser.XML, mysqlParser.QUARTER, mysqlParser.MONTH, mysqlParser.DAY, mysqlParser.HOUR, mysqlParser.MINUTE, mysqlParser.WEEK, mysqlParser.SECOND, mysqlParser.MICROSECOND, mysqlParser.TABLES, mysqlParser.ROUTINE, mysqlParser.EXECUTE, mysqlParser.FILE, mysqlParser.PROCESS, mysqlParser.RELOAD, mysqlParser.SHUTDOWN, mysqlParser.SUPER, mysqlParser.PRIVILEGES, mysqlParser.ARMSCII8, mysqlParser.ASCII, mysqlParser.BIG5, mysqlParser.CP1250, mysqlParser.CP1251, mysqlParser.CP1256, mysqlParser.CP1257, mysqlParser.CP850, mysqlParser.CP852, mysqlParser.CP866, mysqlParser.CP932, mysqlParser.DEC8, mysqlParser.EUCJPMS, mysqlParser.EUCKR, mysqlParser.GB2312, mysqlParser.GBK, mysqlParser.GEOSTD8, mysqlParser.GREEK, mysqlParser.HEBREW, mysqlParser.HP8, mysqlParser.KEYBCS2, mysqlParser.KOI8R, mysqlParser.KOI8U, mysqlParser.LATIN1, mysqlParser.LATIN2, mysqlParser.LATIN5, mysqlParser.LATIN7, mysqlParser.MACCE, mysqlParser.MACROMAN, mysqlParser.SJIS, mysqlParser.SWE7, mysqlParser.TIS620, mysqlParser.UCS2, mysqlParser.UJIS, mysqlParser.UTF16, mysqlParser.UTF16LE, mysqlParser.UTF32, mysqlParser.UTF8, mysqlParser.UTF8MB3, mysqlParser.UTF8MB4, mysqlParser.ARCHIVE, mysqlParser.BLACKHOLE, mysqlParser.CSV, mysqlParser.FEDERATED, mysqlParser.INNODB, mysqlParser.MEMORY, mysqlParser.MRG_MYISAM, mysqlParser.MYISAM, mysqlParser.NDB, mysqlParser.NDBCLUSTER, mysqlParser.PERFOMANCE_SCHEMA, mysqlParser.REPEATABLE, mysqlParser.COMMITTED, mysqlParser.UNCOMMITTED, mysqlParser.SERIALIZABLE, mysqlParser.GEOMETRYCOLLECTION, mysqlParser.LINESTRING, mysqlParser.MULTILINESTRING, mysqlParser.MULTIPOINT, mysqlParser.MULTIPOLYGON, mysqlParser.POINT, mysqlParser.POLYGON, mysqlParser.ABS, mysqlParser.ACOS, mysqlParser.ADDDATE, mysqlParser.ADDTIME, mysqlParser.AES_DECRYPT, mysqlParser.AES_ENCRYPT, mysqlParser.AREA, mysqlParser.ASBINARY, mysqlParser.ASIN, mysqlParser.ASTEXT, mysqlParser.ASWKB, mysqlParser.ASWKT, mysqlParser.ASYMMETRIC_DECRYPT, mysqlParser.ASYMMETRIC_DERIVE, mysqlParser.ASYMMETRIC_ENCRYPT, mysqlParser.ASYMMETRIC_SIGN, mysqlParser.ASYMMETRIC_VERIFY, mysqlParser.ATAN, mysqlParser.ATAN2, mysqlParser.BENCHMARK, mysqlParser.BIN, mysqlParser.BIT_COUNT, mysqlParser.BIT_LENGTH, mysqlParser.BUFFER, mysqlParser.CEIL, mysqlParser.CEILING, mysqlParser.CENTROID, mysqlParser.CHARACTER_LENGTH, mysqlParser.CHARSET, mysqlParser.CHAR_LENGTH, mysqlParser.COERCIBILITY, mysqlParser.COLLATION, mysqlParser.COMPRESS, mysqlParser.CONCAT, mysqlParser.CONCAT_WS, mysqlParser.CONNECTION_ID, mysqlParser.CONV, mysqlParser.CONVERT_TZ, mysqlParser.COS, mysqlParser.COT, mysqlParser.CRC32, mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY, mysqlParser.CREATE_ASYMMETRIC_PUB_KEY, mysqlParser.CREATE_DH_PARAMETERS, mysqlParser.CREATE_DIGEST, mysqlParser.CROSSES, mysqlParser.DATEDIFF, mysqlParser.DATE_FORMAT, mysqlParser.DAYNAME, mysqlParser.DAYOFMONTH, mysqlParser.DAYOFWEEK, mysqlParser.DAYOFYEAR, mysqlParser.DECODE, mysqlParser.DEGREES, mysqlParser.DES_DECRYPT, mysqlParser.DES_ENCRYPT, mysqlParser.DIMENSION, mysqlParser.DISJOINT, mysqlParser.ELT, mysqlParser.ENCODE, mysqlParser.ENCRYPT, mysqlParser.ENDPOINT, mysqlParser.ENVELOPE, mysqlParser.EQUALS, mysqlParser.EXP, mysqlParser.EXPORT_SET, mysqlParser.EXTERIORRING, mysqlParser.EXTRACTVALUE, mysqlParser.FIELD, mysqlParser.FIND_IN_SET, mysqlParser.FLOOR, mysqlParser.FORMAT, mysqlParser.FOUND_ROWS, mysqlParser.FROM_BASE64, mysqlParser.FROM_DAYS, mysqlParser.FROM_UNIXTIME, mysqlParser.GEOMCOLLFROMTEXT, mysqlParser.GEOMCOLLFROMWKB, mysqlParser.GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.GEOMETRYCOLLECTIONFROMWKB, mysqlParser.GEOMETRYFROMTEXT, mysqlParser.GEOMETRYFROMWKB, mysqlParser.GEOMETRYN, mysqlParser.GEOMETRYTYPE, mysqlParser.GEOMFROMTEXT, mysqlParser.GEOMFROMWKB, mysqlParser.GET_FORMAT, mysqlParser.GET_LOCK, mysqlParser.GLENGTH, mysqlParser.GREATEST, mysqlParser.GTID_SUBSET, mysqlParser.GTID_SUBTRACT, mysqlParser.HEX, mysqlParser.IFNULL, mysqlParser.INET6_ATON, mysqlParser.INET6_NTOA, mysqlParser.INET_ATON, mysqlParser.INET_NTOA, mysqlParser.INSTR, mysqlParser.INTERIORRINGN, mysqlParser.INTERSECTS, mysqlParser.ISCLOSED, mysqlParser.ISEMPTY, mysqlParser.ISNULL, mysqlParser.ISSIMPLE, mysqlParser.IS_FREE_LOCK, mysqlParser.IS_IPV4, mysqlParser.IS_IPV4_COMPAT, mysqlParser.IS_IPV4_MAPPED, mysqlParser.IS_IPV6, mysqlParser.IS_USED_LOCK, mysqlParser.LAST_INSERT_ID, mysqlParser.LCASE, mysqlParser.LEAST, mysqlParser.LENGTH, mysqlParser.LINEFROMTEXT, mysqlParser.LINEFROMWKB, mysqlParser.LINESTRINGFROMTEXT, mysqlParser.LINESTRINGFROMWKB, mysqlParser.LN, mysqlParser.LOAD_FILE, mysqlParser.LOCATE, mysqlParser.LOG, mysqlParser.LOG10, mysqlParser.LOG2, mysqlParser.LOWER, mysqlParser.LPAD, mysqlParser.LTRIM, mysqlParser.MAKEDATE, mysqlParser.MAKETIME, mysqlParser.MAKE_SET, mysqlParser.MASTER_POS_WAIT, mysqlParser.MBRCONTAINS, mysqlParser.MBRDISJOINT, mysqlParser.MBREQUAL, mysqlParser.MBRINTERSECTS, mysqlParser.MBROVERLAPS, mysqlParser.MBRTOUCHES, mysqlParser.MBRWITHIN, mysqlParser.MD5, mysqlParser.MLINEFROMTEXT, mysqlParser.MLINEFROMWKB, mysqlParser.MONTHNAME, mysqlParser.MPOINTFROMTEXT, mysqlParser.MPOINTFROMWKB, mysqlParser.MPOLYFROMTEXT, mysqlParser.MPOLYFROMWKB, mysqlParser.MULTILINESTRINGFROMTEXT, mysqlParser.MULTILINESTRINGFROMWKB, mysqlParser.MULTIPOINTFROMTEXT, mysqlParser.MULTIPOINTFROMWKB, mysqlParser.MULTIPOLYGONFROMTEXT, mysqlParser.MULTIPOLYGONFROMWKB, mysqlParser.NAME_CONST, mysqlParser.NULLIF, mysqlParser.NUMGEOMETRIES, mysqlParser.NUMINTERIORRINGS, mysqlParser.NUMPOINTS, mysqlParser.OCT, mysqlParser.OCTET_LENGTH, mysqlParser.ORD, mysqlParser.OVERLAPS, mysqlParser.PERIOD_ADD, mysqlParser.PERIOD_DIFF, mysqlParser.PI, mysqlParser.POINTFROMTEXT, mysqlParser.POINTFROMWKB, mysqlParser.POINTN, mysqlParser.POLYFROMTEXT, mysqlParser.POLYFROMWKB, mysqlParser.POLYGONFROMTEXT, mysqlParser.POLYGONFROMWKB, mysqlParser.POW, mysqlParser.POWER, mysqlParser.QUOTE, mysqlParser.RADIANS, mysqlParser.RAND, mysqlParser.RANDOM_BYTES, mysqlParser.RELEASE_LOCK, mysqlParser.REVERSE, mysqlParser.ROUND, mysqlParser.ROW_COUNT, mysqlParser.RPAD, mysqlParser.RTRIM, mysqlParser.SEC_TO_TIME, mysqlParser.SESSION_USER, mysqlParser.SHA, mysqlParser.SHA1, mysqlParser.SHA2, mysqlParser.SIGN, mysqlParser.SIN, mysqlParser.SLEEP, mysqlParser.SOUNDEX, mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, mysqlParser.SQRT, mysqlParser.SRID, mysqlParser.STARTPOINT, mysqlParser.STRCMP, mysqlParser.STR_TO_DATE, mysqlParser.ST_AREA, mysqlParser.ST_ASBINARY, mysqlParser.ST_ASTEXT, mysqlParser.ST_ASWKB, mysqlParser.ST_ASWKT, mysqlParser.ST_BUFFER, mysqlParser.ST_CENTROID, mysqlParser.ST_CONTAINS, mysqlParser.ST_CROSSES, mysqlParser.ST_DIFFERENCE, mysqlParser.ST_DIMENSION, mysqlParser.ST_DISJOINT, mysqlParser.ST_DISTANCE, mysqlParser.ST_ENDPOINT, mysqlParser.ST_ENVELOPE, mysqlParser.ST_EQUALS, mysqlParser.ST_EXTERIORRING, mysqlParser.ST_GEOMCOLLFROMTEXT, mysqlParser.ST_GEOMCOLLFROMTXT, mysqlParser.ST_GEOMCOLLFROMWKB, mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, mysqlParser.ST_GEOMETRYFROMTEXT, mysqlParser.ST_GEOMETRYFROMWKB, mysqlParser.ST_GEOMETRYN, mysqlParser.ST_GEOMETRYTYPE, mysqlParser.ST_GEOMFROMTEXT, mysqlParser.ST_GEOMFROMWKB, mysqlParser.ST_INTERIORRINGN, mysqlParser.ST_INTERSECTION, mysqlParser.ST_INTERSECTS, mysqlParser.ST_ISCLOSED, mysqlParser.ST_ISEMPTY, mysqlParser.ST_ISSIMPLE, mysqlParser.ST_LINEFROMTEXT, mysqlParser.ST_LINEFROMWKB, mysqlParser.ST_LINESTRINGFROMTEXT, mysqlParser.ST_LINESTRINGFROMWKB, mysqlParser.ST_NUMGEOMETRIES, mysqlParser.ST_NUMINTERIORRING, mysqlParser.ST_NUMINTERIORRINGS, mysqlParser.ST_NUMPOINTS, mysqlParser.ST_OVERLAPS, mysqlParser.ST_POINTFROMTEXT, mysqlParser.ST_POINTFROMWKB, mysqlParser.ST_POINTN, mysqlParser.ST_POLYFROMTEXT, mysqlParser.ST_POLYFROMWKB, mysqlParser.ST_POLYGONFROMTEXT, mysqlParser.ST_POLYGONFROMWKB, mysqlParser.ST_SRID, mysqlParser.ST_STARTPOINT, mysqlParser.ST_SYMDIFFERENCE, mysqlParser.ST_TOUCHES, mysqlParser.ST_UNION, mysqlParser.ST_WITHIN, mysqlParser.ST_X, mysqlParser.ST_Y, mysqlParser.SUBDATE, mysqlParser.SUBSTRING_INDEX, mysqlParser.SUBTIME, mysqlParser.SYSTEM_USER, mysqlParser.TAN, mysqlParser.TIMEDIFF, mysqlParser.TIMESTAMPADD, mysqlParser.TIMESTAMPDIFF, mysqlParser.TIME_FORMAT, mysqlParser.TIME_TO_SEC, mysqlParser.TOUCHES, mysqlParser.TO_BASE64, mysqlParser.TO_DAYS, mysqlParser.TO_SECONDS, mysqlParser.UCASE, mysqlParser.UNCOMPRESS, mysqlParser.UNCOMPRESSED_LENGTH, mysqlParser.UNHEX, mysqlParser.UNIX_TIMESTAMP, mysqlParser.UPDATEXML, mysqlParser.UPPER, mysqlParser.UUID, mysqlParser.UUID_SHORT, mysqlParser.VALIDATE_PASSWORD_STRENGTH, mysqlParser.VERSION, mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, mysqlParser.WEEKDAY, mysqlParser.WEEKOFYEAR, mysqlParser.WEIGHT_STRING, mysqlParser.WITHIN, mysqlParser.YEARWEEK, mysqlParser.Y_FUNCTION, mysqlParser.X_FUNCTION, mysqlParser.CHARSET_REVERSE_QOUTE_STRING, mysqlParser.ID, mysqlParser.REVERSE_QUOTE_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2861
                self.uid()
                pass
            elif token in [mysqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2862
                self.match(mysqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LockClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(mysqlParser.FOR, 0)

        def UPDATE(self):
            return self.getToken(mysqlParser.UPDATE, 0)

        def LOCK(self):
            return self.getToken(mysqlParser.LOCK, 0)

        def IN(self):
            return self.getToken(mysqlParser.IN, 0)

        def SHARE(self):
            return self.getToken(mysqlParser.SHARE, 0)

        def MODE(self):
            return self.getToken(mysqlParser.MODE, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_lockClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockClause" ):
                listener.enterLockClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockClause" ):
                listener.exitLockClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLockClause" ):
                return visitor.visitLockClause(self)
            else:
                return visitor.visitChildren(self)




    def lockClause(self):

        localctx = mysqlParser.LockClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_lockClause)
        try:
            self.state = 2871
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2865
                self.match(mysqlParser.FOR)
                self.state = 2866
                self.match(mysqlParser.UPDATE)
                pass
            elif token in [mysqlParser.LOCK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2867
                self.match(mysqlParser.LOCK)
                self.state = 2868
                self.match(mysqlParser.IN)
                self.state = 2869
                self.match(mysqlParser.SHARE)
                self.state = 2870
                self.match(mysqlParser.MODE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SingleDeleteStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(mysqlParser.DELETE, 0)

        def FROM(self):
            return self.getToken(mysqlParser.FROM, 0)

        def tableName(self):
            return self.getTypedRuleContext(mysqlParser.TableNameContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(mysqlParser.LOW_PRIORITY, 0)

        def QUICK(self):
            return self.getToken(mysqlParser.QUICK, 0)

        def IGNORE(self):
            return self.getToken(mysqlParser.IGNORE, 0)

        def PARTITION(self):
            return self.getToken(mysqlParser.PARTITION, 0)

        def uidList(self):
            return self.getTypedRuleContext(mysqlParser.UidListContext,0)


        def WHERE(self):
            return self.getToken(mysqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(mysqlParser.OrderByClauseContext,0)


        def LIMIT(self):
            return self.getToken(mysqlParser.LIMIT, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_singleDeleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleDeleteStatement" ):
                listener.enterSingleDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleDeleteStatement" ):
                listener.exitSingleDeleteStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleDeleteStatement" ):
                return visitor.visitSingleDeleteStatement(self)
            else:
                return visitor.visitChildren(self)




    def singleDeleteStatement(self):

        localctx = mysqlParser.SingleDeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_singleDeleteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2873
            self.match(mysqlParser.DELETE)
            self.state = 2875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.LOW_PRIORITY:
                self.state = 2874
                self.match(mysqlParser.LOW_PRIORITY)


            self.state = 2878
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.QUICK:
                self.state = 2877
                self.match(mysqlParser.QUICK)


            self.state = 2881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.IGNORE:
                self.state = 2880
                self.match(mysqlParser.IGNORE)


            self.state = 2883
            self.match(mysqlParser.FROM)
            self.state = 2884
            self.tableName()
            self.state = 2890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.PARTITION:
                self.state = 2885
                self.match(mysqlParser.PARTITION)
                self.state = 2886
                self.match(mysqlParser.LR_BRACKET)
                self.state = 2887
                self.uidList()
                self.state = 2888
                self.match(mysqlParser.RR_BRACKET)


            self.state = 2894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.WHERE:
                self.state = 2892
                self.match(mysqlParser.WHERE)
                self.state = 2893
                self.expression(0)


            self.state = 2897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.ORDER:
                self.state = 2896
                self.orderByClause()


            self.state = 2901
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.LIMIT:
                self.state = 2899
                self.match(mysqlParser.LIMIT)
                self.state = 2900
                self.decimalLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultipleDeleteStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(mysqlParser.DELETE, 0)

        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.TableNameContext)
            else:
                return self.getTypedRuleContext(mysqlParser.TableNameContext,i)


        def FROM(self):
            return self.getToken(mysqlParser.FROM, 0)

        def tableSources(self):
            return self.getTypedRuleContext(mysqlParser.TableSourcesContext,0)


        def USING(self):
            return self.getToken(mysqlParser.USING, 0)

        def LOW_PRIORITY(self):
            return self.getToken(mysqlParser.LOW_PRIORITY, 0)

        def QUICK(self):
            return self.getToken(mysqlParser.QUICK, 0)

        def IGNORE(self):
            return self.getToken(mysqlParser.IGNORE, 0)

        def WHERE(self):
            return self.getToken(mysqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_multipleDeleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipleDeleteStatement" ):
                listener.enterMultipleDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipleDeleteStatement" ):
                listener.exitMultipleDeleteStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultipleDeleteStatement" ):
                return visitor.visitMultipleDeleteStatement(self)
            else:
                return visitor.visitChildren(self)




    def multipleDeleteStatement(self):

        localctx = mysqlParser.MultipleDeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_multipleDeleteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2903
            self.match(mysqlParser.DELETE)
            self.state = 2905
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.LOW_PRIORITY:
                self.state = 2904
                self.match(mysqlParser.LOW_PRIORITY)


            self.state = 2908
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,397,self._ctx)
            if la_ == 1:
                self.state = 2907
                self.match(mysqlParser.QUICK)


            self.state = 2911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.IGNORE:
                self.state = 2910
                self.match(mysqlParser.IGNORE)


            self.state = 2952
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.LEFT, mysqlParser.RIGHT, mysqlParser.DATE, mysqlParser.TIME, mysqlParser.TIMESTAMP, mysqlParser.DATETIME, mysqlParser.YEAR, mysqlParser.TEXT, mysqlParser.ENUM, mysqlParser.COUNT, mysqlParser.POSITION, mysqlParser.ACCOUNT, mysqlParser.ACTION, mysqlParser.AFTER, mysqlParser.AGGREGATE, mysqlParser.ALGORITHM, mysqlParser.ANY, mysqlParser.AT, mysqlParser.AUTHORS, mysqlParser.AUTOCOMMIT, mysqlParser.AUTOEXTEND_SIZE, mysqlParser.AUTO_INCREMENT, mysqlParser.AVG_ROW_LENGTH, mysqlParser.BEGIN, mysqlParser.BINLOG, mysqlParser.BIT, mysqlParser.BLOCK, mysqlParser.BTREE, mysqlParser.CASCADED, mysqlParser.CHAIN, mysqlParser.CHANNEL, mysqlParser.CHECKSUM, mysqlParser.CIPHER, mysqlParser.CLIENT, mysqlParser.COALESCE, mysqlParser.CODE, mysqlParser.COLUMNS, mysqlParser.COLUMN_FORMAT, mysqlParser.COMMENT, mysqlParser.COMMIT, mysqlParser.COMPACT, mysqlParser.COMPLETION, mysqlParser.COMPRESSED, mysqlParser.COMPRESSION, mysqlParser.CONCURRENT, mysqlParser.CONNECTION, mysqlParser.CONSISTENT, mysqlParser.CONTAINS, mysqlParser.CONTEXT, mysqlParser.CONTRIBUTORS, mysqlParser.COPY, mysqlParser.CPU, mysqlParser.DATA, mysqlParser.DATAFILE, mysqlParser.DEALLOCATE, mysqlParser.DEFAULT_AUTH, mysqlParser.DEFINER, mysqlParser.DELAY_KEY_WRITE, mysqlParser.DIRECTORY, mysqlParser.DISABLE, mysqlParser.DISCARD, mysqlParser.DISK, mysqlParser.DO, mysqlParser.DUMPFILE, mysqlParser.DUPLICATE, mysqlParser.DYNAMIC, mysqlParser.ENABLE, mysqlParser.ENCRYPTION, mysqlParser.ENDS, mysqlParser.ENGINE, mysqlParser.ENGINES, mysqlParser.ERROR, mysqlParser.ERRORS, mysqlParser.ESCAPE, mysqlParser.EVEN, mysqlParser.EVENT, mysqlParser.EVENTS, mysqlParser.EVERY, mysqlParser.EXCHANGE, mysqlParser.EXCLUSIVE, mysqlParser.EXPIRE, mysqlParser.EXTENT_SIZE, mysqlParser.FAULTS, mysqlParser.FIELDS, mysqlParser.FILE_BLOCK_SIZE, mysqlParser.FILTER, mysqlParser.FIRST, mysqlParser.FIXED, mysqlParser.FOLLOWS, mysqlParser.FULL, mysqlParser.FUNCTION, mysqlParser.GLOBAL, mysqlParser.GRANTS, mysqlParser.GROUP_REPLICATION, mysqlParser.HASH, mysqlParser.HOST, mysqlParser.IDENTIFIED, mysqlParser.IGNORE_SERVER_IDS, mysqlParser.IMPORT, mysqlParser.INDEXES, mysqlParser.INITIAL_SIZE, mysqlParser.INPLACE, mysqlParser.INSERT_METHOD, mysqlParser.INSTANCE, mysqlParser.INVOKER, mysqlParser.IO, mysqlParser.IO_THREAD, mysqlParser.IPC, mysqlParser.ISOLATION, mysqlParser.ISSUER, mysqlParser.KEY_BLOCK_SIZE, mysqlParser.LANGUAGE, mysqlParser.LAST, mysqlParser.LEAVES, mysqlParser.LESS, mysqlParser.LEVEL, mysqlParser.LIST, mysqlParser.LOCAL, mysqlParser.LOGFILE, mysqlParser.LOGS, mysqlParser.MASTER, mysqlParser.MASTER_AUTO_POSITION, mysqlParser.MASTER_CONNECT_RETRY, mysqlParser.MASTER_DELAY, mysqlParser.MASTER_HEARTBEAT_PERIOD, mysqlParser.MASTER_HOST, mysqlParser.MASTER_LOG_FILE, mysqlParser.MASTER_LOG_POS, mysqlParser.MASTER_PASSWORD, mysqlParser.MASTER_PORT, mysqlParser.MASTER_RETRY_COUNT, mysqlParser.MASTER_SSL, mysqlParser.MASTER_SSL_CA, mysqlParser.MASTER_SSL_CAPATH, mysqlParser.MASTER_SSL_CERT, mysqlParser.MASTER_SSL_CIPHER, mysqlParser.MASTER_SSL_CRL, mysqlParser.MASTER_SSL_CRLPATH, mysqlParser.MASTER_SSL_KEY, mysqlParser.MASTER_TLS_VERSION, mysqlParser.MASTER_USER, mysqlParser.MAX_CONNECTIONS_PER_HOUR, mysqlParser.MAX_QUERIES_PER_HOUR, mysqlParser.MAX_ROWS, mysqlParser.MAX_SIZE, mysqlParser.MAX_UPDATES_PER_HOUR, mysqlParser.MAX_USER_CONNECTIONS, mysqlParser.MERGE, mysqlParser.MID, mysqlParser.MIGRATE, mysqlParser.MIN_ROWS, mysqlParser.MODIFY, mysqlParser.MUTEX, mysqlParser.MYSQL, mysqlParser.NAME, mysqlParser.NAMES, mysqlParser.NCHAR, mysqlParser.NEVER, mysqlParser.NO, mysqlParser.NODEGROUP, mysqlParser.NONE, mysqlParser.OFFLINE, mysqlParser.OFFSET, mysqlParser.OJ, mysqlParser.OLD_PASSWORD, mysqlParser.ONE, mysqlParser.ONLINE, mysqlParser.ONLY, mysqlParser.OPTIMIZER_COSTS, mysqlParser.OPTIONS, mysqlParser.OWNER, mysqlParser.PACK_KEYS, mysqlParser.PAGE, mysqlParser.PARSER, mysqlParser.PARTIAL, mysqlParser.PARTITIONING, mysqlParser.PARTITIONS, mysqlParser.PASSWORD, mysqlParser.PHASE, mysqlParser.PLUGIN_DIR, mysqlParser.PLUGINS, mysqlParser.PORT, mysqlParser.PRECEDES, mysqlParser.PREPARE, mysqlParser.PRESERVE, mysqlParser.PREV, mysqlParser.PROCESSLIST, mysqlParser.PROFILE, mysqlParser.PROFILES, mysqlParser.PROXY, mysqlParser.QUERY, mysqlParser.QUICK, mysqlParser.REBUILD, mysqlParser.RECOVER, mysqlParser.REDO_BUFFER_SIZE, mysqlParser.REDUNDANT, mysqlParser.RELAY_LOG_FILE, mysqlParser.RELAY_LOG_POS, mysqlParser.RELAYLOG, mysqlParser.REMOVE, mysqlParser.REORGANIZE, mysqlParser.REPAIR, mysqlParser.REPLICATE_DO_DB, mysqlParser.REPLICATE_DO_TABLE, mysqlParser.REPLICATE_IGNORE_DB, mysqlParser.REPLICATE_IGNORE_TABLE, mysqlParser.REPLICATE_REWRITE_DB, mysqlParser.REPLICATE_WILD_DO_TABLE, mysqlParser.REPLICATE_WILD_IGNORE_TABLE, mysqlParser.REPLICATION, mysqlParser.RESUME, mysqlParser.RETURNS, mysqlParser.ROLLBACK, mysqlParser.ROLLUP, mysqlParser.ROTATE, mysqlParser.ROW, mysqlParser.ROWS, mysqlParser.ROW_FORMAT, mysqlParser.SAVEPOINT, mysqlParser.SCHEDULE, mysqlParser.SECURITY, mysqlParser.SERVER, mysqlParser.SESSION, mysqlParser.SHARE, mysqlParser.SHARED, mysqlParser.SIGNED, mysqlParser.SIMPLE, mysqlParser.SLAVE, mysqlParser.SNAPSHOT, mysqlParser.SOCKET, mysqlParser.SOME, mysqlParser.SOUNDS, mysqlParser.SOURCE, mysqlParser.SQL_AFTER_GTIDS, mysqlParser.SQL_AFTER_MTS_GAPS, mysqlParser.SQL_BEFORE_GTIDS, mysqlParser.SQL_BUFFER_RESULT, mysqlParser.SQL_CACHE, mysqlParser.SQL_NO_CACHE, mysqlParser.SQL_THREAD, mysqlParser.START, mysqlParser.STARTS, mysqlParser.STATS_AUTO_RECALC, mysqlParser.STATS_PERSISTENT, mysqlParser.STATS_SAMPLE_PAGES, mysqlParser.STATUS, mysqlParser.STOP, mysqlParser.STORAGE, mysqlParser.STRING, mysqlParser.SUBJECT, mysqlParser.SUBPARTITION, mysqlParser.SUBPARTITIONS, mysqlParser.SUSPEND, mysqlParser.SWAPS, mysqlParser.SWITCHES, mysqlParser.TABLESPACE, mysqlParser.TEMPORARY, mysqlParser.TEMPTABLE, mysqlParser.THAN, mysqlParser.TRANSACTION, mysqlParser.TRUNCATE, mysqlParser.UNDEFINED, mysqlParser.UNDOFILE, mysqlParser.UNDO_BUFFER_SIZE, mysqlParser.UNKNOWN, mysqlParser.UPGRADE, mysqlParser.USER, mysqlParser.VALIDATION, mysqlParser.VALUE, mysqlParser.VARIABLES, mysqlParser.VIEW, mysqlParser.WAIT, mysqlParser.WARNINGS, mysqlParser.WITHOUT, mysqlParser.WORK, mysqlParser.WRAPPER, mysqlParser.X509, mysqlParser.XA, mysqlParser.XML, mysqlParser.QUARTER, mysqlParser.MONTH, mysqlParser.DAY, mysqlParser.HOUR, mysqlParser.MINUTE, mysqlParser.WEEK, mysqlParser.SECOND, mysqlParser.MICROSECOND, mysqlParser.TABLES, mysqlParser.ROUTINE, mysqlParser.EXECUTE, mysqlParser.FILE, mysqlParser.PROCESS, mysqlParser.RELOAD, mysqlParser.SHUTDOWN, mysqlParser.SUPER, mysqlParser.PRIVILEGES, mysqlParser.ARMSCII8, mysqlParser.ASCII, mysqlParser.BIG5, mysqlParser.CP1250, mysqlParser.CP1251, mysqlParser.CP1256, mysqlParser.CP1257, mysqlParser.CP850, mysqlParser.CP852, mysqlParser.CP866, mysqlParser.CP932, mysqlParser.DEC8, mysqlParser.EUCJPMS, mysqlParser.EUCKR, mysqlParser.GB2312, mysqlParser.GBK, mysqlParser.GEOSTD8, mysqlParser.GREEK, mysqlParser.HEBREW, mysqlParser.HP8, mysqlParser.KEYBCS2, mysqlParser.KOI8R, mysqlParser.KOI8U, mysqlParser.LATIN1, mysqlParser.LATIN2, mysqlParser.LATIN5, mysqlParser.LATIN7, mysqlParser.MACCE, mysqlParser.MACROMAN, mysqlParser.SJIS, mysqlParser.SWE7, mysqlParser.TIS620, mysqlParser.UCS2, mysqlParser.UJIS, mysqlParser.UTF16, mysqlParser.UTF16LE, mysqlParser.UTF32, mysqlParser.UTF8, mysqlParser.UTF8MB3, mysqlParser.UTF8MB4, mysqlParser.ARCHIVE, mysqlParser.BLACKHOLE, mysqlParser.CSV, mysqlParser.FEDERATED, mysqlParser.INNODB, mysqlParser.MEMORY, mysqlParser.MRG_MYISAM, mysqlParser.MYISAM, mysqlParser.NDB, mysqlParser.NDBCLUSTER, mysqlParser.PERFOMANCE_SCHEMA, mysqlParser.REPEATABLE, mysqlParser.COMMITTED, mysqlParser.UNCOMMITTED, mysqlParser.SERIALIZABLE, mysqlParser.GEOMETRYCOLLECTION, mysqlParser.LINESTRING, mysqlParser.MULTILINESTRING, mysqlParser.MULTIPOINT, mysqlParser.MULTIPOLYGON, mysqlParser.POINT, mysqlParser.POLYGON, mysqlParser.ABS, mysqlParser.ACOS, mysqlParser.ADDDATE, mysqlParser.ADDTIME, mysqlParser.AES_DECRYPT, mysqlParser.AES_ENCRYPT, mysqlParser.AREA, mysqlParser.ASBINARY, mysqlParser.ASIN, mysqlParser.ASTEXT, mysqlParser.ASWKB, mysqlParser.ASWKT, mysqlParser.ASYMMETRIC_DECRYPT, mysqlParser.ASYMMETRIC_DERIVE, mysqlParser.ASYMMETRIC_ENCRYPT, mysqlParser.ASYMMETRIC_SIGN, mysqlParser.ASYMMETRIC_VERIFY, mysqlParser.ATAN, mysqlParser.ATAN2, mysqlParser.BENCHMARK, mysqlParser.BIN, mysqlParser.BIT_COUNT, mysqlParser.BIT_LENGTH, mysqlParser.BUFFER, mysqlParser.CEIL, mysqlParser.CEILING, mysqlParser.CENTROID, mysqlParser.CHARACTER_LENGTH, mysqlParser.CHARSET, mysqlParser.CHAR_LENGTH, mysqlParser.COERCIBILITY, mysqlParser.COLLATION, mysqlParser.COMPRESS, mysqlParser.CONCAT, mysqlParser.CONCAT_WS, mysqlParser.CONNECTION_ID, mysqlParser.CONV, mysqlParser.CONVERT_TZ, mysqlParser.COS, mysqlParser.COT, mysqlParser.CRC32, mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY, mysqlParser.CREATE_ASYMMETRIC_PUB_KEY, mysqlParser.CREATE_DH_PARAMETERS, mysqlParser.CREATE_DIGEST, mysqlParser.CROSSES, mysqlParser.DATEDIFF, mysqlParser.DATE_FORMAT, mysqlParser.DAYNAME, mysqlParser.DAYOFMONTH, mysqlParser.DAYOFWEEK, mysqlParser.DAYOFYEAR, mysqlParser.DECODE, mysqlParser.DEGREES, mysqlParser.DES_DECRYPT, mysqlParser.DES_ENCRYPT, mysqlParser.DIMENSION, mysqlParser.DISJOINT, mysqlParser.ELT, mysqlParser.ENCODE, mysqlParser.ENCRYPT, mysqlParser.ENDPOINT, mysqlParser.ENVELOPE, mysqlParser.EQUALS, mysqlParser.EXP, mysqlParser.EXPORT_SET, mysqlParser.EXTERIORRING, mysqlParser.EXTRACTVALUE, mysqlParser.FIELD, mysqlParser.FIND_IN_SET, mysqlParser.FLOOR, mysqlParser.FORMAT, mysqlParser.FOUND_ROWS, mysqlParser.FROM_BASE64, mysqlParser.FROM_DAYS, mysqlParser.FROM_UNIXTIME, mysqlParser.GEOMCOLLFROMTEXT, mysqlParser.GEOMCOLLFROMWKB, mysqlParser.GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.GEOMETRYCOLLECTIONFROMWKB, mysqlParser.GEOMETRYFROMTEXT, mysqlParser.GEOMETRYFROMWKB, mysqlParser.GEOMETRYN, mysqlParser.GEOMETRYTYPE, mysqlParser.GEOMFROMTEXT, mysqlParser.GEOMFROMWKB, mysqlParser.GET_FORMAT, mysqlParser.GET_LOCK, mysqlParser.GLENGTH, mysqlParser.GREATEST, mysqlParser.GTID_SUBSET, mysqlParser.GTID_SUBTRACT, mysqlParser.HEX, mysqlParser.IFNULL, mysqlParser.INET6_ATON, mysqlParser.INET6_NTOA, mysqlParser.INET_ATON, mysqlParser.INET_NTOA, mysqlParser.INSTR, mysqlParser.INTERIORRINGN, mysqlParser.INTERSECTS, mysqlParser.ISCLOSED, mysqlParser.ISEMPTY, mysqlParser.ISNULL, mysqlParser.ISSIMPLE, mysqlParser.IS_FREE_LOCK, mysqlParser.IS_IPV4, mysqlParser.IS_IPV4_COMPAT, mysqlParser.IS_IPV4_MAPPED, mysqlParser.IS_IPV6, mysqlParser.IS_USED_LOCK, mysqlParser.LAST_INSERT_ID, mysqlParser.LCASE, mysqlParser.LEAST, mysqlParser.LENGTH, mysqlParser.LINEFROMTEXT, mysqlParser.LINEFROMWKB, mysqlParser.LINESTRINGFROMTEXT, mysqlParser.LINESTRINGFROMWKB, mysqlParser.LN, mysqlParser.LOAD_FILE, mysqlParser.LOCATE, mysqlParser.LOG, mysqlParser.LOG10, mysqlParser.LOG2, mysqlParser.LOWER, mysqlParser.LPAD, mysqlParser.LTRIM, mysqlParser.MAKEDATE, mysqlParser.MAKETIME, mysqlParser.MAKE_SET, mysqlParser.MASTER_POS_WAIT, mysqlParser.MBRCONTAINS, mysqlParser.MBRDISJOINT, mysqlParser.MBREQUAL, mysqlParser.MBRINTERSECTS, mysqlParser.MBROVERLAPS, mysqlParser.MBRTOUCHES, mysqlParser.MBRWITHIN, mysqlParser.MD5, mysqlParser.MLINEFROMTEXT, mysqlParser.MLINEFROMWKB, mysqlParser.MONTHNAME, mysqlParser.MPOINTFROMTEXT, mysqlParser.MPOINTFROMWKB, mysqlParser.MPOLYFROMTEXT, mysqlParser.MPOLYFROMWKB, mysqlParser.MULTILINESTRINGFROMTEXT, mysqlParser.MULTILINESTRINGFROMWKB, mysqlParser.MULTIPOINTFROMTEXT, mysqlParser.MULTIPOINTFROMWKB, mysqlParser.MULTIPOLYGONFROMTEXT, mysqlParser.MULTIPOLYGONFROMWKB, mysqlParser.NAME_CONST, mysqlParser.NULLIF, mysqlParser.NUMGEOMETRIES, mysqlParser.NUMINTERIORRINGS, mysqlParser.NUMPOINTS, mysqlParser.OCT, mysqlParser.OCTET_LENGTH, mysqlParser.ORD, mysqlParser.OVERLAPS, mysqlParser.PERIOD_ADD, mysqlParser.PERIOD_DIFF, mysqlParser.PI, mysqlParser.POINTFROMTEXT, mysqlParser.POINTFROMWKB, mysqlParser.POINTN, mysqlParser.POLYFROMTEXT, mysqlParser.POLYFROMWKB, mysqlParser.POLYGONFROMTEXT, mysqlParser.POLYGONFROMWKB, mysqlParser.POW, mysqlParser.POWER, mysqlParser.QUOTE, mysqlParser.RADIANS, mysqlParser.RAND, mysqlParser.RANDOM_BYTES, mysqlParser.RELEASE_LOCK, mysqlParser.REVERSE, mysqlParser.ROUND, mysqlParser.ROW_COUNT, mysqlParser.RPAD, mysqlParser.RTRIM, mysqlParser.SEC_TO_TIME, mysqlParser.SESSION_USER, mysqlParser.SHA, mysqlParser.SHA1, mysqlParser.SHA2, mysqlParser.SIGN, mysqlParser.SIN, mysqlParser.SLEEP, mysqlParser.SOUNDEX, mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, mysqlParser.SQRT, mysqlParser.SRID, mysqlParser.STARTPOINT, mysqlParser.STRCMP, mysqlParser.STR_TO_DATE, mysqlParser.ST_AREA, mysqlParser.ST_ASBINARY, mysqlParser.ST_ASTEXT, mysqlParser.ST_ASWKB, mysqlParser.ST_ASWKT, mysqlParser.ST_BUFFER, mysqlParser.ST_CENTROID, mysqlParser.ST_CONTAINS, mysqlParser.ST_CROSSES, mysqlParser.ST_DIFFERENCE, mysqlParser.ST_DIMENSION, mysqlParser.ST_DISJOINT, mysqlParser.ST_DISTANCE, mysqlParser.ST_ENDPOINT, mysqlParser.ST_ENVELOPE, mysqlParser.ST_EQUALS, mysqlParser.ST_EXTERIORRING, mysqlParser.ST_GEOMCOLLFROMTEXT, mysqlParser.ST_GEOMCOLLFROMTXT, mysqlParser.ST_GEOMCOLLFROMWKB, mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, mysqlParser.ST_GEOMETRYFROMTEXT, mysqlParser.ST_GEOMETRYFROMWKB, mysqlParser.ST_GEOMETRYN, mysqlParser.ST_GEOMETRYTYPE, mysqlParser.ST_GEOMFROMTEXT, mysqlParser.ST_GEOMFROMWKB, mysqlParser.ST_INTERIORRINGN, mysqlParser.ST_INTERSECTION, mysqlParser.ST_INTERSECTS, mysqlParser.ST_ISCLOSED, mysqlParser.ST_ISEMPTY, mysqlParser.ST_ISSIMPLE, mysqlParser.ST_LINEFROMTEXT, mysqlParser.ST_LINEFROMWKB, mysqlParser.ST_LINESTRINGFROMTEXT, mysqlParser.ST_LINESTRINGFROMWKB, mysqlParser.ST_NUMGEOMETRIES, mysqlParser.ST_NUMINTERIORRING, mysqlParser.ST_NUMINTERIORRINGS, mysqlParser.ST_NUMPOINTS, mysqlParser.ST_OVERLAPS, mysqlParser.ST_POINTFROMTEXT, mysqlParser.ST_POINTFROMWKB, mysqlParser.ST_POINTN, mysqlParser.ST_POLYFROMTEXT, mysqlParser.ST_POLYFROMWKB, mysqlParser.ST_POLYGONFROMTEXT, mysqlParser.ST_POLYGONFROMWKB, mysqlParser.ST_SRID, mysqlParser.ST_STARTPOINT, mysqlParser.ST_SYMDIFFERENCE, mysqlParser.ST_TOUCHES, mysqlParser.ST_UNION, mysqlParser.ST_WITHIN, mysqlParser.ST_X, mysqlParser.ST_Y, mysqlParser.SUBDATE, mysqlParser.SUBSTRING_INDEX, mysqlParser.SUBTIME, mysqlParser.SYSTEM_USER, mysqlParser.TAN, mysqlParser.TIMEDIFF, mysqlParser.TIMESTAMPADD, mysqlParser.TIMESTAMPDIFF, mysqlParser.TIME_FORMAT, mysqlParser.TIME_TO_SEC, mysqlParser.TOUCHES, mysqlParser.TO_BASE64, mysqlParser.TO_DAYS, mysqlParser.TO_SECONDS, mysqlParser.UCASE, mysqlParser.UNCOMPRESS, mysqlParser.UNCOMPRESSED_LENGTH, mysqlParser.UNHEX, mysqlParser.UNIX_TIMESTAMP, mysqlParser.UPDATEXML, mysqlParser.UPPER, mysqlParser.UUID, mysqlParser.UUID_SHORT, mysqlParser.VALIDATE_PASSWORD_STRENGTH, mysqlParser.VERSION, mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, mysqlParser.WEEKDAY, mysqlParser.WEEKOFYEAR, mysqlParser.WEIGHT_STRING, mysqlParser.WITHIN, mysqlParser.YEARWEEK, mysqlParser.Y_FUNCTION, mysqlParser.X_FUNCTION, mysqlParser.CHARSET_REVERSE_QOUTE_STRING, mysqlParser.ID, mysqlParser.REVERSE_QUOTE_ID]:
                self.state = 2913
                self.tableName()
                self.state = 2916
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.DOT:
                    self.state = 2914
                    self.match(mysqlParser.DOT)
                    self.state = 2915
                    self.match(mysqlParser.STAR)


                self.state = 2926
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.COMMA:
                    self.state = 2918
                    self.match(mysqlParser.COMMA)
                    self.state = 2919
                    self.tableName()
                    self.state = 2922
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==mysqlParser.DOT:
                        self.state = 2920
                        self.match(mysqlParser.DOT)
                        self.state = 2921
                        self.match(mysqlParser.STAR)


                    self.state = 2928
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2929
                self.match(mysqlParser.FROM)
                self.state = 2930
                self.tableSources()
                pass
            elif token in [mysqlParser.FROM]:
                self.state = 2932
                self.match(mysqlParser.FROM)
                self.state = 2933
                self.tableName()
                self.state = 2936
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.DOT:
                    self.state = 2934
                    self.match(mysqlParser.DOT)
                    self.state = 2935
                    self.match(mysqlParser.STAR)


                self.state = 2946
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.COMMA:
                    self.state = 2938
                    self.match(mysqlParser.COMMA)
                    self.state = 2939
                    self.tableName()
                    self.state = 2942
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==mysqlParser.DOT:
                        self.state = 2940
                        self.match(mysqlParser.DOT)
                        self.state = 2941
                        self.match(mysqlParser.STAR)


                    self.state = 2948
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2949
                self.match(mysqlParser.USING)
                self.state = 2950
                self.tableSources()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2956
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.WHERE:
                self.state = 2954
                self.match(mysqlParser.WHERE)
                self.state = 2955
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HandlerOpenStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HANDLER(self):
            return self.getToken(mysqlParser.HANDLER, 0)

        def tableName(self):
            return self.getTypedRuleContext(mysqlParser.TableNameContext,0)


        def OPEN(self):
            return self.getToken(mysqlParser.OPEN, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def AS(self):
            return self.getToken(mysqlParser.AS, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_handlerOpenStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerOpenStatement" ):
                listener.enterHandlerOpenStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerOpenStatement" ):
                listener.exitHandlerOpenStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHandlerOpenStatement" ):
                return visitor.visitHandlerOpenStatement(self)
            else:
                return visitor.visitChildren(self)




    def handlerOpenStatement(self):

        localctx = mysqlParser.HandlerOpenStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_handlerOpenStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2958
            self.match(mysqlParser.HANDLER)
            self.state = 2959
            self.tableName()
            self.state = 2960
            self.match(mysqlParser.OPEN)
            self.state = 2965
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.AS or _la==mysqlParser.LEFT or _la==mysqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (mysqlParser.DATE - 180)) | (1 << (mysqlParser.TIME - 180)) | (1 << (mysqlParser.TIMESTAMP - 180)) | (1 << (mysqlParser.DATETIME - 180)) | (1 << (mysqlParser.YEAR - 180)) | (1 << (mysqlParser.TEXT - 180)) | (1 << (mysqlParser.ENUM - 180)) | (1 << (mysqlParser.COUNT - 180)) | (1 << (mysqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (mysqlParser.ACCOUNT - 244)) | (1 << (mysqlParser.ACTION - 244)) | (1 << (mysqlParser.AFTER - 244)) | (1 << (mysqlParser.AGGREGATE - 244)) | (1 << (mysqlParser.ALGORITHM - 244)) | (1 << (mysqlParser.ANY - 244)) | (1 << (mysqlParser.AT - 244)) | (1 << (mysqlParser.AUTHORS - 244)) | (1 << (mysqlParser.AUTOCOMMIT - 244)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (mysqlParser.AUTO_INCREMENT - 244)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 244)) | (1 << (mysqlParser.BEGIN - 244)) | (1 << (mysqlParser.BINLOG - 244)) | (1 << (mysqlParser.BIT - 244)) | (1 << (mysqlParser.BLOCK - 244)) | (1 << (mysqlParser.BTREE - 244)) | (1 << (mysqlParser.CASCADED - 244)) | (1 << (mysqlParser.CHAIN - 244)) | (1 << (mysqlParser.CHANNEL - 244)) | (1 << (mysqlParser.CHECKSUM - 244)) | (1 << (mysqlParser.CIPHER - 244)) | (1 << (mysqlParser.CLIENT - 244)) | (1 << (mysqlParser.COALESCE - 244)) | (1 << (mysqlParser.CODE - 244)) | (1 << (mysqlParser.COLUMNS - 244)) | (1 << (mysqlParser.COLUMN_FORMAT - 244)) | (1 << (mysqlParser.COMMENT - 244)) | (1 << (mysqlParser.COMMIT - 244)) | (1 << (mysqlParser.COMPACT - 244)) | (1 << (mysqlParser.COMPLETION - 244)) | (1 << (mysqlParser.COMPRESSED - 244)) | (1 << (mysqlParser.COMPRESSION - 244)) | (1 << (mysqlParser.CONCURRENT - 244)) | (1 << (mysqlParser.CONNECTION - 244)) | (1 << (mysqlParser.CONSISTENT - 244)) | (1 << (mysqlParser.CONTAINS - 244)) | (1 << (mysqlParser.CONTEXT - 244)) | (1 << (mysqlParser.CONTRIBUTORS - 244)) | (1 << (mysqlParser.COPY - 244)) | (1 << (mysqlParser.CPU - 244)) | (1 << (mysqlParser.DATA - 244)) | (1 << (mysqlParser.DATAFILE - 244)) | (1 << (mysqlParser.DEALLOCATE - 244)) | (1 << (mysqlParser.DEFAULT_AUTH - 244)) | (1 << (mysqlParser.DEFINER - 244)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 244)) | (1 << (mysqlParser.DIRECTORY - 244)) | (1 << (mysqlParser.DISABLE - 244)) | (1 << (mysqlParser.DISCARD - 244)) | (1 << (mysqlParser.DISK - 244)) | (1 << (mysqlParser.DO - 244)) | (1 << (mysqlParser.DUMPFILE - 244)) | (1 << (mysqlParser.DUPLICATE - 244)) | (1 << (mysqlParser.DYNAMIC - 244)) | (1 << (mysqlParser.ENABLE - 244)) | (1 << (mysqlParser.ENCRYPTION - 244)) | (1 << (mysqlParser.ENDS - 244)) | (1 << (mysqlParser.ENGINE - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (mysqlParser.ENGINES - 308)) | (1 << (mysqlParser.ERROR - 308)) | (1 << (mysqlParser.ERRORS - 308)) | (1 << (mysqlParser.ESCAPE - 308)) | (1 << (mysqlParser.EVEN - 308)) | (1 << (mysqlParser.EVENT - 308)) | (1 << (mysqlParser.EVENTS - 308)) | (1 << (mysqlParser.EVERY - 308)) | (1 << (mysqlParser.EXCHANGE - 308)) | (1 << (mysqlParser.EXCLUSIVE - 308)) | (1 << (mysqlParser.EXPIRE - 308)) | (1 << (mysqlParser.EXTENT_SIZE - 308)) | (1 << (mysqlParser.FAULTS - 308)) | (1 << (mysqlParser.FIELDS - 308)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (mysqlParser.FILTER - 308)) | (1 << (mysqlParser.FIRST - 308)) | (1 << (mysqlParser.FIXED - 308)) | (1 << (mysqlParser.FOLLOWS - 308)) | (1 << (mysqlParser.FULL - 308)) | (1 << (mysqlParser.FUNCTION - 308)) | (1 << (mysqlParser.GLOBAL - 308)) | (1 << (mysqlParser.GRANTS - 308)) | (1 << (mysqlParser.GROUP_REPLICATION - 308)) | (1 << (mysqlParser.HASH - 308)) | (1 << (mysqlParser.HOST - 308)) | (1 << (mysqlParser.IDENTIFIED - 308)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (mysqlParser.IMPORT - 308)) | (1 << (mysqlParser.INDEXES - 308)) | (1 << (mysqlParser.INITIAL_SIZE - 308)) | (1 << (mysqlParser.INPLACE - 308)) | (1 << (mysqlParser.INSERT_METHOD - 308)) | (1 << (mysqlParser.INSTANCE - 308)) | (1 << (mysqlParser.INVOKER - 308)) | (1 << (mysqlParser.IO - 308)) | (1 << (mysqlParser.IO_THREAD - 308)) | (1 << (mysqlParser.IPC - 308)) | (1 << (mysqlParser.ISOLATION - 308)) | (1 << (mysqlParser.ISSUER - 308)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (mysqlParser.LANGUAGE - 308)) | (1 << (mysqlParser.LAST - 308)) | (1 << (mysqlParser.LEAVES - 308)) | (1 << (mysqlParser.LESS - 308)) | (1 << (mysqlParser.LEVEL - 308)) | (1 << (mysqlParser.LIST - 308)) | (1 << (mysqlParser.LOCAL - 308)) | (1 << (mysqlParser.LOGFILE - 308)) | (1 << (mysqlParser.LOGS - 308)) | (1 << (mysqlParser.MASTER - 308)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 308)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (mysqlParser.MASTER_DELAY - 372)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (mysqlParser.MASTER_HOST - 372)) | (1 << (mysqlParser.MASTER_LOG_FILE - 372)) | (1 << (mysqlParser.MASTER_LOG_POS - 372)) | (1 << (mysqlParser.MASTER_PASSWORD - 372)) | (1 << (mysqlParser.MASTER_PORT - 372)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (mysqlParser.MASTER_SSL - 372)) | (1 << (mysqlParser.MASTER_SSL_CA - 372)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_CERT - 372)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (mysqlParser.MASTER_SSL_CRL - 372)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_KEY - 372)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 372)) | (1 << (mysqlParser.MASTER_USER - 372)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_ROWS - 372)) | (1 << (mysqlParser.MAX_SIZE - 372)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (mysqlParser.MERGE - 372)) | (1 << (mysqlParser.MID - 372)) | (1 << (mysqlParser.MIGRATE - 372)) | (1 << (mysqlParser.MIN_ROWS - 372)) | (1 << (mysqlParser.MODIFY - 372)) | (1 << (mysqlParser.MUTEX - 372)) | (1 << (mysqlParser.MYSQL - 372)) | (1 << (mysqlParser.NAME - 372)) | (1 << (mysqlParser.NAMES - 372)) | (1 << (mysqlParser.NCHAR - 372)) | (1 << (mysqlParser.NEVER - 372)) | (1 << (mysqlParser.NO - 372)) | (1 << (mysqlParser.NODEGROUP - 372)) | (1 << (mysqlParser.NONE - 372)) | (1 << (mysqlParser.OFFLINE - 372)) | (1 << (mysqlParser.OFFSET - 372)) | (1 << (mysqlParser.OJ - 372)) | (1 << (mysqlParser.OLD_PASSWORD - 372)) | (1 << (mysqlParser.ONE - 372)) | (1 << (mysqlParser.ONLINE - 372)) | (1 << (mysqlParser.ONLY - 372)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 372)) | (1 << (mysqlParser.OPTIONS - 372)) | (1 << (mysqlParser.OWNER - 372)) | (1 << (mysqlParser.PACK_KEYS - 372)) | (1 << (mysqlParser.PAGE - 372)) | (1 << (mysqlParser.PARSER - 372)) | (1 << (mysqlParser.PARTIAL - 372)) | (1 << (mysqlParser.PARTITIONING - 372)) | (1 << (mysqlParser.PARTITIONS - 372)) | (1 << (mysqlParser.PASSWORD - 372)) | (1 << (mysqlParser.PHASE - 372)) | (1 << (mysqlParser.PLUGIN_DIR - 372)) | (1 << (mysqlParser.PLUGINS - 372)) | (1 << (mysqlParser.PORT - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (mysqlParser.PRECEDES - 436)) | (1 << (mysqlParser.PREPARE - 436)) | (1 << (mysqlParser.PRESERVE - 436)) | (1 << (mysqlParser.PREV - 436)) | (1 << (mysqlParser.PROCESSLIST - 436)) | (1 << (mysqlParser.PROFILE - 436)) | (1 << (mysqlParser.PROFILES - 436)) | (1 << (mysqlParser.PROXY - 436)) | (1 << (mysqlParser.QUERY - 436)) | (1 << (mysqlParser.QUICK - 436)) | (1 << (mysqlParser.REBUILD - 436)) | (1 << (mysqlParser.RECOVER - 436)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (mysqlParser.REDUNDANT - 436)) | (1 << (mysqlParser.RELAY_LOG_FILE - 436)) | (1 << (mysqlParser.RELAY_LOG_POS - 436)) | (1 << (mysqlParser.RELAYLOG - 436)) | (1 << (mysqlParser.REMOVE - 436)) | (1 << (mysqlParser.REORGANIZE - 436)) | (1 << (mysqlParser.REPAIR - 436)) | (1 << (mysqlParser.REPLICATE_DO_DB - 436)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATION - 436)) | (1 << (mysqlParser.RESUME - 436)) | (1 << (mysqlParser.RETURNS - 436)) | (1 << (mysqlParser.ROLLBACK - 436)) | (1 << (mysqlParser.ROLLUP - 436)) | (1 << (mysqlParser.ROTATE - 436)) | (1 << (mysqlParser.ROW - 436)) | (1 << (mysqlParser.ROWS - 436)) | (1 << (mysqlParser.ROW_FORMAT - 436)) | (1 << (mysqlParser.SAVEPOINT - 436)) | (1 << (mysqlParser.SCHEDULE - 436)) | (1 << (mysqlParser.SECURITY - 436)) | (1 << (mysqlParser.SERVER - 436)) | (1 << (mysqlParser.SESSION - 436)) | (1 << (mysqlParser.SHARE - 436)) | (1 << (mysqlParser.SHARED - 436)) | (1 << (mysqlParser.SIGNED - 436)) | (1 << (mysqlParser.SIMPLE - 436)) | (1 << (mysqlParser.SLAVE - 436)) | (1 << (mysqlParser.SNAPSHOT - 436)) | (1 << (mysqlParser.SOCKET - 436)) | (1 << (mysqlParser.SOME - 436)) | (1 << (mysqlParser.SOUNDS - 436)) | (1 << (mysqlParser.SOURCE - 436)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (mysqlParser.SQL_CACHE - 436)) | (1 << (mysqlParser.SQL_NO_CACHE - 436)) | (1 << (mysqlParser.SQL_THREAD - 436)) | (1 << (mysqlParser.START - 436)) | (1 << (mysqlParser.STARTS - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (mysqlParser.STATS_AUTO_RECALC - 500)) | (1 << (mysqlParser.STATS_PERSISTENT - 500)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (mysqlParser.STATUS - 500)) | (1 << (mysqlParser.STOP - 500)) | (1 << (mysqlParser.STORAGE - 500)) | (1 << (mysqlParser.STRING - 500)) | (1 << (mysqlParser.SUBJECT - 500)) | (1 << (mysqlParser.SUBPARTITION - 500)) | (1 << (mysqlParser.SUBPARTITIONS - 500)) | (1 << (mysqlParser.SUSPEND - 500)) | (1 << (mysqlParser.SWAPS - 500)) | (1 << (mysqlParser.SWITCHES - 500)) | (1 << (mysqlParser.TABLESPACE - 500)) | (1 << (mysqlParser.TEMPORARY - 500)) | (1 << (mysqlParser.TEMPTABLE - 500)) | (1 << (mysqlParser.THAN - 500)) | (1 << (mysqlParser.TRANSACTION - 500)) | (1 << (mysqlParser.TRUNCATE - 500)) | (1 << (mysqlParser.UNDEFINED - 500)) | (1 << (mysqlParser.UNDOFILE - 500)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (mysqlParser.UNKNOWN - 500)) | (1 << (mysqlParser.UPGRADE - 500)) | (1 << (mysqlParser.USER - 500)) | (1 << (mysqlParser.VALIDATION - 500)) | (1 << (mysqlParser.VALUE - 500)) | (1 << (mysqlParser.VARIABLES - 500)) | (1 << (mysqlParser.VIEW - 500)) | (1 << (mysqlParser.WAIT - 500)) | (1 << (mysqlParser.WARNINGS - 500)) | (1 << (mysqlParser.WITHOUT - 500)) | (1 << (mysqlParser.WORK - 500)) | (1 << (mysqlParser.WRAPPER - 500)) | (1 << (mysqlParser.X509 - 500)) | (1 << (mysqlParser.XA - 500)) | (1 << (mysqlParser.XML - 500)) | (1 << (mysqlParser.QUARTER - 500)) | (1 << (mysqlParser.MONTH - 500)) | (1 << (mysqlParser.DAY - 500)) | (1 << (mysqlParser.HOUR - 500)) | (1 << (mysqlParser.MINUTE - 500)) | (1 << (mysqlParser.WEEK - 500)) | (1 << (mysqlParser.SECOND - 500)) | (1 << (mysqlParser.MICROSECOND - 500)) | (1 << (mysqlParser.TABLES - 500)) | (1 << (mysqlParser.ROUTINE - 500)) | (1 << (mysqlParser.EXECUTE - 500)) | (1 << (mysqlParser.FILE - 500)) | (1 << (mysqlParser.PROCESS - 500)) | (1 << (mysqlParser.RELOAD - 500)) | (1 << (mysqlParser.SHUTDOWN - 500)) | (1 << (mysqlParser.SUPER - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (mysqlParser.PRIVILEGES - 564)) | (1 << (mysqlParser.ARMSCII8 - 564)) | (1 << (mysqlParser.ASCII - 564)) | (1 << (mysqlParser.BIG5 - 564)) | (1 << (mysqlParser.CP1250 - 564)) | (1 << (mysqlParser.CP1251 - 564)) | (1 << (mysqlParser.CP1256 - 564)) | (1 << (mysqlParser.CP1257 - 564)) | (1 << (mysqlParser.CP850 - 564)) | (1 << (mysqlParser.CP852 - 564)) | (1 << (mysqlParser.CP866 - 564)) | (1 << (mysqlParser.CP932 - 564)) | (1 << (mysqlParser.DEC8 - 564)) | (1 << (mysqlParser.EUCJPMS - 564)) | (1 << (mysqlParser.EUCKR - 564)) | (1 << (mysqlParser.GB2312 - 564)) | (1 << (mysqlParser.GBK - 564)) | (1 << (mysqlParser.GEOSTD8 - 564)) | (1 << (mysqlParser.GREEK - 564)) | (1 << (mysqlParser.HEBREW - 564)) | (1 << (mysqlParser.HP8 - 564)) | (1 << (mysqlParser.KEYBCS2 - 564)) | (1 << (mysqlParser.KOI8R - 564)) | (1 << (mysqlParser.KOI8U - 564)) | (1 << (mysqlParser.LATIN1 - 564)) | (1 << (mysqlParser.LATIN2 - 564)) | (1 << (mysqlParser.LATIN5 - 564)) | (1 << (mysqlParser.LATIN7 - 564)) | (1 << (mysqlParser.MACCE - 564)) | (1 << (mysqlParser.MACROMAN - 564)) | (1 << (mysqlParser.SJIS - 564)) | (1 << (mysqlParser.SWE7 - 564)) | (1 << (mysqlParser.TIS620 - 564)) | (1 << (mysqlParser.UCS2 - 564)) | (1 << (mysqlParser.UJIS - 564)) | (1 << (mysqlParser.UTF16 - 564)) | (1 << (mysqlParser.UTF16LE - 564)) | (1 << (mysqlParser.UTF32 - 564)) | (1 << (mysqlParser.UTF8 - 564)) | (1 << (mysqlParser.UTF8MB3 - 564)) | (1 << (mysqlParser.UTF8MB4 - 564)) | (1 << (mysqlParser.ARCHIVE - 564)) | (1 << (mysqlParser.BLACKHOLE - 564)) | (1 << (mysqlParser.CSV - 564)) | (1 << (mysqlParser.FEDERATED - 564)) | (1 << (mysqlParser.INNODB - 564)) | (1 << (mysqlParser.MEMORY - 564)) | (1 << (mysqlParser.MRG_MYISAM - 564)) | (1 << (mysqlParser.MYISAM - 564)) | (1 << (mysqlParser.NDB - 564)) | (1 << (mysqlParser.NDBCLUSTER - 564)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (mysqlParser.REPEATABLE - 564)) | (1 << (mysqlParser.COMMITTED - 564)) | (1 << (mysqlParser.UNCOMMITTED - 564)) | (1 << (mysqlParser.SERIALIZABLE - 564)) | (1 << (mysqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (mysqlParser.LINESTRING - 564)) | (1 << (mysqlParser.MULTILINESTRING - 564)) | (1 << (mysqlParser.MULTIPOINT - 564)) | (1 << (mysqlParser.MULTIPOLYGON - 564)) | (1 << (mysqlParser.POINT - 564)) | (1 << (mysqlParser.POLYGON - 564)) | (1 << (mysqlParser.ABS - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (mysqlParser.ACOS - 628)) | (1 << (mysqlParser.ADDDATE - 628)) | (1 << (mysqlParser.ADDTIME - 628)) | (1 << (mysqlParser.AES_DECRYPT - 628)) | (1 << (mysqlParser.AES_ENCRYPT - 628)) | (1 << (mysqlParser.AREA - 628)) | (1 << (mysqlParser.ASBINARY - 628)) | (1 << (mysqlParser.ASIN - 628)) | (1 << (mysqlParser.ASTEXT - 628)) | (1 << (mysqlParser.ASWKB - 628)) | (1 << (mysqlParser.ASWKT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (mysqlParser.ATAN - 628)) | (1 << (mysqlParser.ATAN2 - 628)) | (1 << (mysqlParser.BENCHMARK - 628)) | (1 << (mysqlParser.BIN - 628)) | (1 << (mysqlParser.BIT_COUNT - 628)) | (1 << (mysqlParser.BIT_LENGTH - 628)) | (1 << (mysqlParser.BUFFER - 628)) | (1 << (mysqlParser.CEIL - 628)) | (1 << (mysqlParser.CEILING - 628)) | (1 << (mysqlParser.CENTROID - 628)) | (1 << (mysqlParser.CHARACTER_LENGTH - 628)) | (1 << (mysqlParser.CHARSET - 628)) | (1 << (mysqlParser.CHAR_LENGTH - 628)) | (1 << (mysqlParser.COERCIBILITY - 628)) | (1 << (mysqlParser.COLLATION - 628)) | (1 << (mysqlParser.COMPRESS - 628)) | (1 << (mysqlParser.CONCAT - 628)) | (1 << (mysqlParser.CONCAT_WS - 628)) | (1 << (mysqlParser.CONNECTION_ID - 628)) | (1 << (mysqlParser.CONV - 628)) | (1 << (mysqlParser.CONVERT_TZ - 628)) | (1 << (mysqlParser.COS - 628)) | (1 << (mysqlParser.COT - 628)) | (1 << (mysqlParser.CRC32 - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (mysqlParser.CREATE_DIGEST - 628)) | (1 << (mysqlParser.CROSSES - 628)) | (1 << (mysqlParser.DATEDIFF - 628)) | (1 << (mysqlParser.DATE_FORMAT - 628)) | (1 << (mysqlParser.DAYNAME - 628)) | (1 << (mysqlParser.DAYOFMONTH - 628)) | (1 << (mysqlParser.DAYOFWEEK - 628)) | (1 << (mysqlParser.DAYOFYEAR - 628)) | (1 << (mysqlParser.DECODE - 628)) | (1 << (mysqlParser.DEGREES - 628)) | (1 << (mysqlParser.DES_DECRYPT - 628)) | (1 << (mysqlParser.DES_ENCRYPT - 628)) | (1 << (mysqlParser.DIMENSION - 628)) | (1 << (mysqlParser.DISJOINT - 628)) | (1 << (mysqlParser.ELT - 628)) | (1 << (mysqlParser.ENCODE - 628)) | (1 << (mysqlParser.ENCRYPT - 628)) | (1 << (mysqlParser.ENDPOINT - 628)) | (1 << (mysqlParser.ENVELOPE - 628)) | (1 << (mysqlParser.EQUALS - 628)) | (1 << (mysqlParser.EXP - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (mysqlParser.EXPORT_SET - 692)) | (1 << (mysqlParser.EXTERIORRING - 692)) | (1 << (mysqlParser.EXTRACTVALUE - 692)) | (1 << (mysqlParser.FIELD - 692)) | (1 << (mysqlParser.FIND_IN_SET - 692)) | (1 << (mysqlParser.FLOOR - 692)) | (1 << (mysqlParser.FORMAT - 692)) | (1 << (mysqlParser.FOUND_ROWS - 692)) | (1 << (mysqlParser.FROM_BASE64 - 692)) | (1 << (mysqlParser.FROM_DAYS - 692)) | (1 << (mysqlParser.FROM_UNIXTIME - 692)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYN - 692)) | (1 << (mysqlParser.GEOMETRYTYPE - 692)) | (1 << (mysqlParser.GEOMFROMTEXT - 692)) | (1 << (mysqlParser.GEOMFROMWKB - 692)) | (1 << (mysqlParser.GET_FORMAT - 692)) | (1 << (mysqlParser.GET_LOCK - 692)) | (1 << (mysqlParser.GLENGTH - 692)) | (1 << (mysqlParser.GREATEST - 692)) | (1 << (mysqlParser.GTID_SUBSET - 692)) | (1 << (mysqlParser.GTID_SUBTRACT - 692)) | (1 << (mysqlParser.HEX - 692)) | (1 << (mysqlParser.IFNULL - 692)) | (1 << (mysqlParser.INET6_ATON - 692)) | (1 << (mysqlParser.INET6_NTOA - 692)) | (1 << (mysqlParser.INET_ATON - 692)) | (1 << (mysqlParser.INET_NTOA - 692)) | (1 << (mysqlParser.INSTR - 692)) | (1 << (mysqlParser.INTERIORRINGN - 692)) | (1 << (mysqlParser.INTERSECTS - 692)) | (1 << (mysqlParser.ISCLOSED - 692)) | (1 << (mysqlParser.ISEMPTY - 692)) | (1 << (mysqlParser.ISNULL - 692)) | (1 << (mysqlParser.ISSIMPLE - 692)) | (1 << (mysqlParser.IS_FREE_LOCK - 692)) | (1 << (mysqlParser.IS_IPV4 - 692)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 692)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 692)) | (1 << (mysqlParser.IS_IPV6 - 692)) | (1 << (mysqlParser.IS_USED_LOCK - 692)) | (1 << (mysqlParser.LAST_INSERT_ID - 692)) | (1 << (mysqlParser.LCASE - 692)) | (1 << (mysqlParser.LEAST - 692)) | (1 << (mysqlParser.LENGTH - 692)) | (1 << (mysqlParser.LINEFROMTEXT - 692)) | (1 << (mysqlParser.LINEFROMWKB - 692)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 692)) | (1 << (mysqlParser.LN - 692)) | (1 << (mysqlParser.LOAD_FILE - 692)) | (1 << (mysqlParser.LOCATE - 692)) | (1 << (mysqlParser.LOG - 692)) | (1 << (mysqlParser.LOG10 - 692)) | (1 << (mysqlParser.LOG2 - 692)) | (1 << (mysqlParser.LOWER - 692)) | (1 << (mysqlParser.LPAD - 692)) | (1 << (mysqlParser.LTRIM - 692)) | (1 << (mysqlParser.MAKEDATE - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (mysqlParser.MAKETIME - 756)) | (1 << (mysqlParser.MAKE_SET - 756)) | (1 << (mysqlParser.MASTER_POS_WAIT - 756)) | (1 << (mysqlParser.MBRCONTAINS - 756)) | (1 << (mysqlParser.MBRDISJOINT - 756)) | (1 << (mysqlParser.MBREQUAL - 756)) | (1 << (mysqlParser.MBRINTERSECTS - 756)) | (1 << (mysqlParser.MBROVERLAPS - 756)) | (1 << (mysqlParser.MBRTOUCHES - 756)) | (1 << (mysqlParser.MBRWITHIN - 756)) | (1 << (mysqlParser.MD5 - 756)) | (1 << (mysqlParser.MLINEFROMTEXT - 756)) | (1 << (mysqlParser.MLINEFROMWKB - 756)) | (1 << (mysqlParser.MONTHNAME - 756)) | (1 << (mysqlParser.MPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MPOINTFROMWKB - 756)) | (1 << (mysqlParser.MPOLYFROMTEXT - 756)) | (1 << (mysqlParser.MPOLYFROMWKB - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (mysqlParser.NAME_CONST - 756)) | (1 << (mysqlParser.NULLIF - 756)) | (1 << (mysqlParser.NUMGEOMETRIES - 756)) | (1 << (mysqlParser.NUMINTERIORRINGS - 756)) | (1 << (mysqlParser.NUMPOINTS - 756)) | (1 << (mysqlParser.OCT - 756)) | (1 << (mysqlParser.OCTET_LENGTH - 756)) | (1 << (mysqlParser.ORD - 756)) | (1 << (mysqlParser.OVERLAPS - 756)) | (1 << (mysqlParser.PERIOD_ADD - 756)) | (1 << (mysqlParser.PERIOD_DIFF - 756)) | (1 << (mysqlParser.PI - 756)) | (1 << (mysqlParser.POINTFROMTEXT - 756)) | (1 << (mysqlParser.POINTFROMWKB - 756)) | (1 << (mysqlParser.POINTN - 756)) | (1 << (mysqlParser.POLYFROMTEXT - 756)) | (1 << (mysqlParser.POLYFROMWKB - 756)) | (1 << (mysqlParser.POLYGONFROMTEXT - 756)) | (1 << (mysqlParser.POLYGONFROMWKB - 756)) | (1 << (mysqlParser.POW - 756)) | (1 << (mysqlParser.POWER - 756)) | (1 << (mysqlParser.QUOTE - 756)) | (1 << (mysqlParser.RADIANS - 756)) | (1 << (mysqlParser.RAND - 756)) | (1 << (mysqlParser.RANDOM_BYTES - 756)) | (1 << (mysqlParser.RELEASE_LOCK - 756)) | (1 << (mysqlParser.REVERSE - 756)) | (1 << (mysqlParser.ROUND - 756)) | (1 << (mysqlParser.ROW_COUNT - 756)) | (1 << (mysqlParser.RPAD - 756)) | (1 << (mysqlParser.RTRIM - 756)) | (1 << (mysqlParser.SEC_TO_TIME - 756)) | (1 << (mysqlParser.SESSION_USER - 756)) | (1 << (mysqlParser.SHA - 756)) | (1 << (mysqlParser.SHA1 - 756)) | (1 << (mysqlParser.SHA2 - 756)) | (1 << (mysqlParser.SIGN - 756)) | (1 << (mysqlParser.SIN - 756)) | (1 << (mysqlParser.SLEEP - 756)) | (1 << (mysqlParser.SOUNDEX - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (mysqlParser.SQRT - 820)) | (1 << (mysqlParser.SRID - 820)) | (1 << (mysqlParser.STARTPOINT - 820)) | (1 << (mysqlParser.STRCMP - 820)) | (1 << (mysqlParser.STR_TO_DATE - 820)) | (1 << (mysqlParser.ST_AREA - 820)) | (1 << (mysqlParser.ST_ASBINARY - 820)) | (1 << (mysqlParser.ST_ASTEXT - 820)) | (1 << (mysqlParser.ST_ASWKB - 820)) | (1 << (mysqlParser.ST_ASWKT - 820)) | (1 << (mysqlParser.ST_BUFFER - 820)) | (1 << (mysqlParser.ST_CENTROID - 820)) | (1 << (mysqlParser.ST_CONTAINS - 820)) | (1 << (mysqlParser.ST_CROSSES - 820)) | (1 << (mysqlParser.ST_DIFFERENCE - 820)) | (1 << (mysqlParser.ST_DIMENSION - 820)) | (1 << (mysqlParser.ST_DISJOINT - 820)) | (1 << (mysqlParser.ST_DISTANCE - 820)) | (1 << (mysqlParser.ST_ENDPOINT - 820)) | (1 << (mysqlParser.ST_ENVELOPE - 820)) | (1 << (mysqlParser.ST_EQUALS - 820)) | (1 << (mysqlParser.ST_EXTERIORRING - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYN - 820)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 820)) | (1 << (mysqlParser.ST_INTERIORRINGN - 820)) | (1 << (mysqlParser.ST_INTERSECTION - 820)) | (1 << (mysqlParser.ST_INTERSECTS - 820)) | (1 << (mysqlParser.ST_ISCLOSED - 820)) | (1 << (mysqlParser.ST_ISEMPTY - 820)) | (1 << (mysqlParser.ST_ISSIMPLE - 820)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINEFROMWKB - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (mysqlParser.ST_NUMPOINTS - 820)) | (1 << (mysqlParser.ST_OVERLAPS - 820)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 820)) | (1 << (mysqlParser.ST_POINTFROMWKB - 820)) | (1 << (mysqlParser.ST_POINTN - 820)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYFROMWKB - 820)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (mysqlParser.ST_SRID - 820)) | (1 << (mysqlParser.ST_STARTPOINT - 820)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (mysqlParser.ST_TOUCHES - 820)) | (1 << (mysqlParser.ST_UNION - 820)) | (1 << (mysqlParser.ST_WITHIN - 820)) | (1 << (mysqlParser.ST_X - 820)) | (1 << (mysqlParser.ST_Y - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (mysqlParser.SUBDATE - 884)) | (1 << (mysqlParser.SUBSTRING_INDEX - 884)) | (1 << (mysqlParser.SUBTIME - 884)) | (1 << (mysqlParser.SYSTEM_USER - 884)) | (1 << (mysqlParser.TAN - 884)) | (1 << (mysqlParser.TIMEDIFF - 884)) | (1 << (mysqlParser.TIMESTAMPADD - 884)) | (1 << (mysqlParser.TIMESTAMPDIFF - 884)) | (1 << (mysqlParser.TIME_FORMAT - 884)) | (1 << (mysqlParser.TIME_TO_SEC - 884)) | (1 << (mysqlParser.TOUCHES - 884)) | (1 << (mysqlParser.TO_BASE64 - 884)) | (1 << (mysqlParser.TO_DAYS - 884)) | (1 << (mysqlParser.TO_SECONDS - 884)) | (1 << (mysqlParser.UCASE - 884)) | (1 << (mysqlParser.UNCOMPRESS - 884)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (mysqlParser.UNHEX - 884)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 884)) | (1 << (mysqlParser.UPDATEXML - 884)) | (1 << (mysqlParser.UPPER - 884)) | (1 << (mysqlParser.UUID - 884)) | (1 << (mysqlParser.UUID_SHORT - 884)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (mysqlParser.VERSION - 884)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (mysqlParser.WEEKDAY - 884)) | (1 << (mysqlParser.WEEKOFYEAR - 884)) | (1 << (mysqlParser.WEIGHT_STRING - 884)) | (1 << (mysqlParser.WITHIN - 884)) | (1 << (mysqlParser.YEARWEEK - 884)) | (1 << (mysqlParser.Y_FUNCTION - 884)) | (1 << (mysqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 954)) & ~0x3f) == 0 and ((1 << (_la - 954)) & ((1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 954)) | (1 << (mysqlParser.ID - 954)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 954)))) != 0):
                self.state = 2962
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.AS:
                    self.state = 2961
                    self.match(mysqlParser.AS)


                self.state = 2964
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HandlerReadIndexStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.index = None # FullIdContext
            self.moveOrder = None # Token

        def HANDLER(self):
            return self.getToken(mysqlParser.HANDLER, 0)

        def tableName(self):
            return self.getTypedRuleContext(mysqlParser.TableNameContext,0)


        def READ(self):
            return self.getToken(mysqlParser.READ, 0)

        def fullId(self):
            return self.getTypedRuleContext(mysqlParser.FullIdContext,0)


        def comparisonOperator(self):
            return self.getTypedRuleContext(mysqlParser.ComparisonOperatorContext,0)


        def constants(self):
            return self.getTypedRuleContext(mysqlParser.ConstantsContext,0)


        def WHERE(self):
            return self.getToken(mysqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)


        def LIMIT(self):
            return self.getToken(mysqlParser.LIMIT, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,0)


        def FIRST(self):
            return self.getToken(mysqlParser.FIRST, 0)

        def NEXT(self):
            return self.getToken(mysqlParser.NEXT, 0)

        def PREV(self):
            return self.getToken(mysqlParser.PREV, 0)

        def LAST(self):
            return self.getToken(mysqlParser.LAST, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_handlerReadIndexStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerReadIndexStatement" ):
                listener.enterHandlerReadIndexStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerReadIndexStatement" ):
                listener.exitHandlerReadIndexStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHandlerReadIndexStatement" ):
                return visitor.visitHandlerReadIndexStatement(self)
            else:
                return visitor.visitChildren(self)




    def handlerReadIndexStatement(self):

        localctx = mysqlParser.HandlerReadIndexStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_handlerReadIndexStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2967
            self.match(mysqlParser.HANDLER)
            self.state = 2968
            self.tableName()
            self.state = 2969
            self.match(mysqlParser.READ)
            self.state = 2970
            localctx.index = self.fullId()
            self.state = 2977
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.EQUAL_SYMBOL, mysqlParser.GREATER_SYMBOL, mysqlParser.LESS_SYMBOL, mysqlParser.EXCLAMATION_SYMBOL]:
                self.state = 2971
                self.comparisonOperator()
                self.state = 2972
                self.match(mysqlParser.LR_BRACKET)
                self.state = 2973
                self.constants()
                self.state = 2974
                self.match(mysqlParser.RR_BRACKET)
                pass
            elif token in [mysqlParser.FIRST, mysqlParser.LAST, mysqlParser.NEXT, mysqlParser.PREV]:
                self.state = 2976
                localctx.moveOrder = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.FIRST or _la==mysqlParser.LAST or _la==mysqlParser.NEXT or _la==mysqlParser.PREV):
                    localctx.moveOrder = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2981
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.WHERE:
                self.state = 2979
                self.match(mysqlParser.WHERE)
                self.state = 2980
                self.expression(0)


            self.state = 2985
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.LIMIT:
                self.state = 2983
                self.match(mysqlParser.LIMIT)
                self.state = 2984
                self.decimalLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HandlerReadStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.moveOrder = None # Token

        def HANDLER(self):
            return self.getToken(mysqlParser.HANDLER, 0)

        def tableName(self):
            return self.getTypedRuleContext(mysqlParser.TableNameContext,0)


        def READ(self):
            return self.getToken(mysqlParser.READ, 0)

        def FIRST(self):
            return self.getToken(mysqlParser.FIRST, 0)

        def NEXT(self):
            return self.getToken(mysqlParser.NEXT, 0)

        def WHERE(self):
            return self.getToken(mysqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)


        def LIMIT(self):
            return self.getToken(mysqlParser.LIMIT, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_handlerReadStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerReadStatement" ):
                listener.enterHandlerReadStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerReadStatement" ):
                listener.exitHandlerReadStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHandlerReadStatement" ):
                return visitor.visitHandlerReadStatement(self)
            else:
                return visitor.visitChildren(self)




    def handlerReadStatement(self):

        localctx = mysqlParser.HandlerReadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_handlerReadStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2987
            self.match(mysqlParser.HANDLER)
            self.state = 2988
            self.tableName()
            self.state = 2989
            self.match(mysqlParser.READ)
            self.state = 2990
            localctx.moveOrder = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==mysqlParser.FIRST or _la==mysqlParser.NEXT):
                localctx.moveOrder = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2993
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.WHERE:
                self.state = 2991
                self.match(mysqlParser.WHERE)
                self.state = 2992
                self.expression(0)


            self.state = 2997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.LIMIT:
                self.state = 2995
                self.match(mysqlParser.LIMIT)
                self.state = 2996
                self.decimalLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HandlerCloseStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HANDLER(self):
            return self.getToken(mysqlParser.HANDLER, 0)

        def tableName(self):
            return self.getTypedRuleContext(mysqlParser.TableNameContext,0)


        def CLOSE(self):
            return self.getToken(mysqlParser.CLOSE, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_handlerCloseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerCloseStatement" ):
                listener.enterHandlerCloseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerCloseStatement" ):
                listener.exitHandlerCloseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHandlerCloseStatement" ):
                return visitor.visitHandlerCloseStatement(self)
            else:
                return visitor.visitChildren(self)




    def handlerCloseStatement(self):

        localctx = mysqlParser.HandlerCloseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_handlerCloseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2999
            self.match(mysqlParser.HANDLER)
            self.state = 3000
            self.tableName()
            self.state = 3001
            self.match(mysqlParser.CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SingleUpdateStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(mysqlParser.UPDATE, 0)

        def tableName(self):
            return self.getTypedRuleContext(mysqlParser.TableNameContext,0)


        def SET(self):
            return self.getToken(mysqlParser.SET, 0)

        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UpdatedElementContext,i)


        def LOW_PRIORITY(self):
            return self.getToken(mysqlParser.LOW_PRIORITY, 0)

        def IGNORE(self):
            return self.getToken(mysqlParser.IGNORE, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def WHERE(self):
            return self.getToken(mysqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(mysqlParser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(mysqlParser.LimitClauseContext,0)


        def AS(self):
            return self.getToken(mysqlParser.AS, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_singleUpdateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleUpdateStatement" ):
                listener.enterSingleUpdateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleUpdateStatement" ):
                listener.exitSingleUpdateStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingleUpdateStatement" ):
                return visitor.visitSingleUpdateStatement(self)
            else:
                return visitor.visitChildren(self)




    def singleUpdateStatement(self):

        localctx = mysqlParser.SingleUpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_singleUpdateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3003
            self.match(mysqlParser.UPDATE)
            self.state = 3005
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.LOW_PRIORITY:
                self.state = 3004
                self.match(mysqlParser.LOW_PRIORITY)


            self.state = 3008
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.IGNORE:
                self.state = 3007
                self.match(mysqlParser.IGNORE)


            self.state = 3010
            self.tableName()
            self.state = 3015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.AS or _la==mysqlParser.LEFT or _la==mysqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (mysqlParser.DATE - 180)) | (1 << (mysqlParser.TIME - 180)) | (1 << (mysqlParser.TIMESTAMP - 180)) | (1 << (mysqlParser.DATETIME - 180)) | (1 << (mysqlParser.YEAR - 180)) | (1 << (mysqlParser.TEXT - 180)) | (1 << (mysqlParser.ENUM - 180)) | (1 << (mysqlParser.COUNT - 180)) | (1 << (mysqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (mysqlParser.ACCOUNT - 244)) | (1 << (mysqlParser.ACTION - 244)) | (1 << (mysqlParser.AFTER - 244)) | (1 << (mysqlParser.AGGREGATE - 244)) | (1 << (mysqlParser.ALGORITHM - 244)) | (1 << (mysqlParser.ANY - 244)) | (1 << (mysqlParser.AT - 244)) | (1 << (mysqlParser.AUTHORS - 244)) | (1 << (mysqlParser.AUTOCOMMIT - 244)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (mysqlParser.AUTO_INCREMENT - 244)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 244)) | (1 << (mysqlParser.BEGIN - 244)) | (1 << (mysqlParser.BINLOG - 244)) | (1 << (mysqlParser.BIT - 244)) | (1 << (mysqlParser.BLOCK - 244)) | (1 << (mysqlParser.BTREE - 244)) | (1 << (mysqlParser.CASCADED - 244)) | (1 << (mysqlParser.CHAIN - 244)) | (1 << (mysqlParser.CHANNEL - 244)) | (1 << (mysqlParser.CHECKSUM - 244)) | (1 << (mysqlParser.CIPHER - 244)) | (1 << (mysqlParser.CLIENT - 244)) | (1 << (mysqlParser.COALESCE - 244)) | (1 << (mysqlParser.CODE - 244)) | (1 << (mysqlParser.COLUMNS - 244)) | (1 << (mysqlParser.COLUMN_FORMAT - 244)) | (1 << (mysqlParser.COMMENT - 244)) | (1 << (mysqlParser.COMMIT - 244)) | (1 << (mysqlParser.COMPACT - 244)) | (1 << (mysqlParser.COMPLETION - 244)) | (1 << (mysqlParser.COMPRESSED - 244)) | (1 << (mysqlParser.COMPRESSION - 244)) | (1 << (mysqlParser.CONCURRENT - 244)) | (1 << (mysqlParser.CONNECTION - 244)) | (1 << (mysqlParser.CONSISTENT - 244)) | (1 << (mysqlParser.CONTAINS - 244)) | (1 << (mysqlParser.CONTEXT - 244)) | (1 << (mysqlParser.CONTRIBUTORS - 244)) | (1 << (mysqlParser.COPY - 244)) | (1 << (mysqlParser.CPU - 244)) | (1 << (mysqlParser.DATA - 244)) | (1 << (mysqlParser.DATAFILE - 244)) | (1 << (mysqlParser.DEALLOCATE - 244)) | (1 << (mysqlParser.DEFAULT_AUTH - 244)) | (1 << (mysqlParser.DEFINER - 244)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 244)) | (1 << (mysqlParser.DIRECTORY - 244)) | (1 << (mysqlParser.DISABLE - 244)) | (1 << (mysqlParser.DISCARD - 244)) | (1 << (mysqlParser.DISK - 244)) | (1 << (mysqlParser.DO - 244)) | (1 << (mysqlParser.DUMPFILE - 244)) | (1 << (mysqlParser.DUPLICATE - 244)) | (1 << (mysqlParser.DYNAMIC - 244)) | (1 << (mysqlParser.ENABLE - 244)) | (1 << (mysqlParser.ENCRYPTION - 244)) | (1 << (mysqlParser.ENDS - 244)) | (1 << (mysqlParser.ENGINE - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (mysqlParser.ENGINES - 308)) | (1 << (mysqlParser.ERROR - 308)) | (1 << (mysqlParser.ERRORS - 308)) | (1 << (mysqlParser.ESCAPE - 308)) | (1 << (mysqlParser.EVEN - 308)) | (1 << (mysqlParser.EVENT - 308)) | (1 << (mysqlParser.EVENTS - 308)) | (1 << (mysqlParser.EVERY - 308)) | (1 << (mysqlParser.EXCHANGE - 308)) | (1 << (mysqlParser.EXCLUSIVE - 308)) | (1 << (mysqlParser.EXPIRE - 308)) | (1 << (mysqlParser.EXTENT_SIZE - 308)) | (1 << (mysqlParser.FAULTS - 308)) | (1 << (mysqlParser.FIELDS - 308)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (mysqlParser.FILTER - 308)) | (1 << (mysqlParser.FIRST - 308)) | (1 << (mysqlParser.FIXED - 308)) | (1 << (mysqlParser.FOLLOWS - 308)) | (1 << (mysqlParser.FULL - 308)) | (1 << (mysqlParser.FUNCTION - 308)) | (1 << (mysqlParser.GLOBAL - 308)) | (1 << (mysqlParser.GRANTS - 308)) | (1 << (mysqlParser.GROUP_REPLICATION - 308)) | (1 << (mysqlParser.HASH - 308)) | (1 << (mysqlParser.HOST - 308)) | (1 << (mysqlParser.IDENTIFIED - 308)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (mysqlParser.IMPORT - 308)) | (1 << (mysqlParser.INDEXES - 308)) | (1 << (mysqlParser.INITIAL_SIZE - 308)) | (1 << (mysqlParser.INPLACE - 308)) | (1 << (mysqlParser.INSERT_METHOD - 308)) | (1 << (mysqlParser.INSTANCE - 308)) | (1 << (mysqlParser.INVOKER - 308)) | (1 << (mysqlParser.IO - 308)) | (1 << (mysqlParser.IO_THREAD - 308)) | (1 << (mysqlParser.IPC - 308)) | (1 << (mysqlParser.ISOLATION - 308)) | (1 << (mysqlParser.ISSUER - 308)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (mysqlParser.LANGUAGE - 308)) | (1 << (mysqlParser.LAST - 308)) | (1 << (mysqlParser.LEAVES - 308)) | (1 << (mysqlParser.LESS - 308)) | (1 << (mysqlParser.LEVEL - 308)) | (1 << (mysqlParser.LIST - 308)) | (1 << (mysqlParser.LOCAL - 308)) | (1 << (mysqlParser.LOGFILE - 308)) | (1 << (mysqlParser.LOGS - 308)) | (1 << (mysqlParser.MASTER - 308)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 308)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (mysqlParser.MASTER_DELAY - 372)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (mysqlParser.MASTER_HOST - 372)) | (1 << (mysqlParser.MASTER_LOG_FILE - 372)) | (1 << (mysqlParser.MASTER_LOG_POS - 372)) | (1 << (mysqlParser.MASTER_PASSWORD - 372)) | (1 << (mysqlParser.MASTER_PORT - 372)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (mysqlParser.MASTER_SSL - 372)) | (1 << (mysqlParser.MASTER_SSL_CA - 372)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_CERT - 372)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (mysqlParser.MASTER_SSL_CRL - 372)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_KEY - 372)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 372)) | (1 << (mysqlParser.MASTER_USER - 372)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_ROWS - 372)) | (1 << (mysqlParser.MAX_SIZE - 372)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (mysqlParser.MERGE - 372)) | (1 << (mysqlParser.MID - 372)) | (1 << (mysqlParser.MIGRATE - 372)) | (1 << (mysqlParser.MIN_ROWS - 372)) | (1 << (mysqlParser.MODIFY - 372)) | (1 << (mysqlParser.MUTEX - 372)) | (1 << (mysqlParser.MYSQL - 372)) | (1 << (mysqlParser.NAME - 372)) | (1 << (mysqlParser.NAMES - 372)) | (1 << (mysqlParser.NCHAR - 372)) | (1 << (mysqlParser.NEVER - 372)) | (1 << (mysqlParser.NO - 372)) | (1 << (mysqlParser.NODEGROUP - 372)) | (1 << (mysqlParser.NONE - 372)) | (1 << (mysqlParser.OFFLINE - 372)) | (1 << (mysqlParser.OFFSET - 372)) | (1 << (mysqlParser.OJ - 372)) | (1 << (mysqlParser.OLD_PASSWORD - 372)) | (1 << (mysqlParser.ONE - 372)) | (1 << (mysqlParser.ONLINE - 372)) | (1 << (mysqlParser.ONLY - 372)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 372)) | (1 << (mysqlParser.OPTIONS - 372)) | (1 << (mysqlParser.OWNER - 372)) | (1 << (mysqlParser.PACK_KEYS - 372)) | (1 << (mysqlParser.PAGE - 372)) | (1 << (mysqlParser.PARSER - 372)) | (1 << (mysqlParser.PARTIAL - 372)) | (1 << (mysqlParser.PARTITIONING - 372)) | (1 << (mysqlParser.PARTITIONS - 372)) | (1 << (mysqlParser.PASSWORD - 372)) | (1 << (mysqlParser.PHASE - 372)) | (1 << (mysqlParser.PLUGIN_DIR - 372)) | (1 << (mysqlParser.PLUGINS - 372)) | (1 << (mysqlParser.PORT - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (mysqlParser.PRECEDES - 436)) | (1 << (mysqlParser.PREPARE - 436)) | (1 << (mysqlParser.PRESERVE - 436)) | (1 << (mysqlParser.PREV - 436)) | (1 << (mysqlParser.PROCESSLIST - 436)) | (1 << (mysqlParser.PROFILE - 436)) | (1 << (mysqlParser.PROFILES - 436)) | (1 << (mysqlParser.PROXY - 436)) | (1 << (mysqlParser.QUERY - 436)) | (1 << (mysqlParser.QUICK - 436)) | (1 << (mysqlParser.REBUILD - 436)) | (1 << (mysqlParser.RECOVER - 436)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (mysqlParser.REDUNDANT - 436)) | (1 << (mysqlParser.RELAY_LOG_FILE - 436)) | (1 << (mysqlParser.RELAY_LOG_POS - 436)) | (1 << (mysqlParser.RELAYLOG - 436)) | (1 << (mysqlParser.REMOVE - 436)) | (1 << (mysqlParser.REORGANIZE - 436)) | (1 << (mysqlParser.REPAIR - 436)) | (1 << (mysqlParser.REPLICATE_DO_DB - 436)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATION - 436)) | (1 << (mysqlParser.RESUME - 436)) | (1 << (mysqlParser.RETURNS - 436)) | (1 << (mysqlParser.ROLLBACK - 436)) | (1 << (mysqlParser.ROLLUP - 436)) | (1 << (mysqlParser.ROTATE - 436)) | (1 << (mysqlParser.ROW - 436)) | (1 << (mysqlParser.ROWS - 436)) | (1 << (mysqlParser.ROW_FORMAT - 436)) | (1 << (mysqlParser.SAVEPOINT - 436)) | (1 << (mysqlParser.SCHEDULE - 436)) | (1 << (mysqlParser.SECURITY - 436)) | (1 << (mysqlParser.SERVER - 436)) | (1 << (mysqlParser.SESSION - 436)) | (1 << (mysqlParser.SHARE - 436)) | (1 << (mysqlParser.SHARED - 436)) | (1 << (mysqlParser.SIGNED - 436)) | (1 << (mysqlParser.SIMPLE - 436)) | (1 << (mysqlParser.SLAVE - 436)) | (1 << (mysqlParser.SNAPSHOT - 436)) | (1 << (mysqlParser.SOCKET - 436)) | (1 << (mysqlParser.SOME - 436)) | (1 << (mysqlParser.SOUNDS - 436)) | (1 << (mysqlParser.SOURCE - 436)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (mysqlParser.SQL_CACHE - 436)) | (1 << (mysqlParser.SQL_NO_CACHE - 436)) | (1 << (mysqlParser.SQL_THREAD - 436)) | (1 << (mysqlParser.START - 436)) | (1 << (mysqlParser.STARTS - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (mysqlParser.STATS_AUTO_RECALC - 500)) | (1 << (mysqlParser.STATS_PERSISTENT - 500)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (mysqlParser.STATUS - 500)) | (1 << (mysqlParser.STOP - 500)) | (1 << (mysqlParser.STORAGE - 500)) | (1 << (mysqlParser.STRING - 500)) | (1 << (mysqlParser.SUBJECT - 500)) | (1 << (mysqlParser.SUBPARTITION - 500)) | (1 << (mysqlParser.SUBPARTITIONS - 500)) | (1 << (mysqlParser.SUSPEND - 500)) | (1 << (mysqlParser.SWAPS - 500)) | (1 << (mysqlParser.SWITCHES - 500)) | (1 << (mysqlParser.TABLESPACE - 500)) | (1 << (mysqlParser.TEMPORARY - 500)) | (1 << (mysqlParser.TEMPTABLE - 500)) | (1 << (mysqlParser.THAN - 500)) | (1 << (mysqlParser.TRANSACTION - 500)) | (1 << (mysqlParser.TRUNCATE - 500)) | (1 << (mysqlParser.UNDEFINED - 500)) | (1 << (mysqlParser.UNDOFILE - 500)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (mysqlParser.UNKNOWN - 500)) | (1 << (mysqlParser.UPGRADE - 500)) | (1 << (mysqlParser.USER - 500)) | (1 << (mysqlParser.VALIDATION - 500)) | (1 << (mysqlParser.VALUE - 500)) | (1 << (mysqlParser.VARIABLES - 500)) | (1 << (mysqlParser.VIEW - 500)) | (1 << (mysqlParser.WAIT - 500)) | (1 << (mysqlParser.WARNINGS - 500)) | (1 << (mysqlParser.WITHOUT - 500)) | (1 << (mysqlParser.WORK - 500)) | (1 << (mysqlParser.WRAPPER - 500)) | (1 << (mysqlParser.X509 - 500)) | (1 << (mysqlParser.XA - 500)) | (1 << (mysqlParser.XML - 500)) | (1 << (mysqlParser.QUARTER - 500)) | (1 << (mysqlParser.MONTH - 500)) | (1 << (mysqlParser.DAY - 500)) | (1 << (mysqlParser.HOUR - 500)) | (1 << (mysqlParser.MINUTE - 500)) | (1 << (mysqlParser.WEEK - 500)) | (1 << (mysqlParser.SECOND - 500)) | (1 << (mysqlParser.MICROSECOND - 500)) | (1 << (mysqlParser.TABLES - 500)) | (1 << (mysqlParser.ROUTINE - 500)) | (1 << (mysqlParser.EXECUTE - 500)) | (1 << (mysqlParser.FILE - 500)) | (1 << (mysqlParser.PROCESS - 500)) | (1 << (mysqlParser.RELOAD - 500)) | (1 << (mysqlParser.SHUTDOWN - 500)) | (1 << (mysqlParser.SUPER - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (mysqlParser.PRIVILEGES - 564)) | (1 << (mysqlParser.ARMSCII8 - 564)) | (1 << (mysqlParser.ASCII - 564)) | (1 << (mysqlParser.BIG5 - 564)) | (1 << (mysqlParser.CP1250 - 564)) | (1 << (mysqlParser.CP1251 - 564)) | (1 << (mysqlParser.CP1256 - 564)) | (1 << (mysqlParser.CP1257 - 564)) | (1 << (mysqlParser.CP850 - 564)) | (1 << (mysqlParser.CP852 - 564)) | (1 << (mysqlParser.CP866 - 564)) | (1 << (mysqlParser.CP932 - 564)) | (1 << (mysqlParser.DEC8 - 564)) | (1 << (mysqlParser.EUCJPMS - 564)) | (1 << (mysqlParser.EUCKR - 564)) | (1 << (mysqlParser.GB2312 - 564)) | (1 << (mysqlParser.GBK - 564)) | (1 << (mysqlParser.GEOSTD8 - 564)) | (1 << (mysqlParser.GREEK - 564)) | (1 << (mysqlParser.HEBREW - 564)) | (1 << (mysqlParser.HP8 - 564)) | (1 << (mysqlParser.KEYBCS2 - 564)) | (1 << (mysqlParser.KOI8R - 564)) | (1 << (mysqlParser.KOI8U - 564)) | (1 << (mysqlParser.LATIN1 - 564)) | (1 << (mysqlParser.LATIN2 - 564)) | (1 << (mysqlParser.LATIN5 - 564)) | (1 << (mysqlParser.LATIN7 - 564)) | (1 << (mysqlParser.MACCE - 564)) | (1 << (mysqlParser.MACROMAN - 564)) | (1 << (mysqlParser.SJIS - 564)) | (1 << (mysqlParser.SWE7 - 564)) | (1 << (mysqlParser.TIS620 - 564)) | (1 << (mysqlParser.UCS2 - 564)) | (1 << (mysqlParser.UJIS - 564)) | (1 << (mysqlParser.UTF16 - 564)) | (1 << (mysqlParser.UTF16LE - 564)) | (1 << (mysqlParser.UTF32 - 564)) | (1 << (mysqlParser.UTF8 - 564)) | (1 << (mysqlParser.UTF8MB3 - 564)) | (1 << (mysqlParser.UTF8MB4 - 564)) | (1 << (mysqlParser.ARCHIVE - 564)) | (1 << (mysqlParser.BLACKHOLE - 564)) | (1 << (mysqlParser.CSV - 564)) | (1 << (mysqlParser.FEDERATED - 564)) | (1 << (mysqlParser.INNODB - 564)) | (1 << (mysqlParser.MEMORY - 564)) | (1 << (mysqlParser.MRG_MYISAM - 564)) | (1 << (mysqlParser.MYISAM - 564)) | (1 << (mysqlParser.NDB - 564)) | (1 << (mysqlParser.NDBCLUSTER - 564)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (mysqlParser.REPEATABLE - 564)) | (1 << (mysqlParser.COMMITTED - 564)) | (1 << (mysqlParser.UNCOMMITTED - 564)) | (1 << (mysqlParser.SERIALIZABLE - 564)) | (1 << (mysqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (mysqlParser.LINESTRING - 564)) | (1 << (mysqlParser.MULTILINESTRING - 564)) | (1 << (mysqlParser.MULTIPOINT - 564)) | (1 << (mysqlParser.MULTIPOLYGON - 564)) | (1 << (mysqlParser.POINT - 564)) | (1 << (mysqlParser.POLYGON - 564)) | (1 << (mysqlParser.ABS - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (mysqlParser.ACOS - 628)) | (1 << (mysqlParser.ADDDATE - 628)) | (1 << (mysqlParser.ADDTIME - 628)) | (1 << (mysqlParser.AES_DECRYPT - 628)) | (1 << (mysqlParser.AES_ENCRYPT - 628)) | (1 << (mysqlParser.AREA - 628)) | (1 << (mysqlParser.ASBINARY - 628)) | (1 << (mysqlParser.ASIN - 628)) | (1 << (mysqlParser.ASTEXT - 628)) | (1 << (mysqlParser.ASWKB - 628)) | (1 << (mysqlParser.ASWKT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (mysqlParser.ATAN - 628)) | (1 << (mysqlParser.ATAN2 - 628)) | (1 << (mysqlParser.BENCHMARK - 628)) | (1 << (mysqlParser.BIN - 628)) | (1 << (mysqlParser.BIT_COUNT - 628)) | (1 << (mysqlParser.BIT_LENGTH - 628)) | (1 << (mysqlParser.BUFFER - 628)) | (1 << (mysqlParser.CEIL - 628)) | (1 << (mysqlParser.CEILING - 628)) | (1 << (mysqlParser.CENTROID - 628)) | (1 << (mysqlParser.CHARACTER_LENGTH - 628)) | (1 << (mysqlParser.CHARSET - 628)) | (1 << (mysqlParser.CHAR_LENGTH - 628)) | (1 << (mysqlParser.COERCIBILITY - 628)) | (1 << (mysqlParser.COLLATION - 628)) | (1 << (mysqlParser.COMPRESS - 628)) | (1 << (mysqlParser.CONCAT - 628)) | (1 << (mysqlParser.CONCAT_WS - 628)) | (1 << (mysqlParser.CONNECTION_ID - 628)) | (1 << (mysqlParser.CONV - 628)) | (1 << (mysqlParser.CONVERT_TZ - 628)) | (1 << (mysqlParser.COS - 628)) | (1 << (mysqlParser.COT - 628)) | (1 << (mysqlParser.CRC32 - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (mysqlParser.CREATE_DIGEST - 628)) | (1 << (mysqlParser.CROSSES - 628)) | (1 << (mysqlParser.DATEDIFF - 628)) | (1 << (mysqlParser.DATE_FORMAT - 628)) | (1 << (mysqlParser.DAYNAME - 628)) | (1 << (mysqlParser.DAYOFMONTH - 628)) | (1 << (mysqlParser.DAYOFWEEK - 628)) | (1 << (mysqlParser.DAYOFYEAR - 628)) | (1 << (mysqlParser.DECODE - 628)) | (1 << (mysqlParser.DEGREES - 628)) | (1 << (mysqlParser.DES_DECRYPT - 628)) | (1 << (mysqlParser.DES_ENCRYPT - 628)) | (1 << (mysqlParser.DIMENSION - 628)) | (1 << (mysqlParser.DISJOINT - 628)) | (1 << (mysqlParser.ELT - 628)) | (1 << (mysqlParser.ENCODE - 628)) | (1 << (mysqlParser.ENCRYPT - 628)) | (1 << (mysqlParser.ENDPOINT - 628)) | (1 << (mysqlParser.ENVELOPE - 628)) | (1 << (mysqlParser.EQUALS - 628)) | (1 << (mysqlParser.EXP - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (mysqlParser.EXPORT_SET - 692)) | (1 << (mysqlParser.EXTERIORRING - 692)) | (1 << (mysqlParser.EXTRACTVALUE - 692)) | (1 << (mysqlParser.FIELD - 692)) | (1 << (mysqlParser.FIND_IN_SET - 692)) | (1 << (mysqlParser.FLOOR - 692)) | (1 << (mysqlParser.FORMAT - 692)) | (1 << (mysqlParser.FOUND_ROWS - 692)) | (1 << (mysqlParser.FROM_BASE64 - 692)) | (1 << (mysqlParser.FROM_DAYS - 692)) | (1 << (mysqlParser.FROM_UNIXTIME - 692)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYN - 692)) | (1 << (mysqlParser.GEOMETRYTYPE - 692)) | (1 << (mysqlParser.GEOMFROMTEXT - 692)) | (1 << (mysqlParser.GEOMFROMWKB - 692)) | (1 << (mysqlParser.GET_FORMAT - 692)) | (1 << (mysqlParser.GET_LOCK - 692)) | (1 << (mysqlParser.GLENGTH - 692)) | (1 << (mysqlParser.GREATEST - 692)) | (1 << (mysqlParser.GTID_SUBSET - 692)) | (1 << (mysqlParser.GTID_SUBTRACT - 692)) | (1 << (mysqlParser.HEX - 692)) | (1 << (mysqlParser.IFNULL - 692)) | (1 << (mysqlParser.INET6_ATON - 692)) | (1 << (mysqlParser.INET6_NTOA - 692)) | (1 << (mysqlParser.INET_ATON - 692)) | (1 << (mysqlParser.INET_NTOA - 692)) | (1 << (mysqlParser.INSTR - 692)) | (1 << (mysqlParser.INTERIORRINGN - 692)) | (1 << (mysqlParser.INTERSECTS - 692)) | (1 << (mysqlParser.ISCLOSED - 692)) | (1 << (mysqlParser.ISEMPTY - 692)) | (1 << (mysqlParser.ISNULL - 692)) | (1 << (mysqlParser.ISSIMPLE - 692)) | (1 << (mysqlParser.IS_FREE_LOCK - 692)) | (1 << (mysqlParser.IS_IPV4 - 692)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 692)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 692)) | (1 << (mysqlParser.IS_IPV6 - 692)) | (1 << (mysqlParser.IS_USED_LOCK - 692)) | (1 << (mysqlParser.LAST_INSERT_ID - 692)) | (1 << (mysqlParser.LCASE - 692)) | (1 << (mysqlParser.LEAST - 692)) | (1 << (mysqlParser.LENGTH - 692)) | (1 << (mysqlParser.LINEFROMTEXT - 692)) | (1 << (mysqlParser.LINEFROMWKB - 692)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 692)) | (1 << (mysqlParser.LN - 692)) | (1 << (mysqlParser.LOAD_FILE - 692)) | (1 << (mysqlParser.LOCATE - 692)) | (1 << (mysqlParser.LOG - 692)) | (1 << (mysqlParser.LOG10 - 692)) | (1 << (mysqlParser.LOG2 - 692)) | (1 << (mysqlParser.LOWER - 692)) | (1 << (mysqlParser.LPAD - 692)) | (1 << (mysqlParser.LTRIM - 692)) | (1 << (mysqlParser.MAKEDATE - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (mysqlParser.MAKETIME - 756)) | (1 << (mysqlParser.MAKE_SET - 756)) | (1 << (mysqlParser.MASTER_POS_WAIT - 756)) | (1 << (mysqlParser.MBRCONTAINS - 756)) | (1 << (mysqlParser.MBRDISJOINT - 756)) | (1 << (mysqlParser.MBREQUAL - 756)) | (1 << (mysqlParser.MBRINTERSECTS - 756)) | (1 << (mysqlParser.MBROVERLAPS - 756)) | (1 << (mysqlParser.MBRTOUCHES - 756)) | (1 << (mysqlParser.MBRWITHIN - 756)) | (1 << (mysqlParser.MD5 - 756)) | (1 << (mysqlParser.MLINEFROMTEXT - 756)) | (1 << (mysqlParser.MLINEFROMWKB - 756)) | (1 << (mysqlParser.MONTHNAME - 756)) | (1 << (mysqlParser.MPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MPOINTFROMWKB - 756)) | (1 << (mysqlParser.MPOLYFROMTEXT - 756)) | (1 << (mysqlParser.MPOLYFROMWKB - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (mysqlParser.NAME_CONST - 756)) | (1 << (mysqlParser.NULLIF - 756)) | (1 << (mysqlParser.NUMGEOMETRIES - 756)) | (1 << (mysqlParser.NUMINTERIORRINGS - 756)) | (1 << (mysqlParser.NUMPOINTS - 756)) | (1 << (mysqlParser.OCT - 756)) | (1 << (mysqlParser.OCTET_LENGTH - 756)) | (1 << (mysqlParser.ORD - 756)) | (1 << (mysqlParser.OVERLAPS - 756)) | (1 << (mysqlParser.PERIOD_ADD - 756)) | (1 << (mysqlParser.PERIOD_DIFF - 756)) | (1 << (mysqlParser.PI - 756)) | (1 << (mysqlParser.POINTFROMTEXT - 756)) | (1 << (mysqlParser.POINTFROMWKB - 756)) | (1 << (mysqlParser.POINTN - 756)) | (1 << (mysqlParser.POLYFROMTEXT - 756)) | (1 << (mysqlParser.POLYFROMWKB - 756)) | (1 << (mysqlParser.POLYGONFROMTEXT - 756)) | (1 << (mysqlParser.POLYGONFROMWKB - 756)) | (1 << (mysqlParser.POW - 756)) | (1 << (mysqlParser.POWER - 756)) | (1 << (mysqlParser.QUOTE - 756)) | (1 << (mysqlParser.RADIANS - 756)) | (1 << (mysqlParser.RAND - 756)) | (1 << (mysqlParser.RANDOM_BYTES - 756)) | (1 << (mysqlParser.RELEASE_LOCK - 756)) | (1 << (mysqlParser.REVERSE - 756)) | (1 << (mysqlParser.ROUND - 756)) | (1 << (mysqlParser.ROW_COUNT - 756)) | (1 << (mysqlParser.RPAD - 756)) | (1 << (mysqlParser.RTRIM - 756)) | (1 << (mysqlParser.SEC_TO_TIME - 756)) | (1 << (mysqlParser.SESSION_USER - 756)) | (1 << (mysqlParser.SHA - 756)) | (1 << (mysqlParser.SHA1 - 756)) | (1 << (mysqlParser.SHA2 - 756)) | (1 << (mysqlParser.SIGN - 756)) | (1 << (mysqlParser.SIN - 756)) | (1 << (mysqlParser.SLEEP - 756)) | (1 << (mysqlParser.SOUNDEX - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (mysqlParser.SQRT - 820)) | (1 << (mysqlParser.SRID - 820)) | (1 << (mysqlParser.STARTPOINT - 820)) | (1 << (mysqlParser.STRCMP - 820)) | (1 << (mysqlParser.STR_TO_DATE - 820)) | (1 << (mysqlParser.ST_AREA - 820)) | (1 << (mysqlParser.ST_ASBINARY - 820)) | (1 << (mysqlParser.ST_ASTEXT - 820)) | (1 << (mysqlParser.ST_ASWKB - 820)) | (1 << (mysqlParser.ST_ASWKT - 820)) | (1 << (mysqlParser.ST_BUFFER - 820)) | (1 << (mysqlParser.ST_CENTROID - 820)) | (1 << (mysqlParser.ST_CONTAINS - 820)) | (1 << (mysqlParser.ST_CROSSES - 820)) | (1 << (mysqlParser.ST_DIFFERENCE - 820)) | (1 << (mysqlParser.ST_DIMENSION - 820)) | (1 << (mysqlParser.ST_DISJOINT - 820)) | (1 << (mysqlParser.ST_DISTANCE - 820)) | (1 << (mysqlParser.ST_ENDPOINT - 820)) | (1 << (mysqlParser.ST_ENVELOPE - 820)) | (1 << (mysqlParser.ST_EQUALS - 820)) | (1 << (mysqlParser.ST_EXTERIORRING - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYN - 820)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 820)) | (1 << (mysqlParser.ST_INTERIORRINGN - 820)) | (1 << (mysqlParser.ST_INTERSECTION - 820)) | (1 << (mysqlParser.ST_INTERSECTS - 820)) | (1 << (mysqlParser.ST_ISCLOSED - 820)) | (1 << (mysqlParser.ST_ISEMPTY - 820)) | (1 << (mysqlParser.ST_ISSIMPLE - 820)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINEFROMWKB - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (mysqlParser.ST_NUMPOINTS - 820)) | (1 << (mysqlParser.ST_OVERLAPS - 820)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 820)) | (1 << (mysqlParser.ST_POINTFROMWKB - 820)) | (1 << (mysqlParser.ST_POINTN - 820)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYFROMWKB - 820)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (mysqlParser.ST_SRID - 820)) | (1 << (mysqlParser.ST_STARTPOINT - 820)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (mysqlParser.ST_TOUCHES - 820)) | (1 << (mysqlParser.ST_UNION - 820)) | (1 << (mysqlParser.ST_WITHIN - 820)) | (1 << (mysqlParser.ST_X - 820)) | (1 << (mysqlParser.ST_Y - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (mysqlParser.SUBDATE - 884)) | (1 << (mysqlParser.SUBSTRING_INDEX - 884)) | (1 << (mysqlParser.SUBTIME - 884)) | (1 << (mysqlParser.SYSTEM_USER - 884)) | (1 << (mysqlParser.TAN - 884)) | (1 << (mysqlParser.TIMEDIFF - 884)) | (1 << (mysqlParser.TIMESTAMPADD - 884)) | (1 << (mysqlParser.TIMESTAMPDIFF - 884)) | (1 << (mysqlParser.TIME_FORMAT - 884)) | (1 << (mysqlParser.TIME_TO_SEC - 884)) | (1 << (mysqlParser.TOUCHES - 884)) | (1 << (mysqlParser.TO_BASE64 - 884)) | (1 << (mysqlParser.TO_DAYS - 884)) | (1 << (mysqlParser.TO_SECONDS - 884)) | (1 << (mysqlParser.UCASE - 884)) | (1 << (mysqlParser.UNCOMPRESS - 884)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (mysqlParser.UNHEX - 884)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 884)) | (1 << (mysqlParser.UPDATEXML - 884)) | (1 << (mysqlParser.UPPER - 884)) | (1 << (mysqlParser.UUID - 884)) | (1 << (mysqlParser.UUID_SHORT - 884)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (mysqlParser.VERSION - 884)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (mysqlParser.WEEKDAY - 884)) | (1 << (mysqlParser.WEEKOFYEAR - 884)) | (1 << (mysqlParser.WEIGHT_STRING - 884)) | (1 << (mysqlParser.WITHIN - 884)) | (1 << (mysqlParser.YEARWEEK - 884)) | (1 << (mysqlParser.Y_FUNCTION - 884)) | (1 << (mysqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 954)) & ~0x3f) == 0 and ((1 << (_la - 954)) & ((1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 954)) | (1 << (mysqlParser.ID - 954)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 954)))) != 0):
                self.state = 3012
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.AS:
                    self.state = 3011
                    self.match(mysqlParser.AS)


                self.state = 3014
                self.uid()


            self.state = 3017
            self.match(mysqlParser.SET)
            self.state = 3018
            self.updatedElement()
            self.state = 3023
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.COMMA:
                self.state = 3019
                self.match(mysqlParser.COMMA)
                self.state = 3020
                self.updatedElement()
                self.state = 3025
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3028
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.WHERE:
                self.state = 3026
                self.match(mysqlParser.WHERE)
                self.state = 3027
                self.expression(0)


            self.state = 3031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.ORDER:
                self.state = 3030
                self.orderByClause()


            self.state = 3034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.LIMIT:
                self.state = 3033
                self.limitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultipleUpdateStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(mysqlParser.UPDATE, 0)

        def tableSources(self):
            return self.getTypedRuleContext(mysqlParser.TableSourcesContext,0)


        def SET(self):
            return self.getToken(mysqlParser.SET, 0)

        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UpdatedElementContext,i)


        def LOW_PRIORITY(self):
            return self.getToken(mysqlParser.LOW_PRIORITY, 0)

        def IGNORE(self):
            return self.getToken(mysqlParser.IGNORE, 0)

        def WHERE(self):
            return self.getToken(mysqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_multipleUpdateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipleUpdateStatement" ):
                listener.enterMultipleUpdateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipleUpdateStatement" ):
                listener.exitMultipleUpdateStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultipleUpdateStatement" ):
                return visitor.visitMultipleUpdateStatement(self)
            else:
                return visitor.visitChildren(self)




    def multipleUpdateStatement(self):

        localctx = mysqlParser.MultipleUpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_multipleUpdateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3036
            self.match(mysqlParser.UPDATE)
            self.state = 3038
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.LOW_PRIORITY:
                self.state = 3037
                self.match(mysqlParser.LOW_PRIORITY)


            self.state = 3041
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.IGNORE:
                self.state = 3040
                self.match(mysqlParser.IGNORE)


            self.state = 3043
            self.tableSources()
            self.state = 3044
            self.match(mysqlParser.SET)
            self.state = 3045
            self.updatedElement()
            self.state = 3050
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.COMMA:
                self.state = 3046
                self.match(mysqlParser.COMMA)
                self.state = 3047
                self.updatedElement()
                self.state = 3052
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3055
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.WHERE:
                self.state = 3053
                self.match(mysqlParser.WHERE)
                self.state = 3054
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderByClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(mysqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(mysqlParser.BY, 0)

        def orderByExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.OrderByExpressionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.OrderByExpressionContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_orderByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderByClause" ):
                listener.enterOrderByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderByClause" ):
                listener.exitOrderByClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderByClause" ):
                return visitor.visitOrderByClause(self)
            else:
                return visitor.visitChildren(self)




    def orderByClause(self):

        localctx = mysqlParser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_orderByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3057
            self.match(mysqlParser.ORDER)
            self.state = 3058
            self.match(mysqlParser.BY)
            self.state = 3059
            self.orderByExpression()
            self.state = 3064
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.COMMA:
                self.state = 3060
                self.match(mysqlParser.COMMA)
                self.state = 3061
                self.orderByExpression()
                self.state = 3066
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrderByExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.order = None # Token

        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(mysqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(mysqlParser.DESC, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_orderByExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderByExpression" ):
                listener.enterOrderByExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderByExpression" ):
                listener.exitOrderByExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrderByExpression" ):
                return visitor.visitOrderByExpression(self)
            else:
                return visitor.visitChildren(self)




    def orderByExpression(self):

        localctx = mysqlParser.OrderByExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_orderByExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3067
            self.expression(0)
            self.state = 3069
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.ASC or _la==mysqlParser.DESC:
                self.state = 3068
                localctx.order = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.ASC or _la==mysqlParser.DESC):
                    localctx.order = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableSourcesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableSource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.TableSourceContext)
            else:
                return self.getTypedRuleContext(mysqlParser.TableSourceContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_tableSources

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSources" ):
                listener.enterTableSources(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSources" ):
                listener.exitTableSources(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableSources" ):
                return visitor.visitTableSources(self)
            else:
                return visitor.visitChildren(self)




    def tableSources(self):

        localctx = mysqlParser.TableSourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_tableSources)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3071
            self.tableSource()
            self.state = 3076
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.COMMA:
                self.state = 3072
                self.match(mysqlParser.COMMA)
                self.state = 3073
                self.tableSource()
                self.state = 3078
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableSourceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableSourceItem(self):
            return self.getTypedRuleContext(mysqlParser.TableSourceItemContext,0)


        def joinPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.JoinPartContext)
            else:
                return self.getTypedRuleContext(mysqlParser.JoinPartContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_tableSource

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSource" ):
                listener.enterTableSource(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSource" ):
                listener.exitTableSource(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableSource" ):
                return visitor.visitTableSource(self)
            else:
                return visitor.visitChildren(self)




    def tableSource(self):

        localctx = mysqlParser.TableSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_tableSource)
        self._la = 0 # Token type
        try:
            self.state = 3096
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,431,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3079
                self.tableSourceItem()
                self.state = 3083
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,429,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3080
                        self.joinPart() 
                    self.state = 3085
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,429,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3086
                self.match(mysqlParser.LR_BRACKET)
                self.state = 3087
                self.tableSourceItem()
                self.state = 3091
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & ((1 << (mysqlParser.CROSS - 30)) | (1 << (mysqlParser.INNER - 30)) | (1 << (mysqlParser.JOIN - 30)) | (1 << (mysqlParser.LEFT - 30)))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (mysqlParser.NATURAL - 96)) | (1 << (mysqlParser.RIGHT - 96)) | (1 << (mysqlParser.STRAIGHT_JOIN - 96)))) != 0):
                    self.state = 3088
                    self.joinPart()
                    self.state = 3093
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3094
                self.match(mysqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableSourceItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_tableSourceItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryTableItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.TableSourceItemContext
            super().__init__(parser)
            self.parenthesisSubquery = None # SubqueryContext
            self.alias = None # UidContext
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)

        def subquery(self):
            return self.getTypedRuleContext(mysqlParser.SubqueryContext,0)

        def AS(self):
            return self.getToken(mysqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryTableItem" ):
                listener.enterSubqueryTableItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryTableItem" ):
                listener.exitSubqueryTableItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryTableItem" ):
                return visitor.visitSubqueryTableItem(self)
            else:
                return visitor.visitChildren(self)


    class AtomTableItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.TableSourceItemContext
            super().__init__(parser)
            self.alias = None # UidContext
            self.copyFrom(ctx)

        def tableName(self):
            return self.getTypedRuleContext(mysqlParser.TableNameContext,0)

        def PARTITION(self):
            return self.getToken(mysqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(mysqlParser.UidListContext,0)

        def indexHint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.IndexHintContext)
            else:
                return self.getTypedRuleContext(mysqlParser.IndexHintContext,i)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)

        def AS(self):
            return self.getToken(mysqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomTableItem" ):
                listener.enterAtomTableItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomTableItem" ):
                listener.exitAtomTableItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomTableItem" ):
                return visitor.visitAtomTableItem(self)
            else:
                return visitor.visitChildren(self)


    class TableSourcesItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.TableSourceItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableSources(self):
            return self.getTypedRuleContext(mysqlParser.TableSourcesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSourcesItem" ):
                listener.enterTableSourcesItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSourcesItem" ):
                listener.exitTableSourcesItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableSourcesItem" ):
                return visitor.visitTableSourcesItem(self)
            else:
                return visitor.visitChildren(self)



    def tableSourceItem(self):

        localctx = mysqlParser.TableSourceItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_tableSourceItem)
        self._la = 0 # Token type
        try:
            self.state = 3138
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,439,self._ctx)
            if la_ == 1:
                localctx = mysqlParser.AtomTableItemContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3098
                self.tableName()
                self.state = 3104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.PARTITION:
                    self.state = 3099
                    self.match(mysqlParser.PARTITION)
                    self.state = 3100
                    self.match(mysqlParser.LR_BRACKET)
                    self.state = 3101
                    self.uidList()
                    self.state = 3102
                    self.match(mysqlParser.RR_BRACKET)


                self.state = 3110
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,434,self._ctx)
                if la_ == 1:
                    self.state = 3107
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==mysqlParser.AS:
                        self.state = 3106
                        self.match(mysqlParser.AS)


                    self.state = 3109
                    localctx.alias = self.uid()


                self.state = 3120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.FORCE or _la==mysqlParser.IGNORE or _la==mysqlParser.USE:
                    self.state = 3112
                    self.indexHint()
                    self.state = 3117
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,435,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 3113
                            self.match(mysqlParser.COMMA)
                            self.state = 3114
                            self.indexHint() 
                        self.state = 3119
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,435,self._ctx)



                pass

            elif la_ == 2:
                localctx = mysqlParser.SubqueryTableItemContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3127
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,437,self._ctx)
                if la_ == 1:
                    self.state = 3122
                    self.subquery()
                    pass

                elif la_ == 2:
                    self.state = 3123
                    self.match(mysqlParser.LR_BRACKET)
                    self.state = 3124
                    localctx.parenthesisSubquery = self.subquery()
                    self.state = 3125
                    self.match(mysqlParser.RR_BRACKET)
                    pass


                self.state = 3130
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.AS:
                    self.state = 3129
                    self.match(mysqlParser.AS)


                self.state = 3132
                localctx.alias = self.uid()
                pass

            elif la_ == 3:
                localctx = mysqlParser.TableSourcesItemContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3134
                self.match(mysqlParser.LR_BRACKET)
                self.state = 3135
                self.tableSources()
                self.state = 3136
                self.match(mysqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndexHintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.indexHintAction = None # Token
            self.keyFormat = None # Token

        def uidList(self):
            return self.getTypedRuleContext(mysqlParser.UidListContext,0)


        def USE(self):
            return self.getToken(mysqlParser.USE, 0)

        def IGNORE(self):
            return self.getToken(mysqlParser.IGNORE, 0)

        def FORCE(self):
            return self.getToken(mysqlParser.FORCE, 0)

        def INDEX(self):
            return self.getToken(mysqlParser.INDEX, 0)

        def KEY(self):
            return self.getToken(mysqlParser.KEY, 0)

        def FOR(self):
            return self.getToken(mysqlParser.FOR, 0)

        def indexHintType(self):
            return self.getTypedRuleContext(mysqlParser.IndexHintTypeContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_indexHint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexHint" ):
                listener.enterIndexHint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexHint" ):
                listener.exitIndexHint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexHint" ):
                return visitor.visitIndexHint(self)
            else:
                return visitor.visitChildren(self)




    def indexHint(self):

        localctx = mysqlParser.IndexHintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_indexHint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3140
            localctx.indexHintAction = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==mysqlParser.FORCE or _la==mysqlParser.IGNORE or _la==mysqlParser.USE):
                localctx.indexHintAction = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3141
            localctx.keyFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==mysqlParser.INDEX or _la==mysqlParser.KEY):
                localctx.keyFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3144
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.FOR:
                self.state = 3142
                self.match(mysqlParser.FOR)
                self.state = 3143
                self.indexHintType()


            self.state = 3146
            self.match(mysqlParser.LR_BRACKET)
            self.state = 3147
            self.uidList()
            self.state = 3148
            self.match(mysqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndexHintTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(mysqlParser.JOIN, 0)

        def ORDER(self):
            return self.getToken(mysqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(mysqlParser.BY, 0)

        def GROUP(self):
            return self.getToken(mysqlParser.GROUP, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_indexHintType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexHintType" ):
                listener.enterIndexHintType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexHintType" ):
                listener.exitIndexHintType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexHintType" ):
                return visitor.visitIndexHintType(self)
            else:
                return visitor.visitChildren(self)




    def indexHintType(self):

        localctx = mysqlParser.IndexHintTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_indexHintType)
        try:
            self.state = 3155
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.JOIN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3150
                self.match(mysqlParser.JOIN)
                pass
            elif token in [mysqlParser.ORDER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3151
                self.match(mysqlParser.ORDER)
                self.state = 3152
                self.match(mysqlParser.BY)
                pass
            elif token in [mysqlParser.GROUP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3153
                self.match(mysqlParser.GROUP)
                self.state = 3154
                self.match(mysqlParser.BY)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JoinPartContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_joinPart

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InnerJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JOIN(self):
            return self.getToken(mysqlParser.JOIN, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(mysqlParser.TableSourceItemContext,0)

        def ON(self):
            return self.getToken(mysqlParser.ON, 0)
        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)

        def USING(self):
            return self.getToken(mysqlParser.USING, 0)
        def uidList(self):
            return self.getTypedRuleContext(mysqlParser.UidListContext,0)

        def INNER(self):
            return self.getToken(mysqlParser.INNER, 0)
        def CROSS(self):
            return self.getToken(mysqlParser.CROSS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerJoin" ):
                listener.enterInnerJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerJoin" ):
                listener.exitInnerJoin(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInnerJoin" ):
                return visitor.visitInnerJoin(self)
            else:
                return visitor.visitChildren(self)


    class NaturalJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NATURAL(self):
            return self.getToken(mysqlParser.NATURAL, 0)
        def JOIN(self):
            return self.getToken(mysqlParser.JOIN, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(mysqlParser.TableSourceItemContext,0)

        def LEFT(self):
            return self.getToken(mysqlParser.LEFT, 0)
        def RIGHT(self):
            return self.getToken(mysqlParser.RIGHT, 0)
        def OUTER(self):
            return self.getToken(mysqlParser.OUTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNaturalJoin" ):
                listener.enterNaturalJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNaturalJoin" ):
                listener.exitNaturalJoin(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNaturalJoin" ):
                return visitor.visitNaturalJoin(self)
            else:
                return visitor.visitChildren(self)


    class OuterJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JOIN(self):
            return self.getToken(mysqlParser.JOIN, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(mysqlParser.TableSourceItemContext,0)

        def LEFT(self):
            return self.getToken(mysqlParser.LEFT, 0)
        def RIGHT(self):
            return self.getToken(mysqlParser.RIGHT, 0)
        def ON(self):
            return self.getToken(mysqlParser.ON, 0)
        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)

        def USING(self):
            return self.getToken(mysqlParser.USING, 0)
        def uidList(self):
            return self.getTypedRuleContext(mysqlParser.UidListContext,0)

        def OUTER(self):
            return self.getToken(mysqlParser.OUTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOuterJoin" ):
                listener.enterOuterJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOuterJoin" ):
                listener.exitOuterJoin(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOuterJoin" ):
                return visitor.visitOuterJoin(self)
            else:
                return visitor.visitChildren(self)


    class StraightJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRAIGHT_JOIN(self):
            return self.getToken(mysqlParser.STRAIGHT_JOIN, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(mysqlParser.TableSourceItemContext,0)

        def ON(self):
            return self.getToken(mysqlParser.ON, 0)
        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStraightJoin" ):
                listener.enterStraightJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStraightJoin" ):
                listener.exitStraightJoin(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStraightJoin" ):
                return visitor.visitStraightJoin(self)
            else:
                return visitor.visitChildren(self)



    def joinPart(self):

        localctx = mysqlParser.JoinPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_joinPart)
        self._la = 0 # Token type
        try:
            self.state = 3201
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.CROSS, mysqlParser.INNER, mysqlParser.JOIN]:
                localctx = mysqlParser.InnerJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3158
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.CROSS or _la==mysqlParser.INNER:
                    self.state = 3157
                    _la = self._input.LA(1)
                    if not(_la==mysqlParser.CROSS or _la==mysqlParser.INNER):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3160
                self.match(mysqlParser.JOIN)
                self.state = 3161
                self.tableSourceItem()
                self.state = 3169
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,443,self._ctx)
                if la_ == 1:
                    self.state = 3162
                    self.match(mysqlParser.ON)
                    self.state = 3163
                    self.expression(0)

                elif la_ == 2:
                    self.state = 3164
                    self.match(mysqlParser.USING)
                    self.state = 3165
                    self.match(mysqlParser.LR_BRACKET)
                    self.state = 3166
                    self.uidList()
                    self.state = 3167
                    self.match(mysqlParser.RR_BRACKET)


                pass
            elif token in [mysqlParser.STRAIGHT_JOIN]:
                localctx = mysqlParser.StraightJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3171
                self.match(mysqlParser.STRAIGHT_JOIN)
                self.state = 3172
                self.tableSourceItem()
                self.state = 3175
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,444,self._ctx)
                if la_ == 1:
                    self.state = 3173
                    self.match(mysqlParser.ON)
                    self.state = 3174
                    self.expression(0)


                pass
            elif token in [mysqlParser.LEFT, mysqlParser.RIGHT]:
                localctx = mysqlParser.OuterJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3177
                _la = self._input.LA(1)
                if not(_la==mysqlParser.LEFT or _la==mysqlParser.RIGHT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3179
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.OUTER:
                    self.state = 3178
                    self.match(mysqlParser.OUTER)


                self.state = 3181
                self.match(mysqlParser.JOIN)
                self.state = 3182
                self.tableSourceItem()
                self.state = 3190
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [mysqlParser.ON]:
                    self.state = 3183
                    self.match(mysqlParser.ON)
                    self.state = 3184
                    self.expression(0)
                    pass
                elif token in [mysqlParser.USING]:
                    self.state = 3185
                    self.match(mysqlParser.USING)
                    self.state = 3186
                    self.match(mysqlParser.LR_BRACKET)
                    self.state = 3187
                    self.uidList()
                    self.state = 3188
                    self.match(mysqlParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [mysqlParser.NATURAL]:
                localctx = mysqlParser.NaturalJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3192
                self.match(mysqlParser.NATURAL)
                self.state = 3197
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.LEFT or _la==mysqlParser.RIGHT:
                    self.state = 3193
                    _la = self._input.LA(1)
                    if not(_la==mysqlParser.LEFT or _la==mysqlParser.RIGHT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3195
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==mysqlParser.OUTER:
                        self.state = 3194
                        self.match(mysqlParser.OUTER)




                self.state = 3199
                self.match(mysqlParser.JOIN)
                self.state = 3200
                self.tableSourceItem()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubqueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStatement(self):
            return self.getTypedRuleContext(mysqlParser.SelectStatementContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubquery" ):
                listener.enterSubquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubquery" ):
                listener.exitSubquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubquery" ):
                return visitor.visitSubquery(self)
            else:
                return visitor.visitChildren(self)




    def subquery(self):

        localctx = mysqlParser.SubqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_subquery)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3203
            self.selectStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QueryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def querySpecification(self):
            return self.getTypedRuleContext(mysqlParser.QuerySpecificationContext,0)


        def queryExpression(self):
            return self.getTypedRuleContext(mysqlParser.QueryExpressionContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_queryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryExpression" ):
                listener.enterQueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryExpression" ):
                listener.exitQueryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryExpression" ):
                return visitor.visitQueryExpression(self)
            else:
                return visitor.visitChildren(self)




    def queryExpression(self):

        localctx = mysqlParser.QueryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_queryExpression)
        try:
            self.state = 3213
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,450,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3205
                self.match(mysqlParser.LR_BRACKET)
                self.state = 3206
                self.querySpecification()
                self.state = 3207
                self.match(mysqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3209
                self.match(mysqlParser.LR_BRACKET)
                self.state = 3210
                self.queryExpression()
                self.state = 3211
                self.match(mysqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QueryExpressionNointoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def querySpecificationNointo(self):
            return self.getTypedRuleContext(mysqlParser.QuerySpecificationNointoContext,0)


        def queryExpressionNointo(self):
            return self.getTypedRuleContext(mysqlParser.QueryExpressionNointoContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_queryExpressionNointo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryExpressionNointo" ):
                listener.enterQueryExpressionNointo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryExpressionNointo" ):
                listener.exitQueryExpressionNointo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQueryExpressionNointo" ):
                return visitor.visitQueryExpressionNointo(self)
            else:
                return visitor.visitChildren(self)




    def queryExpressionNointo(self):

        localctx = mysqlParser.QueryExpressionNointoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_queryExpressionNointo)
        try:
            self.state = 3223
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,451,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3215
                self.match(mysqlParser.LR_BRACKET)
                self.state = 3216
                self.querySpecificationNointo()
                self.state = 3217
                self.match(mysqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3219
                self.match(mysqlParser.LR_BRACKET)
                self.state = 3220
                self.queryExpressionNointo()
                self.state = 3221
                self.match(mysqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuerySpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(mysqlParser.SELECT, 0)

        def selectElements(self):
            return self.getTypedRuleContext(mysqlParser.SelectElementsContext,0)


        def selectSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.SelectSpecContext)
            else:
                return self.getTypedRuleContext(mysqlParser.SelectSpecContext,i)


        def selectIntoExpression(self):
            return self.getTypedRuleContext(mysqlParser.SelectIntoExpressionContext,0)


        def fromClause(self):
            return self.getTypedRuleContext(mysqlParser.FromClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(mysqlParser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(mysqlParser.LimitClauseContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_querySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecification" ):
                listener.enterQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecification" ):
                listener.exitQuerySpecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuerySpecification" ):
                return visitor.visitQuerySpecification(self)
            else:
                return visitor.visitChildren(self)




    def querySpecification(self):

        localctx = mysqlParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_querySpecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3225
            self.match(mysqlParser.SELECT)
            self.state = 3229
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,452,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3226
                    self.selectSpec() 
                self.state = 3231
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,452,self._ctx)

            self.state = 3232
            self.selectElements()
            self.state = 3234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.INTO:
                self.state = 3233
                self.selectIntoExpression()


            self.state = 3237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.FROM:
                self.state = 3236
                self.fromClause()


            self.state = 3240
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,455,self._ctx)
            if la_ == 1:
                self.state = 3239
                self.orderByClause()


            self.state = 3243
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,456,self._ctx)
            if la_ == 1:
                self.state = 3242
                self.limitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QuerySpecificationNointoContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(mysqlParser.SELECT, 0)

        def selectElements(self):
            return self.getTypedRuleContext(mysqlParser.SelectElementsContext,0)


        def selectSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.SelectSpecContext)
            else:
                return self.getTypedRuleContext(mysqlParser.SelectSpecContext,i)


        def fromClause(self):
            return self.getTypedRuleContext(mysqlParser.FromClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(mysqlParser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(mysqlParser.LimitClauseContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_querySpecificationNointo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecificationNointo" ):
                listener.enterQuerySpecificationNointo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecificationNointo" ):
                listener.exitQuerySpecificationNointo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuerySpecificationNointo" ):
                return visitor.visitQuerySpecificationNointo(self)
            else:
                return visitor.visitChildren(self)




    def querySpecificationNointo(self):

        localctx = mysqlParser.QuerySpecificationNointoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_querySpecificationNointo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3245
            self.match(mysqlParser.SELECT)
            self.state = 3249
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,457,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3246
                    self.selectSpec() 
                self.state = 3251
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,457,self._ctx)

            self.state = 3252
            self.selectElements()
            self.state = 3254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.FROM:
                self.state = 3253
                self.fromClause()


            self.state = 3257
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,459,self._ctx)
            if la_ == 1:
                self.state = 3256
                self.orderByClause()


            self.state = 3260
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,460,self._ctx)
            if la_ == 1:
                self.state = 3259
                self.limitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnionParenthesisContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unionType = None # Token

        def UNION(self):
            return self.getToken(mysqlParser.UNION, 0)

        def queryExpressionNointo(self):
            return self.getTypedRuleContext(mysqlParser.QueryExpressionNointoContext,0)


        def ALL(self):
            return self.getToken(mysqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(mysqlParser.DISTINCT, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_unionParenthesis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionParenthesis" ):
                listener.enterUnionParenthesis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionParenthesis" ):
                listener.exitUnionParenthesis(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionParenthesis" ):
                return visitor.visitUnionParenthesis(self)
            else:
                return visitor.visitChildren(self)




    def unionParenthesis(self):

        localctx = mysqlParser.UnionParenthesisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_unionParenthesis)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3262
            self.match(mysqlParser.UNION)
            self.state = 3264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.ALL or _la==mysqlParser.DISTINCT:
                self.state = 3263
                localctx.unionType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.ALL or _la==mysqlParser.DISTINCT):
                    localctx.unionType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3266
            self.queryExpressionNointo()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unionType = None # Token

        def UNION(self):
            return self.getToken(mysqlParser.UNION, 0)

        def querySpecificationNointo(self):
            return self.getTypedRuleContext(mysqlParser.QuerySpecificationNointoContext,0)


        def queryExpressionNointo(self):
            return self.getTypedRuleContext(mysqlParser.QueryExpressionNointoContext,0)


        def ALL(self):
            return self.getToken(mysqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(mysqlParser.DISTINCT, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_unionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionStatement" ):
                listener.enterUnionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionStatement" ):
                listener.exitUnionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnionStatement" ):
                return visitor.visitUnionStatement(self)
            else:
                return visitor.visitChildren(self)




    def unionStatement(self):

        localctx = mysqlParser.UnionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_unionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3268
            self.match(mysqlParser.UNION)
            self.state = 3270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.ALL or _la==mysqlParser.DISTINCT:
                self.state = 3269
                localctx.unionType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.ALL or _la==mysqlParser.DISTINCT):
                    localctx.unionType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3274
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.SELECT]:
                self.state = 3272
                self.querySpecificationNointo()
                pass
            elif token in [mysqlParser.LR_BRACKET]:
                self.state = 3273
                self.queryExpressionNointo()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectSpecContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(mysqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(mysqlParser.DISTINCT, 0)

        def DISTINCTROW(self):
            return self.getToken(mysqlParser.DISTINCTROW, 0)

        def HIGH_PRIORITY(self):
            return self.getToken(mysqlParser.HIGH_PRIORITY, 0)

        def STRAIGHT_JOIN(self):
            return self.getToken(mysqlParser.STRAIGHT_JOIN, 0)

        def SQL_SMALL_RESULT(self):
            return self.getToken(mysqlParser.SQL_SMALL_RESULT, 0)

        def SQL_BIG_RESULT(self):
            return self.getToken(mysqlParser.SQL_BIG_RESULT, 0)

        def SQL_BUFFER_RESULT(self):
            return self.getToken(mysqlParser.SQL_BUFFER_RESULT, 0)

        def SQL_CACHE(self):
            return self.getToken(mysqlParser.SQL_CACHE, 0)

        def SQL_NO_CACHE(self):
            return self.getToken(mysqlParser.SQL_NO_CACHE, 0)

        def SQL_CALC_FOUND_ROWS(self):
            return self.getToken(mysqlParser.SQL_CALC_FOUND_ROWS, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_selectSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectSpec" ):
                listener.enterSelectSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectSpec" ):
                listener.exitSelectSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectSpec" ):
                return visitor.visitSelectSpec(self)
            else:
                return visitor.visitChildren(self)




    def selectSpec(self):

        localctx = mysqlParser.SelectSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_selectSpec)
        self._la = 0 # Token type
        try:
            self.state = 3284
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.ALL, mysqlParser.DISTINCT, mysqlParser.DISTINCTROW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3276
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << mysqlParser.ALL) | (1 << mysqlParser.DISTINCT) | (1 << mysqlParser.DISTINCTROW))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [mysqlParser.HIGH_PRIORITY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3277
                self.match(mysqlParser.HIGH_PRIORITY)
                pass
            elif token in [mysqlParser.STRAIGHT_JOIN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3278
                self.match(mysqlParser.STRAIGHT_JOIN)
                pass
            elif token in [mysqlParser.SQL_SMALL_RESULT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3279
                self.match(mysqlParser.SQL_SMALL_RESULT)
                pass
            elif token in [mysqlParser.SQL_BIG_RESULT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3280
                self.match(mysqlParser.SQL_BIG_RESULT)
                pass
            elif token in [mysqlParser.SQL_BUFFER_RESULT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3281
                self.match(mysqlParser.SQL_BUFFER_RESULT)
                pass
            elif token in [mysqlParser.SQL_CACHE, mysqlParser.SQL_NO_CACHE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3282
                _la = self._input.LA(1)
                if not(_la==mysqlParser.SQL_CACHE or _la==mysqlParser.SQL_NO_CACHE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [mysqlParser.SQL_CALC_FOUND_ROWS]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3283
                self.match(mysqlParser.SQL_CALC_FOUND_ROWS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectElementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.SelectElementContext)
            else:
                return self.getTypedRuleContext(mysqlParser.SelectElementContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_selectElements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectElements" ):
                listener.enterSelectElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectElements" ):
                listener.exitSelectElements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectElements" ):
                return visitor.visitSelectElements(self)
            else:
                return visitor.visitChildren(self)




    def selectElements(self):

        localctx = mysqlParser.SelectElementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_selectElements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3288
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.STAR]:
                self.state = 3286
                self.match(mysqlParser.STAR)
                pass
            elif token in [mysqlParser.CASE, mysqlParser.CAST, mysqlParser.CONVERT, mysqlParser.CURRENT_USER, mysqlParser.DEFAULT, mysqlParser.EXISTS, mysqlParser.FALSE, mysqlParser.IF, mysqlParser.INTERVAL, mysqlParser.LEFT, mysqlParser.NOT, mysqlParser.NULL_LITERAL, mysqlParser.REPLACE, mysqlParser.RIGHT, mysqlParser.TRUE, mysqlParser.VALUES, mysqlParser.DATE, mysqlParser.TIME, mysqlParser.TIMESTAMP, mysqlParser.DATETIME, mysqlParser.YEAR, mysqlParser.CHAR, mysqlParser.BINARY, mysqlParser.TEXT, mysqlParser.ENUM, mysqlParser.AVG, mysqlParser.BIT_AND, mysqlParser.BIT_OR, mysqlParser.BIT_XOR, mysqlParser.COUNT, mysqlParser.GROUP_CONCAT, mysqlParser.MAX, mysqlParser.MIN, mysqlParser.STD, mysqlParser.STDDEV, mysqlParser.STDDEV_POP, mysqlParser.STDDEV_SAMP, mysqlParser.SUM, mysqlParser.VAR_POP, mysqlParser.VAR_SAMP, mysqlParser.VARIANCE, mysqlParser.CURRENT_DATE, mysqlParser.CURRENT_TIME, mysqlParser.CURRENT_TIMESTAMP, mysqlParser.LOCALTIME, mysqlParser.CURDATE, mysqlParser.CURTIME, mysqlParser.DATE_ADD, mysqlParser.DATE_SUB, mysqlParser.EXTRACT, mysqlParser.LOCALTIMESTAMP, mysqlParser.NOW, mysqlParser.POSITION, mysqlParser.SUBSTR, mysqlParser.SUBSTRING, mysqlParser.SYSDATE, mysqlParser.TRIM, mysqlParser.UTC_DATE, mysqlParser.UTC_TIME, mysqlParser.UTC_TIMESTAMP, mysqlParser.ACCOUNT, mysqlParser.ACTION, mysqlParser.AFTER, mysqlParser.AGGREGATE, mysqlParser.ALGORITHM, mysqlParser.ANY, mysqlParser.AT, mysqlParser.AUTHORS, mysqlParser.AUTOCOMMIT, mysqlParser.AUTOEXTEND_SIZE, mysqlParser.AUTO_INCREMENT, mysqlParser.AVG_ROW_LENGTH, mysqlParser.BEGIN, mysqlParser.BINLOG, mysqlParser.BIT, mysqlParser.BLOCK, mysqlParser.BTREE, mysqlParser.CASCADED, mysqlParser.CHAIN, mysqlParser.CHANNEL, mysqlParser.CHECKSUM, mysqlParser.CIPHER, mysqlParser.CLIENT, mysqlParser.COALESCE, mysqlParser.CODE, mysqlParser.COLUMNS, mysqlParser.COLUMN_FORMAT, mysqlParser.COMMENT, mysqlParser.COMMIT, mysqlParser.COMPACT, mysqlParser.COMPLETION, mysqlParser.COMPRESSED, mysqlParser.COMPRESSION, mysqlParser.CONCURRENT, mysqlParser.CONNECTION, mysqlParser.CONSISTENT, mysqlParser.CONTAINS, mysqlParser.CONTEXT, mysqlParser.CONTRIBUTORS, mysqlParser.COPY, mysqlParser.CPU, mysqlParser.DATA, mysqlParser.DATAFILE, mysqlParser.DEALLOCATE, mysqlParser.DEFAULT_AUTH, mysqlParser.DEFINER, mysqlParser.DELAY_KEY_WRITE, mysqlParser.DIRECTORY, mysqlParser.DISABLE, mysqlParser.DISCARD, mysqlParser.DISK, mysqlParser.DO, mysqlParser.DUMPFILE, mysqlParser.DUPLICATE, mysqlParser.DYNAMIC, mysqlParser.ENABLE, mysqlParser.ENCRYPTION, mysqlParser.ENDS, mysqlParser.ENGINE, mysqlParser.ENGINES, mysqlParser.ERROR, mysqlParser.ERRORS, mysqlParser.ESCAPE, mysqlParser.EVEN, mysqlParser.EVENT, mysqlParser.EVENTS, mysqlParser.EVERY, mysqlParser.EXCHANGE, mysqlParser.EXCLUSIVE, mysqlParser.EXPIRE, mysqlParser.EXTENT_SIZE, mysqlParser.FAULTS, mysqlParser.FIELDS, mysqlParser.FILE_BLOCK_SIZE, mysqlParser.FILTER, mysqlParser.FIRST, mysqlParser.FIXED, mysqlParser.FOLLOWS, mysqlParser.FULL, mysqlParser.FUNCTION, mysqlParser.GLOBAL, mysqlParser.GRANTS, mysqlParser.GROUP_REPLICATION, mysqlParser.HASH, mysqlParser.HOST, mysqlParser.IDENTIFIED, mysqlParser.IGNORE_SERVER_IDS, mysqlParser.IMPORT, mysqlParser.INDEXES, mysqlParser.INITIAL_SIZE, mysqlParser.INPLACE, mysqlParser.INSERT_METHOD, mysqlParser.INSTANCE, mysqlParser.INVOKER, mysqlParser.IO, mysqlParser.IO_THREAD, mysqlParser.IPC, mysqlParser.ISOLATION, mysqlParser.ISSUER, mysqlParser.KEY_BLOCK_SIZE, mysqlParser.LANGUAGE, mysqlParser.LAST, mysqlParser.LEAVES, mysqlParser.LESS, mysqlParser.LEVEL, mysqlParser.LIST, mysqlParser.LOCAL, mysqlParser.LOGFILE, mysqlParser.LOGS, mysqlParser.MASTER, mysqlParser.MASTER_AUTO_POSITION, mysqlParser.MASTER_CONNECT_RETRY, mysqlParser.MASTER_DELAY, mysqlParser.MASTER_HEARTBEAT_PERIOD, mysqlParser.MASTER_HOST, mysqlParser.MASTER_LOG_FILE, mysqlParser.MASTER_LOG_POS, mysqlParser.MASTER_PASSWORD, mysqlParser.MASTER_PORT, mysqlParser.MASTER_RETRY_COUNT, mysqlParser.MASTER_SSL, mysqlParser.MASTER_SSL_CA, mysqlParser.MASTER_SSL_CAPATH, mysqlParser.MASTER_SSL_CERT, mysqlParser.MASTER_SSL_CIPHER, mysqlParser.MASTER_SSL_CRL, mysqlParser.MASTER_SSL_CRLPATH, mysqlParser.MASTER_SSL_KEY, mysqlParser.MASTER_TLS_VERSION, mysqlParser.MASTER_USER, mysqlParser.MAX_CONNECTIONS_PER_HOUR, mysqlParser.MAX_QUERIES_PER_HOUR, mysqlParser.MAX_ROWS, mysqlParser.MAX_SIZE, mysqlParser.MAX_UPDATES_PER_HOUR, mysqlParser.MAX_USER_CONNECTIONS, mysqlParser.MERGE, mysqlParser.MID, mysqlParser.MIGRATE, mysqlParser.MIN_ROWS, mysqlParser.MODIFY, mysqlParser.MUTEX, mysqlParser.MYSQL, mysqlParser.NAME, mysqlParser.NAMES, mysqlParser.NCHAR, mysqlParser.NEVER, mysqlParser.NO, mysqlParser.NODEGROUP, mysqlParser.NONE, mysqlParser.OFFLINE, mysqlParser.OFFSET, mysqlParser.OJ, mysqlParser.OLD_PASSWORD, mysqlParser.ONE, mysqlParser.ONLINE, mysqlParser.ONLY, mysqlParser.OPTIMIZER_COSTS, mysqlParser.OPTIONS, mysqlParser.OWNER, mysqlParser.PACK_KEYS, mysqlParser.PAGE, mysqlParser.PARSER, mysqlParser.PARTIAL, mysqlParser.PARTITIONING, mysqlParser.PARTITIONS, mysqlParser.PASSWORD, mysqlParser.PHASE, mysqlParser.PLUGIN_DIR, mysqlParser.PLUGINS, mysqlParser.PORT, mysqlParser.PRECEDES, mysqlParser.PREPARE, mysqlParser.PRESERVE, mysqlParser.PREV, mysqlParser.PROCESSLIST, mysqlParser.PROFILE, mysqlParser.PROFILES, mysqlParser.PROXY, mysqlParser.QUERY, mysqlParser.QUICK, mysqlParser.REBUILD, mysqlParser.RECOVER, mysqlParser.REDO_BUFFER_SIZE, mysqlParser.REDUNDANT, mysqlParser.RELAY_LOG_FILE, mysqlParser.RELAY_LOG_POS, mysqlParser.RELAYLOG, mysqlParser.REMOVE, mysqlParser.REORGANIZE, mysqlParser.REPAIR, mysqlParser.REPLICATE_DO_DB, mysqlParser.REPLICATE_DO_TABLE, mysqlParser.REPLICATE_IGNORE_DB, mysqlParser.REPLICATE_IGNORE_TABLE, mysqlParser.REPLICATE_REWRITE_DB, mysqlParser.REPLICATE_WILD_DO_TABLE, mysqlParser.REPLICATE_WILD_IGNORE_TABLE, mysqlParser.REPLICATION, mysqlParser.RESUME, mysqlParser.RETURNS, mysqlParser.ROLLBACK, mysqlParser.ROLLUP, mysqlParser.ROTATE, mysqlParser.ROW, mysqlParser.ROWS, mysqlParser.ROW_FORMAT, mysqlParser.SAVEPOINT, mysqlParser.SCHEDULE, mysqlParser.SECURITY, mysqlParser.SERVER, mysqlParser.SESSION, mysqlParser.SHARE, mysqlParser.SHARED, mysqlParser.SIGNED, mysqlParser.SIMPLE, mysqlParser.SLAVE, mysqlParser.SNAPSHOT, mysqlParser.SOCKET, mysqlParser.SOME, mysqlParser.SOUNDS, mysqlParser.SOURCE, mysqlParser.SQL_AFTER_GTIDS, mysqlParser.SQL_AFTER_MTS_GAPS, mysqlParser.SQL_BEFORE_GTIDS, mysqlParser.SQL_BUFFER_RESULT, mysqlParser.SQL_CACHE, mysqlParser.SQL_NO_CACHE, mysqlParser.SQL_THREAD, mysqlParser.START, mysqlParser.STARTS, mysqlParser.STATS_AUTO_RECALC, mysqlParser.STATS_PERSISTENT, mysqlParser.STATS_SAMPLE_PAGES, mysqlParser.STATUS, mysqlParser.STOP, mysqlParser.STORAGE, mysqlParser.STRING, mysqlParser.SUBJECT, mysqlParser.SUBPARTITION, mysqlParser.SUBPARTITIONS, mysqlParser.SUSPEND, mysqlParser.SWAPS, mysqlParser.SWITCHES, mysqlParser.TABLESPACE, mysqlParser.TEMPORARY, mysqlParser.TEMPTABLE, mysqlParser.THAN, mysqlParser.TRANSACTION, mysqlParser.TRUNCATE, mysqlParser.UNDEFINED, mysqlParser.UNDOFILE, mysqlParser.UNDO_BUFFER_SIZE, mysqlParser.UNKNOWN, mysqlParser.UPGRADE, mysqlParser.USER, mysqlParser.VALIDATION, mysqlParser.VALUE, mysqlParser.VARIABLES, mysqlParser.VIEW, mysqlParser.WAIT, mysqlParser.WARNINGS, mysqlParser.WITHOUT, mysqlParser.WORK, mysqlParser.WRAPPER, mysqlParser.X509, mysqlParser.XA, mysqlParser.XML, mysqlParser.QUARTER, mysqlParser.MONTH, mysqlParser.DAY, mysqlParser.HOUR, mysqlParser.MINUTE, mysqlParser.WEEK, mysqlParser.SECOND, mysqlParser.MICROSECOND, mysqlParser.TABLES, mysqlParser.ROUTINE, mysqlParser.EXECUTE, mysqlParser.FILE, mysqlParser.PROCESS, mysqlParser.RELOAD, mysqlParser.SHUTDOWN, mysqlParser.SUPER, mysqlParser.PRIVILEGES, mysqlParser.ARMSCII8, mysqlParser.ASCII, mysqlParser.BIG5, mysqlParser.CP1250, mysqlParser.CP1251, mysqlParser.CP1256, mysqlParser.CP1257, mysqlParser.CP850, mysqlParser.CP852, mysqlParser.CP866, mysqlParser.CP932, mysqlParser.DEC8, mysqlParser.EUCJPMS, mysqlParser.EUCKR, mysqlParser.GB2312, mysqlParser.GBK, mysqlParser.GEOSTD8, mysqlParser.GREEK, mysqlParser.HEBREW, mysqlParser.HP8, mysqlParser.KEYBCS2, mysqlParser.KOI8R, mysqlParser.KOI8U, mysqlParser.LATIN1, mysqlParser.LATIN2, mysqlParser.LATIN5, mysqlParser.LATIN7, mysqlParser.MACCE, mysqlParser.MACROMAN, mysqlParser.SJIS, mysqlParser.SWE7, mysqlParser.TIS620, mysqlParser.UCS2, mysqlParser.UJIS, mysqlParser.UTF16, mysqlParser.UTF16LE, mysqlParser.UTF32, mysqlParser.UTF8, mysqlParser.UTF8MB3, mysqlParser.UTF8MB4, mysqlParser.ARCHIVE, mysqlParser.BLACKHOLE, mysqlParser.CSV, mysqlParser.FEDERATED, mysqlParser.INNODB, mysqlParser.MEMORY, mysqlParser.MRG_MYISAM, mysqlParser.MYISAM, mysqlParser.NDB, mysqlParser.NDBCLUSTER, mysqlParser.PERFOMANCE_SCHEMA, mysqlParser.REPEATABLE, mysqlParser.COMMITTED, mysqlParser.UNCOMMITTED, mysqlParser.SERIALIZABLE, mysqlParser.GEOMETRYCOLLECTION, mysqlParser.LINESTRING, mysqlParser.MULTILINESTRING, mysqlParser.MULTIPOINT, mysqlParser.MULTIPOLYGON, mysqlParser.POINT, mysqlParser.POLYGON, mysqlParser.ABS, mysqlParser.ACOS, mysqlParser.ADDDATE, mysqlParser.ADDTIME, mysqlParser.AES_DECRYPT, mysqlParser.AES_ENCRYPT, mysqlParser.AREA, mysqlParser.ASBINARY, mysqlParser.ASIN, mysqlParser.ASTEXT, mysqlParser.ASWKB, mysqlParser.ASWKT, mysqlParser.ASYMMETRIC_DECRYPT, mysqlParser.ASYMMETRIC_DERIVE, mysqlParser.ASYMMETRIC_ENCRYPT, mysqlParser.ASYMMETRIC_SIGN, mysqlParser.ASYMMETRIC_VERIFY, mysqlParser.ATAN, mysqlParser.ATAN2, mysqlParser.BENCHMARK, mysqlParser.BIN, mysqlParser.BIT_COUNT, mysqlParser.BIT_LENGTH, mysqlParser.BUFFER, mysqlParser.CEIL, mysqlParser.CEILING, mysqlParser.CENTROID, mysqlParser.CHARACTER_LENGTH, mysqlParser.CHARSET, mysqlParser.CHAR_LENGTH, mysqlParser.COERCIBILITY, mysqlParser.COLLATION, mysqlParser.COMPRESS, mysqlParser.CONCAT, mysqlParser.CONCAT_WS, mysqlParser.CONNECTION_ID, mysqlParser.CONV, mysqlParser.CONVERT_TZ, mysqlParser.COS, mysqlParser.COT, mysqlParser.CRC32, mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY, mysqlParser.CREATE_ASYMMETRIC_PUB_KEY, mysqlParser.CREATE_DH_PARAMETERS, mysqlParser.CREATE_DIGEST, mysqlParser.CROSSES, mysqlParser.DATEDIFF, mysqlParser.DATE_FORMAT, mysqlParser.DAYNAME, mysqlParser.DAYOFMONTH, mysqlParser.DAYOFWEEK, mysqlParser.DAYOFYEAR, mysqlParser.DECODE, mysqlParser.DEGREES, mysqlParser.DES_DECRYPT, mysqlParser.DES_ENCRYPT, mysqlParser.DIMENSION, mysqlParser.DISJOINT, mysqlParser.ELT, mysqlParser.ENCODE, mysqlParser.ENCRYPT, mysqlParser.ENDPOINT, mysqlParser.ENVELOPE, mysqlParser.EQUALS, mysqlParser.EXP, mysqlParser.EXPORT_SET, mysqlParser.EXTERIORRING, mysqlParser.EXTRACTVALUE, mysqlParser.FIELD, mysqlParser.FIND_IN_SET, mysqlParser.FLOOR, mysqlParser.FORMAT, mysqlParser.FOUND_ROWS, mysqlParser.FROM_BASE64, mysqlParser.FROM_DAYS, mysqlParser.FROM_UNIXTIME, mysqlParser.GEOMCOLLFROMTEXT, mysqlParser.GEOMCOLLFROMWKB, mysqlParser.GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.GEOMETRYCOLLECTIONFROMWKB, mysqlParser.GEOMETRYFROMTEXT, mysqlParser.GEOMETRYFROMWKB, mysqlParser.GEOMETRYN, mysqlParser.GEOMETRYTYPE, mysqlParser.GEOMFROMTEXT, mysqlParser.GEOMFROMWKB, mysqlParser.GET_FORMAT, mysqlParser.GET_LOCK, mysqlParser.GLENGTH, mysqlParser.GREATEST, mysqlParser.GTID_SUBSET, mysqlParser.GTID_SUBTRACT, mysqlParser.HEX, mysqlParser.IFNULL, mysqlParser.INET6_ATON, mysqlParser.INET6_NTOA, mysqlParser.INET_ATON, mysqlParser.INET_NTOA, mysqlParser.INSTR, mysqlParser.INTERIORRINGN, mysqlParser.INTERSECTS, mysqlParser.ISCLOSED, mysqlParser.ISEMPTY, mysqlParser.ISNULL, mysqlParser.ISSIMPLE, mysqlParser.IS_FREE_LOCK, mysqlParser.IS_IPV4, mysqlParser.IS_IPV4_COMPAT, mysqlParser.IS_IPV4_MAPPED, mysqlParser.IS_IPV6, mysqlParser.IS_USED_LOCK, mysqlParser.LAST_INSERT_ID, mysqlParser.LCASE, mysqlParser.LEAST, mysqlParser.LENGTH, mysqlParser.LINEFROMTEXT, mysqlParser.LINEFROMWKB, mysqlParser.LINESTRINGFROMTEXT, mysqlParser.LINESTRINGFROMWKB, mysqlParser.LN, mysqlParser.LOAD_FILE, mysqlParser.LOCATE, mysqlParser.LOG, mysqlParser.LOG10, mysqlParser.LOG2, mysqlParser.LOWER, mysqlParser.LPAD, mysqlParser.LTRIM, mysqlParser.MAKEDATE, mysqlParser.MAKETIME, mysqlParser.MAKE_SET, mysqlParser.MASTER_POS_WAIT, mysqlParser.MBRCONTAINS, mysqlParser.MBRDISJOINT, mysqlParser.MBREQUAL, mysqlParser.MBRINTERSECTS, mysqlParser.MBROVERLAPS, mysqlParser.MBRTOUCHES, mysqlParser.MBRWITHIN, mysqlParser.MD5, mysqlParser.MLINEFROMTEXT, mysqlParser.MLINEFROMWKB, mysqlParser.MONTHNAME, mysqlParser.MPOINTFROMTEXT, mysqlParser.MPOINTFROMWKB, mysqlParser.MPOLYFROMTEXT, mysqlParser.MPOLYFROMWKB, mysqlParser.MULTILINESTRINGFROMTEXT, mysqlParser.MULTILINESTRINGFROMWKB, mysqlParser.MULTIPOINTFROMTEXT, mysqlParser.MULTIPOINTFROMWKB, mysqlParser.MULTIPOLYGONFROMTEXT, mysqlParser.MULTIPOLYGONFROMWKB, mysqlParser.NAME_CONST, mysqlParser.NULLIF, mysqlParser.NUMGEOMETRIES, mysqlParser.NUMINTERIORRINGS, mysqlParser.NUMPOINTS, mysqlParser.OCT, mysqlParser.OCTET_LENGTH, mysqlParser.ORD, mysqlParser.OVERLAPS, mysqlParser.PERIOD_ADD, mysqlParser.PERIOD_DIFF, mysqlParser.PI, mysqlParser.POINTFROMTEXT, mysqlParser.POINTFROMWKB, mysqlParser.POINTN, mysqlParser.POLYFROMTEXT, mysqlParser.POLYFROMWKB, mysqlParser.POLYGONFROMTEXT, mysqlParser.POLYGONFROMWKB, mysqlParser.POW, mysqlParser.POWER, mysqlParser.QUOTE, mysqlParser.RADIANS, mysqlParser.RAND, mysqlParser.RANDOM_BYTES, mysqlParser.RELEASE_LOCK, mysqlParser.REVERSE, mysqlParser.ROUND, mysqlParser.ROW_COUNT, mysqlParser.RPAD, mysqlParser.RTRIM, mysqlParser.SEC_TO_TIME, mysqlParser.SESSION_USER, mysqlParser.SHA, mysqlParser.SHA1, mysqlParser.SHA2, mysqlParser.SIGN, mysqlParser.SIN, mysqlParser.SLEEP, mysqlParser.SOUNDEX, mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, mysqlParser.SQRT, mysqlParser.SRID, mysqlParser.STARTPOINT, mysqlParser.STRCMP, mysqlParser.STR_TO_DATE, mysqlParser.ST_AREA, mysqlParser.ST_ASBINARY, mysqlParser.ST_ASTEXT, mysqlParser.ST_ASWKB, mysqlParser.ST_ASWKT, mysqlParser.ST_BUFFER, mysqlParser.ST_CENTROID, mysqlParser.ST_CONTAINS, mysqlParser.ST_CROSSES, mysqlParser.ST_DIFFERENCE, mysqlParser.ST_DIMENSION, mysqlParser.ST_DISJOINT, mysqlParser.ST_DISTANCE, mysqlParser.ST_ENDPOINT, mysqlParser.ST_ENVELOPE, mysqlParser.ST_EQUALS, mysqlParser.ST_EXTERIORRING, mysqlParser.ST_GEOMCOLLFROMTEXT, mysqlParser.ST_GEOMCOLLFROMTXT, mysqlParser.ST_GEOMCOLLFROMWKB, mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, mysqlParser.ST_GEOMETRYFROMTEXT, mysqlParser.ST_GEOMETRYFROMWKB, mysqlParser.ST_GEOMETRYN, mysqlParser.ST_GEOMETRYTYPE, mysqlParser.ST_GEOMFROMTEXT, mysqlParser.ST_GEOMFROMWKB, mysqlParser.ST_INTERIORRINGN, mysqlParser.ST_INTERSECTION, mysqlParser.ST_INTERSECTS, mysqlParser.ST_ISCLOSED, mysqlParser.ST_ISEMPTY, mysqlParser.ST_ISSIMPLE, mysqlParser.ST_LINEFROMTEXT, mysqlParser.ST_LINEFROMWKB, mysqlParser.ST_LINESTRINGFROMTEXT, mysqlParser.ST_LINESTRINGFROMWKB, mysqlParser.ST_NUMGEOMETRIES, mysqlParser.ST_NUMINTERIORRING, mysqlParser.ST_NUMINTERIORRINGS, mysqlParser.ST_NUMPOINTS, mysqlParser.ST_OVERLAPS, mysqlParser.ST_POINTFROMTEXT, mysqlParser.ST_POINTFROMWKB, mysqlParser.ST_POINTN, mysqlParser.ST_POLYFROMTEXT, mysqlParser.ST_POLYFROMWKB, mysqlParser.ST_POLYGONFROMTEXT, mysqlParser.ST_POLYGONFROMWKB, mysqlParser.ST_SRID, mysqlParser.ST_STARTPOINT, mysqlParser.ST_SYMDIFFERENCE, mysqlParser.ST_TOUCHES, mysqlParser.ST_UNION, mysqlParser.ST_WITHIN, mysqlParser.ST_X, mysqlParser.ST_Y, mysqlParser.SUBDATE, mysqlParser.SUBSTRING_INDEX, mysqlParser.SUBTIME, mysqlParser.SYSTEM_USER, mysqlParser.TAN, mysqlParser.TIMEDIFF, mysqlParser.TIMESTAMPADD, mysqlParser.TIMESTAMPDIFF, mysqlParser.TIME_FORMAT, mysqlParser.TIME_TO_SEC, mysqlParser.TOUCHES, mysqlParser.TO_BASE64, mysqlParser.TO_DAYS, mysqlParser.TO_SECONDS, mysqlParser.UCASE, mysqlParser.UNCOMPRESS, mysqlParser.UNCOMPRESSED_LENGTH, mysqlParser.UNHEX, mysqlParser.UNIX_TIMESTAMP, mysqlParser.UPDATEXML, mysqlParser.UPPER, mysqlParser.UUID, mysqlParser.UUID_SHORT, mysqlParser.VALIDATE_PASSWORD_STRENGTH, mysqlParser.VERSION, mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, mysqlParser.WEEKDAY, mysqlParser.WEEKOFYEAR, mysqlParser.WEIGHT_STRING, mysqlParser.WITHIN, mysqlParser.YEARWEEK, mysqlParser.Y_FUNCTION, mysqlParser.X_FUNCTION, mysqlParser.PLUS, mysqlParser.MINUS, mysqlParser.EXCLAMATION_SYMBOL, mysqlParser.BIT_NOT_OP, mysqlParser.LR_BRACKET, mysqlParser.ZERO_DECIMAL, mysqlParser.ONE_DECIMAL, mysqlParser.TWO_DECIMAL, mysqlParser.CHARSET_REVERSE_QOUTE_STRING, mysqlParser.START_NATIONAL_STRING_LITERAL, mysqlParser.STRING_LITERAL, mysqlParser.DECIMAL_LITERAL, mysqlParser.HEXADECIMAL_LITERAL, mysqlParser.REAL_LITERAL, mysqlParser.NULL_SPEC_LITERAL, mysqlParser.BIT_STRING, mysqlParser.STRING_CHARSET_NAME, mysqlParser.ID, mysqlParser.REVERSE_QUOTE_ID, mysqlParser.LOCAL_ID, mysqlParser.GLOBAL_ID]:
                self.state = 3287
                self.selectElement()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.COMMA:
                self.state = 3290
                self.match(mysqlParser.COMMA)
                self.state = 3291
                self.selectElement()
                self.state = 3296
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_selectElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SelectExpressionElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)

        def LOCAL_ID(self):
            return self.getToken(mysqlParser.LOCAL_ID, 0)
        def VAR_ASSIGN(self):
            return self.getToken(mysqlParser.VAR_ASSIGN, 0)
        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)

        def AS(self):
            return self.getToken(mysqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectExpressionElement" ):
                listener.enterSelectExpressionElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectExpressionElement" ):
                listener.exitSelectExpressionElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectExpressionElement" ):
                return visitor.visitSelectExpressionElement(self)
            else:
                return visitor.visitChildren(self)


    class SelectFunctionElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(mysqlParser.FunctionCallContext,0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)

        def AS(self):
            return self.getToken(mysqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectFunctionElement" ):
                listener.enterSelectFunctionElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectFunctionElement" ):
                listener.exitSelectFunctionElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectFunctionElement" ):
                return visitor.visitSelectFunctionElement(self)
            else:
                return visitor.visitChildren(self)


    class SelectStarElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullId(self):
            return self.getTypedRuleContext(mysqlParser.FullIdContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectStarElement" ):
                listener.enterSelectStarElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectStarElement" ):
                listener.exitSelectStarElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectStarElement" ):
                return visitor.visitSelectStarElement(self)
            else:
                return visitor.visitChildren(self)


    class SelectColumnElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullColumnName(self):
            return self.getTypedRuleContext(mysqlParser.FullColumnNameContext,0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)

        def AS(self):
            return self.getToken(mysqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectColumnElement" ):
                listener.enterSelectColumnElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectColumnElement" ):
                listener.exitSelectColumnElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectColumnElement" ):
                return visitor.visitSelectColumnElement(self)
            else:
                return visitor.visitChildren(self)



    def selectElement(self):

        localctx = mysqlParser.SelectElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_selectElement)
        self._la = 0 # Token type
        try:
            self.state = 3326
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,474,self._ctx)
            if la_ == 1:
                localctx = mysqlParser.SelectStarElementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3297
                self.fullId()
                self.state = 3298
                self.match(mysqlParser.DOT)
                self.state = 3299
                self.match(mysqlParser.STAR)
                pass

            elif la_ == 2:
                localctx = mysqlParser.SelectColumnElementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3301
                self.fullColumnName()
                self.state = 3306
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,468,self._ctx)
                if la_ == 1:
                    self.state = 3303
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==mysqlParser.AS:
                        self.state = 3302
                        self.match(mysqlParser.AS)


                    self.state = 3305
                    self.uid()


                pass

            elif la_ == 3:
                localctx = mysqlParser.SelectFunctionElementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3308
                self.functionCall()
                self.state = 3313
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,470,self._ctx)
                if la_ == 1:
                    self.state = 3310
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==mysqlParser.AS:
                        self.state = 3309
                        self.match(mysqlParser.AS)


                    self.state = 3312
                    self.uid()


                pass

            elif la_ == 4:
                localctx = mysqlParser.SelectExpressionElementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3317
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,471,self._ctx)
                if la_ == 1:
                    self.state = 3315
                    self.match(mysqlParser.LOCAL_ID)
                    self.state = 3316
                    self.match(mysqlParser.VAR_ASSIGN)


                self.state = 3319
                self.expression(0)
                self.state = 3324
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,473,self._ctx)
                if la_ == 1:
                    self.state = 3321
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==mysqlParser.AS:
                        self.state = 3320
                        self.match(mysqlParser.AS)


                    self.state = 3323
                    self.uid()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectIntoExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_selectIntoExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SelectIntoVariablesContext(SelectIntoExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.SelectIntoExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTO(self):
            return self.getToken(mysqlParser.INTO, 0)
        def assignmentField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.AssignmentFieldContext)
            else:
                return self.getTypedRuleContext(mysqlParser.AssignmentFieldContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectIntoVariables" ):
                listener.enterSelectIntoVariables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectIntoVariables" ):
                listener.exitSelectIntoVariables(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectIntoVariables" ):
                return visitor.visitSelectIntoVariables(self)
            else:
                return visitor.visitChildren(self)


    class SelectIntoTextFileContext(SelectIntoExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.SelectIntoExpressionContext
            super().__init__(parser)
            self.filename = None # Token
            self.charset = None # CharsetNameContext
            self.fieldsFormat = None # Token
            self.terminationField = None # Token
            self.enclosion = None # Token
            self.escaping = None # Token
            self.starting = None # Token
            self.terminationLine = None # Token
            self.copyFrom(ctx)

        def INTO(self):
            return self.getToken(mysqlParser.INTO, 0)
        def OUTFILE(self):
            return self.getToken(mysqlParser.OUTFILE, 0)
        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.STRING_LITERAL)
            else:
                return self.getToken(mysqlParser.STRING_LITERAL, i)
        def CHARACTER(self):
            return self.getToken(mysqlParser.CHARACTER, 0)
        def SET(self):
            return self.getToken(mysqlParser.SET, 0)
        def LINES(self):
            return self.getToken(mysqlParser.LINES, 0)
        def charsetName(self):
            return self.getTypedRuleContext(mysqlParser.CharsetNameContext,0)

        def FIELDS(self):
            return self.getToken(mysqlParser.FIELDS, 0)
        def COLUMNS(self):
            return self.getToken(mysqlParser.COLUMNS, 0)
        def TERMINATED(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.TERMINATED)
            else:
                return self.getToken(mysqlParser.TERMINATED, i)
        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.BY)
            else:
                return self.getToken(mysqlParser.BY, i)
        def ENCLOSED(self):
            return self.getToken(mysqlParser.ENCLOSED, 0)
        def ESCAPED(self):
            return self.getToken(mysqlParser.ESCAPED, 0)
        def STARTING(self):
            return self.getToken(mysqlParser.STARTING, 0)
        def OPTIONALLY(self):
            return self.getToken(mysqlParser.OPTIONALLY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectIntoTextFile" ):
                listener.enterSelectIntoTextFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectIntoTextFile" ):
                listener.exitSelectIntoTextFile(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectIntoTextFile" ):
                return visitor.visitSelectIntoTextFile(self)
            else:
                return visitor.visitChildren(self)


    class SelectIntoDumpFileContext(SelectIntoExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.SelectIntoExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTO(self):
            return self.getToken(mysqlParser.INTO, 0)
        def DUMPFILE(self):
            return self.getToken(mysqlParser.DUMPFILE, 0)
        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectIntoDumpFile" ):
                listener.enterSelectIntoDumpFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectIntoDumpFile" ):
                listener.exitSelectIntoDumpFile(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectIntoDumpFile" ):
                return visitor.visitSelectIntoDumpFile(self)
            else:
                return visitor.visitChildren(self)



    def selectIntoExpression(self):

        localctx = mysqlParser.SelectIntoExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_selectIntoExpression)
        self._la = 0 # Token type
        try:
            self.state = 3382
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,485,self._ctx)
            if la_ == 1:
                localctx = mysqlParser.SelectIntoVariablesContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3328
                self.match(mysqlParser.INTO)
                self.state = 3329
                self.assignmentField()
                self.state = 3334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.COMMA:
                    self.state = 3330
                    self.match(mysqlParser.COMMA)
                    self.state = 3331
                    self.assignmentField()
                    self.state = 3336
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = mysqlParser.SelectIntoDumpFileContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3337
                self.match(mysqlParser.INTO)
                self.state = 3338
                self.match(mysqlParser.DUMPFILE)
                self.state = 3339
                self.match(mysqlParser.STRING_LITERAL)
                pass

            elif la_ == 3:
                localctx = mysqlParser.SelectIntoTextFileContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3340
                self.match(mysqlParser.INTO)
                self.state = 3341
                self.match(mysqlParser.OUTFILE)
                self.state = 3342
                localctx.filename = self.match(mysqlParser.STRING_LITERAL)
                self.state = 3346
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.CHARACTER:
                    self.state = 3343
                    self.match(mysqlParser.CHARACTER)
                    self.state = 3344
                    self.match(mysqlParser.SET)
                    self.state = 3345
                    localctx.charset = self.charsetName()


                self.state = 3367
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,481,self._ctx)
                if la_ == 1:
                    self.state = 3348
                    localctx.fieldsFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==mysqlParser.COLUMNS or _la==mysqlParser.FIELDS):
                        localctx.fieldsFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3352
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==mysqlParser.TERMINATED:
                        self.state = 3349
                        self.match(mysqlParser.TERMINATED)
                        self.state = 3350
                        self.match(mysqlParser.BY)
                        self.state = 3351
                        localctx.terminationField = self.match(mysqlParser.STRING_LITERAL)


                    self.state = 3360
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==mysqlParser.ENCLOSED or _la==mysqlParser.OPTIONALLY:
                        self.state = 3355
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==mysqlParser.OPTIONALLY:
                            self.state = 3354
                            self.match(mysqlParser.OPTIONALLY)


                        self.state = 3357
                        self.match(mysqlParser.ENCLOSED)
                        self.state = 3358
                        self.match(mysqlParser.BY)
                        self.state = 3359
                        localctx.enclosion = self.match(mysqlParser.STRING_LITERAL)


                    self.state = 3365
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==mysqlParser.ESCAPED:
                        self.state = 3362
                        self.match(mysqlParser.ESCAPED)
                        self.state = 3363
                        self.match(mysqlParser.BY)
                        self.state = 3364
                        localctx.escaping = self.match(mysqlParser.STRING_LITERAL)




                self.state = 3380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.LINES:
                    self.state = 3369
                    self.match(mysqlParser.LINES)
                    self.state = 3373
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==mysqlParser.STARTING:
                        self.state = 3370
                        self.match(mysqlParser.STARTING)
                        self.state = 3371
                        self.match(mysqlParser.BY)
                        self.state = 3372
                        localctx.starting = self.match(mysqlParser.STRING_LITERAL)


                    self.state = 3378
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==mysqlParser.TERMINATED:
                        self.state = 3375
                        self.match(mysqlParser.TERMINATED)
                        self.state = 3376
                        self.match(mysqlParser.BY)
                        self.state = 3377
                        localctx.terminationLine = self.match(mysqlParser.STRING_LITERAL)




                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FromClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(mysqlParser.FROM, 0)

        def tableSources(self):
            return self.getTypedRuleContext(mysqlParser.TableSourcesContext,0)


        def WHERE(self):
            return self.getToken(mysqlParser.WHERE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.ExpressionContext,i)


        def GROUP(self):
            return self.getToken(mysqlParser.GROUP, 0)

        def BY(self):
            return self.getToken(mysqlParser.BY, 0)

        def groupByItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.GroupByItemContext)
            else:
                return self.getTypedRuleContext(mysqlParser.GroupByItemContext,i)


        def HAVING(self):
            return self.getToken(mysqlParser.HAVING, 0)

        def WITH(self):
            return self.getToken(mysqlParser.WITH, 0)

        def ROLLUP(self):
            return self.getToken(mysqlParser.ROLLUP, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_fromClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromClause" ):
                listener.enterFromClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromClause" ):
                listener.exitFromClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFromClause" ):
                return visitor.visitFromClause(self)
            else:
                return visitor.visitChildren(self)




    def fromClause(self):

        localctx = mysqlParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_fromClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3384
            self.match(mysqlParser.FROM)
            self.state = 3385
            self.tableSources()
            self.state = 3388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.WHERE:
                self.state = 3386
                self.match(mysqlParser.WHERE)
                self.state = 3387
                self.expression(0)


            self.state = 3404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.GROUP:
                self.state = 3390
                self.match(mysqlParser.GROUP)
                self.state = 3391
                self.match(mysqlParser.BY)
                self.state = 3392
                self.groupByItem()
                self.state = 3397
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.COMMA:
                    self.state = 3393
                    self.match(mysqlParser.COMMA)
                    self.state = 3394
                    self.groupByItem()
                    self.state = 3399
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3402
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,488,self._ctx)
                if la_ == 1:
                    self.state = 3400
                    self.match(mysqlParser.WITH)
                    self.state = 3401
                    self.match(mysqlParser.ROLLUP)




            self.state = 3408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.HAVING:
                self.state = 3406
                self.match(mysqlParser.HAVING)
                self.state = 3407
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GroupByItemContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(mysqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(mysqlParser.DESC, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_groupByItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupByItem" ):
                listener.enterGroupByItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupByItem" ):
                listener.exitGroupByItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupByItem" ):
                return visitor.visitGroupByItem(self)
            else:
                return visitor.visitChildren(self)




    def groupByItem(self):

        localctx = mysqlParser.GroupByItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_groupByItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3410
            self.expression(0)
            self.state = 3412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.ASC or _la==mysqlParser.DESC:
                self.state = 3411
                _la = self._input.LA(1)
                if not(_la==mysqlParser.ASC or _la==mysqlParser.DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LimitClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.offset = None # DecimalLiteralContext
            self.limit = None # DecimalLiteralContext

        def LIMIT(self):
            return self.getToken(mysqlParser.LIMIT, 0)

        def OFFSET(self):
            return self.getToken(mysqlParser.OFFSET, 0)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_limitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitClause" ):
                listener.enterLimitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitClause" ):
                listener.exitLimitClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimitClause" ):
                return visitor.visitLimitClause(self)
            else:
                return visitor.visitChildren(self)




    def limitClause(self):

        localctx = mysqlParser.LimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_limitClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3414
            self.match(mysqlParser.LIMIT)
            self.state = 3425
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,493,self._ctx)
            if la_ == 1:
                self.state = 3418
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,492,self._ctx)
                if la_ == 1:
                    self.state = 3415
                    localctx.offset = self.decimalLiteral()
                    self.state = 3416
                    self.match(mysqlParser.COMMA)


                self.state = 3420
                localctx.limit = self.decimalLiteral()
                pass

            elif la_ == 2:
                self.state = 3421
                localctx.limit = self.decimalLiteral()
                self.state = 3422
                self.match(mysqlParser.OFFSET)
                self.state = 3423
                localctx.offset = self.decimalLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StartTransactionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(mysqlParser.START, 0)

        def TRANSACTION(self):
            return self.getToken(mysqlParser.TRANSACTION, 0)

        def transactionMode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.TransactionModeContext)
            else:
                return self.getTypedRuleContext(mysqlParser.TransactionModeContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_startTransaction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartTransaction" ):
                listener.enterStartTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartTransaction" ):
                listener.exitStartTransaction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartTransaction" ):
                return visitor.visitStartTransaction(self)
            else:
                return visitor.visitChildren(self)




    def startTransaction(self):

        localctx = mysqlParser.StartTransactionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_startTransaction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3427
            self.match(mysqlParser.START)
            self.state = 3428
            self.match(mysqlParser.TRANSACTION)
            self.state = 3437
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.READ or _la==mysqlParser.WITH:
                self.state = 3429
                self.transactionMode()
                self.state = 3434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.COMMA:
                    self.state = 3430
                    self.match(mysqlParser.COMMA)
                    self.state = 3431
                    self.transactionMode()
                    self.state = 3436
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BeginWorkContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(mysqlParser.BEGIN, 0)

        def WORK(self):
            return self.getToken(mysqlParser.WORK, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_beginWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBeginWork" ):
                listener.enterBeginWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBeginWork" ):
                listener.exitBeginWork(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBeginWork" ):
                return visitor.visitBeginWork(self)
            else:
                return visitor.visitChildren(self)




    def beginWork(self):

        localctx = mysqlParser.BeginWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_beginWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3439
            self.match(mysqlParser.BEGIN)
            self.state = 3441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.WORK:
                self.state = 3440
                self.match(mysqlParser.WORK)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CommitWorkContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMIT(self):
            return self.getToken(mysqlParser.COMMIT, 0)

        def WORK(self):
            return self.getToken(mysqlParser.WORK, 0)

        def AND(self):
            return self.getToken(mysqlParser.AND, 0)

        def CHAIN(self):
            return self.getToken(mysqlParser.CHAIN, 0)

        def RELEASE(self):
            return self.getToken(mysqlParser.RELEASE, 0)

        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.NO)
            else:
                return self.getToken(mysqlParser.NO, i)

        def getRuleIndex(self):
            return mysqlParser.RULE_commitWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommitWork" ):
                listener.enterCommitWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommitWork" ):
                listener.exitCommitWork(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommitWork" ):
                return visitor.visitCommitWork(self)
            else:
                return visitor.visitChildren(self)




    def commitWork(self):

        localctx = mysqlParser.CommitWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_commitWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3443
            self.match(mysqlParser.COMMIT)
            self.state = 3445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.WORK:
                self.state = 3444
                self.match(mysqlParser.WORK)


            self.state = 3452
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.AND:
                self.state = 3447
                self.match(mysqlParser.AND)
                self.state = 3449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.NO:
                    self.state = 3448
                    self.match(mysqlParser.NO)


                self.state = 3451
                self.match(mysqlParser.CHAIN)


            self.state = 3458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.RELEASE or _la==mysqlParser.NO:
                self.state = 3455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.NO:
                    self.state = 3454
                    self.match(mysqlParser.NO)


                self.state = 3457
                self.match(mysqlParser.RELEASE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RollbackWorkContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLBACK(self):
            return self.getToken(mysqlParser.ROLLBACK, 0)

        def WORK(self):
            return self.getToken(mysqlParser.WORK, 0)

        def AND(self):
            return self.getToken(mysqlParser.AND, 0)

        def CHAIN(self):
            return self.getToken(mysqlParser.CHAIN, 0)

        def RELEASE(self):
            return self.getToken(mysqlParser.RELEASE, 0)

        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.NO)
            else:
                return self.getToken(mysqlParser.NO, i)

        def getRuleIndex(self):
            return mysqlParser.RULE_rollbackWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollbackWork" ):
                listener.enterRollbackWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollbackWork" ):
                listener.exitRollbackWork(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRollbackWork" ):
                return visitor.visitRollbackWork(self)
            else:
                return visitor.visitChildren(self)




    def rollbackWork(self):

        localctx = mysqlParser.RollbackWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_rollbackWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3460
            self.match(mysqlParser.ROLLBACK)
            self.state = 3462
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.WORK:
                self.state = 3461
                self.match(mysqlParser.WORK)


            self.state = 3469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.AND:
                self.state = 3464
                self.match(mysqlParser.AND)
                self.state = 3466
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.NO:
                    self.state = 3465
                    self.match(mysqlParser.NO)


                self.state = 3468
                self.match(mysqlParser.CHAIN)


            self.state = 3475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.RELEASE or _la==mysqlParser.NO:
                self.state = 3472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.NO:
                    self.state = 3471
                    self.match(mysqlParser.NO)


                self.state = 3474
                self.match(mysqlParser.RELEASE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SavepointStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAVEPOINT(self):
            return self.getToken(mysqlParser.SAVEPOINT, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_savepointStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepointStatement" ):
                listener.enterSavepointStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepointStatement" ):
                listener.exitSavepointStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSavepointStatement" ):
                return visitor.visitSavepointStatement(self)
            else:
                return visitor.visitChildren(self)




    def savepointStatement(self):

        localctx = mysqlParser.SavepointStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_savepointStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3477
            self.match(mysqlParser.SAVEPOINT)
            self.state = 3478
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RollbackStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLBACK(self):
            return self.getToken(mysqlParser.ROLLBACK, 0)

        def TO(self):
            return self.getToken(mysqlParser.TO, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def WORK(self):
            return self.getToken(mysqlParser.WORK, 0)

        def SAVEPOINT(self):
            return self.getToken(mysqlParser.SAVEPOINT, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_rollbackStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollbackStatement" ):
                listener.enterRollbackStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollbackStatement" ):
                listener.exitRollbackStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRollbackStatement" ):
                return visitor.visitRollbackStatement(self)
            else:
                return visitor.visitChildren(self)




    def rollbackStatement(self):

        localctx = mysqlParser.RollbackStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_rollbackStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3480
            self.match(mysqlParser.ROLLBACK)
            self.state = 3482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.WORK:
                self.state = 3481
                self.match(mysqlParser.WORK)


            self.state = 3484
            self.match(mysqlParser.TO)
            self.state = 3486
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,508,self._ctx)
            if la_ == 1:
                self.state = 3485
                self.match(mysqlParser.SAVEPOINT)


            self.state = 3488
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReleaseStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RELEASE(self):
            return self.getToken(mysqlParser.RELEASE, 0)

        def SAVEPOINT(self):
            return self.getToken(mysqlParser.SAVEPOINT, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_releaseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReleaseStatement" ):
                listener.enterReleaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReleaseStatement" ):
                listener.exitReleaseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReleaseStatement" ):
                return visitor.visitReleaseStatement(self)
            else:
                return visitor.visitChildren(self)




    def releaseStatement(self):

        localctx = mysqlParser.ReleaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_releaseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3490
            self.match(mysqlParser.RELEASE)
            self.state = 3491
            self.match(mysqlParser.SAVEPOINT)
            self.state = 3492
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LockTablesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCK(self):
            return self.getToken(mysqlParser.LOCK, 0)

        def TABLES(self):
            return self.getToken(mysqlParser.TABLES, 0)

        def lockTableElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.LockTableElementContext)
            else:
                return self.getTypedRuleContext(mysqlParser.LockTableElementContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_lockTables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockTables" ):
                listener.enterLockTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockTables" ):
                listener.exitLockTables(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLockTables" ):
                return visitor.visitLockTables(self)
            else:
                return visitor.visitChildren(self)




    def lockTables(self):

        localctx = mysqlParser.LockTablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_lockTables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3494
            self.match(mysqlParser.LOCK)
            self.state = 3495
            self.match(mysqlParser.TABLES)
            self.state = 3496
            self.lockTableElement()
            self.state = 3501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.COMMA:
                self.state = 3497
                self.match(mysqlParser.COMMA)
                self.state = 3498
                self.lockTableElement()
                self.state = 3503
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnlockTablesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNLOCK(self):
            return self.getToken(mysqlParser.UNLOCK, 0)

        def TABLES(self):
            return self.getToken(mysqlParser.TABLES, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_unlockTables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnlockTables" ):
                listener.enterUnlockTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnlockTables" ):
                listener.exitUnlockTables(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnlockTables" ):
                return visitor.visitUnlockTables(self)
            else:
                return visitor.visitChildren(self)




    def unlockTables(self):

        localctx = mysqlParser.UnlockTablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_unlockTables)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3504
            self.match(mysqlParser.UNLOCK)
            self.state = 3505
            self.match(mysqlParser.TABLES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetAutocommitStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.autocommitValue = None # Token

        def SET(self):
            return self.getToken(mysqlParser.SET, 0)

        def AUTOCOMMIT(self):
            return self.getToken(mysqlParser.AUTOCOMMIT, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_setAutocommitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetAutocommitStatement" ):
                listener.enterSetAutocommitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetAutocommitStatement" ):
                listener.exitSetAutocommitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetAutocommitStatement" ):
                return visitor.visitSetAutocommitStatement(self)
            else:
                return visitor.visitChildren(self)




    def setAutocommitStatement(self):

        localctx = mysqlParser.SetAutocommitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_setAutocommitStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3507
            self.match(mysqlParser.SET)
            self.state = 3508
            self.match(mysqlParser.AUTOCOMMIT)
            self.state = 3509
            self.match(mysqlParser.EQUAL_SYMBOL)
            self.state = 3510
            localctx.autocommitValue = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==mysqlParser.ZERO_DECIMAL or _la==mysqlParser.ONE_DECIMAL):
                localctx.autocommitValue = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetTransactionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.transactionContext = None # Token

        def SET(self):
            return self.getToken(mysqlParser.SET, 0)

        def TRANSACTION(self):
            return self.getToken(mysqlParser.TRANSACTION, 0)

        def transactionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.TransactionOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.TransactionOptionContext,i)


        def GLOBAL(self):
            return self.getToken(mysqlParser.GLOBAL, 0)

        def SESSION(self):
            return self.getToken(mysqlParser.SESSION, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_setTransactionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTransactionStatement" ):
                listener.enterSetTransactionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTransactionStatement" ):
                listener.exitSetTransactionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTransactionStatement" ):
                return visitor.visitSetTransactionStatement(self)
            else:
                return visitor.visitChildren(self)




    def setTransactionStatement(self):

        localctx = mysqlParser.SetTransactionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_setTransactionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3512
            self.match(mysqlParser.SET)
            self.state = 3514
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.GLOBAL or _la==mysqlParser.SESSION:
                self.state = 3513
                localctx.transactionContext = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.GLOBAL or _la==mysqlParser.SESSION):
                    localctx.transactionContext = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3516
            self.match(mysqlParser.TRANSACTION)
            self.state = 3517
            self.transactionOption()
            self.state = 3522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.COMMA:
                self.state = 3518
                self.match(mysqlParser.COMMA)
                self.state = 3519
                self.transactionOption()
                self.state = 3524
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TransactionModeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(mysqlParser.WITH, 0)

        def CONSISTENT(self):
            return self.getToken(mysqlParser.CONSISTENT, 0)

        def SNAPSHOT(self):
            return self.getToken(mysqlParser.SNAPSHOT, 0)

        def READ(self):
            return self.getToken(mysqlParser.READ, 0)

        def WRITE(self):
            return self.getToken(mysqlParser.WRITE, 0)

        def ONLY(self):
            return self.getToken(mysqlParser.ONLY, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_transactionMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionMode" ):
                listener.enterTransactionMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionMode" ):
                listener.exitTransactionMode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransactionMode" ):
                return visitor.visitTransactionMode(self)
            else:
                return visitor.visitChildren(self)




    def transactionMode(self):

        localctx = mysqlParser.TransactionModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_transactionMode)
        try:
            self.state = 3532
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,512,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3525
                self.match(mysqlParser.WITH)
                self.state = 3526
                self.match(mysqlParser.CONSISTENT)
                self.state = 3527
                self.match(mysqlParser.SNAPSHOT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3528
                self.match(mysqlParser.READ)
                self.state = 3529
                self.match(mysqlParser.WRITE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3530
                self.match(mysqlParser.READ)
                self.state = 3531
                self.match(mysqlParser.ONLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LockTableElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self):
            return self.getTypedRuleContext(mysqlParser.TableNameContext,0)


        def lockAction(self):
            return self.getTypedRuleContext(mysqlParser.LockActionContext,0)


        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def AS(self):
            return self.getToken(mysqlParser.AS, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_lockTableElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockTableElement" ):
                listener.enterLockTableElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockTableElement" ):
                listener.exitLockTableElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLockTableElement" ):
                return visitor.visitLockTableElement(self)
            else:
                return visitor.visitChildren(self)




    def lockTableElement(self):

        localctx = mysqlParser.LockTableElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_lockTableElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3534
            self.tableName()
            self.state = 3539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.AS or _la==mysqlParser.LEFT or _la==mysqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (mysqlParser.DATE - 180)) | (1 << (mysqlParser.TIME - 180)) | (1 << (mysqlParser.TIMESTAMP - 180)) | (1 << (mysqlParser.DATETIME - 180)) | (1 << (mysqlParser.YEAR - 180)) | (1 << (mysqlParser.TEXT - 180)) | (1 << (mysqlParser.ENUM - 180)) | (1 << (mysqlParser.COUNT - 180)) | (1 << (mysqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (mysqlParser.ACCOUNT - 244)) | (1 << (mysqlParser.ACTION - 244)) | (1 << (mysqlParser.AFTER - 244)) | (1 << (mysqlParser.AGGREGATE - 244)) | (1 << (mysqlParser.ALGORITHM - 244)) | (1 << (mysqlParser.ANY - 244)) | (1 << (mysqlParser.AT - 244)) | (1 << (mysqlParser.AUTHORS - 244)) | (1 << (mysqlParser.AUTOCOMMIT - 244)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (mysqlParser.AUTO_INCREMENT - 244)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 244)) | (1 << (mysqlParser.BEGIN - 244)) | (1 << (mysqlParser.BINLOG - 244)) | (1 << (mysqlParser.BIT - 244)) | (1 << (mysqlParser.BLOCK - 244)) | (1 << (mysqlParser.BTREE - 244)) | (1 << (mysqlParser.CASCADED - 244)) | (1 << (mysqlParser.CHAIN - 244)) | (1 << (mysqlParser.CHANNEL - 244)) | (1 << (mysqlParser.CHECKSUM - 244)) | (1 << (mysqlParser.CIPHER - 244)) | (1 << (mysqlParser.CLIENT - 244)) | (1 << (mysqlParser.COALESCE - 244)) | (1 << (mysqlParser.CODE - 244)) | (1 << (mysqlParser.COLUMNS - 244)) | (1 << (mysqlParser.COLUMN_FORMAT - 244)) | (1 << (mysqlParser.COMMENT - 244)) | (1 << (mysqlParser.COMMIT - 244)) | (1 << (mysqlParser.COMPACT - 244)) | (1 << (mysqlParser.COMPLETION - 244)) | (1 << (mysqlParser.COMPRESSED - 244)) | (1 << (mysqlParser.COMPRESSION - 244)) | (1 << (mysqlParser.CONCURRENT - 244)) | (1 << (mysqlParser.CONNECTION - 244)) | (1 << (mysqlParser.CONSISTENT - 244)) | (1 << (mysqlParser.CONTAINS - 244)) | (1 << (mysqlParser.CONTEXT - 244)) | (1 << (mysqlParser.CONTRIBUTORS - 244)) | (1 << (mysqlParser.COPY - 244)) | (1 << (mysqlParser.CPU - 244)) | (1 << (mysqlParser.DATA - 244)) | (1 << (mysqlParser.DATAFILE - 244)) | (1 << (mysqlParser.DEALLOCATE - 244)) | (1 << (mysqlParser.DEFAULT_AUTH - 244)) | (1 << (mysqlParser.DEFINER - 244)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 244)) | (1 << (mysqlParser.DIRECTORY - 244)) | (1 << (mysqlParser.DISABLE - 244)) | (1 << (mysqlParser.DISCARD - 244)) | (1 << (mysqlParser.DISK - 244)) | (1 << (mysqlParser.DO - 244)) | (1 << (mysqlParser.DUMPFILE - 244)) | (1 << (mysqlParser.DUPLICATE - 244)) | (1 << (mysqlParser.DYNAMIC - 244)) | (1 << (mysqlParser.ENABLE - 244)) | (1 << (mysqlParser.ENCRYPTION - 244)) | (1 << (mysqlParser.ENDS - 244)) | (1 << (mysqlParser.ENGINE - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (mysqlParser.ENGINES - 308)) | (1 << (mysqlParser.ERROR - 308)) | (1 << (mysqlParser.ERRORS - 308)) | (1 << (mysqlParser.ESCAPE - 308)) | (1 << (mysqlParser.EVEN - 308)) | (1 << (mysqlParser.EVENT - 308)) | (1 << (mysqlParser.EVENTS - 308)) | (1 << (mysqlParser.EVERY - 308)) | (1 << (mysqlParser.EXCHANGE - 308)) | (1 << (mysqlParser.EXCLUSIVE - 308)) | (1 << (mysqlParser.EXPIRE - 308)) | (1 << (mysqlParser.EXTENT_SIZE - 308)) | (1 << (mysqlParser.FAULTS - 308)) | (1 << (mysqlParser.FIELDS - 308)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (mysqlParser.FILTER - 308)) | (1 << (mysqlParser.FIRST - 308)) | (1 << (mysqlParser.FIXED - 308)) | (1 << (mysqlParser.FOLLOWS - 308)) | (1 << (mysqlParser.FULL - 308)) | (1 << (mysqlParser.FUNCTION - 308)) | (1 << (mysqlParser.GLOBAL - 308)) | (1 << (mysqlParser.GRANTS - 308)) | (1 << (mysqlParser.GROUP_REPLICATION - 308)) | (1 << (mysqlParser.HASH - 308)) | (1 << (mysqlParser.HOST - 308)) | (1 << (mysqlParser.IDENTIFIED - 308)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (mysqlParser.IMPORT - 308)) | (1 << (mysqlParser.INDEXES - 308)) | (1 << (mysqlParser.INITIAL_SIZE - 308)) | (1 << (mysqlParser.INPLACE - 308)) | (1 << (mysqlParser.INSERT_METHOD - 308)) | (1 << (mysqlParser.INSTANCE - 308)) | (1 << (mysqlParser.INVOKER - 308)) | (1 << (mysqlParser.IO - 308)) | (1 << (mysqlParser.IO_THREAD - 308)) | (1 << (mysqlParser.IPC - 308)) | (1 << (mysqlParser.ISOLATION - 308)) | (1 << (mysqlParser.ISSUER - 308)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (mysqlParser.LANGUAGE - 308)) | (1 << (mysqlParser.LAST - 308)) | (1 << (mysqlParser.LEAVES - 308)) | (1 << (mysqlParser.LESS - 308)) | (1 << (mysqlParser.LEVEL - 308)) | (1 << (mysqlParser.LIST - 308)) | (1 << (mysqlParser.LOCAL - 308)) | (1 << (mysqlParser.LOGFILE - 308)) | (1 << (mysqlParser.LOGS - 308)) | (1 << (mysqlParser.MASTER - 308)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 308)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (mysqlParser.MASTER_DELAY - 372)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (mysqlParser.MASTER_HOST - 372)) | (1 << (mysqlParser.MASTER_LOG_FILE - 372)) | (1 << (mysqlParser.MASTER_LOG_POS - 372)) | (1 << (mysqlParser.MASTER_PASSWORD - 372)) | (1 << (mysqlParser.MASTER_PORT - 372)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (mysqlParser.MASTER_SSL - 372)) | (1 << (mysqlParser.MASTER_SSL_CA - 372)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_CERT - 372)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (mysqlParser.MASTER_SSL_CRL - 372)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_KEY - 372)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 372)) | (1 << (mysqlParser.MASTER_USER - 372)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_ROWS - 372)) | (1 << (mysqlParser.MAX_SIZE - 372)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (mysqlParser.MERGE - 372)) | (1 << (mysqlParser.MID - 372)) | (1 << (mysqlParser.MIGRATE - 372)) | (1 << (mysqlParser.MIN_ROWS - 372)) | (1 << (mysqlParser.MODIFY - 372)) | (1 << (mysqlParser.MUTEX - 372)) | (1 << (mysqlParser.MYSQL - 372)) | (1 << (mysqlParser.NAME - 372)) | (1 << (mysqlParser.NAMES - 372)) | (1 << (mysqlParser.NCHAR - 372)) | (1 << (mysqlParser.NEVER - 372)) | (1 << (mysqlParser.NO - 372)) | (1 << (mysqlParser.NODEGROUP - 372)) | (1 << (mysqlParser.NONE - 372)) | (1 << (mysqlParser.OFFLINE - 372)) | (1 << (mysqlParser.OFFSET - 372)) | (1 << (mysqlParser.OJ - 372)) | (1 << (mysqlParser.OLD_PASSWORD - 372)) | (1 << (mysqlParser.ONE - 372)) | (1 << (mysqlParser.ONLINE - 372)) | (1 << (mysqlParser.ONLY - 372)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 372)) | (1 << (mysqlParser.OPTIONS - 372)) | (1 << (mysqlParser.OWNER - 372)) | (1 << (mysqlParser.PACK_KEYS - 372)) | (1 << (mysqlParser.PAGE - 372)) | (1 << (mysqlParser.PARSER - 372)) | (1 << (mysqlParser.PARTIAL - 372)) | (1 << (mysqlParser.PARTITIONING - 372)) | (1 << (mysqlParser.PARTITIONS - 372)) | (1 << (mysqlParser.PASSWORD - 372)) | (1 << (mysqlParser.PHASE - 372)) | (1 << (mysqlParser.PLUGIN_DIR - 372)) | (1 << (mysqlParser.PLUGINS - 372)) | (1 << (mysqlParser.PORT - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (mysqlParser.PRECEDES - 436)) | (1 << (mysqlParser.PREPARE - 436)) | (1 << (mysqlParser.PRESERVE - 436)) | (1 << (mysqlParser.PREV - 436)) | (1 << (mysqlParser.PROCESSLIST - 436)) | (1 << (mysqlParser.PROFILE - 436)) | (1 << (mysqlParser.PROFILES - 436)) | (1 << (mysqlParser.PROXY - 436)) | (1 << (mysqlParser.QUERY - 436)) | (1 << (mysqlParser.QUICK - 436)) | (1 << (mysqlParser.REBUILD - 436)) | (1 << (mysqlParser.RECOVER - 436)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (mysqlParser.REDUNDANT - 436)) | (1 << (mysqlParser.RELAY_LOG_FILE - 436)) | (1 << (mysqlParser.RELAY_LOG_POS - 436)) | (1 << (mysqlParser.RELAYLOG - 436)) | (1 << (mysqlParser.REMOVE - 436)) | (1 << (mysqlParser.REORGANIZE - 436)) | (1 << (mysqlParser.REPAIR - 436)) | (1 << (mysqlParser.REPLICATE_DO_DB - 436)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATION - 436)) | (1 << (mysqlParser.RESUME - 436)) | (1 << (mysqlParser.RETURNS - 436)) | (1 << (mysqlParser.ROLLBACK - 436)) | (1 << (mysqlParser.ROLLUP - 436)) | (1 << (mysqlParser.ROTATE - 436)) | (1 << (mysqlParser.ROW - 436)) | (1 << (mysqlParser.ROWS - 436)) | (1 << (mysqlParser.ROW_FORMAT - 436)) | (1 << (mysqlParser.SAVEPOINT - 436)) | (1 << (mysqlParser.SCHEDULE - 436)) | (1 << (mysqlParser.SECURITY - 436)) | (1 << (mysqlParser.SERVER - 436)) | (1 << (mysqlParser.SESSION - 436)) | (1 << (mysqlParser.SHARE - 436)) | (1 << (mysqlParser.SHARED - 436)) | (1 << (mysqlParser.SIGNED - 436)) | (1 << (mysqlParser.SIMPLE - 436)) | (1 << (mysqlParser.SLAVE - 436)) | (1 << (mysqlParser.SNAPSHOT - 436)) | (1 << (mysqlParser.SOCKET - 436)) | (1 << (mysqlParser.SOME - 436)) | (1 << (mysqlParser.SOUNDS - 436)) | (1 << (mysqlParser.SOURCE - 436)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (mysqlParser.SQL_CACHE - 436)) | (1 << (mysqlParser.SQL_NO_CACHE - 436)) | (1 << (mysqlParser.SQL_THREAD - 436)) | (1 << (mysqlParser.START - 436)) | (1 << (mysqlParser.STARTS - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (mysqlParser.STATS_AUTO_RECALC - 500)) | (1 << (mysqlParser.STATS_PERSISTENT - 500)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (mysqlParser.STATUS - 500)) | (1 << (mysqlParser.STOP - 500)) | (1 << (mysqlParser.STORAGE - 500)) | (1 << (mysqlParser.STRING - 500)) | (1 << (mysqlParser.SUBJECT - 500)) | (1 << (mysqlParser.SUBPARTITION - 500)) | (1 << (mysqlParser.SUBPARTITIONS - 500)) | (1 << (mysqlParser.SUSPEND - 500)) | (1 << (mysqlParser.SWAPS - 500)) | (1 << (mysqlParser.SWITCHES - 500)) | (1 << (mysqlParser.TABLESPACE - 500)) | (1 << (mysqlParser.TEMPORARY - 500)) | (1 << (mysqlParser.TEMPTABLE - 500)) | (1 << (mysqlParser.THAN - 500)) | (1 << (mysqlParser.TRANSACTION - 500)) | (1 << (mysqlParser.TRUNCATE - 500)) | (1 << (mysqlParser.UNDEFINED - 500)) | (1 << (mysqlParser.UNDOFILE - 500)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (mysqlParser.UNKNOWN - 500)) | (1 << (mysqlParser.UPGRADE - 500)) | (1 << (mysqlParser.USER - 500)) | (1 << (mysqlParser.VALIDATION - 500)) | (1 << (mysqlParser.VALUE - 500)) | (1 << (mysqlParser.VARIABLES - 500)) | (1 << (mysqlParser.VIEW - 500)) | (1 << (mysqlParser.WAIT - 500)) | (1 << (mysqlParser.WARNINGS - 500)) | (1 << (mysqlParser.WITHOUT - 500)) | (1 << (mysqlParser.WORK - 500)) | (1 << (mysqlParser.WRAPPER - 500)) | (1 << (mysqlParser.X509 - 500)) | (1 << (mysqlParser.XA - 500)) | (1 << (mysqlParser.XML - 500)) | (1 << (mysqlParser.QUARTER - 500)) | (1 << (mysqlParser.MONTH - 500)) | (1 << (mysqlParser.DAY - 500)) | (1 << (mysqlParser.HOUR - 500)) | (1 << (mysqlParser.MINUTE - 500)) | (1 << (mysqlParser.WEEK - 500)) | (1 << (mysqlParser.SECOND - 500)) | (1 << (mysqlParser.MICROSECOND - 500)) | (1 << (mysqlParser.TABLES - 500)) | (1 << (mysqlParser.ROUTINE - 500)) | (1 << (mysqlParser.EXECUTE - 500)) | (1 << (mysqlParser.FILE - 500)) | (1 << (mysqlParser.PROCESS - 500)) | (1 << (mysqlParser.RELOAD - 500)) | (1 << (mysqlParser.SHUTDOWN - 500)) | (1 << (mysqlParser.SUPER - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (mysqlParser.PRIVILEGES - 564)) | (1 << (mysqlParser.ARMSCII8 - 564)) | (1 << (mysqlParser.ASCII - 564)) | (1 << (mysqlParser.BIG5 - 564)) | (1 << (mysqlParser.CP1250 - 564)) | (1 << (mysqlParser.CP1251 - 564)) | (1 << (mysqlParser.CP1256 - 564)) | (1 << (mysqlParser.CP1257 - 564)) | (1 << (mysqlParser.CP850 - 564)) | (1 << (mysqlParser.CP852 - 564)) | (1 << (mysqlParser.CP866 - 564)) | (1 << (mysqlParser.CP932 - 564)) | (1 << (mysqlParser.DEC8 - 564)) | (1 << (mysqlParser.EUCJPMS - 564)) | (1 << (mysqlParser.EUCKR - 564)) | (1 << (mysqlParser.GB2312 - 564)) | (1 << (mysqlParser.GBK - 564)) | (1 << (mysqlParser.GEOSTD8 - 564)) | (1 << (mysqlParser.GREEK - 564)) | (1 << (mysqlParser.HEBREW - 564)) | (1 << (mysqlParser.HP8 - 564)) | (1 << (mysqlParser.KEYBCS2 - 564)) | (1 << (mysqlParser.KOI8R - 564)) | (1 << (mysqlParser.KOI8U - 564)) | (1 << (mysqlParser.LATIN1 - 564)) | (1 << (mysqlParser.LATIN2 - 564)) | (1 << (mysqlParser.LATIN5 - 564)) | (1 << (mysqlParser.LATIN7 - 564)) | (1 << (mysqlParser.MACCE - 564)) | (1 << (mysqlParser.MACROMAN - 564)) | (1 << (mysqlParser.SJIS - 564)) | (1 << (mysqlParser.SWE7 - 564)) | (1 << (mysqlParser.TIS620 - 564)) | (1 << (mysqlParser.UCS2 - 564)) | (1 << (mysqlParser.UJIS - 564)) | (1 << (mysqlParser.UTF16 - 564)) | (1 << (mysqlParser.UTF16LE - 564)) | (1 << (mysqlParser.UTF32 - 564)) | (1 << (mysqlParser.UTF8 - 564)) | (1 << (mysqlParser.UTF8MB3 - 564)) | (1 << (mysqlParser.UTF8MB4 - 564)) | (1 << (mysqlParser.ARCHIVE - 564)) | (1 << (mysqlParser.BLACKHOLE - 564)) | (1 << (mysqlParser.CSV - 564)) | (1 << (mysqlParser.FEDERATED - 564)) | (1 << (mysqlParser.INNODB - 564)) | (1 << (mysqlParser.MEMORY - 564)) | (1 << (mysqlParser.MRG_MYISAM - 564)) | (1 << (mysqlParser.MYISAM - 564)) | (1 << (mysqlParser.NDB - 564)) | (1 << (mysqlParser.NDBCLUSTER - 564)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (mysqlParser.REPEATABLE - 564)) | (1 << (mysqlParser.COMMITTED - 564)) | (1 << (mysqlParser.UNCOMMITTED - 564)) | (1 << (mysqlParser.SERIALIZABLE - 564)) | (1 << (mysqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (mysqlParser.LINESTRING - 564)) | (1 << (mysqlParser.MULTILINESTRING - 564)) | (1 << (mysqlParser.MULTIPOINT - 564)) | (1 << (mysqlParser.MULTIPOLYGON - 564)) | (1 << (mysqlParser.POINT - 564)) | (1 << (mysqlParser.POLYGON - 564)) | (1 << (mysqlParser.ABS - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (mysqlParser.ACOS - 628)) | (1 << (mysqlParser.ADDDATE - 628)) | (1 << (mysqlParser.ADDTIME - 628)) | (1 << (mysqlParser.AES_DECRYPT - 628)) | (1 << (mysqlParser.AES_ENCRYPT - 628)) | (1 << (mysqlParser.AREA - 628)) | (1 << (mysqlParser.ASBINARY - 628)) | (1 << (mysqlParser.ASIN - 628)) | (1 << (mysqlParser.ASTEXT - 628)) | (1 << (mysqlParser.ASWKB - 628)) | (1 << (mysqlParser.ASWKT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (mysqlParser.ATAN - 628)) | (1 << (mysqlParser.ATAN2 - 628)) | (1 << (mysqlParser.BENCHMARK - 628)) | (1 << (mysqlParser.BIN - 628)) | (1 << (mysqlParser.BIT_COUNT - 628)) | (1 << (mysqlParser.BIT_LENGTH - 628)) | (1 << (mysqlParser.BUFFER - 628)) | (1 << (mysqlParser.CEIL - 628)) | (1 << (mysqlParser.CEILING - 628)) | (1 << (mysqlParser.CENTROID - 628)) | (1 << (mysqlParser.CHARACTER_LENGTH - 628)) | (1 << (mysqlParser.CHARSET - 628)) | (1 << (mysqlParser.CHAR_LENGTH - 628)) | (1 << (mysqlParser.COERCIBILITY - 628)) | (1 << (mysqlParser.COLLATION - 628)) | (1 << (mysqlParser.COMPRESS - 628)) | (1 << (mysqlParser.CONCAT - 628)) | (1 << (mysqlParser.CONCAT_WS - 628)) | (1 << (mysqlParser.CONNECTION_ID - 628)) | (1 << (mysqlParser.CONV - 628)) | (1 << (mysqlParser.CONVERT_TZ - 628)) | (1 << (mysqlParser.COS - 628)) | (1 << (mysqlParser.COT - 628)) | (1 << (mysqlParser.CRC32 - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (mysqlParser.CREATE_DIGEST - 628)) | (1 << (mysqlParser.CROSSES - 628)) | (1 << (mysqlParser.DATEDIFF - 628)) | (1 << (mysqlParser.DATE_FORMAT - 628)) | (1 << (mysqlParser.DAYNAME - 628)) | (1 << (mysqlParser.DAYOFMONTH - 628)) | (1 << (mysqlParser.DAYOFWEEK - 628)) | (1 << (mysqlParser.DAYOFYEAR - 628)) | (1 << (mysqlParser.DECODE - 628)) | (1 << (mysqlParser.DEGREES - 628)) | (1 << (mysqlParser.DES_DECRYPT - 628)) | (1 << (mysqlParser.DES_ENCRYPT - 628)) | (1 << (mysqlParser.DIMENSION - 628)) | (1 << (mysqlParser.DISJOINT - 628)) | (1 << (mysqlParser.ELT - 628)) | (1 << (mysqlParser.ENCODE - 628)) | (1 << (mysqlParser.ENCRYPT - 628)) | (1 << (mysqlParser.ENDPOINT - 628)) | (1 << (mysqlParser.ENVELOPE - 628)) | (1 << (mysqlParser.EQUALS - 628)) | (1 << (mysqlParser.EXP - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (mysqlParser.EXPORT_SET - 692)) | (1 << (mysqlParser.EXTERIORRING - 692)) | (1 << (mysqlParser.EXTRACTVALUE - 692)) | (1 << (mysqlParser.FIELD - 692)) | (1 << (mysqlParser.FIND_IN_SET - 692)) | (1 << (mysqlParser.FLOOR - 692)) | (1 << (mysqlParser.FORMAT - 692)) | (1 << (mysqlParser.FOUND_ROWS - 692)) | (1 << (mysqlParser.FROM_BASE64 - 692)) | (1 << (mysqlParser.FROM_DAYS - 692)) | (1 << (mysqlParser.FROM_UNIXTIME - 692)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYN - 692)) | (1 << (mysqlParser.GEOMETRYTYPE - 692)) | (1 << (mysqlParser.GEOMFROMTEXT - 692)) | (1 << (mysqlParser.GEOMFROMWKB - 692)) | (1 << (mysqlParser.GET_FORMAT - 692)) | (1 << (mysqlParser.GET_LOCK - 692)) | (1 << (mysqlParser.GLENGTH - 692)) | (1 << (mysqlParser.GREATEST - 692)) | (1 << (mysqlParser.GTID_SUBSET - 692)) | (1 << (mysqlParser.GTID_SUBTRACT - 692)) | (1 << (mysqlParser.HEX - 692)) | (1 << (mysqlParser.IFNULL - 692)) | (1 << (mysqlParser.INET6_ATON - 692)) | (1 << (mysqlParser.INET6_NTOA - 692)) | (1 << (mysqlParser.INET_ATON - 692)) | (1 << (mysqlParser.INET_NTOA - 692)) | (1 << (mysqlParser.INSTR - 692)) | (1 << (mysqlParser.INTERIORRINGN - 692)) | (1 << (mysqlParser.INTERSECTS - 692)) | (1 << (mysqlParser.ISCLOSED - 692)) | (1 << (mysqlParser.ISEMPTY - 692)) | (1 << (mysqlParser.ISNULL - 692)) | (1 << (mysqlParser.ISSIMPLE - 692)) | (1 << (mysqlParser.IS_FREE_LOCK - 692)) | (1 << (mysqlParser.IS_IPV4 - 692)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 692)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 692)) | (1 << (mysqlParser.IS_IPV6 - 692)) | (1 << (mysqlParser.IS_USED_LOCK - 692)) | (1 << (mysqlParser.LAST_INSERT_ID - 692)) | (1 << (mysqlParser.LCASE - 692)) | (1 << (mysqlParser.LEAST - 692)) | (1 << (mysqlParser.LENGTH - 692)) | (1 << (mysqlParser.LINEFROMTEXT - 692)) | (1 << (mysqlParser.LINEFROMWKB - 692)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 692)) | (1 << (mysqlParser.LN - 692)) | (1 << (mysqlParser.LOAD_FILE - 692)) | (1 << (mysqlParser.LOCATE - 692)) | (1 << (mysqlParser.LOG - 692)) | (1 << (mysqlParser.LOG10 - 692)) | (1 << (mysqlParser.LOG2 - 692)) | (1 << (mysqlParser.LOWER - 692)) | (1 << (mysqlParser.LPAD - 692)) | (1 << (mysqlParser.LTRIM - 692)) | (1 << (mysqlParser.MAKEDATE - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (mysqlParser.MAKETIME - 756)) | (1 << (mysqlParser.MAKE_SET - 756)) | (1 << (mysqlParser.MASTER_POS_WAIT - 756)) | (1 << (mysqlParser.MBRCONTAINS - 756)) | (1 << (mysqlParser.MBRDISJOINT - 756)) | (1 << (mysqlParser.MBREQUAL - 756)) | (1 << (mysqlParser.MBRINTERSECTS - 756)) | (1 << (mysqlParser.MBROVERLAPS - 756)) | (1 << (mysqlParser.MBRTOUCHES - 756)) | (1 << (mysqlParser.MBRWITHIN - 756)) | (1 << (mysqlParser.MD5 - 756)) | (1 << (mysqlParser.MLINEFROMTEXT - 756)) | (1 << (mysqlParser.MLINEFROMWKB - 756)) | (1 << (mysqlParser.MONTHNAME - 756)) | (1 << (mysqlParser.MPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MPOINTFROMWKB - 756)) | (1 << (mysqlParser.MPOLYFROMTEXT - 756)) | (1 << (mysqlParser.MPOLYFROMWKB - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (mysqlParser.NAME_CONST - 756)) | (1 << (mysqlParser.NULLIF - 756)) | (1 << (mysqlParser.NUMGEOMETRIES - 756)) | (1 << (mysqlParser.NUMINTERIORRINGS - 756)) | (1 << (mysqlParser.NUMPOINTS - 756)) | (1 << (mysqlParser.OCT - 756)) | (1 << (mysqlParser.OCTET_LENGTH - 756)) | (1 << (mysqlParser.ORD - 756)) | (1 << (mysqlParser.OVERLAPS - 756)) | (1 << (mysqlParser.PERIOD_ADD - 756)) | (1 << (mysqlParser.PERIOD_DIFF - 756)) | (1 << (mysqlParser.PI - 756)) | (1 << (mysqlParser.POINTFROMTEXT - 756)) | (1 << (mysqlParser.POINTFROMWKB - 756)) | (1 << (mysqlParser.POINTN - 756)) | (1 << (mysqlParser.POLYFROMTEXT - 756)) | (1 << (mysqlParser.POLYFROMWKB - 756)) | (1 << (mysqlParser.POLYGONFROMTEXT - 756)) | (1 << (mysqlParser.POLYGONFROMWKB - 756)) | (1 << (mysqlParser.POW - 756)) | (1 << (mysqlParser.POWER - 756)) | (1 << (mysqlParser.QUOTE - 756)) | (1 << (mysqlParser.RADIANS - 756)) | (1 << (mysqlParser.RAND - 756)) | (1 << (mysqlParser.RANDOM_BYTES - 756)) | (1 << (mysqlParser.RELEASE_LOCK - 756)) | (1 << (mysqlParser.REVERSE - 756)) | (1 << (mysqlParser.ROUND - 756)) | (1 << (mysqlParser.ROW_COUNT - 756)) | (1 << (mysqlParser.RPAD - 756)) | (1 << (mysqlParser.RTRIM - 756)) | (1 << (mysqlParser.SEC_TO_TIME - 756)) | (1 << (mysqlParser.SESSION_USER - 756)) | (1 << (mysqlParser.SHA - 756)) | (1 << (mysqlParser.SHA1 - 756)) | (1 << (mysqlParser.SHA2 - 756)) | (1 << (mysqlParser.SIGN - 756)) | (1 << (mysqlParser.SIN - 756)) | (1 << (mysqlParser.SLEEP - 756)) | (1 << (mysqlParser.SOUNDEX - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (mysqlParser.SQRT - 820)) | (1 << (mysqlParser.SRID - 820)) | (1 << (mysqlParser.STARTPOINT - 820)) | (1 << (mysqlParser.STRCMP - 820)) | (1 << (mysqlParser.STR_TO_DATE - 820)) | (1 << (mysqlParser.ST_AREA - 820)) | (1 << (mysqlParser.ST_ASBINARY - 820)) | (1 << (mysqlParser.ST_ASTEXT - 820)) | (1 << (mysqlParser.ST_ASWKB - 820)) | (1 << (mysqlParser.ST_ASWKT - 820)) | (1 << (mysqlParser.ST_BUFFER - 820)) | (1 << (mysqlParser.ST_CENTROID - 820)) | (1 << (mysqlParser.ST_CONTAINS - 820)) | (1 << (mysqlParser.ST_CROSSES - 820)) | (1 << (mysqlParser.ST_DIFFERENCE - 820)) | (1 << (mysqlParser.ST_DIMENSION - 820)) | (1 << (mysqlParser.ST_DISJOINT - 820)) | (1 << (mysqlParser.ST_DISTANCE - 820)) | (1 << (mysqlParser.ST_ENDPOINT - 820)) | (1 << (mysqlParser.ST_ENVELOPE - 820)) | (1 << (mysqlParser.ST_EQUALS - 820)) | (1 << (mysqlParser.ST_EXTERIORRING - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYN - 820)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 820)) | (1 << (mysqlParser.ST_INTERIORRINGN - 820)) | (1 << (mysqlParser.ST_INTERSECTION - 820)) | (1 << (mysqlParser.ST_INTERSECTS - 820)) | (1 << (mysqlParser.ST_ISCLOSED - 820)) | (1 << (mysqlParser.ST_ISEMPTY - 820)) | (1 << (mysqlParser.ST_ISSIMPLE - 820)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINEFROMWKB - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (mysqlParser.ST_NUMPOINTS - 820)) | (1 << (mysqlParser.ST_OVERLAPS - 820)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 820)) | (1 << (mysqlParser.ST_POINTFROMWKB - 820)) | (1 << (mysqlParser.ST_POINTN - 820)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYFROMWKB - 820)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (mysqlParser.ST_SRID - 820)) | (1 << (mysqlParser.ST_STARTPOINT - 820)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (mysqlParser.ST_TOUCHES - 820)) | (1 << (mysqlParser.ST_UNION - 820)) | (1 << (mysqlParser.ST_WITHIN - 820)) | (1 << (mysqlParser.ST_X - 820)) | (1 << (mysqlParser.ST_Y - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (mysqlParser.SUBDATE - 884)) | (1 << (mysqlParser.SUBSTRING_INDEX - 884)) | (1 << (mysqlParser.SUBTIME - 884)) | (1 << (mysqlParser.SYSTEM_USER - 884)) | (1 << (mysqlParser.TAN - 884)) | (1 << (mysqlParser.TIMEDIFF - 884)) | (1 << (mysqlParser.TIMESTAMPADD - 884)) | (1 << (mysqlParser.TIMESTAMPDIFF - 884)) | (1 << (mysqlParser.TIME_FORMAT - 884)) | (1 << (mysqlParser.TIME_TO_SEC - 884)) | (1 << (mysqlParser.TOUCHES - 884)) | (1 << (mysqlParser.TO_BASE64 - 884)) | (1 << (mysqlParser.TO_DAYS - 884)) | (1 << (mysqlParser.TO_SECONDS - 884)) | (1 << (mysqlParser.UCASE - 884)) | (1 << (mysqlParser.UNCOMPRESS - 884)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (mysqlParser.UNHEX - 884)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 884)) | (1 << (mysqlParser.UPDATEXML - 884)) | (1 << (mysqlParser.UPPER - 884)) | (1 << (mysqlParser.UUID - 884)) | (1 << (mysqlParser.UUID_SHORT - 884)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (mysqlParser.VERSION - 884)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (mysqlParser.WEEKDAY - 884)) | (1 << (mysqlParser.WEEKOFYEAR - 884)) | (1 << (mysqlParser.WEIGHT_STRING - 884)) | (1 << (mysqlParser.WITHIN - 884)) | (1 << (mysqlParser.YEARWEEK - 884)) | (1 << (mysqlParser.Y_FUNCTION - 884)) | (1 << (mysqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 954)) & ~0x3f) == 0 and ((1 << (_la - 954)) & ((1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 954)) | (1 << (mysqlParser.ID - 954)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 954)))) != 0):
                self.state = 3536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.AS:
                    self.state = 3535
                    self.match(mysqlParser.AS)


                self.state = 3538
                self.uid()


            self.state = 3541
            self.lockAction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LockActionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(mysqlParser.READ, 0)

        def LOCAL(self):
            return self.getToken(mysqlParser.LOCAL, 0)

        def WRITE(self):
            return self.getToken(mysqlParser.WRITE, 0)

        def LOW_PRIORITY(self):
            return self.getToken(mysqlParser.LOW_PRIORITY, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_lockAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockAction" ):
                listener.enterLockAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockAction" ):
                listener.exitLockAction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLockAction" ):
                return visitor.visitLockAction(self)
            else:
                return visitor.visitChildren(self)




    def lockAction(self):

        localctx = mysqlParser.LockActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_lockAction)
        self._la = 0 # Token type
        try:
            self.state = 3551
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.READ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3543
                self.match(mysqlParser.READ)
                self.state = 3545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.LOCAL:
                    self.state = 3544
                    self.match(mysqlParser.LOCAL)


                pass
            elif token in [mysqlParser.LOW_PRIORITY, mysqlParser.WRITE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3548
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.LOW_PRIORITY:
                    self.state = 3547
                    self.match(mysqlParser.LOW_PRIORITY)


                self.state = 3550
                self.match(mysqlParser.WRITE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TransactionOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISOLATION(self):
            return self.getToken(mysqlParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(mysqlParser.LEVEL, 0)

        def transactionLevel(self):
            return self.getTypedRuleContext(mysqlParser.TransactionLevelContext,0)


        def READ(self):
            return self.getToken(mysqlParser.READ, 0)

        def WRITE(self):
            return self.getToken(mysqlParser.WRITE, 0)

        def ONLY(self):
            return self.getToken(mysqlParser.ONLY, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_transactionOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionOption" ):
                listener.enterTransactionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionOption" ):
                listener.exitTransactionOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransactionOption" ):
                return visitor.visitTransactionOption(self)
            else:
                return visitor.visitChildren(self)




    def transactionOption(self):

        localctx = mysqlParser.TransactionOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_transactionOption)
        try:
            self.state = 3560
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,518,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3553
                self.match(mysqlParser.ISOLATION)
                self.state = 3554
                self.match(mysqlParser.LEVEL)
                self.state = 3555
                self.transactionLevel()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3556
                self.match(mysqlParser.READ)
                self.state = 3557
                self.match(mysqlParser.WRITE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3558
                self.match(mysqlParser.READ)
                self.state = 3559
                self.match(mysqlParser.ONLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TransactionLevelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEATABLE(self):
            return self.getToken(mysqlParser.REPEATABLE, 0)

        def READ(self):
            return self.getToken(mysqlParser.READ, 0)

        def COMMITTED(self):
            return self.getToken(mysqlParser.COMMITTED, 0)

        def UNCOMMITTED(self):
            return self.getToken(mysqlParser.UNCOMMITTED, 0)

        def SERIALIZABLE(self):
            return self.getToken(mysqlParser.SERIALIZABLE, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_transactionLevel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionLevel" ):
                listener.enterTransactionLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionLevel" ):
                listener.exitTransactionLevel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransactionLevel" ):
                return visitor.visitTransactionLevel(self)
            else:
                return visitor.visitChildren(self)




    def transactionLevel(self):

        localctx = mysqlParser.TransactionLevelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_transactionLevel)
        try:
            self.state = 3569
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,519,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3562
                self.match(mysqlParser.REPEATABLE)
                self.state = 3563
                self.match(mysqlParser.READ)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3564
                self.match(mysqlParser.READ)
                self.state = 3565
                self.match(mysqlParser.COMMITTED)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3566
                self.match(mysqlParser.READ)
                self.state = 3567
                self.match(mysqlParser.UNCOMMITTED)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3568
                self.match(mysqlParser.SERIALIZABLE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ChangeMasterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGE(self):
            return self.getToken(mysqlParser.CHANGE, 0)

        def MASTER(self):
            return self.getToken(mysqlParser.MASTER, 0)

        def TO(self):
            return self.getToken(mysqlParser.TO, 0)

        def masterOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.MasterOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.MasterOptionContext,i)


        def channelOption(self):
            return self.getTypedRuleContext(mysqlParser.ChannelOptionContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_changeMaster

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChangeMaster" ):
                listener.enterChangeMaster(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChangeMaster" ):
                listener.exitChangeMaster(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChangeMaster" ):
                return visitor.visitChangeMaster(self)
            else:
                return visitor.visitChildren(self)




    def changeMaster(self):

        localctx = mysqlParser.ChangeMasterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_changeMaster)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3571
            self.match(mysqlParser.CHANGE)
            self.state = 3572
            self.match(mysqlParser.MASTER)
            self.state = 3573
            self.match(mysqlParser.TO)
            self.state = 3574
            self.masterOption()
            self.state = 3579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.COMMA:
                self.state = 3575
                self.match(mysqlParser.COMMA)
                self.state = 3576
                self.masterOption()
                self.state = 3581
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.FOR:
                self.state = 3582
                self.channelOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ChangeReplicationFilterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGE(self):
            return self.getToken(mysqlParser.CHANGE, 0)

        def REPLICATION(self):
            return self.getToken(mysqlParser.REPLICATION, 0)

        def FILTER(self):
            return self.getToken(mysqlParser.FILTER, 0)

        def replicationFilter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.ReplicationFilterContext)
            else:
                return self.getTypedRuleContext(mysqlParser.ReplicationFilterContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_changeReplicationFilter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChangeReplicationFilter" ):
                listener.enterChangeReplicationFilter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChangeReplicationFilter" ):
                listener.exitChangeReplicationFilter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChangeReplicationFilter" ):
                return visitor.visitChangeReplicationFilter(self)
            else:
                return visitor.visitChildren(self)




    def changeReplicationFilter(self):

        localctx = mysqlParser.ChangeReplicationFilterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_changeReplicationFilter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3585
            self.match(mysqlParser.CHANGE)
            self.state = 3586
            self.match(mysqlParser.REPLICATION)
            self.state = 3587
            self.match(mysqlParser.FILTER)
            self.state = 3588
            self.replicationFilter()
            self.state = 3593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.COMMA:
                self.state = 3589
                self.match(mysqlParser.COMMA)
                self.state = 3590
                self.replicationFilter()
                self.state = 3595
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PurgeBinaryLogsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.purgeFormat = None # Token
            self.fileName = None # Token
            self.timeValue = None # Token

        def PURGE(self):
            return self.getToken(mysqlParser.PURGE, 0)

        def LOGS(self):
            return self.getToken(mysqlParser.LOGS, 0)

        def BINARY(self):
            return self.getToken(mysqlParser.BINARY, 0)

        def MASTER(self):
            return self.getToken(mysqlParser.MASTER, 0)

        def TO(self):
            return self.getToken(mysqlParser.TO, 0)

        def BEFORE(self):
            return self.getToken(mysqlParser.BEFORE, 0)

        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_purgeBinaryLogs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPurgeBinaryLogs" ):
                listener.enterPurgeBinaryLogs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPurgeBinaryLogs" ):
                listener.exitPurgeBinaryLogs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPurgeBinaryLogs" ):
                return visitor.visitPurgeBinaryLogs(self)
            else:
                return visitor.visitChildren(self)




    def purgeBinaryLogs(self):

        localctx = mysqlParser.PurgeBinaryLogsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_purgeBinaryLogs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3596
            self.match(mysqlParser.PURGE)
            self.state = 3597
            localctx.purgeFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==mysqlParser.BINARY or _la==mysqlParser.MASTER):
                localctx.purgeFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3598
            self.match(mysqlParser.LOGS)
            self.state = 3603
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.TO]:
                self.state = 3599
                self.match(mysqlParser.TO)
                self.state = 3600
                localctx.fileName = self.match(mysqlParser.STRING_LITERAL)
                pass
            elif token in [mysqlParser.BEFORE]:
                self.state = 3601
                self.match(mysqlParser.BEFORE)
                self.state = 3602
                localctx.timeValue = self.match(mysqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ResetMasterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(mysqlParser.RESET, 0)

        def MASTER(self):
            return self.getToken(mysqlParser.MASTER, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_resetMaster

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetMaster" ):
                listener.enterResetMaster(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetMaster" ):
                listener.exitResetMaster(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResetMaster" ):
                return visitor.visitResetMaster(self)
            else:
                return visitor.visitChildren(self)




    def resetMaster(self):

        localctx = mysqlParser.ResetMasterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_resetMaster)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3605
            self.match(mysqlParser.RESET)
            self.state = 3606
            self.match(mysqlParser.MASTER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ResetSlaveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(mysqlParser.RESET, 0)

        def SLAVE(self):
            return self.getToken(mysqlParser.SLAVE, 0)

        def ALL(self):
            return self.getToken(mysqlParser.ALL, 0)

        def channelOption(self):
            return self.getTypedRuleContext(mysqlParser.ChannelOptionContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_resetSlave

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetSlave" ):
                listener.enterResetSlave(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetSlave" ):
                listener.exitResetSlave(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResetSlave" ):
                return visitor.visitResetSlave(self)
            else:
                return visitor.visitChildren(self)




    def resetSlave(self):

        localctx = mysqlParser.ResetSlaveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_resetSlave)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3608
            self.match(mysqlParser.RESET)
            self.state = 3609
            self.match(mysqlParser.SLAVE)
            self.state = 3611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.ALL:
                self.state = 3610
                self.match(mysqlParser.ALL)


            self.state = 3614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.FOR:
                self.state = 3613
                self.channelOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StartSlaveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(mysqlParser.START, 0)

        def SLAVE(self):
            return self.getToken(mysqlParser.SLAVE, 0)

        def UNTIL(self):
            return self.getToken(mysqlParser.UNTIL, 0)

        def threadType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.ThreadTypeContext)
            else:
                return self.getTypedRuleContext(mysqlParser.ThreadTypeContext,i)


        def untilOption(self):
            return self.getTypedRuleContext(mysqlParser.UntilOptionContext,0)


        def connectionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.ConnectionOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.ConnectionOptionContext,i)


        def channelOption(self):
            return self.getTypedRuleContext(mysqlParser.ChannelOptionContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_startSlave

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartSlave" ):
                listener.enterStartSlave(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartSlave" ):
                listener.exitStartSlave(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartSlave" ):
                return visitor.visitStartSlave(self)
            else:
                return visitor.visitChildren(self)




    def startSlave(self):

        localctx = mysqlParser.StartSlaveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_startSlave)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3616
            self.match(mysqlParser.START)
            self.state = 3617
            self.match(mysqlParser.SLAVE)
            self.state = 3626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.IO_THREAD or _la==mysqlParser.SQL_THREAD:
                self.state = 3618
                self.threadType()
                self.state = 3623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.COMMA:
                    self.state = 3619
                    self.match(mysqlParser.COMMA)
                    self.state = 3620
                    self.threadType()
                    self.state = 3625
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3628
            self.match(mysqlParser.UNTIL)
            self.state = 3630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.MASTER_LOG_FILE or ((((_la - 451)) & ~0x3f) == 0 and ((1 << (_la - 451)) & ((1 << (mysqlParser.RELAY_LOG_FILE - 451)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 451)) | (1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 451)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 451)))) != 0):
                self.state = 3629
                self.untilOption()


            self.state = 3635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.DEFAULT_AUTH or _la==mysqlParser.PASSWORD or _la==mysqlParser.PLUGIN_DIR or _la==mysqlParser.USER:
                self.state = 3632
                self.connectionOption()
                self.state = 3637
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.FOR:
                self.state = 3638
                self.channelOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StopSlaveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STOP(self):
            return self.getToken(mysqlParser.STOP, 0)

        def SLAVE(self):
            return self.getToken(mysqlParser.SLAVE, 0)

        def threadType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.ThreadTypeContext)
            else:
                return self.getTypedRuleContext(mysqlParser.ThreadTypeContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_stopSlave

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStopSlave" ):
                listener.enterStopSlave(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStopSlave" ):
                listener.exitStopSlave(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStopSlave" ):
                return visitor.visitStopSlave(self)
            else:
                return visitor.visitChildren(self)




    def stopSlave(self):

        localctx = mysqlParser.StopSlaveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_stopSlave)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3641
            self.match(mysqlParser.STOP)
            self.state = 3642
            self.match(mysqlParser.SLAVE)
            self.state = 3651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.IO_THREAD or _la==mysqlParser.SQL_THREAD:
                self.state = 3643
                self.threadType()
                self.state = 3648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.COMMA:
                    self.state = 3644
                    self.match(mysqlParser.COMMA)
                    self.state = 3645
                    self.threadType()
                    self.state = 3650
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StartGroupReplicationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(mysqlParser.START, 0)

        def GROUP_REPLICATION(self):
            return self.getToken(mysqlParser.GROUP_REPLICATION, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_startGroupReplication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartGroupReplication" ):
                listener.enterStartGroupReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartGroupReplication" ):
                listener.exitStartGroupReplication(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStartGroupReplication" ):
                return visitor.visitStartGroupReplication(self)
            else:
                return visitor.visitChildren(self)




    def startGroupReplication(self):

        localctx = mysqlParser.StartGroupReplicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_startGroupReplication)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3653
            self.match(mysqlParser.START)
            self.state = 3654
            self.match(mysqlParser.GROUP_REPLICATION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StopGroupReplicationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(mysqlParser.START, 0)

        def GROUP_REPLICATION(self):
            return self.getToken(mysqlParser.GROUP_REPLICATION, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_stopGroupReplication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStopGroupReplication" ):
                listener.enterStopGroupReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStopGroupReplication" ):
                listener.exitStopGroupReplication(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStopGroupReplication" ):
                return visitor.visitStopGroupReplication(self)
            else:
                return visitor.visitChildren(self)




    def stopGroupReplication(self):

        localctx = mysqlParser.StopGroupReplicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_stopGroupReplication)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3656
            self.match(mysqlParser.START)
            self.state = 3657
            self.match(mysqlParser.GROUP_REPLICATION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MasterOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_masterOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MasterStringOptionContext(MasterOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.MasterOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def stringMasterOption(self):
            return self.getTypedRuleContext(mysqlParser.StringMasterOptionContext,0)

        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterStringOption" ):
                listener.enterMasterStringOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterStringOption" ):
                listener.exitMasterStringOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMasterStringOption" ):
                return visitor.visitMasterStringOption(self)
            else:
                return visitor.visitChildren(self)


    class MasterRealOptionContext(MasterOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.MasterOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MASTER_HEARTBEAT_PERIOD(self):
            return self.getToken(mysqlParser.MASTER_HEARTBEAT_PERIOD, 0)
        def REAL_LITERAL(self):
            return self.getToken(mysqlParser.REAL_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterRealOption" ):
                listener.enterMasterRealOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterRealOption" ):
                listener.exitMasterRealOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMasterRealOption" ):
                return visitor.visitMasterRealOption(self)
            else:
                return visitor.visitChildren(self)


    class MasterBoolOptionContext(MasterOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.MasterOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def boolMasterOption(self):
            return self.getTypedRuleContext(mysqlParser.BoolMasterOptionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterBoolOption" ):
                listener.enterMasterBoolOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterBoolOption" ):
                listener.exitMasterBoolOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMasterBoolOption" ):
                return visitor.visitMasterBoolOption(self)
            else:
                return visitor.visitChildren(self)


    class MasterUidListOptionContext(MasterOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.MasterOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IGNORE_SERVER_IDS(self):
            return self.getToken(mysqlParser.IGNORE_SERVER_IDS, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UidContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UidContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterUidListOption" ):
                listener.enterMasterUidListOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterUidListOption" ):
                listener.exitMasterUidListOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMasterUidListOption" ):
                return visitor.visitMasterUidListOption(self)
            else:
                return visitor.visitChildren(self)


    class MasterDecimalOptionContext(MasterOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.MasterOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def decimalMasterOption(self):
            return self.getTypedRuleContext(mysqlParser.DecimalMasterOptionContext,0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterDecimalOption" ):
                listener.enterMasterDecimalOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterDecimalOption" ):
                listener.exitMasterDecimalOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMasterDecimalOption" ):
                return visitor.visitMasterDecimalOption(self)
            else:
                return visitor.visitChildren(self)



    def masterOption(self):

        localctx = mysqlParser.MasterOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_masterOption)
        self._la = 0 # Token type
        try:
            self.state = 3688
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.MASTER_BIND, mysqlParser.MASTER_HOST, mysqlParser.MASTER_LOG_FILE, mysqlParser.MASTER_PASSWORD, mysqlParser.MASTER_SSL_CA, mysqlParser.MASTER_SSL_CAPATH, mysqlParser.MASTER_SSL_CERT, mysqlParser.MASTER_SSL_CIPHER, mysqlParser.MASTER_SSL_CRL, mysqlParser.MASTER_SSL_CRLPATH, mysqlParser.MASTER_SSL_KEY, mysqlParser.MASTER_TLS_VERSION, mysqlParser.MASTER_USER, mysqlParser.RELAY_LOG_FILE]:
                localctx = mysqlParser.MasterStringOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3659
                self.stringMasterOption()
                self.state = 3660
                self.match(mysqlParser.EQUAL_SYMBOL)
                self.state = 3661
                self.match(mysqlParser.STRING_LITERAL)
                pass
            elif token in [mysqlParser.MASTER_CONNECT_RETRY, mysqlParser.MASTER_DELAY, mysqlParser.MASTER_LOG_POS, mysqlParser.MASTER_PORT, mysqlParser.MASTER_RETRY_COUNT, mysqlParser.RELAY_LOG_POS]:
                localctx = mysqlParser.MasterDecimalOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3663
                self.decimalMasterOption()
                self.state = 3664
                self.match(mysqlParser.EQUAL_SYMBOL)
                self.state = 3665
                self.decimalLiteral()
                pass
            elif token in [mysqlParser.MASTER_SSL_VERIFY_SERVER_CERT, mysqlParser.MASTER_AUTO_POSITION, mysqlParser.MASTER_SSL]:
                localctx = mysqlParser.MasterBoolOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3667
                self.boolMasterOption()
                self.state = 3668
                self.match(mysqlParser.EQUAL_SYMBOL)
                self.state = 3669
                _la = self._input.LA(1)
                if not(_la==mysqlParser.ZERO_DECIMAL or _la==mysqlParser.ONE_DECIMAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [mysqlParser.MASTER_HEARTBEAT_PERIOD]:
                localctx = mysqlParser.MasterRealOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3671
                self.match(mysqlParser.MASTER_HEARTBEAT_PERIOD)
                self.state = 3672
                self.match(mysqlParser.EQUAL_SYMBOL)
                self.state = 3673
                self.match(mysqlParser.REAL_LITERAL)
                pass
            elif token in [mysqlParser.IGNORE_SERVER_IDS]:
                localctx = mysqlParser.MasterUidListOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3674
                self.match(mysqlParser.IGNORE_SERVER_IDS)
                self.state = 3675
                self.match(mysqlParser.EQUAL_SYMBOL)
                self.state = 3676
                self.match(mysqlParser.LR_BRACKET)
                self.state = 3685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.LEFT or _la==mysqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (mysqlParser.DATE - 180)) | (1 << (mysqlParser.TIME - 180)) | (1 << (mysqlParser.TIMESTAMP - 180)) | (1 << (mysqlParser.DATETIME - 180)) | (1 << (mysqlParser.YEAR - 180)) | (1 << (mysqlParser.TEXT - 180)) | (1 << (mysqlParser.ENUM - 180)) | (1 << (mysqlParser.COUNT - 180)) | (1 << (mysqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (mysqlParser.ACCOUNT - 244)) | (1 << (mysqlParser.ACTION - 244)) | (1 << (mysqlParser.AFTER - 244)) | (1 << (mysqlParser.AGGREGATE - 244)) | (1 << (mysqlParser.ALGORITHM - 244)) | (1 << (mysqlParser.ANY - 244)) | (1 << (mysqlParser.AT - 244)) | (1 << (mysqlParser.AUTHORS - 244)) | (1 << (mysqlParser.AUTOCOMMIT - 244)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (mysqlParser.AUTO_INCREMENT - 244)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 244)) | (1 << (mysqlParser.BEGIN - 244)) | (1 << (mysqlParser.BINLOG - 244)) | (1 << (mysqlParser.BIT - 244)) | (1 << (mysqlParser.BLOCK - 244)) | (1 << (mysqlParser.BTREE - 244)) | (1 << (mysqlParser.CASCADED - 244)) | (1 << (mysqlParser.CHAIN - 244)) | (1 << (mysqlParser.CHANNEL - 244)) | (1 << (mysqlParser.CHECKSUM - 244)) | (1 << (mysqlParser.CIPHER - 244)) | (1 << (mysqlParser.CLIENT - 244)) | (1 << (mysqlParser.COALESCE - 244)) | (1 << (mysqlParser.CODE - 244)) | (1 << (mysqlParser.COLUMNS - 244)) | (1 << (mysqlParser.COLUMN_FORMAT - 244)) | (1 << (mysqlParser.COMMENT - 244)) | (1 << (mysqlParser.COMMIT - 244)) | (1 << (mysqlParser.COMPACT - 244)) | (1 << (mysqlParser.COMPLETION - 244)) | (1 << (mysqlParser.COMPRESSED - 244)) | (1 << (mysqlParser.COMPRESSION - 244)) | (1 << (mysqlParser.CONCURRENT - 244)) | (1 << (mysqlParser.CONNECTION - 244)) | (1 << (mysqlParser.CONSISTENT - 244)) | (1 << (mysqlParser.CONTAINS - 244)) | (1 << (mysqlParser.CONTEXT - 244)) | (1 << (mysqlParser.CONTRIBUTORS - 244)) | (1 << (mysqlParser.COPY - 244)) | (1 << (mysqlParser.CPU - 244)) | (1 << (mysqlParser.DATA - 244)) | (1 << (mysqlParser.DATAFILE - 244)) | (1 << (mysqlParser.DEALLOCATE - 244)) | (1 << (mysqlParser.DEFAULT_AUTH - 244)) | (1 << (mysqlParser.DEFINER - 244)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 244)) | (1 << (mysqlParser.DIRECTORY - 244)) | (1 << (mysqlParser.DISABLE - 244)) | (1 << (mysqlParser.DISCARD - 244)) | (1 << (mysqlParser.DISK - 244)) | (1 << (mysqlParser.DO - 244)) | (1 << (mysqlParser.DUMPFILE - 244)) | (1 << (mysqlParser.DUPLICATE - 244)) | (1 << (mysqlParser.DYNAMIC - 244)) | (1 << (mysqlParser.ENABLE - 244)) | (1 << (mysqlParser.ENCRYPTION - 244)) | (1 << (mysqlParser.ENDS - 244)) | (1 << (mysqlParser.ENGINE - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (mysqlParser.ENGINES - 308)) | (1 << (mysqlParser.ERROR - 308)) | (1 << (mysqlParser.ERRORS - 308)) | (1 << (mysqlParser.ESCAPE - 308)) | (1 << (mysqlParser.EVEN - 308)) | (1 << (mysqlParser.EVENT - 308)) | (1 << (mysqlParser.EVENTS - 308)) | (1 << (mysqlParser.EVERY - 308)) | (1 << (mysqlParser.EXCHANGE - 308)) | (1 << (mysqlParser.EXCLUSIVE - 308)) | (1 << (mysqlParser.EXPIRE - 308)) | (1 << (mysqlParser.EXTENT_SIZE - 308)) | (1 << (mysqlParser.FAULTS - 308)) | (1 << (mysqlParser.FIELDS - 308)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (mysqlParser.FILTER - 308)) | (1 << (mysqlParser.FIRST - 308)) | (1 << (mysqlParser.FIXED - 308)) | (1 << (mysqlParser.FOLLOWS - 308)) | (1 << (mysqlParser.FULL - 308)) | (1 << (mysqlParser.FUNCTION - 308)) | (1 << (mysqlParser.GLOBAL - 308)) | (1 << (mysqlParser.GRANTS - 308)) | (1 << (mysqlParser.GROUP_REPLICATION - 308)) | (1 << (mysqlParser.HASH - 308)) | (1 << (mysqlParser.HOST - 308)) | (1 << (mysqlParser.IDENTIFIED - 308)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (mysqlParser.IMPORT - 308)) | (1 << (mysqlParser.INDEXES - 308)) | (1 << (mysqlParser.INITIAL_SIZE - 308)) | (1 << (mysqlParser.INPLACE - 308)) | (1 << (mysqlParser.INSERT_METHOD - 308)) | (1 << (mysqlParser.INSTANCE - 308)) | (1 << (mysqlParser.INVOKER - 308)) | (1 << (mysqlParser.IO - 308)) | (1 << (mysqlParser.IO_THREAD - 308)) | (1 << (mysqlParser.IPC - 308)) | (1 << (mysqlParser.ISOLATION - 308)) | (1 << (mysqlParser.ISSUER - 308)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (mysqlParser.LANGUAGE - 308)) | (1 << (mysqlParser.LAST - 308)) | (1 << (mysqlParser.LEAVES - 308)) | (1 << (mysqlParser.LESS - 308)) | (1 << (mysqlParser.LEVEL - 308)) | (1 << (mysqlParser.LIST - 308)) | (1 << (mysqlParser.LOCAL - 308)) | (1 << (mysqlParser.LOGFILE - 308)) | (1 << (mysqlParser.LOGS - 308)) | (1 << (mysqlParser.MASTER - 308)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 308)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (mysqlParser.MASTER_DELAY - 372)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (mysqlParser.MASTER_HOST - 372)) | (1 << (mysqlParser.MASTER_LOG_FILE - 372)) | (1 << (mysqlParser.MASTER_LOG_POS - 372)) | (1 << (mysqlParser.MASTER_PASSWORD - 372)) | (1 << (mysqlParser.MASTER_PORT - 372)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (mysqlParser.MASTER_SSL - 372)) | (1 << (mysqlParser.MASTER_SSL_CA - 372)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_CERT - 372)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (mysqlParser.MASTER_SSL_CRL - 372)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_KEY - 372)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 372)) | (1 << (mysqlParser.MASTER_USER - 372)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_ROWS - 372)) | (1 << (mysqlParser.MAX_SIZE - 372)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (mysqlParser.MERGE - 372)) | (1 << (mysqlParser.MID - 372)) | (1 << (mysqlParser.MIGRATE - 372)) | (1 << (mysqlParser.MIN_ROWS - 372)) | (1 << (mysqlParser.MODIFY - 372)) | (1 << (mysqlParser.MUTEX - 372)) | (1 << (mysqlParser.MYSQL - 372)) | (1 << (mysqlParser.NAME - 372)) | (1 << (mysqlParser.NAMES - 372)) | (1 << (mysqlParser.NCHAR - 372)) | (1 << (mysqlParser.NEVER - 372)) | (1 << (mysqlParser.NO - 372)) | (1 << (mysqlParser.NODEGROUP - 372)) | (1 << (mysqlParser.NONE - 372)) | (1 << (mysqlParser.OFFLINE - 372)) | (1 << (mysqlParser.OFFSET - 372)) | (1 << (mysqlParser.OJ - 372)) | (1 << (mysqlParser.OLD_PASSWORD - 372)) | (1 << (mysqlParser.ONE - 372)) | (1 << (mysqlParser.ONLINE - 372)) | (1 << (mysqlParser.ONLY - 372)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 372)) | (1 << (mysqlParser.OPTIONS - 372)) | (1 << (mysqlParser.OWNER - 372)) | (1 << (mysqlParser.PACK_KEYS - 372)) | (1 << (mysqlParser.PAGE - 372)) | (1 << (mysqlParser.PARSER - 372)) | (1 << (mysqlParser.PARTIAL - 372)) | (1 << (mysqlParser.PARTITIONING - 372)) | (1 << (mysqlParser.PARTITIONS - 372)) | (1 << (mysqlParser.PASSWORD - 372)) | (1 << (mysqlParser.PHASE - 372)) | (1 << (mysqlParser.PLUGIN_DIR - 372)) | (1 << (mysqlParser.PLUGINS - 372)) | (1 << (mysqlParser.PORT - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (mysqlParser.PRECEDES - 436)) | (1 << (mysqlParser.PREPARE - 436)) | (1 << (mysqlParser.PRESERVE - 436)) | (1 << (mysqlParser.PREV - 436)) | (1 << (mysqlParser.PROCESSLIST - 436)) | (1 << (mysqlParser.PROFILE - 436)) | (1 << (mysqlParser.PROFILES - 436)) | (1 << (mysqlParser.PROXY - 436)) | (1 << (mysqlParser.QUERY - 436)) | (1 << (mysqlParser.QUICK - 436)) | (1 << (mysqlParser.REBUILD - 436)) | (1 << (mysqlParser.RECOVER - 436)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (mysqlParser.REDUNDANT - 436)) | (1 << (mysqlParser.RELAY_LOG_FILE - 436)) | (1 << (mysqlParser.RELAY_LOG_POS - 436)) | (1 << (mysqlParser.RELAYLOG - 436)) | (1 << (mysqlParser.REMOVE - 436)) | (1 << (mysqlParser.REORGANIZE - 436)) | (1 << (mysqlParser.REPAIR - 436)) | (1 << (mysqlParser.REPLICATE_DO_DB - 436)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATION - 436)) | (1 << (mysqlParser.RESUME - 436)) | (1 << (mysqlParser.RETURNS - 436)) | (1 << (mysqlParser.ROLLBACK - 436)) | (1 << (mysqlParser.ROLLUP - 436)) | (1 << (mysqlParser.ROTATE - 436)) | (1 << (mysqlParser.ROW - 436)) | (1 << (mysqlParser.ROWS - 436)) | (1 << (mysqlParser.ROW_FORMAT - 436)) | (1 << (mysqlParser.SAVEPOINT - 436)) | (1 << (mysqlParser.SCHEDULE - 436)) | (1 << (mysqlParser.SECURITY - 436)) | (1 << (mysqlParser.SERVER - 436)) | (1 << (mysqlParser.SESSION - 436)) | (1 << (mysqlParser.SHARE - 436)) | (1 << (mysqlParser.SHARED - 436)) | (1 << (mysqlParser.SIGNED - 436)) | (1 << (mysqlParser.SIMPLE - 436)) | (1 << (mysqlParser.SLAVE - 436)) | (1 << (mysqlParser.SNAPSHOT - 436)) | (1 << (mysqlParser.SOCKET - 436)) | (1 << (mysqlParser.SOME - 436)) | (1 << (mysqlParser.SOUNDS - 436)) | (1 << (mysqlParser.SOURCE - 436)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (mysqlParser.SQL_CACHE - 436)) | (1 << (mysqlParser.SQL_NO_CACHE - 436)) | (1 << (mysqlParser.SQL_THREAD - 436)) | (1 << (mysqlParser.START - 436)) | (1 << (mysqlParser.STARTS - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (mysqlParser.STATS_AUTO_RECALC - 500)) | (1 << (mysqlParser.STATS_PERSISTENT - 500)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (mysqlParser.STATUS - 500)) | (1 << (mysqlParser.STOP - 500)) | (1 << (mysqlParser.STORAGE - 500)) | (1 << (mysqlParser.STRING - 500)) | (1 << (mysqlParser.SUBJECT - 500)) | (1 << (mysqlParser.SUBPARTITION - 500)) | (1 << (mysqlParser.SUBPARTITIONS - 500)) | (1 << (mysqlParser.SUSPEND - 500)) | (1 << (mysqlParser.SWAPS - 500)) | (1 << (mysqlParser.SWITCHES - 500)) | (1 << (mysqlParser.TABLESPACE - 500)) | (1 << (mysqlParser.TEMPORARY - 500)) | (1 << (mysqlParser.TEMPTABLE - 500)) | (1 << (mysqlParser.THAN - 500)) | (1 << (mysqlParser.TRANSACTION - 500)) | (1 << (mysqlParser.TRUNCATE - 500)) | (1 << (mysqlParser.UNDEFINED - 500)) | (1 << (mysqlParser.UNDOFILE - 500)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (mysqlParser.UNKNOWN - 500)) | (1 << (mysqlParser.UPGRADE - 500)) | (1 << (mysqlParser.USER - 500)) | (1 << (mysqlParser.VALIDATION - 500)) | (1 << (mysqlParser.VALUE - 500)) | (1 << (mysqlParser.VARIABLES - 500)) | (1 << (mysqlParser.VIEW - 500)) | (1 << (mysqlParser.WAIT - 500)) | (1 << (mysqlParser.WARNINGS - 500)) | (1 << (mysqlParser.WITHOUT - 500)) | (1 << (mysqlParser.WORK - 500)) | (1 << (mysqlParser.WRAPPER - 500)) | (1 << (mysqlParser.X509 - 500)) | (1 << (mysqlParser.XA - 500)) | (1 << (mysqlParser.XML - 500)) | (1 << (mysqlParser.QUARTER - 500)) | (1 << (mysqlParser.MONTH - 500)) | (1 << (mysqlParser.DAY - 500)) | (1 << (mysqlParser.HOUR - 500)) | (1 << (mysqlParser.MINUTE - 500)) | (1 << (mysqlParser.WEEK - 500)) | (1 << (mysqlParser.SECOND - 500)) | (1 << (mysqlParser.MICROSECOND - 500)) | (1 << (mysqlParser.TABLES - 500)) | (1 << (mysqlParser.ROUTINE - 500)) | (1 << (mysqlParser.EXECUTE - 500)) | (1 << (mysqlParser.FILE - 500)) | (1 << (mysqlParser.PROCESS - 500)) | (1 << (mysqlParser.RELOAD - 500)) | (1 << (mysqlParser.SHUTDOWN - 500)) | (1 << (mysqlParser.SUPER - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (mysqlParser.PRIVILEGES - 564)) | (1 << (mysqlParser.ARMSCII8 - 564)) | (1 << (mysqlParser.ASCII - 564)) | (1 << (mysqlParser.BIG5 - 564)) | (1 << (mysqlParser.CP1250 - 564)) | (1 << (mysqlParser.CP1251 - 564)) | (1 << (mysqlParser.CP1256 - 564)) | (1 << (mysqlParser.CP1257 - 564)) | (1 << (mysqlParser.CP850 - 564)) | (1 << (mysqlParser.CP852 - 564)) | (1 << (mysqlParser.CP866 - 564)) | (1 << (mysqlParser.CP932 - 564)) | (1 << (mysqlParser.DEC8 - 564)) | (1 << (mysqlParser.EUCJPMS - 564)) | (1 << (mysqlParser.EUCKR - 564)) | (1 << (mysqlParser.GB2312 - 564)) | (1 << (mysqlParser.GBK - 564)) | (1 << (mysqlParser.GEOSTD8 - 564)) | (1 << (mysqlParser.GREEK - 564)) | (1 << (mysqlParser.HEBREW - 564)) | (1 << (mysqlParser.HP8 - 564)) | (1 << (mysqlParser.KEYBCS2 - 564)) | (1 << (mysqlParser.KOI8R - 564)) | (1 << (mysqlParser.KOI8U - 564)) | (1 << (mysqlParser.LATIN1 - 564)) | (1 << (mysqlParser.LATIN2 - 564)) | (1 << (mysqlParser.LATIN5 - 564)) | (1 << (mysqlParser.LATIN7 - 564)) | (1 << (mysqlParser.MACCE - 564)) | (1 << (mysqlParser.MACROMAN - 564)) | (1 << (mysqlParser.SJIS - 564)) | (1 << (mysqlParser.SWE7 - 564)) | (1 << (mysqlParser.TIS620 - 564)) | (1 << (mysqlParser.UCS2 - 564)) | (1 << (mysqlParser.UJIS - 564)) | (1 << (mysqlParser.UTF16 - 564)) | (1 << (mysqlParser.UTF16LE - 564)) | (1 << (mysqlParser.UTF32 - 564)) | (1 << (mysqlParser.UTF8 - 564)) | (1 << (mysqlParser.UTF8MB3 - 564)) | (1 << (mysqlParser.UTF8MB4 - 564)) | (1 << (mysqlParser.ARCHIVE - 564)) | (1 << (mysqlParser.BLACKHOLE - 564)) | (1 << (mysqlParser.CSV - 564)) | (1 << (mysqlParser.FEDERATED - 564)) | (1 << (mysqlParser.INNODB - 564)) | (1 << (mysqlParser.MEMORY - 564)) | (1 << (mysqlParser.MRG_MYISAM - 564)) | (1 << (mysqlParser.MYISAM - 564)) | (1 << (mysqlParser.NDB - 564)) | (1 << (mysqlParser.NDBCLUSTER - 564)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (mysqlParser.REPEATABLE - 564)) | (1 << (mysqlParser.COMMITTED - 564)) | (1 << (mysqlParser.UNCOMMITTED - 564)) | (1 << (mysqlParser.SERIALIZABLE - 564)) | (1 << (mysqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (mysqlParser.LINESTRING - 564)) | (1 << (mysqlParser.MULTILINESTRING - 564)) | (1 << (mysqlParser.MULTIPOINT - 564)) | (1 << (mysqlParser.MULTIPOLYGON - 564)) | (1 << (mysqlParser.POINT - 564)) | (1 << (mysqlParser.POLYGON - 564)) | (1 << (mysqlParser.ABS - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (mysqlParser.ACOS - 628)) | (1 << (mysqlParser.ADDDATE - 628)) | (1 << (mysqlParser.ADDTIME - 628)) | (1 << (mysqlParser.AES_DECRYPT - 628)) | (1 << (mysqlParser.AES_ENCRYPT - 628)) | (1 << (mysqlParser.AREA - 628)) | (1 << (mysqlParser.ASBINARY - 628)) | (1 << (mysqlParser.ASIN - 628)) | (1 << (mysqlParser.ASTEXT - 628)) | (1 << (mysqlParser.ASWKB - 628)) | (1 << (mysqlParser.ASWKT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (mysqlParser.ATAN - 628)) | (1 << (mysqlParser.ATAN2 - 628)) | (1 << (mysqlParser.BENCHMARK - 628)) | (1 << (mysqlParser.BIN - 628)) | (1 << (mysqlParser.BIT_COUNT - 628)) | (1 << (mysqlParser.BIT_LENGTH - 628)) | (1 << (mysqlParser.BUFFER - 628)) | (1 << (mysqlParser.CEIL - 628)) | (1 << (mysqlParser.CEILING - 628)) | (1 << (mysqlParser.CENTROID - 628)) | (1 << (mysqlParser.CHARACTER_LENGTH - 628)) | (1 << (mysqlParser.CHARSET - 628)) | (1 << (mysqlParser.CHAR_LENGTH - 628)) | (1 << (mysqlParser.COERCIBILITY - 628)) | (1 << (mysqlParser.COLLATION - 628)) | (1 << (mysqlParser.COMPRESS - 628)) | (1 << (mysqlParser.CONCAT - 628)) | (1 << (mysqlParser.CONCAT_WS - 628)) | (1 << (mysqlParser.CONNECTION_ID - 628)) | (1 << (mysqlParser.CONV - 628)) | (1 << (mysqlParser.CONVERT_TZ - 628)) | (1 << (mysqlParser.COS - 628)) | (1 << (mysqlParser.COT - 628)) | (1 << (mysqlParser.CRC32 - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (mysqlParser.CREATE_DIGEST - 628)) | (1 << (mysqlParser.CROSSES - 628)) | (1 << (mysqlParser.DATEDIFF - 628)) | (1 << (mysqlParser.DATE_FORMAT - 628)) | (1 << (mysqlParser.DAYNAME - 628)) | (1 << (mysqlParser.DAYOFMONTH - 628)) | (1 << (mysqlParser.DAYOFWEEK - 628)) | (1 << (mysqlParser.DAYOFYEAR - 628)) | (1 << (mysqlParser.DECODE - 628)) | (1 << (mysqlParser.DEGREES - 628)) | (1 << (mysqlParser.DES_DECRYPT - 628)) | (1 << (mysqlParser.DES_ENCRYPT - 628)) | (1 << (mysqlParser.DIMENSION - 628)) | (1 << (mysqlParser.DISJOINT - 628)) | (1 << (mysqlParser.ELT - 628)) | (1 << (mysqlParser.ENCODE - 628)) | (1 << (mysqlParser.ENCRYPT - 628)) | (1 << (mysqlParser.ENDPOINT - 628)) | (1 << (mysqlParser.ENVELOPE - 628)) | (1 << (mysqlParser.EQUALS - 628)) | (1 << (mysqlParser.EXP - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (mysqlParser.EXPORT_SET - 692)) | (1 << (mysqlParser.EXTERIORRING - 692)) | (1 << (mysqlParser.EXTRACTVALUE - 692)) | (1 << (mysqlParser.FIELD - 692)) | (1 << (mysqlParser.FIND_IN_SET - 692)) | (1 << (mysqlParser.FLOOR - 692)) | (1 << (mysqlParser.FORMAT - 692)) | (1 << (mysqlParser.FOUND_ROWS - 692)) | (1 << (mysqlParser.FROM_BASE64 - 692)) | (1 << (mysqlParser.FROM_DAYS - 692)) | (1 << (mysqlParser.FROM_UNIXTIME - 692)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYN - 692)) | (1 << (mysqlParser.GEOMETRYTYPE - 692)) | (1 << (mysqlParser.GEOMFROMTEXT - 692)) | (1 << (mysqlParser.GEOMFROMWKB - 692)) | (1 << (mysqlParser.GET_FORMAT - 692)) | (1 << (mysqlParser.GET_LOCK - 692)) | (1 << (mysqlParser.GLENGTH - 692)) | (1 << (mysqlParser.GREATEST - 692)) | (1 << (mysqlParser.GTID_SUBSET - 692)) | (1 << (mysqlParser.GTID_SUBTRACT - 692)) | (1 << (mysqlParser.HEX - 692)) | (1 << (mysqlParser.IFNULL - 692)) | (1 << (mysqlParser.INET6_ATON - 692)) | (1 << (mysqlParser.INET6_NTOA - 692)) | (1 << (mysqlParser.INET_ATON - 692)) | (1 << (mysqlParser.INET_NTOA - 692)) | (1 << (mysqlParser.INSTR - 692)) | (1 << (mysqlParser.INTERIORRINGN - 692)) | (1 << (mysqlParser.INTERSECTS - 692)) | (1 << (mysqlParser.ISCLOSED - 692)) | (1 << (mysqlParser.ISEMPTY - 692)) | (1 << (mysqlParser.ISNULL - 692)) | (1 << (mysqlParser.ISSIMPLE - 692)) | (1 << (mysqlParser.IS_FREE_LOCK - 692)) | (1 << (mysqlParser.IS_IPV4 - 692)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 692)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 692)) | (1 << (mysqlParser.IS_IPV6 - 692)) | (1 << (mysqlParser.IS_USED_LOCK - 692)) | (1 << (mysqlParser.LAST_INSERT_ID - 692)) | (1 << (mysqlParser.LCASE - 692)) | (1 << (mysqlParser.LEAST - 692)) | (1 << (mysqlParser.LENGTH - 692)) | (1 << (mysqlParser.LINEFROMTEXT - 692)) | (1 << (mysqlParser.LINEFROMWKB - 692)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 692)) | (1 << (mysqlParser.LN - 692)) | (1 << (mysqlParser.LOAD_FILE - 692)) | (1 << (mysqlParser.LOCATE - 692)) | (1 << (mysqlParser.LOG - 692)) | (1 << (mysqlParser.LOG10 - 692)) | (1 << (mysqlParser.LOG2 - 692)) | (1 << (mysqlParser.LOWER - 692)) | (1 << (mysqlParser.LPAD - 692)) | (1 << (mysqlParser.LTRIM - 692)) | (1 << (mysqlParser.MAKEDATE - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (mysqlParser.MAKETIME - 756)) | (1 << (mysqlParser.MAKE_SET - 756)) | (1 << (mysqlParser.MASTER_POS_WAIT - 756)) | (1 << (mysqlParser.MBRCONTAINS - 756)) | (1 << (mysqlParser.MBRDISJOINT - 756)) | (1 << (mysqlParser.MBREQUAL - 756)) | (1 << (mysqlParser.MBRINTERSECTS - 756)) | (1 << (mysqlParser.MBROVERLAPS - 756)) | (1 << (mysqlParser.MBRTOUCHES - 756)) | (1 << (mysqlParser.MBRWITHIN - 756)) | (1 << (mysqlParser.MD5 - 756)) | (1 << (mysqlParser.MLINEFROMTEXT - 756)) | (1 << (mysqlParser.MLINEFROMWKB - 756)) | (1 << (mysqlParser.MONTHNAME - 756)) | (1 << (mysqlParser.MPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MPOINTFROMWKB - 756)) | (1 << (mysqlParser.MPOLYFROMTEXT - 756)) | (1 << (mysqlParser.MPOLYFROMWKB - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (mysqlParser.NAME_CONST - 756)) | (1 << (mysqlParser.NULLIF - 756)) | (1 << (mysqlParser.NUMGEOMETRIES - 756)) | (1 << (mysqlParser.NUMINTERIORRINGS - 756)) | (1 << (mysqlParser.NUMPOINTS - 756)) | (1 << (mysqlParser.OCT - 756)) | (1 << (mysqlParser.OCTET_LENGTH - 756)) | (1 << (mysqlParser.ORD - 756)) | (1 << (mysqlParser.OVERLAPS - 756)) | (1 << (mysqlParser.PERIOD_ADD - 756)) | (1 << (mysqlParser.PERIOD_DIFF - 756)) | (1 << (mysqlParser.PI - 756)) | (1 << (mysqlParser.POINTFROMTEXT - 756)) | (1 << (mysqlParser.POINTFROMWKB - 756)) | (1 << (mysqlParser.POINTN - 756)) | (1 << (mysqlParser.POLYFROMTEXT - 756)) | (1 << (mysqlParser.POLYFROMWKB - 756)) | (1 << (mysqlParser.POLYGONFROMTEXT - 756)) | (1 << (mysqlParser.POLYGONFROMWKB - 756)) | (1 << (mysqlParser.POW - 756)) | (1 << (mysqlParser.POWER - 756)) | (1 << (mysqlParser.QUOTE - 756)) | (1 << (mysqlParser.RADIANS - 756)) | (1 << (mysqlParser.RAND - 756)) | (1 << (mysqlParser.RANDOM_BYTES - 756)) | (1 << (mysqlParser.RELEASE_LOCK - 756)) | (1 << (mysqlParser.REVERSE - 756)) | (1 << (mysqlParser.ROUND - 756)) | (1 << (mysqlParser.ROW_COUNT - 756)) | (1 << (mysqlParser.RPAD - 756)) | (1 << (mysqlParser.RTRIM - 756)) | (1 << (mysqlParser.SEC_TO_TIME - 756)) | (1 << (mysqlParser.SESSION_USER - 756)) | (1 << (mysqlParser.SHA - 756)) | (1 << (mysqlParser.SHA1 - 756)) | (1 << (mysqlParser.SHA2 - 756)) | (1 << (mysqlParser.SIGN - 756)) | (1 << (mysqlParser.SIN - 756)) | (1 << (mysqlParser.SLEEP - 756)) | (1 << (mysqlParser.SOUNDEX - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (mysqlParser.SQRT - 820)) | (1 << (mysqlParser.SRID - 820)) | (1 << (mysqlParser.STARTPOINT - 820)) | (1 << (mysqlParser.STRCMP - 820)) | (1 << (mysqlParser.STR_TO_DATE - 820)) | (1 << (mysqlParser.ST_AREA - 820)) | (1 << (mysqlParser.ST_ASBINARY - 820)) | (1 << (mysqlParser.ST_ASTEXT - 820)) | (1 << (mysqlParser.ST_ASWKB - 820)) | (1 << (mysqlParser.ST_ASWKT - 820)) | (1 << (mysqlParser.ST_BUFFER - 820)) | (1 << (mysqlParser.ST_CENTROID - 820)) | (1 << (mysqlParser.ST_CONTAINS - 820)) | (1 << (mysqlParser.ST_CROSSES - 820)) | (1 << (mysqlParser.ST_DIFFERENCE - 820)) | (1 << (mysqlParser.ST_DIMENSION - 820)) | (1 << (mysqlParser.ST_DISJOINT - 820)) | (1 << (mysqlParser.ST_DISTANCE - 820)) | (1 << (mysqlParser.ST_ENDPOINT - 820)) | (1 << (mysqlParser.ST_ENVELOPE - 820)) | (1 << (mysqlParser.ST_EQUALS - 820)) | (1 << (mysqlParser.ST_EXTERIORRING - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYN - 820)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 820)) | (1 << (mysqlParser.ST_INTERIORRINGN - 820)) | (1 << (mysqlParser.ST_INTERSECTION - 820)) | (1 << (mysqlParser.ST_INTERSECTS - 820)) | (1 << (mysqlParser.ST_ISCLOSED - 820)) | (1 << (mysqlParser.ST_ISEMPTY - 820)) | (1 << (mysqlParser.ST_ISSIMPLE - 820)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINEFROMWKB - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (mysqlParser.ST_NUMPOINTS - 820)) | (1 << (mysqlParser.ST_OVERLAPS - 820)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 820)) | (1 << (mysqlParser.ST_POINTFROMWKB - 820)) | (1 << (mysqlParser.ST_POINTN - 820)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYFROMWKB - 820)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (mysqlParser.ST_SRID - 820)) | (1 << (mysqlParser.ST_STARTPOINT - 820)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (mysqlParser.ST_TOUCHES - 820)) | (1 << (mysqlParser.ST_UNION - 820)) | (1 << (mysqlParser.ST_WITHIN - 820)) | (1 << (mysqlParser.ST_X - 820)) | (1 << (mysqlParser.ST_Y - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (mysqlParser.SUBDATE - 884)) | (1 << (mysqlParser.SUBSTRING_INDEX - 884)) | (1 << (mysqlParser.SUBTIME - 884)) | (1 << (mysqlParser.SYSTEM_USER - 884)) | (1 << (mysqlParser.TAN - 884)) | (1 << (mysqlParser.TIMEDIFF - 884)) | (1 << (mysqlParser.TIMESTAMPADD - 884)) | (1 << (mysqlParser.TIMESTAMPDIFF - 884)) | (1 << (mysqlParser.TIME_FORMAT - 884)) | (1 << (mysqlParser.TIME_TO_SEC - 884)) | (1 << (mysqlParser.TOUCHES - 884)) | (1 << (mysqlParser.TO_BASE64 - 884)) | (1 << (mysqlParser.TO_DAYS - 884)) | (1 << (mysqlParser.TO_SECONDS - 884)) | (1 << (mysqlParser.UCASE - 884)) | (1 << (mysqlParser.UNCOMPRESS - 884)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (mysqlParser.UNHEX - 884)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 884)) | (1 << (mysqlParser.UPDATEXML - 884)) | (1 << (mysqlParser.UPPER - 884)) | (1 << (mysqlParser.UUID - 884)) | (1 << (mysqlParser.UUID_SHORT - 884)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (mysqlParser.VERSION - 884)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (mysqlParser.WEEKDAY - 884)) | (1 << (mysqlParser.WEEKOFYEAR - 884)) | (1 << (mysqlParser.WEIGHT_STRING - 884)) | (1 << (mysqlParser.WITHIN - 884)) | (1 << (mysqlParser.YEARWEEK - 884)) | (1 << (mysqlParser.Y_FUNCTION - 884)) | (1 << (mysqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 954)) & ~0x3f) == 0 and ((1 << (_la - 954)) & ((1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 954)) | (1 << (mysqlParser.ID - 954)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 954)))) != 0):
                    self.state = 3677
                    self.uid()
                    self.state = 3682
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==mysqlParser.COMMA:
                        self.state = 3678
                        self.match(mysqlParser.COMMA)
                        self.state = 3679
                        self.uid()
                        self.state = 3684
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 3687
                self.match(mysqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringMasterOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MASTER_BIND(self):
            return self.getToken(mysqlParser.MASTER_BIND, 0)

        def MASTER_HOST(self):
            return self.getToken(mysqlParser.MASTER_HOST, 0)

        def MASTER_USER(self):
            return self.getToken(mysqlParser.MASTER_USER, 0)

        def MASTER_PASSWORD(self):
            return self.getToken(mysqlParser.MASTER_PASSWORD, 0)

        def MASTER_LOG_FILE(self):
            return self.getToken(mysqlParser.MASTER_LOG_FILE, 0)

        def RELAY_LOG_FILE(self):
            return self.getToken(mysqlParser.RELAY_LOG_FILE, 0)

        def MASTER_SSL_CA(self):
            return self.getToken(mysqlParser.MASTER_SSL_CA, 0)

        def MASTER_SSL_CAPATH(self):
            return self.getToken(mysqlParser.MASTER_SSL_CAPATH, 0)

        def MASTER_SSL_CERT(self):
            return self.getToken(mysqlParser.MASTER_SSL_CERT, 0)

        def MASTER_SSL_CRL(self):
            return self.getToken(mysqlParser.MASTER_SSL_CRL, 0)

        def MASTER_SSL_CRLPATH(self):
            return self.getToken(mysqlParser.MASTER_SSL_CRLPATH, 0)

        def MASTER_SSL_KEY(self):
            return self.getToken(mysqlParser.MASTER_SSL_KEY, 0)

        def MASTER_SSL_CIPHER(self):
            return self.getToken(mysqlParser.MASTER_SSL_CIPHER, 0)

        def MASTER_TLS_VERSION(self):
            return self.getToken(mysqlParser.MASTER_TLS_VERSION, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_stringMasterOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringMasterOption" ):
                listener.enterStringMasterOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringMasterOption" ):
                listener.exitStringMasterOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringMasterOption" ):
                return visitor.visitStringMasterOption(self)
            else:
                return visitor.visitChildren(self)




    def stringMasterOption(self):

        localctx = mysqlParser.StringMasterOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_stringMasterOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3690
            _la = self._input.LA(1)
            if not(_la==mysqlParser.MASTER_BIND or ((((_la - 374)) & ~0x3f) == 0 and ((1 << (_la - 374)) & ((1 << (mysqlParser.MASTER_HOST - 374)) | (1 << (mysqlParser.MASTER_LOG_FILE - 374)) | (1 << (mysqlParser.MASTER_PASSWORD - 374)) | (1 << (mysqlParser.MASTER_SSL_CA - 374)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 374)) | (1 << (mysqlParser.MASTER_SSL_CERT - 374)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 374)) | (1 << (mysqlParser.MASTER_SSL_CRL - 374)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 374)) | (1 << (mysqlParser.MASTER_SSL_KEY - 374)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 374)) | (1 << (mysqlParser.MASTER_USER - 374)))) != 0) or _la==mysqlParser.RELAY_LOG_FILE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecimalMasterOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MASTER_PORT(self):
            return self.getToken(mysqlParser.MASTER_PORT, 0)

        def MASTER_CONNECT_RETRY(self):
            return self.getToken(mysqlParser.MASTER_CONNECT_RETRY, 0)

        def MASTER_RETRY_COUNT(self):
            return self.getToken(mysqlParser.MASTER_RETRY_COUNT, 0)

        def MASTER_DELAY(self):
            return self.getToken(mysqlParser.MASTER_DELAY, 0)

        def MASTER_LOG_POS(self):
            return self.getToken(mysqlParser.MASTER_LOG_POS, 0)

        def RELAY_LOG_POS(self):
            return self.getToken(mysqlParser.RELAY_LOG_POS, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_decimalMasterOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalMasterOption" ):
                listener.enterDecimalMasterOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalMasterOption" ):
                listener.exitDecimalMasterOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimalMasterOption" ):
                return visitor.visitDecimalMasterOption(self)
            else:
                return visitor.visitChildren(self)




    def decimalMasterOption(self):

        localctx = mysqlParser.DecimalMasterOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_decimalMasterOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3692
            _la = self._input.LA(1)
            if not(((((_la - 371)) & ~0x3f) == 0 and ((1 << (_la - 371)) & ((1 << (mysqlParser.MASTER_CONNECT_RETRY - 371)) | (1 << (mysqlParser.MASTER_DELAY - 371)) | (1 << (mysqlParser.MASTER_LOG_POS - 371)) | (1 << (mysqlParser.MASTER_PORT - 371)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 371)))) != 0) or _la==mysqlParser.RELAY_LOG_POS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BoolMasterOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MASTER_AUTO_POSITION(self):
            return self.getToken(mysqlParser.MASTER_AUTO_POSITION, 0)

        def MASTER_SSL(self):
            return self.getToken(mysqlParser.MASTER_SSL, 0)

        def MASTER_SSL_VERIFY_SERVER_CERT(self):
            return self.getToken(mysqlParser.MASTER_SSL_VERIFY_SERVER_CERT, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_boolMasterOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolMasterOption" ):
                listener.enterBoolMasterOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolMasterOption" ):
                listener.exitBoolMasterOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolMasterOption" ):
                return visitor.visitBoolMasterOption(self)
            else:
                return visitor.visitChildren(self)




    def boolMasterOption(self):

        localctx = mysqlParser.BoolMasterOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_boolMasterOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3694
            _la = self._input.LA(1)
            if not(_la==mysqlParser.MASTER_SSL_VERIFY_SERVER_CERT or _la==mysqlParser.MASTER_AUTO_POSITION or _la==mysqlParser.MASTER_SSL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ChannelOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(mysqlParser.FOR, 0)

        def CHANNEL(self):
            return self.getToken(mysqlParser.CHANNEL, 0)

        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_channelOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChannelOption" ):
                listener.enterChannelOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChannelOption" ):
                listener.exitChannelOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChannelOption" ):
                return visitor.visitChannelOption(self)
            else:
                return visitor.visitChildren(self)




    def channelOption(self):

        localctx = mysqlParser.ChannelOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_channelOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3696
            self.match(mysqlParser.FOR)
            self.state = 3697
            self.match(mysqlParser.CHANNEL)
            self.state = 3698
            self.match(mysqlParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReplicationFilterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_replicationFilter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WildIgnoreTableReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_WILD_IGNORE_TABLE(self):
            return self.getToken(mysqlParser.REPLICATE_WILD_IGNORE_TABLE, 0)
        def simpleStrings(self):
            return self.getTypedRuleContext(mysqlParser.SimpleStringsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildIgnoreTableReplication" ):
                listener.enterWildIgnoreTableReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildIgnoreTableReplication" ):
                listener.exitWildIgnoreTableReplication(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWildIgnoreTableReplication" ):
                return visitor.visitWildIgnoreTableReplication(self)
            else:
                return visitor.visitChildren(self)


    class DoTableReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_DO_TABLE(self):
            return self.getToken(mysqlParser.REPLICATE_DO_TABLE, 0)
        def tables(self):
            return self.getTypedRuleContext(mysqlParser.TablesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoTableReplication" ):
                listener.enterDoTableReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoTableReplication" ):
                listener.exitDoTableReplication(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoTableReplication" ):
                return visitor.visitDoTableReplication(self)
            else:
                return visitor.visitChildren(self)


    class IgnoreTableReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_IGNORE_TABLE(self):
            return self.getToken(mysqlParser.REPLICATE_IGNORE_TABLE, 0)
        def tables(self):
            return self.getTypedRuleContext(mysqlParser.TablesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnoreTableReplication" ):
                listener.enterIgnoreTableReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnoreTableReplication" ):
                listener.exitIgnoreTableReplication(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIgnoreTableReplication" ):
                return visitor.visitIgnoreTableReplication(self)
            else:
                return visitor.visitChildren(self)


    class RewriteDbReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_REWRITE_DB(self):
            return self.getToken(mysqlParser.REPLICATE_REWRITE_DB, 0)
        def tablePairs(self):
            return self.getTypedRuleContext(mysqlParser.TablePairsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRewriteDbReplication" ):
                listener.enterRewriteDbReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRewriteDbReplication" ):
                listener.exitRewriteDbReplication(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRewriteDbReplication" ):
                return visitor.visitRewriteDbReplication(self)
            else:
                return visitor.visitChildren(self)


    class DoDbReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_DO_DB(self):
            return self.getToken(mysqlParser.REPLICATE_DO_DB, 0)
        def uidList(self):
            return self.getTypedRuleContext(mysqlParser.UidListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoDbReplication" ):
                listener.enterDoDbReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoDbReplication" ):
                listener.exitDoDbReplication(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoDbReplication" ):
                return visitor.visitDoDbReplication(self)
            else:
                return visitor.visitChildren(self)


    class IgnoreDbReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_IGNORE_DB(self):
            return self.getToken(mysqlParser.REPLICATE_IGNORE_DB, 0)
        def uidList(self):
            return self.getTypedRuleContext(mysqlParser.UidListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnoreDbReplication" ):
                listener.enterIgnoreDbReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnoreDbReplication" ):
                listener.exitIgnoreDbReplication(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIgnoreDbReplication" ):
                return visitor.visitIgnoreDbReplication(self)
            else:
                return visitor.visitChildren(self)


    class WildDoTableReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_WILD_DO_TABLE(self):
            return self.getToken(mysqlParser.REPLICATE_WILD_DO_TABLE, 0)
        def simpleStrings(self):
            return self.getTypedRuleContext(mysqlParser.SimpleStringsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildDoTableReplication" ):
                listener.enterWildDoTableReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildDoTableReplication" ):
                listener.exitWildDoTableReplication(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWildDoTableReplication" ):
                return visitor.visitWildDoTableReplication(self)
            else:
                return visitor.visitChildren(self)



    def replicationFilter(self):

        localctx = mysqlParser.ReplicationFilterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_replicationFilter)
        try:
            self.state = 3742
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.REPLICATE_DO_DB]:
                localctx = mysqlParser.DoDbReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3700
                self.match(mysqlParser.REPLICATE_DO_DB)
                self.state = 3701
                self.match(mysqlParser.EQUAL_SYMBOL)
                self.state = 3702
                self.match(mysqlParser.LR_BRACKET)
                self.state = 3703
                self.uidList()
                self.state = 3704
                self.match(mysqlParser.RR_BRACKET)
                pass
            elif token in [mysqlParser.REPLICATE_IGNORE_DB]:
                localctx = mysqlParser.IgnoreDbReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3706
                self.match(mysqlParser.REPLICATE_IGNORE_DB)
                self.state = 3707
                self.match(mysqlParser.EQUAL_SYMBOL)
                self.state = 3708
                self.match(mysqlParser.LR_BRACKET)
                self.state = 3709
                self.uidList()
                self.state = 3710
                self.match(mysqlParser.RR_BRACKET)
                pass
            elif token in [mysqlParser.REPLICATE_DO_TABLE]:
                localctx = mysqlParser.DoTableReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3712
                self.match(mysqlParser.REPLICATE_DO_TABLE)
                self.state = 3713
                self.match(mysqlParser.EQUAL_SYMBOL)
                self.state = 3714
                self.match(mysqlParser.LR_BRACKET)
                self.state = 3715
                self.tables()
                self.state = 3716
                self.match(mysqlParser.RR_BRACKET)
                pass
            elif token in [mysqlParser.REPLICATE_IGNORE_TABLE]:
                localctx = mysqlParser.IgnoreTableReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3718
                self.match(mysqlParser.REPLICATE_IGNORE_TABLE)
                self.state = 3719
                self.match(mysqlParser.EQUAL_SYMBOL)
                self.state = 3720
                self.match(mysqlParser.LR_BRACKET)
                self.state = 3721
                self.tables()
                self.state = 3722
                self.match(mysqlParser.RR_BRACKET)
                pass
            elif token in [mysqlParser.REPLICATE_WILD_DO_TABLE]:
                localctx = mysqlParser.WildDoTableReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3724
                self.match(mysqlParser.REPLICATE_WILD_DO_TABLE)
                self.state = 3725
                self.match(mysqlParser.EQUAL_SYMBOL)
                self.state = 3726
                self.match(mysqlParser.LR_BRACKET)
                self.state = 3727
                self.simpleStrings()
                self.state = 3728
                self.match(mysqlParser.RR_BRACKET)
                pass
            elif token in [mysqlParser.REPLICATE_WILD_IGNORE_TABLE]:
                localctx = mysqlParser.WildIgnoreTableReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 3730
                self.match(mysqlParser.REPLICATE_WILD_IGNORE_TABLE)
                self.state = 3731
                self.match(mysqlParser.EQUAL_SYMBOL)
                self.state = 3732
                self.match(mysqlParser.LR_BRACKET)
                self.state = 3733
                self.simpleStrings()
                self.state = 3734
                self.match(mysqlParser.RR_BRACKET)
                pass
            elif token in [mysqlParser.REPLICATE_REWRITE_DB]:
                localctx = mysqlParser.RewriteDbReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 3736
                self.match(mysqlParser.REPLICATE_REWRITE_DB)
                self.state = 3737
                self.match(mysqlParser.EQUAL_SYMBOL)
                self.state = 3738
                self.match(mysqlParser.LR_BRACKET)
                self.state = 3739
                self.tablePairs()
                self.state = 3740
                self.match(mysqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ThreadTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IO_THREAD(self):
            return self.getToken(mysqlParser.IO_THREAD, 0)

        def SQL_THREAD(self):
            return self.getToken(mysqlParser.SQL_THREAD, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_threadType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThreadType" ):
                listener.enterThreadType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThreadType" ):
                listener.exitThreadType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThreadType" ):
                return visitor.visitThreadType(self)
            else:
                return visitor.visitChildren(self)




    def threadType(self):

        localctx = mysqlParser.ThreadTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_threadType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3744
            _la = self._input.LA(1)
            if not(_la==mysqlParser.IO_THREAD or _la==mysqlParser.SQL_THREAD):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UntilOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_untilOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class GtidsUntilOptionContext(UntilOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.UntilOptionContext
            super().__init__(parser)
            self.gtids = None # Token
            self.copyFrom(ctx)

        def gtuidSet(self):
            return self.getTypedRuleContext(mysqlParser.GtuidSetContext,0)

        def SQL_BEFORE_GTIDS(self):
            return self.getToken(mysqlParser.SQL_BEFORE_GTIDS, 0)
        def SQL_AFTER_GTIDS(self):
            return self.getToken(mysqlParser.SQL_AFTER_GTIDS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGtidsUntilOption" ):
                listener.enterGtidsUntilOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGtidsUntilOption" ):
                listener.exitGtidsUntilOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGtidsUntilOption" ):
                return visitor.visitGtidsUntilOption(self)
            else:
                return visitor.visitChildren(self)


    class SqlGapsUntilOptionContext(UntilOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.UntilOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SQL_AFTER_MTS_GAPS(self):
            return self.getToken(mysqlParser.SQL_AFTER_MTS_GAPS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlGapsUntilOption" ):
                listener.enterSqlGapsUntilOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlGapsUntilOption" ):
                listener.exitSqlGapsUntilOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlGapsUntilOption" ):
                return visitor.visitSqlGapsUntilOption(self)
            else:
                return visitor.visitChildren(self)


    class MasterLogUntilOptionContext(UntilOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.UntilOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MASTER_LOG_FILE(self):
            return self.getToken(mysqlParser.MASTER_LOG_FILE, 0)
        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)
        def MASTER_LOG_POS(self):
            return self.getToken(mysqlParser.MASTER_LOG_POS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterLogUntilOption" ):
                listener.enterMasterLogUntilOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterLogUntilOption" ):
                listener.exitMasterLogUntilOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMasterLogUntilOption" ):
                return visitor.visitMasterLogUntilOption(self)
            else:
                return visitor.visitChildren(self)


    class RelayLogUntilOptionContext(UntilOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.UntilOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RELAY_LOG_FILE(self):
            return self.getToken(mysqlParser.RELAY_LOG_FILE, 0)
        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)
        def RELAY_LOG_POS(self):
            return self.getToken(mysqlParser.RELAY_LOG_POS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelayLogUntilOption" ):
                listener.enterRelayLogUntilOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelayLogUntilOption" ):
                listener.exitRelayLogUntilOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelayLogUntilOption" ):
                return visitor.visitRelayLogUntilOption(self)
            else:
                return visitor.visitChildren(self)



    def untilOption(self):

        localctx = mysqlParser.UntilOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_untilOption)
        self._la = 0 # Token type
        try:
            self.state = 3764
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.SQL_AFTER_GTIDS, mysqlParser.SQL_BEFORE_GTIDS]:
                localctx = mysqlParser.GtidsUntilOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3746
                localctx.gtids = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.SQL_AFTER_GTIDS or _la==mysqlParser.SQL_BEFORE_GTIDS):
                    localctx.gtids = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3747
                self.match(mysqlParser.EQUAL_SYMBOL)
                self.state = 3748
                self.gtuidSet()
                pass
            elif token in [mysqlParser.MASTER_LOG_FILE]:
                localctx = mysqlParser.MasterLogUntilOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3749
                self.match(mysqlParser.MASTER_LOG_FILE)
                self.state = 3750
                self.match(mysqlParser.EQUAL_SYMBOL)
                self.state = 3751
                self.match(mysqlParser.STRING_LITERAL)
                self.state = 3752
                self.match(mysqlParser.COMMA)
                self.state = 3753
                self.match(mysqlParser.MASTER_LOG_POS)
                self.state = 3754
                self.match(mysqlParser.EQUAL_SYMBOL)
                self.state = 3755
                self.decimalLiteral()
                pass
            elif token in [mysqlParser.RELAY_LOG_FILE]:
                localctx = mysqlParser.RelayLogUntilOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3756
                self.match(mysqlParser.RELAY_LOG_FILE)
                self.state = 3757
                self.match(mysqlParser.EQUAL_SYMBOL)
                self.state = 3758
                self.match(mysqlParser.STRING_LITERAL)
                self.state = 3759
                self.match(mysqlParser.COMMA)
                self.state = 3760
                self.match(mysqlParser.RELAY_LOG_POS)
                self.state = 3761
                self.match(mysqlParser.EQUAL_SYMBOL)
                self.state = 3762
                self.decimalLiteral()
                pass
            elif token in [mysqlParser.SQL_AFTER_MTS_GAPS]:
                localctx = mysqlParser.SqlGapsUntilOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3763
                self.match(mysqlParser.SQL_AFTER_MTS_GAPS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConnectionOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.conOptUser = None # Token
            self.conOptPassword = None # Token
            self.conOptDefAuth = None # Token
            self.conOptPluginDir = None # Token

        def USER(self):
            return self.getToken(mysqlParser.USER, 0)

        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def PASSWORD(self):
            return self.getToken(mysqlParser.PASSWORD, 0)

        def DEFAULT_AUTH(self):
            return self.getToken(mysqlParser.DEFAULT_AUTH, 0)

        def PLUGIN_DIR(self):
            return self.getToken(mysqlParser.PLUGIN_DIR, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_connectionOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConnectionOption" ):
                listener.enterConnectionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConnectionOption" ):
                listener.exitConnectionOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectionOption" ):
                return visitor.visitConnectionOption(self)
            else:
                return visitor.visitChildren(self)




    def connectionOption(self):

        localctx = mysqlParser.ConnectionOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_connectionOption)
        try:
            self.state = 3778
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.USER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3766
                self.match(mysqlParser.USER)
                self.state = 3767
                self.match(mysqlParser.EQUAL_SYMBOL)
                self.state = 3768
                localctx.conOptUser = self.match(mysqlParser.STRING_LITERAL)
                pass
            elif token in [mysqlParser.PASSWORD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3769
                self.match(mysqlParser.PASSWORD)
                self.state = 3770
                self.match(mysqlParser.EQUAL_SYMBOL)
                self.state = 3771
                localctx.conOptPassword = self.match(mysqlParser.STRING_LITERAL)
                pass
            elif token in [mysqlParser.DEFAULT_AUTH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3772
                self.match(mysqlParser.DEFAULT_AUTH)
                self.state = 3773
                self.match(mysqlParser.EQUAL_SYMBOL)
                self.state = 3774
                localctx.conOptDefAuth = self.match(mysqlParser.STRING_LITERAL)
                pass
            elif token in [mysqlParser.PLUGIN_DIR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3775
                self.match(mysqlParser.PLUGIN_DIR)
                self.state = 3776
                self.match(mysqlParser.EQUAL_SYMBOL)
                self.state = 3777
                localctx.conOptPluginDir = self.match(mysqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GtuidSetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uuidSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UuidSetContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UuidSetContext,i)


        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_gtuidSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGtuidSet" ):
                listener.enterGtuidSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGtuidSet" ):
                listener.exitGtuidSet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGtuidSet" ):
                return visitor.visitGtuidSet(self)
            else:
                return visitor.visitChildren(self)




    def gtuidSet(self):

        localctx = mysqlParser.GtuidSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_gtuidSet)
        self._la = 0 # Token type
        try:
            self.state = 3789
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.ZERO_DECIMAL, mysqlParser.ONE_DECIMAL, mysqlParser.TWO_DECIMAL, mysqlParser.DECIMAL_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3780
                self.uuidSet()
                self.state = 3785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.COMMA:
                    self.state = 3781
                    self.match(mysqlParser.COMMA)
                    self.state = 3782
                    self.uuidSet()
                    self.state = 3787
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [mysqlParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3788
                self.match(mysqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class XaStartTransactionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xaStart = None # Token
            self.xaAction = None # Token

        def XA(self):
            return self.getToken(mysqlParser.XA, 0)

        def xid(self):
            return self.getTypedRuleContext(mysqlParser.XidContext,0)


        def START(self):
            return self.getToken(mysqlParser.START, 0)

        def BEGIN(self):
            return self.getToken(mysqlParser.BEGIN, 0)

        def JOIN(self):
            return self.getToken(mysqlParser.JOIN, 0)

        def RESUME(self):
            return self.getToken(mysqlParser.RESUME, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_xaStartTransaction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaStartTransaction" ):
                listener.enterXaStartTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaStartTransaction" ):
                listener.exitXaStartTransaction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXaStartTransaction" ):
                return visitor.visitXaStartTransaction(self)
            else:
                return visitor.visitChildren(self)




    def xaStartTransaction(self):

        localctx = mysqlParser.XaStartTransactionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_xaStartTransaction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3791
            self.match(mysqlParser.XA)
            self.state = 3792
            localctx.xaStart = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==mysqlParser.BEGIN or _la==mysqlParser.START):
                localctx.xaStart = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3793
            self.xid()
            self.state = 3795
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.JOIN or _la==mysqlParser.RESUME:
                self.state = 3794
                localctx.xaAction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.JOIN or _la==mysqlParser.RESUME):
                    localctx.xaAction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class XaEndTransactionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XA(self):
            return self.getToken(mysqlParser.XA, 0)

        def END(self):
            return self.getToken(mysqlParser.END, 0)

        def xid(self):
            return self.getTypedRuleContext(mysqlParser.XidContext,0)


        def SUSPEND(self):
            return self.getToken(mysqlParser.SUSPEND, 0)

        def FOR(self):
            return self.getToken(mysqlParser.FOR, 0)

        def MIGRATE(self):
            return self.getToken(mysqlParser.MIGRATE, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_xaEndTransaction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaEndTransaction" ):
                listener.enterXaEndTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaEndTransaction" ):
                listener.exitXaEndTransaction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXaEndTransaction" ):
                return visitor.visitXaEndTransaction(self)
            else:
                return visitor.visitChildren(self)




    def xaEndTransaction(self):

        localctx = mysqlParser.XaEndTransactionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_xaEndTransaction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3797
            self.match(mysqlParser.XA)
            self.state = 3798
            self.match(mysqlParser.END)
            self.state = 3799
            self.xid()
            self.state = 3805
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.SUSPEND:
                self.state = 3800
                self.match(mysqlParser.SUSPEND)
                self.state = 3803
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.FOR:
                    self.state = 3801
                    self.match(mysqlParser.FOR)
                    self.state = 3802
                    self.match(mysqlParser.MIGRATE)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class XaPrepareStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XA(self):
            return self.getToken(mysqlParser.XA, 0)

        def PREPARE(self):
            return self.getToken(mysqlParser.PREPARE, 0)

        def xid(self):
            return self.getTypedRuleContext(mysqlParser.XidContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_xaPrepareStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaPrepareStatement" ):
                listener.enterXaPrepareStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaPrepareStatement" ):
                listener.exitXaPrepareStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXaPrepareStatement" ):
                return visitor.visitXaPrepareStatement(self)
            else:
                return visitor.visitChildren(self)




    def xaPrepareStatement(self):

        localctx = mysqlParser.XaPrepareStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_xaPrepareStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3807
            self.match(mysqlParser.XA)
            self.state = 3808
            self.match(mysqlParser.PREPARE)
            self.state = 3809
            self.xid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class XaCommitWorkContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XA(self):
            return self.getToken(mysqlParser.XA, 0)

        def COMMIT(self):
            return self.getToken(mysqlParser.COMMIT, 0)

        def xid(self):
            return self.getTypedRuleContext(mysqlParser.XidContext,0)


        def ONE(self):
            return self.getToken(mysqlParser.ONE, 0)

        def PHASE(self):
            return self.getToken(mysqlParser.PHASE, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_xaCommitWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaCommitWork" ):
                listener.enterXaCommitWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaCommitWork" ):
                listener.exitXaCommitWork(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXaCommitWork" ):
                return visitor.visitXaCommitWork(self)
            else:
                return visitor.visitChildren(self)




    def xaCommitWork(self):

        localctx = mysqlParser.XaCommitWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_xaCommitWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3811
            self.match(mysqlParser.XA)
            self.state = 3812
            self.match(mysqlParser.COMMIT)
            self.state = 3813
            self.xid()
            self.state = 3816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.ONE:
                self.state = 3814
                self.match(mysqlParser.ONE)
                self.state = 3815
                self.match(mysqlParser.PHASE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class XaRollbackWorkContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XA(self):
            return self.getToken(mysqlParser.XA, 0)

        def ROLLBACK(self):
            return self.getToken(mysqlParser.ROLLBACK, 0)

        def xid(self):
            return self.getTypedRuleContext(mysqlParser.XidContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_xaRollbackWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaRollbackWork" ):
                listener.enterXaRollbackWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaRollbackWork" ):
                listener.exitXaRollbackWork(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXaRollbackWork" ):
                return visitor.visitXaRollbackWork(self)
            else:
                return visitor.visitChildren(self)




    def xaRollbackWork(self):

        localctx = mysqlParser.XaRollbackWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_xaRollbackWork)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3818
            self.match(mysqlParser.XA)
            self.state = 3819
            self.match(mysqlParser.ROLLBACK)
            self.state = 3820
            self.xid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class XaRecoverWorkContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XA(self):
            return self.getToken(mysqlParser.XA, 0)

        def RECOVER(self):
            return self.getToken(mysqlParser.RECOVER, 0)

        def CONVERT(self):
            return self.getToken(mysqlParser.CONVERT, 0)

        def xid(self):
            return self.getTypedRuleContext(mysqlParser.XidContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_xaRecoverWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaRecoverWork" ):
                listener.enterXaRecoverWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaRecoverWork" ):
                listener.exitXaRecoverWork(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXaRecoverWork" ):
                return visitor.visitXaRecoverWork(self)
            else:
                return visitor.visitChildren(self)




    def xaRecoverWork(self):

        localctx = mysqlParser.XaRecoverWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_xaRecoverWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3822
            self.match(mysqlParser.XA)
            self.state = 3823
            self.match(mysqlParser.RECOVER)
            self.state = 3826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.CONVERT:
                self.state = 3824
                self.match(mysqlParser.CONVERT)
                self.state = 3825
                self.xid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrepareStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PREPARE(self):
            return self.getToken(mysqlParser.PREPARE, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def FROM(self):
            return self.getToken(mysqlParser.FROM, 0)

        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def LOCAL_ID(self):
            return self.getToken(mysqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_prepareStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrepareStatement" ):
                listener.enterPrepareStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrepareStatement" ):
                listener.exitPrepareStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrepareStatement" ):
                return visitor.visitPrepareStatement(self)
            else:
                return visitor.visitChildren(self)




    def prepareStatement(self):

        localctx = mysqlParser.PrepareStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_prepareStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3828
            self.match(mysqlParser.PREPARE)
            self.state = 3829
            self.uid()
            self.state = 3830
            self.match(mysqlParser.FROM)
            self.state = 3831
            _la = self._input.LA(1)
            if not(_la==mysqlParser.STRING_LITERAL or _la==mysqlParser.LOCAL_ID):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExecuteStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(mysqlParser.EXECUTE, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def USING(self):
            return self.getToken(mysqlParser.USING, 0)

        def userVariables(self):
            return self.getTypedRuleContext(mysqlParser.UserVariablesContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_executeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteStatement" ):
                listener.enterExecuteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteStatement" ):
                listener.exitExecuteStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExecuteStatement" ):
                return visitor.visitExecuteStatement(self)
            else:
                return visitor.visitChildren(self)




    def executeStatement(self):

        localctx = mysqlParser.ExecuteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_executeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3833
            self.match(mysqlParser.EXECUTE)
            self.state = 3834
            self.uid()
            self.state = 3837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.USING:
                self.state = 3835
                self.match(mysqlParser.USING)
                self.state = 3836
                self.userVariables()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeallocatePrepareContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dropFormat = None # Token

        def PREPARE(self):
            return self.getToken(mysqlParser.PREPARE, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def DEALLOCATE(self):
            return self.getToken(mysqlParser.DEALLOCATE, 0)

        def DROP(self):
            return self.getToken(mysqlParser.DROP, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_deallocatePrepare

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeallocatePrepare" ):
                listener.enterDeallocatePrepare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeallocatePrepare" ):
                listener.exitDeallocatePrepare(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeallocatePrepare" ):
                return visitor.visitDeallocatePrepare(self)
            else:
                return visitor.visitChildren(self)




    def deallocatePrepare(self):

        localctx = mysqlParser.DeallocatePrepareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_deallocatePrepare)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3839
            localctx.dropFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==mysqlParser.DROP or _la==mysqlParser.DEALLOCATE):
                localctx.dropFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3840
            self.match(mysqlParser.PREPARE)
            self.state = 3841
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RoutineBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockStatement(self):
            return self.getTypedRuleContext(mysqlParser.BlockStatementContext,0)


        def sqlStatement(self):
            return self.getTypedRuleContext(mysqlParser.SqlStatementContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_routineBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineBody" ):
                listener.enterRoutineBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineBody" ):
                listener.exitRoutineBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoutineBody" ):
                return visitor.visitRoutineBody(self)
            else:
                return visitor.visitChildren(self)




    def routineBody(self):

        localctx = mysqlParser.RoutineBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_routineBody)
        try:
            self.state = 3845
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,547,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3843
                self.blockStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3844
                self.sqlStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(mysqlParser.BEGIN, 0)

        def END(self):
            return self.getToken(mysqlParser.END, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UidContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UidContext,i)


        def declareVariable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.DeclareVariableContext)
            else:
                return self.getTypedRuleContext(mysqlParser.DeclareVariableContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.SEMI)
            else:
                return self.getToken(mysqlParser.SEMI, i)

        def declareCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.DeclareConditionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.DeclareConditionContext,i)


        def declareCursor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.DeclareCursorContext)
            else:
                return self.getTypedRuleContext(mysqlParser.DeclareCursorContext,i)


        def declareHandler(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.DeclareHandlerContext)
            else:
                return self.getTypedRuleContext(mysqlParser.DeclareHandlerContext,i)


        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(mysqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockStatement" ):
                return visitor.visitBlockStatement(self)
            else:
                return visitor.visitChildren(self)




    def blockStatement(self):

        localctx = mysqlParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_blockStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3850
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,548,self._ctx)
            if la_ == 1:
                self.state = 3847
                self.uid()
                self.state = 3848
                self.match(mysqlParser.COLON_SYMB)


            self.state = 3852
            self.match(mysqlParser.BEGIN)
            self.state = 3890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 7)) & ~0x3f) == 0 and ((1 << (_la - 7)) & ((1 << (mysqlParser.ALTER - 7)) | (1 << (mysqlParser.ANALYZE - 7)) | (1 << (mysqlParser.CALL - 7)) | (1 << (mysqlParser.CASE - 7)) | (1 << (mysqlParser.CHANGE - 7)) | (1 << (mysqlParser.CHECK - 7)) | (1 << (mysqlParser.CREATE - 7)) | (1 << (mysqlParser.DECLARE - 7)) | (1 << (mysqlParser.DELETE - 7)) | (1 << (mysqlParser.DESC - 7)) | (1 << (mysqlParser.DESCRIBE - 7)) | (1 << (mysqlParser.DROP - 7)) | (1 << (mysqlParser.EXPLAIN - 7)) | (1 << (mysqlParser.FETCH - 7)) | (1 << (mysqlParser.GRANT - 7)) | (1 << (mysqlParser.IF - 7)))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (mysqlParser.INSERT - 71)) | (1 << (mysqlParser.ITERATE - 71)) | (1 << (mysqlParser.KILL - 71)) | (1 << (mysqlParser.LEAVE - 71)) | (1 << (mysqlParser.LEFT - 71)) | (1 << (mysqlParser.LOAD - 71)) | (1 << (mysqlParser.LOCK - 71)) | (1 << (mysqlParser.LOOP - 71)) | (1 << (mysqlParser.OPTIMIZE - 71)) | (1 << (mysqlParser.PURGE - 71)) | (1 << (mysqlParser.RELEASE - 71)) | (1 << (mysqlParser.RENAME - 71)) | (1 << (mysqlParser.REPEAT - 71)) | (1 << (mysqlParser.REPLACE - 71)) | (1 << (mysqlParser.RETURN - 71)) | (1 << (mysqlParser.REVOKE - 71)) | (1 << (mysqlParser.RIGHT - 71)) | (1 << (mysqlParser.SELECT - 71)) | (1 << (mysqlParser.SET - 71)) | (1 << (mysqlParser.SHOW - 71)))) != 0) or ((((_la - 155)) & ~0x3f) == 0 and ((1 << (_la - 155)) & ((1 << (mysqlParser.UNLOCK - 155)) | (1 << (mysqlParser.UPDATE - 155)) | (1 << (mysqlParser.USE - 155)) | (1 << (mysqlParser.WHILE - 155)) | (1 << (mysqlParser.DATE - 155)) | (1 << (mysqlParser.TIME - 155)) | (1 << (mysqlParser.TIMESTAMP - 155)) | (1 << (mysqlParser.DATETIME - 155)) | (1 << (mysqlParser.YEAR - 155)) | (1 << (mysqlParser.TEXT - 155)) | (1 << (mysqlParser.ENUM - 155)) | (1 << (mysqlParser.COUNT - 155)))) != 0) or ((((_la - 236)) & ~0x3f) == 0 and ((1 << (_la - 236)) & ((1 << (mysqlParser.POSITION - 236)) | (1 << (mysqlParser.ACCOUNT - 236)) | (1 << (mysqlParser.ACTION - 236)) | (1 << (mysqlParser.AFTER - 236)) | (1 << (mysqlParser.AGGREGATE - 236)) | (1 << (mysqlParser.ALGORITHM - 236)) | (1 << (mysqlParser.ANY - 236)) | (1 << (mysqlParser.AT - 236)) | (1 << (mysqlParser.AUTHORS - 236)) | (1 << (mysqlParser.AUTOCOMMIT - 236)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 236)) | (1 << (mysqlParser.AUTO_INCREMENT - 236)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 236)) | (1 << (mysqlParser.BEGIN - 236)) | (1 << (mysqlParser.BINLOG - 236)) | (1 << (mysqlParser.BIT - 236)) | (1 << (mysqlParser.BLOCK - 236)) | (1 << (mysqlParser.BTREE - 236)) | (1 << (mysqlParser.CACHE - 236)) | (1 << (mysqlParser.CASCADED - 236)) | (1 << (mysqlParser.CHAIN - 236)) | (1 << (mysqlParser.CHANNEL - 236)) | (1 << (mysqlParser.CHECKSUM - 236)) | (1 << (mysqlParser.CIPHER - 236)) | (1 << (mysqlParser.CLIENT - 236)) | (1 << (mysqlParser.CLOSE - 236)) | (1 << (mysqlParser.COALESCE - 236)) | (1 << (mysqlParser.CODE - 236)) | (1 << (mysqlParser.COLUMNS - 236)) | (1 << (mysqlParser.COLUMN_FORMAT - 236)) | (1 << (mysqlParser.COMMENT - 236)) | (1 << (mysqlParser.COMMIT - 236)) | (1 << (mysqlParser.COMPACT - 236)) | (1 << (mysqlParser.COMPLETION - 236)) | (1 << (mysqlParser.COMPRESSED - 236)) | (1 << (mysqlParser.COMPRESSION - 236)) | (1 << (mysqlParser.CONCURRENT - 236)) | (1 << (mysqlParser.CONNECTION - 236)) | (1 << (mysqlParser.CONSISTENT - 236)) | (1 << (mysqlParser.CONTAINS - 236)) | (1 << (mysqlParser.CONTEXT - 236)) | (1 << (mysqlParser.CONTRIBUTORS - 236)) | (1 << (mysqlParser.COPY - 236)) | (1 << (mysqlParser.CPU - 236)) | (1 << (mysqlParser.DATA - 236)) | (1 << (mysqlParser.DATAFILE - 236)) | (1 << (mysqlParser.DEALLOCATE - 236)) | (1 << (mysqlParser.DEFAULT_AUTH - 236)) | (1 << (mysqlParser.DEFINER - 236)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 236)) | (1 << (mysqlParser.DIRECTORY - 236)) | (1 << (mysqlParser.DISABLE - 236)) | (1 << (mysqlParser.DISCARD - 236)) | (1 << (mysqlParser.DISK - 236)) | (1 << (mysqlParser.DO - 236)))) != 0) or ((((_la - 300)) & ~0x3f) == 0 and ((1 << (_la - 300)) & ((1 << (mysqlParser.DUMPFILE - 300)) | (1 << (mysqlParser.DUPLICATE - 300)) | (1 << (mysqlParser.DYNAMIC - 300)) | (1 << (mysqlParser.ENABLE - 300)) | (1 << (mysqlParser.ENCRYPTION - 300)) | (1 << (mysqlParser.ENDS - 300)) | (1 << (mysqlParser.ENGINE - 300)) | (1 << (mysqlParser.ENGINES - 300)) | (1 << (mysqlParser.ERROR - 300)) | (1 << (mysqlParser.ERRORS - 300)) | (1 << (mysqlParser.ESCAPE - 300)) | (1 << (mysqlParser.EVEN - 300)) | (1 << (mysqlParser.EVENT - 300)) | (1 << (mysqlParser.EVENTS - 300)) | (1 << (mysqlParser.EVERY - 300)) | (1 << (mysqlParser.EXCHANGE - 300)) | (1 << (mysqlParser.EXCLUSIVE - 300)) | (1 << (mysqlParser.EXPIRE - 300)) | (1 << (mysqlParser.EXTENT_SIZE - 300)) | (1 << (mysqlParser.FAULTS - 300)) | (1 << (mysqlParser.FIELDS - 300)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 300)) | (1 << (mysqlParser.FILTER - 300)) | (1 << (mysqlParser.FIRST - 300)) | (1 << (mysqlParser.FIXED - 300)) | (1 << (mysqlParser.FLUSH - 300)) | (1 << (mysqlParser.FOLLOWS - 300)) | (1 << (mysqlParser.FULL - 300)) | (1 << (mysqlParser.FUNCTION - 300)) | (1 << (mysqlParser.GLOBAL - 300)) | (1 << (mysqlParser.GRANTS - 300)) | (1 << (mysqlParser.GROUP_REPLICATION - 300)) | (1 << (mysqlParser.HANDLER - 300)) | (1 << (mysqlParser.HASH - 300)) | (1 << (mysqlParser.HELP - 300)) | (1 << (mysqlParser.HOST - 300)) | (1 << (mysqlParser.IDENTIFIED - 300)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 300)) | (1 << (mysqlParser.IMPORT - 300)) | (1 << (mysqlParser.INDEXES - 300)) | (1 << (mysqlParser.INITIAL_SIZE - 300)) | (1 << (mysqlParser.INPLACE - 300)) | (1 << (mysqlParser.INSERT_METHOD - 300)) | (1 << (mysqlParser.INSTALL - 300)) | (1 << (mysqlParser.INSTANCE - 300)) | (1 << (mysqlParser.INVOKER - 300)) | (1 << (mysqlParser.IO - 300)) | (1 << (mysqlParser.IO_THREAD - 300)) | (1 << (mysqlParser.IPC - 300)) | (1 << (mysqlParser.ISOLATION - 300)) | (1 << (mysqlParser.ISSUER - 300)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 300)) | (1 << (mysqlParser.LANGUAGE - 300)) | (1 << (mysqlParser.LAST - 300)) | (1 << (mysqlParser.LEAVES - 300)) | (1 << (mysqlParser.LESS - 300)))) != 0) or ((((_la - 364)) & ~0x3f) == 0 and ((1 << (_la - 364)) & ((1 << (mysqlParser.LEVEL - 364)) | (1 << (mysqlParser.LIST - 364)) | (1 << (mysqlParser.LOCAL - 364)) | (1 << (mysqlParser.LOGFILE - 364)) | (1 << (mysqlParser.LOGS - 364)) | (1 << (mysqlParser.MASTER - 364)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 364)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 364)) | (1 << (mysqlParser.MASTER_DELAY - 364)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 364)) | (1 << (mysqlParser.MASTER_HOST - 364)) | (1 << (mysqlParser.MASTER_LOG_FILE - 364)) | (1 << (mysqlParser.MASTER_LOG_POS - 364)) | (1 << (mysqlParser.MASTER_PASSWORD - 364)) | (1 << (mysqlParser.MASTER_PORT - 364)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 364)) | (1 << (mysqlParser.MASTER_SSL - 364)) | (1 << (mysqlParser.MASTER_SSL_CA - 364)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 364)) | (1 << (mysqlParser.MASTER_SSL_CERT - 364)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 364)) | (1 << (mysqlParser.MASTER_SSL_CRL - 364)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 364)) | (1 << (mysqlParser.MASTER_SSL_KEY - 364)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 364)) | (1 << (mysqlParser.MASTER_USER - 364)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 364)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 364)) | (1 << (mysqlParser.MAX_ROWS - 364)) | (1 << (mysqlParser.MAX_SIZE - 364)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 364)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 364)) | (1 << (mysqlParser.MERGE - 364)) | (1 << (mysqlParser.MID - 364)) | (1 << (mysqlParser.MIGRATE - 364)) | (1 << (mysqlParser.MIN_ROWS - 364)) | (1 << (mysqlParser.MODIFY - 364)) | (1 << (mysqlParser.MUTEX - 364)) | (1 << (mysqlParser.MYSQL - 364)) | (1 << (mysqlParser.NAME - 364)) | (1 << (mysqlParser.NAMES - 364)) | (1 << (mysqlParser.NCHAR - 364)) | (1 << (mysqlParser.NEVER - 364)) | (1 << (mysqlParser.NO - 364)) | (1 << (mysqlParser.NODEGROUP - 364)) | (1 << (mysqlParser.NONE - 364)) | (1 << (mysqlParser.OFFLINE - 364)) | (1 << (mysqlParser.OFFSET - 364)) | (1 << (mysqlParser.OJ - 364)) | (1 << (mysqlParser.OLD_PASSWORD - 364)) | (1 << (mysqlParser.ONE - 364)) | (1 << (mysqlParser.ONLINE - 364)) | (1 << (mysqlParser.ONLY - 364)) | (1 << (mysqlParser.OPEN - 364)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 364)) | (1 << (mysqlParser.OPTIONS - 364)) | (1 << (mysqlParser.OWNER - 364)) | (1 << (mysqlParser.PACK_KEYS - 364)) | (1 << (mysqlParser.PAGE - 364)) | (1 << (mysqlParser.PARSER - 364)) | (1 << (mysqlParser.PARTIAL - 364)))) != 0) or ((((_la - 428)) & ~0x3f) == 0 and ((1 << (_la - 428)) & ((1 << (mysqlParser.PARTITIONING - 428)) | (1 << (mysqlParser.PARTITIONS - 428)) | (1 << (mysqlParser.PASSWORD - 428)) | (1 << (mysqlParser.PHASE - 428)) | (1 << (mysqlParser.PLUGIN_DIR - 428)) | (1 << (mysqlParser.PLUGINS - 428)) | (1 << (mysqlParser.PORT - 428)) | (1 << (mysqlParser.PRECEDES - 428)) | (1 << (mysqlParser.PREPARE - 428)) | (1 << (mysqlParser.PRESERVE - 428)) | (1 << (mysqlParser.PREV - 428)) | (1 << (mysqlParser.PROCESSLIST - 428)) | (1 << (mysqlParser.PROFILE - 428)) | (1 << (mysqlParser.PROFILES - 428)) | (1 << (mysqlParser.PROXY - 428)) | (1 << (mysqlParser.QUERY - 428)) | (1 << (mysqlParser.QUICK - 428)) | (1 << (mysqlParser.REBUILD - 428)) | (1 << (mysqlParser.RECOVER - 428)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 428)) | (1 << (mysqlParser.REDUNDANT - 428)) | (1 << (mysqlParser.RELAY_LOG_FILE - 428)) | (1 << (mysqlParser.RELAY_LOG_POS - 428)) | (1 << (mysqlParser.RELAYLOG - 428)) | (1 << (mysqlParser.REMOVE - 428)) | (1 << (mysqlParser.REORGANIZE - 428)) | (1 << (mysqlParser.REPAIR - 428)) | (1 << (mysqlParser.REPLICATE_DO_DB - 428)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 428)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 428)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 428)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 428)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 428)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 428)) | (1 << (mysqlParser.REPLICATION - 428)) | (1 << (mysqlParser.RESET - 428)) | (1 << (mysqlParser.RESUME - 428)) | (1 << (mysqlParser.RETURNS - 428)) | (1 << (mysqlParser.ROLLBACK - 428)) | (1 << (mysqlParser.ROLLUP - 428)) | (1 << (mysqlParser.ROTATE - 428)) | (1 << (mysqlParser.ROW - 428)) | (1 << (mysqlParser.ROWS - 428)) | (1 << (mysqlParser.ROW_FORMAT - 428)) | (1 << (mysqlParser.SAVEPOINT - 428)) | (1 << (mysqlParser.SCHEDULE - 428)) | (1 << (mysqlParser.SECURITY - 428)) | (1 << (mysqlParser.SERVER - 428)) | (1 << (mysqlParser.SESSION - 428)) | (1 << (mysqlParser.SHARE - 428)) | (1 << (mysqlParser.SHARED - 428)) | (1 << (mysqlParser.SIGNED - 428)) | (1 << (mysqlParser.SIMPLE - 428)) | (1 << (mysqlParser.SLAVE - 428)) | (1 << (mysqlParser.SNAPSHOT - 428)) | (1 << (mysqlParser.SOCKET - 428)) | (1 << (mysqlParser.SOME - 428)) | (1 << (mysqlParser.SOUNDS - 428)) | (1 << (mysqlParser.SOURCE - 428)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 428)))) != 0) or ((((_la - 492)) & ~0x3f) == 0 and ((1 << (_la - 492)) & ((1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 492)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 492)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 492)) | (1 << (mysqlParser.SQL_CACHE - 492)) | (1 << (mysqlParser.SQL_NO_CACHE - 492)) | (1 << (mysqlParser.SQL_THREAD - 492)) | (1 << (mysqlParser.START - 492)) | (1 << (mysqlParser.STARTS - 492)) | (1 << (mysqlParser.STATS_AUTO_RECALC - 492)) | (1 << (mysqlParser.STATS_PERSISTENT - 492)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 492)) | (1 << (mysqlParser.STATUS - 492)) | (1 << (mysqlParser.STOP - 492)) | (1 << (mysqlParser.STORAGE - 492)) | (1 << (mysqlParser.STRING - 492)) | (1 << (mysqlParser.SUBJECT - 492)) | (1 << (mysqlParser.SUBPARTITION - 492)) | (1 << (mysqlParser.SUBPARTITIONS - 492)) | (1 << (mysqlParser.SUSPEND - 492)) | (1 << (mysqlParser.SWAPS - 492)) | (1 << (mysqlParser.SWITCHES - 492)) | (1 << (mysqlParser.TABLESPACE - 492)) | (1 << (mysqlParser.TEMPORARY - 492)) | (1 << (mysqlParser.TEMPTABLE - 492)) | (1 << (mysqlParser.THAN - 492)) | (1 << (mysqlParser.TRANSACTION - 492)) | (1 << (mysqlParser.TRUNCATE - 492)) | (1 << (mysqlParser.UNDEFINED - 492)) | (1 << (mysqlParser.UNDOFILE - 492)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 492)) | (1 << (mysqlParser.UNINSTALL - 492)) | (1 << (mysqlParser.UNKNOWN - 492)) | (1 << (mysqlParser.UPGRADE - 492)) | (1 << (mysqlParser.USER - 492)) | (1 << (mysqlParser.VALIDATION - 492)) | (1 << (mysqlParser.VALUE - 492)) | (1 << (mysqlParser.VARIABLES - 492)) | (1 << (mysqlParser.VIEW - 492)) | (1 << (mysqlParser.WAIT - 492)) | (1 << (mysqlParser.WARNINGS - 492)) | (1 << (mysqlParser.WITHOUT - 492)) | (1 << (mysqlParser.WORK - 492)) | (1 << (mysqlParser.WRAPPER - 492)) | (1 << (mysqlParser.X509 - 492)) | (1 << (mysqlParser.XA - 492)) | (1 << (mysqlParser.XML - 492)) | (1 << (mysqlParser.QUARTER - 492)) | (1 << (mysqlParser.MONTH - 492)) | (1 << (mysqlParser.DAY - 492)) | (1 << (mysqlParser.HOUR - 492)) | (1 << (mysqlParser.MINUTE - 492)) | (1 << (mysqlParser.WEEK - 492)) | (1 << (mysqlParser.SECOND - 492)) | (1 << (mysqlParser.MICROSECOND - 492)))) != 0) or ((((_la - 556)) & ~0x3f) == 0 and ((1 << (_la - 556)) & ((1 << (mysqlParser.TABLES - 556)) | (1 << (mysqlParser.ROUTINE - 556)) | (1 << (mysqlParser.EXECUTE - 556)) | (1 << (mysqlParser.FILE - 556)) | (1 << (mysqlParser.PROCESS - 556)) | (1 << (mysqlParser.RELOAD - 556)) | (1 << (mysqlParser.SHUTDOWN - 556)) | (1 << (mysqlParser.SUPER - 556)) | (1 << (mysqlParser.PRIVILEGES - 556)) | (1 << (mysqlParser.ARMSCII8 - 556)) | (1 << (mysqlParser.ASCII - 556)) | (1 << (mysqlParser.BIG5 - 556)) | (1 << (mysqlParser.CP1250 - 556)) | (1 << (mysqlParser.CP1251 - 556)) | (1 << (mysqlParser.CP1256 - 556)) | (1 << (mysqlParser.CP1257 - 556)) | (1 << (mysqlParser.CP850 - 556)) | (1 << (mysqlParser.CP852 - 556)) | (1 << (mysqlParser.CP866 - 556)) | (1 << (mysqlParser.CP932 - 556)) | (1 << (mysqlParser.DEC8 - 556)) | (1 << (mysqlParser.EUCJPMS - 556)) | (1 << (mysqlParser.EUCKR - 556)) | (1 << (mysqlParser.GB2312 - 556)) | (1 << (mysqlParser.GBK - 556)) | (1 << (mysqlParser.GEOSTD8 - 556)) | (1 << (mysqlParser.GREEK - 556)) | (1 << (mysqlParser.HEBREW - 556)) | (1 << (mysqlParser.HP8 - 556)) | (1 << (mysqlParser.KEYBCS2 - 556)) | (1 << (mysqlParser.KOI8R - 556)) | (1 << (mysqlParser.KOI8U - 556)) | (1 << (mysqlParser.LATIN1 - 556)) | (1 << (mysqlParser.LATIN2 - 556)) | (1 << (mysqlParser.LATIN5 - 556)) | (1 << (mysqlParser.LATIN7 - 556)) | (1 << (mysqlParser.MACCE - 556)) | (1 << (mysqlParser.MACROMAN - 556)) | (1 << (mysqlParser.SJIS - 556)) | (1 << (mysqlParser.SWE7 - 556)) | (1 << (mysqlParser.TIS620 - 556)) | (1 << (mysqlParser.UCS2 - 556)) | (1 << (mysqlParser.UJIS - 556)) | (1 << (mysqlParser.UTF16 - 556)) | (1 << (mysqlParser.UTF16LE - 556)) | (1 << (mysqlParser.UTF32 - 556)) | (1 << (mysqlParser.UTF8 - 556)) | (1 << (mysqlParser.UTF8MB3 - 556)) | (1 << (mysqlParser.UTF8MB4 - 556)) | (1 << (mysqlParser.ARCHIVE - 556)) | (1 << (mysqlParser.BLACKHOLE - 556)) | (1 << (mysqlParser.CSV - 556)) | (1 << (mysqlParser.FEDERATED - 556)) | (1 << (mysqlParser.INNODB - 556)) | (1 << (mysqlParser.MEMORY - 556)) | (1 << (mysqlParser.MRG_MYISAM - 556)) | (1 << (mysqlParser.MYISAM - 556)) | (1 << (mysqlParser.NDB - 556)) | (1 << (mysqlParser.NDBCLUSTER - 556)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 556)) | (1 << (mysqlParser.REPEATABLE - 556)) | (1 << (mysqlParser.COMMITTED - 556)) | (1 << (mysqlParser.UNCOMMITTED - 556)) | (1 << (mysqlParser.SERIALIZABLE - 556)))) != 0) or ((((_la - 620)) & ~0x3f) == 0 and ((1 << (_la - 620)) & ((1 << (mysqlParser.GEOMETRYCOLLECTION - 620)) | (1 << (mysqlParser.LINESTRING - 620)) | (1 << (mysqlParser.MULTILINESTRING - 620)) | (1 << (mysqlParser.MULTIPOINT - 620)) | (1 << (mysqlParser.MULTIPOLYGON - 620)) | (1 << (mysqlParser.POINT - 620)) | (1 << (mysqlParser.POLYGON - 620)) | (1 << (mysqlParser.ABS - 620)) | (1 << (mysqlParser.ACOS - 620)) | (1 << (mysqlParser.ADDDATE - 620)) | (1 << (mysqlParser.ADDTIME - 620)) | (1 << (mysqlParser.AES_DECRYPT - 620)) | (1 << (mysqlParser.AES_ENCRYPT - 620)) | (1 << (mysqlParser.AREA - 620)) | (1 << (mysqlParser.ASBINARY - 620)) | (1 << (mysqlParser.ASIN - 620)) | (1 << (mysqlParser.ASTEXT - 620)) | (1 << (mysqlParser.ASWKB - 620)) | (1 << (mysqlParser.ASWKT - 620)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 620)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 620)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 620)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 620)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 620)) | (1 << (mysqlParser.ATAN - 620)) | (1 << (mysqlParser.ATAN2 - 620)) | (1 << (mysqlParser.BENCHMARK - 620)) | (1 << (mysqlParser.BIN - 620)) | (1 << (mysqlParser.BIT_COUNT - 620)) | (1 << (mysqlParser.BIT_LENGTH - 620)) | (1 << (mysqlParser.BUFFER - 620)) | (1 << (mysqlParser.CEIL - 620)) | (1 << (mysqlParser.CEILING - 620)) | (1 << (mysqlParser.CENTROID - 620)) | (1 << (mysqlParser.CHARACTER_LENGTH - 620)) | (1 << (mysqlParser.CHARSET - 620)) | (1 << (mysqlParser.CHAR_LENGTH - 620)) | (1 << (mysqlParser.COERCIBILITY - 620)) | (1 << (mysqlParser.COLLATION - 620)) | (1 << (mysqlParser.COMPRESS - 620)) | (1 << (mysqlParser.CONCAT - 620)) | (1 << (mysqlParser.CONCAT_WS - 620)) | (1 << (mysqlParser.CONNECTION_ID - 620)) | (1 << (mysqlParser.CONV - 620)) | (1 << (mysqlParser.CONVERT_TZ - 620)) | (1 << (mysqlParser.COS - 620)) | (1 << (mysqlParser.COT - 620)) | (1 << (mysqlParser.CRC32 - 620)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 620)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 620)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 620)) | (1 << (mysqlParser.CREATE_DIGEST - 620)) | (1 << (mysqlParser.CROSSES - 620)) | (1 << (mysqlParser.DATEDIFF - 620)) | (1 << (mysqlParser.DATE_FORMAT - 620)) | (1 << (mysqlParser.DAYNAME - 620)) | (1 << (mysqlParser.DAYOFMONTH - 620)) | (1 << (mysqlParser.DAYOFWEEK - 620)) | (1 << (mysqlParser.DAYOFYEAR - 620)) | (1 << (mysqlParser.DECODE - 620)) | (1 << (mysqlParser.DEGREES - 620)) | (1 << (mysqlParser.DES_DECRYPT - 620)) | (1 << (mysqlParser.DES_ENCRYPT - 620)) | (1 << (mysqlParser.DIMENSION - 620)))) != 0) or ((((_la - 684)) & ~0x3f) == 0 and ((1 << (_la - 684)) & ((1 << (mysqlParser.DISJOINT - 684)) | (1 << (mysqlParser.ELT - 684)) | (1 << (mysqlParser.ENCODE - 684)) | (1 << (mysqlParser.ENCRYPT - 684)) | (1 << (mysqlParser.ENDPOINT - 684)) | (1 << (mysqlParser.ENVELOPE - 684)) | (1 << (mysqlParser.EQUALS - 684)) | (1 << (mysqlParser.EXP - 684)) | (1 << (mysqlParser.EXPORT_SET - 684)) | (1 << (mysqlParser.EXTERIORRING - 684)) | (1 << (mysqlParser.EXTRACTVALUE - 684)) | (1 << (mysqlParser.FIELD - 684)) | (1 << (mysqlParser.FIND_IN_SET - 684)) | (1 << (mysqlParser.FLOOR - 684)) | (1 << (mysqlParser.FORMAT - 684)) | (1 << (mysqlParser.FOUND_ROWS - 684)) | (1 << (mysqlParser.FROM_BASE64 - 684)) | (1 << (mysqlParser.FROM_DAYS - 684)) | (1 << (mysqlParser.FROM_UNIXTIME - 684)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 684)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 684)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 684)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 684)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 684)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 684)) | (1 << (mysqlParser.GEOMETRYN - 684)) | (1 << (mysqlParser.GEOMETRYTYPE - 684)) | (1 << (mysqlParser.GEOMFROMTEXT - 684)) | (1 << (mysqlParser.GEOMFROMWKB - 684)) | (1 << (mysqlParser.GET_FORMAT - 684)) | (1 << (mysqlParser.GET_LOCK - 684)) | (1 << (mysqlParser.GLENGTH - 684)) | (1 << (mysqlParser.GREATEST - 684)) | (1 << (mysqlParser.GTID_SUBSET - 684)) | (1 << (mysqlParser.GTID_SUBTRACT - 684)) | (1 << (mysqlParser.HEX - 684)) | (1 << (mysqlParser.IFNULL - 684)) | (1 << (mysqlParser.INET6_ATON - 684)) | (1 << (mysqlParser.INET6_NTOA - 684)) | (1 << (mysqlParser.INET_ATON - 684)) | (1 << (mysqlParser.INET_NTOA - 684)) | (1 << (mysqlParser.INSTR - 684)) | (1 << (mysqlParser.INTERIORRINGN - 684)) | (1 << (mysqlParser.INTERSECTS - 684)) | (1 << (mysqlParser.ISCLOSED - 684)) | (1 << (mysqlParser.ISEMPTY - 684)) | (1 << (mysqlParser.ISNULL - 684)) | (1 << (mysqlParser.ISSIMPLE - 684)) | (1 << (mysqlParser.IS_FREE_LOCK - 684)) | (1 << (mysqlParser.IS_IPV4 - 684)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 684)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 684)) | (1 << (mysqlParser.IS_IPV6 - 684)) | (1 << (mysqlParser.IS_USED_LOCK - 684)) | (1 << (mysqlParser.LAST_INSERT_ID - 684)) | (1 << (mysqlParser.LCASE - 684)) | (1 << (mysqlParser.LEAST - 684)) | (1 << (mysqlParser.LENGTH - 684)) | (1 << (mysqlParser.LINEFROMTEXT - 684)) | (1 << (mysqlParser.LINEFROMWKB - 684)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 684)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 684)) | (1 << (mysqlParser.LN - 684)) | (1 << (mysqlParser.LOAD_FILE - 684)))) != 0) or ((((_la - 748)) & ~0x3f) == 0 and ((1 << (_la - 748)) & ((1 << (mysqlParser.LOCATE - 748)) | (1 << (mysqlParser.LOG - 748)) | (1 << (mysqlParser.LOG10 - 748)) | (1 << (mysqlParser.LOG2 - 748)) | (1 << (mysqlParser.LOWER - 748)) | (1 << (mysqlParser.LPAD - 748)) | (1 << (mysqlParser.LTRIM - 748)) | (1 << (mysqlParser.MAKEDATE - 748)) | (1 << (mysqlParser.MAKETIME - 748)) | (1 << (mysqlParser.MAKE_SET - 748)) | (1 << (mysqlParser.MASTER_POS_WAIT - 748)) | (1 << (mysqlParser.MBRCONTAINS - 748)) | (1 << (mysqlParser.MBRDISJOINT - 748)) | (1 << (mysqlParser.MBREQUAL - 748)) | (1 << (mysqlParser.MBRINTERSECTS - 748)) | (1 << (mysqlParser.MBROVERLAPS - 748)) | (1 << (mysqlParser.MBRTOUCHES - 748)) | (1 << (mysqlParser.MBRWITHIN - 748)) | (1 << (mysqlParser.MD5 - 748)) | (1 << (mysqlParser.MLINEFROMTEXT - 748)) | (1 << (mysqlParser.MLINEFROMWKB - 748)) | (1 << (mysqlParser.MONTHNAME - 748)) | (1 << (mysqlParser.MPOINTFROMTEXT - 748)) | (1 << (mysqlParser.MPOINTFROMWKB - 748)) | (1 << (mysqlParser.MPOLYFROMTEXT - 748)) | (1 << (mysqlParser.MPOLYFROMWKB - 748)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 748)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 748)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 748)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 748)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 748)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 748)) | (1 << (mysqlParser.NAME_CONST - 748)) | (1 << (mysqlParser.NULLIF - 748)) | (1 << (mysqlParser.NUMGEOMETRIES - 748)) | (1 << (mysqlParser.NUMINTERIORRINGS - 748)) | (1 << (mysqlParser.NUMPOINTS - 748)) | (1 << (mysqlParser.OCT - 748)) | (1 << (mysqlParser.OCTET_LENGTH - 748)) | (1 << (mysqlParser.ORD - 748)) | (1 << (mysqlParser.OVERLAPS - 748)) | (1 << (mysqlParser.PERIOD_ADD - 748)) | (1 << (mysqlParser.PERIOD_DIFF - 748)) | (1 << (mysqlParser.PI - 748)) | (1 << (mysqlParser.POINTFROMTEXT - 748)) | (1 << (mysqlParser.POINTFROMWKB - 748)) | (1 << (mysqlParser.POINTN - 748)) | (1 << (mysqlParser.POLYFROMTEXT - 748)) | (1 << (mysqlParser.POLYFROMWKB - 748)) | (1 << (mysqlParser.POLYGONFROMTEXT - 748)) | (1 << (mysqlParser.POLYGONFROMWKB - 748)) | (1 << (mysqlParser.POW - 748)) | (1 << (mysqlParser.POWER - 748)) | (1 << (mysqlParser.QUOTE - 748)) | (1 << (mysqlParser.RADIANS - 748)) | (1 << (mysqlParser.RAND - 748)) | (1 << (mysqlParser.RANDOM_BYTES - 748)) | (1 << (mysqlParser.RELEASE_LOCK - 748)) | (1 << (mysqlParser.REVERSE - 748)) | (1 << (mysqlParser.ROUND - 748)) | (1 << (mysqlParser.ROW_COUNT - 748)) | (1 << (mysqlParser.RPAD - 748)) | (1 << (mysqlParser.RTRIM - 748)) | (1 << (mysqlParser.SEC_TO_TIME - 748)))) != 0) or ((((_la - 812)) & ~0x3f) == 0 and ((1 << (_la - 812)) & ((1 << (mysqlParser.SESSION_USER - 812)) | (1 << (mysqlParser.SHA - 812)) | (1 << (mysqlParser.SHA1 - 812)) | (1 << (mysqlParser.SHA2 - 812)) | (1 << (mysqlParser.SIGN - 812)) | (1 << (mysqlParser.SIN - 812)) | (1 << (mysqlParser.SLEEP - 812)) | (1 << (mysqlParser.SOUNDEX - 812)) | (1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 812)) | (1 << (mysqlParser.SQRT - 812)) | (1 << (mysqlParser.SRID - 812)) | (1 << (mysqlParser.STARTPOINT - 812)) | (1 << (mysqlParser.STRCMP - 812)) | (1 << (mysqlParser.STR_TO_DATE - 812)) | (1 << (mysqlParser.ST_AREA - 812)) | (1 << (mysqlParser.ST_ASBINARY - 812)) | (1 << (mysqlParser.ST_ASTEXT - 812)) | (1 << (mysqlParser.ST_ASWKB - 812)) | (1 << (mysqlParser.ST_ASWKT - 812)) | (1 << (mysqlParser.ST_BUFFER - 812)) | (1 << (mysqlParser.ST_CENTROID - 812)) | (1 << (mysqlParser.ST_CONTAINS - 812)) | (1 << (mysqlParser.ST_CROSSES - 812)) | (1 << (mysqlParser.ST_DIFFERENCE - 812)) | (1 << (mysqlParser.ST_DIMENSION - 812)) | (1 << (mysqlParser.ST_DISJOINT - 812)) | (1 << (mysqlParser.ST_DISTANCE - 812)) | (1 << (mysqlParser.ST_ENDPOINT - 812)) | (1 << (mysqlParser.ST_ENVELOPE - 812)) | (1 << (mysqlParser.ST_EQUALS - 812)) | (1 << (mysqlParser.ST_EXTERIORRING - 812)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 812)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 812)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 812)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 812)) | (1 << (mysqlParser.ST_GEOMETRYN - 812)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 812)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 812)) | (1 << (mysqlParser.ST_INTERIORRINGN - 812)) | (1 << (mysqlParser.ST_INTERSECTION - 812)) | (1 << (mysqlParser.ST_INTERSECTS - 812)) | (1 << (mysqlParser.ST_ISCLOSED - 812)) | (1 << (mysqlParser.ST_ISEMPTY - 812)) | (1 << (mysqlParser.ST_ISSIMPLE - 812)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 812)) | (1 << (mysqlParser.ST_LINEFROMWKB - 812)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 812)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 812)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 812)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 812)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 812)) | (1 << (mysqlParser.ST_NUMPOINTS - 812)) | (1 << (mysqlParser.ST_OVERLAPS - 812)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 812)) | (1 << (mysqlParser.ST_POINTFROMWKB - 812)) | (1 << (mysqlParser.ST_POINTN - 812)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 812)) | (1 << (mysqlParser.ST_POLYFROMWKB - 812)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 812)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 812)))) != 0) or ((((_la - 876)) & ~0x3f) == 0 and ((1 << (_la - 876)) & ((1 << (mysqlParser.ST_SRID - 876)) | (1 << (mysqlParser.ST_STARTPOINT - 876)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 876)) | (1 << (mysqlParser.ST_TOUCHES - 876)) | (1 << (mysqlParser.ST_UNION - 876)) | (1 << (mysqlParser.ST_WITHIN - 876)) | (1 << (mysqlParser.ST_X - 876)) | (1 << (mysqlParser.ST_Y - 876)) | (1 << (mysqlParser.SUBDATE - 876)) | (1 << (mysqlParser.SUBSTRING_INDEX - 876)) | (1 << (mysqlParser.SUBTIME - 876)) | (1 << (mysqlParser.SYSTEM_USER - 876)) | (1 << (mysqlParser.TAN - 876)) | (1 << (mysqlParser.TIMEDIFF - 876)) | (1 << (mysqlParser.TIMESTAMPADD - 876)) | (1 << (mysqlParser.TIMESTAMPDIFF - 876)) | (1 << (mysqlParser.TIME_FORMAT - 876)) | (1 << (mysqlParser.TIME_TO_SEC - 876)) | (1 << (mysqlParser.TOUCHES - 876)) | (1 << (mysqlParser.TO_BASE64 - 876)) | (1 << (mysqlParser.TO_DAYS - 876)) | (1 << (mysqlParser.TO_SECONDS - 876)) | (1 << (mysqlParser.UCASE - 876)) | (1 << (mysqlParser.UNCOMPRESS - 876)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 876)) | (1 << (mysqlParser.UNHEX - 876)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 876)) | (1 << (mysqlParser.UPDATEXML - 876)) | (1 << (mysqlParser.UPPER - 876)) | (1 << (mysqlParser.UUID - 876)) | (1 << (mysqlParser.UUID_SHORT - 876)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 876)) | (1 << (mysqlParser.VERSION - 876)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 876)) | (1 << (mysqlParser.WEEKDAY - 876)) | (1 << (mysqlParser.WEEKOFYEAR - 876)) | (1 << (mysqlParser.WEIGHT_STRING - 876)) | (1 << (mysqlParser.WITHIN - 876)) | (1 << (mysqlParser.YEARWEEK - 876)) | (1 << (mysqlParser.Y_FUNCTION - 876)) | (1 << (mysqlParser.X_FUNCTION - 876)))) != 0) or ((((_la - 942)) & ~0x3f) == 0 and ((1 << (_la - 942)) & ((1 << (mysqlParser.LR_BRACKET - 942)) | (1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 942)) | (1 << (mysqlParser.ID - 942)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 942)))) != 0):
                self.state = 3858
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,549,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3853
                        self.declareVariable()
                        self.state = 3854
                        self.match(mysqlParser.SEMI) 
                    self.state = 3860
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,549,self._ctx)

                self.state = 3866
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,550,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3861
                        self.declareCondition()
                        self.state = 3862
                        self.match(mysqlParser.SEMI) 
                    self.state = 3868
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,550,self._ctx)

                self.state = 3874
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,551,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3869
                        self.declareCursor()
                        self.state = 3870
                        self.match(mysqlParser.SEMI) 
                    self.state = 3876
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,551,self._ctx)

                self.state = 3882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.DECLARE:
                    self.state = 3877
                    self.declareHandler()
                    self.state = 3878
                    self.match(mysqlParser.SEMI)
                    self.state = 3884
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3886 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3885
                    self.procedureSqlStatement()
                    self.state = 3888 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 7)) & ~0x3f) == 0 and ((1 << (_la - 7)) & ((1 << (mysqlParser.ALTER - 7)) | (1 << (mysqlParser.ANALYZE - 7)) | (1 << (mysqlParser.CALL - 7)) | (1 << (mysqlParser.CASE - 7)) | (1 << (mysqlParser.CHANGE - 7)) | (1 << (mysqlParser.CHECK - 7)) | (1 << (mysqlParser.CREATE - 7)) | (1 << (mysqlParser.DELETE - 7)) | (1 << (mysqlParser.DESC - 7)) | (1 << (mysqlParser.DESCRIBE - 7)) | (1 << (mysqlParser.DROP - 7)) | (1 << (mysqlParser.EXPLAIN - 7)) | (1 << (mysqlParser.FETCH - 7)) | (1 << (mysqlParser.GRANT - 7)) | (1 << (mysqlParser.IF - 7)))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (mysqlParser.INSERT - 71)) | (1 << (mysqlParser.ITERATE - 71)) | (1 << (mysqlParser.KILL - 71)) | (1 << (mysqlParser.LEAVE - 71)) | (1 << (mysqlParser.LEFT - 71)) | (1 << (mysqlParser.LOAD - 71)) | (1 << (mysqlParser.LOCK - 71)) | (1 << (mysqlParser.LOOP - 71)) | (1 << (mysqlParser.OPTIMIZE - 71)) | (1 << (mysqlParser.PURGE - 71)) | (1 << (mysqlParser.RELEASE - 71)) | (1 << (mysqlParser.RENAME - 71)) | (1 << (mysqlParser.REPEAT - 71)) | (1 << (mysqlParser.REPLACE - 71)) | (1 << (mysqlParser.RETURN - 71)) | (1 << (mysqlParser.REVOKE - 71)) | (1 << (mysqlParser.RIGHT - 71)) | (1 << (mysqlParser.SELECT - 71)) | (1 << (mysqlParser.SET - 71)) | (1 << (mysqlParser.SHOW - 71)))) != 0) or ((((_la - 155)) & ~0x3f) == 0 and ((1 << (_la - 155)) & ((1 << (mysqlParser.UNLOCK - 155)) | (1 << (mysqlParser.UPDATE - 155)) | (1 << (mysqlParser.USE - 155)) | (1 << (mysqlParser.WHILE - 155)) | (1 << (mysqlParser.DATE - 155)) | (1 << (mysqlParser.TIME - 155)) | (1 << (mysqlParser.TIMESTAMP - 155)) | (1 << (mysqlParser.DATETIME - 155)) | (1 << (mysqlParser.YEAR - 155)) | (1 << (mysqlParser.TEXT - 155)) | (1 << (mysqlParser.ENUM - 155)) | (1 << (mysqlParser.COUNT - 155)))) != 0) or ((((_la - 236)) & ~0x3f) == 0 and ((1 << (_la - 236)) & ((1 << (mysqlParser.POSITION - 236)) | (1 << (mysqlParser.ACCOUNT - 236)) | (1 << (mysqlParser.ACTION - 236)) | (1 << (mysqlParser.AFTER - 236)) | (1 << (mysqlParser.AGGREGATE - 236)) | (1 << (mysqlParser.ALGORITHM - 236)) | (1 << (mysqlParser.ANY - 236)) | (1 << (mysqlParser.AT - 236)) | (1 << (mysqlParser.AUTHORS - 236)) | (1 << (mysqlParser.AUTOCOMMIT - 236)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 236)) | (1 << (mysqlParser.AUTO_INCREMENT - 236)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 236)) | (1 << (mysqlParser.BEGIN - 236)) | (1 << (mysqlParser.BINLOG - 236)) | (1 << (mysqlParser.BIT - 236)) | (1 << (mysqlParser.BLOCK - 236)) | (1 << (mysqlParser.BTREE - 236)) | (1 << (mysqlParser.CACHE - 236)) | (1 << (mysqlParser.CASCADED - 236)) | (1 << (mysqlParser.CHAIN - 236)) | (1 << (mysqlParser.CHANNEL - 236)) | (1 << (mysqlParser.CHECKSUM - 236)) | (1 << (mysqlParser.CIPHER - 236)) | (1 << (mysqlParser.CLIENT - 236)) | (1 << (mysqlParser.CLOSE - 236)) | (1 << (mysqlParser.COALESCE - 236)) | (1 << (mysqlParser.CODE - 236)) | (1 << (mysqlParser.COLUMNS - 236)) | (1 << (mysqlParser.COLUMN_FORMAT - 236)) | (1 << (mysqlParser.COMMENT - 236)) | (1 << (mysqlParser.COMMIT - 236)) | (1 << (mysqlParser.COMPACT - 236)) | (1 << (mysqlParser.COMPLETION - 236)) | (1 << (mysqlParser.COMPRESSED - 236)) | (1 << (mysqlParser.COMPRESSION - 236)) | (1 << (mysqlParser.CONCURRENT - 236)) | (1 << (mysqlParser.CONNECTION - 236)) | (1 << (mysqlParser.CONSISTENT - 236)) | (1 << (mysqlParser.CONTAINS - 236)) | (1 << (mysqlParser.CONTEXT - 236)) | (1 << (mysqlParser.CONTRIBUTORS - 236)) | (1 << (mysqlParser.COPY - 236)) | (1 << (mysqlParser.CPU - 236)) | (1 << (mysqlParser.DATA - 236)) | (1 << (mysqlParser.DATAFILE - 236)) | (1 << (mysqlParser.DEALLOCATE - 236)) | (1 << (mysqlParser.DEFAULT_AUTH - 236)) | (1 << (mysqlParser.DEFINER - 236)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 236)) | (1 << (mysqlParser.DIRECTORY - 236)) | (1 << (mysqlParser.DISABLE - 236)) | (1 << (mysqlParser.DISCARD - 236)) | (1 << (mysqlParser.DISK - 236)) | (1 << (mysqlParser.DO - 236)))) != 0) or ((((_la - 300)) & ~0x3f) == 0 and ((1 << (_la - 300)) & ((1 << (mysqlParser.DUMPFILE - 300)) | (1 << (mysqlParser.DUPLICATE - 300)) | (1 << (mysqlParser.DYNAMIC - 300)) | (1 << (mysqlParser.ENABLE - 300)) | (1 << (mysqlParser.ENCRYPTION - 300)) | (1 << (mysqlParser.ENDS - 300)) | (1 << (mysqlParser.ENGINE - 300)) | (1 << (mysqlParser.ENGINES - 300)) | (1 << (mysqlParser.ERROR - 300)) | (1 << (mysqlParser.ERRORS - 300)) | (1 << (mysqlParser.ESCAPE - 300)) | (1 << (mysqlParser.EVEN - 300)) | (1 << (mysqlParser.EVENT - 300)) | (1 << (mysqlParser.EVENTS - 300)) | (1 << (mysqlParser.EVERY - 300)) | (1 << (mysqlParser.EXCHANGE - 300)) | (1 << (mysqlParser.EXCLUSIVE - 300)) | (1 << (mysqlParser.EXPIRE - 300)) | (1 << (mysqlParser.EXTENT_SIZE - 300)) | (1 << (mysqlParser.FAULTS - 300)) | (1 << (mysqlParser.FIELDS - 300)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 300)) | (1 << (mysqlParser.FILTER - 300)) | (1 << (mysqlParser.FIRST - 300)) | (1 << (mysqlParser.FIXED - 300)) | (1 << (mysqlParser.FLUSH - 300)) | (1 << (mysqlParser.FOLLOWS - 300)) | (1 << (mysqlParser.FULL - 300)) | (1 << (mysqlParser.FUNCTION - 300)) | (1 << (mysqlParser.GLOBAL - 300)) | (1 << (mysqlParser.GRANTS - 300)) | (1 << (mysqlParser.GROUP_REPLICATION - 300)) | (1 << (mysqlParser.HANDLER - 300)) | (1 << (mysqlParser.HASH - 300)) | (1 << (mysqlParser.HELP - 300)) | (1 << (mysqlParser.HOST - 300)) | (1 << (mysqlParser.IDENTIFIED - 300)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 300)) | (1 << (mysqlParser.IMPORT - 300)) | (1 << (mysqlParser.INDEXES - 300)) | (1 << (mysqlParser.INITIAL_SIZE - 300)) | (1 << (mysqlParser.INPLACE - 300)) | (1 << (mysqlParser.INSERT_METHOD - 300)) | (1 << (mysqlParser.INSTALL - 300)) | (1 << (mysqlParser.INSTANCE - 300)) | (1 << (mysqlParser.INVOKER - 300)) | (1 << (mysqlParser.IO - 300)) | (1 << (mysqlParser.IO_THREAD - 300)) | (1 << (mysqlParser.IPC - 300)) | (1 << (mysqlParser.ISOLATION - 300)) | (1 << (mysqlParser.ISSUER - 300)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 300)) | (1 << (mysqlParser.LANGUAGE - 300)) | (1 << (mysqlParser.LAST - 300)) | (1 << (mysqlParser.LEAVES - 300)) | (1 << (mysqlParser.LESS - 300)))) != 0) or ((((_la - 364)) & ~0x3f) == 0 and ((1 << (_la - 364)) & ((1 << (mysqlParser.LEVEL - 364)) | (1 << (mysqlParser.LIST - 364)) | (1 << (mysqlParser.LOCAL - 364)) | (1 << (mysqlParser.LOGFILE - 364)) | (1 << (mysqlParser.LOGS - 364)) | (1 << (mysqlParser.MASTER - 364)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 364)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 364)) | (1 << (mysqlParser.MASTER_DELAY - 364)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 364)) | (1 << (mysqlParser.MASTER_HOST - 364)) | (1 << (mysqlParser.MASTER_LOG_FILE - 364)) | (1 << (mysqlParser.MASTER_LOG_POS - 364)) | (1 << (mysqlParser.MASTER_PASSWORD - 364)) | (1 << (mysqlParser.MASTER_PORT - 364)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 364)) | (1 << (mysqlParser.MASTER_SSL - 364)) | (1 << (mysqlParser.MASTER_SSL_CA - 364)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 364)) | (1 << (mysqlParser.MASTER_SSL_CERT - 364)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 364)) | (1 << (mysqlParser.MASTER_SSL_CRL - 364)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 364)) | (1 << (mysqlParser.MASTER_SSL_KEY - 364)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 364)) | (1 << (mysqlParser.MASTER_USER - 364)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 364)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 364)) | (1 << (mysqlParser.MAX_ROWS - 364)) | (1 << (mysqlParser.MAX_SIZE - 364)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 364)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 364)) | (1 << (mysqlParser.MERGE - 364)) | (1 << (mysqlParser.MID - 364)) | (1 << (mysqlParser.MIGRATE - 364)) | (1 << (mysqlParser.MIN_ROWS - 364)) | (1 << (mysqlParser.MODIFY - 364)) | (1 << (mysqlParser.MUTEX - 364)) | (1 << (mysqlParser.MYSQL - 364)) | (1 << (mysqlParser.NAME - 364)) | (1 << (mysqlParser.NAMES - 364)) | (1 << (mysqlParser.NCHAR - 364)) | (1 << (mysqlParser.NEVER - 364)) | (1 << (mysqlParser.NO - 364)) | (1 << (mysqlParser.NODEGROUP - 364)) | (1 << (mysqlParser.NONE - 364)) | (1 << (mysqlParser.OFFLINE - 364)) | (1 << (mysqlParser.OFFSET - 364)) | (1 << (mysqlParser.OJ - 364)) | (1 << (mysqlParser.OLD_PASSWORD - 364)) | (1 << (mysqlParser.ONE - 364)) | (1 << (mysqlParser.ONLINE - 364)) | (1 << (mysqlParser.ONLY - 364)) | (1 << (mysqlParser.OPEN - 364)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 364)) | (1 << (mysqlParser.OPTIONS - 364)) | (1 << (mysqlParser.OWNER - 364)) | (1 << (mysqlParser.PACK_KEYS - 364)) | (1 << (mysqlParser.PAGE - 364)) | (1 << (mysqlParser.PARSER - 364)) | (1 << (mysqlParser.PARTIAL - 364)))) != 0) or ((((_la - 428)) & ~0x3f) == 0 and ((1 << (_la - 428)) & ((1 << (mysqlParser.PARTITIONING - 428)) | (1 << (mysqlParser.PARTITIONS - 428)) | (1 << (mysqlParser.PASSWORD - 428)) | (1 << (mysqlParser.PHASE - 428)) | (1 << (mysqlParser.PLUGIN_DIR - 428)) | (1 << (mysqlParser.PLUGINS - 428)) | (1 << (mysqlParser.PORT - 428)) | (1 << (mysqlParser.PRECEDES - 428)) | (1 << (mysqlParser.PREPARE - 428)) | (1 << (mysqlParser.PRESERVE - 428)) | (1 << (mysqlParser.PREV - 428)) | (1 << (mysqlParser.PROCESSLIST - 428)) | (1 << (mysqlParser.PROFILE - 428)) | (1 << (mysqlParser.PROFILES - 428)) | (1 << (mysqlParser.PROXY - 428)) | (1 << (mysqlParser.QUERY - 428)) | (1 << (mysqlParser.QUICK - 428)) | (1 << (mysqlParser.REBUILD - 428)) | (1 << (mysqlParser.RECOVER - 428)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 428)) | (1 << (mysqlParser.REDUNDANT - 428)) | (1 << (mysqlParser.RELAY_LOG_FILE - 428)) | (1 << (mysqlParser.RELAY_LOG_POS - 428)) | (1 << (mysqlParser.RELAYLOG - 428)) | (1 << (mysqlParser.REMOVE - 428)) | (1 << (mysqlParser.REORGANIZE - 428)) | (1 << (mysqlParser.REPAIR - 428)) | (1 << (mysqlParser.REPLICATE_DO_DB - 428)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 428)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 428)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 428)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 428)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 428)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 428)) | (1 << (mysqlParser.REPLICATION - 428)) | (1 << (mysqlParser.RESET - 428)) | (1 << (mysqlParser.RESUME - 428)) | (1 << (mysqlParser.RETURNS - 428)) | (1 << (mysqlParser.ROLLBACK - 428)) | (1 << (mysqlParser.ROLLUP - 428)) | (1 << (mysqlParser.ROTATE - 428)) | (1 << (mysqlParser.ROW - 428)) | (1 << (mysqlParser.ROWS - 428)) | (1 << (mysqlParser.ROW_FORMAT - 428)) | (1 << (mysqlParser.SAVEPOINT - 428)) | (1 << (mysqlParser.SCHEDULE - 428)) | (1 << (mysqlParser.SECURITY - 428)) | (1 << (mysqlParser.SERVER - 428)) | (1 << (mysqlParser.SESSION - 428)) | (1 << (mysqlParser.SHARE - 428)) | (1 << (mysqlParser.SHARED - 428)) | (1 << (mysqlParser.SIGNED - 428)) | (1 << (mysqlParser.SIMPLE - 428)) | (1 << (mysqlParser.SLAVE - 428)) | (1 << (mysqlParser.SNAPSHOT - 428)) | (1 << (mysqlParser.SOCKET - 428)) | (1 << (mysqlParser.SOME - 428)) | (1 << (mysqlParser.SOUNDS - 428)) | (1 << (mysqlParser.SOURCE - 428)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 428)))) != 0) or ((((_la - 492)) & ~0x3f) == 0 and ((1 << (_la - 492)) & ((1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 492)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 492)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 492)) | (1 << (mysqlParser.SQL_CACHE - 492)) | (1 << (mysqlParser.SQL_NO_CACHE - 492)) | (1 << (mysqlParser.SQL_THREAD - 492)) | (1 << (mysqlParser.START - 492)) | (1 << (mysqlParser.STARTS - 492)) | (1 << (mysqlParser.STATS_AUTO_RECALC - 492)) | (1 << (mysqlParser.STATS_PERSISTENT - 492)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 492)) | (1 << (mysqlParser.STATUS - 492)) | (1 << (mysqlParser.STOP - 492)) | (1 << (mysqlParser.STORAGE - 492)) | (1 << (mysqlParser.STRING - 492)) | (1 << (mysqlParser.SUBJECT - 492)) | (1 << (mysqlParser.SUBPARTITION - 492)) | (1 << (mysqlParser.SUBPARTITIONS - 492)) | (1 << (mysqlParser.SUSPEND - 492)) | (1 << (mysqlParser.SWAPS - 492)) | (1 << (mysqlParser.SWITCHES - 492)) | (1 << (mysqlParser.TABLESPACE - 492)) | (1 << (mysqlParser.TEMPORARY - 492)) | (1 << (mysqlParser.TEMPTABLE - 492)) | (1 << (mysqlParser.THAN - 492)) | (1 << (mysqlParser.TRANSACTION - 492)) | (1 << (mysqlParser.TRUNCATE - 492)) | (1 << (mysqlParser.UNDEFINED - 492)) | (1 << (mysqlParser.UNDOFILE - 492)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 492)) | (1 << (mysqlParser.UNINSTALL - 492)) | (1 << (mysqlParser.UNKNOWN - 492)) | (1 << (mysqlParser.UPGRADE - 492)) | (1 << (mysqlParser.USER - 492)) | (1 << (mysqlParser.VALIDATION - 492)) | (1 << (mysqlParser.VALUE - 492)) | (1 << (mysqlParser.VARIABLES - 492)) | (1 << (mysqlParser.VIEW - 492)) | (1 << (mysqlParser.WAIT - 492)) | (1 << (mysqlParser.WARNINGS - 492)) | (1 << (mysqlParser.WITHOUT - 492)) | (1 << (mysqlParser.WORK - 492)) | (1 << (mysqlParser.WRAPPER - 492)) | (1 << (mysqlParser.X509 - 492)) | (1 << (mysqlParser.XA - 492)) | (1 << (mysqlParser.XML - 492)) | (1 << (mysqlParser.QUARTER - 492)) | (1 << (mysqlParser.MONTH - 492)) | (1 << (mysqlParser.DAY - 492)) | (1 << (mysqlParser.HOUR - 492)) | (1 << (mysqlParser.MINUTE - 492)) | (1 << (mysqlParser.WEEK - 492)) | (1 << (mysqlParser.SECOND - 492)) | (1 << (mysqlParser.MICROSECOND - 492)))) != 0) or ((((_la - 556)) & ~0x3f) == 0 and ((1 << (_la - 556)) & ((1 << (mysqlParser.TABLES - 556)) | (1 << (mysqlParser.ROUTINE - 556)) | (1 << (mysqlParser.EXECUTE - 556)) | (1 << (mysqlParser.FILE - 556)) | (1 << (mysqlParser.PROCESS - 556)) | (1 << (mysqlParser.RELOAD - 556)) | (1 << (mysqlParser.SHUTDOWN - 556)) | (1 << (mysqlParser.SUPER - 556)) | (1 << (mysqlParser.PRIVILEGES - 556)) | (1 << (mysqlParser.ARMSCII8 - 556)) | (1 << (mysqlParser.ASCII - 556)) | (1 << (mysqlParser.BIG5 - 556)) | (1 << (mysqlParser.CP1250 - 556)) | (1 << (mysqlParser.CP1251 - 556)) | (1 << (mysqlParser.CP1256 - 556)) | (1 << (mysqlParser.CP1257 - 556)) | (1 << (mysqlParser.CP850 - 556)) | (1 << (mysqlParser.CP852 - 556)) | (1 << (mysqlParser.CP866 - 556)) | (1 << (mysqlParser.CP932 - 556)) | (1 << (mysqlParser.DEC8 - 556)) | (1 << (mysqlParser.EUCJPMS - 556)) | (1 << (mysqlParser.EUCKR - 556)) | (1 << (mysqlParser.GB2312 - 556)) | (1 << (mysqlParser.GBK - 556)) | (1 << (mysqlParser.GEOSTD8 - 556)) | (1 << (mysqlParser.GREEK - 556)) | (1 << (mysqlParser.HEBREW - 556)) | (1 << (mysqlParser.HP8 - 556)) | (1 << (mysqlParser.KEYBCS2 - 556)) | (1 << (mysqlParser.KOI8R - 556)) | (1 << (mysqlParser.KOI8U - 556)) | (1 << (mysqlParser.LATIN1 - 556)) | (1 << (mysqlParser.LATIN2 - 556)) | (1 << (mysqlParser.LATIN5 - 556)) | (1 << (mysqlParser.LATIN7 - 556)) | (1 << (mysqlParser.MACCE - 556)) | (1 << (mysqlParser.MACROMAN - 556)) | (1 << (mysqlParser.SJIS - 556)) | (1 << (mysqlParser.SWE7 - 556)) | (1 << (mysqlParser.TIS620 - 556)) | (1 << (mysqlParser.UCS2 - 556)) | (1 << (mysqlParser.UJIS - 556)) | (1 << (mysqlParser.UTF16 - 556)) | (1 << (mysqlParser.UTF16LE - 556)) | (1 << (mysqlParser.UTF32 - 556)) | (1 << (mysqlParser.UTF8 - 556)) | (1 << (mysqlParser.UTF8MB3 - 556)) | (1 << (mysqlParser.UTF8MB4 - 556)) | (1 << (mysqlParser.ARCHIVE - 556)) | (1 << (mysqlParser.BLACKHOLE - 556)) | (1 << (mysqlParser.CSV - 556)) | (1 << (mysqlParser.FEDERATED - 556)) | (1 << (mysqlParser.INNODB - 556)) | (1 << (mysqlParser.MEMORY - 556)) | (1 << (mysqlParser.MRG_MYISAM - 556)) | (1 << (mysqlParser.MYISAM - 556)) | (1 << (mysqlParser.NDB - 556)) | (1 << (mysqlParser.NDBCLUSTER - 556)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 556)) | (1 << (mysqlParser.REPEATABLE - 556)) | (1 << (mysqlParser.COMMITTED - 556)) | (1 << (mysqlParser.UNCOMMITTED - 556)) | (1 << (mysqlParser.SERIALIZABLE - 556)))) != 0) or ((((_la - 620)) & ~0x3f) == 0 and ((1 << (_la - 620)) & ((1 << (mysqlParser.GEOMETRYCOLLECTION - 620)) | (1 << (mysqlParser.LINESTRING - 620)) | (1 << (mysqlParser.MULTILINESTRING - 620)) | (1 << (mysqlParser.MULTIPOINT - 620)) | (1 << (mysqlParser.MULTIPOLYGON - 620)) | (1 << (mysqlParser.POINT - 620)) | (1 << (mysqlParser.POLYGON - 620)) | (1 << (mysqlParser.ABS - 620)) | (1 << (mysqlParser.ACOS - 620)) | (1 << (mysqlParser.ADDDATE - 620)) | (1 << (mysqlParser.ADDTIME - 620)) | (1 << (mysqlParser.AES_DECRYPT - 620)) | (1 << (mysqlParser.AES_ENCRYPT - 620)) | (1 << (mysqlParser.AREA - 620)) | (1 << (mysqlParser.ASBINARY - 620)) | (1 << (mysqlParser.ASIN - 620)) | (1 << (mysqlParser.ASTEXT - 620)) | (1 << (mysqlParser.ASWKB - 620)) | (1 << (mysqlParser.ASWKT - 620)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 620)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 620)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 620)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 620)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 620)) | (1 << (mysqlParser.ATAN - 620)) | (1 << (mysqlParser.ATAN2 - 620)) | (1 << (mysqlParser.BENCHMARK - 620)) | (1 << (mysqlParser.BIN - 620)) | (1 << (mysqlParser.BIT_COUNT - 620)) | (1 << (mysqlParser.BIT_LENGTH - 620)) | (1 << (mysqlParser.BUFFER - 620)) | (1 << (mysqlParser.CEIL - 620)) | (1 << (mysqlParser.CEILING - 620)) | (1 << (mysqlParser.CENTROID - 620)) | (1 << (mysqlParser.CHARACTER_LENGTH - 620)) | (1 << (mysqlParser.CHARSET - 620)) | (1 << (mysqlParser.CHAR_LENGTH - 620)) | (1 << (mysqlParser.COERCIBILITY - 620)) | (1 << (mysqlParser.COLLATION - 620)) | (1 << (mysqlParser.COMPRESS - 620)) | (1 << (mysqlParser.CONCAT - 620)) | (1 << (mysqlParser.CONCAT_WS - 620)) | (1 << (mysqlParser.CONNECTION_ID - 620)) | (1 << (mysqlParser.CONV - 620)) | (1 << (mysqlParser.CONVERT_TZ - 620)) | (1 << (mysqlParser.COS - 620)) | (1 << (mysqlParser.COT - 620)) | (1 << (mysqlParser.CRC32 - 620)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 620)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 620)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 620)) | (1 << (mysqlParser.CREATE_DIGEST - 620)) | (1 << (mysqlParser.CROSSES - 620)) | (1 << (mysqlParser.DATEDIFF - 620)) | (1 << (mysqlParser.DATE_FORMAT - 620)) | (1 << (mysqlParser.DAYNAME - 620)) | (1 << (mysqlParser.DAYOFMONTH - 620)) | (1 << (mysqlParser.DAYOFWEEK - 620)) | (1 << (mysqlParser.DAYOFYEAR - 620)) | (1 << (mysqlParser.DECODE - 620)) | (1 << (mysqlParser.DEGREES - 620)) | (1 << (mysqlParser.DES_DECRYPT - 620)) | (1 << (mysqlParser.DES_ENCRYPT - 620)) | (1 << (mysqlParser.DIMENSION - 620)))) != 0) or ((((_la - 684)) & ~0x3f) == 0 and ((1 << (_la - 684)) & ((1 << (mysqlParser.DISJOINT - 684)) | (1 << (mysqlParser.ELT - 684)) | (1 << (mysqlParser.ENCODE - 684)) | (1 << (mysqlParser.ENCRYPT - 684)) | (1 << (mysqlParser.ENDPOINT - 684)) | (1 << (mysqlParser.ENVELOPE - 684)) | (1 << (mysqlParser.EQUALS - 684)) | (1 << (mysqlParser.EXP - 684)) | (1 << (mysqlParser.EXPORT_SET - 684)) | (1 << (mysqlParser.EXTERIORRING - 684)) | (1 << (mysqlParser.EXTRACTVALUE - 684)) | (1 << (mysqlParser.FIELD - 684)) | (1 << (mysqlParser.FIND_IN_SET - 684)) | (1 << (mysqlParser.FLOOR - 684)) | (1 << (mysqlParser.FORMAT - 684)) | (1 << (mysqlParser.FOUND_ROWS - 684)) | (1 << (mysqlParser.FROM_BASE64 - 684)) | (1 << (mysqlParser.FROM_DAYS - 684)) | (1 << (mysqlParser.FROM_UNIXTIME - 684)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 684)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 684)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 684)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 684)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 684)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 684)) | (1 << (mysqlParser.GEOMETRYN - 684)) | (1 << (mysqlParser.GEOMETRYTYPE - 684)) | (1 << (mysqlParser.GEOMFROMTEXT - 684)) | (1 << (mysqlParser.GEOMFROMWKB - 684)) | (1 << (mysqlParser.GET_FORMAT - 684)) | (1 << (mysqlParser.GET_LOCK - 684)) | (1 << (mysqlParser.GLENGTH - 684)) | (1 << (mysqlParser.GREATEST - 684)) | (1 << (mysqlParser.GTID_SUBSET - 684)) | (1 << (mysqlParser.GTID_SUBTRACT - 684)) | (1 << (mysqlParser.HEX - 684)) | (1 << (mysqlParser.IFNULL - 684)) | (1 << (mysqlParser.INET6_ATON - 684)) | (1 << (mysqlParser.INET6_NTOA - 684)) | (1 << (mysqlParser.INET_ATON - 684)) | (1 << (mysqlParser.INET_NTOA - 684)) | (1 << (mysqlParser.INSTR - 684)) | (1 << (mysqlParser.INTERIORRINGN - 684)) | (1 << (mysqlParser.INTERSECTS - 684)) | (1 << (mysqlParser.ISCLOSED - 684)) | (1 << (mysqlParser.ISEMPTY - 684)) | (1 << (mysqlParser.ISNULL - 684)) | (1 << (mysqlParser.ISSIMPLE - 684)) | (1 << (mysqlParser.IS_FREE_LOCK - 684)) | (1 << (mysqlParser.IS_IPV4 - 684)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 684)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 684)) | (1 << (mysqlParser.IS_IPV6 - 684)) | (1 << (mysqlParser.IS_USED_LOCK - 684)) | (1 << (mysqlParser.LAST_INSERT_ID - 684)) | (1 << (mysqlParser.LCASE - 684)) | (1 << (mysqlParser.LEAST - 684)) | (1 << (mysqlParser.LENGTH - 684)) | (1 << (mysqlParser.LINEFROMTEXT - 684)) | (1 << (mysqlParser.LINEFROMWKB - 684)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 684)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 684)) | (1 << (mysqlParser.LN - 684)) | (1 << (mysqlParser.LOAD_FILE - 684)))) != 0) or ((((_la - 748)) & ~0x3f) == 0 and ((1 << (_la - 748)) & ((1 << (mysqlParser.LOCATE - 748)) | (1 << (mysqlParser.LOG - 748)) | (1 << (mysqlParser.LOG10 - 748)) | (1 << (mysqlParser.LOG2 - 748)) | (1 << (mysqlParser.LOWER - 748)) | (1 << (mysqlParser.LPAD - 748)) | (1 << (mysqlParser.LTRIM - 748)) | (1 << (mysqlParser.MAKEDATE - 748)) | (1 << (mysqlParser.MAKETIME - 748)) | (1 << (mysqlParser.MAKE_SET - 748)) | (1 << (mysqlParser.MASTER_POS_WAIT - 748)) | (1 << (mysqlParser.MBRCONTAINS - 748)) | (1 << (mysqlParser.MBRDISJOINT - 748)) | (1 << (mysqlParser.MBREQUAL - 748)) | (1 << (mysqlParser.MBRINTERSECTS - 748)) | (1 << (mysqlParser.MBROVERLAPS - 748)) | (1 << (mysqlParser.MBRTOUCHES - 748)) | (1 << (mysqlParser.MBRWITHIN - 748)) | (1 << (mysqlParser.MD5 - 748)) | (1 << (mysqlParser.MLINEFROMTEXT - 748)) | (1 << (mysqlParser.MLINEFROMWKB - 748)) | (1 << (mysqlParser.MONTHNAME - 748)) | (1 << (mysqlParser.MPOINTFROMTEXT - 748)) | (1 << (mysqlParser.MPOINTFROMWKB - 748)) | (1 << (mysqlParser.MPOLYFROMTEXT - 748)) | (1 << (mysqlParser.MPOLYFROMWKB - 748)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 748)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 748)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 748)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 748)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 748)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 748)) | (1 << (mysqlParser.NAME_CONST - 748)) | (1 << (mysqlParser.NULLIF - 748)) | (1 << (mysqlParser.NUMGEOMETRIES - 748)) | (1 << (mysqlParser.NUMINTERIORRINGS - 748)) | (1 << (mysqlParser.NUMPOINTS - 748)) | (1 << (mysqlParser.OCT - 748)) | (1 << (mysqlParser.OCTET_LENGTH - 748)) | (1 << (mysqlParser.ORD - 748)) | (1 << (mysqlParser.OVERLAPS - 748)) | (1 << (mysqlParser.PERIOD_ADD - 748)) | (1 << (mysqlParser.PERIOD_DIFF - 748)) | (1 << (mysqlParser.PI - 748)) | (1 << (mysqlParser.POINTFROMTEXT - 748)) | (1 << (mysqlParser.POINTFROMWKB - 748)) | (1 << (mysqlParser.POINTN - 748)) | (1 << (mysqlParser.POLYFROMTEXT - 748)) | (1 << (mysqlParser.POLYFROMWKB - 748)) | (1 << (mysqlParser.POLYGONFROMTEXT - 748)) | (1 << (mysqlParser.POLYGONFROMWKB - 748)) | (1 << (mysqlParser.POW - 748)) | (1 << (mysqlParser.POWER - 748)) | (1 << (mysqlParser.QUOTE - 748)) | (1 << (mysqlParser.RADIANS - 748)) | (1 << (mysqlParser.RAND - 748)) | (1 << (mysqlParser.RANDOM_BYTES - 748)) | (1 << (mysqlParser.RELEASE_LOCK - 748)) | (1 << (mysqlParser.REVERSE - 748)) | (1 << (mysqlParser.ROUND - 748)) | (1 << (mysqlParser.ROW_COUNT - 748)) | (1 << (mysqlParser.RPAD - 748)) | (1 << (mysqlParser.RTRIM - 748)) | (1 << (mysqlParser.SEC_TO_TIME - 748)))) != 0) or ((((_la - 812)) & ~0x3f) == 0 and ((1 << (_la - 812)) & ((1 << (mysqlParser.SESSION_USER - 812)) | (1 << (mysqlParser.SHA - 812)) | (1 << (mysqlParser.SHA1 - 812)) | (1 << (mysqlParser.SHA2 - 812)) | (1 << (mysqlParser.SIGN - 812)) | (1 << (mysqlParser.SIN - 812)) | (1 << (mysqlParser.SLEEP - 812)) | (1 << (mysqlParser.SOUNDEX - 812)) | (1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 812)) | (1 << (mysqlParser.SQRT - 812)) | (1 << (mysqlParser.SRID - 812)) | (1 << (mysqlParser.STARTPOINT - 812)) | (1 << (mysqlParser.STRCMP - 812)) | (1 << (mysqlParser.STR_TO_DATE - 812)) | (1 << (mysqlParser.ST_AREA - 812)) | (1 << (mysqlParser.ST_ASBINARY - 812)) | (1 << (mysqlParser.ST_ASTEXT - 812)) | (1 << (mysqlParser.ST_ASWKB - 812)) | (1 << (mysqlParser.ST_ASWKT - 812)) | (1 << (mysqlParser.ST_BUFFER - 812)) | (1 << (mysqlParser.ST_CENTROID - 812)) | (1 << (mysqlParser.ST_CONTAINS - 812)) | (1 << (mysqlParser.ST_CROSSES - 812)) | (1 << (mysqlParser.ST_DIFFERENCE - 812)) | (1 << (mysqlParser.ST_DIMENSION - 812)) | (1 << (mysqlParser.ST_DISJOINT - 812)) | (1 << (mysqlParser.ST_DISTANCE - 812)) | (1 << (mysqlParser.ST_ENDPOINT - 812)) | (1 << (mysqlParser.ST_ENVELOPE - 812)) | (1 << (mysqlParser.ST_EQUALS - 812)) | (1 << (mysqlParser.ST_EXTERIORRING - 812)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 812)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 812)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 812)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 812)) | (1 << (mysqlParser.ST_GEOMETRYN - 812)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 812)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 812)) | (1 << (mysqlParser.ST_INTERIORRINGN - 812)) | (1 << (mysqlParser.ST_INTERSECTION - 812)) | (1 << (mysqlParser.ST_INTERSECTS - 812)) | (1 << (mysqlParser.ST_ISCLOSED - 812)) | (1 << (mysqlParser.ST_ISEMPTY - 812)) | (1 << (mysqlParser.ST_ISSIMPLE - 812)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 812)) | (1 << (mysqlParser.ST_LINEFROMWKB - 812)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 812)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 812)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 812)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 812)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 812)) | (1 << (mysqlParser.ST_NUMPOINTS - 812)) | (1 << (mysqlParser.ST_OVERLAPS - 812)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 812)) | (1 << (mysqlParser.ST_POINTFROMWKB - 812)) | (1 << (mysqlParser.ST_POINTN - 812)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 812)) | (1 << (mysqlParser.ST_POLYFROMWKB - 812)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 812)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 812)))) != 0) or ((((_la - 876)) & ~0x3f) == 0 and ((1 << (_la - 876)) & ((1 << (mysqlParser.ST_SRID - 876)) | (1 << (mysqlParser.ST_STARTPOINT - 876)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 876)) | (1 << (mysqlParser.ST_TOUCHES - 876)) | (1 << (mysqlParser.ST_UNION - 876)) | (1 << (mysqlParser.ST_WITHIN - 876)) | (1 << (mysqlParser.ST_X - 876)) | (1 << (mysqlParser.ST_Y - 876)) | (1 << (mysqlParser.SUBDATE - 876)) | (1 << (mysqlParser.SUBSTRING_INDEX - 876)) | (1 << (mysqlParser.SUBTIME - 876)) | (1 << (mysqlParser.SYSTEM_USER - 876)) | (1 << (mysqlParser.TAN - 876)) | (1 << (mysqlParser.TIMEDIFF - 876)) | (1 << (mysqlParser.TIMESTAMPADD - 876)) | (1 << (mysqlParser.TIMESTAMPDIFF - 876)) | (1 << (mysqlParser.TIME_FORMAT - 876)) | (1 << (mysqlParser.TIME_TO_SEC - 876)) | (1 << (mysqlParser.TOUCHES - 876)) | (1 << (mysqlParser.TO_BASE64 - 876)) | (1 << (mysqlParser.TO_DAYS - 876)) | (1 << (mysqlParser.TO_SECONDS - 876)) | (1 << (mysqlParser.UCASE - 876)) | (1 << (mysqlParser.UNCOMPRESS - 876)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 876)) | (1 << (mysqlParser.UNHEX - 876)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 876)) | (1 << (mysqlParser.UPDATEXML - 876)) | (1 << (mysqlParser.UPPER - 876)) | (1 << (mysqlParser.UUID - 876)) | (1 << (mysqlParser.UUID_SHORT - 876)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 876)) | (1 << (mysqlParser.VERSION - 876)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 876)) | (1 << (mysqlParser.WEEKDAY - 876)) | (1 << (mysqlParser.WEEKOFYEAR - 876)) | (1 << (mysqlParser.WEIGHT_STRING - 876)) | (1 << (mysqlParser.WITHIN - 876)) | (1 << (mysqlParser.YEARWEEK - 876)) | (1 << (mysqlParser.Y_FUNCTION - 876)) | (1 << (mysqlParser.X_FUNCTION - 876)))) != 0) or ((((_la - 942)) & ~0x3f) == 0 and ((1 << (_la - 942)) & ((1 << (mysqlParser.LR_BRACKET - 942)) | (1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 942)) | (1 << (mysqlParser.ID - 942)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 942)))) != 0)):
                        break



            self.state = 3892
            self.match(mysqlParser.END)
            self.state = 3894
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.LEFT or _la==mysqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (mysqlParser.DATE - 180)) | (1 << (mysqlParser.TIME - 180)) | (1 << (mysqlParser.TIMESTAMP - 180)) | (1 << (mysqlParser.DATETIME - 180)) | (1 << (mysqlParser.YEAR - 180)) | (1 << (mysqlParser.TEXT - 180)) | (1 << (mysqlParser.ENUM - 180)) | (1 << (mysqlParser.COUNT - 180)) | (1 << (mysqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (mysqlParser.ACCOUNT - 244)) | (1 << (mysqlParser.ACTION - 244)) | (1 << (mysqlParser.AFTER - 244)) | (1 << (mysqlParser.AGGREGATE - 244)) | (1 << (mysqlParser.ALGORITHM - 244)) | (1 << (mysqlParser.ANY - 244)) | (1 << (mysqlParser.AT - 244)) | (1 << (mysqlParser.AUTHORS - 244)) | (1 << (mysqlParser.AUTOCOMMIT - 244)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (mysqlParser.AUTO_INCREMENT - 244)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 244)) | (1 << (mysqlParser.BEGIN - 244)) | (1 << (mysqlParser.BINLOG - 244)) | (1 << (mysqlParser.BIT - 244)) | (1 << (mysqlParser.BLOCK - 244)) | (1 << (mysqlParser.BTREE - 244)) | (1 << (mysqlParser.CASCADED - 244)) | (1 << (mysqlParser.CHAIN - 244)) | (1 << (mysqlParser.CHANNEL - 244)) | (1 << (mysqlParser.CHECKSUM - 244)) | (1 << (mysqlParser.CIPHER - 244)) | (1 << (mysqlParser.CLIENT - 244)) | (1 << (mysqlParser.COALESCE - 244)) | (1 << (mysqlParser.CODE - 244)) | (1 << (mysqlParser.COLUMNS - 244)) | (1 << (mysqlParser.COLUMN_FORMAT - 244)) | (1 << (mysqlParser.COMMENT - 244)) | (1 << (mysqlParser.COMMIT - 244)) | (1 << (mysqlParser.COMPACT - 244)) | (1 << (mysqlParser.COMPLETION - 244)) | (1 << (mysqlParser.COMPRESSED - 244)) | (1 << (mysqlParser.COMPRESSION - 244)) | (1 << (mysqlParser.CONCURRENT - 244)) | (1 << (mysqlParser.CONNECTION - 244)) | (1 << (mysqlParser.CONSISTENT - 244)) | (1 << (mysqlParser.CONTAINS - 244)) | (1 << (mysqlParser.CONTEXT - 244)) | (1 << (mysqlParser.CONTRIBUTORS - 244)) | (1 << (mysqlParser.COPY - 244)) | (1 << (mysqlParser.CPU - 244)) | (1 << (mysqlParser.DATA - 244)) | (1 << (mysqlParser.DATAFILE - 244)) | (1 << (mysqlParser.DEALLOCATE - 244)) | (1 << (mysqlParser.DEFAULT_AUTH - 244)) | (1 << (mysqlParser.DEFINER - 244)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 244)) | (1 << (mysqlParser.DIRECTORY - 244)) | (1 << (mysqlParser.DISABLE - 244)) | (1 << (mysqlParser.DISCARD - 244)) | (1 << (mysqlParser.DISK - 244)) | (1 << (mysqlParser.DO - 244)) | (1 << (mysqlParser.DUMPFILE - 244)) | (1 << (mysqlParser.DUPLICATE - 244)) | (1 << (mysqlParser.DYNAMIC - 244)) | (1 << (mysqlParser.ENABLE - 244)) | (1 << (mysqlParser.ENCRYPTION - 244)) | (1 << (mysqlParser.ENDS - 244)) | (1 << (mysqlParser.ENGINE - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (mysqlParser.ENGINES - 308)) | (1 << (mysqlParser.ERROR - 308)) | (1 << (mysqlParser.ERRORS - 308)) | (1 << (mysqlParser.ESCAPE - 308)) | (1 << (mysqlParser.EVEN - 308)) | (1 << (mysqlParser.EVENT - 308)) | (1 << (mysqlParser.EVENTS - 308)) | (1 << (mysqlParser.EVERY - 308)) | (1 << (mysqlParser.EXCHANGE - 308)) | (1 << (mysqlParser.EXCLUSIVE - 308)) | (1 << (mysqlParser.EXPIRE - 308)) | (1 << (mysqlParser.EXTENT_SIZE - 308)) | (1 << (mysqlParser.FAULTS - 308)) | (1 << (mysqlParser.FIELDS - 308)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (mysqlParser.FILTER - 308)) | (1 << (mysqlParser.FIRST - 308)) | (1 << (mysqlParser.FIXED - 308)) | (1 << (mysqlParser.FOLLOWS - 308)) | (1 << (mysqlParser.FULL - 308)) | (1 << (mysqlParser.FUNCTION - 308)) | (1 << (mysqlParser.GLOBAL - 308)) | (1 << (mysqlParser.GRANTS - 308)) | (1 << (mysqlParser.GROUP_REPLICATION - 308)) | (1 << (mysqlParser.HASH - 308)) | (1 << (mysqlParser.HOST - 308)) | (1 << (mysqlParser.IDENTIFIED - 308)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (mysqlParser.IMPORT - 308)) | (1 << (mysqlParser.INDEXES - 308)) | (1 << (mysqlParser.INITIAL_SIZE - 308)) | (1 << (mysqlParser.INPLACE - 308)) | (1 << (mysqlParser.INSERT_METHOD - 308)) | (1 << (mysqlParser.INSTANCE - 308)) | (1 << (mysqlParser.INVOKER - 308)) | (1 << (mysqlParser.IO - 308)) | (1 << (mysqlParser.IO_THREAD - 308)) | (1 << (mysqlParser.IPC - 308)) | (1 << (mysqlParser.ISOLATION - 308)) | (1 << (mysqlParser.ISSUER - 308)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (mysqlParser.LANGUAGE - 308)) | (1 << (mysqlParser.LAST - 308)) | (1 << (mysqlParser.LEAVES - 308)) | (1 << (mysqlParser.LESS - 308)) | (1 << (mysqlParser.LEVEL - 308)) | (1 << (mysqlParser.LIST - 308)) | (1 << (mysqlParser.LOCAL - 308)) | (1 << (mysqlParser.LOGFILE - 308)) | (1 << (mysqlParser.LOGS - 308)) | (1 << (mysqlParser.MASTER - 308)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 308)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (mysqlParser.MASTER_DELAY - 372)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (mysqlParser.MASTER_HOST - 372)) | (1 << (mysqlParser.MASTER_LOG_FILE - 372)) | (1 << (mysqlParser.MASTER_LOG_POS - 372)) | (1 << (mysqlParser.MASTER_PASSWORD - 372)) | (1 << (mysqlParser.MASTER_PORT - 372)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (mysqlParser.MASTER_SSL - 372)) | (1 << (mysqlParser.MASTER_SSL_CA - 372)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_CERT - 372)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (mysqlParser.MASTER_SSL_CRL - 372)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_KEY - 372)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 372)) | (1 << (mysqlParser.MASTER_USER - 372)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_ROWS - 372)) | (1 << (mysqlParser.MAX_SIZE - 372)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (mysqlParser.MERGE - 372)) | (1 << (mysqlParser.MID - 372)) | (1 << (mysqlParser.MIGRATE - 372)) | (1 << (mysqlParser.MIN_ROWS - 372)) | (1 << (mysqlParser.MODIFY - 372)) | (1 << (mysqlParser.MUTEX - 372)) | (1 << (mysqlParser.MYSQL - 372)) | (1 << (mysqlParser.NAME - 372)) | (1 << (mysqlParser.NAMES - 372)) | (1 << (mysqlParser.NCHAR - 372)) | (1 << (mysqlParser.NEVER - 372)) | (1 << (mysqlParser.NO - 372)) | (1 << (mysqlParser.NODEGROUP - 372)) | (1 << (mysqlParser.NONE - 372)) | (1 << (mysqlParser.OFFLINE - 372)) | (1 << (mysqlParser.OFFSET - 372)) | (1 << (mysqlParser.OJ - 372)) | (1 << (mysqlParser.OLD_PASSWORD - 372)) | (1 << (mysqlParser.ONE - 372)) | (1 << (mysqlParser.ONLINE - 372)) | (1 << (mysqlParser.ONLY - 372)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 372)) | (1 << (mysqlParser.OPTIONS - 372)) | (1 << (mysqlParser.OWNER - 372)) | (1 << (mysqlParser.PACK_KEYS - 372)) | (1 << (mysqlParser.PAGE - 372)) | (1 << (mysqlParser.PARSER - 372)) | (1 << (mysqlParser.PARTIAL - 372)) | (1 << (mysqlParser.PARTITIONING - 372)) | (1 << (mysqlParser.PARTITIONS - 372)) | (1 << (mysqlParser.PASSWORD - 372)) | (1 << (mysqlParser.PHASE - 372)) | (1 << (mysqlParser.PLUGIN_DIR - 372)) | (1 << (mysqlParser.PLUGINS - 372)) | (1 << (mysqlParser.PORT - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (mysqlParser.PRECEDES - 436)) | (1 << (mysqlParser.PREPARE - 436)) | (1 << (mysqlParser.PRESERVE - 436)) | (1 << (mysqlParser.PREV - 436)) | (1 << (mysqlParser.PROCESSLIST - 436)) | (1 << (mysqlParser.PROFILE - 436)) | (1 << (mysqlParser.PROFILES - 436)) | (1 << (mysqlParser.PROXY - 436)) | (1 << (mysqlParser.QUERY - 436)) | (1 << (mysqlParser.QUICK - 436)) | (1 << (mysqlParser.REBUILD - 436)) | (1 << (mysqlParser.RECOVER - 436)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (mysqlParser.REDUNDANT - 436)) | (1 << (mysqlParser.RELAY_LOG_FILE - 436)) | (1 << (mysqlParser.RELAY_LOG_POS - 436)) | (1 << (mysqlParser.RELAYLOG - 436)) | (1 << (mysqlParser.REMOVE - 436)) | (1 << (mysqlParser.REORGANIZE - 436)) | (1 << (mysqlParser.REPAIR - 436)) | (1 << (mysqlParser.REPLICATE_DO_DB - 436)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATION - 436)) | (1 << (mysqlParser.RESUME - 436)) | (1 << (mysqlParser.RETURNS - 436)) | (1 << (mysqlParser.ROLLBACK - 436)) | (1 << (mysqlParser.ROLLUP - 436)) | (1 << (mysqlParser.ROTATE - 436)) | (1 << (mysqlParser.ROW - 436)) | (1 << (mysqlParser.ROWS - 436)) | (1 << (mysqlParser.ROW_FORMAT - 436)) | (1 << (mysqlParser.SAVEPOINT - 436)) | (1 << (mysqlParser.SCHEDULE - 436)) | (1 << (mysqlParser.SECURITY - 436)) | (1 << (mysqlParser.SERVER - 436)) | (1 << (mysqlParser.SESSION - 436)) | (1 << (mysqlParser.SHARE - 436)) | (1 << (mysqlParser.SHARED - 436)) | (1 << (mysqlParser.SIGNED - 436)) | (1 << (mysqlParser.SIMPLE - 436)) | (1 << (mysqlParser.SLAVE - 436)) | (1 << (mysqlParser.SNAPSHOT - 436)) | (1 << (mysqlParser.SOCKET - 436)) | (1 << (mysqlParser.SOME - 436)) | (1 << (mysqlParser.SOUNDS - 436)) | (1 << (mysqlParser.SOURCE - 436)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (mysqlParser.SQL_CACHE - 436)) | (1 << (mysqlParser.SQL_NO_CACHE - 436)) | (1 << (mysqlParser.SQL_THREAD - 436)) | (1 << (mysqlParser.START - 436)) | (1 << (mysqlParser.STARTS - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (mysqlParser.STATS_AUTO_RECALC - 500)) | (1 << (mysqlParser.STATS_PERSISTENT - 500)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (mysqlParser.STATUS - 500)) | (1 << (mysqlParser.STOP - 500)) | (1 << (mysqlParser.STORAGE - 500)) | (1 << (mysqlParser.STRING - 500)) | (1 << (mysqlParser.SUBJECT - 500)) | (1 << (mysqlParser.SUBPARTITION - 500)) | (1 << (mysqlParser.SUBPARTITIONS - 500)) | (1 << (mysqlParser.SUSPEND - 500)) | (1 << (mysqlParser.SWAPS - 500)) | (1 << (mysqlParser.SWITCHES - 500)) | (1 << (mysqlParser.TABLESPACE - 500)) | (1 << (mysqlParser.TEMPORARY - 500)) | (1 << (mysqlParser.TEMPTABLE - 500)) | (1 << (mysqlParser.THAN - 500)) | (1 << (mysqlParser.TRANSACTION - 500)) | (1 << (mysqlParser.TRUNCATE - 500)) | (1 << (mysqlParser.UNDEFINED - 500)) | (1 << (mysqlParser.UNDOFILE - 500)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (mysqlParser.UNKNOWN - 500)) | (1 << (mysqlParser.UPGRADE - 500)) | (1 << (mysqlParser.USER - 500)) | (1 << (mysqlParser.VALIDATION - 500)) | (1 << (mysqlParser.VALUE - 500)) | (1 << (mysqlParser.VARIABLES - 500)) | (1 << (mysqlParser.VIEW - 500)) | (1 << (mysqlParser.WAIT - 500)) | (1 << (mysqlParser.WARNINGS - 500)) | (1 << (mysqlParser.WITHOUT - 500)) | (1 << (mysqlParser.WORK - 500)) | (1 << (mysqlParser.WRAPPER - 500)) | (1 << (mysqlParser.X509 - 500)) | (1 << (mysqlParser.XA - 500)) | (1 << (mysqlParser.XML - 500)) | (1 << (mysqlParser.QUARTER - 500)) | (1 << (mysqlParser.MONTH - 500)) | (1 << (mysqlParser.DAY - 500)) | (1 << (mysqlParser.HOUR - 500)) | (1 << (mysqlParser.MINUTE - 500)) | (1 << (mysqlParser.WEEK - 500)) | (1 << (mysqlParser.SECOND - 500)) | (1 << (mysqlParser.MICROSECOND - 500)) | (1 << (mysqlParser.TABLES - 500)) | (1 << (mysqlParser.ROUTINE - 500)) | (1 << (mysqlParser.EXECUTE - 500)) | (1 << (mysqlParser.FILE - 500)) | (1 << (mysqlParser.PROCESS - 500)) | (1 << (mysqlParser.RELOAD - 500)) | (1 << (mysqlParser.SHUTDOWN - 500)) | (1 << (mysqlParser.SUPER - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (mysqlParser.PRIVILEGES - 564)) | (1 << (mysqlParser.ARMSCII8 - 564)) | (1 << (mysqlParser.ASCII - 564)) | (1 << (mysqlParser.BIG5 - 564)) | (1 << (mysqlParser.CP1250 - 564)) | (1 << (mysqlParser.CP1251 - 564)) | (1 << (mysqlParser.CP1256 - 564)) | (1 << (mysqlParser.CP1257 - 564)) | (1 << (mysqlParser.CP850 - 564)) | (1 << (mysqlParser.CP852 - 564)) | (1 << (mysqlParser.CP866 - 564)) | (1 << (mysqlParser.CP932 - 564)) | (1 << (mysqlParser.DEC8 - 564)) | (1 << (mysqlParser.EUCJPMS - 564)) | (1 << (mysqlParser.EUCKR - 564)) | (1 << (mysqlParser.GB2312 - 564)) | (1 << (mysqlParser.GBK - 564)) | (1 << (mysqlParser.GEOSTD8 - 564)) | (1 << (mysqlParser.GREEK - 564)) | (1 << (mysqlParser.HEBREW - 564)) | (1 << (mysqlParser.HP8 - 564)) | (1 << (mysqlParser.KEYBCS2 - 564)) | (1 << (mysqlParser.KOI8R - 564)) | (1 << (mysqlParser.KOI8U - 564)) | (1 << (mysqlParser.LATIN1 - 564)) | (1 << (mysqlParser.LATIN2 - 564)) | (1 << (mysqlParser.LATIN5 - 564)) | (1 << (mysqlParser.LATIN7 - 564)) | (1 << (mysqlParser.MACCE - 564)) | (1 << (mysqlParser.MACROMAN - 564)) | (1 << (mysqlParser.SJIS - 564)) | (1 << (mysqlParser.SWE7 - 564)) | (1 << (mysqlParser.TIS620 - 564)) | (1 << (mysqlParser.UCS2 - 564)) | (1 << (mysqlParser.UJIS - 564)) | (1 << (mysqlParser.UTF16 - 564)) | (1 << (mysqlParser.UTF16LE - 564)) | (1 << (mysqlParser.UTF32 - 564)) | (1 << (mysqlParser.UTF8 - 564)) | (1 << (mysqlParser.UTF8MB3 - 564)) | (1 << (mysqlParser.UTF8MB4 - 564)) | (1 << (mysqlParser.ARCHIVE - 564)) | (1 << (mysqlParser.BLACKHOLE - 564)) | (1 << (mysqlParser.CSV - 564)) | (1 << (mysqlParser.FEDERATED - 564)) | (1 << (mysqlParser.INNODB - 564)) | (1 << (mysqlParser.MEMORY - 564)) | (1 << (mysqlParser.MRG_MYISAM - 564)) | (1 << (mysqlParser.MYISAM - 564)) | (1 << (mysqlParser.NDB - 564)) | (1 << (mysqlParser.NDBCLUSTER - 564)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (mysqlParser.REPEATABLE - 564)) | (1 << (mysqlParser.COMMITTED - 564)) | (1 << (mysqlParser.UNCOMMITTED - 564)) | (1 << (mysqlParser.SERIALIZABLE - 564)) | (1 << (mysqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (mysqlParser.LINESTRING - 564)) | (1 << (mysqlParser.MULTILINESTRING - 564)) | (1 << (mysqlParser.MULTIPOINT - 564)) | (1 << (mysqlParser.MULTIPOLYGON - 564)) | (1 << (mysqlParser.POINT - 564)) | (1 << (mysqlParser.POLYGON - 564)) | (1 << (mysqlParser.ABS - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (mysqlParser.ACOS - 628)) | (1 << (mysqlParser.ADDDATE - 628)) | (1 << (mysqlParser.ADDTIME - 628)) | (1 << (mysqlParser.AES_DECRYPT - 628)) | (1 << (mysqlParser.AES_ENCRYPT - 628)) | (1 << (mysqlParser.AREA - 628)) | (1 << (mysqlParser.ASBINARY - 628)) | (1 << (mysqlParser.ASIN - 628)) | (1 << (mysqlParser.ASTEXT - 628)) | (1 << (mysqlParser.ASWKB - 628)) | (1 << (mysqlParser.ASWKT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (mysqlParser.ATAN - 628)) | (1 << (mysqlParser.ATAN2 - 628)) | (1 << (mysqlParser.BENCHMARK - 628)) | (1 << (mysqlParser.BIN - 628)) | (1 << (mysqlParser.BIT_COUNT - 628)) | (1 << (mysqlParser.BIT_LENGTH - 628)) | (1 << (mysqlParser.BUFFER - 628)) | (1 << (mysqlParser.CEIL - 628)) | (1 << (mysqlParser.CEILING - 628)) | (1 << (mysqlParser.CENTROID - 628)) | (1 << (mysqlParser.CHARACTER_LENGTH - 628)) | (1 << (mysqlParser.CHARSET - 628)) | (1 << (mysqlParser.CHAR_LENGTH - 628)) | (1 << (mysqlParser.COERCIBILITY - 628)) | (1 << (mysqlParser.COLLATION - 628)) | (1 << (mysqlParser.COMPRESS - 628)) | (1 << (mysqlParser.CONCAT - 628)) | (1 << (mysqlParser.CONCAT_WS - 628)) | (1 << (mysqlParser.CONNECTION_ID - 628)) | (1 << (mysqlParser.CONV - 628)) | (1 << (mysqlParser.CONVERT_TZ - 628)) | (1 << (mysqlParser.COS - 628)) | (1 << (mysqlParser.COT - 628)) | (1 << (mysqlParser.CRC32 - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (mysqlParser.CREATE_DIGEST - 628)) | (1 << (mysqlParser.CROSSES - 628)) | (1 << (mysqlParser.DATEDIFF - 628)) | (1 << (mysqlParser.DATE_FORMAT - 628)) | (1 << (mysqlParser.DAYNAME - 628)) | (1 << (mysqlParser.DAYOFMONTH - 628)) | (1 << (mysqlParser.DAYOFWEEK - 628)) | (1 << (mysqlParser.DAYOFYEAR - 628)) | (1 << (mysqlParser.DECODE - 628)) | (1 << (mysqlParser.DEGREES - 628)) | (1 << (mysqlParser.DES_DECRYPT - 628)) | (1 << (mysqlParser.DES_ENCRYPT - 628)) | (1 << (mysqlParser.DIMENSION - 628)) | (1 << (mysqlParser.DISJOINT - 628)) | (1 << (mysqlParser.ELT - 628)) | (1 << (mysqlParser.ENCODE - 628)) | (1 << (mysqlParser.ENCRYPT - 628)) | (1 << (mysqlParser.ENDPOINT - 628)) | (1 << (mysqlParser.ENVELOPE - 628)) | (1 << (mysqlParser.EQUALS - 628)) | (1 << (mysqlParser.EXP - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (mysqlParser.EXPORT_SET - 692)) | (1 << (mysqlParser.EXTERIORRING - 692)) | (1 << (mysqlParser.EXTRACTVALUE - 692)) | (1 << (mysqlParser.FIELD - 692)) | (1 << (mysqlParser.FIND_IN_SET - 692)) | (1 << (mysqlParser.FLOOR - 692)) | (1 << (mysqlParser.FORMAT - 692)) | (1 << (mysqlParser.FOUND_ROWS - 692)) | (1 << (mysqlParser.FROM_BASE64 - 692)) | (1 << (mysqlParser.FROM_DAYS - 692)) | (1 << (mysqlParser.FROM_UNIXTIME - 692)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYN - 692)) | (1 << (mysqlParser.GEOMETRYTYPE - 692)) | (1 << (mysqlParser.GEOMFROMTEXT - 692)) | (1 << (mysqlParser.GEOMFROMWKB - 692)) | (1 << (mysqlParser.GET_FORMAT - 692)) | (1 << (mysqlParser.GET_LOCK - 692)) | (1 << (mysqlParser.GLENGTH - 692)) | (1 << (mysqlParser.GREATEST - 692)) | (1 << (mysqlParser.GTID_SUBSET - 692)) | (1 << (mysqlParser.GTID_SUBTRACT - 692)) | (1 << (mysqlParser.HEX - 692)) | (1 << (mysqlParser.IFNULL - 692)) | (1 << (mysqlParser.INET6_ATON - 692)) | (1 << (mysqlParser.INET6_NTOA - 692)) | (1 << (mysqlParser.INET_ATON - 692)) | (1 << (mysqlParser.INET_NTOA - 692)) | (1 << (mysqlParser.INSTR - 692)) | (1 << (mysqlParser.INTERIORRINGN - 692)) | (1 << (mysqlParser.INTERSECTS - 692)) | (1 << (mysqlParser.ISCLOSED - 692)) | (1 << (mysqlParser.ISEMPTY - 692)) | (1 << (mysqlParser.ISNULL - 692)) | (1 << (mysqlParser.ISSIMPLE - 692)) | (1 << (mysqlParser.IS_FREE_LOCK - 692)) | (1 << (mysqlParser.IS_IPV4 - 692)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 692)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 692)) | (1 << (mysqlParser.IS_IPV6 - 692)) | (1 << (mysqlParser.IS_USED_LOCK - 692)) | (1 << (mysqlParser.LAST_INSERT_ID - 692)) | (1 << (mysqlParser.LCASE - 692)) | (1 << (mysqlParser.LEAST - 692)) | (1 << (mysqlParser.LENGTH - 692)) | (1 << (mysqlParser.LINEFROMTEXT - 692)) | (1 << (mysqlParser.LINEFROMWKB - 692)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 692)) | (1 << (mysqlParser.LN - 692)) | (1 << (mysqlParser.LOAD_FILE - 692)) | (1 << (mysqlParser.LOCATE - 692)) | (1 << (mysqlParser.LOG - 692)) | (1 << (mysqlParser.LOG10 - 692)) | (1 << (mysqlParser.LOG2 - 692)) | (1 << (mysqlParser.LOWER - 692)) | (1 << (mysqlParser.LPAD - 692)) | (1 << (mysqlParser.LTRIM - 692)) | (1 << (mysqlParser.MAKEDATE - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (mysqlParser.MAKETIME - 756)) | (1 << (mysqlParser.MAKE_SET - 756)) | (1 << (mysqlParser.MASTER_POS_WAIT - 756)) | (1 << (mysqlParser.MBRCONTAINS - 756)) | (1 << (mysqlParser.MBRDISJOINT - 756)) | (1 << (mysqlParser.MBREQUAL - 756)) | (1 << (mysqlParser.MBRINTERSECTS - 756)) | (1 << (mysqlParser.MBROVERLAPS - 756)) | (1 << (mysqlParser.MBRTOUCHES - 756)) | (1 << (mysqlParser.MBRWITHIN - 756)) | (1 << (mysqlParser.MD5 - 756)) | (1 << (mysqlParser.MLINEFROMTEXT - 756)) | (1 << (mysqlParser.MLINEFROMWKB - 756)) | (1 << (mysqlParser.MONTHNAME - 756)) | (1 << (mysqlParser.MPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MPOINTFROMWKB - 756)) | (1 << (mysqlParser.MPOLYFROMTEXT - 756)) | (1 << (mysqlParser.MPOLYFROMWKB - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (mysqlParser.NAME_CONST - 756)) | (1 << (mysqlParser.NULLIF - 756)) | (1 << (mysqlParser.NUMGEOMETRIES - 756)) | (1 << (mysqlParser.NUMINTERIORRINGS - 756)) | (1 << (mysqlParser.NUMPOINTS - 756)) | (1 << (mysqlParser.OCT - 756)) | (1 << (mysqlParser.OCTET_LENGTH - 756)) | (1 << (mysqlParser.ORD - 756)) | (1 << (mysqlParser.OVERLAPS - 756)) | (1 << (mysqlParser.PERIOD_ADD - 756)) | (1 << (mysqlParser.PERIOD_DIFF - 756)) | (1 << (mysqlParser.PI - 756)) | (1 << (mysqlParser.POINTFROMTEXT - 756)) | (1 << (mysqlParser.POINTFROMWKB - 756)) | (1 << (mysqlParser.POINTN - 756)) | (1 << (mysqlParser.POLYFROMTEXT - 756)) | (1 << (mysqlParser.POLYFROMWKB - 756)) | (1 << (mysqlParser.POLYGONFROMTEXT - 756)) | (1 << (mysqlParser.POLYGONFROMWKB - 756)) | (1 << (mysqlParser.POW - 756)) | (1 << (mysqlParser.POWER - 756)) | (1 << (mysqlParser.QUOTE - 756)) | (1 << (mysqlParser.RADIANS - 756)) | (1 << (mysqlParser.RAND - 756)) | (1 << (mysqlParser.RANDOM_BYTES - 756)) | (1 << (mysqlParser.RELEASE_LOCK - 756)) | (1 << (mysqlParser.REVERSE - 756)) | (1 << (mysqlParser.ROUND - 756)) | (1 << (mysqlParser.ROW_COUNT - 756)) | (1 << (mysqlParser.RPAD - 756)) | (1 << (mysqlParser.RTRIM - 756)) | (1 << (mysqlParser.SEC_TO_TIME - 756)) | (1 << (mysqlParser.SESSION_USER - 756)) | (1 << (mysqlParser.SHA - 756)) | (1 << (mysqlParser.SHA1 - 756)) | (1 << (mysqlParser.SHA2 - 756)) | (1 << (mysqlParser.SIGN - 756)) | (1 << (mysqlParser.SIN - 756)) | (1 << (mysqlParser.SLEEP - 756)) | (1 << (mysqlParser.SOUNDEX - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (mysqlParser.SQRT - 820)) | (1 << (mysqlParser.SRID - 820)) | (1 << (mysqlParser.STARTPOINT - 820)) | (1 << (mysqlParser.STRCMP - 820)) | (1 << (mysqlParser.STR_TO_DATE - 820)) | (1 << (mysqlParser.ST_AREA - 820)) | (1 << (mysqlParser.ST_ASBINARY - 820)) | (1 << (mysqlParser.ST_ASTEXT - 820)) | (1 << (mysqlParser.ST_ASWKB - 820)) | (1 << (mysqlParser.ST_ASWKT - 820)) | (1 << (mysqlParser.ST_BUFFER - 820)) | (1 << (mysqlParser.ST_CENTROID - 820)) | (1 << (mysqlParser.ST_CONTAINS - 820)) | (1 << (mysqlParser.ST_CROSSES - 820)) | (1 << (mysqlParser.ST_DIFFERENCE - 820)) | (1 << (mysqlParser.ST_DIMENSION - 820)) | (1 << (mysqlParser.ST_DISJOINT - 820)) | (1 << (mysqlParser.ST_DISTANCE - 820)) | (1 << (mysqlParser.ST_ENDPOINT - 820)) | (1 << (mysqlParser.ST_ENVELOPE - 820)) | (1 << (mysqlParser.ST_EQUALS - 820)) | (1 << (mysqlParser.ST_EXTERIORRING - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYN - 820)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 820)) | (1 << (mysqlParser.ST_INTERIORRINGN - 820)) | (1 << (mysqlParser.ST_INTERSECTION - 820)) | (1 << (mysqlParser.ST_INTERSECTS - 820)) | (1 << (mysqlParser.ST_ISCLOSED - 820)) | (1 << (mysqlParser.ST_ISEMPTY - 820)) | (1 << (mysqlParser.ST_ISSIMPLE - 820)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINEFROMWKB - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (mysqlParser.ST_NUMPOINTS - 820)) | (1 << (mysqlParser.ST_OVERLAPS - 820)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 820)) | (1 << (mysqlParser.ST_POINTFROMWKB - 820)) | (1 << (mysqlParser.ST_POINTN - 820)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYFROMWKB - 820)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (mysqlParser.ST_SRID - 820)) | (1 << (mysqlParser.ST_STARTPOINT - 820)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (mysqlParser.ST_TOUCHES - 820)) | (1 << (mysqlParser.ST_UNION - 820)) | (1 << (mysqlParser.ST_WITHIN - 820)) | (1 << (mysqlParser.ST_X - 820)) | (1 << (mysqlParser.ST_Y - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (mysqlParser.SUBDATE - 884)) | (1 << (mysqlParser.SUBSTRING_INDEX - 884)) | (1 << (mysqlParser.SUBTIME - 884)) | (1 << (mysqlParser.SYSTEM_USER - 884)) | (1 << (mysqlParser.TAN - 884)) | (1 << (mysqlParser.TIMEDIFF - 884)) | (1 << (mysqlParser.TIMESTAMPADD - 884)) | (1 << (mysqlParser.TIMESTAMPDIFF - 884)) | (1 << (mysqlParser.TIME_FORMAT - 884)) | (1 << (mysqlParser.TIME_TO_SEC - 884)) | (1 << (mysqlParser.TOUCHES - 884)) | (1 << (mysqlParser.TO_BASE64 - 884)) | (1 << (mysqlParser.TO_DAYS - 884)) | (1 << (mysqlParser.TO_SECONDS - 884)) | (1 << (mysqlParser.UCASE - 884)) | (1 << (mysqlParser.UNCOMPRESS - 884)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (mysqlParser.UNHEX - 884)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 884)) | (1 << (mysqlParser.UPDATEXML - 884)) | (1 << (mysqlParser.UPPER - 884)) | (1 << (mysqlParser.UUID - 884)) | (1 << (mysqlParser.UUID_SHORT - 884)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (mysqlParser.VERSION - 884)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (mysqlParser.WEEKDAY - 884)) | (1 << (mysqlParser.WEEKOFYEAR - 884)) | (1 << (mysqlParser.WEIGHT_STRING - 884)) | (1 << (mysqlParser.WITHIN - 884)) | (1 << (mysqlParser.YEARWEEK - 884)) | (1 << (mysqlParser.Y_FUNCTION - 884)) | (1 << (mysqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 954)) & ~0x3f) == 0 and ((1 << (_la - 954)) & ((1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 954)) | (1 << (mysqlParser.ID - 954)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 954)))) != 0):
                self.state = 3893
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.CASE)
            else:
                return self.getToken(mysqlParser.CASE, i)

        def END(self):
            return self.getToken(mysqlParser.END, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)


        def caseAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.CaseAlternativeContext)
            else:
                return self.getTypedRuleContext(mysqlParser.CaseAlternativeContext,i)


        def ELSE(self):
            return self.getToken(mysqlParser.ELSE, 0)

        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(mysqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_caseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseStatement" ):
                listener.enterCaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseStatement" ):
                listener.exitCaseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseStatement" ):
                return visitor.visitCaseStatement(self)
            else:
                return visitor.visitChildren(self)




    def caseStatement(self):

        localctx = mysqlParser.CaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_caseStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3896
            self.match(mysqlParser.CASE)
            self.state = 3899
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,556,self._ctx)
            if la_ == 1:
                self.state = 3897
                self.uid()

            elif la_ == 2:
                self.state = 3898
                self.expression(0)


            self.state = 3902 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3901
                self.caseAlternative()
                self.state = 3904 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==mysqlParser.WHEN):
                    break

            self.state = 3912
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.ELSE:
                self.state = 3906
                self.match(mysqlParser.ELSE)
                self.state = 3908 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3907
                    self.procedureSqlStatement()
                    self.state = 3910 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 7)) & ~0x3f) == 0 and ((1 << (_la - 7)) & ((1 << (mysqlParser.ALTER - 7)) | (1 << (mysqlParser.ANALYZE - 7)) | (1 << (mysqlParser.CALL - 7)) | (1 << (mysqlParser.CASE - 7)) | (1 << (mysqlParser.CHANGE - 7)) | (1 << (mysqlParser.CHECK - 7)) | (1 << (mysqlParser.CREATE - 7)) | (1 << (mysqlParser.DELETE - 7)) | (1 << (mysqlParser.DESC - 7)) | (1 << (mysqlParser.DESCRIBE - 7)) | (1 << (mysqlParser.DROP - 7)) | (1 << (mysqlParser.EXPLAIN - 7)) | (1 << (mysqlParser.FETCH - 7)) | (1 << (mysqlParser.GRANT - 7)) | (1 << (mysqlParser.IF - 7)))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (mysqlParser.INSERT - 71)) | (1 << (mysqlParser.ITERATE - 71)) | (1 << (mysqlParser.KILL - 71)) | (1 << (mysqlParser.LEAVE - 71)) | (1 << (mysqlParser.LEFT - 71)) | (1 << (mysqlParser.LOAD - 71)) | (1 << (mysqlParser.LOCK - 71)) | (1 << (mysqlParser.LOOP - 71)) | (1 << (mysqlParser.OPTIMIZE - 71)) | (1 << (mysqlParser.PURGE - 71)) | (1 << (mysqlParser.RELEASE - 71)) | (1 << (mysqlParser.RENAME - 71)) | (1 << (mysqlParser.REPEAT - 71)) | (1 << (mysqlParser.REPLACE - 71)) | (1 << (mysqlParser.RETURN - 71)) | (1 << (mysqlParser.REVOKE - 71)) | (1 << (mysqlParser.RIGHT - 71)) | (1 << (mysqlParser.SELECT - 71)) | (1 << (mysqlParser.SET - 71)) | (1 << (mysqlParser.SHOW - 71)))) != 0) or ((((_la - 155)) & ~0x3f) == 0 and ((1 << (_la - 155)) & ((1 << (mysqlParser.UNLOCK - 155)) | (1 << (mysqlParser.UPDATE - 155)) | (1 << (mysqlParser.USE - 155)) | (1 << (mysqlParser.WHILE - 155)) | (1 << (mysqlParser.DATE - 155)) | (1 << (mysqlParser.TIME - 155)) | (1 << (mysqlParser.TIMESTAMP - 155)) | (1 << (mysqlParser.DATETIME - 155)) | (1 << (mysqlParser.YEAR - 155)) | (1 << (mysqlParser.TEXT - 155)) | (1 << (mysqlParser.ENUM - 155)) | (1 << (mysqlParser.COUNT - 155)))) != 0) or ((((_la - 236)) & ~0x3f) == 0 and ((1 << (_la - 236)) & ((1 << (mysqlParser.POSITION - 236)) | (1 << (mysqlParser.ACCOUNT - 236)) | (1 << (mysqlParser.ACTION - 236)) | (1 << (mysqlParser.AFTER - 236)) | (1 << (mysqlParser.AGGREGATE - 236)) | (1 << (mysqlParser.ALGORITHM - 236)) | (1 << (mysqlParser.ANY - 236)) | (1 << (mysqlParser.AT - 236)) | (1 << (mysqlParser.AUTHORS - 236)) | (1 << (mysqlParser.AUTOCOMMIT - 236)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 236)) | (1 << (mysqlParser.AUTO_INCREMENT - 236)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 236)) | (1 << (mysqlParser.BEGIN - 236)) | (1 << (mysqlParser.BINLOG - 236)) | (1 << (mysqlParser.BIT - 236)) | (1 << (mysqlParser.BLOCK - 236)) | (1 << (mysqlParser.BTREE - 236)) | (1 << (mysqlParser.CACHE - 236)) | (1 << (mysqlParser.CASCADED - 236)) | (1 << (mysqlParser.CHAIN - 236)) | (1 << (mysqlParser.CHANNEL - 236)) | (1 << (mysqlParser.CHECKSUM - 236)) | (1 << (mysqlParser.CIPHER - 236)) | (1 << (mysqlParser.CLIENT - 236)) | (1 << (mysqlParser.CLOSE - 236)) | (1 << (mysqlParser.COALESCE - 236)) | (1 << (mysqlParser.CODE - 236)) | (1 << (mysqlParser.COLUMNS - 236)) | (1 << (mysqlParser.COLUMN_FORMAT - 236)) | (1 << (mysqlParser.COMMENT - 236)) | (1 << (mysqlParser.COMMIT - 236)) | (1 << (mysqlParser.COMPACT - 236)) | (1 << (mysqlParser.COMPLETION - 236)) | (1 << (mysqlParser.COMPRESSED - 236)) | (1 << (mysqlParser.COMPRESSION - 236)) | (1 << (mysqlParser.CONCURRENT - 236)) | (1 << (mysqlParser.CONNECTION - 236)) | (1 << (mysqlParser.CONSISTENT - 236)) | (1 << (mysqlParser.CONTAINS - 236)) | (1 << (mysqlParser.CONTEXT - 236)) | (1 << (mysqlParser.CONTRIBUTORS - 236)) | (1 << (mysqlParser.COPY - 236)) | (1 << (mysqlParser.CPU - 236)) | (1 << (mysqlParser.DATA - 236)) | (1 << (mysqlParser.DATAFILE - 236)) | (1 << (mysqlParser.DEALLOCATE - 236)) | (1 << (mysqlParser.DEFAULT_AUTH - 236)) | (1 << (mysqlParser.DEFINER - 236)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 236)) | (1 << (mysqlParser.DIRECTORY - 236)) | (1 << (mysqlParser.DISABLE - 236)) | (1 << (mysqlParser.DISCARD - 236)) | (1 << (mysqlParser.DISK - 236)) | (1 << (mysqlParser.DO - 236)))) != 0) or ((((_la - 300)) & ~0x3f) == 0 and ((1 << (_la - 300)) & ((1 << (mysqlParser.DUMPFILE - 300)) | (1 << (mysqlParser.DUPLICATE - 300)) | (1 << (mysqlParser.DYNAMIC - 300)) | (1 << (mysqlParser.ENABLE - 300)) | (1 << (mysqlParser.ENCRYPTION - 300)) | (1 << (mysqlParser.ENDS - 300)) | (1 << (mysqlParser.ENGINE - 300)) | (1 << (mysqlParser.ENGINES - 300)) | (1 << (mysqlParser.ERROR - 300)) | (1 << (mysqlParser.ERRORS - 300)) | (1 << (mysqlParser.ESCAPE - 300)) | (1 << (mysqlParser.EVEN - 300)) | (1 << (mysqlParser.EVENT - 300)) | (1 << (mysqlParser.EVENTS - 300)) | (1 << (mysqlParser.EVERY - 300)) | (1 << (mysqlParser.EXCHANGE - 300)) | (1 << (mysqlParser.EXCLUSIVE - 300)) | (1 << (mysqlParser.EXPIRE - 300)) | (1 << (mysqlParser.EXTENT_SIZE - 300)) | (1 << (mysqlParser.FAULTS - 300)) | (1 << (mysqlParser.FIELDS - 300)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 300)) | (1 << (mysqlParser.FILTER - 300)) | (1 << (mysqlParser.FIRST - 300)) | (1 << (mysqlParser.FIXED - 300)) | (1 << (mysqlParser.FLUSH - 300)) | (1 << (mysqlParser.FOLLOWS - 300)) | (1 << (mysqlParser.FULL - 300)) | (1 << (mysqlParser.FUNCTION - 300)) | (1 << (mysqlParser.GLOBAL - 300)) | (1 << (mysqlParser.GRANTS - 300)) | (1 << (mysqlParser.GROUP_REPLICATION - 300)) | (1 << (mysqlParser.HANDLER - 300)) | (1 << (mysqlParser.HASH - 300)) | (1 << (mysqlParser.HELP - 300)) | (1 << (mysqlParser.HOST - 300)) | (1 << (mysqlParser.IDENTIFIED - 300)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 300)) | (1 << (mysqlParser.IMPORT - 300)) | (1 << (mysqlParser.INDEXES - 300)) | (1 << (mysqlParser.INITIAL_SIZE - 300)) | (1 << (mysqlParser.INPLACE - 300)) | (1 << (mysqlParser.INSERT_METHOD - 300)) | (1 << (mysqlParser.INSTALL - 300)) | (1 << (mysqlParser.INSTANCE - 300)) | (1 << (mysqlParser.INVOKER - 300)) | (1 << (mysqlParser.IO - 300)) | (1 << (mysqlParser.IO_THREAD - 300)) | (1 << (mysqlParser.IPC - 300)) | (1 << (mysqlParser.ISOLATION - 300)) | (1 << (mysqlParser.ISSUER - 300)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 300)) | (1 << (mysqlParser.LANGUAGE - 300)) | (1 << (mysqlParser.LAST - 300)) | (1 << (mysqlParser.LEAVES - 300)) | (1 << (mysqlParser.LESS - 300)))) != 0) or ((((_la - 364)) & ~0x3f) == 0 and ((1 << (_la - 364)) & ((1 << (mysqlParser.LEVEL - 364)) | (1 << (mysqlParser.LIST - 364)) | (1 << (mysqlParser.LOCAL - 364)) | (1 << (mysqlParser.LOGFILE - 364)) | (1 << (mysqlParser.LOGS - 364)) | (1 << (mysqlParser.MASTER - 364)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 364)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 364)) | (1 << (mysqlParser.MASTER_DELAY - 364)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 364)) | (1 << (mysqlParser.MASTER_HOST - 364)) | (1 << (mysqlParser.MASTER_LOG_FILE - 364)) | (1 << (mysqlParser.MASTER_LOG_POS - 364)) | (1 << (mysqlParser.MASTER_PASSWORD - 364)) | (1 << (mysqlParser.MASTER_PORT - 364)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 364)) | (1 << (mysqlParser.MASTER_SSL - 364)) | (1 << (mysqlParser.MASTER_SSL_CA - 364)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 364)) | (1 << (mysqlParser.MASTER_SSL_CERT - 364)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 364)) | (1 << (mysqlParser.MASTER_SSL_CRL - 364)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 364)) | (1 << (mysqlParser.MASTER_SSL_KEY - 364)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 364)) | (1 << (mysqlParser.MASTER_USER - 364)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 364)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 364)) | (1 << (mysqlParser.MAX_ROWS - 364)) | (1 << (mysqlParser.MAX_SIZE - 364)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 364)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 364)) | (1 << (mysqlParser.MERGE - 364)) | (1 << (mysqlParser.MID - 364)) | (1 << (mysqlParser.MIGRATE - 364)) | (1 << (mysqlParser.MIN_ROWS - 364)) | (1 << (mysqlParser.MODIFY - 364)) | (1 << (mysqlParser.MUTEX - 364)) | (1 << (mysqlParser.MYSQL - 364)) | (1 << (mysqlParser.NAME - 364)) | (1 << (mysqlParser.NAMES - 364)) | (1 << (mysqlParser.NCHAR - 364)) | (1 << (mysqlParser.NEVER - 364)) | (1 << (mysqlParser.NO - 364)) | (1 << (mysqlParser.NODEGROUP - 364)) | (1 << (mysqlParser.NONE - 364)) | (1 << (mysqlParser.OFFLINE - 364)) | (1 << (mysqlParser.OFFSET - 364)) | (1 << (mysqlParser.OJ - 364)) | (1 << (mysqlParser.OLD_PASSWORD - 364)) | (1 << (mysqlParser.ONE - 364)) | (1 << (mysqlParser.ONLINE - 364)) | (1 << (mysqlParser.ONLY - 364)) | (1 << (mysqlParser.OPEN - 364)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 364)) | (1 << (mysqlParser.OPTIONS - 364)) | (1 << (mysqlParser.OWNER - 364)) | (1 << (mysqlParser.PACK_KEYS - 364)) | (1 << (mysqlParser.PAGE - 364)) | (1 << (mysqlParser.PARSER - 364)) | (1 << (mysqlParser.PARTIAL - 364)))) != 0) or ((((_la - 428)) & ~0x3f) == 0 and ((1 << (_la - 428)) & ((1 << (mysqlParser.PARTITIONING - 428)) | (1 << (mysqlParser.PARTITIONS - 428)) | (1 << (mysqlParser.PASSWORD - 428)) | (1 << (mysqlParser.PHASE - 428)) | (1 << (mysqlParser.PLUGIN_DIR - 428)) | (1 << (mysqlParser.PLUGINS - 428)) | (1 << (mysqlParser.PORT - 428)) | (1 << (mysqlParser.PRECEDES - 428)) | (1 << (mysqlParser.PREPARE - 428)) | (1 << (mysqlParser.PRESERVE - 428)) | (1 << (mysqlParser.PREV - 428)) | (1 << (mysqlParser.PROCESSLIST - 428)) | (1 << (mysqlParser.PROFILE - 428)) | (1 << (mysqlParser.PROFILES - 428)) | (1 << (mysqlParser.PROXY - 428)) | (1 << (mysqlParser.QUERY - 428)) | (1 << (mysqlParser.QUICK - 428)) | (1 << (mysqlParser.REBUILD - 428)) | (1 << (mysqlParser.RECOVER - 428)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 428)) | (1 << (mysqlParser.REDUNDANT - 428)) | (1 << (mysqlParser.RELAY_LOG_FILE - 428)) | (1 << (mysqlParser.RELAY_LOG_POS - 428)) | (1 << (mysqlParser.RELAYLOG - 428)) | (1 << (mysqlParser.REMOVE - 428)) | (1 << (mysqlParser.REORGANIZE - 428)) | (1 << (mysqlParser.REPAIR - 428)) | (1 << (mysqlParser.REPLICATE_DO_DB - 428)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 428)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 428)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 428)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 428)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 428)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 428)) | (1 << (mysqlParser.REPLICATION - 428)) | (1 << (mysqlParser.RESET - 428)) | (1 << (mysqlParser.RESUME - 428)) | (1 << (mysqlParser.RETURNS - 428)) | (1 << (mysqlParser.ROLLBACK - 428)) | (1 << (mysqlParser.ROLLUP - 428)) | (1 << (mysqlParser.ROTATE - 428)) | (1 << (mysqlParser.ROW - 428)) | (1 << (mysqlParser.ROWS - 428)) | (1 << (mysqlParser.ROW_FORMAT - 428)) | (1 << (mysqlParser.SAVEPOINT - 428)) | (1 << (mysqlParser.SCHEDULE - 428)) | (1 << (mysqlParser.SECURITY - 428)) | (1 << (mysqlParser.SERVER - 428)) | (1 << (mysqlParser.SESSION - 428)) | (1 << (mysqlParser.SHARE - 428)) | (1 << (mysqlParser.SHARED - 428)) | (1 << (mysqlParser.SIGNED - 428)) | (1 << (mysqlParser.SIMPLE - 428)) | (1 << (mysqlParser.SLAVE - 428)) | (1 << (mysqlParser.SNAPSHOT - 428)) | (1 << (mysqlParser.SOCKET - 428)) | (1 << (mysqlParser.SOME - 428)) | (1 << (mysqlParser.SOUNDS - 428)) | (1 << (mysqlParser.SOURCE - 428)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 428)))) != 0) or ((((_la - 492)) & ~0x3f) == 0 and ((1 << (_la - 492)) & ((1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 492)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 492)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 492)) | (1 << (mysqlParser.SQL_CACHE - 492)) | (1 << (mysqlParser.SQL_NO_CACHE - 492)) | (1 << (mysqlParser.SQL_THREAD - 492)) | (1 << (mysqlParser.START - 492)) | (1 << (mysqlParser.STARTS - 492)) | (1 << (mysqlParser.STATS_AUTO_RECALC - 492)) | (1 << (mysqlParser.STATS_PERSISTENT - 492)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 492)) | (1 << (mysqlParser.STATUS - 492)) | (1 << (mysqlParser.STOP - 492)) | (1 << (mysqlParser.STORAGE - 492)) | (1 << (mysqlParser.STRING - 492)) | (1 << (mysqlParser.SUBJECT - 492)) | (1 << (mysqlParser.SUBPARTITION - 492)) | (1 << (mysqlParser.SUBPARTITIONS - 492)) | (1 << (mysqlParser.SUSPEND - 492)) | (1 << (mysqlParser.SWAPS - 492)) | (1 << (mysqlParser.SWITCHES - 492)) | (1 << (mysqlParser.TABLESPACE - 492)) | (1 << (mysqlParser.TEMPORARY - 492)) | (1 << (mysqlParser.TEMPTABLE - 492)) | (1 << (mysqlParser.THAN - 492)) | (1 << (mysqlParser.TRANSACTION - 492)) | (1 << (mysqlParser.TRUNCATE - 492)) | (1 << (mysqlParser.UNDEFINED - 492)) | (1 << (mysqlParser.UNDOFILE - 492)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 492)) | (1 << (mysqlParser.UNINSTALL - 492)) | (1 << (mysqlParser.UNKNOWN - 492)) | (1 << (mysqlParser.UPGRADE - 492)) | (1 << (mysqlParser.USER - 492)) | (1 << (mysqlParser.VALIDATION - 492)) | (1 << (mysqlParser.VALUE - 492)) | (1 << (mysqlParser.VARIABLES - 492)) | (1 << (mysqlParser.VIEW - 492)) | (1 << (mysqlParser.WAIT - 492)) | (1 << (mysqlParser.WARNINGS - 492)) | (1 << (mysqlParser.WITHOUT - 492)) | (1 << (mysqlParser.WORK - 492)) | (1 << (mysqlParser.WRAPPER - 492)) | (1 << (mysqlParser.X509 - 492)) | (1 << (mysqlParser.XA - 492)) | (1 << (mysqlParser.XML - 492)) | (1 << (mysqlParser.QUARTER - 492)) | (1 << (mysqlParser.MONTH - 492)) | (1 << (mysqlParser.DAY - 492)) | (1 << (mysqlParser.HOUR - 492)) | (1 << (mysqlParser.MINUTE - 492)) | (1 << (mysqlParser.WEEK - 492)) | (1 << (mysqlParser.SECOND - 492)) | (1 << (mysqlParser.MICROSECOND - 492)))) != 0) or ((((_la - 556)) & ~0x3f) == 0 and ((1 << (_la - 556)) & ((1 << (mysqlParser.TABLES - 556)) | (1 << (mysqlParser.ROUTINE - 556)) | (1 << (mysqlParser.EXECUTE - 556)) | (1 << (mysqlParser.FILE - 556)) | (1 << (mysqlParser.PROCESS - 556)) | (1 << (mysqlParser.RELOAD - 556)) | (1 << (mysqlParser.SHUTDOWN - 556)) | (1 << (mysqlParser.SUPER - 556)) | (1 << (mysqlParser.PRIVILEGES - 556)) | (1 << (mysqlParser.ARMSCII8 - 556)) | (1 << (mysqlParser.ASCII - 556)) | (1 << (mysqlParser.BIG5 - 556)) | (1 << (mysqlParser.CP1250 - 556)) | (1 << (mysqlParser.CP1251 - 556)) | (1 << (mysqlParser.CP1256 - 556)) | (1 << (mysqlParser.CP1257 - 556)) | (1 << (mysqlParser.CP850 - 556)) | (1 << (mysqlParser.CP852 - 556)) | (1 << (mysqlParser.CP866 - 556)) | (1 << (mysqlParser.CP932 - 556)) | (1 << (mysqlParser.DEC8 - 556)) | (1 << (mysqlParser.EUCJPMS - 556)) | (1 << (mysqlParser.EUCKR - 556)) | (1 << (mysqlParser.GB2312 - 556)) | (1 << (mysqlParser.GBK - 556)) | (1 << (mysqlParser.GEOSTD8 - 556)) | (1 << (mysqlParser.GREEK - 556)) | (1 << (mysqlParser.HEBREW - 556)) | (1 << (mysqlParser.HP8 - 556)) | (1 << (mysqlParser.KEYBCS2 - 556)) | (1 << (mysqlParser.KOI8R - 556)) | (1 << (mysqlParser.KOI8U - 556)) | (1 << (mysqlParser.LATIN1 - 556)) | (1 << (mysqlParser.LATIN2 - 556)) | (1 << (mysqlParser.LATIN5 - 556)) | (1 << (mysqlParser.LATIN7 - 556)) | (1 << (mysqlParser.MACCE - 556)) | (1 << (mysqlParser.MACROMAN - 556)) | (1 << (mysqlParser.SJIS - 556)) | (1 << (mysqlParser.SWE7 - 556)) | (1 << (mysqlParser.TIS620 - 556)) | (1 << (mysqlParser.UCS2 - 556)) | (1 << (mysqlParser.UJIS - 556)) | (1 << (mysqlParser.UTF16 - 556)) | (1 << (mysqlParser.UTF16LE - 556)) | (1 << (mysqlParser.UTF32 - 556)) | (1 << (mysqlParser.UTF8 - 556)) | (1 << (mysqlParser.UTF8MB3 - 556)) | (1 << (mysqlParser.UTF8MB4 - 556)) | (1 << (mysqlParser.ARCHIVE - 556)) | (1 << (mysqlParser.BLACKHOLE - 556)) | (1 << (mysqlParser.CSV - 556)) | (1 << (mysqlParser.FEDERATED - 556)) | (1 << (mysqlParser.INNODB - 556)) | (1 << (mysqlParser.MEMORY - 556)) | (1 << (mysqlParser.MRG_MYISAM - 556)) | (1 << (mysqlParser.MYISAM - 556)) | (1 << (mysqlParser.NDB - 556)) | (1 << (mysqlParser.NDBCLUSTER - 556)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 556)) | (1 << (mysqlParser.REPEATABLE - 556)) | (1 << (mysqlParser.COMMITTED - 556)) | (1 << (mysqlParser.UNCOMMITTED - 556)) | (1 << (mysqlParser.SERIALIZABLE - 556)))) != 0) or ((((_la - 620)) & ~0x3f) == 0 and ((1 << (_la - 620)) & ((1 << (mysqlParser.GEOMETRYCOLLECTION - 620)) | (1 << (mysqlParser.LINESTRING - 620)) | (1 << (mysqlParser.MULTILINESTRING - 620)) | (1 << (mysqlParser.MULTIPOINT - 620)) | (1 << (mysqlParser.MULTIPOLYGON - 620)) | (1 << (mysqlParser.POINT - 620)) | (1 << (mysqlParser.POLYGON - 620)) | (1 << (mysqlParser.ABS - 620)) | (1 << (mysqlParser.ACOS - 620)) | (1 << (mysqlParser.ADDDATE - 620)) | (1 << (mysqlParser.ADDTIME - 620)) | (1 << (mysqlParser.AES_DECRYPT - 620)) | (1 << (mysqlParser.AES_ENCRYPT - 620)) | (1 << (mysqlParser.AREA - 620)) | (1 << (mysqlParser.ASBINARY - 620)) | (1 << (mysqlParser.ASIN - 620)) | (1 << (mysqlParser.ASTEXT - 620)) | (1 << (mysqlParser.ASWKB - 620)) | (1 << (mysqlParser.ASWKT - 620)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 620)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 620)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 620)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 620)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 620)) | (1 << (mysqlParser.ATAN - 620)) | (1 << (mysqlParser.ATAN2 - 620)) | (1 << (mysqlParser.BENCHMARK - 620)) | (1 << (mysqlParser.BIN - 620)) | (1 << (mysqlParser.BIT_COUNT - 620)) | (1 << (mysqlParser.BIT_LENGTH - 620)) | (1 << (mysqlParser.BUFFER - 620)) | (1 << (mysqlParser.CEIL - 620)) | (1 << (mysqlParser.CEILING - 620)) | (1 << (mysqlParser.CENTROID - 620)) | (1 << (mysqlParser.CHARACTER_LENGTH - 620)) | (1 << (mysqlParser.CHARSET - 620)) | (1 << (mysqlParser.CHAR_LENGTH - 620)) | (1 << (mysqlParser.COERCIBILITY - 620)) | (1 << (mysqlParser.COLLATION - 620)) | (1 << (mysqlParser.COMPRESS - 620)) | (1 << (mysqlParser.CONCAT - 620)) | (1 << (mysqlParser.CONCAT_WS - 620)) | (1 << (mysqlParser.CONNECTION_ID - 620)) | (1 << (mysqlParser.CONV - 620)) | (1 << (mysqlParser.CONVERT_TZ - 620)) | (1 << (mysqlParser.COS - 620)) | (1 << (mysqlParser.COT - 620)) | (1 << (mysqlParser.CRC32 - 620)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 620)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 620)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 620)) | (1 << (mysqlParser.CREATE_DIGEST - 620)) | (1 << (mysqlParser.CROSSES - 620)) | (1 << (mysqlParser.DATEDIFF - 620)) | (1 << (mysqlParser.DATE_FORMAT - 620)) | (1 << (mysqlParser.DAYNAME - 620)) | (1 << (mysqlParser.DAYOFMONTH - 620)) | (1 << (mysqlParser.DAYOFWEEK - 620)) | (1 << (mysqlParser.DAYOFYEAR - 620)) | (1 << (mysqlParser.DECODE - 620)) | (1 << (mysqlParser.DEGREES - 620)) | (1 << (mysqlParser.DES_DECRYPT - 620)) | (1 << (mysqlParser.DES_ENCRYPT - 620)) | (1 << (mysqlParser.DIMENSION - 620)))) != 0) or ((((_la - 684)) & ~0x3f) == 0 and ((1 << (_la - 684)) & ((1 << (mysqlParser.DISJOINT - 684)) | (1 << (mysqlParser.ELT - 684)) | (1 << (mysqlParser.ENCODE - 684)) | (1 << (mysqlParser.ENCRYPT - 684)) | (1 << (mysqlParser.ENDPOINT - 684)) | (1 << (mysqlParser.ENVELOPE - 684)) | (1 << (mysqlParser.EQUALS - 684)) | (1 << (mysqlParser.EXP - 684)) | (1 << (mysqlParser.EXPORT_SET - 684)) | (1 << (mysqlParser.EXTERIORRING - 684)) | (1 << (mysqlParser.EXTRACTVALUE - 684)) | (1 << (mysqlParser.FIELD - 684)) | (1 << (mysqlParser.FIND_IN_SET - 684)) | (1 << (mysqlParser.FLOOR - 684)) | (1 << (mysqlParser.FORMAT - 684)) | (1 << (mysqlParser.FOUND_ROWS - 684)) | (1 << (mysqlParser.FROM_BASE64 - 684)) | (1 << (mysqlParser.FROM_DAYS - 684)) | (1 << (mysqlParser.FROM_UNIXTIME - 684)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 684)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 684)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 684)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 684)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 684)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 684)) | (1 << (mysqlParser.GEOMETRYN - 684)) | (1 << (mysqlParser.GEOMETRYTYPE - 684)) | (1 << (mysqlParser.GEOMFROMTEXT - 684)) | (1 << (mysqlParser.GEOMFROMWKB - 684)) | (1 << (mysqlParser.GET_FORMAT - 684)) | (1 << (mysqlParser.GET_LOCK - 684)) | (1 << (mysqlParser.GLENGTH - 684)) | (1 << (mysqlParser.GREATEST - 684)) | (1 << (mysqlParser.GTID_SUBSET - 684)) | (1 << (mysqlParser.GTID_SUBTRACT - 684)) | (1 << (mysqlParser.HEX - 684)) | (1 << (mysqlParser.IFNULL - 684)) | (1 << (mysqlParser.INET6_ATON - 684)) | (1 << (mysqlParser.INET6_NTOA - 684)) | (1 << (mysqlParser.INET_ATON - 684)) | (1 << (mysqlParser.INET_NTOA - 684)) | (1 << (mysqlParser.INSTR - 684)) | (1 << (mysqlParser.INTERIORRINGN - 684)) | (1 << (mysqlParser.INTERSECTS - 684)) | (1 << (mysqlParser.ISCLOSED - 684)) | (1 << (mysqlParser.ISEMPTY - 684)) | (1 << (mysqlParser.ISNULL - 684)) | (1 << (mysqlParser.ISSIMPLE - 684)) | (1 << (mysqlParser.IS_FREE_LOCK - 684)) | (1 << (mysqlParser.IS_IPV4 - 684)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 684)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 684)) | (1 << (mysqlParser.IS_IPV6 - 684)) | (1 << (mysqlParser.IS_USED_LOCK - 684)) | (1 << (mysqlParser.LAST_INSERT_ID - 684)) | (1 << (mysqlParser.LCASE - 684)) | (1 << (mysqlParser.LEAST - 684)) | (1 << (mysqlParser.LENGTH - 684)) | (1 << (mysqlParser.LINEFROMTEXT - 684)) | (1 << (mysqlParser.LINEFROMWKB - 684)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 684)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 684)) | (1 << (mysqlParser.LN - 684)) | (1 << (mysqlParser.LOAD_FILE - 684)))) != 0) or ((((_la - 748)) & ~0x3f) == 0 and ((1 << (_la - 748)) & ((1 << (mysqlParser.LOCATE - 748)) | (1 << (mysqlParser.LOG - 748)) | (1 << (mysqlParser.LOG10 - 748)) | (1 << (mysqlParser.LOG2 - 748)) | (1 << (mysqlParser.LOWER - 748)) | (1 << (mysqlParser.LPAD - 748)) | (1 << (mysqlParser.LTRIM - 748)) | (1 << (mysqlParser.MAKEDATE - 748)) | (1 << (mysqlParser.MAKETIME - 748)) | (1 << (mysqlParser.MAKE_SET - 748)) | (1 << (mysqlParser.MASTER_POS_WAIT - 748)) | (1 << (mysqlParser.MBRCONTAINS - 748)) | (1 << (mysqlParser.MBRDISJOINT - 748)) | (1 << (mysqlParser.MBREQUAL - 748)) | (1 << (mysqlParser.MBRINTERSECTS - 748)) | (1 << (mysqlParser.MBROVERLAPS - 748)) | (1 << (mysqlParser.MBRTOUCHES - 748)) | (1 << (mysqlParser.MBRWITHIN - 748)) | (1 << (mysqlParser.MD5 - 748)) | (1 << (mysqlParser.MLINEFROMTEXT - 748)) | (1 << (mysqlParser.MLINEFROMWKB - 748)) | (1 << (mysqlParser.MONTHNAME - 748)) | (1 << (mysqlParser.MPOINTFROMTEXT - 748)) | (1 << (mysqlParser.MPOINTFROMWKB - 748)) | (1 << (mysqlParser.MPOLYFROMTEXT - 748)) | (1 << (mysqlParser.MPOLYFROMWKB - 748)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 748)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 748)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 748)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 748)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 748)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 748)) | (1 << (mysqlParser.NAME_CONST - 748)) | (1 << (mysqlParser.NULLIF - 748)) | (1 << (mysqlParser.NUMGEOMETRIES - 748)) | (1 << (mysqlParser.NUMINTERIORRINGS - 748)) | (1 << (mysqlParser.NUMPOINTS - 748)) | (1 << (mysqlParser.OCT - 748)) | (1 << (mysqlParser.OCTET_LENGTH - 748)) | (1 << (mysqlParser.ORD - 748)) | (1 << (mysqlParser.OVERLAPS - 748)) | (1 << (mysqlParser.PERIOD_ADD - 748)) | (1 << (mysqlParser.PERIOD_DIFF - 748)) | (1 << (mysqlParser.PI - 748)) | (1 << (mysqlParser.POINTFROMTEXT - 748)) | (1 << (mysqlParser.POINTFROMWKB - 748)) | (1 << (mysqlParser.POINTN - 748)) | (1 << (mysqlParser.POLYFROMTEXT - 748)) | (1 << (mysqlParser.POLYFROMWKB - 748)) | (1 << (mysqlParser.POLYGONFROMTEXT - 748)) | (1 << (mysqlParser.POLYGONFROMWKB - 748)) | (1 << (mysqlParser.POW - 748)) | (1 << (mysqlParser.POWER - 748)) | (1 << (mysqlParser.QUOTE - 748)) | (1 << (mysqlParser.RADIANS - 748)) | (1 << (mysqlParser.RAND - 748)) | (1 << (mysqlParser.RANDOM_BYTES - 748)) | (1 << (mysqlParser.RELEASE_LOCK - 748)) | (1 << (mysqlParser.REVERSE - 748)) | (1 << (mysqlParser.ROUND - 748)) | (1 << (mysqlParser.ROW_COUNT - 748)) | (1 << (mysqlParser.RPAD - 748)) | (1 << (mysqlParser.RTRIM - 748)) | (1 << (mysqlParser.SEC_TO_TIME - 748)))) != 0) or ((((_la - 812)) & ~0x3f) == 0 and ((1 << (_la - 812)) & ((1 << (mysqlParser.SESSION_USER - 812)) | (1 << (mysqlParser.SHA - 812)) | (1 << (mysqlParser.SHA1 - 812)) | (1 << (mysqlParser.SHA2 - 812)) | (1 << (mysqlParser.SIGN - 812)) | (1 << (mysqlParser.SIN - 812)) | (1 << (mysqlParser.SLEEP - 812)) | (1 << (mysqlParser.SOUNDEX - 812)) | (1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 812)) | (1 << (mysqlParser.SQRT - 812)) | (1 << (mysqlParser.SRID - 812)) | (1 << (mysqlParser.STARTPOINT - 812)) | (1 << (mysqlParser.STRCMP - 812)) | (1 << (mysqlParser.STR_TO_DATE - 812)) | (1 << (mysqlParser.ST_AREA - 812)) | (1 << (mysqlParser.ST_ASBINARY - 812)) | (1 << (mysqlParser.ST_ASTEXT - 812)) | (1 << (mysqlParser.ST_ASWKB - 812)) | (1 << (mysqlParser.ST_ASWKT - 812)) | (1 << (mysqlParser.ST_BUFFER - 812)) | (1 << (mysqlParser.ST_CENTROID - 812)) | (1 << (mysqlParser.ST_CONTAINS - 812)) | (1 << (mysqlParser.ST_CROSSES - 812)) | (1 << (mysqlParser.ST_DIFFERENCE - 812)) | (1 << (mysqlParser.ST_DIMENSION - 812)) | (1 << (mysqlParser.ST_DISJOINT - 812)) | (1 << (mysqlParser.ST_DISTANCE - 812)) | (1 << (mysqlParser.ST_ENDPOINT - 812)) | (1 << (mysqlParser.ST_ENVELOPE - 812)) | (1 << (mysqlParser.ST_EQUALS - 812)) | (1 << (mysqlParser.ST_EXTERIORRING - 812)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 812)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 812)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 812)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 812)) | (1 << (mysqlParser.ST_GEOMETRYN - 812)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 812)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 812)) | (1 << (mysqlParser.ST_INTERIORRINGN - 812)) | (1 << (mysqlParser.ST_INTERSECTION - 812)) | (1 << (mysqlParser.ST_INTERSECTS - 812)) | (1 << (mysqlParser.ST_ISCLOSED - 812)) | (1 << (mysqlParser.ST_ISEMPTY - 812)) | (1 << (mysqlParser.ST_ISSIMPLE - 812)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 812)) | (1 << (mysqlParser.ST_LINEFROMWKB - 812)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 812)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 812)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 812)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 812)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 812)) | (1 << (mysqlParser.ST_NUMPOINTS - 812)) | (1 << (mysqlParser.ST_OVERLAPS - 812)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 812)) | (1 << (mysqlParser.ST_POINTFROMWKB - 812)) | (1 << (mysqlParser.ST_POINTN - 812)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 812)) | (1 << (mysqlParser.ST_POLYFROMWKB - 812)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 812)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 812)))) != 0) or ((((_la - 876)) & ~0x3f) == 0 and ((1 << (_la - 876)) & ((1 << (mysqlParser.ST_SRID - 876)) | (1 << (mysqlParser.ST_STARTPOINT - 876)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 876)) | (1 << (mysqlParser.ST_TOUCHES - 876)) | (1 << (mysqlParser.ST_UNION - 876)) | (1 << (mysqlParser.ST_WITHIN - 876)) | (1 << (mysqlParser.ST_X - 876)) | (1 << (mysqlParser.ST_Y - 876)) | (1 << (mysqlParser.SUBDATE - 876)) | (1 << (mysqlParser.SUBSTRING_INDEX - 876)) | (1 << (mysqlParser.SUBTIME - 876)) | (1 << (mysqlParser.SYSTEM_USER - 876)) | (1 << (mysqlParser.TAN - 876)) | (1 << (mysqlParser.TIMEDIFF - 876)) | (1 << (mysqlParser.TIMESTAMPADD - 876)) | (1 << (mysqlParser.TIMESTAMPDIFF - 876)) | (1 << (mysqlParser.TIME_FORMAT - 876)) | (1 << (mysqlParser.TIME_TO_SEC - 876)) | (1 << (mysqlParser.TOUCHES - 876)) | (1 << (mysqlParser.TO_BASE64 - 876)) | (1 << (mysqlParser.TO_DAYS - 876)) | (1 << (mysqlParser.TO_SECONDS - 876)) | (1 << (mysqlParser.UCASE - 876)) | (1 << (mysqlParser.UNCOMPRESS - 876)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 876)) | (1 << (mysqlParser.UNHEX - 876)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 876)) | (1 << (mysqlParser.UPDATEXML - 876)) | (1 << (mysqlParser.UPPER - 876)) | (1 << (mysqlParser.UUID - 876)) | (1 << (mysqlParser.UUID_SHORT - 876)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 876)) | (1 << (mysqlParser.VERSION - 876)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 876)) | (1 << (mysqlParser.WEEKDAY - 876)) | (1 << (mysqlParser.WEEKOFYEAR - 876)) | (1 << (mysqlParser.WEIGHT_STRING - 876)) | (1 << (mysqlParser.WITHIN - 876)) | (1 << (mysqlParser.YEARWEEK - 876)) | (1 << (mysqlParser.Y_FUNCTION - 876)) | (1 << (mysqlParser.X_FUNCTION - 876)))) != 0) or ((((_la - 942)) & ~0x3f) == 0 and ((1 << (_la - 942)) & ((1 << (mysqlParser.LR_BRACKET - 942)) | (1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 942)) | (1 << (mysqlParser.ID - 942)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 942)))) != 0)):
                        break



            self.state = 3914
            self.match(mysqlParser.END)
            self.state = 3915
            self.match(mysqlParser.CASE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.thenStatements = None # ProcedureSqlStatementContext
            self.elseStatements = None # ProcedureSqlStatementContext

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.IF)
            else:
                return self.getToken(mysqlParser.IF, i)

        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)


        def THEN(self):
            return self.getToken(mysqlParser.THEN, 0)

        def END(self):
            return self.getToken(mysqlParser.END, 0)

        def elifAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.ElifAlternativeContext)
            else:
                return self.getTypedRuleContext(mysqlParser.ElifAlternativeContext,i)


        def ELSE(self):
            return self.getToken(mysqlParser.ELSE, 0)

        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(mysqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatement" ):
                return visitor.visitIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def ifStatement(self):

        localctx = mysqlParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_ifStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3917
            self.match(mysqlParser.IF)
            self.state = 3918
            self.expression(0)
            self.state = 3919
            self.match(mysqlParser.THEN)
            self.state = 3921 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3920
                localctx.thenStatements = self.procedureSqlStatement()
                self.state = 3923 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 7)) & ~0x3f) == 0 and ((1 << (_la - 7)) & ((1 << (mysqlParser.ALTER - 7)) | (1 << (mysqlParser.ANALYZE - 7)) | (1 << (mysqlParser.CALL - 7)) | (1 << (mysqlParser.CASE - 7)) | (1 << (mysqlParser.CHANGE - 7)) | (1 << (mysqlParser.CHECK - 7)) | (1 << (mysqlParser.CREATE - 7)) | (1 << (mysqlParser.DELETE - 7)) | (1 << (mysqlParser.DESC - 7)) | (1 << (mysqlParser.DESCRIBE - 7)) | (1 << (mysqlParser.DROP - 7)) | (1 << (mysqlParser.EXPLAIN - 7)) | (1 << (mysqlParser.FETCH - 7)) | (1 << (mysqlParser.GRANT - 7)) | (1 << (mysqlParser.IF - 7)))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (mysqlParser.INSERT - 71)) | (1 << (mysqlParser.ITERATE - 71)) | (1 << (mysqlParser.KILL - 71)) | (1 << (mysqlParser.LEAVE - 71)) | (1 << (mysqlParser.LEFT - 71)) | (1 << (mysqlParser.LOAD - 71)) | (1 << (mysqlParser.LOCK - 71)) | (1 << (mysqlParser.LOOP - 71)) | (1 << (mysqlParser.OPTIMIZE - 71)) | (1 << (mysqlParser.PURGE - 71)) | (1 << (mysqlParser.RELEASE - 71)) | (1 << (mysqlParser.RENAME - 71)) | (1 << (mysqlParser.REPEAT - 71)) | (1 << (mysqlParser.REPLACE - 71)) | (1 << (mysqlParser.RETURN - 71)) | (1 << (mysqlParser.REVOKE - 71)) | (1 << (mysqlParser.RIGHT - 71)) | (1 << (mysqlParser.SELECT - 71)) | (1 << (mysqlParser.SET - 71)) | (1 << (mysqlParser.SHOW - 71)))) != 0) or ((((_la - 155)) & ~0x3f) == 0 and ((1 << (_la - 155)) & ((1 << (mysqlParser.UNLOCK - 155)) | (1 << (mysqlParser.UPDATE - 155)) | (1 << (mysqlParser.USE - 155)) | (1 << (mysqlParser.WHILE - 155)) | (1 << (mysqlParser.DATE - 155)) | (1 << (mysqlParser.TIME - 155)) | (1 << (mysqlParser.TIMESTAMP - 155)) | (1 << (mysqlParser.DATETIME - 155)) | (1 << (mysqlParser.YEAR - 155)) | (1 << (mysqlParser.TEXT - 155)) | (1 << (mysqlParser.ENUM - 155)) | (1 << (mysqlParser.COUNT - 155)))) != 0) or ((((_la - 236)) & ~0x3f) == 0 and ((1 << (_la - 236)) & ((1 << (mysqlParser.POSITION - 236)) | (1 << (mysqlParser.ACCOUNT - 236)) | (1 << (mysqlParser.ACTION - 236)) | (1 << (mysqlParser.AFTER - 236)) | (1 << (mysqlParser.AGGREGATE - 236)) | (1 << (mysqlParser.ALGORITHM - 236)) | (1 << (mysqlParser.ANY - 236)) | (1 << (mysqlParser.AT - 236)) | (1 << (mysqlParser.AUTHORS - 236)) | (1 << (mysqlParser.AUTOCOMMIT - 236)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 236)) | (1 << (mysqlParser.AUTO_INCREMENT - 236)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 236)) | (1 << (mysqlParser.BEGIN - 236)) | (1 << (mysqlParser.BINLOG - 236)) | (1 << (mysqlParser.BIT - 236)) | (1 << (mysqlParser.BLOCK - 236)) | (1 << (mysqlParser.BTREE - 236)) | (1 << (mysqlParser.CACHE - 236)) | (1 << (mysqlParser.CASCADED - 236)) | (1 << (mysqlParser.CHAIN - 236)) | (1 << (mysqlParser.CHANNEL - 236)) | (1 << (mysqlParser.CHECKSUM - 236)) | (1 << (mysqlParser.CIPHER - 236)) | (1 << (mysqlParser.CLIENT - 236)) | (1 << (mysqlParser.CLOSE - 236)) | (1 << (mysqlParser.COALESCE - 236)) | (1 << (mysqlParser.CODE - 236)) | (1 << (mysqlParser.COLUMNS - 236)) | (1 << (mysqlParser.COLUMN_FORMAT - 236)) | (1 << (mysqlParser.COMMENT - 236)) | (1 << (mysqlParser.COMMIT - 236)) | (1 << (mysqlParser.COMPACT - 236)) | (1 << (mysqlParser.COMPLETION - 236)) | (1 << (mysqlParser.COMPRESSED - 236)) | (1 << (mysqlParser.COMPRESSION - 236)) | (1 << (mysqlParser.CONCURRENT - 236)) | (1 << (mysqlParser.CONNECTION - 236)) | (1 << (mysqlParser.CONSISTENT - 236)) | (1 << (mysqlParser.CONTAINS - 236)) | (1 << (mysqlParser.CONTEXT - 236)) | (1 << (mysqlParser.CONTRIBUTORS - 236)) | (1 << (mysqlParser.COPY - 236)) | (1 << (mysqlParser.CPU - 236)) | (1 << (mysqlParser.DATA - 236)) | (1 << (mysqlParser.DATAFILE - 236)) | (1 << (mysqlParser.DEALLOCATE - 236)) | (1 << (mysqlParser.DEFAULT_AUTH - 236)) | (1 << (mysqlParser.DEFINER - 236)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 236)) | (1 << (mysqlParser.DIRECTORY - 236)) | (1 << (mysqlParser.DISABLE - 236)) | (1 << (mysqlParser.DISCARD - 236)) | (1 << (mysqlParser.DISK - 236)) | (1 << (mysqlParser.DO - 236)))) != 0) or ((((_la - 300)) & ~0x3f) == 0 and ((1 << (_la - 300)) & ((1 << (mysqlParser.DUMPFILE - 300)) | (1 << (mysqlParser.DUPLICATE - 300)) | (1 << (mysqlParser.DYNAMIC - 300)) | (1 << (mysqlParser.ENABLE - 300)) | (1 << (mysqlParser.ENCRYPTION - 300)) | (1 << (mysqlParser.ENDS - 300)) | (1 << (mysqlParser.ENGINE - 300)) | (1 << (mysqlParser.ENGINES - 300)) | (1 << (mysqlParser.ERROR - 300)) | (1 << (mysqlParser.ERRORS - 300)) | (1 << (mysqlParser.ESCAPE - 300)) | (1 << (mysqlParser.EVEN - 300)) | (1 << (mysqlParser.EVENT - 300)) | (1 << (mysqlParser.EVENTS - 300)) | (1 << (mysqlParser.EVERY - 300)) | (1 << (mysqlParser.EXCHANGE - 300)) | (1 << (mysqlParser.EXCLUSIVE - 300)) | (1 << (mysqlParser.EXPIRE - 300)) | (1 << (mysqlParser.EXTENT_SIZE - 300)) | (1 << (mysqlParser.FAULTS - 300)) | (1 << (mysqlParser.FIELDS - 300)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 300)) | (1 << (mysqlParser.FILTER - 300)) | (1 << (mysqlParser.FIRST - 300)) | (1 << (mysqlParser.FIXED - 300)) | (1 << (mysqlParser.FLUSH - 300)) | (1 << (mysqlParser.FOLLOWS - 300)) | (1 << (mysqlParser.FULL - 300)) | (1 << (mysqlParser.FUNCTION - 300)) | (1 << (mysqlParser.GLOBAL - 300)) | (1 << (mysqlParser.GRANTS - 300)) | (1 << (mysqlParser.GROUP_REPLICATION - 300)) | (1 << (mysqlParser.HANDLER - 300)) | (1 << (mysqlParser.HASH - 300)) | (1 << (mysqlParser.HELP - 300)) | (1 << (mysqlParser.HOST - 300)) | (1 << (mysqlParser.IDENTIFIED - 300)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 300)) | (1 << (mysqlParser.IMPORT - 300)) | (1 << (mysqlParser.INDEXES - 300)) | (1 << (mysqlParser.INITIAL_SIZE - 300)) | (1 << (mysqlParser.INPLACE - 300)) | (1 << (mysqlParser.INSERT_METHOD - 300)) | (1 << (mysqlParser.INSTALL - 300)) | (1 << (mysqlParser.INSTANCE - 300)) | (1 << (mysqlParser.INVOKER - 300)) | (1 << (mysqlParser.IO - 300)) | (1 << (mysqlParser.IO_THREAD - 300)) | (1 << (mysqlParser.IPC - 300)) | (1 << (mysqlParser.ISOLATION - 300)) | (1 << (mysqlParser.ISSUER - 300)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 300)) | (1 << (mysqlParser.LANGUAGE - 300)) | (1 << (mysqlParser.LAST - 300)) | (1 << (mysqlParser.LEAVES - 300)) | (1 << (mysqlParser.LESS - 300)))) != 0) or ((((_la - 364)) & ~0x3f) == 0 and ((1 << (_la - 364)) & ((1 << (mysqlParser.LEVEL - 364)) | (1 << (mysqlParser.LIST - 364)) | (1 << (mysqlParser.LOCAL - 364)) | (1 << (mysqlParser.LOGFILE - 364)) | (1 << (mysqlParser.LOGS - 364)) | (1 << (mysqlParser.MASTER - 364)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 364)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 364)) | (1 << (mysqlParser.MASTER_DELAY - 364)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 364)) | (1 << (mysqlParser.MASTER_HOST - 364)) | (1 << (mysqlParser.MASTER_LOG_FILE - 364)) | (1 << (mysqlParser.MASTER_LOG_POS - 364)) | (1 << (mysqlParser.MASTER_PASSWORD - 364)) | (1 << (mysqlParser.MASTER_PORT - 364)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 364)) | (1 << (mysqlParser.MASTER_SSL - 364)) | (1 << (mysqlParser.MASTER_SSL_CA - 364)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 364)) | (1 << (mysqlParser.MASTER_SSL_CERT - 364)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 364)) | (1 << (mysqlParser.MASTER_SSL_CRL - 364)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 364)) | (1 << (mysqlParser.MASTER_SSL_KEY - 364)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 364)) | (1 << (mysqlParser.MASTER_USER - 364)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 364)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 364)) | (1 << (mysqlParser.MAX_ROWS - 364)) | (1 << (mysqlParser.MAX_SIZE - 364)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 364)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 364)) | (1 << (mysqlParser.MERGE - 364)) | (1 << (mysqlParser.MID - 364)) | (1 << (mysqlParser.MIGRATE - 364)) | (1 << (mysqlParser.MIN_ROWS - 364)) | (1 << (mysqlParser.MODIFY - 364)) | (1 << (mysqlParser.MUTEX - 364)) | (1 << (mysqlParser.MYSQL - 364)) | (1 << (mysqlParser.NAME - 364)) | (1 << (mysqlParser.NAMES - 364)) | (1 << (mysqlParser.NCHAR - 364)) | (1 << (mysqlParser.NEVER - 364)) | (1 << (mysqlParser.NO - 364)) | (1 << (mysqlParser.NODEGROUP - 364)) | (1 << (mysqlParser.NONE - 364)) | (1 << (mysqlParser.OFFLINE - 364)) | (1 << (mysqlParser.OFFSET - 364)) | (1 << (mysqlParser.OJ - 364)) | (1 << (mysqlParser.OLD_PASSWORD - 364)) | (1 << (mysqlParser.ONE - 364)) | (1 << (mysqlParser.ONLINE - 364)) | (1 << (mysqlParser.ONLY - 364)) | (1 << (mysqlParser.OPEN - 364)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 364)) | (1 << (mysqlParser.OPTIONS - 364)) | (1 << (mysqlParser.OWNER - 364)) | (1 << (mysqlParser.PACK_KEYS - 364)) | (1 << (mysqlParser.PAGE - 364)) | (1 << (mysqlParser.PARSER - 364)) | (1 << (mysqlParser.PARTIAL - 364)))) != 0) or ((((_la - 428)) & ~0x3f) == 0 and ((1 << (_la - 428)) & ((1 << (mysqlParser.PARTITIONING - 428)) | (1 << (mysqlParser.PARTITIONS - 428)) | (1 << (mysqlParser.PASSWORD - 428)) | (1 << (mysqlParser.PHASE - 428)) | (1 << (mysqlParser.PLUGIN_DIR - 428)) | (1 << (mysqlParser.PLUGINS - 428)) | (1 << (mysqlParser.PORT - 428)) | (1 << (mysqlParser.PRECEDES - 428)) | (1 << (mysqlParser.PREPARE - 428)) | (1 << (mysqlParser.PRESERVE - 428)) | (1 << (mysqlParser.PREV - 428)) | (1 << (mysqlParser.PROCESSLIST - 428)) | (1 << (mysqlParser.PROFILE - 428)) | (1 << (mysqlParser.PROFILES - 428)) | (1 << (mysqlParser.PROXY - 428)) | (1 << (mysqlParser.QUERY - 428)) | (1 << (mysqlParser.QUICK - 428)) | (1 << (mysqlParser.REBUILD - 428)) | (1 << (mysqlParser.RECOVER - 428)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 428)) | (1 << (mysqlParser.REDUNDANT - 428)) | (1 << (mysqlParser.RELAY_LOG_FILE - 428)) | (1 << (mysqlParser.RELAY_LOG_POS - 428)) | (1 << (mysqlParser.RELAYLOG - 428)) | (1 << (mysqlParser.REMOVE - 428)) | (1 << (mysqlParser.REORGANIZE - 428)) | (1 << (mysqlParser.REPAIR - 428)) | (1 << (mysqlParser.REPLICATE_DO_DB - 428)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 428)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 428)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 428)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 428)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 428)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 428)) | (1 << (mysqlParser.REPLICATION - 428)) | (1 << (mysqlParser.RESET - 428)) | (1 << (mysqlParser.RESUME - 428)) | (1 << (mysqlParser.RETURNS - 428)) | (1 << (mysqlParser.ROLLBACK - 428)) | (1 << (mysqlParser.ROLLUP - 428)) | (1 << (mysqlParser.ROTATE - 428)) | (1 << (mysqlParser.ROW - 428)) | (1 << (mysqlParser.ROWS - 428)) | (1 << (mysqlParser.ROW_FORMAT - 428)) | (1 << (mysqlParser.SAVEPOINT - 428)) | (1 << (mysqlParser.SCHEDULE - 428)) | (1 << (mysqlParser.SECURITY - 428)) | (1 << (mysqlParser.SERVER - 428)) | (1 << (mysqlParser.SESSION - 428)) | (1 << (mysqlParser.SHARE - 428)) | (1 << (mysqlParser.SHARED - 428)) | (1 << (mysqlParser.SIGNED - 428)) | (1 << (mysqlParser.SIMPLE - 428)) | (1 << (mysqlParser.SLAVE - 428)) | (1 << (mysqlParser.SNAPSHOT - 428)) | (1 << (mysqlParser.SOCKET - 428)) | (1 << (mysqlParser.SOME - 428)) | (1 << (mysqlParser.SOUNDS - 428)) | (1 << (mysqlParser.SOURCE - 428)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 428)))) != 0) or ((((_la - 492)) & ~0x3f) == 0 and ((1 << (_la - 492)) & ((1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 492)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 492)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 492)) | (1 << (mysqlParser.SQL_CACHE - 492)) | (1 << (mysqlParser.SQL_NO_CACHE - 492)) | (1 << (mysqlParser.SQL_THREAD - 492)) | (1 << (mysqlParser.START - 492)) | (1 << (mysqlParser.STARTS - 492)) | (1 << (mysqlParser.STATS_AUTO_RECALC - 492)) | (1 << (mysqlParser.STATS_PERSISTENT - 492)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 492)) | (1 << (mysqlParser.STATUS - 492)) | (1 << (mysqlParser.STOP - 492)) | (1 << (mysqlParser.STORAGE - 492)) | (1 << (mysqlParser.STRING - 492)) | (1 << (mysqlParser.SUBJECT - 492)) | (1 << (mysqlParser.SUBPARTITION - 492)) | (1 << (mysqlParser.SUBPARTITIONS - 492)) | (1 << (mysqlParser.SUSPEND - 492)) | (1 << (mysqlParser.SWAPS - 492)) | (1 << (mysqlParser.SWITCHES - 492)) | (1 << (mysqlParser.TABLESPACE - 492)) | (1 << (mysqlParser.TEMPORARY - 492)) | (1 << (mysqlParser.TEMPTABLE - 492)) | (1 << (mysqlParser.THAN - 492)) | (1 << (mysqlParser.TRANSACTION - 492)) | (1 << (mysqlParser.TRUNCATE - 492)) | (1 << (mysqlParser.UNDEFINED - 492)) | (1 << (mysqlParser.UNDOFILE - 492)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 492)) | (1 << (mysqlParser.UNINSTALL - 492)) | (1 << (mysqlParser.UNKNOWN - 492)) | (1 << (mysqlParser.UPGRADE - 492)) | (1 << (mysqlParser.USER - 492)) | (1 << (mysqlParser.VALIDATION - 492)) | (1 << (mysqlParser.VALUE - 492)) | (1 << (mysqlParser.VARIABLES - 492)) | (1 << (mysqlParser.VIEW - 492)) | (1 << (mysqlParser.WAIT - 492)) | (1 << (mysqlParser.WARNINGS - 492)) | (1 << (mysqlParser.WITHOUT - 492)) | (1 << (mysqlParser.WORK - 492)) | (1 << (mysqlParser.WRAPPER - 492)) | (1 << (mysqlParser.X509 - 492)) | (1 << (mysqlParser.XA - 492)) | (1 << (mysqlParser.XML - 492)) | (1 << (mysqlParser.QUARTER - 492)) | (1 << (mysqlParser.MONTH - 492)) | (1 << (mysqlParser.DAY - 492)) | (1 << (mysqlParser.HOUR - 492)) | (1 << (mysqlParser.MINUTE - 492)) | (1 << (mysqlParser.WEEK - 492)) | (1 << (mysqlParser.SECOND - 492)) | (1 << (mysqlParser.MICROSECOND - 492)))) != 0) or ((((_la - 556)) & ~0x3f) == 0 and ((1 << (_la - 556)) & ((1 << (mysqlParser.TABLES - 556)) | (1 << (mysqlParser.ROUTINE - 556)) | (1 << (mysqlParser.EXECUTE - 556)) | (1 << (mysqlParser.FILE - 556)) | (1 << (mysqlParser.PROCESS - 556)) | (1 << (mysqlParser.RELOAD - 556)) | (1 << (mysqlParser.SHUTDOWN - 556)) | (1 << (mysqlParser.SUPER - 556)) | (1 << (mysqlParser.PRIVILEGES - 556)) | (1 << (mysqlParser.ARMSCII8 - 556)) | (1 << (mysqlParser.ASCII - 556)) | (1 << (mysqlParser.BIG5 - 556)) | (1 << (mysqlParser.CP1250 - 556)) | (1 << (mysqlParser.CP1251 - 556)) | (1 << (mysqlParser.CP1256 - 556)) | (1 << (mysqlParser.CP1257 - 556)) | (1 << (mysqlParser.CP850 - 556)) | (1 << (mysqlParser.CP852 - 556)) | (1 << (mysqlParser.CP866 - 556)) | (1 << (mysqlParser.CP932 - 556)) | (1 << (mysqlParser.DEC8 - 556)) | (1 << (mysqlParser.EUCJPMS - 556)) | (1 << (mysqlParser.EUCKR - 556)) | (1 << (mysqlParser.GB2312 - 556)) | (1 << (mysqlParser.GBK - 556)) | (1 << (mysqlParser.GEOSTD8 - 556)) | (1 << (mysqlParser.GREEK - 556)) | (1 << (mysqlParser.HEBREW - 556)) | (1 << (mysqlParser.HP8 - 556)) | (1 << (mysqlParser.KEYBCS2 - 556)) | (1 << (mysqlParser.KOI8R - 556)) | (1 << (mysqlParser.KOI8U - 556)) | (1 << (mysqlParser.LATIN1 - 556)) | (1 << (mysqlParser.LATIN2 - 556)) | (1 << (mysqlParser.LATIN5 - 556)) | (1 << (mysqlParser.LATIN7 - 556)) | (1 << (mysqlParser.MACCE - 556)) | (1 << (mysqlParser.MACROMAN - 556)) | (1 << (mysqlParser.SJIS - 556)) | (1 << (mysqlParser.SWE7 - 556)) | (1 << (mysqlParser.TIS620 - 556)) | (1 << (mysqlParser.UCS2 - 556)) | (1 << (mysqlParser.UJIS - 556)) | (1 << (mysqlParser.UTF16 - 556)) | (1 << (mysqlParser.UTF16LE - 556)) | (1 << (mysqlParser.UTF32 - 556)) | (1 << (mysqlParser.UTF8 - 556)) | (1 << (mysqlParser.UTF8MB3 - 556)) | (1 << (mysqlParser.UTF8MB4 - 556)) | (1 << (mysqlParser.ARCHIVE - 556)) | (1 << (mysqlParser.BLACKHOLE - 556)) | (1 << (mysqlParser.CSV - 556)) | (1 << (mysqlParser.FEDERATED - 556)) | (1 << (mysqlParser.INNODB - 556)) | (1 << (mysqlParser.MEMORY - 556)) | (1 << (mysqlParser.MRG_MYISAM - 556)) | (1 << (mysqlParser.MYISAM - 556)) | (1 << (mysqlParser.NDB - 556)) | (1 << (mysqlParser.NDBCLUSTER - 556)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 556)) | (1 << (mysqlParser.REPEATABLE - 556)) | (1 << (mysqlParser.COMMITTED - 556)) | (1 << (mysqlParser.UNCOMMITTED - 556)) | (1 << (mysqlParser.SERIALIZABLE - 556)))) != 0) or ((((_la - 620)) & ~0x3f) == 0 and ((1 << (_la - 620)) & ((1 << (mysqlParser.GEOMETRYCOLLECTION - 620)) | (1 << (mysqlParser.LINESTRING - 620)) | (1 << (mysqlParser.MULTILINESTRING - 620)) | (1 << (mysqlParser.MULTIPOINT - 620)) | (1 << (mysqlParser.MULTIPOLYGON - 620)) | (1 << (mysqlParser.POINT - 620)) | (1 << (mysqlParser.POLYGON - 620)) | (1 << (mysqlParser.ABS - 620)) | (1 << (mysqlParser.ACOS - 620)) | (1 << (mysqlParser.ADDDATE - 620)) | (1 << (mysqlParser.ADDTIME - 620)) | (1 << (mysqlParser.AES_DECRYPT - 620)) | (1 << (mysqlParser.AES_ENCRYPT - 620)) | (1 << (mysqlParser.AREA - 620)) | (1 << (mysqlParser.ASBINARY - 620)) | (1 << (mysqlParser.ASIN - 620)) | (1 << (mysqlParser.ASTEXT - 620)) | (1 << (mysqlParser.ASWKB - 620)) | (1 << (mysqlParser.ASWKT - 620)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 620)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 620)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 620)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 620)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 620)) | (1 << (mysqlParser.ATAN - 620)) | (1 << (mysqlParser.ATAN2 - 620)) | (1 << (mysqlParser.BENCHMARK - 620)) | (1 << (mysqlParser.BIN - 620)) | (1 << (mysqlParser.BIT_COUNT - 620)) | (1 << (mysqlParser.BIT_LENGTH - 620)) | (1 << (mysqlParser.BUFFER - 620)) | (1 << (mysqlParser.CEIL - 620)) | (1 << (mysqlParser.CEILING - 620)) | (1 << (mysqlParser.CENTROID - 620)) | (1 << (mysqlParser.CHARACTER_LENGTH - 620)) | (1 << (mysqlParser.CHARSET - 620)) | (1 << (mysqlParser.CHAR_LENGTH - 620)) | (1 << (mysqlParser.COERCIBILITY - 620)) | (1 << (mysqlParser.COLLATION - 620)) | (1 << (mysqlParser.COMPRESS - 620)) | (1 << (mysqlParser.CONCAT - 620)) | (1 << (mysqlParser.CONCAT_WS - 620)) | (1 << (mysqlParser.CONNECTION_ID - 620)) | (1 << (mysqlParser.CONV - 620)) | (1 << (mysqlParser.CONVERT_TZ - 620)) | (1 << (mysqlParser.COS - 620)) | (1 << (mysqlParser.COT - 620)) | (1 << (mysqlParser.CRC32 - 620)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 620)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 620)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 620)) | (1 << (mysqlParser.CREATE_DIGEST - 620)) | (1 << (mysqlParser.CROSSES - 620)) | (1 << (mysqlParser.DATEDIFF - 620)) | (1 << (mysqlParser.DATE_FORMAT - 620)) | (1 << (mysqlParser.DAYNAME - 620)) | (1 << (mysqlParser.DAYOFMONTH - 620)) | (1 << (mysqlParser.DAYOFWEEK - 620)) | (1 << (mysqlParser.DAYOFYEAR - 620)) | (1 << (mysqlParser.DECODE - 620)) | (1 << (mysqlParser.DEGREES - 620)) | (1 << (mysqlParser.DES_DECRYPT - 620)) | (1 << (mysqlParser.DES_ENCRYPT - 620)) | (1 << (mysqlParser.DIMENSION - 620)))) != 0) or ((((_la - 684)) & ~0x3f) == 0 and ((1 << (_la - 684)) & ((1 << (mysqlParser.DISJOINT - 684)) | (1 << (mysqlParser.ELT - 684)) | (1 << (mysqlParser.ENCODE - 684)) | (1 << (mysqlParser.ENCRYPT - 684)) | (1 << (mysqlParser.ENDPOINT - 684)) | (1 << (mysqlParser.ENVELOPE - 684)) | (1 << (mysqlParser.EQUALS - 684)) | (1 << (mysqlParser.EXP - 684)) | (1 << (mysqlParser.EXPORT_SET - 684)) | (1 << (mysqlParser.EXTERIORRING - 684)) | (1 << (mysqlParser.EXTRACTVALUE - 684)) | (1 << (mysqlParser.FIELD - 684)) | (1 << (mysqlParser.FIND_IN_SET - 684)) | (1 << (mysqlParser.FLOOR - 684)) | (1 << (mysqlParser.FORMAT - 684)) | (1 << (mysqlParser.FOUND_ROWS - 684)) | (1 << (mysqlParser.FROM_BASE64 - 684)) | (1 << (mysqlParser.FROM_DAYS - 684)) | (1 << (mysqlParser.FROM_UNIXTIME - 684)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 684)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 684)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 684)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 684)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 684)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 684)) | (1 << (mysqlParser.GEOMETRYN - 684)) | (1 << (mysqlParser.GEOMETRYTYPE - 684)) | (1 << (mysqlParser.GEOMFROMTEXT - 684)) | (1 << (mysqlParser.GEOMFROMWKB - 684)) | (1 << (mysqlParser.GET_FORMAT - 684)) | (1 << (mysqlParser.GET_LOCK - 684)) | (1 << (mysqlParser.GLENGTH - 684)) | (1 << (mysqlParser.GREATEST - 684)) | (1 << (mysqlParser.GTID_SUBSET - 684)) | (1 << (mysqlParser.GTID_SUBTRACT - 684)) | (1 << (mysqlParser.HEX - 684)) | (1 << (mysqlParser.IFNULL - 684)) | (1 << (mysqlParser.INET6_ATON - 684)) | (1 << (mysqlParser.INET6_NTOA - 684)) | (1 << (mysqlParser.INET_ATON - 684)) | (1 << (mysqlParser.INET_NTOA - 684)) | (1 << (mysqlParser.INSTR - 684)) | (1 << (mysqlParser.INTERIORRINGN - 684)) | (1 << (mysqlParser.INTERSECTS - 684)) | (1 << (mysqlParser.ISCLOSED - 684)) | (1 << (mysqlParser.ISEMPTY - 684)) | (1 << (mysqlParser.ISNULL - 684)) | (1 << (mysqlParser.ISSIMPLE - 684)) | (1 << (mysqlParser.IS_FREE_LOCK - 684)) | (1 << (mysqlParser.IS_IPV4 - 684)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 684)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 684)) | (1 << (mysqlParser.IS_IPV6 - 684)) | (1 << (mysqlParser.IS_USED_LOCK - 684)) | (1 << (mysqlParser.LAST_INSERT_ID - 684)) | (1 << (mysqlParser.LCASE - 684)) | (1 << (mysqlParser.LEAST - 684)) | (1 << (mysqlParser.LENGTH - 684)) | (1 << (mysqlParser.LINEFROMTEXT - 684)) | (1 << (mysqlParser.LINEFROMWKB - 684)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 684)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 684)) | (1 << (mysqlParser.LN - 684)) | (1 << (mysqlParser.LOAD_FILE - 684)))) != 0) or ((((_la - 748)) & ~0x3f) == 0 and ((1 << (_la - 748)) & ((1 << (mysqlParser.LOCATE - 748)) | (1 << (mysqlParser.LOG - 748)) | (1 << (mysqlParser.LOG10 - 748)) | (1 << (mysqlParser.LOG2 - 748)) | (1 << (mysqlParser.LOWER - 748)) | (1 << (mysqlParser.LPAD - 748)) | (1 << (mysqlParser.LTRIM - 748)) | (1 << (mysqlParser.MAKEDATE - 748)) | (1 << (mysqlParser.MAKETIME - 748)) | (1 << (mysqlParser.MAKE_SET - 748)) | (1 << (mysqlParser.MASTER_POS_WAIT - 748)) | (1 << (mysqlParser.MBRCONTAINS - 748)) | (1 << (mysqlParser.MBRDISJOINT - 748)) | (1 << (mysqlParser.MBREQUAL - 748)) | (1 << (mysqlParser.MBRINTERSECTS - 748)) | (1 << (mysqlParser.MBROVERLAPS - 748)) | (1 << (mysqlParser.MBRTOUCHES - 748)) | (1 << (mysqlParser.MBRWITHIN - 748)) | (1 << (mysqlParser.MD5 - 748)) | (1 << (mysqlParser.MLINEFROMTEXT - 748)) | (1 << (mysqlParser.MLINEFROMWKB - 748)) | (1 << (mysqlParser.MONTHNAME - 748)) | (1 << (mysqlParser.MPOINTFROMTEXT - 748)) | (1 << (mysqlParser.MPOINTFROMWKB - 748)) | (1 << (mysqlParser.MPOLYFROMTEXT - 748)) | (1 << (mysqlParser.MPOLYFROMWKB - 748)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 748)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 748)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 748)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 748)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 748)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 748)) | (1 << (mysqlParser.NAME_CONST - 748)) | (1 << (mysqlParser.NULLIF - 748)) | (1 << (mysqlParser.NUMGEOMETRIES - 748)) | (1 << (mysqlParser.NUMINTERIORRINGS - 748)) | (1 << (mysqlParser.NUMPOINTS - 748)) | (1 << (mysqlParser.OCT - 748)) | (1 << (mysqlParser.OCTET_LENGTH - 748)) | (1 << (mysqlParser.ORD - 748)) | (1 << (mysqlParser.OVERLAPS - 748)) | (1 << (mysqlParser.PERIOD_ADD - 748)) | (1 << (mysqlParser.PERIOD_DIFF - 748)) | (1 << (mysqlParser.PI - 748)) | (1 << (mysqlParser.POINTFROMTEXT - 748)) | (1 << (mysqlParser.POINTFROMWKB - 748)) | (1 << (mysqlParser.POINTN - 748)) | (1 << (mysqlParser.POLYFROMTEXT - 748)) | (1 << (mysqlParser.POLYFROMWKB - 748)) | (1 << (mysqlParser.POLYGONFROMTEXT - 748)) | (1 << (mysqlParser.POLYGONFROMWKB - 748)) | (1 << (mysqlParser.POW - 748)) | (1 << (mysqlParser.POWER - 748)) | (1 << (mysqlParser.QUOTE - 748)) | (1 << (mysqlParser.RADIANS - 748)) | (1 << (mysqlParser.RAND - 748)) | (1 << (mysqlParser.RANDOM_BYTES - 748)) | (1 << (mysqlParser.RELEASE_LOCK - 748)) | (1 << (mysqlParser.REVERSE - 748)) | (1 << (mysqlParser.ROUND - 748)) | (1 << (mysqlParser.ROW_COUNT - 748)) | (1 << (mysqlParser.RPAD - 748)) | (1 << (mysqlParser.RTRIM - 748)) | (1 << (mysqlParser.SEC_TO_TIME - 748)))) != 0) or ((((_la - 812)) & ~0x3f) == 0 and ((1 << (_la - 812)) & ((1 << (mysqlParser.SESSION_USER - 812)) | (1 << (mysqlParser.SHA - 812)) | (1 << (mysqlParser.SHA1 - 812)) | (1 << (mysqlParser.SHA2 - 812)) | (1 << (mysqlParser.SIGN - 812)) | (1 << (mysqlParser.SIN - 812)) | (1 << (mysqlParser.SLEEP - 812)) | (1 << (mysqlParser.SOUNDEX - 812)) | (1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 812)) | (1 << (mysqlParser.SQRT - 812)) | (1 << (mysqlParser.SRID - 812)) | (1 << (mysqlParser.STARTPOINT - 812)) | (1 << (mysqlParser.STRCMP - 812)) | (1 << (mysqlParser.STR_TO_DATE - 812)) | (1 << (mysqlParser.ST_AREA - 812)) | (1 << (mysqlParser.ST_ASBINARY - 812)) | (1 << (mysqlParser.ST_ASTEXT - 812)) | (1 << (mysqlParser.ST_ASWKB - 812)) | (1 << (mysqlParser.ST_ASWKT - 812)) | (1 << (mysqlParser.ST_BUFFER - 812)) | (1 << (mysqlParser.ST_CENTROID - 812)) | (1 << (mysqlParser.ST_CONTAINS - 812)) | (1 << (mysqlParser.ST_CROSSES - 812)) | (1 << (mysqlParser.ST_DIFFERENCE - 812)) | (1 << (mysqlParser.ST_DIMENSION - 812)) | (1 << (mysqlParser.ST_DISJOINT - 812)) | (1 << (mysqlParser.ST_DISTANCE - 812)) | (1 << (mysqlParser.ST_ENDPOINT - 812)) | (1 << (mysqlParser.ST_ENVELOPE - 812)) | (1 << (mysqlParser.ST_EQUALS - 812)) | (1 << (mysqlParser.ST_EXTERIORRING - 812)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 812)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 812)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 812)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 812)) | (1 << (mysqlParser.ST_GEOMETRYN - 812)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 812)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 812)) | (1 << (mysqlParser.ST_INTERIORRINGN - 812)) | (1 << (mysqlParser.ST_INTERSECTION - 812)) | (1 << (mysqlParser.ST_INTERSECTS - 812)) | (1 << (mysqlParser.ST_ISCLOSED - 812)) | (1 << (mysqlParser.ST_ISEMPTY - 812)) | (1 << (mysqlParser.ST_ISSIMPLE - 812)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 812)) | (1 << (mysqlParser.ST_LINEFROMWKB - 812)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 812)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 812)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 812)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 812)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 812)) | (1 << (mysqlParser.ST_NUMPOINTS - 812)) | (1 << (mysqlParser.ST_OVERLAPS - 812)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 812)) | (1 << (mysqlParser.ST_POINTFROMWKB - 812)) | (1 << (mysqlParser.ST_POINTN - 812)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 812)) | (1 << (mysqlParser.ST_POLYFROMWKB - 812)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 812)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 812)))) != 0) or ((((_la - 876)) & ~0x3f) == 0 and ((1 << (_la - 876)) & ((1 << (mysqlParser.ST_SRID - 876)) | (1 << (mysqlParser.ST_STARTPOINT - 876)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 876)) | (1 << (mysqlParser.ST_TOUCHES - 876)) | (1 << (mysqlParser.ST_UNION - 876)) | (1 << (mysqlParser.ST_WITHIN - 876)) | (1 << (mysqlParser.ST_X - 876)) | (1 << (mysqlParser.ST_Y - 876)) | (1 << (mysqlParser.SUBDATE - 876)) | (1 << (mysqlParser.SUBSTRING_INDEX - 876)) | (1 << (mysqlParser.SUBTIME - 876)) | (1 << (mysqlParser.SYSTEM_USER - 876)) | (1 << (mysqlParser.TAN - 876)) | (1 << (mysqlParser.TIMEDIFF - 876)) | (1 << (mysqlParser.TIMESTAMPADD - 876)) | (1 << (mysqlParser.TIMESTAMPDIFF - 876)) | (1 << (mysqlParser.TIME_FORMAT - 876)) | (1 << (mysqlParser.TIME_TO_SEC - 876)) | (1 << (mysqlParser.TOUCHES - 876)) | (1 << (mysqlParser.TO_BASE64 - 876)) | (1 << (mysqlParser.TO_DAYS - 876)) | (1 << (mysqlParser.TO_SECONDS - 876)) | (1 << (mysqlParser.UCASE - 876)) | (1 << (mysqlParser.UNCOMPRESS - 876)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 876)) | (1 << (mysqlParser.UNHEX - 876)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 876)) | (1 << (mysqlParser.UPDATEXML - 876)) | (1 << (mysqlParser.UPPER - 876)) | (1 << (mysqlParser.UUID - 876)) | (1 << (mysqlParser.UUID_SHORT - 876)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 876)) | (1 << (mysqlParser.VERSION - 876)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 876)) | (1 << (mysqlParser.WEEKDAY - 876)) | (1 << (mysqlParser.WEEKOFYEAR - 876)) | (1 << (mysqlParser.WEIGHT_STRING - 876)) | (1 << (mysqlParser.WITHIN - 876)) | (1 << (mysqlParser.YEARWEEK - 876)) | (1 << (mysqlParser.Y_FUNCTION - 876)) | (1 << (mysqlParser.X_FUNCTION - 876)))) != 0) or ((((_la - 942)) & ~0x3f) == 0 and ((1 << (_la - 942)) & ((1 << (mysqlParser.LR_BRACKET - 942)) | (1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 942)) | (1 << (mysqlParser.ID - 942)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 942)))) != 0)):
                    break

            self.state = 3928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.ELSEIF:
                self.state = 3925
                self.elifAlternative()
                self.state = 3930
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.ELSE:
                self.state = 3931
                self.match(mysqlParser.ELSE)
                self.state = 3933 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3932
                    localctx.elseStatements = self.procedureSqlStatement()
                    self.state = 3935 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 7)) & ~0x3f) == 0 and ((1 << (_la - 7)) & ((1 << (mysqlParser.ALTER - 7)) | (1 << (mysqlParser.ANALYZE - 7)) | (1 << (mysqlParser.CALL - 7)) | (1 << (mysqlParser.CASE - 7)) | (1 << (mysqlParser.CHANGE - 7)) | (1 << (mysqlParser.CHECK - 7)) | (1 << (mysqlParser.CREATE - 7)) | (1 << (mysqlParser.DELETE - 7)) | (1 << (mysqlParser.DESC - 7)) | (1 << (mysqlParser.DESCRIBE - 7)) | (1 << (mysqlParser.DROP - 7)) | (1 << (mysqlParser.EXPLAIN - 7)) | (1 << (mysqlParser.FETCH - 7)) | (1 << (mysqlParser.GRANT - 7)) | (1 << (mysqlParser.IF - 7)))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (mysqlParser.INSERT - 71)) | (1 << (mysqlParser.ITERATE - 71)) | (1 << (mysqlParser.KILL - 71)) | (1 << (mysqlParser.LEAVE - 71)) | (1 << (mysqlParser.LEFT - 71)) | (1 << (mysqlParser.LOAD - 71)) | (1 << (mysqlParser.LOCK - 71)) | (1 << (mysqlParser.LOOP - 71)) | (1 << (mysqlParser.OPTIMIZE - 71)) | (1 << (mysqlParser.PURGE - 71)) | (1 << (mysqlParser.RELEASE - 71)) | (1 << (mysqlParser.RENAME - 71)) | (1 << (mysqlParser.REPEAT - 71)) | (1 << (mysqlParser.REPLACE - 71)) | (1 << (mysqlParser.RETURN - 71)) | (1 << (mysqlParser.REVOKE - 71)) | (1 << (mysqlParser.RIGHT - 71)) | (1 << (mysqlParser.SELECT - 71)) | (1 << (mysqlParser.SET - 71)) | (1 << (mysqlParser.SHOW - 71)))) != 0) or ((((_la - 155)) & ~0x3f) == 0 and ((1 << (_la - 155)) & ((1 << (mysqlParser.UNLOCK - 155)) | (1 << (mysqlParser.UPDATE - 155)) | (1 << (mysqlParser.USE - 155)) | (1 << (mysqlParser.WHILE - 155)) | (1 << (mysqlParser.DATE - 155)) | (1 << (mysqlParser.TIME - 155)) | (1 << (mysqlParser.TIMESTAMP - 155)) | (1 << (mysqlParser.DATETIME - 155)) | (1 << (mysqlParser.YEAR - 155)) | (1 << (mysqlParser.TEXT - 155)) | (1 << (mysqlParser.ENUM - 155)) | (1 << (mysqlParser.COUNT - 155)))) != 0) or ((((_la - 236)) & ~0x3f) == 0 and ((1 << (_la - 236)) & ((1 << (mysqlParser.POSITION - 236)) | (1 << (mysqlParser.ACCOUNT - 236)) | (1 << (mysqlParser.ACTION - 236)) | (1 << (mysqlParser.AFTER - 236)) | (1 << (mysqlParser.AGGREGATE - 236)) | (1 << (mysqlParser.ALGORITHM - 236)) | (1 << (mysqlParser.ANY - 236)) | (1 << (mysqlParser.AT - 236)) | (1 << (mysqlParser.AUTHORS - 236)) | (1 << (mysqlParser.AUTOCOMMIT - 236)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 236)) | (1 << (mysqlParser.AUTO_INCREMENT - 236)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 236)) | (1 << (mysqlParser.BEGIN - 236)) | (1 << (mysqlParser.BINLOG - 236)) | (1 << (mysqlParser.BIT - 236)) | (1 << (mysqlParser.BLOCK - 236)) | (1 << (mysqlParser.BTREE - 236)) | (1 << (mysqlParser.CACHE - 236)) | (1 << (mysqlParser.CASCADED - 236)) | (1 << (mysqlParser.CHAIN - 236)) | (1 << (mysqlParser.CHANNEL - 236)) | (1 << (mysqlParser.CHECKSUM - 236)) | (1 << (mysqlParser.CIPHER - 236)) | (1 << (mysqlParser.CLIENT - 236)) | (1 << (mysqlParser.CLOSE - 236)) | (1 << (mysqlParser.COALESCE - 236)) | (1 << (mysqlParser.CODE - 236)) | (1 << (mysqlParser.COLUMNS - 236)) | (1 << (mysqlParser.COLUMN_FORMAT - 236)) | (1 << (mysqlParser.COMMENT - 236)) | (1 << (mysqlParser.COMMIT - 236)) | (1 << (mysqlParser.COMPACT - 236)) | (1 << (mysqlParser.COMPLETION - 236)) | (1 << (mysqlParser.COMPRESSED - 236)) | (1 << (mysqlParser.COMPRESSION - 236)) | (1 << (mysqlParser.CONCURRENT - 236)) | (1 << (mysqlParser.CONNECTION - 236)) | (1 << (mysqlParser.CONSISTENT - 236)) | (1 << (mysqlParser.CONTAINS - 236)) | (1 << (mysqlParser.CONTEXT - 236)) | (1 << (mysqlParser.CONTRIBUTORS - 236)) | (1 << (mysqlParser.COPY - 236)) | (1 << (mysqlParser.CPU - 236)) | (1 << (mysqlParser.DATA - 236)) | (1 << (mysqlParser.DATAFILE - 236)) | (1 << (mysqlParser.DEALLOCATE - 236)) | (1 << (mysqlParser.DEFAULT_AUTH - 236)) | (1 << (mysqlParser.DEFINER - 236)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 236)) | (1 << (mysqlParser.DIRECTORY - 236)) | (1 << (mysqlParser.DISABLE - 236)) | (1 << (mysqlParser.DISCARD - 236)) | (1 << (mysqlParser.DISK - 236)) | (1 << (mysqlParser.DO - 236)))) != 0) or ((((_la - 300)) & ~0x3f) == 0 and ((1 << (_la - 300)) & ((1 << (mysqlParser.DUMPFILE - 300)) | (1 << (mysqlParser.DUPLICATE - 300)) | (1 << (mysqlParser.DYNAMIC - 300)) | (1 << (mysqlParser.ENABLE - 300)) | (1 << (mysqlParser.ENCRYPTION - 300)) | (1 << (mysqlParser.ENDS - 300)) | (1 << (mysqlParser.ENGINE - 300)) | (1 << (mysqlParser.ENGINES - 300)) | (1 << (mysqlParser.ERROR - 300)) | (1 << (mysqlParser.ERRORS - 300)) | (1 << (mysqlParser.ESCAPE - 300)) | (1 << (mysqlParser.EVEN - 300)) | (1 << (mysqlParser.EVENT - 300)) | (1 << (mysqlParser.EVENTS - 300)) | (1 << (mysqlParser.EVERY - 300)) | (1 << (mysqlParser.EXCHANGE - 300)) | (1 << (mysqlParser.EXCLUSIVE - 300)) | (1 << (mysqlParser.EXPIRE - 300)) | (1 << (mysqlParser.EXTENT_SIZE - 300)) | (1 << (mysqlParser.FAULTS - 300)) | (1 << (mysqlParser.FIELDS - 300)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 300)) | (1 << (mysqlParser.FILTER - 300)) | (1 << (mysqlParser.FIRST - 300)) | (1 << (mysqlParser.FIXED - 300)) | (1 << (mysqlParser.FLUSH - 300)) | (1 << (mysqlParser.FOLLOWS - 300)) | (1 << (mysqlParser.FULL - 300)) | (1 << (mysqlParser.FUNCTION - 300)) | (1 << (mysqlParser.GLOBAL - 300)) | (1 << (mysqlParser.GRANTS - 300)) | (1 << (mysqlParser.GROUP_REPLICATION - 300)) | (1 << (mysqlParser.HANDLER - 300)) | (1 << (mysqlParser.HASH - 300)) | (1 << (mysqlParser.HELP - 300)) | (1 << (mysqlParser.HOST - 300)) | (1 << (mysqlParser.IDENTIFIED - 300)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 300)) | (1 << (mysqlParser.IMPORT - 300)) | (1 << (mysqlParser.INDEXES - 300)) | (1 << (mysqlParser.INITIAL_SIZE - 300)) | (1 << (mysqlParser.INPLACE - 300)) | (1 << (mysqlParser.INSERT_METHOD - 300)) | (1 << (mysqlParser.INSTALL - 300)) | (1 << (mysqlParser.INSTANCE - 300)) | (1 << (mysqlParser.INVOKER - 300)) | (1 << (mysqlParser.IO - 300)) | (1 << (mysqlParser.IO_THREAD - 300)) | (1 << (mysqlParser.IPC - 300)) | (1 << (mysqlParser.ISOLATION - 300)) | (1 << (mysqlParser.ISSUER - 300)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 300)) | (1 << (mysqlParser.LANGUAGE - 300)) | (1 << (mysqlParser.LAST - 300)) | (1 << (mysqlParser.LEAVES - 300)) | (1 << (mysqlParser.LESS - 300)))) != 0) or ((((_la - 364)) & ~0x3f) == 0 and ((1 << (_la - 364)) & ((1 << (mysqlParser.LEVEL - 364)) | (1 << (mysqlParser.LIST - 364)) | (1 << (mysqlParser.LOCAL - 364)) | (1 << (mysqlParser.LOGFILE - 364)) | (1 << (mysqlParser.LOGS - 364)) | (1 << (mysqlParser.MASTER - 364)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 364)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 364)) | (1 << (mysqlParser.MASTER_DELAY - 364)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 364)) | (1 << (mysqlParser.MASTER_HOST - 364)) | (1 << (mysqlParser.MASTER_LOG_FILE - 364)) | (1 << (mysqlParser.MASTER_LOG_POS - 364)) | (1 << (mysqlParser.MASTER_PASSWORD - 364)) | (1 << (mysqlParser.MASTER_PORT - 364)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 364)) | (1 << (mysqlParser.MASTER_SSL - 364)) | (1 << (mysqlParser.MASTER_SSL_CA - 364)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 364)) | (1 << (mysqlParser.MASTER_SSL_CERT - 364)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 364)) | (1 << (mysqlParser.MASTER_SSL_CRL - 364)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 364)) | (1 << (mysqlParser.MASTER_SSL_KEY - 364)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 364)) | (1 << (mysqlParser.MASTER_USER - 364)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 364)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 364)) | (1 << (mysqlParser.MAX_ROWS - 364)) | (1 << (mysqlParser.MAX_SIZE - 364)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 364)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 364)) | (1 << (mysqlParser.MERGE - 364)) | (1 << (mysqlParser.MID - 364)) | (1 << (mysqlParser.MIGRATE - 364)) | (1 << (mysqlParser.MIN_ROWS - 364)) | (1 << (mysqlParser.MODIFY - 364)) | (1 << (mysqlParser.MUTEX - 364)) | (1 << (mysqlParser.MYSQL - 364)) | (1 << (mysqlParser.NAME - 364)) | (1 << (mysqlParser.NAMES - 364)) | (1 << (mysqlParser.NCHAR - 364)) | (1 << (mysqlParser.NEVER - 364)) | (1 << (mysqlParser.NO - 364)) | (1 << (mysqlParser.NODEGROUP - 364)) | (1 << (mysqlParser.NONE - 364)) | (1 << (mysqlParser.OFFLINE - 364)) | (1 << (mysqlParser.OFFSET - 364)) | (1 << (mysqlParser.OJ - 364)) | (1 << (mysqlParser.OLD_PASSWORD - 364)) | (1 << (mysqlParser.ONE - 364)) | (1 << (mysqlParser.ONLINE - 364)) | (1 << (mysqlParser.ONLY - 364)) | (1 << (mysqlParser.OPEN - 364)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 364)) | (1 << (mysqlParser.OPTIONS - 364)) | (1 << (mysqlParser.OWNER - 364)) | (1 << (mysqlParser.PACK_KEYS - 364)) | (1 << (mysqlParser.PAGE - 364)) | (1 << (mysqlParser.PARSER - 364)) | (1 << (mysqlParser.PARTIAL - 364)))) != 0) or ((((_la - 428)) & ~0x3f) == 0 and ((1 << (_la - 428)) & ((1 << (mysqlParser.PARTITIONING - 428)) | (1 << (mysqlParser.PARTITIONS - 428)) | (1 << (mysqlParser.PASSWORD - 428)) | (1 << (mysqlParser.PHASE - 428)) | (1 << (mysqlParser.PLUGIN_DIR - 428)) | (1 << (mysqlParser.PLUGINS - 428)) | (1 << (mysqlParser.PORT - 428)) | (1 << (mysqlParser.PRECEDES - 428)) | (1 << (mysqlParser.PREPARE - 428)) | (1 << (mysqlParser.PRESERVE - 428)) | (1 << (mysqlParser.PREV - 428)) | (1 << (mysqlParser.PROCESSLIST - 428)) | (1 << (mysqlParser.PROFILE - 428)) | (1 << (mysqlParser.PROFILES - 428)) | (1 << (mysqlParser.PROXY - 428)) | (1 << (mysqlParser.QUERY - 428)) | (1 << (mysqlParser.QUICK - 428)) | (1 << (mysqlParser.REBUILD - 428)) | (1 << (mysqlParser.RECOVER - 428)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 428)) | (1 << (mysqlParser.REDUNDANT - 428)) | (1 << (mysqlParser.RELAY_LOG_FILE - 428)) | (1 << (mysqlParser.RELAY_LOG_POS - 428)) | (1 << (mysqlParser.RELAYLOG - 428)) | (1 << (mysqlParser.REMOVE - 428)) | (1 << (mysqlParser.REORGANIZE - 428)) | (1 << (mysqlParser.REPAIR - 428)) | (1 << (mysqlParser.REPLICATE_DO_DB - 428)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 428)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 428)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 428)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 428)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 428)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 428)) | (1 << (mysqlParser.REPLICATION - 428)) | (1 << (mysqlParser.RESET - 428)) | (1 << (mysqlParser.RESUME - 428)) | (1 << (mysqlParser.RETURNS - 428)) | (1 << (mysqlParser.ROLLBACK - 428)) | (1 << (mysqlParser.ROLLUP - 428)) | (1 << (mysqlParser.ROTATE - 428)) | (1 << (mysqlParser.ROW - 428)) | (1 << (mysqlParser.ROWS - 428)) | (1 << (mysqlParser.ROW_FORMAT - 428)) | (1 << (mysqlParser.SAVEPOINT - 428)) | (1 << (mysqlParser.SCHEDULE - 428)) | (1 << (mysqlParser.SECURITY - 428)) | (1 << (mysqlParser.SERVER - 428)) | (1 << (mysqlParser.SESSION - 428)) | (1 << (mysqlParser.SHARE - 428)) | (1 << (mysqlParser.SHARED - 428)) | (1 << (mysqlParser.SIGNED - 428)) | (1 << (mysqlParser.SIMPLE - 428)) | (1 << (mysqlParser.SLAVE - 428)) | (1 << (mysqlParser.SNAPSHOT - 428)) | (1 << (mysqlParser.SOCKET - 428)) | (1 << (mysqlParser.SOME - 428)) | (1 << (mysqlParser.SOUNDS - 428)) | (1 << (mysqlParser.SOURCE - 428)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 428)))) != 0) or ((((_la - 492)) & ~0x3f) == 0 and ((1 << (_la - 492)) & ((1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 492)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 492)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 492)) | (1 << (mysqlParser.SQL_CACHE - 492)) | (1 << (mysqlParser.SQL_NO_CACHE - 492)) | (1 << (mysqlParser.SQL_THREAD - 492)) | (1 << (mysqlParser.START - 492)) | (1 << (mysqlParser.STARTS - 492)) | (1 << (mysqlParser.STATS_AUTO_RECALC - 492)) | (1 << (mysqlParser.STATS_PERSISTENT - 492)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 492)) | (1 << (mysqlParser.STATUS - 492)) | (1 << (mysqlParser.STOP - 492)) | (1 << (mysqlParser.STORAGE - 492)) | (1 << (mysqlParser.STRING - 492)) | (1 << (mysqlParser.SUBJECT - 492)) | (1 << (mysqlParser.SUBPARTITION - 492)) | (1 << (mysqlParser.SUBPARTITIONS - 492)) | (1 << (mysqlParser.SUSPEND - 492)) | (1 << (mysqlParser.SWAPS - 492)) | (1 << (mysqlParser.SWITCHES - 492)) | (1 << (mysqlParser.TABLESPACE - 492)) | (1 << (mysqlParser.TEMPORARY - 492)) | (1 << (mysqlParser.TEMPTABLE - 492)) | (1 << (mysqlParser.THAN - 492)) | (1 << (mysqlParser.TRANSACTION - 492)) | (1 << (mysqlParser.TRUNCATE - 492)) | (1 << (mysqlParser.UNDEFINED - 492)) | (1 << (mysqlParser.UNDOFILE - 492)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 492)) | (1 << (mysqlParser.UNINSTALL - 492)) | (1 << (mysqlParser.UNKNOWN - 492)) | (1 << (mysqlParser.UPGRADE - 492)) | (1 << (mysqlParser.USER - 492)) | (1 << (mysqlParser.VALIDATION - 492)) | (1 << (mysqlParser.VALUE - 492)) | (1 << (mysqlParser.VARIABLES - 492)) | (1 << (mysqlParser.VIEW - 492)) | (1 << (mysqlParser.WAIT - 492)) | (1 << (mysqlParser.WARNINGS - 492)) | (1 << (mysqlParser.WITHOUT - 492)) | (1 << (mysqlParser.WORK - 492)) | (1 << (mysqlParser.WRAPPER - 492)) | (1 << (mysqlParser.X509 - 492)) | (1 << (mysqlParser.XA - 492)) | (1 << (mysqlParser.XML - 492)) | (1 << (mysqlParser.QUARTER - 492)) | (1 << (mysqlParser.MONTH - 492)) | (1 << (mysqlParser.DAY - 492)) | (1 << (mysqlParser.HOUR - 492)) | (1 << (mysqlParser.MINUTE - 492)) | (1 << (mysqlParser.WEEK - 492)) | (1 << (mysqlParser.SECOND - 492)) | (1 << (mysqlParser.MICROSECOND - 492)))) != 0) or ((((_la - 556)) & ~0x3f) == 0 and ((1 << (_la - 556)) & ((1 << (mysqlParser.TABLES - 556)) | (1 << (mysqlParser.ROUTINE - 556)) | (1 << (mysqlParser.EXECUTE - 556)) | (1 << (mysqlParser.FILE - 556)) | (1 << (mysqlParser.PROCESS - 556)) | (1 << (mysqlParser.RELOAD - 556)) | (1 << (mysqlParser.SHUTDOWN - 556)) | (1 << (mysqlParser.SUPER - 556)) | (1 << (mysqlParser.PRIVILEGES - 556)) | (1 << (mysqlParser.ARMSCII8 - 556)) | (1 << (mysqlParser.ASCII - 556)) | (1 << (mysqlParser.BIG5 - 556)) | (1 << (mysqlParser.CP1250 - 556)) | (1 << (mysqlParser.CP1251 - 556)) | (1 << (mysqlParser.CP1256 - 556)) | (1 << (mysqlParser.CP1257 - 556)) | (1 << (mysqlParser.CP850 - 556)) | (1 << (mysqlParser.CP852 - 556)) | (1 << (mysqlParser.CP866 - 556)) | (1 << (mysqlParser.CP932 - 556)) | (1 << (mysqlParser.DEC8 - 556)) | (1 << (mysqlParser.EUCJPMS - 556)) | (1 << (mysqlParser.EUCKR - 556)) | (1 << (mysqlParser.GB2312 - 556)) | (1 << (mysqlParser.GBK - 556)) | (1 << (mysqlParser.GEOSTD8 - 556)) | (1 << (mysqlParser.GREEK - 556)) | (1 << (mysqlParser.HEBREW - 556)) | (1 << (mysqlParser.HP8 - 556)) | (1 << (mysqlParser.KEYBCS2 - 556)) | (1 << (mysqlParser.KOI8R - 556)) | (1 << (mysqlParser.KOI8U - 556)) | (1 << (mysqlParser.LATIN1 - 556)) | (1 << (mysqlParser.LATIN2 - 556)) | (1 << (mysqlParser.LATIN5 - 556)) | (1 << (mysqlParser.LATIN7 - 556)) | (1 << (mysqlParser.MACCE - 556)) | (1 << (mysqlParser.MACROMAN - 556)) | (1 << (mysqlParser.SJIS - 556)) | (1 << (mysqlParser.SWE7 - 556)) | (1 << (mysqlParser.TIS620 - 556)) | (1 << (mysqlParser.UCS2 - 556)) | (1 << (mysqlParser.UJIS - 556)) | (1 << (mysqlParser.UTF16 - 556)) | (1 << (mysqlParser.UTF16LE - 556)) | (1 << (mysqlParser.UTF32 - 556)) | (1 << (mysqlParser.UTF8 - 556)) | (1 << (mysqlParser.UTF8MB3 - 556)) | (1 << (mysqlParser.UTF8MB4 - 556)) | (1 << (mysqlParser.ARCHIVE - 556)) | (1 << (mysqlParser.BLACKHOLE - 556)) | (1 << (mysqlParser.CSV - 556)) | (1 << (mysqlParser.FEDERATED - 556)) | (1 << (mysqlParser.INNODB - 556)) | (1 << (mysqlParser.MEMORY - 556)) | (1 << (mysqlParser.MRG_MYISAM - 556)) | (1 << (mysqlParser.MYISAM - 556)) | (1 << (mysqlParser.NDB - 556)) | (1 << (mysqlParser.NDBCLUSTER - 556)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 556)) | (1 << (mysqlParser.REPEATABLE - 556)) | (1 << (mysqlParser.COMMITTED - 556)) | (1 << (mysqlParser.UNCOMMITTED - 556)) | (1 << (mysqlParser.SERIALIZABLE - 556)))) != 0) or ((((_la - 620)) & ~0x3f) == 0 and ((1 << (_la - 620)) & ((1 << (mysqlParser.GEOMETRYCOLLECTION - 620)) | (1 << (mysqlParser.LINESTRING - 620)) | (1 << (mysqlParser.MULTILINESTRING - 620)) | (1 << (mysqlParser.MULTIPOINT - 620)) | (1 << (mysqlParser.MULTIPOLYGON - 620)) | (1 << (mysqlParser.POINT - 620)) | (1 << (mysqlParser.POLYGON - 620)) | (1 << (mysqlParser.ABS - 620)) | (1 << (mysqlParser.ACOS - 620)) | (1 << (mysqlParser.ADDDATE - 620)) | (1 << (mysqlParser.ADDTIME - 620)) | (1 << (mysqlParser.AES_DECRYPT - 620)) | (1 << (mysqlParser.AES_ENCRYPT - 620)) | (1 << (mysqlParser.AREA - 620)) | (1 << (mysqlParser.ASBINARY - 620)) | (1 << (mysqlParser.ASIN - 620)) | (1 << (mysqlParser.ASTEXT - 620)) | (1 << (mysqlParser.ASWKB - 620)) | (1 << (mysqlParser.ASWKT - 620)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 620)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 620)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 620)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 620)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 620)) | (1 << (mysqlParser.ATAN - 620)) | (1 << (mysqlParser.ATAN2 - 620)) | (1 << (mysqlParser.BENCHMARK - 620)) | (1 << (mysqlParser.BIN - 620)) | (1 << (mysqlParser.BIT_COUNT - 620)) | (1 << (mysqlParser.BIT_LENGTH - 620)) | (1 << (mysqlParser.BUFFER - 620)) | (1 << (mysqlParser.CEIL - 620)) | (1 << (mysqlParser.CEILING - 620)) | (1 << (mysqlParser.CENTROID - 620)) | (1 << (mysqlParser.CHARACTER_LENGTH - 620)) | (1 << (mysqlParser.CHARSET - 620)) | (1 << (mysqlParser.CHAR_LENGTH - 620)) | (1 << (mysqlParser.COERCIBILITY - 620)) | (1 << (mysqlParser.COLLATION - 620)) | (1 << (mysqlParser.COMPRESS - 620)) | (1 << (mysqlParser.CONCAT - 620)) | (1 << (mysqlParser.CONCAT_WS - 620)) | (1 << (mysqlParser.CONNECTION_ID - 620)) | (1 << (mysqlParser.CONV - 620)) | (1 << (mysqlParser.CONVERT_TZ - 620)) | (1 << (mysqlParser.COS - 620)) | (1 << (mysqlParser.COT - 620)) | (1 << (mysqlParser.CRC32 - 620)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 620)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 620)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 620)) | (1 << (mysqlParser.CREATE_DIGEST - 620)) | (1 << (mysqlParser.CROSSES - 620)) | (1 << (mysqlParser.DATEDIFF - 620)) | (1 << (mysqlParser.DATE_FORMAT - 620)) | (1 << (mysqlParser.DAYNAME - 620)) | (1 << (mysqlParser.DAYOFMONTH - 620)) | (1 << (mysqlParser.DAYOFWEEK - 620)) | (1 << (mysqlParser.DAYOFYEAR - 620)) | (1 << (mysqlParser.DECODE - 620)) | (1 << (mysqlParser.DEGREES - 620)) | (1 << (mysqlParser.DES_DECRYPT - 620)) | (1 << (mysqlParser.DES_ENCRYPT - 620)) | (1 << (mysqlParser.DIMENSION - 620)))) != 0) or ((((_la - 684)) & ~0x3f) == 0 and ((1 << (_la - 684)) & ((1 << (mysqlParser.DISJOINT - 684)) | (1 << (mysqlParser.ELT - 684)) | (1 << (mysqlParser.ENCODE - 684)) | (1 << (mysqlParser.ENCRYPT - 684)) | (1 << (mysqlParser.ENDPOINT - 684)) | (1 << (mysqlParser.ENVELOPE - 684)) | (1 << (mysqlParser.EQUALS - 684)) | (1 << (mysqlParser.EXP - 684)) | (1 << (mysqlParser.EXPORT_SET - 684)) | (1 << (mysqlParser.EXTERIORRING - 684)) | (1 << (mysqlParser.EXTRACTVALUE - 684)) | (1 << (mysqlParser.FIELD - 684)) | (1 << (mysqlParser.FIND_IN_SET - 684)) | (1 << (mysqlParser.FLOOR - 684)) | (1 << (mysqlParser.FORMAT - 684)) | (1 << (mysqlParser.FOUND_ROWS - 684)) | (1 << (mysqlParser.FROM_BASE64 - 684)) | (1 << (mysqlParser.FROM_DAYS - 684)) | (1 << (mysqlParser.FROM_UNIXTIME - 684)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 684)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 684)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 684)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 684)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 684)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 684)) | (1 << (mysqlParser.GEOMETRYN - 684)) | (1 << (mysqlParser.GEOMETRYTYPE - 684)) | (1 << (mysqlParser.GEOMFROMTEXT - 684)) | (1 << (mysqlParser.GEOMFROMWKB - 684)) | (1 << (mysqlParser.GET_FORMAT - 684)) | (1 << (mysqlParser.GET_LOCK - 684)) | (1 << (mysqlParser.GLENGTH - 684)) | (1 << (mysqlParser.GREATEST - 684)) | (1 << (mysqlParser.GTID_SUBSET - 684)) | (1 << (mysqlParser.GTID_SUBTRACT - 684)) | (1 << (mysqlParser.HEX - 684)) | (1 << (mysqlParser.IFNULL - 684)) | (1 << (mysqlParser.INET6_ATON - 684)) | (1 << (mysqlParser.INET6_NTOA - 684)) | (1 << (mysqlParser.INET_ATON - 684)) | (1 << (mysqlParser.INET_NTOA - 684)) | (1 << (mysqlParser.INSTR - 684)) | (1 << (mysqlParser.INTERIORRINGN - 684)) | (1 << (mysqlParser.INTERSECTS - 684)) | (1 << (mysqlParser.ISCLOSED - 684)) | (1 << (mysqlParser.ISEMPTY - 684)) | (1 << (mysqlParser.ISNULL - 684)) | (1 << (mysqlParser.ISSIMPLE - 684)) | (1 << (mysqlParser.IS_FREE_LOCK - 684)) | (1 << (mysqlParser.IS_IPV4 - 684)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 684)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 684)) | (1 << (mysqlParser.IS_IPV6 - 684)) | (1 << (mysqlParser.IS_USED_LOCK - 684)) | (1 << (mysqlParser.LAST_INSERT_ID - 684)) | (1 << (mysqlParser.LCASE - 684)) | (1 << (mysqlParser.LEAST - 684)) | (1 << (mysqlParser.LENGTH - 684)) | (1 << (mysqlParser.LINEFROMTEXT - 684)) | (1 << (mysqlParser.LINEFROMWKB - 684)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 684)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 684)) | (1 << (mysqlParser.LN - 684)) | (1 << (mysqlParser.LOAD_FILE - 684)))) != 0) or ((((_la - 748)) & ~0x3f) == 0 and ((1 << (_la - 748)) & ((1 << (mysqlParser.LOCATE - 748)) | (1 << (mysqlParser.LOG - 748)) | (1 << (mysqlParser.LOG10 - 748)) | (1 << (mysqlParser.LOG2 - 748)) | (1 << (mysqlParser.LOWER - 748)) | (1 << (mysqlParser.LPAD - 748)) | (1 << (mysqlParser.LTRIM - 748)) | (1 << (mysqlParser.MAKEDATE - 748)) | (1 << (mysqlParser.MAKETIME - 748)) | (1 << (mysqlParser.MAKE_SET - 748)) | (1 << (mysqlParser.MASTER_POS_WAIT - 748)) | (1 << (mysqlParser.MBRCONTAINS - 748)) | (1 << (mysqlParser.MBRDISJOINT - 748)) | (1 << (mysqlParser.MBREQUAL - 748)) | (1 << (mysqlParser.MBRINTERSECTS - 748)) | (1 << (mysqlParser.MBROVERLAPS - 748)) | (1 << (mysqlParser.MBRTOUCHES - 748)) | (1 << (mysqlParser.MBRWITHIN - 748)) | (1 << (mysqlParser.MD5 - 748)) | (1 << (mysqlParser.MLINEFROMTEXT - 748)) | (1 << (mysqlParser.MLINEFROMWKB - 748)) | (1 << (mysqlParser.MONTHNAME - 748)) | (1 << (mysqlParser.MPOINTFROMTEXT - 748)) | (1 << (mysqlParser.MPOINTFROMWKB - 748)) | (1 << (mysqlParser.MPOLYFROMTEXT - 748)) | (1 << (mysqlParser.MPOLYFROMWKB - 748)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 748)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 748)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 748)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 748)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 748)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 748)) | (1 << (mysqlParser.NAME_CONST - 748)) | (1 << (mysqlParser.NULLIF - 748)) | (1 << (mysqlParser.NUMGEOMETRIES - 748)) | (1 << (mysqlParser.NUMINTERIORRINGS - 748)) | (1 << (mysqlParser.NUMPOINTS - 748)) | (1 << (mysqlParser.OCT - 748)) | (1 << (mysqlParser.OCTET_LENGTH - 748)) | (1 << (mysqlParser.ORD - 748)) | (1 << (mysqlParser.OVERLAPS - 748)) | (1 << (mysqlParser.PERIOD_ADD - 748)) | (1 << (mysqlParser.PERIOD_DIFF - 748)) | (1 << (mysqlParser.PI - 748)) | (1 << (mysqlParser.POINTFROMTEXT - 748)) | (1 << (mysqlParser.POINTFROMWKB - 748)) | (1 << (mysqlParser.POINTN - 748)) | (1 << (mysqlParser.POLYFROMTEXT - 748)) | (1 << (mysqlParser.POLYFROMWKB - 748)) | (1 << (mysqlParser.POLYGONFROMTEXT - 748)) | (1 << (mysqlParser.POLYGONFROMWKB - 748)) | (1 << (mysqlParser.POW - 748)) | (1 << (mysqlParser.POWER - 748)) | (1 << (mysqlParser.QUOTE - 748)) | (1 << (mysqlParser.RADIANS - 748)) | (1 << (mysqlParser.RAND - 748)) | (1 << (mysqlParser.RANDOM_BYTES - 748)) | (1 << (mysqlParser.RELEASE_LOCK - 748)) | (1 << (mysqlParser.REVERSE - 748)) | (1 << (mysqlParser.ROUND - 748)) | (1 << (mysqlParser.ROW_COUNT - 748)) | (1 << (mysqlParser.RPAD - 748)) | (1 << (mysqlParser.RTRIM - 748)) | (1 << (mysqlParser.SEC_TO_TIME - 748)))) != 0) or ((((_la - 812)) & ~0x3f) == 0 and ((1 << (_la - 812)) & ((1 << (mysqlParser.SESSION_USER - 812)) | (1 << (mysqlParser.SHA - 812)) | (1 << (mysqlParser.SHA1 - 812)) | (1 << (mysqlParser.SHA2 - 812)) | (1 << (mysqlParser.SIGN - 812)) | (1 << (mysqlParser.SIN - 812)) | (1 << (mysqlParser.SLEEP - 812)) | (1 << (mysqlParser.SOUNDEX - 812)) | (1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 812)) | (1 << (mysqlParser.SQRT - 812)) | (1 << (mysqlParser.SRID - 812)) | (1 << (mysqlParser.STARTPOINT - 812)) | (1 << (mysqlParser.STRCMP - 812)) | (1 << (mysqlParser.STR_TO_DATE - 812)) | (1 << (mysqlParser.ST_AREA - 812)) | (1 << (mysqlParser.ST_ASBINARY - 812)) | (1 << (mysqlParser.ST_ASTEXT - 812)) | (1 << (mysqlParser.ST_ASWKB - 812)) | (1 << (mysqlParser.ST_ASWKT - 812)) | (1 << (mysqlParser.ST_BUFFER - 812)) | (1 << (mysqlParser.ST_CENTROID - 812)) | (1 << (mysqlParser.ST_CONTAINS - 812)) | (1 << (mysqlParser.ST_CROSSES - 812)) | (1 << (mysqlParser.ST_DIFFERENCE - 812)) | (1 << (mysqlParser.ST_DIMENSION - 812)) | (1 << (mysqlParser.ST_DISJOINT - 812)) | (1 << (mysqlParser.ST_DISTANCE - 812)) | (1 << (mysqlParser.ST_ENDPOINT - 812)) | (1 << (mysqlParser.ST_ENVELOPE - 812)) | (1 << (mysqlParser.ST_EQUALS - 812)) | (1 << (mysqlParser.ST_EXTERIORRING - 812)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 812)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 812)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 812)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 812)) | (1 << (mysqlParser.ST_GEOMETRYN - 812)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 812)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 812)) | (1 << (mysqlParser.ST_INTERIORRINGN - 812)) | (1 << (mysqlParser.ST_INTERSECTION - 812)) | (1 << (mysqlParser.ST_INTERSECTS - 812)) | (1 << (mysqlParser.ST_ISCLOSED - 812)) | (1 << (mysqlParser.ST_ISEMPTY - 812)) | (1 << (mysqlParser.ST_ISSIMPLE - 812)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 812)) | (1 << (mysqlParser.ST_LINEFROMWKB - 812)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 812)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 812)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 812)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 812)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 812)) | (1 << (mysqlParser.ST_NUMPOINTS - 812)) | (1 << (mysqlParser.ST_OVERLAPS - 812)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 812)) | (1 << (mysqlParser.ST_POINTFROMWKB - 812)) | (1 << (mysqlParser.ST_POINTN - 812)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 812)) | (1 << (mysqlParser.ST_POLYFROMWKB - 812)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 812)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 812)))) != 0) or ((((_la - 876)) & ~0x3f) == 0 and ((1 << (_la - 876)) & ((1 << (mysqlParser.ST_SRID - 876)) | (1 << (mysqlParser.ST_STARTPOINT - 876)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 876)) | (1 << (mysqlParser.ST_TOUCHES - 876)) | (1 << (mysqlParser.ST_UNION - 876)) | (1 << (mysqlParser.ST_WITHIN - 876)) | (1 << (mysqlParser.ST_X - 876)) | (1 << (mysqlParser.ST_Y - 876)) | (1 << (mysqlParser.SUBDATE - 876)) | (1 << (mysqlParser.SUBSTRING_INDEX - 876)) | (1 << (mysqlParser.SUBTIME - 876)) | (1 << (mysqlParser.SYSTEM_USER - 876)) | (1 << (mysqlParser.TAN - 876)) | (1 << (mysqlParser.TIMEDIFF - 876)) | (1 << (mysqlParser.TIMESTAMPADD - 876)) | (1 << (mysqlParser.TIMESTAMPDIFF - 876)) | (1 << (mysqlParser.TIME_FORMAT - 876)) | (1 << (mysqlParser.TIME_TO_SEC - 876)) | (1 << (mysqlParser.TOUCHES - 876)) | (1 << (mysqlParser.TO_BASE64 - 876)) | (1 << (mysqlParser.TO_DAYS - 876)) | (1 << (mysqlParser.TO_SECONDS - 876)) | (1 << (mysqlParser.UCASE - 876)) | (1 << (mysqlParser.UNCOMPRESS - 876)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 876)) | (1 << (mysqlParser.UNHEX - 876)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 876)) | (1 << (mysqlParser.UPDATEXML - 876)) | (1 << (mysqlParser.UPPER - 876)) | (1 << (mysqlParser.UUID - 876)) | (1 << (mysqlParser.UUID_SHORT - 876)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 876)) | (1 << (mysqlParser.VERSION - 876)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 876)) | (1 << (mysqlParser.WEEKDAY - 876)) | (1 << (mysqlParser.WEEKOFYEAR - 876)) | (1 << (mysqlParser.WEIGHT_STRING - 876)) | (1 << (mysqlParser.WITHIN - 876)) | (1 << (mysqlParser.YEARWEEK - 876)) | (1 << (mysqlParser.Y_FUNCTION - 876)) | (1 << (mysqlParser.X_FUNCTION - 876)))) != 0) or ((((_la - 942)) & ~0x3f) == 0 and ((1 << (_la - 942)) & ((1 << (mysqlParser.LR_BRACKET - 942)) | (1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 942)) | (1 << (mysqlParser.ID - 942)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 942)))) != 0)):
                        break



            self.state = 3939
            self.match(mysqlParser.END)
            self.state = 3940
            self.match(mysqlParser.IF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IterateStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ITERATE(self):
            return self.getToken(mysqlParser.ITERATE, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_iterateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterateStatement" ):
                listener.enterIterateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterateStatement" ):
                listener.exitIterateStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIterateStatement" ):
                return visitor.visitIterateStatement(self)
            else:
                return visitor.visitChildren(self)




    def iterateStatement(self):

        localctx = mysqlParser.IterateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_iterateStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3942
            self.match(mysqlParser.ITERATE)
            self.state = 3943
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LeaveStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEAVE(self):
            return self.getToken(mysqlParser.LEAVE, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_leaveStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLeaveStatement" ):
                listener.enterLeaveStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLeaveStatement" ):
                listener.exitLeaveStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLeaveStatement" ):
                return visitor.visitLeaveStatement(self)
            else:
                return visitor.visitChildren(self)




    def leaveStatement(self):

        localctx = mysqlParser.LeaveStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_leaveStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3945
            self.match(mysqlParser.LEAVE)
            self.state = 3946
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LoopStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOOP(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.LOOP)
            else:
                return self.getToken(mysqlParser.LOOP, i)

        def END(self):
            return self.getToken(mysqlParser.END, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UidContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UidContext,i)


        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(mysqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_loopStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopStatement" ):
                listener.enterLoopStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopStatement" ):
                listener.exitLoopStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopStatement" ):
                return visitor.visitLoopStatement(self)
            else:
                return visitor.visitChildren(self)




    def loopStatement(self):

        localctx = mysqlParser.LoopStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_loopStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3951
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.LEFT or _la==mysqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (mysqlParser.DATE - 180)) | (1 << (mysqlParser.TIME - 180)) | (1 << (mysqlParser.TIMESTAMP - 180)) | (1 << (mysqlParser.DATETIME - 180)) | (1 << (mysqlParser.YEAR - 180)) | (1 << (mysqlParser.TEXT - 180)) | (1 << (mysqlParser.ENUM - 180)) | (1 << (mysqlParser.COUNT - 180)) | (1 << (mysqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (mysqlParser.ACCOUNT - 244)) | (1 << (mysqlParser.ACTION - 244)) | (1 << (mysqlParser.AFTER - 244)) | (1 << (mysqlParser.AGGREGATE - 244)) | (1 << (mysqlParser.ALGORITHM - 244)) | (1 << (mysqlParser.ANY - 244)) | (1 << (mysqlParser.AT - 244)) | (1 << (mysqlParser.AUTHORS - 244)) | (1 << (mysqlParser.AUTOCOMMIT - 244)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (mysqlParser.AUTO_INCREMENT - 244)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 244)) | (1 << (mysqlParser.BEGIN - 244)) | (1 << (mysqlParser.BINLOG - 244)) | (1 << (mysqlParser.BIT - 244)) | (1 << (mysqlParser.BLOCK - 244)) | (1 << (mysqlParser.BTREE - 244)) | (1 << (mysqlParser.CASCADED - 244)) | (1 << (mysqlParser.CHAIN - 244)) | (1 << (mysqlParser.CHANNEL - 244)) | (1 << (mysqlParser.CHECKSUM - 244)) | (1 << (mysqlParser.CIPHER - 244)) | (1 << (mysqlParser.CLIENT - 244)) | (1 << (mysqlParser.COALESCE - 244)) | (1 << (mysqlParser.CODE - 244)) | (1 << (mysqlParser.COLUMNS - 244)) | (1 << (mysqlParser.COLUMN_FORMAT - 244)) | (1 << (mysqlParser.COMMENT - 244)) | (1 << (mysqlParser.COMMIT - 244)) | (1 << (mysqlParser.COMPACT - 244)) | (1 << (mysqlParser.COMPLETION - 244)) | (1 << (mysqlParser.COMPRESSED - 244)) | (1 << (mysqlParser.COMPRESSION - 244)) | (1 << (mysqlParser.CONCURRENT - 244)) | (1 << (mysqlParser.CONNECTION - 244)) | (1 << (mysqlParser.CONSISTENT - 244)) | (1 << (mysqlParser.CONTAINS - 244)) | (1 << (mysqlParser.CONTEXT - 244)) | (1 << (mysqlParser.CONTRIBUTORS - 244)) | (1 << (mysqlParser.COPY - 244)) | (1 << (mysqlParser.CPU - 244)) | (1 << (mysqlParser.DATA - 244)) | (1 << (mysqlParser.DATAFILE - 244)) | (1 << (mysqlParser.DEALLOCATE - 244)) | (1 << (mysqlParser.DEFAULT_AUTH - 244)) | (1 << (mysqlParser.DEFINER - 244)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 244)) | (1 << (mysqlParser.DIRECTORY - 244)) | (1 << (mysqlParser.DISABLE - 244)) | (1 << (mysqlParser.DISCARD - 244)) | (1 << (mysqlParser.DISK - 244)) | (1 << (mysqlParser.DO - 244)) | (1 << (mysqlParser.DUMPFILE - 244)) | (1 << (mysqlParser.DUPLICATE - 244)) | (1 << (mysqlParser.DYNAMIC - 244)) | (1 << (mysqlParser.ENABLE - 244)) | (1 << (mysqlParser.ENCRYPTION - 244)) | (1 << (mysqlParser.ENDS - 244)) | (1 << (mysqlParser.ENGINE - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (mysqlParser.ENGINES - 308)) | (1 << (mysqlParser.ERROR - 308)) | (1 << (mysqlParser.ERRORS - 308)) | (1 << (mysqlParser.ESCAPE - 308)) | (1 << (mysqlParser.EVEN - 308)) | (1 << (mysqlParser.EVENT - 308)) | (1 << (mysqlParser.EVENTS - 308)) | (1 << (mysqlParser.EVERY - 308)) | (1 << (mysqlParser.EXCHANGE - 308)) | (1 << (mysqlParser.EXCLUSIVE - 308)) | (1 << (mysqlParser.EXPIRE - 308)) | (1 << (mysqlParser.EXTENT_SIZE - 308)) | (1 << (mysqlParser.FAULTS - 308)) | (1 << (mysqlParser.FIELDS - 308)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (mysqlParser.FILTER - 308)) | (1 << (mysqlParser.FIRST - 308)) | (1 << (mysqlParser.FIXED - 308)) | (1 << (mysqlParser.FOLLOWS - 308)) | (1 << (mysqlParser.FULL - 308)) | (1 << (mysqlParser.FUNCTION - 308)) | (1 << (mysqlParser.GLOBAL - 308)) | (1 << (mysqlParser.GRANTS - 308)) | (1 << (mysqlParser.GROUP_REPLICATION - 308)) | (1 << (mysqlParser.HASH - 308)) | (1 << (mysqlParser.HOST - 308)) | (1 << (mysqlParser.IDENTIFIED - 308)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (mysqlParser.IMPORT - 308)) | (1 << (mysqlParser.INDEXES - 308)) | (1 << (mysqlParser.INITIAL_SIZE - 308)) | (1 << (mysqlParser.INPLACE - 308)) | (1 << (mysqlParser.INSERT_METHOD - 308)) | (1 << (mysqlParser.INSTANCE - 308)) | (1 << (mysqlParser.INVOKER - 308)) | (1 << (mysqlParser.IO - 308)) | (1 << (mysqlParser.IO_THREAD - 308)) | (1 << (mysqlParser.IPC - 308)) | (1 << (mysqlParser.ISOLATION - 308)) | (1 << (mysqlParser.ISSUER - 308)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (mysqlParser.LANGUAGE - 308)) | (1 << (mysqlParser.LAST - 308)) | (1 << (mysqlParser.LEAVES - 308)) | (1 << (mysqlParser.LESS - 308)) | (1 << (mysqlParser.LEVEL - 308)) | (1 << (mysqlParser.LIST - 308)) | (1 << (mysqlParser.LOCAL - 308)) | (1 << (mysqlParser.LOGFILE - 308)) | (1 << (mysqlParser.LOGS - 308)) | (1 << (mysqlParser.MASTER - 308)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 308)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (mysqlParser.MASTER_DELAY - 372)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (mysqlParser.MASTER_HOST - 372)) | (1 << (mysqlParser.MASTER_LOG_FILE - 372)) | (1 << (mysqlParser.MASTER_LOG_POS - 372)) | (1 << (mysqlParser.MASTER_PASSWORD - 372)) | (1 << (mysqlParser.MASTER_PORT - 372)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (mysqlParser.MASTER_SSL - 372)) | (1 << (mysqlParser.MASTER_SSL_CA - 372)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_CERT - 372)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (mysqlParser.MASTER_SSL_CRL - 372)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_KEY - 372)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 372)) | (1 << (mysqlParser.MASTER_USER - 372)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_ROWS - 372)) | (1 << (mysqlParser.MAX_SIZE - 372)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (mysqlParser.MERGE - 372)) | (1 << (mysqlParser.MID - 372)) | (1 << (mysqlParser.MIGRATE - 372)) | (1 << (mysqlParser.MIN_ROWS - 372)) | (1 << (mysqlParser.MODIFY - 372)) | (1 << (mysqlParser.MUTEX - 372)) | (1 << (mysqlParser.MYSQL - 372)) | (1 << (mysqlParser.NAME - 372)) | (1 << (mysqlParser.NAMES - 372)) | (1 << (mysqlParser.NCHAR - 372)) | (1 << (mysqlParser.NEVER - 372)) | (1 << (mysqlParser.NO - 372)) | (1 << (mysqlParser.NODEGROUP - 372)) | (1 << (mysqlParser.NONE - 372)) | (1 << (mysqlParser.OFFLINE - 372)) | (1 << (mysqlParser.OFFSET - 372)) | (1 << (mysqlParser.OJ - 372)) | (1 << (mysqlParser.OLD_PASSWORD - 372)) | (1 << (mysqlParser.ONE - 372)) | (1 << (mysqlParser.ONLINE - 372)) | (1 << (mysqlParser.ONLY - 372)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 372)) | (1 << (mysqlParser.OPTIONS - 372)) | (1 << (mysqlParser.OWNER - 372)) | (1 << (mysqlParser.PACK_KEYS - 372)) | (1 << (mysqlParser.PAGE - 372)) | (1 << (mysqlParser.PARSER - 372)) | (1 << (mysqlParser.PARTIAL - 372)) | (1 << (mysqlParser.PARTITIONING - 372)) | (1 << (mysqlParser.PARTITIONS - 372)) | (1 << (mysqlParser.PASSWORD - 372)) | (1 << (mysqlParser.PHASE - 372)) | (1 << (mysqlParser.PLUGIN_DIR - 372)) | (1 << (mysqlParser.PLUGINS - 372)) | (1 << (mysqlParser.PORT - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (mysqlParser.PRECEDES - 436)) | (1 << (mysqlParser.PREPARE - 436)) | (1 << (mysqlParser.PRESERVE - 436)) | (1 << (mysqlParser.PREV - 436)) | (1 << (mysqlParser.PROCESSLIST - 436)) | (1 << (mysqlParser.PROFILE - 436)) | (1 << (mysqlParser.PROFILES - 436)) | (1 << (mysqlParser.PROXY - 436)) | (1 << (mysqlParser.QUERY - 436)) | (1 << (mysqlParser.QUICK - 436)) | (1 << (mysqlParser.REBUILD - 436)) | (1 << (mysqlParser.RECOVER - 436)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (mysqlParser.REDUNDANT - 436)) | (1 << (mysqlParser.RELAY_LOG_FILE - 436)) | (1 << (mysqlParser.RELAY_LOG_POS - 436)) | (1 << (mysqlParser.RELAYLOG - 436)) | (1 << (mysqlParser.REMOVE - 436)) | (1 << (mysqlParser.REORGANIZE - 436)) | (1 << (mysqlParser.REPAIR - 436)) | (1 << (mysqlParser.REPLICATE_DO_DB - 436)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATION - 436)) | (1 << (mysqlParser.RESUME - 436)) | (1 << (mysqlParser.RETURNS - 436)) | (1 << (mysqlParser.ROLLBACK - 436)) | (1 << (mysqlParser.ROLLUP - 436)) | (1 << (mysqlParser.ROTATE - 436)) | (1 << (mysqlParser.ROW - 436)) | (1 << (mysqlParser.ROWS - 436)) | (1 << (mysqlParser.ROW_FORMAT - 436)) | (1 << (mysqlParser.SAVEPOINT - 436)) | (1 << (mysqlParser.SCHEDULE - 436)) | (1 << (mysqlParser.SECURITY - 436)) | (1 << (mysqlParser.SERVER - 436)) | (1 << (mysqlParser.SESSION - 436)) | (1 << (mysqlParser.SHARE - 436)) | (1 << (mysqlParser.SHARED - 436)) | (1 << (mysqlParser.SIGNED - 436)) | (1 << (mysqlParser.SIMPLE - 436)) | (1 << (mysqlParser.SLAVE - 436)) | (1 << (mysqlParser.SNAPSHOT - 436)) | (1 << (mysqlParser.SOCKET - 436)) | (1 << (mysqlParser.SOME - 436)) | (1 << (mysqlParser.SOUNDS - 436)) | (1 << (mysqlParser.SOURCE - 436)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (mysqlParser.SQL_CACHE - 436)) | (1 << (mysqlParser.SQL_NO_CACHE - 436)) | (1 << (mysqlParser.SQL_THREAD - 436)) | (1 << (mysqlParser.START - 436)) | (1 << (mysqlParser.STARTS - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (mysqlParser.STATS_AUTO_RECALC - 500)) | (1 << (mysqlParser.STATS_PERSISTENT - 500)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (mysqlParser.STATUS - 500)) | (1 << (mysqlParser.STOP - 500)) | (1 << (mysqlParser.STORAGE - 500)) | (1 << (mysqlParser.STRING - 500)) | (1 << (mysqlParser.SUBJECT - 500)) | (1 << (mysqlParser.SUBPARTITION - 500)) | (1 << (mysqlParser.SUBPARTITIONS - 500)) | (1 << (mysqlParser.SUSPEND - 500)) | (1 << (mysqlParser.SWAPS - 500)) | (1 << (mysqlParser.SWITCHES - 500)) | (1 << (mysqlParser.TABLESPACE - 500)) | (1 << (mysqlParser.TEMPORARY - 500)) | (1 << (mysqlParser.TEMPTABLE - 500)) | (1 << (mysqlParser.THAN - 500)) | (1 << (mysqlParser.TRANSACTION - 500)) | (1 << (mysqlParser.TRUNCATE - 500)) | (1 << (mysqlParser.UNDEFINED - 500)) | (1 << (mysqlParser.UNDOFILE - 500)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (mysqlParser.UNKNOWN - 500)) | (1 << (mysqlParser.UPGRADE - 500)) | (1 << (mysqlParser.USER - 500)) | (1 << (mysqlParser.VALIDATION - 500)) | (1 << (mysqlParser.VALUE - 500)) | (1 << (mysqlParser.VARIABLES - 500)) | (1 << (mysqlParser.VIEW - 500)) | (1 << (mysqlParser.WAIT - 500)) | (1 << (mysqlParser.WARNINGS - 500)) | (1 << (mysqlParser.WITHOUT - 500)) | (1 << (mysqlParser.WORK - 500)) | (1 << (mysqlParser.WRAPPER - 500)) | (1 << (mysqlParser.X509 - 500)) | (1 << (mysqlParser.XA - 500)) | (1 << (mysqlParser.XML - 500)) | (1 << (mysqlParser.QUARTER - 500)) | (1 << (mysqlParser.MONTH - 500)) | (1 << (mysqlParser.DAY - 500)) | (1 << (mysqlParser.HOUR - 500)) | (1 << (mysqlParser.MINUTE - 500)) | (1 << (mysqlParser.WEEK - 500)) | (1 << (mysqlParser.SECOND - 500)) | (1 << (mysqlParser.MICROSECOND - 500)) | (1 << (mysqlParser.TABLES - 500)) | (1 << (mysqlParser.ROUTINE - 500)) | (1 << (mysqlParser.EXECUTE - 500)) | (1 << (mysqlParser.FILE - 500)) | (1 << (mysqlParser.PROCESS - 500)) | (1 << (mysqlParser.RELOAD - 500)) | (1 << (mysqlParser.SHUTDOWN - 500)) | (1 << (mysqlParser.SUPER - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (mysqlParser.PRIVILEGES - 564)) | (1 << (mysqlParser.ARMSCII8 - 564)) | (1 << (mysqlParser.ASCII - 564)) | (1 << (mysqlParser.BIG5 - 564)) | (1 << (mysqlParser.CP1250 - 564)) | (1 << (mysqlParser.CP1251 - 564)) | (1 << (mysqlParser.CP1256 - 564)) | (1 << (mysqlParser.CP1257 - 564)) | (1 << (mysqlParser.CP850 - 564)) | (1 << (mysqlParser.CP852 - 564)) | (1 << (mysqlParser.CP866 - 564)) | (1 << (mysqlParser.CP932 - 564)) | (1 << (mysqlParser.DEC8 - 564)) | (1 << (mysqlParser.EUCJPMS - 564)) | (1 << (mysqlParser.EUCKR - 564)) | (1 << (mysqlParser.GB2312 - 564)) | (1 << (mysqlParser.GBK - 564)) | (1 << (mysqlParser.GEOSTD8 - 564)) | (1 << (mysqlParser.GREEK - 564)) | (1 << (mysqlParser.HEBREW - 564)) | (1 << (mysqlParser.HP8 - 564)) | (1 << (mysqlParser.KEYBCS2 - 564)) | (1 << (mysqlParser.KOI8R - 564)) | (1 << (mysqlParser.KOI8U - 564)) | (1 << (mysqlParser.LATIN1 - 564)) | (1 << (mysqlParser.LATIN2 - 564)) | (1 << (mysqlParser.LATIN5 - 564)) | (1 << (mysqlParser.LATIN7 - 564)) | (1 << (mysqlParser.MACCE - 564)) | (1 << (mysqlParser.MACROMAN - 564)) | (1 << (mysqlParser.SJIS - 564)) | (1 << (mysqlParser.SWE7 - 564)) | (1 << (mysqlParser.TIS620 - 564)) | (1 << (mysqlParser.UCS2 - 564)) | (1 << (mysqlParser.UJIS - 564)) | (1 << (mysqlParser.UTF16 - 564)) | (1 << (mysqlParser.UTF16LE - 564)) | (1 << (mysqlParser.UTF32 - 564)) | (1 << (mysqlParser.UTF8 - 564)) | (1 << (mysqlParser.UTF8MB3 - 564)) | (1 << (mysqlParser.UTF8MB4 - 564)) | (1 << (mysqlParser.ARCHIVE - 564)) | (1 << (mysqlParser.BLACKHOLE - 564)) | (1 << (mysqlParser.CSV - 564)) | (1 << (mysqlParser.FEDERATED - 564)) | (1 << (mysqlParser.INNODB - 564)) | (1 << (mysqlParser.MEMORY - 564)) | (1 << (mysqlParser.MRG_MYISAM - 564)) | (1 << (mysqlParser.MYISAM - 564)) | (1 << (mysqlParser.NDB - 564)) | (1 << (mysqlParser.NDBCLUSTER - 564)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (mysqlParser.REPEATABLE - 564)) | (1 << (mysqlParser.COMMITTED - 564)) | (1 << (mysqlParser.UNCOMMITTED - 564)) | (1 << (mysqlParser.SERIALIZABLE - 564)) | (1 << (mysqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (mysqlParser.LINESTRING - 564)) | (1 << (mysqlParser.MULTILINESTRING - 564)) | (1 << (mysqlParser.MULTIPOINT - 564)) | (1 << (mysqlParser.MULTIPOLYGON - 564)) | (1 << (mysqlParser.POINT - 564)) | (1 << (mysqlParser.POLYGON - 564)) | (1 << (mysqlParser.ABS - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (mysqlParser.ACOS - 628)) | (1 << (mysqlParser.ADDDATE - 628)) | (1 << (mysqlParser.ADDTIME - 628)) | (1 << (mysqlParser.AES_DECRYPT - 628)) | (1 << (mysqlParser.AES_ENCRYPT - 628)) | (1 << (mysqlParser.AREA - 628)) | (1 << (mysqlParser.ASBINARY - 628)) | (1 << (mysqlParser.ASIN - 628)) | (1 << (mysqlParser.ASTEXT - 628)) | (1 << (mysqlParser.ASWKB - 628)) | (1 << (mysqlParser.ASWKT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (mysqlParser.ATAN - 628)) | (1 << (mysqlParser.ATAN2 - 628)) | (1 << (mysqlParser.BENCHMARK - 628)) | (1 << (mysqlParser.BIN - 628)) | (1 << (mysqlParser.BIT_COUNT - 628)) | (1 << (mysqlParser.BIT_LENGTH - 628)) | (1 << (mysqlParser.BUFFER - 628)) | (1 << (mysqlParser.CEIL - 628)) | (1 << (mysqlParser.CEILING - 628)) | (1 << (mysqlParser.CENTROID - 628)) | (1 << (mysqlParser.CHARACTER_LENGTH - 628)) | (1 << (mysqlParser.CHARSET - 628)) | (1 << (mysqlParser.CHAR_LENGTH - 628)) | (1 << (mysqlParser.COERCIBILITY - 628)) | (1 << (mysqlParser.COLLATION - 628)) | (1 << (mysqlParser.COMPRESS - 628)) | (1 << (mysqlParser.CONCAT - 628)) | (1 << (mysqlParser.CONCAT_WS - 628)) | (1 << (mysqlParser.CONNECTION_ID - 628)) | (1 << (mysqlParser.CONV - 628)) | (1 << (mysqlParser.CONVERT_TZ - 628)) | (1 << (mysqlParser.COS - 628)) | (1 << (mysqlParser.COT - 628)) | (1 << (mysqlParser.CRC32 - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (mysqlParser.CREATE_DIGEST - 628)) | (1 << (mysqlParser.CROSSES - 628)) | (1 << (mysqlParser.DATEDIFF - 628)) | (1 << (mysqlParser.DATE_FORMAT - 628)) | (1 << (mysqlParser.DAYNAME - 628)) | (1 << (mysqlParser.DAYOFMONTH - 628)) | (1 << (mysqlParser.DAYOFWEEK - 628)) | (1 << (mysqlParser.DAYOFYEAR - 628)) | (1 << (mysqlParser.DECODE - 628)) | (1 << (mysqlParser.DEGREES - 628)) | (1 << (mysqlParser.DES_DECRYPT - 628)) | (1 << (mysqlParser.DES_ENCRYPT - 628)) | (1 << (mysqlParser.DIMENSION - 628)) | (1 << (mysqlParser.DISJOINT - 628)) | (1 << (mysqlParser.ELT - 628)) | (1 << (mysqlParser.ENCODE - 628)) | (1 << (mysqlParser.ENCRYPT - 628)) | (1 << (mysqlParser.ENDPOINT - 628)) | (1 << (mysqlParser.ENVELOPE - 628)) | (1 << (mysqlParser.EQUALS - 628)) | (1 << (mysqlParser.EXP - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (mysqlParser.EXPORT_SET - 692)) | (1 << (mysqlParser.EXTERIORRING - 692)) | (1 << (mysqlParser.EXTRACTVALUE - 692)) | (1 << (mysqlParser.FIELD - 692)) | (1 << (mysqlParser.FIND_IN_SET - 692)) | (1 << (mysqlParser.FLOOR - 692)) | (1 << (mysqlParser.FORMAT - 692)) | (1 << (mysqlParser.FOUND_ROWS - 692)) | (1 << (mysqlParser.FROM_BASE64 - 692)) | (1 << (mysqlParser.FROM_DAYS - 692)) | (1 << (mysqlParser.FROM_UNIXTIME - 692)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYN - 692)) | (1 << (mysqlParser.GEOMETRYTYPE - 692)) | (1 << (mysqlParser.GEOMFROMTEXT - 692)) | (1 << (mysqlParser.GEOMFROMWKB - 692)) | (1 << (mysqlParser.GET_FORMAT - 692)) | (1 << (mysqlParser.GET_LOCK - 692)) | (1 << (mysqlParser.GLENGTH - 692)) | (1 << (mysqlParser.GREATEST - 692)) | (1 << (mysqlParser.GTID_SUBSET - 692)) | (1 << (mysqlParser.GTID_SUBTRACT - 692)) | (1 << (mysqlParser.HEX - 692)) | (1 << (mysqlParser.IFNULL - 692)) | (1 << (mysqlParser.INET6_ATON - 692)) | (1 << (mysqlParser.INET6_NTOA - 692)) | (1 << (mysqlParser.INET_ATON - 692)) | (1 << (mysqlParser.INET_NTOA - 692)) | (1 << (mysqlParser.INSTR - 692)) | (1 << (mysqlParser.INTERIORRINGN - 692)) | (1 << (mysqlParser.INTERSECTS - 692)) | (1 << (mysqlParser.ISCLOSED - 692)) | (1 << (mysqlParser.ISEMPTY - 692)) | (1 << (mysqlParser.ISNULL - 692)) | (1 << (mysqlParser.ISSIMPLE - 692)) | (1 << (mysqlParser.IS_FREE_LOCK - 692)) | (1 << (mysqlParser.IS_IPV4 - 692)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 692)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 692)) | (1 << (mysqlParser.IS_IPV6 - 692)) | (1 << (mysqlParser.IS_USED_LOCK - 692)) | (1 << (mysqlParser.LAST_INSERT_ID - 692)) | (1 << (mysqlParser.LCASE - 692)) | (1 << (mysqlParser.LEAST - 692)) | (1 << (mysqlParser.LENGTH - 692)) | (1 << (mysqlParser.LINEFROMTEXT - 692)) | (1 << (mysqlParser.LINEFROMWKB - 692)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 692)) | (1 << (mysqlParser.LN - 692)) | (1 << (mysqlParser.LOAD_FILE - 692)) | (1 << (mysqlParser.LOCATE - 692)) | (1 << (mysqlParser.LOG - 692)) | (1 << (mysqlParser.LOG10 - 692)) | (1 << (mysqlParser.LOG2 - 692)) | (1 << (mysqlParser.LOWER - 692)) | (1 << (mysqlParser.LPAD - 692)) | (1 << (mysqlParser.LTRIM - 692)) | (1 << (mysqlParser.MAKEDATE - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (mysqlParser.MAKETIME - 756)) | (1 << (mysqlParser.MAKE_SET - 756)) | (1 << (mysqlParser.MASTER_POS_WAIT - 756)) | (1 << (mysqlParser.MBRCONTAINS - 756)) | (1 << (mysqlParser.MBRDISJOINT - 756)) | (1 << (mysqlParser.MBREQUAL - 756)) | (1 << (mysqlParser.MBRINTERSECTS - 756)) | (1 << (mysqlParser.MBROVERLAPS - 756)) | (1 << (mysqlParser.MBRTOUCHES - 756)) | (1 << (mysqlParser.MBRWITHIN - 756)) | (1 << (mysqlParser.MD5 - 756)) | (1 << (mysqlParser.MLINEFROMTEXT - 756)) | (1 << (mysqlParser.MLINEFROMWKB - 756)) | (1 << (mysqlParser.MONTHNAME - 756)) | (1 << (mysqlParser.MPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MPOINTFROMWKB - 756)) | (1 << (mysqlParser.MPOLYFROMTEXT - 756)) | (1 << (mysqlParser.MPOLYFROMWKB - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (mysqlParser.NAME_CONST - 756)) | (1 << (mysqlParser.NULLIF - 756)) | (1 << (mysqlParser.NUMGEOMETRIES - 756)) | (1 << (mysqlParser.NUMINTERIORRINGS - 756)) | (1 << (mysqlParser.NUMPOINTS - 756)) | (1 << (mysqlParser.OCT - 756)) | (1 << (mysqlParser.OCTET_LENGTH - 756)) | (1 << (mysqlParser.ORD - 756)) | (1 << (mysqlParser.OVERLAPS - 756)) | (1 << (mysqlParser.PERIOD_ADD - 756)) | (1 << (mysqlParser.PERIOD_DIFF - 756)) | (1 << (mysqlParser.PI - 756)) | (1 << (mysqlParser.POINTFROMTEXT - 756)) | (1 << (mysqlParser.POINTFROMWKB - 756)) | (1 << (mysqlParser.POINTN - 756)) | (1 << (mysqlParser.POLYFROMTEXT - 756)) | (1 << (mysqlParser.POLYFROMWKB - 756)) | (1 << (mysqlParser.POLYGONFROMTEXT - 756)) | (1 << (mysqlParser.POLYGONFROMWKB - 756)) | (1 << (mysqlParser.POW - 756)) | (1 << (mysqlParser.POWER - 756)) | (1 << (mysqlParser.QUOTE - 756)) | (1 << (mysqlParser.RADIANS - 756)) | (1 << (mysqlParser.RAND - 756)) | (1 << (mysqlParser.RANDOM_BYTES - 756)) | (1 << (mysqlParser.RELEASE_LOCK - 756)) | (1 << (mysqlParser.REVERSE - 756)) | (1 << (mysqlParser.ROUND - 756)) | (1 << (mysqlParser.ROW_COUNT - 756)) | (1 << (mysqlParser.RPAD - 756)) | (1 << (mysqlParser.RTRIM - 756)) | (1 << (mysqlParser.SEC_TO_TIME - 756)) | (1 << (mysqlParser.SESSION_USER - 756)) | (1 << (mysqlParser.SHA - 756)) | (1 << (mysqlParser.SHA1 - 756)) | (1 << (mysqlParser.SHA2 - 756)) | (1 << (mysqlParser.SIGN - 756)) | (1 << (mysqlParser.SIN - 756)) | (1 << (mysqlParser.SLEEP - 756)) | (1 << (mysqlParser.SOUNDEX - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (mysqlParser.SQRT - 820)) | (1 << (mysqlParser.SRID - 820)) | (1 << (mysqlParser.STARTPOINT - 820)) | (1 << (mysqlParser.STRCMP - 820)) | (1 << (mysqlParser.STR_TO_DATE - 820)) | (1 << (mysqlParser.ST_AREA - 820)) | (1 << (mysqlParser.ST_ASBINARY - 820)) | (1 << (mysqlParser.ST_ASTEXT - 820)) | (1 << (mysqlParser.ST_ASWKB - 820)) | (1 << (mysqlParser.ST_ASWKT - 820)) | (1 << (mysqlParser.ST_BUFFER - 820)) | (1 << (mysqlParser.ST_CENTROID - 820)) | (1 << (mysqlParser.ST_CONTAINS - 820)) | (1 << (mysqlParser.ST_CROSSES - 820)) | (1 << (mysqlParser.ST_DIFFERENCE - 820)) | (1 << (mysqlParser.ST_DIMENSION - 820)) | (1 << (mysqlParser.ST_DISJOINT - 820)) | (1 << (mysqlParser.ST_DISTANCE - 820)) | (1 << (mysqlParser.ST_ENDPOINT - 820)) | (1 << (mysqlParser.ST_ENVELOPE - 820)) | (1 << (mysqlParser.ST_EQUALS - 820)) | (1 << (mysqlParser.ST_EXTERIORRING - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYN - 820)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 820)) | (1 << (mysqlParser.ST_INTERIORRINGN - 820)) | (1 << (mysqlParser.ST_INTERSECTION - 820)) | (1 << (mysqlParser.ST_INTERSECTS - 820)) | (1 << (mysqlParser.ST_ISCLOSED - 820)) | (1 << (mysqlParser.ST_ISEMPTY - 820)) | (1 << (mysqlParser.ST_ISSIMPLE - 820)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINEFROMWKB - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (mysqlParser.ST_NUMPOINTS - 820)) | (1 << (mysqlParser.ST_OVERLAPS - 820)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 820)) | (1 << (mysqlParser.ST_POINTFROMWKB - 820)) | (1 << (mysqlParser.ST_POINTN - 820)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYFROMWKB - 820)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (mysqlParser.ST_SRID - 820)) | (1 << (mysqlParser.ST_STARTPOINT - 820)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (mysqlParser.ST_TOUCHES - 820)) | (1 << (mysqlParser.ST_UNION - 820)) | (1 << (mysqlParser.ST_WITHIN - 820)) | (1 << (mysqlParser.ST_X - 820)) | (1 << (mysqlParser.ST_Y - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (mysqlParser.SUBDATE - 884)) | (1 << (mysqlParser.SUBSTRING_INDEX - 884)) | (1 << (mysqlParser.SUBTIME - 884)) | (1 << (mysqlParser.SYSTEM_USER - 884)) | (1 << (mysqlParser.TAN - 884)) | (1 << (mysqlParser.TIMEDIFF - 884)) | (1 << (mysqlParser.TIMESTAMPADD - 884)) | (1 << (mysqlParser.TIMESTAMPDIFF - 884)) | (1 << (mysqlParser.TIME_FORMAT - 884)) | (1 << (mysqlParser.TIME_TO_SEC - 884)) | (1 << (mysqlParser.TOUCHES - 884)) | (1 << (mysqlParser.TO_BASE64 - 884)) | (1 << (mysqlParser.TO_DAYS - 884)) | (1 << (mysqlParser.TO_SECONDS - 884)) | (1 << (mysqlParser.UCASE - 884)) | (1 << (mysqlParser.UNCOMPRESS - 884)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (mysqlParser.UNHEX - 884)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 884)) | (1 << (mysqlParser.UPDATEXML - 884)) | (1 << (mysqlParser.UPPER - 884)) | (1 << (mysqlParser.UUID - 884)) | (1 << (mysqlParser.UUID_SHORT - 884)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (mysqlParser.VERSION - 884)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (mysqlParser.WEEKDAY - 884)) | (1 << (mysqlParser.WEEKOFYEAR - 884)) | (1 << (mysqlParser.WEIGHT_STRING - 884)) | (1 << (mysqlParser.WITHIN - 884)) | (1 << (mysqlParser.YEARWEEK - 884)) | (1 << (mysqlParser.Y_FUNCTION - 884)) | (1 << (mysqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 954)) & ~0x3f) == 0 and ((1 << (_la - 954)) & ((1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 954)) | (1 << (mysqlParser.ID - 954)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 954)))) != 0):
                self.state = 3948
                self.uid()
                self.state = 3949
                self.match(mysqlParser.COLON_SYMB)


            self.state = 3953
            self.match(mysqlParser.LOOP)
            self.state = 3955 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3954
                self.procedureSqlStatement()
                self.state = 3957 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 7)) & ~0x3f) == 0 and ((1 << (_la - 7)) & ((1 << (mysqlParser.ALTER - 7)) | (1 << (mysqlParser.ANALYZE - 7)) | (1 << (mysqlParser.CALL - 7)) | (1 << (mysqlParser.CASE - 7)) | (1 << (mysqlParser.CHANGE - 7)) | (1 << (mysqlParser.CHECK - 7)) | (1 << (mysqlParser.CREATE - 7)) | (1 << (mysqlParser.DELETE - 7)) | (1 << (mysqlParser.DESC - 7)) | (1 << (mysqlParser.DESCRIBE - 7)) | (1 << (mysqlParser.DROP - 7)) | (1 << (mysqlParser.EXPLAIN - 7)) | (1 << (mysqlParser.FETCH - 7)) | (1 << (mysqlParser.GRANT - 7)) | (1 << (mysqlParser.IF - 7)))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (mysqlParser.INSERT - 71)) | (1 << (mysqlParser.ITERATE - 71)) | (1 << (mysqlParser.KILL - 71)) | (1 << (mysqlParser.LEAVE - 71)) | (1 << (mysqlParser.LEFT - 71)) | (1 << (mysqlParser.LOAD - 71)) | (1 << (mysqlParser.LOCK - 71)) | (1 << (mysqlParser.LOOP - 71)) | (1 << (mysqlParser.OPTIMIZE - 71)) | (1 << (mysqlParser.PURGE - 71)) | (1 << (mysqlParser.RELEASE - 71)) | (1 << (mysqlParser.RENAME - 71)) | (1 << (mysqlParser.REPEAT - 71)) | (1 << (mysqlParser.REPLACE - 71)) | (1 << (mysqlParser.RETURN - 71)) | (1 << (mysqlParser.REVOKE - 71)) | (1 << (mysqlParser.RIGHT - 71)) | (1 << (mysqlParser.SELECT - 71)) | (1 << (mysqlParser.SET - 71)) | (1 << (mysqlParser.SHOW - 71)))) != 0) or ((((_la - 155)) & ~0x3f) == 0 and ((1 << (_la - 155)) & ((1 << (mysqlParser.UNLOCK - 155)) | (1 << (mysqlParser.UPDATE - 155)) | (1 << (mysqlParser.USE - 155)) | (1 << (mysqlParser.WHILE - 155)) | (1 << (mysqlParser.DATE - 155)) | (1 << (mysqlParser.TIME - 155)) | (1 << (mysqlParser.TIMESTAMP - 155)) | (1 << (mysqlParser.DATETIME - 155)) | (1 << (mysqlParser.YEAR - 155)) | (1 << (mysqlParser.TEXT - 155)) | (1 << (mysqlParser.ENUM - 155)) | (1 << (mysqlParser.COUNT - 155)))) != 0) or ((((_la - 236)) & ~0x3f) == 0 and ((1 << (_la - 236)) & ((1 << (mysqlParser.POSITION - 236)) | (1 << (mysqlParser.ACCOUNT - 236)) | (1 << (mysqlParser.ACTION - 236)) | (1 << (mysqlParser.AFTER - 236)) | (1 << (mysqlParser.AGGREGATE - 236)) | (1 << (mysqlParser.ALGORITHM - 236)) | (1 << (mysqlParser.ANY - 236)) | (1 << (mysqlParser.AT - 236)) | (1 << (mysqlParser.AUTHORS - 236)) | (1 << (mysqlParser.AUTOCOMMIT - 236)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 236)) | (1 << (mysqlParser.AUTO_INCREMENT - 236)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 236)) | (1 << (mysqlParser.BEGIN - 236)) | (1 << (mysqlParser.BINLOG - 236)) | (1 << (mysqlParser.BIT - 236)) | (1 << (mysqlParser.BLOCK - 236)) | (1 << (mysqlParser.BTREE - 236)) | (1 << (mysqlParser.CACHE - 236)) | (1 << (mysqlParser.CASCADED - 236)) | (1 << (mysqlParser.CHAIN - 236)) | (1 << (mysqlParser.CHANNEL - 236)) | (1 << (mysqlParser.CHECKSUM - 236)) | (1 << (mysqlParser.CIPHER - 236)) | (1 << (mysqlParser.CLIENT - 236)) | (1 << (mysqlParser.CLOSE - 236)) | (1 << (mysqlParser.COALESCE - 236)) | (1 << (mysqlParser.CODE - 236)) | (1 << (mysqlParser.COLUMNS - 236)) | (1 << (mysqlParser.COLUMN_FORMAT - 236)) | (1 << (mysqlParser.COMMENT - 236)) | (1 << (mysqlParser.COMMIT - 236)) | (1 << (mysqlParser.COMPACT - 236)) | (1 << (mysqlParser.COMPLETION - 236)) | (1 << (mysqlParser.COMPRESSED - 236)) | (1 << (mysqlParser.COMPRESSION - 236)) | (1 << (mysqlParser.CONCURRENT - 236)) | (1 << (mysqlParser.CONNECTION - 236)) | (1 << (mysqlParser.CONSISTENT - 236)) | (1 << (mysqlParser.CONTAINS - 236)) | (1 << (mysqlParser.CONTEXT - 236)) | (1 << (mysqlParser.CONTRIBUTORS - 236)) | (1 << (mysqlParser.COPY - 236)) | (1 << (mysqlParser.CPU - 236)) | (1 << (mysqlParser.DATA - 236)) | (1 << (mysqlParser.DATAFILE - 236)) | (1 << (mysqlParser.DEALLOCATE - 236)) | (1 << (mysqlParser.DEFAULT_AUTH - 236)) | (1 << (mysqlParser.DEFINER - 236)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 236)) | (1 << (mysqlParser.DIRECTORY - 236)) | (1 << (mysqlParser.DISABLE - 236)) | (1 << (mysqlParser.DISCARD - 236)) | (1 << (mysqlParser.DISK - 236)) | (1 << (mysqlParser.DO - 236)))) != 0) or ((((_la - 300)) & ~0x3f) == 0 and ((1 << (_la - 300)) & ((1 << (mysqlParser.DUMPFILE - 300)) | (1 << (mysqlParser.DUPLICATE - 300)) | (1 << (mysqlParser.DYNAMIC - 300)) | (1 << (mysqlParser.ENABLE - 300)) | (1 << (mysqlParser.ENCRYPTION - 300)) | (1 << (mysqlParser.ENDS - 300)) | (1 << (mysqlParser.ENGINE - 300)) | (1 << (mysqlParser.ENGINES - 300)) | (1 << (mysqlParser.ERROR - 300)) | (1 << (mysqlParser.ERRORS - 300)) | (1 << (mysqlParser.ESCAPE - 300)) | (1 << (mysqlParser.EVEN - 300)) | (1 << (mysqlParser.EVENT - 300)) | (1 << (mysqlParser.EVENTS - 300)) | (1 << (mysqlParser.EVERY - 300)) | (1 << (mysqlParser.EXCHANGE - 300)) | (1 << (mysqlParser.EXCLUSIVE - 300)) | (1 << (mysqlParser.EXPIRE - 300)) | (1 << (mysqlParser.EXTENT_SIZE - 300)) | (1 << (mysqlParser.FAULTS - 300)) | (1 << (mysqlParser.FIELDS - 300)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 300)) | (1 << (mysqlParser.FILTER - 300)) | (1 << (mysqlParser.FIRST - 300)) | (1 << (mysqlParser.FIXED - 300)) | (1 << (mysqlParser.FLUSH - 300)) | (1 << (mysqlParser.FOLLOWS - 300)) | (1 << (mysqlParser.FULL - 300)) | (1 << (mysqlParser.FUNCTION - 300)) | (1 << (mysqlParser.GLOBAL - 300)) | (1 << (mysqlParser.GRANTS - 300)) | (1 << (mysqlParser.GROUP_REPLICATION - 300)) | (1 << (mysqlParser.HANDLER - 300)) | (1 << (mysqlParser.HASH - 300)) | (1 << (mysqlParser.HELP - 300)) | (1 << (mysqlParser.HOST - 300)) | (1 << (mysqlParser.IDENTIFIED - 300)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 300)) | (1 << (mysqlParser.IMPORT - 300)) | (1 << (mysqlParser.INDEXES - 300)) | (1 << (mysqlParser.INITIAL_SIZE - 300)) | (1 << (mysqlParser.INPLACE - 300)) | (1 << (mysqlParser.INSERT_METHOD - 300)) | (1 << (mysqlParser.INSTALL - 300)) | (1 << (mysqlParser.INSTANCE - 300)) | (1 << (mysqlParser.INVOKER - 300)) | (1 << (mysqlParser.IO - 300)) | (1 << (mysqlParser.IO_THREAD - 300)) | (1 << (mysqlParser.IPC - 300)) | (1 << (mysqlParser.ISOLATION - 300)) | (1 << (mysqlParser.ISSUER - 300)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 300)) | (1 << (mysqlParser.LANGUAGE - 300)) | (1 << (mysqlParser.LAST - 300)) | (1 << (mysqlParser.LEAVES - 300)) | (1 << (mysqlParser.LESS - 300)))) != 0) or ((((_la - 364)) & ~0x3f) == 0 and ((1 << (_la - 364)) & ((1 << (mysqlParser.LEVEL - 364)) | (1 << (mysqlParser.LIST - 364)) | (1 << (mysqlParser.LOCAL - 364)) | (1 << (mysqlParser.LOGFILE - 364)) | (1 << (mysqlParser.LOGS - 364)) | (1 << (mysqlParser.MASTER - 364)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 364)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 364)) | (1 << (mysqlParser.MASTER_DELAY - 364)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 364)) | (1 << (mysqlParser.MASTER_HOST - 364)) | (1 << (mysqlParser.MASTER_LOG_FILE - 364)) | (1 << (mysqlParser.MASTER_LOG_POS - 364)) | (1 << (mysqlParser.MASTER_PASSWORD - 364)) | (1 << (mysqlParser.MASTER_PORT - 364)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 364)) | (1 << (mysqlParser.MASTER_SSL - 364)) | (1 << (mysqlParser.MASTER_SSL_CA - 364)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 364)) | (1 << (mysqlParser.MASTER_SSL_CERT - 364)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 364)) | (1 << (mysqlParser.MASTER_SSL_CRL - 364)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 364)) | (1 << (mysqlParser.MASTER_SSL_KEY - 364)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 364)) | (1 << (mysqlParser.MASTER_USER - 364)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 364)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 364)) | (1 << (mysqlParser.MAX_ROWS - 364)) | (1 << (mysqlParser.MAX_SIZE - 364)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 364)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 364)) | (1 << (mysqlParser.MERGE - 364)) | (1 << (mysqlParser.MID - 364)) | (1 << (mysqlParser.MIGRATE - 364)) | (1 << (mysqlParser.MIN_ROWS - 364)) | (1 << (mysqlParser.MODIFY - 364)) | (1 << (mysqlParser.MUTEX - 364)) | (1 << (mysqlParser.MYSQL - 364)) | (1 << (mysqlParser.NAME - 364)) | (1 << (mysqlParser.NAMES - 364)) | (1 << (mysqlParser.NCHAR - 364)) | (1 << (mysqlParser.NEVER - 364)) | (1 << (mysqlParser.NO - 364)) | (1 << (mysqlParser.NODEGROUP - 364)) | (1 << (mysqlParser.NONE - 364)) | (1 << (mysqlParser.OFFLINE - 364)) | (1 << (mysqlParser.OFFSET - 364)) | (1 << (mysqlParser.OJ - 364)) | (1 << (mysqlParser.OLD_PASSWORD - 364)) | (1 << (mysqlParser.ONE - 364)) | (1 << (mysqlParser.ONLINE - 364)) | (1 << (mysqlParser.ONLY - 364)) | (1 << (mysqlParser.OPEN - 364)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 364)) | (1 << (mysqlParser.OPTIONS - 364)) | (1 << (mysqlParser.OWNER - 364)) | (1 << (mysqlParser.PACK_KEYS - 364)) | (1 << (mysqlParser.PAGE - 364)) | (1 << (mysqlParser.PARSER - 364)) | (1 << (mysqlParser.PARTIAL - 364)))) != 0) or ((((_la - 428)) & ~0x3f) == 0 and ((1 << (_la - 428)) & ((1 << (mysqlParser.PARTITIONING - 428)) | (1 << (mysqlParser.PARTITIONS - 428)) | (1 << (mysqlParser.PASSWORD - 428)) | (1 << (mysqlParser.PHASE - 428)) | (1 << (mysqlParser.PLUGIN_DIR - 428)) | (1 << (mysqlParser.PLUGINS - 428)) | (1 << (mysqlParser.PORT - 428)) | (1 << (mysqlParser.PRECEDES - 428)) | (1 << (mysqlParser.PREPARE - 428)) | (1 << (mysqlParser.PRESERVE - 428)) | (1 << (mysqlParser.PREV - 428)) | (1 << (mysqlParser.PROCESSLIST - 428)) | (1 << (mysqlParser.PROFILE - 428)) | (1 << (mysqlParser.PROFILES - 428)) | (1 << (mysqlParser.PROXY - 428)) | (1 << (mysqlParser.QUERY - 428)) | (1 << (mysqlParser.QUICK - 428)) | (1 << (mysqlParser.REBUILD - 428)) | (1 << (mysqlParser.RECOVER - 428)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 428)) | (1 << (mysqlParser.REDUNDANT - 428)) | (1 << (mysqlParser.RELAY_LOG_FILE - 428)) | (1 << (mysqlParser.RELAY_LOG_POS - 428)) | (1 << (mysqlParser.RELAYLOG - 428)) | (1 << (mysqlParser.REMOVE - 428)) | (1 << (mysqlParser.REORGANIZE - 428)) | (1 << (mysqlParser.REPAIR - 428)) | (1 << (mysqlParser.REPLICATE_DO_DB - 428)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 428)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 428)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 428)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 428)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 428)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 428)) | (1 << (mysqlParser.REPLICATION - 428)) | (1 << (mysqlParser.RESET - 428)) | (1 << (mysqlParser.RESUME - 428)) | (1 << (mysqlParser.RETURNS - 428)) | (1 << (mysqlParser.ROLLBACK - 428)) | (1 << (mysqlParser.ROLLUP - 428)) | (1 << (mysqlParser.ROTATE - 428)) | (1 << (mysqlParser.ROW - 428)) | (1 << (mysqlParser.ROWS - 428)) | (1 << (mysqlParser.ROW_FORMAT - 428)) | (1 << (mysqlParser.SAVEPOINT - 428)) | (1 << (mysqlParser.SCHEDULE - 428)) | (1 << (mysqlParser.SECURITY - 428)) | (1 << (mysqlParser.SERVER - 428)) | (1 << (mysqlParser.SESSION - 428)) | (1 << (mysqlParser.SHARE - 428)) | (1 << (mysqlParser.SHARED - 428)) | (1 << (mysqlParser.SIGNED - 428)) | (1 << (mysqlParser.SIMPLE - 428)) | (1 << (mysqlParser.SLAVE - 428)) | (1 << (mysqlParser.SNAPSHOT - 428)) | (1 << (mysqlParser.SOCKET - 428)) | (1 << (mysqlParser.SOME - 428)) | (1 << (mysqlParser.SOUNDS - 428)) | (1 << (mysqlParser.SOURCE - 428)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 428)))) != 0) or ((((_la - 492)) & ~0x3f) == 0 and ((1 << (_la - 492)) & ((1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 492)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 492)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 492)) | (1 << (mysqlParser.SQL_CACHE - 492)) | (1 << (mysqlParser.SQL_NO_CACHE - 492)) | (1 << (mysqlParser.SQL_THREAD - 492)) | (1 << (mysqlParser.START - 492)) | (1 << (mysqlParser.STARTS - 492)) | (1 << (mysqlParser.STATS_AUTO_RECALC - 492)) | (1 << (mysqlParser.STATS_PERSISTENT - 492)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 492)) | (1 << (mysqlParser.STATUS - 492)) | (1 << (mysqlParser.STOP - 492)) | (1 << (mysqlParser.STORAGE - 492)) | (1 << (mysqlParser.STRING - 492)) | (1 << (mysqlParser.SUBJECT - 492)) | (1 << (mysqlParser.SUBPARTITION - 492)) | (1 << (mysqlParser.SUBPARTITIONS - 492)) | (1 << (mysqlParser.SUSPEND - 492)) | (1 << (mysqlParser.SWAPS - 492)) | (1 << (mysqlParser.SWITCHES - 492)) | (1 << (mysqlParser.TABLESPACE - 492)) | (1 << (mysqlParser.TEMPORARY - 492)) | (1 << (mysqlParser.TEMPTABLE - 492)) | (1 << (mysqlParser.THAN - 492)) | (1 << (mysqlParser.TRANSACTION - 492)) | (1 << (mysqlParser.TRUNCATE - 492)) | (1 << (mysqlParser.UNDEFINED - 492)) | (1 << (mysqlParser.UNDOFILE - 492)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 492)) | (1 << (mysqlParser.UNINSTALL - 492)) | (1 << (mysqlParser.UNKNOWN - 492)) | (1 << (mysqlParser.UPGRADE - 492)) | (1 << (mysqlParser.USER - 492)) | (1 << (mysqlParser.VALIDATION - 492)) | (1 << (mysqlParser.VALUE - 492)) | (1 << (mysqlParser.VARIABLES - 492)) | (1 << (mysqlParser.VIEW - 492)) | (1 << (mysqlParser.WAIT - 492)) | (1 << (mysqlParser.WARNINGS - 492)) | (1 << (mysqlParser.WITHOUT - 492)) | (1 << (mysqlParser.WORK - 492)) | (1 << (mysqlParser.WRAPPER - 492)) | (1 << (mysqlParser.X509 - 492)) | (1 << (mysqlParser.XA - 492)) | (1 << (mysqlParser.XML - 492)) | (1 << (mysqlParser.QUARTER - 492)) | (1 << (mysqlParser.MONTH - 492)) | (1 << (mysqlParser.DAY - 492)) | (1 << (mysqlParser.HOUR - 492)) | (1 << (mysqlParser.MINUTE - 492)) | (1 << (mysqlParser.WEEK - 492)) | (1 << (mysqlParser.SECOND - 492)) | (1 << (mysqlParser.MICROSECOND - 492)))) != 0) or ((((_la - 556)) & ~0x3f) == 0 and ((1 << (_la - 556)) & ((1 << (mysqlParser.TABLES - 556)) | (1 << (mysqlParser.ROUTINE - 556)) | (1 << (mysqlParser.EXECUTE - 556)) | (1 << (mysqlParser.FILE - 556)) | (1 << (mysqlParser.PROCESS - 556)) | (1 << (mysqlParser.RELOAD - 556)) | (1 << (mysqlParser.SHUTDOWN - 556)) | (1 << (mysqlParser.SUPER - 556)) | (1 << (mysqlParser.PRIVILEGES - 556)) | (1 << (mysqlParser.ARMSCII8 - 556)) | (1 << (mysqlParser.ASCII - 556)) | (1 << (mysqlParser.BIG5 - 556)) | (1 << (mysqlParser.CP1250 - 556)) | (1 << (mysqlParser.CP1251 - 556)) | (1 << (mysqlParser.CP1256 - 556)) | (1 << (mysqlParser.CP1257 - 556)) | (1 << (mysqlParser.CP850 - 556)) | (1 << (mysqlParser.CP852 - 556)) | (1 << (mysqlParser.CP866 - 556)) | (1 << (mysqlParser.CP932 - 556)) | (1 << (mysqlParser.DEC8 - 556)) | (1 << (mysqlParser.EUCJPMS - 556)) | (1 << (mysqlParser.EUCKR - 556)) | (1 << (mysqlParser.GB2312 - 556)) | (1 << (mysqlParser.GBK - 556)) | (1 << (mysqlParser.GEOSTD8 - 556)) | (1 << (mysqlParser.GREEK - 556)) | (1 << (mysqlParser.HEBREW - 556)) | (1 << (mysqlParser.HP8 - 556)) | (1 << (mysqlParser.KEYBCS2 - 556)) | (1 << (mysqlParser.KOI8R - 556)) | (1 << (mysqlParser.KOI8U - 556)) | (1 << (mysqlParser.LATIN1 - 556)) | (1 << (mysqlParser.LATIN2 - 556)) | (1 << (mysqlParser.LATIN5 - 556)) | (1 << (mysqlParser.LATIN7 - 556)) | (1 << (mysqlParser.MACCE - 556)) | (1 << (mysqlParser.MACROMAN - 556)) | (1 << (mysqlParser.SJIS - 556)) | (1 << (mysqlParser.SWE7 - 556)) | (1 << (mysqlParser.TIS620 - 556)) | (1 << (mysqlParser.UCS2 - 556)) | (1 << (mysqlParser.UJIS - 556)) | (1 << (mysqlParser.UTF16 - 556)) | (1 << (mysqlParser.UTF16LE - 556)) | (1 << (mysqlParser.UTF32 - 556)) | (1 << (mysqlParser.UTF8 - 556)) | (1 << (mysqlParser.UTF8MB3 - 556)) | (1 << (mysqlParser.UTF8MB4 - 556)) | (1 << (mysqlParser.ARCHIVE - 556)) | (1 << (mysqlParser.BLACKHOLE - 556)) | (1 << (mysqlParser.CSV - 556)) | (1 << (mysqlParser.FEDERATED - 556)) | (1 << (mysqlParser.INNODB - 556)) | (1 << (mysqlParser.MEMORY - 556)) | (1 << (mysqlParser.MRG_MYISAM - 556)) | (1 << (mysqlParser.MYISAM - 556)) | (1 << (mysqlParser.NDB - 556)) | (1 << (mysqlParser.NDBCLUSTER - 556)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 556)) | (1 << (mysqlParser.REPEATABLE - 556)) | (1 << (mysqlParser.COMMITTED - 556)) | (1 << (mysqlParser.UNCOMMITTED - 556)) | (1 << (mysqlParser.SERIALIZABLE - 556)))) != 0) or ((((_la - 620)) & ~0x3f) == 0 and ((1 << (_la - 620)) & ((1 << (mysqlParser.GEOMETRYCOLLECTION - 620)) | (1 << (mysqlParser.LINESTRING - 620)) | (1 << (mysqlParser.MULTILINESTRING - 620)) | (1 << (mysqlParser.MULTIPOINT - 620)) | (1 << (mysqlParser.MULTIPOLYGON - 620)) | (1 << (mysqlParser.POINT - 620)) | (1 << (mysqlParser.POLYGON - 620)) | (1 << (mysqlParser.ABS - 620)) | (1 << (mysqlParser.ACOS - 620)) | (1 << (mysqlParser.ADDDATE - 620)) | (1 << (mysqlParser.ADDTIME - 620)) | (1 << (mysqlParser.AES_DECRYPT - 620)) | (1 << (mysqlParser.AES_ENCRYPT - 620)) | (1 << (mysqlParser.AREA - 620)) | (1 << (mysqlParser.ASBINARY - 620)) | (1 << (mysqlParser.ASIN - 620)) | (1 << (mysqlParser.ASTEXT - 620)) | (1 << (mysqlParser.ASWKB - 620)) | (1 << (mysqlParser.ASWKT - 620)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 620)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 620)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 620)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 620)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 620)) | (1 << (mysqlParser.ATAN - 620)) | (1 << (mysqlParser.ATAN2 - 620)) | (1 << (mysqlParser.BENCHMARK - 620)) | (1 << (mysqlParser.BIN - 620)) | (1 << (mysqlParser.BIT_COUNT - 620)) | (1 << (mysqlParser.BIT_LENGTH - 620)) | (1 << (mysqlParser.BUFFER - 620)) | (1 << (mysqlParser.CEIL - 620)) | (1 << (mysqlParser.CEILING - 620)) | (1 << (mysqlParser.CENTROID - 620)) | (1 << (mysqlParser.CHARACTER_LENGTH - 620)) | (1 << (mysqlParser.CHARSET - 620)) | (1 << (mysqlParser.CHAR_LENGTH - 620)) | (1 << (mysqlParser.COERCIBILITY - 620)) | (1 << (mysqlParser.COLLATION - 620)) | (1 << (mysqlParser.COMPRESS - 620)) | (1 << (mysqlParser.CONCAT - 620)) | (1 << (mysqlParser.CONCAT_WS - 620)) | (1 << (mysqlParser.CONNECTION_ID - 620)) | (1 << (mysqlParser.CONV - 620)) | (1 << (mysqlParser.CONVERT_TZ - 620)) | (1 << (mysqlParser.COS - 620)) | (1 << (mysqlParser.COT - 620)) | (1 << (mysqlParser.CRC32 - 620)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 620)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 620)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 620)) | (1 << (mysqlParser.CREATE_DIGEST - 620)) | (1 << (mysqlParser.CROSSES - 620)) | (1 << (mysqlParser.DATEDIFF - 620)) | (1 << (mysqlParser.DATE_FORMAT - 620)) | (1 << (mysqlParser.DAYNAME - 620)) | (1 << (mysqlParser.DAYOFMONTH - 620)) | (1 << (mysqlParser.DAYOFWEEK - 620)) | (1 << (mysqlParser.DAYOFYEAR - 620)) | (1 << (mysqlParser.DECODE - 620)) | (1 << (mysqlParser.DEGREES - 620)) | (1 << (mysqlParser.DES_DECRYPT - 620)) | (1 << (mysqlParser.DES_ENCRYPT - 620)) | (1 << (mysqlParser.DIMENSION - 620)))) != 0) or ((((_la - 684)) & ~0x3f) == 0 and ((1 << (_la - 684)) & ((1 << (mysqlParser.DISJOINT - 684)) | (1 << (mysqlParser.ELT - 684)) | (1 << (mysqlParser.ENCODE - 684)) | (1 << (mysqlParser.ENCRYPT - 684)) | (1 << (mysqlParser.ENDPOINT - 684)) | (1 << (mysqlParser.ENVELOPE - 684)) | (1 << (mysqlParser.EQUALS - 684)) | (1 << (mysqlParser.EXP - 684)) | (1 << (mysqlParser.EXPORT_SET - 684)) | (1 << (mysqlParser.EXTERIORRING - 684)) | (1 << (mysqlParser.EXTRACTVALUE - 684)) | (1 << (mysqlParser.FIELD - 684)) | (1 << (mysqlParser.FIND_IN_SET - 684)) | (1 << (mysqlParser.FLOOR - 684)) | (1 << (mysqlParser.FORMAT - 684)) | (1 << (mysqlParser.FOUND_ROWS - 684)) | (1 << (mysqlParser.FROM_BASE64 - 684)) | (1 << (mysqlParser.FROM_DAYS - 684)) | (1 << (mysqlParser.FROM_UNIXTIME - 684)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 684)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 684)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 684)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 684)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 684)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 684)) | (1 << (mysqlParser.GEOMETRYN - 684)) | (1 << (mysqlParser.GEOMETRYTYPE - 684)) | (1 << (mysqlParser.GEOMFROMTEXT - 684)) | (1 << (mysqlParser.GEOMFROMWKB - 684)) | (1 << (mysqlParser.GET_FORMAT - 684)) | (1 << (mysqlParser.GET_LOCK - 684)) | (1 << (mysqlParser.GLENGTH - 684)) | (1 << (mysqlParser.GREATEST - 684)) | (1 << (mysqlParser.GTID_SUBSET - 684)) | (1 << (mysqlParser.GTID_SUBTRACT - 684)) | (1 << (mysqlParser.HEX - 684)) | (1 << (mysqlParser.IFNULL - 684)) | (1 << (mysqlParser.INET6_ATON - 684)) | (1 << (mysqlParser.INET6_NTOA - 684)) | (1 << (mysqlParser.INET_ATON - 684)) | (1 << (mysqlParser.INET_NTOA - 684)) | (1 << (mysqlParser.INSTR - 684)) | (1 << (mysqlParser.INTERIORRINGN - 684)) | (1 << (mysqlParser.INTERSECTS - 684)) | (1 << (mysqlParser.ISCLOSED - 684)) | (1 << (mysqlParser.ISEMPTY - 684)) | (1 << (mysqlParser.ISNULL - 684)) | (1 << (mysqlParser.ISSIMPLE - 684)) | (1 << (mysqlParser.IS_FREE_LOCK - 684)) | (1 << (mysqlParser.IS_IPV4 - 684)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 684)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 684)) | (1 << (mysqlParser.IS_IPV6 - 684)) | (1 << (mysqlParser.IS_USED_LOCK - 684)) | (1 << (mysqlParser.LAST_INSERT_ID - 684)) | (1 << (mysqlParser.LCASE - 684)) | (1 << (mysqlParser.LEAST - 684)) | (1 << (mysqlParser.LENGTH - 684)) | (1 << (mysqlParser.LINEFROMTEXT - 684)) | (1 << (mysqlParser.LINEFROMWKB - 684)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 684)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 684)) | (1 << (mysqlParser.LN - 684)) | (1 << (mysqlParser.LOAD_FILE - 684)))) != 0) or ((((_la - 748)) & ~0x3f) == 0 and ((1 << (_la - 748)) & ((1 << (mysqlParser.LOCATE - 748)) | (1 << (mysqlParser.LOG - 748)) | (1 << (mysqlParser.LOG10 - 748)) | (1 << (mysqlParser.LOG2 - 748)) | (1 << (mysqlParser.LOWER - 748)) | (1 << (mysqlParser.LPAD - 748)) | (1 << (mysqlParser.LTRIM - 748)) | (1 << (mysqlParser.MAKEDATE - 748)) | (1 << (mysqlParser.MAKETIME - 748)) | (1 << (mysqlParser.MAKE_SET - 748)) | (1 << (mysqlParser.MASTER_POS_WAIT - 748)) | (1 << (mysqlParser.MBRCONTAINS - 748)) | (1 << (mysqlParser.MBRDISJOINT - 748)) | (1 << (mysqlParser.MBREQUAL - 748)) | (1 << (mysqlParser.MBRINTERSECTS - 748)) | (1 << (mysqlParser.MBROVERLAPS - 748)) | (1 << (mysqlParser.MBRTOUCHES - 748)) | (1 << (mysqlParser.MBRWITHIN - 748)) | (1 << (mysqlParser.MD5 - 748)) | (1 << (mysqlParser.MLINEFROMTEXT - 748)) | (1 << (mysqlParser.MLINEFROMWKB - 748)) | (1 << (mysqlParser.MONTHNAME - 748)) | (1 << (mysqlParser.MPOINTFROMTEXT - 748)) | (1 << (mysqlParser.MPOINTFROMWKB - 748)) | (1 << (mysqlParser.MPOLYFROMTEXT - 748)) | (1 << (mysqlParser.MPOLYFROMWKB - 748)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 748)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 748)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 748)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 748)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 748)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 748)) | (1 << (mysqlParser.NAME_CONST - 748)) | (1 << (mysqlParser.NULLIF - 748)) | (1 << (mysqlParser.NUMGEOMETRIES - 748)) | (1 << (mysqlParser.NUMINTERIORRINGS - 748)) | (1 << (mysqlParser.NUMPOINTS - 748)) | (1 << (mysqlParser.OCT - 748)) | (1 << (mysqlParser.OCTET_LENGTH - 748)) | (1 << (mysqlParser.ORD - 748)) | (1 << (mysqlParser.OVERLAPS - 748)) | (1 << (mysqlParser.PERIOD_ADD - 748)) | (1 << (mysqlParser.PERIOD_DIFF - 748)) | (1 << (mysqlParser.PI - 748)) | (1 << (mysqlParser.POINTFROMTEXT - 748)) | (1 << (mysqlParser.POINTFROMWKB - 748)) | (1 << (mysqlParser.POINTN - 748)) | (1 << (mysqlParser.POLYFROMTEXT - 748)) | (1 << (mysqlParser.POLYFROMWKB - 748)) | (1 << (mysqlParser.POLYGONFROMTEXT - 748)) | (1 << (mysqlParser.POLYGONFROMWKB - 748)) | (1 << (mysqlParser.POW - 748)) | (1 << (mysqlParser.POWER - 748)) | (1 << (mysqlParser.QUOTE - 748)) | (1 << (mysqlParser.RADIANS - 748)) | (1 << (mysqlParser.RAND - 748)) | (1 << (mysqlParser.RANDOM_BYTES - 748)) | (1 << (mysqlParser.RELEASE_LOCK - 748)) | (1 << (mysqlParser.REVERSE - 748)) | (1 << (mysqlParser.ROUND - 748)) | (1 << (mysqlParser.ROW_COUNT - 748)) | (1 << (mysqlParser.RPAD - 748)) | (1 << (mysqlParser.RTRIM - 748)) | (1 << (mysqlParser.SEC_TO_TIME - 748)))) != 0) or ((((_la - 812)) & ~0x3f) == 0 and ((1 << (_la - 812)) & ((1 << (mysqlParser.SESSION_USER - 812)) | (1 << (mysqlParser.SHA - 812)) | (1 << (mysqlParser.SHA1 - 812)) | (1 << (mysqlParser.SHA2 - 812)) | (1 << (mysqlParser.SIGN - 812)) | (1 << (mysqlParser.SIN - 812)) | (1 << (mysqlParser.SLEEP - 812)) | (1 << (mysqlParser.SOUNDEX - 812)) | (1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 812)) | (1 << (mysqlParser.SQRT - 812)) | (1 << (mysqlParser.SRID - 812)) | (1 << (mysqlParser.STARTPOINT - 812)) | (1 << (mysqlParser.STRCMP - 812)) | (1 << (mysqlParser.STR_TO_DATE - 812)) | (1 << (mysqlParser.ST_AREA - 812)) | (1 << (mysqlParser.ST_ASBINARY - 812)) | (1 << (mysqlParser.ST_ASTEXT - 812)) | (1 << (mysqlParser.ST_ASWKB - 812)) | (1 << (mysqlParser.ST_ASWKT - 812)) | (1 << (mysqlParser.ST_BUFFER - 812)) | (1 << (mysqlParser.ST_CENTROID - 812)) | (1 << (mysqlParser.ST_CONTAINS - 812)) | (1 << (mysqlParser.ST_CROSSES - 812)) | (1 << (mysqlParser.ST_DIFFERENCE - 812)) | (1 << (mysqlParser.ST_DIMENSION - 812)) | (1 << (mysqlParser.ST_DISJOINT - 812)) | (1 << (mysqlParser.ST_DISTANCE - 812)) | (1 << (mysqlParser.ST_ENDPOINT - 812)) | (1 << (mysqlParser.ST_ENVELOPE - 812)) | (1 << (mysqlParser.ST_EQUALS - 812)) | (1 << (mysqlParser.ST_EXTERIORRING - 812)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 812)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 812)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 812)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 812)) | (1 << (mysqlParser.ST_GEOMETRYN - 812)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 812)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 812)) | (1 << (mysqlParser.ST_INTERIORRINGN - 812)) | (1 << (mysqlParser.ST_INTERSECTION - 812)) | (1 << (mysqlParser.ST_INTERSECTS - 812)) | (1 << (mysqlParser.ST_ISCLOSED - 812)) | (1 << (mysqlParser.ST_ISEMPTY - 812)) | (1 << (mysqlParser.ST_ISSIMPLE - 812)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 812)) | (1 << (mysqlParser.ST_LINEFROMWKB - 812)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 812)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 812)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 812)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 812)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 812)) | (1 << (mysqlParser.ST_NUMPOINTS - 812)) | (1 << (mysqlParser.ST_OVERLAPS - 812)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 812)) | (1 << (mysqlParser.ST_POINTFROMWKB - 812)) | (1 << (mysqlParser.ST_POINTN - 812)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 812)) | (1 << (mysqlParser.ST_POLYFROMWKB - 812)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 812)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 812)))) != 0) or ((((_la - 876)) & ~0x3f) == 0 and ((1 << (_la - 876)) & ((1 << (mysqlParser.ST_SRID - 876)) | (1 << (mysqlParser.ST_STARTPOINT - 876)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 876)) | (1 << (mysqlParser.ST_TOUCHES - 876)) | (1 << (mysqlParser.ST_UNION - 876)) | (1 << (mysqlParser.ST_WITHIN - 876)) | (1 << (mysqlParser.ST_X - 876)) | (1 << (mysqlParser.ST_Y - 876)) | (1 << (mysqlParser.SUBDATE - 876)) | (1 << (mysqlParser.SUBSTRING_INDEX - 876)) | (1 << (mysqlParser.SUBTIME - 876)) | (1 << (mysqlParser.SYSTEM_USER - 876)) | (1 << (mysqlParser.TAN - 876)) | (1 << (mysqlParser.TIMEDIFF - 876)) | (1 << (mysqlParser.TIMESTAMPADD - 876)) | (1 << (mysqlParser.TIMESTAMPDIFF - 876)) | (1 << (mysqlParser.TIME_FORMAT - 876)) | (1 << (mysqlParser.TIME_TO_SEC - 876)) | (1 << (mysqlParser.TOUCHES - 876)) | (1 << (mysqlParser.TO_BASE64 - 876)) | (1 << (mysqlParser.TO_DAYS - 876)) | (1 << (mysqlParser.TO_SECONDS - 876)) | (1 << (mysqlParser.UCASE - 876)) | (1 << (mysqlParser.UNCOMPRESS - 876)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 876)) | (1 << (mysqlParser.UNHEX - 876)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 876)) | (1 << (mysqlParser.UPDATEXML - 876)) | (1 << (mysqlParser.UPPER - 876)) | (1 << (mysqlParser.UUID - 876)) | (1 << (mysqlParser.UUID_SHORT - 876)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 876)) | (1 << (mysqlParser.VERSION - 876)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 876)) | (1 << (mysqlParser.WEEKDAY - 876)) | (1 << (mysqlParser.WEEKOFYEAR - 876)) | (1 << (mysqlParser.WEIGHT_STRING - 876)) | (1 << (mysqlParser.WITHIN - 876)) | (1 << (mysqlParser.YEARWEEK - 876)) | (1 << (mysqlParser.Y_FUNCTION - 876)) | (1 << (mysqlParser.X_FUNCTION - 876)))) != 0) or ((((_la - 942)) & ~0x3f) == 0 and ((1 << (_la - 942)) & ((1 << (mysqlParser.LR_BRACKET - 942)) | (1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 942)) | (1 << (mysqlParser.ID - 942)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 942)))) != 0)):
                    break

            self.state = 3959
            self.match(mysqlParser.END)
            self.state = 3960
            self.match(mysqlParser.LOOP)
            self.state = 3962
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.LEFT or _la==mysqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (mysqlParser.DATE - 180)) | (1 << (mysqlParser.TIME - 180)) | (1 << (mysqlParser.TIMESTAMP - 180)) | (1 << (mysqlParser.DATETIME - 180)) | (1 << (mysqlParser.YEAR - 180)) | (1 << (mysqlParser.TEXT - 180)) | (1 << (mysqlParser.ENUM - 180)) | (1 << (mysqlParser.COUNT - 180)) | (1 << (mysqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (mysqlParser.ACCOUNT - 244)) | (1 << (mysqlParser.ACTION - 244)) | (1 << (mysqlParser.AFTER - 244)) | (1 << (mysqlParser.AGGREGATE - 244)) | (1 << (mysqlParser.ALGORITHM - 244)) | (1 << (mysqlParser.ANY - 244)) | (1 << (mysqlParser.AT - 244)) | (1 << (mysqlParser.AUTHORS - 244)) | (1 << (mysqlParser.AUTOCOMMIT - 244)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (mysqlParser.AUTO_INCREMENT - 244)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 244)) | (1 << (mysqlParser.BEGIN - 244)) | (1 << (mysqlParser.BINLOG - 244)) | (1 << (mysqlParser.BIT - 244)) | (1 << (mysqlParser.BLOCK - 244)) | (1 << (mysqlParser.BTREE - 244)) | (1 << (mysqlParser.CASCADED - 244)) | (1 << (mysqlParser.CHAIN - 244)) | (1 << (mysqlParser.CHANNEL - 244)) | (1 << (mysqlParser.CHECKSUM - 244)) | (1 << (mysqlParser.CIPHER - 244)) | (1 << (mysqlParser.CLIENT - 244)) | (1 << (mysqlParser.COALESCE - 244)) | (1 << (mysqlParser.CODE - 244)) | (1 << (mysqlParser.COLUMNS - 244)) | (1 << (mysqlParser.COLUMN_FORMAT - 244)) | (1 << (mysqlParser.COMMENT - 244)) | (1 << (mysqlParser.COMMIT - 244)) | (1 << (mysqlParser.COMPACT - 244)) | (1 << (mysqlParser.COMPLETION - 244)) | (1 << (mysqlParser.COMPRESSED - 244)) | (1 << (mysqlParser.COMPRESSION - 244)) | (1 << (mysqlParser.CONCURRENT - 244)) | (1 << (mysqlParser.CONNECTION - 244)) | (1 << (mysqlParser.CONSISTENT - 244)) | (1 << (mysqlParser.CONTAINS - 244)) | (1 << (mysqlParser.CONTEXT - 244)) | (1 << (mysqlParser.CONTRIBUTORS - 244)) | (1 << (mysqlParser.COPY - 244)) | (1 << (mysqlParser.CPU - 244)) | (1 << (mysqlParser.DATA - 244)) | (1 << (mysqlParser.DATAFILE - 244)) | (1 << (mysqlParser.DEALLOCATE - 244)) | (1 << (mysqlParser.DEFAULT_AUTH - 244)) | (1 << (mysqlParser.DEFINER - 244)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 244)) | (1 << (mysqlParser.DIRECTORY - 244)) | (1 << (mysqlParser.DISABLE - 244)) | (1 << (mysqlParser.DISCARD - 244)) | (1 << (mysqlParser.DISK - 244)) | (1 << (mysqlParser.DO - 244)) | (1 << (mysqlParser.DUMPFILE - 244)) | (1 << (mysqlParser.DUPLICATE - 244)) | (1 << (mysqlParser.DYNAMIC - 244)) | (1 << (mysqlParser.ENABLE - 244)) | (1 << (mysqlParser.ENCRYPTION - 244)) | (1 << (mysqlParser.ENDS - 244)) | (1 << (mysqlParser.ENGINE - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (mysqlParser.ENGINES - 308)) | (1 << (mysqlParser.ERROR - 308)) | (1 << (mysqlParser.ERRORS - 308)) | (1 << (mysqlParser.ESCAPE - 308)) | (1 << (mysqlParser.EVEN - 308)) | (1 << (mysqlParser.EVENT - 308)) | (1 << (mysqlParser.EVENTS - 308)) | (1 << (mysqlParser.EVERY - 308)) | (1 << (mysqlParser.EXCHANGE - 308)) | (1 << (mysqlParser.EXCLUSIVE - 308)) | (1 << (mysqlParser.EXPIRE - 308)) | (1 << (mysqlParser.EXTENT_SIZE - 308)) | (1 << (mysqlParser.FAULTS - 308)) | (1 << (mysqlParser.FIELDS - 308)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (mysqlParser.FILTER - 308)) | (1 << (mysqlParser.FIRST - 308)) | (1 << (mysqlParser.FIXED - 308)) | (1 << (mysqlParser.FOLLOWS - 308)) | (1 << (mysqlParser.FULL - 308)) | (1 << (mysqlParser.FUNCTION - 308)) | (1 << (mysqlParser.GLOBAL - 308)) | (1 << (mysqlParser.GRANTS - 308)) | (1 << (mysqlParser.GROUP_REPLICATION - 308)) | (1 << (mysqlParser.HASH - 308)) | (1 << (mysqlParser.HOST - 308)) | (1 << (mysqlParser.IDENTIFIED - 308)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (mysqlParser.IMPORT - 308)) | (1 << (mysqlParser.INDEXES - 308)) | (1 << (mysqlParser.INITIAL_SIZE - 308)) | (1 << (mysqlParser.INPLACE - 308)) | (1 << (mysqlParser.INSERT_METHOD - 308)) | (1 << (mysqlParser.INSTANCE - 308)) | (1 << (mysqlParser.INVOKER - 308)) | (1 << (mysqlParser.IO - 308)) | (1 << (mysqlParser.IO_THREAD - 308)) | (1 << (mysqlParser.IPC - 308)) | (1 << (mysqlParser.ISOLATION - 308)) | (1 << (mysqlParser.ISSUER - 308)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (mysqlParser.LANGUAGE - 308)) | (1 << (mysqlParser.LAST - 308)) | (1 << (mysqlParser.LEAVES - 308)) | (1 << (mysqlParser.LESS - 308)) | (1 << (mysqlParser.LEVEL - 308)) | (1 << (mysqlParser.LIST - 308)) | (1 << (mysqlParser.LOCAL - 308)) | (1 << (mysqlParser.LOGFILE - 308)) | (1 << (mysqlParser.LOGS - 308)) | (1 << (mysqlParser.MASTER - 308)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 308)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (mysqlParser.MASTER_DELAY - 372)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (mysqlParser.MASTER_HOST - 372)) | (1 << (mysqlParser.MASTER_LOG_FILE - 372)) | (1 << (mysqlParser.MASTER_LOG_POS - 372)) | (1 << (mysqlParser.MASTER_PASSWORD - 372)) | (1 << (mysqlParser.MASTER_PORT - 372)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (mysqlParser.MASTER_SSL - 372)) | (1 << (mysqlParser.MASTER_SSL_CA - 372)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_CERT - 372)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (mysqlParser.MASTER_SSL_CRL - 372)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_KEY - 372)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 372)) | (1 << (mysqlParser.MASTER_USER - 372)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_ROWS - 372)) | (1 << (mysqlParser.MAX_SIZE - 372)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (mysqlParser.MERGE - 372)) | (1 << (mysqlParser.MID - 372)) | (1 << (mysqlParser.MIGRATE - 372)) | (1 << (mysqlParser.MIN_ROWS - 372)) | (1 << (mysqlParser.MODIFY - 372)) | (1 << (mysqlParser.MUTEX - 372)) | (1 << (mysqlParser.MYSQL - 372)) | (1 << (mysqlParser.NAME - 372)) | (1 << (mysqlParser.NAMES - 372)) | (1 << (mysqlParser.NCHAR - 372)) | (1 << (mysqlParser.NEVER - 372)) | (1 << (mysqlParser.NO - 372)) | (1 << (mysqlParser.NODEGROUP - 372)) | (1 << (mysqlParser.NONE - 372)) | (1 << (mysqlParser.OFFLINE - 372)) | (1 << (mysqlParser.OFFSET - 372)) | (1 << (mysqlParser.OJ - 372)) | (1 << (mysqlParser.OLD_PASSWORD - 372)) | (1 << (mysqlParser.ONE - 372)) | (1 << (mysqlParser.ONLINE - 372)) | (1 << (mysqlParser.ONLY - 372)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 372)) | (1 << (mysqlParser.OPTIONS - 372)) | (1 << (mysqlParser.OWNER - 372)) | (1 << (mysqlParser.PACK_KEYS - 372)) | (1 << (mysqlParser.PAGE - 372)) | (1 << (mysqlParser.PARSER - 372)) | (1 << (mysqlParser.PARTIAL - 372)) | (1 << (mysqlParser.PARTITIONING - 372)) | (1 << (mysqlParser.PARTITIONS - 372)) | (1 << (mysqlParser.PASSWORD - 372)) | (1 << (mysqlParser.PHASE - 372)) | (1 << (mysqlParser.PLUGIN_DIR - 372)) | (1 << (mysqlParser.PLUGINS - 372)) | (1 << (mysqlParser.PORT - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (mysqlParser.PRECEDES - 436)) | (1 << (mysqlParser.PREPARE - 436)) | (1 << (mysqlParser.PRESERVE - 436)) | (1 << (mysqlParser.PREV - 436)) | (1 << (mysqlParser.PROCESSLIST - 436)) | (1 << (mysqlParser.PROFILE - 436)) | (1 << (mysqlParser.PROFILES - 436)) | (1 << (mysqlParser.PROXY - 436)) | (1 << (mysqlParser.QUERY - 436)) | (1 << (mysqlParser.QUICK - 436)) | (1 << (mysqlParser.REBUILD - 436)) | (1 << (mysqlParser.RECOVER - 436)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (mysqlParser.REDUNDANT - 436)) | (1 << (mysqlParser.RELAY_LOG_FILE - 436)) | (1 << (mysqlParser.RELAY_LOG_POS - 436)) | (1 << (mysqlParser.RELAYLOG - 436)) | (1 << (mysqlParser.REMOVE - 436)) | (1 << (mysqlParser.REORGANIZE - 436)) | (1 << (mysqlParser.REPAIR - 436)) | (1 << (mysqlParser.REPLICATE_DO_DB - 436)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATION - 436)) | (1 << (mysqlParser.RESUME - 436)) | (1 << (mysqlParser.RETURNS - 436)) | (1 << (mysqlParser.ROLLBACK - 436)) | (1 << (mysqlParser.ROLLUP - 436)) | (1 << (mysqlParser.ROTATE - 436)) | (1 << (mysqlParser.ROW - 436)) | (1 << (mysqlParser.ROWS - 436)) | (1 << (mysqlParser.ROW_FORMAT - 436)) | (1 << (mysqlParser.SAVEPOINT - 436)) | (1 << (mysqlParser.SCHEDULE - 436)) | (1 << (mysqlParser.SECURITY - 436)) | (1 << (mysqlParser.SERVER - 436)) | (1 << (mysqlParser.SESSION - 436)) | (1 << (mysqlParser.SHARE - 436)) | (1 << (mysqlParser.SHARED - 436)) | (1 << (mysqlParser.SIGNED - 436)) | (1 << (mysqlParser.SIMPLE - 436)) | (1 << (mysqlParser.SLAVE - 436)) | (1 << (mysqlParser.SNAPSHOT - 436)) | (1 << (mysqlParser.SOCKET - 436)) | (1 << (mysqlParser.SOME - 436)) | (1 << (mysqlParser.SOUNDS - 436)) | (1 << (mysqlParser.SOURCE - 436)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (mysqlParser.SQL_CACHE - 436)) | (1 << (mysqlParser.SQL_NO_CACHE - 436)) | (1 << (mysqlParser.SQL_THREAD - 436)) | (1 << (mysqlParser.START - 436)) | (1 << (mysqlParser.STARTS - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (mysqlParser.STATS_AUTO_RECALC - 500)) | (1 << (mysqlParser.STATS_PERSISTENT - 500)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (mysqlParser.STATUS - 500)) | (1 << (mysqlParser.STOP - 500)) | (1 << (mysqlParser.STORAGE - 500)) | (1 << (mysqlParser.STRING - 500)) | (1 << (mysqlParser.SUBJECT - 500)) | (1 << (mysqlParser.SUBPARTITION - 500)) | (1 << (mysqlParser.SUBPARTITIONS - 500)) | (1 << (mysqlParser.SUSPEND - 500)) | (1 << (mysqlParser.SWAPS - 500)) | (1 << (mysqlParser.SWITCHES - 500)) | (1 << (mysqlParser.TABLESPACE - 500)) | (1 << (mysqlParser.TEMPORARY - 500)) | (1 << (mysqlParser.TEMPTABLE - 500)) | (1 << (mysqlParser.THAN - 500)) | (1 << (mysqlParser.TRANSACTION - 500)) | (1 << (mysqlParser.TRUNCATE - 500)) | (1 << (mysqlParser.UNDEFINED - 500)) | (1 << (mysqlParser.UNDOFILE - 500)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (mysqlParser.UNKNOWN - 500)) | (1 << (mysqlParser.UPGRADE - 500)) | (1 << (mysqlParser.USER - 500)) | (1 << (mysqlParser.VALIDATION - 500)) | (1 << (mysqlParser.VALUE - 500)) | (1 << (mysqlParser.VARIABLES - 500)) | (1 << (mysqlParser.VIEW - 500)) | (1 << (mysqlParser.WAIT - 500)) | (1 << (mysqlParser.WARNINGS - 500)) | (1 << (mysqlParser.WITHOUT - 500)) | (1 << (mysqlParser.WORK - 500)) | (1 << (mysqlParser.WRAPPER - 500)) | (1 << (mysqlParser.X509 - 500)) | (1 << (mysqlParser.XA - 500)) | (1 << (mysqlParser.XML - 500)) | (1 << (mysqlParser.QUARTER - 500)) | (1 << (mysqlParser.MONTH - 500)) | (1 << (mysqlParser.DAY - 500)) | (1 << (mysqlParser.HOUR - 500)) | (1 << (mysqlParser.MINUTE - 500)) | (1 << (mysqlParser.WEEK - 500)) | (1 << (mysqlParser.SECOND - 500)) | (1 << (mysqlParser.MICROSECOND - 500)) | (1 << (mysqlParser.TABLES - 500)) | (1 << (mysqlParser.ROUTINE - 500)) | (1 << (mysqlParser.EXECUTE - 500)) | (1 << (mysqlParser.FILE - 500)) | (1 << (mysqlParser.PROCESS - 500)) | (1 << (mysqlParser.RELOAD - 500)) | (1 << (mysqlParser.SHUTDOWN - 500)) | (1 << (mysqlParser.SUPER - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (mysqlParser.PRIVILEGES - 564)) | (1 << (mysqlParser.ARMSCII8 - 564)) | (1 << (mysqlParser.ASCII - 564)) | (1 << (mysqlParser.BIG5 - 564)) | (1 << (mysqlParser.CP1250 - 564)) | (1 << (mysqlParser.CP1251 - 564)) | (1 << (mysqlParser.CP1256 - 564)) | (1 << (mysqlParser.CP1257 - 564)) | (1 << (mysqlParser.CP850 - 564)) | (1 << (mysqlParser.CP852 - 564)) | (1 << (mysqlParser.CP866 - 564)) | (1 << (mysqlParser.CP932 - 564)) | (1 << (mysqlParser.DEC8 - 564)) | (1 << (mysqlParser.EUCJPMS - 564)) | (1 << (mysqlParser.EUCKR - 564)) | (1 << (mysqlParser.GB2312 - 564)) | (1 << (mysqlParser.GBK - 564)) | (1 << (mysqlParser.GEOSTD8 - 564)) | (1 << (mysqlParser.GREEK - 564)) | (1 << (mysqlParser.HEBREW - 564)) | (1 << (mysqlParser.HP8 - 564)) | (1 << (mysqlParser.KEYBCS2 - 564)) | (1 << (mysqlParser.KOI8R - 564)) | (1 << (mysqlParser.KOI8U - 564)) | (1 << (mysqlParser.LATIN1 - 564)) | (1 << (mysqlParser.LATIN2 - 564)) | (1 << (mysqlParser.LATIN5 - 564)) | (1 << (mysqlParser.LATIN7 - 564)) | (1 << (mysqlParser.MACCE - 564)) | (1 << (mysqlParser.MACROMAN - 564)) | (1 << (mysqlParser.SJIS - 564)) | (1 << (mysqlParser.SWE7 - 564)) | (1 << (mysqlParser.TIS620 - 564)) | (1 << (mysqlParser.UCS2 - 564)) | (1 << (mysqlParser.UJIS - 564)) | (1 << (mysqlParser.UTF16 - 564)) | (1 << (mysqlParser.UTF16LE - 564)) | (1 << (mysqlParser.UTF32 - 564)) | (1 << (mysqlParser.UTF8 - 564)) | (1 << (mysqlParser.UTF8MB3 - 564)) | (1 << (mysqlParser.UTF8MB4 - 564)) | (1 << (mysqlParser.ARCHIVE - 564)) | (1 << (mysqlParser.BLACKHOLE - 564)) | (1 << (mysqlParser.CSV - 564)) | (1 << (mysqlParser.FEDERATED - 564)) | (1 << (mysqlParser.INNODB - 564)) | (1 << (mysqlParser.MEMORY - 564)) | (1 << (mysqlParser.MRG_MYISAM - 564)) | (1 << (mysqlParser.MYISAM - 564)) | (1 << (mysqlParser.NDB - 564)) | (1 << (mysqlParser.NDBCLUSTER - 564)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (mysqlParser.REPEATABLE - 564)) | (1 << (mysqlParser.COMMITTED - 564)) | (1 << (mysqlParser.UNCOMMITTED - 564)) | (1 << (mysqlParser.SERIALIZABLE - 564)) | (1 << (mysqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (mysqlParser.LINESTRING - 564)) | (1 << (mysqlParser.MULTILINESTRING - 564)) | (1 << (mysqlParser.MULTIPOINT - 564)) | (1 << (mysqlParser.MULTIPOLYGON - 564)) | (1 << (mysqlParser.POINT - 564)) | (1 << (mysqlParser.POLYGON - 564)) | (1 << (mysqlParser.ABS - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (mysqlParser.ACOS - 628)) | (1 << (mysqlParser.ADDDATE - 628)) | (1 << (mysqlParser.ADDTIME - 628)) | (1 << (mysqlParser.AES_DECRYPT - 628)) | (1 << (mysqlParser.AES_ENCRYPT - 628)) | (1 << (mysqlParser.AREA - 628)) | (1 << (mysqlParser.ASBINARY - 628)) | (1 << (mysqlParser.ASIN - 628)) | (1 << (mysqlParser.ASTEXT - 628)) | (1 << (mysqlParser.ASWKB - 628)) | (1 << (mysqlParser.ASWKT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (mysqlParser.ATAN - 628)) | (1 << (mysqlParser.ATAN2 - 628)) | (1 << (mysqlParser.BENCHMARK - 628)) | (1 << (mysqlParser.BIN - 628)) | (1 << (mysqlParser.BIT_COUNT - 628)) | (1 << (mysqlParser.BIT_LENGTH - 628)) | (1 << (mysqlParser.BUFFER - 628)) | (1 << (mysqlParser.CEIL - 628)) | (1 << (mysqlParser.CEILING - 628)) | (1 << (mysqlParser.CENTROID - 628)) | (1 << (mysqlParser.CHARACTER_LENGTH - 628)) | (1 << (mysqlParser.CHARSET - 628)) | (1 << (mysqlParser.CHAR_LENGTH - 628)) | (1 << (mysqlParser.COERCIBILITY - 628)) | (1 << (mysqlParser.COLLATION - 628)) | (1 << (mysqlParser.COMPRESS - 628)) | (1 << (mysqlParser.CONCAT - 628)) | (1 << (mysqlParser.CONCAT_WS - 628)) | (1 << (mysqlParser.CONNECTION_ID - 628)) | (1 << (mysqlParser.CONV - 628)) | (1 << (mysqlParser.CONVERT_TZ - 628)) | (1 << (mysqlParser.COS - 628)) | (1 << (mysqlParser.COT - 628)) | (1 << (mysqlParser.CRC32 - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (mysqlParser.CREATE_DIGEST - 628)) | (1 << (mysqlParser.CROSSES - 628)) | (1 << (mysqlParser.DATEDIFF - 628)) | (1 << (mysqlParser.DATE_FORMAT - 628)) | (1 << (mysqlParser.DAYNAME - 628)) | (1 << (mysqlParser.DAYOFMONTH - 628)) | (1 << (mysqlParser.DAYOFWEEK - 628)) | (1 << (mysqlParser.DAYOFYEAR - 628)) | (1 << (mysqlParser.DECODE - 628)) | (1 << (mysqlParser.DEGREES - 628)) | (1 << (mysqlParser.DES_DECRYPT - 628)) | (1 << (mysqlParser.DES_ENCRYPT - 628)) | (1 << (mysqlParser.DIMENSION - 628)) | (1 << (mysqlParser.DISJOINT - 628)) | (1 << (mysqlParser.ELT - 628)) | (1 << (mysqlParser.ENCODE - 628)) | (1 << (mysqlParser.ENCRYPT - 628)) | (1 << (mysqlParser.ENDPOINT - 628)) | (1 << (mysqlParser.ENVELOPE - 628)) | (1 << (mysqlParser.EQUALS - 628)) | (1 << (mysqlParser.EXP - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (mysqlParser.EXPORT_SET - 692)) | (1 << (mysqlParser.EXTERIORRING - 692)) | (1 << (mysqlParser.EXTRACTVALUE - 692)) | (1 << (mysqlParser.FIELD - 692)) | (1 << (mysqlParser.FIND_IN_SET - 692)) | (1 << (mysqlParser.FLOOR - 692)) | (1 << (mysqlParser.FORMAT - 692)) | (1 << (mysqlParser.FOUND_ROWS - 692)) | (1 << (mysqlParser.FROM_BASE64 - 692)) | (1 << (mysqlParser.FROM_DAYS - 692)) | (1 << (mysqlParser.FROM_UNIXTIME - 692)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYN - 692)) | (1 << (mysqlParser.GEOMETRYTYPE - 692)) | (1 << (mysqlParser.GEOMFROMTEXT - 692)) | (1 << (mysqlParser.GEOMFROMWKB - 692)) | (1 << (mysqlParser.GET_FORMAT - 692)) | (1 << (mysqlParser.GET_LOCK - 692)) | (1 << (mysqlParser.GLENGTH - 692)) | (1 << (mysqlParser.GREATEST - 692)) | (1 << (mysqlParser.GTID_SUBSET - 692)) | (1 << (mysqlParser.GTID_SUBTRACT - 692)) | (1 << (mysqlParser.HEX - 692)) | (1 << (mysqlParser.IFNULL - 692)) | (1 << (mysqlParser.INET6_ATON - 692)) | (1 << (mysqlParser.INET6_NTOA - 692)) | (1 << (mysqlParser.INET_ATON - 692)) | (1 << (mysqlParser.INET_NTOA - 692)) | (1 << (mysqlParser.INSTR - 692)) | (1 << (mysqlParser.INTERIORRINGN - 692)) | (1 << (mysqlParser.INTERSECTS - 692)) | (1 << (mysqlParser.ISCLOSED - 692)) | (1 << (mysqlParser.ISEMPTY - 692)) | (1 << (mysqlParser.ISNULL - 692)) | (1 << (mysqlParser.ISSIMPLE - 692)) | (1 << (mysqlParser.IS_FREE_LOCK - 692)) | (1 << (mysqlParser.IS_IPV4 - 692)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 692)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 692)) | (1 << (mysqlParser.IS_IPV6 - 692)) | (1 << (mysqlParser.IS_USED_LOCK - 692)) | (1 << (mysqlParser.LAST_INSERT_ID - 692)) | (1 << (mysqlParser.LCASE - 692)) | (1 << (mysqlParser.LEAST - 692)) | (1 << (mysqlParser.LENGTH - 692)) | (1 << (mysqlParser.LINEFROMTEXT - 692)) | (1 << (mysqlParser.LINEFROMWKB - 692)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 692)) | (1 << (mysqlParser.LN - 692)) | (1 << (mysqlParser.LOAD_FILE - 692)) | (1 << (mysqlParser.LOCATE - 692)) | (1 << (mysqlParser.LOG - 692)) | (1 << (mysqlParser.LOG10 - 692)) | (1 << (mysqlParser.LOG2 - 692)) | (1 << (mysqlParser.LOWER - 692)) | (1 << (mysqlParser.LPAD - 692)) | (1 << (mysqlParser.LTRIM - 692)) | (1 << (mysqlParser.MAKEDATE - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (mysqlParser.MAKETIME - 756)) | (1 << (mysqlParser.MAKE_SET - 756)) | (1 << (mysqlParser.MASTER_POS_WAIT - 756)) | (1 << (mysqlParser.MBRCONTAINS - 756)) | (1 << (mysqlParser.MBRDISJOINT - 756)) | (1 << (mysqlParser.MBREQUAL - 756)) | (1 << (mysqlParser.MBRINTERSECTS - 756)) | (1 << (mysqlParser.MBROVERLAPS - 756)) | (1 << (mysqlParser.MBRTOUCHES - 756)) | (1 << (mysqlParser.MBRWITHIN - 756)) | (1 << (mysqlParser.MD5 - 756)) | (1 << (mysqlParser.MLINEFROMTEXT - 756)) | (1 << (mysqlParser.MLINEFROMWKB - 756)) | (1 << (mysqlParser.MONTHNAME - 756)) | (1 << (mysqlParser.MPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MPOINTFROMWKB - 756)) | (1 << (mysqlParser.MPOLYFROMTEXT - 756)) | (1 << (mysqlParser.MPOLYFROMWKB - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (mysqlParser.NAME_CONST - 756)) | (1 << (mysqlParser.NULLIF - 756)) | (1 << (mysqlParser.NUMGEOMETRIES - 756)) | (1 << (mysqlParser.NUMINTERIORRINGS - 756)) | (1 << (mysqlParser.NUMPOINTS - 756)) | (1 << (mysqlParser.OCT - 756)) | (1 << (mysqlParser.OCTET_LENGTH - 756)) | (1 << (mysqlParser.ORD - 756)) | (1 << (mysqlParser.OVERLAPS - 756)) | (1 << (mysqlParser.PERIOD_ADD - 756)) | (1 << (mysqlParser.PERIOD_DIFF - 756)) | (1 << (mysqlParser.PI - 756)) | (1 << (mysqlParser.POINTFROMTEXT - 756)) | (1 << (mysqlParser.POINTFROMWKB - 756)) | (1 << (mysqlParser.POINTN - 756)) | (1 << (mysqlParser.POLYFROMTEXT - 756)) | (1 << (mysqlParser.POLYFROMWKB - 756)) | (1 << (mysqlParser.POLYGONFROMTEXT - 756)) | (1 << (mysqlParser.POLYGONFROMWKB - 756)) | (1 << (mysqlParser.POW - 756)) | (1 << (mysqlParser.POWER - 756)) | (1 << (mysqlParser.QUOTE - 756)) | (1 << (mysqlParser.RADIANS - 756)) | (1 << (mysqlParser.RAND - 756)) | (1 << (mysqlParser.RANDOM_BYTES - 756)) | (1 << (mysqlParser.RELEASE_LOCK - 756)) | (1 << (mysqlParser.REVERSE - 756)) | (1 << (mysqlParser.ROUND - 756)) | (1 << (mysqlParser.ROW_COUNT - 756)) | (1 << (mysqlParser.RPAD - 756)) | (1 << (mysqlParser.RTRIM - 756)) | (1 << (mysqlParser.SEC_TO_TIME - 756)) | (1 << (mysqlParser.SESSION_USER - 756)) | (1 << (mysqlParser.SHA - 756)) | (1 << (mysqlParser.SHA1 - 756)) | (1 << (mysqlParser.SHA2 - 756)) | (1 << (mysqlParser.SIGN - 756)) | (1 << (mysqlParser.SIN - 756)) | (1 << (mysqlParser.SLEEP - 756)) | (1 << (mysqlParser.SOUNDEX - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (mysqlParser.SQRT - 820)) | (1 << (mysqlParser.SRID - 820)) | (1 << (mysqlParser.STARTPOINT - 820)) | (1 << (mysqlParser.STRCMP - 820)) | (1 << (mysqlParser.STR_TO_DATE - 820)) | (1 << (mysqlParser.ST_AREA - 820)) | (1 << (mysqlParser.ST_ASBINARY - 820)) | (1 << (mysqlParser.ST_ASTEXT - 820)) | (1 << (mysqlParser.ST_ASWKB - 820)) | (1 << (mysqlParser.ST_ASWKT - 820)) | (1 << (mysqlParser.ST_BUFFER - 820)) | (1 << (mysqlParser.ST_CENTROID - 820)) | (1 << (mysqlParser.ST_CONTAINS - 820)) | (1 << (mysqlParser.ST_CROSSES - 820)) | (1 << (mysqlParser.ST_DIFFERENCE - 820)) | (1 << (mysqlParser.ST_DIMENSION - 820)) | (1 << (mysqlParser.ST_DISJOINT - 820)) | (1 << (mysqlParser.ST_DISTANCE - 820)) | (1 << (mysqlParser.ST_ENDPOINT - 820)) | (1 << (mysqlParser.ST_ENVELOPE - 820)) | (1 << (mysqlParser.ST_EQUALS - 820)) | (1 << (mysqlParser.ST_EXTERIORRING - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYN - 820)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 820)) | (1 << (mysqlParser.ST_INTERIORRINGN - 820)) | (1 << (mysqlParser.ST_INTERSECTION - 820)) | (1 << (mysqlParser.ST_INTERSECTS - 820)) | (1 << (mysqlParser.ST_ISCLOSED - 820)) | (1 << (mysqlParser.ST_ISEMPTY - 820)) | (1 << (mysqlParser.ST_ISSIMPLE - 820)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINEFROMWKB - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (mysqlParser.ST_NUMPOINTS - 820)) | (1 << (mysqlParser.ST_OVERLAPS - 820)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 820)) | (1 << (mysqlParser.ST_POINTFROMWKB - 820)) | (1 << (mysqlParser.ST_POINTN - 820)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYFROMWKB - 820)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (mysqlParser.ST_SRID - 820)) | (1 << (mysqlParser.ST_STARTPOINT - 820)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (mysqlParser.ST_TOUCHES - 820)) | (1 << (mysqlParser.ST_UNION - 820)) | (1 << (mysqlParser.ST_WITHIN - 820)) | (1 << (mysqlParser.ST_X - 820)) | (1 << (mysqlParser.ST_Y - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (mysqlParser.SUBDATE - 884)) | (1 << (mysqlParser.SUBSTRING_INDEX - 884)) | (1 << (mysqlParser.SUBTIME - 884)) | (1 << (mysqlParser.SYSTEM_USER - 884)) | (1 << (mysqlParser.TAN - 884)) | (1 << (mysqlParser.TIMEDIFF - 884)) | (1 << (mysqlParser.TIMESTAMPADD - 884)) | (1 << (mysqlParser.TIMESTAMPDIFF - 884)) | (1 << (mysqlParser.TIME_FORMAT - 884)) | (1 << (mysqlParser.TIME_TO_SEC - 884)) | (1 << (mysqlParser.TOUCHES - 884)) | (1 << (mysqlParser.TO_BASE64 - 884)) | (1 << (mysqlParser.TO_DAYS - 884)) | (1 << (mysqlParser.TO_SECONDS - 884)) | (1 << (mysqlParser.UCASE - 884)) | (1 << (mysqlParser.UNCOMPRESS - 884)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (mysqlParser.UNHEX - 884)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 884)) | (1 << (mysqlParser.UPDATEXML - 884)) | (1 << (mysqlParser.UPPER - 884)) | (1 << (mysqlParser.UUID - 884)) | (1 << (mysqlParser.UUID_SHORT - 884)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (mysqlParser.VERSION - 884)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (mysqlParser.WEEKDAY - 884)) | (1 << (mysqlParser.WEEKOFYEAR - 884)) | (1 << (mysqlParser.WEIGHT_STRING - 884)) | (1 << (mysqlParser.WITHIN - 884)) | (1 << (mysqlParser.YEARWEEK - 884)) | (1 << (mysqlParser.Y_FUNCTION - 884)) | (1 << (mysqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 954)) & ~0x3f) == 0 and ((1 << (_la - 954)) & ((1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 954)) | (1 << (mysqlParser.ID - 954)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 954)))) != 0):
                self.state = 3961
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RepeatStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEAT(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.REPEAT)
            else:
                return self.getToken(mysqlParser.REPEAT, i)

        def UNTIL(self):
            return self.getToken(mysqlParser.UNTIL, 0)

        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)


        def END(self):
            return self.getToken(mysqlParser.END, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UidContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UidContext,i)


        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(mysqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_repeatStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeatStatement" ):
                listener.enterRepeatStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeatStatement" ):
                listener.exitRepeatStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRepeatStatement" ):
                return visitor.visitRepeatStatement(self)
            else:
                return visitor.visitChildren(self)




    def repeatStatement(self):

        localctx = mysqlParser.RepeatStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_repeatStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3967
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.LEFT or _la==mysqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (mysqlParser.DATE - 180)) | (1 << (mysqlParser.TIME - 180)) | (1 << (mysqlParser.TIMESTAMP - 180)) | (1 << (mysqlParser.DATETIME - 180)) | (1 << (mysqlParser.YEAR - 180)) | (1 << (mysqlParser.TEXT - 180)) | (1 << (mysqlParser.ENUM - 180)) | (1 << (mysqlParser.COUNT - 180)) | (1 << (mysqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (mysqlParser.ACCOUNT - 244)) | (1 << (mysqlParser.ACTION - 244)) | (1 << (mysqlParser.AFTER - 244)) | (1 << (mysqlParser.AGGREGATE - 244)) | (1 << (mysqlParser.ALGORITHM - 244)) | (1 << (mysqlParser.ANY - 244)) | (1 << (mysqlParser.AT - 244)) | (1 << (mysqlParser.AUTHORS - 244)) | (1 << (mysqlParser.AUTOCOMMIT - 244)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (mysqlParser.AUTO_INCREMENT - 244)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 244)) | (1 << (mysqlParser.BEGIN - 244)) | (1 << (mysqlParser.BINLOG - 244)) | (1 << (mysqlParser.BIT - 244)) | (1 << (mysqlParser.BLOCK - 244)) | (1 << (mysqlParser.BTREE - 244)) | (1 << (mysqlParser.CASCADED - 244)) | (1 << (mysqlParser.CHAIN - 244)) | (1 << (mysqlParser.CHANNEL - 244)) | (1 << (mysqlParser.CHECKSUM - 244)) | (1 << (mysqlParser.CIPHER - 244)) | (1 << (mysqlParser.CLIENT - 244)) | (1 << (mysqlParser.COALESCE - 244)) | (1 << (mysqlParser.CODE - 244)) | (1 << (mysqlParser.COLUMNS - 244)) | (1 << (mysqlParser.COLUMN_FORMAT - 244)) | (1 << (mysqlParser.COMMENT - 244)) | (1 << (mysqlParser.COMMIT - 244)) | (1 << (mysqlParser.COMPACT - 244)) | (1 << (mysqlParser.COMPLETION - 244)) | (1 << (mysqlParser.COMPRESSED - 244)) | (1 << (mysqlParser.COMPRESSION - 244)) | (1 << (mysqlParser.CONCURRENT - 244)) | (1 << (mysqlParser.CONNECTION - 244)) | (1 << (mysqlParser.CONSISTENT - 244)) | (1 << (mysqlParser.CONTAINS - 244)) | (1 << (mysqlParser.CONTEXT - 244)) | (1 << (mysqlParser.CONTRIBUTORS - 244)) | (1 << (mysqlParser.COPY - 244)) | (1 << (mysqlParser.CPU - 244)) | (1 << (mysqlParser.DATA - 244)) | (1 << (mysqlParser.DATAFILE - 244)) | (1 << (mysqlParser.DEALLOCATE - 244)) | (1 << (mysqlParser.DEFAULT_AUTH - 244)) | (1 << (mysqlParser.DEFINER - 244)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 244)) | (1 << (mysqlParser.DIRECTORY - 244)) | (1 << (mysqlParser.DISABLE - 244)) | (1 << (mysqlParser.DISCARD - 244)) | (1 << (mysqlParser.DISK - 244)) | (1 << (mysqlParser.DO - 244)) | (1 << (mysqlParser.DUMPFILE - 244)) | (1 << (mysqlParser.DUPLICATE - 244)) | (1 << (mysqlParser.DYNAMIC - 244)) | (1 << (mysqlParser.ENABLE - 244)) | (1 << (mysqlParser.ENCRYPTION - 244)) | (1 << (mysqlParser.ENDS - 244)) | (1 << (mysqlParser.ENGINE - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (mysqlParser.ENGINES - 308)) | (1 << (mysqlParser.ERROR - 308)) | (1 << (mysqlParser.ERRORS - 308)) | (1 << (mysqlParser.ESCAPE - 308)) | (1 << (mysqlParser.EVEN - 308)) | (1 << (mysqlParser.EVENT - 308)) | (1 << (mysqlParser.EVENTS - 308)) | (1 << (mysqlParser.EVERY - 308)) | (1 << (mysqlParser.EXCHANGE - 308)) | (1 << (mysqlParser.EXCLUSIVE - 308)) | (1 << (mysqlParser.EXPIRE - 308)) | (1 << (mysqlParser.EXTENT_SIZE - 308)) | (1 << (mysqlParser.FAULTS - 308)) | (1 << (mysqlParser.FIELDS - 308)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (mysqlParser.FILTER - 308)) | (1 << (mysqlParser.FIRST - 308)) | (1 << (mysqlParser.FIXED - 308)) | (1 << (mysqlParser.FOLLOWS - 308)) | (1 << (mysqlParser.FULL - 308)) | (1 << (mysqlParser.FUNCTION - 308)) | (1 << (mysqlParser.GLOBAL - 308)) | (1 << (mysqlParser.GRANTS - 308)) | (1 << (mysqlParser.GROUP_REPLICATION - 308)) | (1 << (mysqlParser.HASH - 308)) | (1 << (mysqlParser.HOST - 308)) | (1 << (mysqlParser.IDENTIFIED - 308)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (mysqlParser.IMPORT - 308)) | (1 << (mysqlParser.INDEXES - 308)) | (1 << (mysqlParser.INITIAL_SIZE - 308)) | (1 << (mysqlParser.INPLACE - 308)) | (1 << (mysqlParser.INSERT_METHOD - 308)) | (1 << (mysqlParser.INSTANCE - 308)) | (1 << (mysqlParser.INVOKER - 308)) | (1 << (mysqlParser.IO - 308)) | (1 << (mysqlParser.IO_THREAD - 308)) | (1 << (mysqlParser.IPC - 308)) | (1 << (mysqlParser.ISOLATION - 308)) | (1 << (mysqlParser.ISSUER - 308)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (mysqlParser.LANGUAGE - 308)) | (1 << (mysqlParser.LAST - 308)) | (1 << (mysqlParser.LEAVES - 308)) | (1 << (mysqlParser.LESS - 308)) | (1 << (mysqlParser.LEVEL - 308)) | (1 << (mysqlParser.LIST - 308)) | (1 << (mysqlParser.LOCAL - 308)) | (1 << (mysqlParser.LOGFILE - 308)) | (1 << (mysqlParser.LOGS - 308)) | (1 << (mysqlParser.MASTER - 308)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 308)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (mysqlParser.MASTER_DELAY - 372)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (mysqlParser.MASTER_HOST - 372)) | (1 << (mysqlParser.MASTER_LOG_FILE - 372)) | (1 << (mysqlParser.MASTER_LOG_POS - 372)) | (1 << (mysqlParser.MASTER_PASSWORD - 372)) | (1 << (mysqlParser.MASTER_PORT - 372)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (mysqlParser.MASTER_SSL - 372)) | (1 << (mysqlParser.MASTER_SSL_CA - 372)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_CERT - 372)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (mysqlParser.MASTER_SSL_CRL - 372)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_KEY - 372)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 372)) | (1 << (mysqlParser.MASTER_USER - 372)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_ROWS - 372)) | (1 << (mysqlParser.MAX_SIZE - 372)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (mysqlParser.MERGE - 372)) | (1 << (mysqlParser.MID - 372)) | (1 << (mysqlParser.MIGRATE - 372)) | (1 << (mysqlParser.MIN_ROWS - 372)) | (1 << (mysqlParser.MODIFY - 372)) | (1 << (mysqlParser.MUTEX - 372)) | (1 << (mysqlParser.MYSQL - 372)) | (1 << (mysqlParser.NAME - 372)) | (1 << (mysqlParser.NAMES - 372)) | (1 << (mysqlParser.NCHAR - 372)) | (1 << (mysqlParser.NEVER - 372)) | (1 << (mysqlParser.NO - 372)) | (1 << (mysqlParser.NODEGROUP - 372)) | (1 << (mysqlParser.NONE - 372)) | (1 << (mysqlParser.OFFLINE - 372)) | (1 << (mysqlParser.OFFSET - 372)) | (1 << (mysqlParser.OJ - 372)) | (1 << (mysqlParser.OLD_PASSWORD - 372)) | (1 << (mysqlParser.ONE - 372)) | (1 << (mysqlParser.ONLINE - 372)) | (1 << (mysqlParser.ONLY - 372)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 372)) | (1 << (mysqlParser.OPTIONS - 372)) | (1 << (mysqlParser.OWNER - 372)) | (1 << (mysqlParser.PACK_KEYS - 372)) | (1 << (mysqlParser.PAGE - 372)) | (1 << (mysqlParser.PARSER - 372)) | (1 << (mysqlParser.PARTIAL - 372)) | (1 << (mysqlParser.PARTITIONING - 372)) | (1 << (mysqlParser.PARTITIONS - 372)) | (1 << (mysqlParser.PASSWORD - 372)) | (1 << (mysqlParser.PHASE - 372)) | (1 << (mysqlParser.PLUGIN_DIR - 372)) | (1 << (mysqlParser.PLUGINS - 372)) | (1 << (mysqlParser.PORT - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (mysqlParser.PRECEDES - 436)) | (1 << (mysqlParser.PREPARE - 436)) | (1 << (mysqlParser.PRESERVE - 436)) | (1 << (mysqlParser.PREV - 436)) | (1 << (mysqlParser.PROCESSLIST - 436)) | (1 << (mysqlParser.PROFILE - 436)) | (1 << (mysqlParser.PROFILES - 436)) | (1 << (mysqlParser.PROXY - 436)) | (1 << (mysqlParser.QUERY - 436)) | (1 << (mysqlParser.QUICK - 436)) | (1 << (mysqlParser.REBUILD - 436)) | (1 << (mysqlParser.RECOVER - 436)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (mysqlParser.REDUNDANT - 436)) | (1 << (mysqlParser.RELAY_LOG_FILE - 436)) | (1 << (mysqlParser.RELAY_LOG_POS - 436)) | (1 << (mysqlParser.RELAYLOG - 436)) | (1 << (mysqlParser.REMOVE - 436)) | (1 << (mysqlParser.REORGANIZE - 436)) | (1 << (mysqlParser.REPAIR - 436)) | (1 << (mysqlParser.REPLICATE_DO_DB - 436)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATION - 436)) | (1 << (mysqlParser.RESUME - 436)) | (1 << (mysqlParser.RETURNS - 436)) | (1 << (mysqlParser.ROLLBACK - 436)) | (1 << (mysqlParser.ROLLUP - 436)) | (1 << (mysqlParser.ROTATE - 436)) | (1 << (mysqlParser.ROW - 436)) | (1 << (mysqlParser.ROWS - 436)) | (1 << (mysqlParser.ROW_FORMAT - 436)) | (1 << (mysqlParser.SAVEPOINT - 436)) | (1 << (mysqlParser.SCHEDULE - 436)) | (1 << (mysqlParser.SECURITY - 436)) | (1 << (mysqlParser.SERVER - 436)) | (1 << (mysqlParser.SESSION - 436)) | (1 << (mysqlParser.SHARE - 436)) | (1 << (mysqlParser.SHARED - 436)) | (1 << (mysqlParser.SIGNED - 436)) | (1 << (mysqlParser.SIMPLE - 436)) | (1 << (mysqlParser.SLAVE - 436)) | (1 << (mysqlParser.SNAPSHOT - 436)) | (1 << (mysqlParser.SOCKET - 436)) | (1 << (mysqlParser.SOME - 436)) | (1 << (mysqlParser.SOUNDS - 436)) | (1 << (mysqlParser.SOURCE - 436)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (mysqlParser.SQL_CACHE - 436)) | (1 << (mysqlParser.SQL_NO_CACHE - 436)) | (1 << (mysqlParser.SQL_THREAD - 436)) | (1 << (mysqlParser.START - 436)) | (1 << (mysqlParser.STARTS - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (mysqlParser.STATS_AUTO_RECALC - 500)) | (1 << (mysqlParser.STATS_PERSISTENT - 500)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (mysqlParser.STATUS - 500)) | (1 << (mysqlParser.STOP - 500)) | (1 << (mysqlParser.STORAGE - 500)) | (1 << (mysqlParser.STRING - 500)) | (1 << (mysqlParser.SUBJECT - 500)) | (1 << (mysqlParser.SUBPARTITION - 500)) | (1 << (mysqlParser.SUBPARTITIONS - 500)) | (1 << (mysqlParser.SUSPEND - 500)) | (1 << (mysqlParser.SWAPS - 500)) | (1 << (mysqlParser.SWITCHES - 500)) | (1 << (mysqlParser.TABLESPACE - 500)) | (1 << (mysqlParser.TEMPORARY - 500)) | (1 << (mysqlParser.TEMPTABLE - 500)) | (1 << (mysqlParser.THAN - 500)) | (1 << (mysqlParser.TRANSACTION - 500)) | (1 << (mysqlParser.TRUNCATE - 500)) | (1 << (mysqlParser.UNDEFINED - 500)) | (1 << (mysqlParser.UNDOFILE - 500)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (mysqlParser.UNKNOWN - 500)) | (1 << (mysqlParser.UPGRADE - 500)) | (1 << (mysqlParser.USER - 500)) | (1 << (mysqlParser.VALIDATION - 500)) | (1 << (mysqlParser.VALUE - 500)) | (1 << (mysqlParser.VARIABLES - 500)) | (1 << (mysqlParser.VIEW - 500)) | (1 << (mysqlParser.WAIT - 500)) | (1 << (mysqlParser.WARNINGS - 500)) | (1 << (mysqlParser.WITHOUT - 500)) | (1 << (mysqlParser.WORK - 500)) | (1 << (mysqlParser.WRAPPER - 500)) | (1 << (mysqlParser.X509 - 500)) | (1 << (mysqlParser.XA - 500)) | (1 << (mysqlParser.XML - 500)) | (1 << (mysqlParser.QUARTER - 500)) | (1 << (mysqlParser.MONTH - 500)) | (1 << (mysqlParser.DAY - 500)) | (1 << (mysqlParser.HOUR - 500)) | (1 << (mysqlParser.MINUTE - 500)) | (1 << (mysqlParser.WEEK - 500)) | (1 << (mysqlParser.SECOND - 500)) | (1 << (mysqlParser.MICROSECOND - 500)) | (1 << (mysqlParser.TABLES - 500)) | (1 << (mysqlParser.ROUTINE - 500)) | (1 << (mysqlParser.EXECUTE - 500)) | (1 << (mysqlParser.FILE - 500)) | (1 << (mysqlParser.PROCESS - 500)) | (1 << (mysqlParser.RELOAD - 500)) | (1 << (mysqlParser.SHUTDOWN - 500)) | (1 << (mysqlParser.SUPER - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (mysqlParser.PRIVILEGES - 564)) | (1 << (mysqlParser.ARMSCII8 - 564)) | (1 << (mysqlParser.ASCII - 564)) | (1 << (mysqlParser.BIG5 - 564)) | (1 << (mysqlParser.CP1250 - 564)) | (1 << (mysqlParser.CP1251 - 564)) | (1 << (mysqlParser.CP1256 - 564)) | (1 << (mysqlParser.CP1257 - 564)) | (1 << (mysqlParser.CP850 - 564)) | (1 << (mysqlParser.CP852 - 564)) | (1 << (mysqlParser.CP866 - 564)) | (1 << (mysqlParser.CP932 - 564)) | (1 << (mysqlParser.DEC8 - 564)) | (1 << (mysqlParser.EUCJPMS - 564)) | (1 << (mysqlParser.EUCKR - 564)) | (1 << (mysqlParser.GB2312 - 564)) | (1 << (mysqlParser.GBK - 564)) | (1 << (mysqlParser.GEOSTD8 - 564)) | (1 << (mysqlParser.GREEK - 564)) | (1 << (mysqlParser.HEBREW - 564)) | (1 << (mysqlParser.HP8 - 564)) | (1 << (mysqlParser.KEYBCS2 - 564)) | (1 << (mysqlParser.KOI8R - 564)) | (1 << (mysqlParser.KOI8U - 564)) | (1 << (mysqlParser.LATIN1 - 564)) | (1 << (mysqlParser.LATIN2 - 564)) | (1 << (mysqlParser.LATIN5 - 564)) | (1 << (mysqlParser.LATIN7 - 564)) | (1 << (mysqlParser.MACCE - 564)) | (1 << (mysqlParser.MACROMAN - 564)) | (1 << (mysqlParser.SJIS - 564)) | (1 << (mysqlParser.SWE7 - 564)) | (1 << (mysqlParser.TIS620 - 564)) | (1 << (mysqlParser.UCS2 - 564)) | (1 << (mysqlParser.UJIS - 564)) | (1 << (mysqlParser.UTF16 - 564)) | (1 << (mysqlParser.UTF16LE - 564)) | (1 << (mysqlParser.UTF32 - 564)) | (1 << (mysqlParser.UTF8 - 564)) | (1 << (mysqlParser.UTF8MB3 - 564)) | (1 << (mysqlParser.UTF8MB4 - 564)) | (1 << (mysqlParser.ARCHIVE - 564)) | (1 << (mysqlParser.BLACKHOLE - 564)) | (1 << (mysqlParser.CSV - 564)) | (1 << (mysqlParser.FEDERATED - 564)) | (1 << (mysqlParser.INNODB - 564)) | (1 << (mysqlParser.MEMORY - 564)) | (1 << (mysqlParser.MRG_MYISAM - 564)) | (1 << (mysqlParser.MYISAM - 564)) | (1 << (mysqlParser.NDB - 564)) | (1 << (mysqlParser.NDBCLUSTER - 564)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (mysqlParser.REPEATABLE - 564)) | (1 << (mysqlParser.COMMITTED - 564)) | (1 << (mysqlParser.UNCOMMITTED - 564)) | (1 << (mysqlParser.SERIALIZABLE - 564)) | (1 << (mysqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (mysqlParser.LINESTRING - 564)) | (1 << (mysqlParser.MULTILINESTRING - 564)) | (1 << (mysqlParser.MULTIPOINT - 564)) | (1 << (mysqlParser.MULTIPOLYGON - 564)) | (1 << (mysqlParser.POINT - 564)) | (1 << (mysqlParser.POLYGON - 564)) | (1 << (mysqlParser.ABS - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (mysqlParser.ACOS - 628)) | (1 << (mysqlParser.ADDDATE - 628)) | (1 << (mysqlParser.ADDTIME - 628)) | (1 << (mysqlParser.AES_DECRYPT - 628)) | (1 << (mysqlParser.AES_ENCRYPT - 628)) | (1 << (mysqlParser.AREA - 628)) | (1 << (mysqlParser.ASBINARY - 628)) | (1 << (mysqlParser.ASIN - 628)) | (1 << (mysqlParser.ASTEXT - 628)) | (1 << (mysqlParser.ASWKB - 628)) | (1 << (mysqlParser.ASWKT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (mysqlParser.ATAN - 628)) | (1 << (mysqlParser.ATAN2 - 628)) | (1 << (mysqlParser.BENCHMARK - 628)) | (1 << (mysqlParser.BIN - 628)) | (1 << (mysqlParser.BIT_COUNT - 628)) | (1 << (mysqlParser.BIT_LENGTH - 628)) | (1 << (mysqlParser.BUFFER - 628)) | (1 << (mysqlParser.CEIL - 628)) | (1 << (mysqlParser.CEILING - 628)) | (1 << (mysqlParser.CENTROID - 628)) | (1 << (mysqlParser.CHARACTER_LENGTH - 628)) | (1 << (mysqlParser.CHARSET - 628)) | (1 << (mysqlParser.CHAR_LENGTH - 628)) | (1 << (mysqlParser.COERCIBILITY - 628)) | (1 << (mysqlParser.COLLATION - 628)) | (1 << (mysqlParser.COMPRESS - 628)) | (1 << (mysqlParser.CONCAT - 628)) | (1 << (mysqlParser.CONCAT_WS - 628)) | (1 << (mysqlParser.CONNECTION_ID - 628)) | (1 << (mysqlParser.CONV - 628)) | (1 << (mysqlParser.CONVERT_TZ - 628)) | (1 << (mysqlParser.COS - 628)) | (1 << (mysqlParser.COT - 628)) | (1 << (mysqlParser.CRC32 - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (mysqlParser.CREATE_DIGEST - 628)) | (1 << (mysqlParser.CROSSES - 628)) | (1 << (mysqlParser.DATEDIFF - 628)) | (1 << (mysqlParser.DATE_FORMAT - 628)) | (1 << (mysqlParser.DAYNAME - 628)) | (1 << (mysqlParser.DAYOFMONTH - 628)) | (1 << (mysqlParser.DAYOFWEEK - 628)) | (1 << (mysqlParser.DAYOFYEAR - 628)) | (1 << (mysqlParser.DECODE - 628)) | (1 << (mysqlParser.DEGREES - 628)) | (1 << (mysqlParser.DES_DECRYPT - 628)) | (1 << (mysqlParser.DES_ENCRYPT - 628)) | (1 << (mysqlParser.DIMENSION - 628)) | (1 << (mysqlParser.DISJOINT - 628)) | (1 << (mysqlParser.ELT - 628)) | (1 << (mysqlParser.ENCODE - 628)) | (1 << (mysqlParser.ENCRYPT - 628)) | (1 << (mysqlParser.ENDPOINT - 628)) | (1 << (mysqlParser.ENVELOPE - 628)) | (1 << (mysqlParser.EQUALS - 628)) | (1 << (mysqlParser.EXP - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (mysqlParser.EXPORT_SET - 692)) | (1 << (mysqlParser.EXTERIORRING - 692)) | (1 << (mysqlParser.EXTRACTVALUE - 692)) | (1 << (mysqlParser.FIELD - 692)) | (1 << (mysqlParser.FIND_IN_SET - 692)) | (1 << (mysqlParser.FLOOR - 692)) | (1 << (mysqlParser.FORMAT - 692)) | (1 << (mysqlParser.FOUND_ROWS - 692)) | (1 << (mysqlParser.FROM_BASE64 - 692)) | (1 << (mysqlParser.FROM_DAYS - 692)) | (1 << (mysqlParser.FROM_UNIXTIME - 692)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYN - 692)) | (1 << (mysqlParser.GEOMETRYTYPE - 692)) | (1 << (mysqlParser.GEOMFROMTEXT - 692)) | (1 << (mysqlParser.GEOMFROMWKB - 692)) | (1 << (mysqlParser.GET_FORMAT - 692)) | (1 << (mysqlParser.GET_LOCK - 692)) | (1 << (mysqlParser.GLENGTH - 692)) | (1 << (mysqlParser.GREATEST - 692)) | (1 << (mysqlParser.GTID_SUBSET - 692)) | (1 << (mysqlParser.GTID_SUBTRACT - 692)) | (1 << (mysqlParser.HEX - 692)) | (1 << (mysqlParser.IFNULL - 692)) | (1 << (mysqlParser.INET6_ATON - 692)) | (1 << (mysqlParser.INET6_NTOA - 692)) | (1 << (mysqlParser.INET_ATON - 692)) | (1 << (mysqlParser.INET_NTOA - 692)) | (1 << (mysqlParser.INSTR - 692)) | (1 << (mysqlParser.INTERIORRINGN - 692)) | (1 << (mysqlParser.INTERSECTS - 692)) | (1 << (mysqlParser.ISCLOSED - 692)) | (1 << (mysqlParser.ISEMPTY - 692)) | (1 << (mysqlParser.ISNULL - 692)) | (1 << (mysqlParser.ISSIMPLE - 692)) | (1 << (mysqlParser.IS_FREE_LOCK - 692)) | (1 << (mysqlParser.IS_IPV4 - 692)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 692)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 692)) | (1 << (mysqlParser.IS_IPV6 - 692)) | (1 << (mysqlParser.IS_USED_LOCK - 692)) | (1 << (mysqlParser.LAST_INSERT_ID - 692)) | (1 << (mysqlParser.LCASE - 692)) | (1 << (mysqlParser.LEAST - 692)) | (1 << (mysqlParser.LENGTH - 692)) | (1 << (mysqlParser.LINEFROMTEXT - 692)) | (1 << (mysqlParser.LINEFROMWKB - 692)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 692)) | (1 << (mysqlParser.LN - 692)) | (1 << (mysqlParser.LOAD_FILE - 692)) | (1 << (mysqlParser.LOCATE - 692)) | (1 << (mysqlParser.LOG - 692)) | (1 << (mysqlParser.LOG10 - 692)) | (1 << (mysqlParser.LOG2 - 692)) | (1 << (mysqlParser.LOWER - 692)) | (1 << (mysqlParser.LPAD - 692)) | (1 << (mysqlParser.LTRIM - 692)) | (1 << (mysqlParser.MAKEDATE - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (mysqlParser.MAKETIME - 756)) | (1 << (mysqlParser.MAKE_SET - 756)) | (1 << (mysqlParser.MASTER_POS_WAIT - 756)) | (1 << (mysqlParser.MBRCONTAINS - 756)) | (1 << (mysqlParser.MBRDISJOINT - 756)) | (1 << (mysqlParser.MBREQUAL - 756)) | (1 << (mysqlParser.MBRINTERSECTS - 756)) | (1 << (mysqlParser.MBROVERLAPS - 756)) | (1 << (mysqlParser.MBRTOUCHES - 756)) | (1 << (mysqlParser.MBRWITHIN - 756)) | (1 << (mysqlParser.MD5 - 756)) | (1 << (mysqlParser.MLINEFROMTEXT - 756)) | (1 << (mysqlParser.MLINEFROMWKB - 756)) | (1 << (mysqlParser.MONTHNAME - 756)) | (1 << (mysqlParser.MPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MPOINTFROMWKB - 756)) | (1 << (mysqlParser.MPOLYFROMTEXT - 756)) | (1 << (mysqlParser.MPOLYFROMWKB - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (mysqlParser.NAME_CONST - 756)) | (1 << (mysqlParser.NULLIF - 756)) | (1 << (mysqlParser.NUMGEOMETRIES - 756)) | (1 << (mysqlParser.NUMINTERIORRINGS - 756)) | (1 << (mysqlParser.NUMPOINTS - 756)) | (1 << (mysqlParser.OCT - 756)) | (1 << (mysqlParser.OCTET_LENGTH - 756)) | (1 << (mysqlParser.ORD - 756)) | (1 << (mysqlParser.OVERLAPS - 756)) | (1 << (mysqlParser.PERIOD_ADD - 756)) | (1 << (mysqlParser.PERIOD_DIFF - 756)) | (1 << (mysqlParser.PI - 756)) | (1 << (mysqlParser.POINTFROMTEXT - 756)) | (1 << (mysqlParser.POINTFROMWKB - 756)) | (1 << (mysqlParser.POINTN - 756)) | (1 << (mysqlParser.POLYFROMTEXT - 756)) | (1 << (mysqlParser.POLYFROMWKB - 756)) | (1 << (mysqlParser.POLYGONFROMTEXT - 756)) | (1 << (mysqlParser.POLYGONFROMWKB - 756)) | (1 << (mysqlParser.POW - 756)) | (1 << (mysqlParser.POWER - 756)) | (1 << (mysqlParser.QUOTE - 756)) | (1 << (mysqlParser.RADIANS - 756)) | (1 << (mysqlParser.RAND - 756)) | (1 << (mysqlParser.RANDOM_BYTES - 756)) | (1 << (mysqlParser.RELEASE_LOCK - 756)) | (1 << (mysqlParser.REVERSE - 756)) | (1 << (mysqlParser.ROUND - 756)) | (1 << (mysqlParser.ROW_COUNT - 756)) | (1 << (mysqlParser.RPAD - 756)) | (1 << (mysqlParser.RTRIM - 756)) | (1 << (mysqlParser.SEC_TO_TIME - 756)) | (1 << (mysqlParser.SESSION_USER - 756)) | (1 << (mysqlParser.SHA - 756)) | (1 << (mysqlParser.SHA1 - 756)) | (1 << (mysqlParser.SHA2 - 756)) | (1 << (mysqlParser.SIGN - 756)) | (1 << (mysqlParser.SIN - 756)) | (1 << (mysqlParser.SLEEP - 756)) | (1 << (mysqlParser.SOUNDEX - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (mysqlParser.SQRT - 820)) | (1 << (mysqlParser.SRID - 820)) | (1 << (mysqlParser.STARTPOINT - 820)) | (1 << (mysqlParser.STRCMP - 820)) | (1 << (mysqlParser.STR_TO_DATE - 820)) | (1 << (mysqlParser.ST_AREA - 820)) | (1 << (mysqlParser.ST_ASBINARY - 820)) | (1 << (mysqlParser.ST_ASTEXT - 820)) | (1 << (mysqlParser.ST_ASWKB - 820)) | (1 << (mysqlParser.ST_ASWKT - 820)) | (1 << (mysqlParser.ST_BUFFER - 820)) | (1 << (mysqlParser.ST_CENTROID - 820)) | (1 << (mysqlParser.ST_CONTAINS - 820)) | (1 << (mysqlParser.ST_CROSSES - 820)) | (1 << (mysqlParser.ST_DIFFERENCE - 820)) | (1 << (mysqlParser.ST_DIMENSION - 820)) | (1 << (mysqlParser.ST_DISJOINT - 820)) | (1 << (mysqlParser.ST_DISTANCE - 820)) | (1 << (mysqlParser.ST_ENDPOINT - 820)) | (1 << (mysqlParser.ST_ENVELOPE - 820)) | (1 << (mysqlParser.ST_EQUALS - 820)) | (1 << (mysqlParser.ST_EXTERIORRING - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYN - 820)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 820)) | (1 << (mysqlParser.ST_INTERIORRINGN - 820)) | (1 << (mysqlParser.ST_INTERSECTION - 820)) | (1 << (mysqlParser.ST_INTERSECTS - 820)) | (1 << (mysqlParser.ST_ISCLOSED - 820)) | (1 << (mysqlParser.ST_ISEMPTY - 820)) | (1 << (mysqlParser.ST_ISSIMPLE - 820)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINEFROMWKB - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (mysqlParser.ST_NUMPOINTS - 820)) | (1 << (mysqlParser.ST_OVERLAPS - 820)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 820)) | (1 << (mysqlParser.ST_POINTFROMWKB - 820)) | (1 << (mysqlParser.ST_POINTN - 820)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYFROMWKB - 820)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (mysqlParser.ST_SRID - 820)) | (1 << (mysqlParser.ST_STARTPOINT - 820)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (mysqlParser.ST_TOUCHES - 820)) | (1 << (mysqlParser.ST_UNION - 820)) | (1 << (mysqlParser.ST_WITHIN - 820)) | (1 << (mysqlParser.ST_X - 820)) | (1 << (mysqlParser.ST_Y - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (mysqlParser.SUBDATE - 884)) | (1 << (mysqlParser.SUBSTRING_INDEX - 884)) | (1 << (mysqlParser.SUBTIME - 884)) | (1 << (mysqlParser.SYSTEM_USER - 884)) | (1 << (mysqlParser.TAN - 884)) | (1 << (mysqlParser.TIMEDIFF - 884)) | (1 << (mysqlParser.TIMESTAMPADD - 884)) | (1 << (mysqlParser.TIMESTAMPDIFF - 884)) | (1 << (mysqlParser.TIME_FORMAT - 884)) | (1 << (mysqlParser.TIME_TO_SEC - 884)) | (1 << (mysqlParser.TOUCHES - 884)) | (1 << (mysqlParser.TO_BASE64 - 884)) | (1 << (mysqlParser.TO_DAYS - 884)) | (1 << (mysqlParser.TO_SECONDS - 884)) | (1 << (mysqlParser.UCASE - 884)) | (1 << (mysqlParser.UNCOMPRESS - 884)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (mysqlParser.UNHEX - 884)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 884)) | (1 << (mysqlParser.UPDATEXML - 884)) | (1 << (mysqlParser.UPPER - 884)) | (1 << (mysqlParser.UUID - 884)) | (1 << (mysqlParser.UUID_SHORT - 884)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (mysqlParser.VERSION - 884)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (mysqlParser.WEEKDAY - 884)) | (1 << (mysqlParser.WEEKOFYEAR - 884)) | (1 << (mysqlParser.WEIGHT_STRING - 884)) | (1 << (mysqlParser.WITHIN - 884)) | (1 << (mysqlParser.YEARWEEK - 884)) | (1 << (mysqlParser.Y_FUNCTION - 884)) | (1 << (mysqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 954)) & ~0x3f) == 0 and ((1 << (_la - 954)) & ((1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 954)) | (1 << (mysqlParser.ID - 954)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 954)))) != 0):
                self.state = 3964
                self.uid()
                self.state = 3965
                self.match(mysqlParser.COLON_SYMB)


            self.state = 3969
            self.match(mysqlParser.REPEAT)
            self.state = 3971 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3970
                self.procedureSqlStatement()
                self.state = 3973 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 7)) & ~0x3f) == 0 and ((1 << (_la - 7)) & ((1 << (mysqlParser.ALTER - 7)) | (1 << (mysqlParser.ANALYZE - 7)) | (1 << (mysqlParser.CALL - 7)) | (1 << (mysqlParser.CASE - 7)) | (1 << (mysqlParser.CHANGE - 7)) | (1 << (mysqlParser.CHECK - 7)) | (1 << (mysqlParser.CREATE - 7)) | (1 << (mysqlParser.DELETE - 7)) | (1 << (mysqlParser.DESC - 7)) | (1 << (mysqlParser.DESCRIBE - 7)) | (1 << (mysqlParser.DROP - 7)) | (1 << (mysqlParser.EXPLAIN - 7)) | (1 << (mysqlParser.FETCH - 7)) | (1 << (mysqlParser.GRANT - 7)) | (1 << (mysqlParser.IF - 7)))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (mysqlParser.INSERT - 71)) | (1 << (mysqlParser.ITERATE - 71)) | (1 << (mysqlParser.KILL - 71)) | (1 << (mysqlParser.LEAVE - 71)) | (1 << (mysqlParser.LEFT - 71)) | (1 << (mysqlParser.LOAD - 71)) | (1 << (mysqlParser.LOCK - 71)) | (1 << (mysqlParser.LOOP - 71)) | (1 << (mysqlParser.OPTIMIZE - 71)) | (1 << (mysqlParser.PURGE - 71)) | (1 << (mysqlParser.RELEASE - 71)) | (1 << (mysqlParser.RENAME - 71)) | (1 << (mysqlParser.REPEAT - 71)) | (1 << (mysqlParser.REPLACE - 71)) | (1 << (mysqlParser.RETURN - 71)) | (1 << (mysqlParser.REVOKE - 71)) | (1 << (mysqlParser.RIGHT - 71)) | (1 << (mysqlParser.SELECT - 71)) | (1 << (mysqlParser.SET - 71)) | (1 << (mysqlParser.SHOW - 71)))) != 0) or ((((_la - 155)) & ~0x3f) == 0 and ((1 << (_la - 155)) & ((1 << (mysqlParser.UNLOCK - 155)) | (1 << (mysqlParser.UPDATE - 155)) | (1 << (mysqlParser.USE - 155)) | (1 << (mysqlParser.WHILE - 155)) | (1 << (mysqlParser.DATE - 155)) | (1 << (mysqlParser.TIME - 155)) | (1 << (mysqlParser.TIMESTAMP - 155)) | (1 << (mysqlParser.DATETIME - 155)) | (1 << (mysqlParser.YEAR - 155)) | (1 << (mysqlParser.TEXT - 155)) | (1 << (mysqlParser.ENUM - 155)) | (1 << (mysqlParser.COUNT - 155)))) != 0) or ((((_la - 236)) & ~0x3f) == 0 and ((1 << (_la - 236)) & ((1 << (mysqlParser.POSITION - 236)) | (1 << (mysqlParser.ACCOUNT - 236)) | (1 << (mysqlParser.ACTION - 236)) | (1 << (mysqlParser.AFTER - 236)) | (1 << (mysqlParser.AGGREGATE - 236)) | (1 << (mysqlParser.ALGORITHM - 236)) | (1 << (mysqlParser.ANY - 236)) | (1 << (mysqlParser.AT - 236)) | (1 << (mysqlParser.AUTHORS - 236)) | (1 << (mysqlParser.AUTOCOMMIT - 236)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 236)) | (1 << (mysqlParser.AUTO_INCREMENT - 236)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 236)) | (1 << (mysqlParser.BEGIN - 236)) | (1 << (mysqlParser.BINLOG - 236)) | (1 << (mysqlParser.BIT - 236)) | (1 << (mysqlParser.BLOCK - 236)) | (1 << (mysqlParser.BTREE - 236)) | (1 << (mysqlParser.CACHE - 236)) | (1 << (mysqlParser.CASCADED - 236)) | (1 << (mysqlParser.CHAIN - 236)) | (1 << (mysqlParser.CHANNEL - 236)) | (1 << (mysqlParser.CHECKSUM - 236)) | (1 << (mysqlParser.CIPHER - 236)) | (1 << (mysqlParser.CLIENT - 236)) | (1 << (mysqlParser.CLOSE - 236)) | (1 << (mysqlParser.COALESCE - 236)) | (1 << (mysqlParser.CODE - 236)) | (1 << (mysqlParser.COLUMNS - 236)) | (1 << (mysqlParser.COLUMN_FORMAT - 236)) | (1 << (mysqlParser.COMMENT - 236)) | (1 << (mysqlParser.COMMIT - 236)) | (1 << (mysqlParser.COMPACT - 236)) | (1 << (mysqlParser.COMPLETION - 236)) | (1 << (mysqlParser.COMPRESSED - 236)) | (1 << (mysqlParser.COMPRESSION - 236)) | (1 << (mysqlParser.CONCURRENT - 236)) | (1 << (mysqlParser.CONNECTION - 236)) | (1 << (mysqlParser.CONSISTENT - 236)) | (1 << (mysqlParser.CONTAINS - 236)) | (1 << (mysqlParser.CONTEXT - 236)) | (1 << (mysqlParser.CONTRIBUTORS - 236)) | (1 << (mysqlParser.COPY - 236)) | (1 << (mysqlParser.CPU - 236)) | (1 << (mysqlParser.DATA - 236)) | (1 << (mysqlParser.DATAFILE - 236)) | (1 << (mysqlParser.DEALLOCATE - 236)) | (1 << (mysqlParser.DEFAULT_AUTH - 236)) | (1 << (mysqlParser.DEFINER - 236)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 236)) | (1 << (mysqlParser.DIRECTORY - 236)) | (1 << (mysqlParser.DISABLE - 236)) | (1 << (mysqlParser.DISCARD - 236)) | (1 << (mysqlParser.DISK - 236)) | (1 << (mysqlParser.DO - 236)))) != 0) or ((((_la - 300)) & ~0x3f) == 0 and ((1 << (_la - 300)) & ((1 << (mysqlParser.DUMPFILE - 300)) | (1 << (mysqlParser.DUPLICATE - 300)) | (1 << (mysqlParser.DYNAMIC - 300)) | (1 << (mysqlParser.ENABLE - 300)) | (1 << (mysqlParser.ENCRYPTION - 300)) | (1 << (mysqlParser.ENDS - 300)) | (1 << (mysqlParser.ENGINE - 300)) | (1 << (mysqlParser.ENGINES - 300)) | (1 << (mysqlParser.ERROR - 300)) | (1 << (mysqlParser.ERRORS - 300)) | (1 << (mysqlParser.ESCAPE - 300)) | (1 << (mysqlParser.EVEN - 300)) | (1 << (mysqlParser.EVENT - 300)) | (1 << (mysqlParser.EVENTS - 300)) | (1 << (mysqlParser.EVERY - 300)) | (1 << (mysqlParser.EXCHANGE - 300)) | (1 << (mysqlParser.EXCLUSIVE - 300)) | (1 << (mysqlParser.EXPIRE - 300)) | (1 << (mysqlParser.EXTENT_SIZE - 300)) | (1 << (mysqlParser.FAULTS - 300)) | (1 << (mysqlParser.FIELDS - 300)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 300)) | (1 << (mysqlParser.FILTER - 300)) | (1 << (mysqlParser.FIRST - 300)) | (1 << (mysqlParser.FIXED - 300)) | (1 << (mysqlParser.FLUSH - 300)) | (1 << (mysqlParser.FOLLOWS - 300)) | (1 << (mysqlParser.FULL - 300)) | (1 << (mysqlParser.FUNCTION - 300)) | (1 << (mysqlParser.GLOBAL - 300)) | (1 << (mysqlParser.GRANTS - 300)) | (1 << (mysqlParser.GROUP_REPLICATION - 300)) | (1 << (mysqlParser.HANDLER - 300)) | (1 << (mysqlParser.HASH - 300)) | (1 << (mysqlParser.HELP - 300)) | (1 << (mysqlParser.HOST - 300)) | (1 << (mysqlParser.IDENTIFIED - 300)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 300)) | (1 << (mysqlParser.IMPORT - 300)) | (1 << (mysqlParser.INDEXES - 300)) | (1 << (mysqlParser.INITIAL_SIZE - 300)) | (1 << (mysqlParser.INPLACE - 300)) | (1 << (mysqlParser.INSERT_METHOD - 300)) | (1 << (mysqlParser.INSTALL - 300)) | (1 << (mysqlParser.INSTANCE - 300)) | (1 << (mysqlParser.INVOKER - 300)) | (1 << (mysqlParser.IO - 300)) | (1 << (mysqlParser.IO_THREAD - 300)) | (1 << (mysqlParser.IPC - 300)) | (1 << (mysqlParser.ISOLATION - 300)) | (1 << (mysqlParser.ISSUER - 300)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 300)) | (1 << (mysqlParser.LANGUAGE - 300)) | (1 << (mysqlParser.LAST - 300)) | (1 << (mysqlParser.LEAVES - 300)) | (1 << (mysqlParser.LESS - 300)))) != 0) or ((((_la - 364)) & ~0x3f) == 0 and ((1 << (_la - 364)) & ((1 << (mysqlParser.LEVEL - 364)) | (1 << (mysqlParser.LIST - 364)) | (1 << (mysqlParser.LOCAL - 364)) | (1 << (mysqlParser.LOGFILE - 364)) | (1 << (mysqlParser.LOGS - 364)) | (1 << (mysqlParser.MASTER - 364)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 364)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 364)) | (1 << (mysqlParser.MASTER_DELAY - 364)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 364)) | (1 << (mysqlParser.MASTER_HOST - 364)) | (1 << (mysqlParser.MASTER_LOG_FILE - 364)) | (1 << (mysqlParser.MASTER_LOG_POS - 364)) | (1 << (mysqlParser.MASTER_PASSWORD - 364)) | (1 << (mysqlParser.MASTER_PORT - 364)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 364)) | (1 << (mysqlParser.MASTER_SSL - 364)) | (1 << (mysqlParser.MASTER_SSL_CA - 364)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 364)) | (1 << (mysqlParser.MASTER_SSL_CERT - 364)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 364)) | (1 << (mysqlParser.MASTER_SSL_CRL - 364)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 364)) | (1 << (mysqlParser.MASTER_SSL_KEY - 364)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 364)) | (1 << (mysqlParser.MASTER_USER - 364)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 364)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 364)) | (1 << (mysqlParser.MAX_ROWS - 364)) | (1 << (mysqlParser.MAX_SIZE - 364)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 364)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 364)) | (1 << (mysqlParser.MERGE - 364)) | (1 << (mysqlParser.MID - 364)) | (1 << (mysqlParser.MIGRATE - 364)) | (1 << (mysqlParser.MIN_ROWS - 364)) | (1 << (mysqlParser.MODIFY - 364)) | (1 << (mysqlParser.MUTEX - 364)) | (1 << (mysqlParser.MYSQL - 364)) | (1 << (mysqlParser.NAME - 364)) | (1 << (mysqlParser.NAMES - 364)) | (1 << (mysqlParser.NCHAR - 364)) | (1 << (mysqlParser.NEVER - 364)) | (1 << (mysqlParser.NO - 364)) | (1 << (mysqlParser.NODEGROUP - 364)) | (1 << (mysqlParser.NONE - 364)) | (1 << (mysqlParser.OFFLINE - 364)) | (1 << (mysqlParser.OFFSET - 364)) | (1 << (mysqlParser.OJ - 364)) | (1 << (mysqlParser.OLD_PASSWORD - 364)) | (1 << (mysqlParser.ONE - 364)) | (1 << (mysqlParser.ONLINE - 364)) | (1 << (mysqlParser.ONLY - 364)) | (1 << (mysqlParser.OPEN - 364)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 364)) | (1 << (mysqlParser.OPTIONS - 364)) | (1 << (mysqlParser.OWNER - 364)) | (1 << (mysqlParser.PACK_KEYS - 364)) | (1 << (mysqlParser.PAGE - 364)) | (1 << (mysqlParser.PARSER - 364)) | (1 << (mysqlParser.PARTIAL - 364)))) != 0) or ((((_la - 428)) & ~0x3f) == 0 and ((1 << (_la - 428)) & ((1 << (mysqlParser.PARTITIONING - 428)) | (1 << (mysqlParser.PARTITIONS - 428)) | (1 << (mysqlParser.PASSWORD - 428)) | (1 << (mysqlParser.PHASE - 428)) | (1 << (mysqlParser.PLUGIN_DIR - 428)) | (1 << (mysqlParser.PLUGINS - 428)) | (1 << (mysqlParser.PORT - 428)) | (1 << (mysqlParser.PRECEDES - 428)) | (1 << (mysqlParser.PREPARE - 428)) | (1 << (mysqlParser.PRESERVE - 428)) | (1 << (mysqlParser.PREV - 428)) | (1 << (mysqlParser.PROCESSLIST - 428)) | (1 << (mysqlParser.PROFILE - 428)) | (1 << (mysqlParser.PROFILES - 428)) | (1 << (mysqlParser.PROXY - 428)) | (1 << (mysqlParser.QUERY - 428)) | (1 << (mysqlParser.QUICK - 428)) | (1 << (mysqlParser.REBUILD - 428)) | (1 << (mysqlParser.RECOVER - 428)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 428)) | (1 << (mysqlParser.REDUNDANT - 428)) | (1 << (mysqlParser.RELAY_LOG_FILE - 428)) | (1 << (mysqlParser.RELAY_LOG_POS - 428)) | (1 << (mysqlParser.RELAYLOG - 428)) | (1 << (mysqlParser.REMOVE - 428)) | (1 << (mysqlParser.REORGANIZE - 428)) | (1 << (mysqlParser.REPAIR - 428)) | (1 << (mysqlParser.REPLICATE_DO_DB - 428)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 428)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 428)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 428)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 428)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 428)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 428)) | (1 << (mysqlParser.REPLICATION - 428)) | (1 << (mysqlParser.RESET - 428)) | (1 << (mysqlParser.RESUME - 428)) | (1 << (mysqlParser.RETURNS - 428)) | (1 << (mysqlParser.ROLLBACK - 428)) | (1 << (mysqlParser.ROLLUP - 428)) | (1 << (mysqlParser.ROTATE - 428)) | (1 << (mysqlParser.ROW - 428)) | (1 << (mysqlParser.ROWS - 428)) | (1 << (mysqlParser.ROW_FORMAT - 428)) | (1 << (mysqlParser.SAVEPOINT - 428)) | (1 << (mysqlParser.SCHEDULE - 428)) | (1 << (mysqlParser.SECURITY - 428)) | (1 << (mysqlParser.SERVER - 428)) | (1 << (mysqlParser.SESSION - 428)) | (1 << (mysqlParser.SHARE - 428)) | (1 << (mysqlParser.SHARED - 428)) | (1 << (mysqlParser.SIGNED - 428)) | (1 << (mysqlParser.SIMPLE - 428)) | (1 << (mysqlParser.SLAVE - 428)) | (1 << (mysqlParser.SNAPSHOT - 428)) | (1 << (mysqlParser.SOCKET - 428)) | (1 << (mysqlParser.SOME - 428)) | (1 << (mysqlParser.SOUNDS - 428)) | (1 << (mysqlParser.SOURCE - 428)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 428)))) != 0) or ((((_la - 492)) & ~0x3f) == 0 and ((1 << (_la - 492)) & ((1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 492)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 492)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 492)) | (1 << (mysqlParser.SQL_CACHE - 492)) | (1 << (mysqlParser.SQL_NO_CACHE - 492)) | (1 << (mysqlParser.SQL_THREAD - 492)) | (1 << (mysqlParser.START - 492)) | (1 << (mysqlParser.STARTS - 492)) | (1 << (mysqlParser.STATS_AUTO_RECALC - 492)) | (1 << (mysqlParser.STATS_PERSISTENT - 492)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 492)) | (1 << (mysqlParser.STATUS - 492)) | (1 << (mysqlParser.STOP - 492)) | (1 << (mysqlParser.STORAGE - 492)) | (1 << (mysqlParser.STRING - 492)) | (1 << (mysqlParser.SUBJECT - 492)) | (1 << (mysqlParser.SUBPARTITION - 492)) | (1 << (mysqlParser.SUBPARTITIONS - 492)) | (1 << (mysqlParser.SUSPEND - 492)) | (1 << (mysqlParser.SWAPS - 492)) | (1 << (mysqlParser.SWITCHES - 492)) | (1 << (mysqlParser.TABLESPACE - 492)) | (1 << (mysqlParser.TEMPORARY - 492)) | (1 << (mysqlParser.TEMPTABLE - 492)) | (1 << (mysqlParser.THAN - 492)) | (1 << (mysqlParser.TRANSACTION - 492)) | (1 << (mysqlParser.TRUNCATE - 492)) | (1 << (mysqlParser.UNDEFINED - 492)) | (1 << (mysqlParser.UNDOFILE - 492)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 492)) | (1 << (mysqlParser.UNINSTALL - 492)) | (1 << (mysqlParser.UNKNOWN - 492)) | (1 << (mysqlParser.UPGRADE - 492)) | (1 << (mysqlParser.USER - 492)) | (1 << (mysqlParser.VALIDATION - 492)) | (1 << (mysqlParser.VALUE - 492)) | (1 << (mysqlParser.VARIABLES - 492)) | (1 << (mysqlParser.VIEW - 492)) | (1 << (mysqlParser.WAIT - 492)) | (1 << (mysqlParser.WARNINGS - 492)) | (1 << (mysqlParser.WITHOUT - 492)) | (1 << (mysqlParser.WORK - 492)) | (1 << (mysqlParser.WRAPPER - 492)) | (1 << (mysqlParser.X509 - 492)) | (1 << (mysqlParser.XA - 492)) | (1 << (mysqlParser.XML - 492)) | (1 << (mysqlParser.QUARTER - 492)) | (1 << (mysqlParser.MONTH - 492)) | (1 << (mysqlParser.DAY - 492)) | (1 << (mysqlParser.HOUR - 492)) | (1 << (mysqlParser.MINUTE - 492)) | (1 << (mysqlParser.WEEK - 492)) | (1 << (mysqlParser.SECOND - 492)) | (1 << (mysqlParser.MICROSECOND - 492)))) != 0) or ((((_la - 556)) & ~0x3f) == 0 and ((1 << (_la - 556)) & ((1 << (mysqlParser.TABLES - 556)) | (1 << (mysqlParser.ROUTINE - 556)) | (1 << (mysqlParser.EXECUTE - 556)) | (1 << (mysqlParser.FILE - 556)) | (1 << (mysqlParser.PROCESS - 556)) | (1 << (mysqlParser.RELOAD - 556)) | (1 << (mysqlParser.SHUTDOWN - 556)) | (1 << (mysqlParser.SUPER - 556)) | (1 << (mysqlParser.PRIVILEGES - 556)) | (1 << (mysqlParser.ARMSCII8 - 556)) | (1 << (mysqlParser.ASCII - 556)) | (1 << (mysqlParser.BIG5 - 556)) | (1 << (mysqlParser.CP1250 - 556)) | (1 << (mysqlParser.CP1251 - 556)) | (1 << (mysqlParser.CP1256 - 556)) | (1 << (mysqlParser.CP1257 - 556)) | (1 << (mysqlParser.CP850 - 556)) | (1 << (mysqlParser.CP852 - 556)) | (1 << (mysqlParser.CP866 - 556)) | (1 << (mysqlParser.CP932 - 556)) | (1 << (mysqlParser.DEC8 - 556)) | (1 << (mysqlParser.EUCJPMS - 556)) | (1 << (mysqlParser.EUCKR - 556)) | (1 << (mysqlParser.GB2312 - 556)) | (1 << (mysqlParser.GBK - 556)) | (1 << (mysqlParser.GEOSTD8 - 556)) | (1 << (mysqlParser.GREEK - 556)) | (1 << (mysqlParser.HEBREW - 556)) | (1 << (mysqlParser.HP8 - 556)) | (1 << (mysqlParser.KEYBCS2 - 556)) | (1 << (mysqlParser.KOI8R - 556)) | (1 << (mysqlParser.KOI8U - 556)) | (1 << (mysqlParser.LATIN1 - 556)) | (1 << (mysqlParser.LATIN2 - 556)) | (1 << (mysqlParser.LATIN5 - 556)) | (1 << (mysqlParser.LATIN7 - 556)) | (1 << (mysqlParser.MACCE - 556)) | (1 << (mysqlParser.MACROMAN - 556)) | (1 << (mysqlParser.SJIS - 556)) | (1 << (mysqlParser.SWE7 - 556)) | (1 << (mysqlParser.TIS620 - 556)) | (1 << (mysqlParser.UCS2 - 556)) | (1 << (mysqlParser.UJIS - 556)) | (1 << (mysqlParser.UTF16 - 556)) | (1 << (mysqlParser.UTF16LE - 556)) | (1 << (mysqlParser.UTF32 - 556)) | (1 << (mysqlParser.UTF8 - 556)) | (1 << (mysqlParser.UTF8MB3 - 556)) | (1 << (mysqlParser.UTF8MB4 - 556)) | (1 << (mysqlParser.ARCHIVE - 556)) | (1 << (mysqlParser.BLACKHOLE - 556)) | (1 << (mysqlParser.CSV - 556)) | (1 << (mysqlParser.FEDERATED - 556)) | (1 << (mysqlParser.INNODB - 556)) | (1 << (mysqlParser.MEMORY - 556)) | (1 << (mysqlParser.MRG_MYISAM - 556)) | (1 << (mysqlParser.MYISAM - 556)) | (1 << (mysqlParser.NDB - 556)) | (1 << (mysqlParser.NDBCLUSTER - 556)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 556)) | (1 << (mysqlParser.REPEATABLE - 556)) | (1 << (mysqlParser.COMMITTED - 556)) | (1 << (mysqlParser.UNCOMMITTED - 556)) | (1 << (mysqlParser.SERIALIZABLE - 556)))) != 0) or ((((_la - 620)) & ~0x3f) == 0 and ((1 << (_la - 620)) & ((1 << (mysqlParser.GEOMETRYCOLLECTION - 620)) | (1 << (mysqlParser.LINESTRING - 620)) | (1 << (mysqlParser.MULTILINESTRING - 620)) | (1 << (mysqlParser.MULTIPOINT - 620)) | (1 << (mysqlParser.MULTIPOLYGON - 620)) | (1 << (mysqlParser.POINT - 620)) | (1 << (mysqlParser.POLYGON - 620)) | (1 << (mysqlParser.ABS - 620)) | (1 << (mysqlParser.ACOS - 620)) | (1 << (mysqlParser.ADDDATE - 620)) | (1 << (mysqlParser.ADDTIME - 620)) | (1 << (mysqlParser.AES_DECRYPT - 620)) | (1 << (mysqlParser.AES_ENCRYPT - 620)) | (1 << (mysqlParser.AREA - 620)) | (1 << (mysqlParser.ASBINARY - 620)) | (1 << (mysqlParser.ASIN - 620)) | (1 << (mysqlParser.ASTEXT - 620)) | (1 << (mysqlParser.ASWKB - 620)) | (1 << (mysqlParser.ASWKT - 620)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 620)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 620)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 620)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 620)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 620)) | (1 << (mysqlParser.ATAN - 620)) | (1 << (mysqlParser.ATAN2 - 620)) | (1 << (mysqlParser.BENCHMARK - 620)) | (1 << (mysqlParser.BIN - 620)) | (1 << (mysqlParser.BIT_COUNT - 620)) | (1 << (mysqlParser.BIT_LENGTH - 620)) | (1 << (mysqlParser.BUFFER - 620)) | (1 << (mysqlParser.CEIL - 620)) | (1 << (mysqlParser.CEILING - 620)) | (1 << (mysqlParser.CENTROID - 620)) | (1 << (mysqlParser.CHARACTER_LENGTH - 620)) | (1 << (mysqlParser.CHARSET - 620)) | (1 << (mysqlParser.CHAR_LENGTH - 620)) | (1 << (mysqlParser.COERCIBILITY - 620)) | (1 << (mysqlParser.COLLATION - 620)) | (1 << (mysqlParser.COMPRESS - 620)) | (1 << (mysqlParser.CONCAT - 620)) | (1 << (mysqlParser.CONCAT_WS - 620)) | (1 << (mysqlParser.CONNECTION_ID - 620)) | (1 << (mysqlParser.CONV - 620)) | (1 << (mysqlParser.CONVERT_TZ - 620)) | (1 << (mysqlParser.COS - 620)) | (1 << (mysqlParser.COT - 620)) | (1 << (mysqlParser.CRC32 - 620)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 620)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 620)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 620)) | (1 << (mysqlParser.CREATE_DIGEST - 620)) | (1 << (mysqlParser.CROSSES - 620)) | (1 << (mysqlParser.DATEDIFF - 620)) | (1 << (mysqlParser.DATE_FORMAT - 620)) | (1 << (mysqlParser.DAYNAME - 620)) | (1 << (mysqlParser.DAYOFMONTH - 620)) | (1 << (mysqlParser.DAYOFWEEK - 620)) | (1 << (mysqlParser.DAYOFYEAR - 620)) | (1 << (mysqlParser.DECODE - 620)) | (1 << (mysqlParser.DEGREES - 620)) | (1 << (mysqlParser.DES_DECRYPT - 620)) | (1 << (mysqlParser.DES_ENCRYPT - 620)) | (1 << (mysqlParser.DIMENSION - 620)))) != 0) or ((((_la - 684)) & ~0x3f) == 0 and ((1 << (_la - 684)) & ((1 << (mysqlParser.DISJOINT - 684)) | (1 << (mysqlParser.ELT - 684)) | (1 << (mysqlParser.ENCODE - 684)) | (1 << (mysqlParser.ENCRYPT - 684)) | (1 << (mysqlParser.ENDPOINT - 684)) | (1 << (mysqlParser.ENVELOPE - 684)) | (1 << (mysqlParser.EQUALS - 684)) | (1 << (mysqlParser.EXP - 684)) | (1 << (mysqlParser.EXPORT_SET - 684)) | (1 << (mysqlParser.EXTERIORRING - 684)) | (1 << (mysqlParser.EXTRACTVALUE - 684)) | (1 << (mysqlParser.FIELD - 684)) | (1 << (mysqlParser.FIND_IN_SET - 684)) | (1 << (mysqlParser.FLOOR - 684)) | (1 << (mysqlParser.FORMAT - 684)) | (1 << (mysqlParser.FOUND_ROWS - 684)) | (1 << (mysqlParser.FROM_BASE64 - 684)) | (1 << (mysqlParser.FROM_DAYS - 684)) | (1 << (mysqlParser.FROM_UNIXTIME - 684)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 684)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 684)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 684)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 684)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 684)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 684)) | (1 << (mysqlParser.GEOMETRYN - 684)) | (1 << (mysqlParser.GEOMETRYTYPE - 684)) | (1 << (mysqlParser.GEOMFROMTEXT - 684)) | (1 << (mysqlParser.GEOMFROMWKB - 684)) | (1 << (mysqlParser.GET_FORMAT - 684)) | (1 << (mysqlParser.GET_LOCK - 684)) | (1 << (mysqlParser.GLENGTH - 684)) | (1 << (mysqlParser.GREATEST - 684)) | (1 << (mysqlParser.GTID_SUBSET - 684)) | (1 << (mysqlParser.GTID_SUBTRACT - 684)) | (1 << (mysqlParser.HEX - 684)) | (1 << (mysqlParser.IFNULL - 684)) | (1 << (mysqlParser.INET6_ATON - 684)) | (1 << (mysqlParser.INET6_NTOA - 684)) | (1 << (mysqlParser.INET_ATON - 684)) | (1 << (mysqlParser.INET_NTOA - 684)) | (1 << (mysqlParser.INSTR - 684)) | (1 << (mysqlParser.INTERIORRINGN - 684)) | (1 << (mysqlParser.INTERSECTS - 684)) | (1 << (mysqlParser.ISCLOSED - 684)) | (1 << (mysqlParser.ISEMPTY - 684)) | (1 << (mysqlParser.ISNULL - 684)) | (1 << (mysqlParser.ISSIMPLE - 684)) | (1 << (mysqlParser.IS_FREE_LOCK - 684)) | (1 << (mysqlParser.IS_IPV4 - 684)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 684)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 684)) | (1 << (mysqlParser.IS_IPV6 - 684)) | (1 << (mysqlParser.IS_USED_LOCK - 684)) | (1 << (mysqlParser.LAST_INSERT_ID - 684)) | (1 << (mysqlParser.LCASE - 684)) | (1 << (mysqlParser.LEAST - 684)) | (1 << (mysqlParser.LENGTH - 684)) | (1 << (mysqlParser.LINEFROMTEXT - 684)) | (1 << (mysqlParser.LINEFROMWKB - 684)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 684)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 684)) | (1 << (mysqlParser.LN - 684)) | (1 << (mysqlParser.LOAD_FILE - 684)))) != 0) or ((((_la - 748)) & ~0x3f) == 0 and ((1 << (_la - 748)) & ((1 << (mysqlParser.LOCATE - 748)) | (1 << (mysqlParser.LOG - 748)) | (1 << (mysqlParser.LOG10 - 748)) | (1 << (mysqlParser.LOG2 - 748)) | (1 << (mysqlParser.LOWER - 748)) | (1 << (mysqlParser.LPAD - 748)) | (1 << (mysqlParser.LTRIM - 748)) | (1 << (mysqlParser.MAKEDATE - 748)) | (1 << (mysqlParser.MAKETIME - 748)) | (1 << (mysqlParser.MAKE_SET - 748)) | (1 << (mysqlParser.MASTER_POS_WAIT - 748)) | (1 << (mysqlParser.MBRCONTAINS - 748)) | (1 << (mysqlParser.MBRDISJOINT - 748)) | (1 << (mysqlParser.MBREQUAL - 748)) | (1 << (mysqlParser.MBRINTERSECTS - 748)) | (1 << (mysqlParser.MBROVERLAPS - 748)) | (1 << (mysqlParser.MBRTOUCHES - 748)) | (1 << (mysqlParser.MBRWITHIN - 748)) | (1 << (mysqlParser.MD5 - 748)) | (1 << (mysqlParser.MLINEFROMTEXT - 748)) | (1 << (mysqlParser.MLINEFROMWKB - 748)) | (1 << (mysqlParser.MONTHNAME - 748)) | (1 << (mysqlParser.MPOINTFROMTEXT - 748)) | (1 << (mysqlParser.MPOINTFROMWKB - 748)) | (1 << (mysqlParser.MPOLYFROMTEXT - 748)) | (1 << (mysqlParser.MPOLYFROMWKB - 748)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 748)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 748)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 748)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 748)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 748)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 748)) | (1 << (mysqlParser.NAME_CONST - 748)) | (1 << (mysqlParser.NULLIF - 748)) | (1 << (mysqlParser.NUMGEOMETRIES - 748)) | (1 << (mysqlParser.NUMINTERIORRINGS - 748)) | (1 << (mysqlParser.NUMPOINTS - 748)) | (1 << (mysqlParser.OCT - 748)) | (1 << (mysqlParser.OCTET_LENGTH - 748)) | (1 << (mysqlParser.ORD - 748)) | (1 << (mysqlParser.OVERLAPS - 748)) | (1 << (mysqlParser.PERIOD_ADD - 748)) | (1 << (mysqlParser.PERIOD_DIFF - 748)) | (1 << (mysqlParser.PI - 748)) | (1 << (mysqlParser.POINTFROMTEXT - 748)) | (1 << (mysqlParser.POINTFROMWKB - 748)) | (1 << (mysqlParser.POINTN - 748)) | (1 << (mysqlParser.POLYFROMTEXT - 748)) | (1 << (mysqlParser.POLYFROMWKB - 748)) | (1 << (mysqlParser.POLYGONFROMTEXT - 748)) | (1 << (mysqlParser.POLYGONFROMWKB - 748)) | (1 << (mysqlParser.POW - 748)) | (1 << (mysqlParser.POWER - 748)) | (1 << (mysqlParser.QUOTE - 748)) | (1 << (mysqlParser.RADIANS - 748)) | (1 << (mysqlParser.RAND - 748)) | (1 << (mysqlParser.RANDOM_BYTES - 748)) | (1 << (mysqlParser.RELEASE_LOCK - 748)) | (1 << (mysqlParser.REVERSE - 748)) | (1 << (mysqlParser.ROUND - 748)) | (1 << (mysqlParser.ROW_COUNT - 748)) | (1 << (mysqlParser.RPAD - 748)) | (1 << (mysqlParser.RTRIM - 748)) | (1 << (mysqlParser.SEC_TO_TIME - 748)))) != 0) or ((((_la - 812)) & ~0x3f) == 0 and ((1 << (_la - 812)) & ((1 << (mysqlParser.SESSION_USER - 812)) | (1 << (mysqlParser.SHA - 812)) | (1 << (mysqlParser.SHA1 - 812)) | (1 << (mysqlParser.SHA2 - 812)) | (1 << (mysqlParser.SIGN - 812)) | (1 << (mysqlParser.SIN - 812)) | (1 << (mysqlParser.SLEEP - 812)) | (1 << (mysqlParser.SOUNDEX - 812)) | (1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 812)) | (1 << (mysqlParser.SQRT - 812)) | (1 << (mysqlParser.SRID - 812)) | (1 << (mysqlParser.STARTPOINT - 812)) | (1 << (mysqlParser.STRCMP - 812)) | (1 << (mysqlParser.STR_TO_DATE - 812)) | (1 << (mysqlParser.ST_AREA - 812)) | (1 << (mysqlParser.ST_ASBINARY - 812)) | (1 << (mysqlParser.ST_ASTEXT - 812)) | (1 << (mysqlParser.ST_ASWKB - 812)) | (1 << (mysqlParser.ST_ASWKT - 812)) | (1 << (mysqlParser.ST_BUFFER - 812)) | (1 << (mysqlParser.ST_CENTROID - 812)) | (1 << (mysqlParser.ST_CONTAINS - 812)) | (1 << (mysqlParser.ST_CROSSES - 812)) | (1 << (mysqlParser.ST_DIFFERENCE - 812)) | (1 << (mysqlParser.ST_DIMENSION - 812)) | (1 << (mysqlParser.ST_DISJOINT - 812)) | (1 << (mysqlParser.ST_DISTANCE - 812)) | (1 << (mysqlParser.ST_ENDPOINT - 812)) | (1 << (mysqlParser.ST_ENVELOPE - 812)) | (1 << (mysqlParser.ST_EQUALS - 812)) | (1 << (mysqlParser.ST_EXTERIORRING - 812)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 812)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 812)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 812)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 812)) | (1 << (mysqlParser.ST_GEOMETRYN - 812)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 812)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 812)) | (1 << (mysqlParser.ST_INTERIORRINGN - 812)) | (1 << (mysqlParser.ST_INTERSECTION - 812)) | (1 << (mysqlParser.ST_INTERSECTS - 812)) | (1 << (mysqlParser.ST_ISCLOSED - 812)) | (1 << (mysqlParser.ST_ISEMPTY - 812)) | (1 << (mysqlParser.ST_ISSIMPLE - 812)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 812)) | (1 << (mysqlParser.ST_LINEFROMWKB - 812)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 812)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 812)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 812)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 812)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 812)) | (1 << (mysqlParser.ST_NUMPOINTS - 812)) | (1 << (mysqlParser.ST_OVERLAPS - 812)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 812)) | (1 << (mysqlParser.ST_POINTFROMWKB - 812)) | (1 << (mysqlParser.ST_POINTN - 812)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 812)) | (1 << (mysqlParser.ST_POLYFROMWKB - 812)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 812)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 812)))) != 0) or ((((_la - 876)) & ~0x3f) == 0 and ((1 << (_la - 876)) & ((1 << (mysqlParser.ST_SRID - 876)) | (1 << (mysqlParser.ST_STARTPOINT - 876)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 876)) | (1 << (mysqlParser.ST_TOUCHES - 876)) | (1 << (mysqlParser.ST_UNION - 876)) | (1 << (mysqlParser.ST_WITHIN - 876)) | (1 << (mysqlParser.ST_X - 876)) | (1 << (mysqlParser.ST_Y - 876)) | (1 << (mysqlParser.SUBDATE - 876)) | (1 << (mysqlParser.SUBSTRING_INDEX - 876)) | (1 << (mysqlParser.SUBTIME - 876)) | (1 << (mysqlParser.SYSTEM_USER - 876)) | (1 << (mysqlParser.TAN - 876)) | (1 << (mysqlParser.TIMEDIFF - 876)) | (1 << (mysqlParser.TIMESTAMPADD - 876)) | (1 << (mysqlParser.TIMESTAMPDIFF - 876)) | (1 << (mysqlParser.TIME_FORMAT - 876)) | (1 << (mysqlParser.TIME_TO_SEC - 876)) | (1 << (mysqlParser.TOUCHES - 876)) | (1 << (mysqlParser.TO_BASE64 - 876)) | (1 << (mysqlParser.TO_DAYS - 876)) | (1 << (mysqlParser.TO_SECONDS - 876)) | (1 << (mysqlParser.UCASE - 876)) | (1 << (mysqlParser.UNCOMPRESS - 876)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 876)) | (1 << (mysqlParser.UNHEX - 876)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 876)) | (1 << (mysqlParser.UPDATEXML - 876)) | (1 << (mysqlParser.UPPER - 876)) | (1 << (mysqlParser.UUID - 876)) | (1 << (mysqlParser.UUID_SHORT - 876)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 876)) | (1 << (mysqlParser.VERSION - 876)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 876)) | (1 << (mysqlParser.WEEKDAY - 876)) | (1 << (mysqlParser.WEEKOFYEAR - 876)) | (1 << (mysqlParser.WEIGHT_STRING - 876)) | (1 << (mysqlParser.WITHIN - 876)) | (1 << (mysqlParser.YEARWEEK - 876)) | (1 << (mysqlParser.Y_FUNCTION - 876)) | (1 << (mysqlParser.X_FUNCTION - 876)))) != 0) or ((((_la - 942)) & ~0x3f) == 0 and ((1 << (_la - 942)) & ((1 << (mysqlParser.LR_BRACKET - 942)) | (1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 942)) | (1 << (mysqlParser.ID - 942)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 942)))) != 0)):
                    break

            self.state = 3975
            self.match(mysqlParser.UNTIL)
            self.state = 3976
            self.expression(0)
            self.state = 3977
            self.match(mysqlParser.END)
            self.state = 3978
            self.match(mysqlParser.REPEAT)
            self.state = 3980
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.LEFT or _la==mysqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (mysqlParser.DATE - 180)) | (1 << (mysqlParser.TIME - 180)) | (1 << (mysqlParser.TIMESTAMP - 180)) | (1 << (mysqlParser.DATETIME - 180)) | (1 << (mysqlParser.YEAR - 180)) | (1 << (mysqlParser.TEXT - 180)) | (1 << (mysqlParser.ENUM - 180)) | (1 << (mysqlParser.COUNT - 180)) | (1 << (mysqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (mysqlParser.ACCOUNT - 244)) | (1 << (mysqlParser.ACTION - 244)) | (1 << (mysqlParser.AFTER - 244)) | (1 << (mysqlParser.AGGREGATE - 244)) | (1 << (mysqlParser.ALGORITHM - 244)) | (1 << (mysqlParser.ANY - 244)) | (1 << (mysqlParser.AT - 244)) | (1 << (mysqlParser.AUTHORS - 244)) | (1 << (mysqlParser.AUTOCOMMIT - 244)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (mysqlParser.AUTO_INCREMENT - 244)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 244)) | (1 << (mysqlParser.BEGIN - 244)) | (1 << (mysqlParser.BINLOG - 244)) | (1 << (mysqlParser.BIT - 244)) | (1 << (mysqlParser.BLOCK - 244)) | (1 << (mysqlParser.BTREE - 244)) | (1 << (mysqlParser.CASCADED - 244)) | (1 << (mysqlParser.CHAIN - 244)) | (1 << (mysqlParser.CHANNEL - 244)) | (1 << (mysqlParser.CHECKSUM - 244)) | (1 << (mysqlParser.CIPHER - 244)) | (1 << (mysqlParser.CLIENT - 244)) | (1 << (mysqlParser.COALESCE - 244)) | (1 << (mysqlParser.CODE - 244)) | (1 << (mysqlParser.COLUMNS - 244)) | (1 << (mysqlParser.COLUMN_FORMAT - 244)) | (1 << (mysqlParser.COMMENT - 244)) | (1 << (mysqlParser.COMMIT - 244)) | (1 << (mysqlParser.COMPACT - 244)) | (1 << (mysqlParser.COMPLETION - 244)) | (1 << (mysqlParser.COMPRESSED - 244)) | (1 << (mysqlParser.COMPRESSION - 244)) | (1 << (mysqlParser.CONCURRENT - 244)) | (1 << (mysqlParser.CONNECTION - 244)) | (1 << (mysqlParser.CONSISTENT - 244)) | (1 << (mysqlParser.CONTAINS - 244)) | (1 << (mysqlParser.CONTEXT - 244)) | (1 << (mysqlParser.CONTRIBUTORS - 244)) | (1 << (mysqlParser.COPY - 244)) | (1 << (mysqlParser.CPU - 244)) | (1 << (mysqlParser.DATA - 244)) | (1 << (mysqlParser.DATAFILE - 244)) | (1 << (mysqlParser.DEALLOCATE - 244)) | (1 << (mysqlParser.DEFAULT_AUTH - 244)) | (1 << (mysqlParser.DEFINER - 244)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 244)) | (1 << (mysqlParser.DIRECTORY - 244)) | (1 << (mysqlParser.DISABLE - 244)) | (1 << (mysqlParser.DISCARD - 244)) | (1 << (mysqlParser.DISK - 244)) | (1 << (mysqlParser.DO - 244)) | (1 << (mysqlParser.DUMPFILE - 244)) | (1 << (mysqlParser.DUPLICATE - 244)) | (1 << (mysqlParser.DYNAMIC - 244)) | (1 << (mysqlParser.ENABLE - 244)) | (1 << (mysqlParser.ENCRYPTION - 244)) | (1 << (mysqlParser.ENDS - 244)) | (1 << (mysqlParser.ENGINE - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (mysqlParser.ENGINES - 308)) | (1 << (mysqlParser.ERROR - 308)) | (1 << (mysqlParser.ERRORS - 308)) | (1 << (mysqlParser.ESCAPE - 308)) | (1 << (mysqlParser.EVEN - 308)) | (1 << (mysqlParser.EVENT - 308)) | (1 << (mysqlParser.EVENTS - 308)) | (1 << (mysqlParser.EVERY - 308)) | (1 << (mysqlParser.EXCHANGE - 308)) | (1 << (mysqlParser.EXCLUSIVE - 308)) | (1 << (mysqlParser.EXPIRE - 308)) | (1 << (mysqlParser.EXTENT_SIZE - 308)) | (1 << (mysqlParser.FAULTS - 308)) | (1 << (mysqlParser.FIELDS - 308)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (mysqlParser.FILTER - 308)) | (1 << (mysqlParser.FIRST - 308)) | (1 << (mysqlParser.FIXED - 308)) | (1 << (mysqlParser.FOLLOWS - 308)) | (1 << (mysqlParser.FULL - 308)) | (1 << (mysqlParser.FUNCTION - 308)) | (1 << (mysqlParser.GLOBAL - 308)) | (1 << (mysqlParser.GRANTS - 308)) | (1 << (mysqlParser.GROUP_REPLICATION - 308)) | (1 << (mysqlParser.HASH - 308)) | (1 << (mysqlParser.HOST - 308)) | (1 << (mysqlParser.IDENTIFIED - 308)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (mysqlParser.IMPORT - 308)) | (1 << (mysqlParser.INDEXES - 308)) | (1 << (mysqlParser.INITIAL_SIZE - 308)) | (1 << (mysqlParser.INPLACE - 308)) | (1 << (mysqlParser.INSERT_METHOD - 308)) | (1 << (mysqlParser.INSTANCE - 308)) | (1 << (mysqlParser.INVOKER - 308)) | (1 << (mysqlParser.IO - 308)) | (1 << (mysqlParser.IO_THREAD - 308)) | (1 << (mysqlParser.IPC - 308)) | (1 << (mysqlParser.ISOLATION - 308)) | (1 << (mysqlParser.ISSUER - 308)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (mysqlParser.LANGUAGE - 308)) | (1 << (mysqlParser.LAST - 308)) | (1 << (mysqlParser.LEAVES - 308)) | (1 << (mysqlParser.LESS - 308)) | (1 << (mysqlParser.LEVEL - 308)) | (1 << (mysqlParser.LIST - 308)) | (1 << (mysqlParser.LOCAL - 308)) | (1 << (mysqlParser.LOGFILE - 308)) | (1 << (mysqlParser.LOGS - 308)) | (1 << (mysqlParser.MASTER - 308)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 308)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (mysqlParser.MASTER_DELAY - 372)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (mysqlParser.MASTER_HOST - 372)) | (1 << (mysqlParser.MASTER_LOG_FILE - 372)) | (1 << (mysqlParser.MASTER_LOG_POS - 372)) | (1 << (mysqlParser.MASTER_PASSWORD - 372)) | (1 << (mysqlParser.MASTER_PORT - 372)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (mysqlParser.MASTER_SSL - 372)) | (1 << (mysqlParser.MASTER_SSL_CA - 372)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_CERT - 372)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (mysqlParser.MASTER_SSL_CRL - 372)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_KEY - 372)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 372)) | (1 << (mysqlParser.MASTER_USER - 372)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_ROWS - 372)) | (1 << (mysqlParser.MAX_SIZE - 372)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (mysqlParser.MERGE - 372)) | (1 << (mysqlParser.MID - 372)) | (1 << (mysqlParser.MIGRATE - 372)) | (1 << (mysqlParser.MIN_ROWS - 372)) | (1 << (mysqlParser.MODIFY - 372)) | (1 << (mysqlParser.MUTEX - 372)) | (1 << (mysqlParser.MYSQL - 372)) | (1 << (mysqlParser.NAME - 372)) | (1 << (mysqlParser.NAMES - 372)) | (1 << (mysqlParser.NCHAR - 372)) | (1 << (mysqlParser.NEVER - 372)) | (1 << (mysqlParser.NO - 372)) | (1 << (mysqlParser.NODEGROUP - 372)) | (1 << (mysqlParser.NONE - 372)) | (1 << (mysqlParser.OFFLINE - 372)) | (1 << (mysqlParser.OFFSET - 372)) | (1 << (mysqlParser.OJ - 372)) | (1 << (mysqlParser.OLD_PASSWORD - 372)) | (1 << (mysqlParser.ONE - 372)) | (1 << (mysqlParser.ONLINE - 372)) | (1 << (mysqlParser.ONLY - 372)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 372)) | (1 << (mysqlParser.OPTIONS - 372)) | (1 << (mysqlParser.OWNER - 372)) | (1 << (mysqlParser.PACK_KEYS - 372)) | (1 << (mysqlParser.PAGE - 372)) | (1 << (mysqlParser.PARSER - 372)) | (1 << (mysqlParser.PARTIAL - 372)) | (1 << (mysqlParser.PARTITIONING - 372)) | (1 << (mysqlParser.PARTITIONS - 372)) | (1 << (mysqlParser.PASSWORD - 372)) | (1 << (mysqlParser.PHASE - 372)) | (1 << (mysqlParser.PLUGIN_DIR - 372)) | (1 << (mysqlParser.PLUGINS - 372)) | (1 << (mysqlParser.PORT - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (mysqlParser.PRECEDES - 436)) | (1 << (mysqlParser.PREPARE - 436)) | (1 << (mysqlParser.PRESERVE - 436)) | (1 << (mysqlParser.PREV - 436)) | (1 << (mysqlParser.PROCESSLIST - 436)) | (1 << (mysqlParser.PROFILE - 436)) | (1 << (mysqlParser.PROFILES - 436)) | (1 << (mysqlParser.PROXY - 436)) | (1 << (mysqlParser.QUERY - 436)) | (1 << (mysqlParser.QUICK - 436)) | (1 << (mysqlParser.REBUILD - 436)) | (1 << (mysqlParser.RECOVER - 436)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (mysqlParser.REDUNDANT - 436)) | (1 << (mysqlParser.RELAY_LOG_FILE - 436)) | (1 << (mysqlParser.RELAY_LOG_POS - 436)) | (1 << (mysqlParser.RELAYLOG - 436)) | (1 << (mysqlParser.REMOVE - 436)) | (1 << (mysqlParser.REORGANIZE - 436)) | (1 << (mysqlParser.REPAIR - 436)) | (1 << (mysqlParser.REPLICATE_DO_DB - 436)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATION - 436)) | (1 << (mysqlParser.RESUME - 436)) | (1 << (mysqlParser.RETURNS - 436)) | (1 << (mysqlParser.ROLLBACK - 436)) | (1 << (mysqlParser.ROLLUP - 436)) | (1 << (mysqlParser.ROTATE - 436)) | (1 << (mysqlParser.ROW - 436)) | (1 << (mysqlParser.ROWS - 436)) | (1 << (mysqlParser.ROW_FORMAT - 436)) | (1 << (mysqlParser.SAVEPOINT - 436)) | (1 << (mysqlParser.SCHEDULE - 436)) | (1 << (mysqlParser.SECURITY - 436)) | (1 << (mysqlParser.SERVER - 436)) | (1 << (mysqlParser.SESSION - 436)) | (1 << (mysqlParser.SHARE - 436)) | (1 << (mysqlParser.SHARED - 436)) | (1 << (mysqlParser.SIGNED - 436)) | (1 << (mysqlParser.SIMPLE - 436)) | (1 << (mysqlParser.SLAVE - 436)) | (1 << (mysqlParser.SNAPSHOT - 436)) | (1 << (mysqlParser.SOCKET - 436)) | (1 << (mysqlParser.SOME - 436)) | (1 << (mysqlParser.SOUNDS - 436)) | (1 << (mysqlParser.SOURCE - 436)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (mysqlParser.SQL_CACHE - 436)) | (1 << (mysqlParser.SQL_NO_CACHE - 436)) | (1 << (mysqlParser.SQL_THREAD - 436)) | (1 << (mysqlParser.START - 436)) | (1 << (mysqlParser.STARTS - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (mysqlParser.STATS_AUTO_RECALC - 500)) | (1 << (mysqlParser.STATS_PERSISTENT - 500)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (mysqlParser.STATUS - 500)) | (1 << (mysqlParser.STOP - 500)) | (1 << (mysqlParser.STORAGE - 500)) | (1 << (mysqlParser.STRING - 500)) | (1 << (mysqlParser.SUBJECT - 500)) | (1 << (mysqlParser.SUBPARTITION - 500)) | (1 << (mysqlParser.SUBPARTITIONS - 500)) | (1 << (mysqlParser.SUSPEND - 500)) | (1 << (mysqlParser.SWAPS - 500)) | (1 << (mysqlParser.SWITCHES - 500)) | (1 << (mysqlParser.TABLESPACE - 500)) | (1 << (mysqlParser.TEMPORARY - 500)) | (1 << (mysqlParser.TEMPTABLE - 500)) | (1 << (mysqlParser.THAN - 500)) | (1 << (mysqlParser.TRANSACTION - 500)) | (1 << (mysqlParser.TRUNCATE - 500)) | (1 << (mysqlParser.UNDEFINED - 500)) | (1 << (mysqlParser.UNDOFILE - 500)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (mysqlParser.UNKNOWN - 500)) | (1 << (mysqlParser.UPGRADE - 500)) | (1 << (mysqlParser.USER - 500)) | (1 << (mysqlParser.VALIDATION - 500)) | (1 << (mysqlParser.VALUE - 500)) | (1 << (mysqlParser.VARIABLES - 500)) | (1 << (mysqlParser.VIEW - 500)) | (1 << (mysqlParser.WAIT - 500)) | (1 << (mysqlParser.WARNINGS - 500)) | (1 << (mysqlParser.WITHOUT - 500)) | (1 << (mysqlParser.WORK - 500)) | (1 << (mysqlParser.WRAPPER - 500)) | (1 << (mysqlParser.X509 - 500)) | (1 << (mysqlParser.XA - 500)) | (1 << (mysqlParser.XML - 500)) | (1 << (mysqlParser.QUARTER - 500)) | (1 << (mysqlParser.MONTH - 500)) | (1 << (mysqlParser.DAY - 500)) | (1 << (mysqlParser.HOUR - 500)) | (1 << (mysqlParser.MINUTE - 500)) | (1 << (mysqlParser.WEEK - 500)) | (1 << (mysqlParser.SECOND - 500)) | (1 << (mysqlParser.MICROSECOND - 500)) | (1 << (mysqlParser.TABLES - 500)) | (1 << (mysqlParser.ROUTINE - 500)) | (1 << (mysqlParser.EXECUTE - 500)) | (1 << (mysqlParser.FILE - 500)) | (1 << (mysqlParser.PROCESS - 500)) | (1 << (mysqlParser.RELOAD - 500)) | (1 << (mysqlParser.SHUTDOWN - 500)) | (1 << (mysqlParser.SUPER - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (mysqlParser.PRIVILEGES - 564)) | (1 << (mysqlParser.ARMSCII8 - 564)) | (1 << (mysqlParser.ASCII - 564)) | (1 << (mysqlParser.BIG5 - 564)) | (1 << (mysqlParser.CP1250 - 564)) | (1 << (mysqlParser.CP1251 - 564)) | (1 << (mysqlParser.CP1256 - 564)) | (1 << (mysqlParser.CP1257 - 564)) | (1 << (mysqlParser.CP850 - 564)) | (1 << (mysqlParser.CP852 - 564)) | (1 << (mysqlParser.CP866 - 564)) | (1 << (mysqlParser.CP932 - 564)) | (1 << (mysqlParser.DEC8 - 564)) | (1 << (mysqlParser.EUCJPMS - 564)) | (1 << (mysqlParser.EUCKR - 564)) | (1 << (mysqlParser.GB2312 - 564)) | (1 << (mysqlParser.GBK - 564)) | (1 << (mysqlParser.GEOSTD8 - 564)) | (1 << (mysqlParser.GREEK - 564)) | (1 << (mysqlParser.HEBREW - 564)) | (1 << (mysqlParser.HP8 - 564)) | (1 << (mysqlParser.KEYBCS2 - 564)) | (1 << (mysqlParser.KOI8R - 564)) | (1 << (mysqlParser.KOI8U - 564)) | (1 << (mysqlParser.LATIN1 - 564)) | (1 << (mysqlParser.LATIN2 - 564)) | (1 << (mysqlParser.LATIN5 - 564)) | (1 << (mysqlParser.LATIN7 - 564)) | (1 << (mysqlParser.MACCE - 564)) | (1 << (mysqlParser.MACROMAN - 564)) | (1 << (mysqlParser.SJIS - 564)) | (1 << (mysqlParser.SWE7 - 564)) | (1 << (mysqlParser.TIS620 - 564)) | (1 << (mysqlParser.UCS2 - 564)) | (1 << (mysqlParser.UJIS - 564)) | (1 << (mysqlParser.UTF16 - 564)) | (1 << (mysqlParser.UTF16LE - 564)) | (1 << (mysqlParser.UTF32 - 564)) | (1 << (mysqlParser.UTF8 - 564)) | (1 << (mysqlParser.UTF8MB3 - 564)) | (1 << (mysqlParser.UTF8MB4 - 564)) | (1 << (mysqlParser.ARCHIVE - 564)) | (1 << (mysqlParser.BLACKHOLE - 564)) | (1 << (mysqlParser.CSV - 564)) | (1 << (mysqlParser.FEDERATED - 564)) | (1 << (mysqlParser.INNODB - 564)) | (1 << (mysqlParser.MEMORY - 564)) | (1 << (mysqlParser.MRG_MYISAM - 564)) | (1 << (mysqlParser.MYISAM - 564)) | (1 << (mysqlParser.NDB - 564)) | (1 << (mysqlParser.NDBCLUSTER - 564)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (mysqlParser.REPEATABLE - 564)) | (1 << (mysqlParser.COMMITTED - 564)) | (1 << (mysqlParser.UNCOMMITTED - 564)) | (1 << (mysqlParser.SERIALIZABLE - 564)) | (1 << (mysqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (mysqlParser.LINESTRING - 564)) | (1 << (mysqlParser.MULTILINESTRING - 564)) | (1 << (mysqlParser.MULTIPOINT - 564)) | (1 << (mysqlParser.MULTIPOLYGON - 564)) | (1 << (mysqlParser.POINT - 564)) | (1 << (mysqlParser.POLYGON - 564)) | (1 << (mysqlParser.ABS - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (mysqlParser.ACOS - 628)) | (1 << (mysqlParser.ADDDATE - 628)) | (1 << (mysqlParser.ADDTIME - 628)) | (1 << (mysqlParser.AES_DECRYPT - 628)) | (1 << (mysqlParser.AES_ENCRYPT - 628)) | (1 << (mysqlParser.AREA - 628)) | (1 << (mysqlParser.ASBINARY - 628)) | (1 << (mysqlParser.ASIN - 628)) | (1 << (mysqlParser.ASTEXT - 628)) | (1 << (mysqlParser.ASWKB - 628)) | (1 << (mysqlParser.ASWKT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (mysqlParser.ATAN - 628)) | (1 << (mysqlParser.ATAN2 - 628)) | (1 << (mysqlParser.BENCHMARK - 628)) | (1 << (mysqlParser.BIN - 628)) | (1 << (mysqlParser.BIT_COUNT - 628)) | (1 << (mysqlParser.BIT_LENGTH - 628)) | (1 << (mysqlParser.BUFFER - 628)) | (1 << (mysqlParser.CEIL - 628)) | (1 << (mysqlParser.CEILING - 628)) | (1 << (mysqlParser.CENTROID - 628)) | (1 << (mysqlParser.CHARACTER_LENGTH - 628)) | (1 << (mysqlParser.CHARSET - 628)) | (1 << (mysqlParser.CHAR_LENGTH - 628)) | (1 << (mysqlParser.COERCIBILITY - 628)) | (1 << (mysqlParser.COLLATION - 628)) | (1 << (mysqlParser.COMPRESS - 628)) | (1 << (mysqlParser.CONCAT - 628)) | (1 << (mysqlParser.CONCAT_WS - 628)) | (1 << (mysqlParser.CONNECTION_ID - 628)) | (1 << (mysqlParser.CONV - 628)) | (1 << (mysqlParser.CONVERT_TZ - 628)) | (1 << (mysqlParser.COS - 628)) | (1 << (mysqlParser.COT - 628)) | (1 << (mysqlParser.CRC32 - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (mysqlParser.CREATE_DIGEST - 628)) | (1 << (mysqlParser.CROSSES - 628)) | (1 << (mysqlParser.DATEDIFF - 628)) | (1 << (mysqlParser.DATE_FORMAT - 628)) | (1 << (mysqlParser.DAYNAME - 628)) | (1 << (mysqlParser.DAYOFMONTH - 628)) | (1 << (mysqlParser.DAYOFWEEK - 628)) | (1 << (mysqlParser.DAYOFYEAR - 628)) | (1 << (mysqlParser.DECODE - 628)) | (1 << (mysqlParser.DEGREES - 628)) | (1 << (mysqlParser.DES_DECRYPT - 628)) | (1 << (mysqlParser.DES_ENCRYPT - 628)) | (1 << (mysqlParser.DIMENSION - 628)) | (1 << (mysqlParser.DISJOINT - 628)) | (1 << (mysqlParser.ELT - 628)) | (1 << (mysqlParser.ENCODE - 628)) | (1 << (mysqlParser.ENCRYPT - 628)) | (1 << (mysqlParser.ENDPOINT - 628)) | (1 << (mysqlParser.ENVELOPE - 628)) | (1 << (mysqlParser.EQUALS - 628)) | (1 << (mysqlParser.EXP - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (mysqlParser.EXPORT_SET - 692)) | (1 << (mysqlParser.EXTERIORRING - 692)) | (1 << (mysqlParser.EXTRACTVALUE - 692)) | (1 << (mysqlParser.FIELD - 692)) | (1 << (mysqlParser.FIND_IN_SET - 692)) | (1 << (mysqlParser.FLOOR - 692)) | (1 << (mysqlParser.FORMAT - 692)) | (1 << (mysqlParser.FOUND_ROWS - 692)) | (1 << (mysqlParser.FROM_BASE64 - 692)) | (1 << (mysqlParser.FROM_DAYS - 692)) | (1 << (mysqlParser.FROM_UNIXTIME - 692)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYN - 692)) | (1 << (mysqlParser.GEOMETRYTYPE - 692)) | (1 << (mysqlParser.GEOMFROMTEXT - 692)) | (1 << (mysqlParser.GEOMFROMWKB - 692)) | (1 << (mysqlParser.GET_FORMAT - 692)) | (1 << (mysqlParser.GET_LOCK - 692)) | (1 << (mysqlParser.GLENGTH - 692)) | (1 << (mysqlParser.GREATEST - 692)) | (1 << (mysqlParser.GTID_SUBSET - 692)) | (1 << (mysqlParser.GTID_SUBTRACT - 692)) | (1 << (mysqlParser.HEX - 692)) | (1 << (mysqlParser.IFNULL - 692)) | (1 << (mysqlParser.INET6_ATON - 692)) | (1 << (mysqlParser.INET6_NTOA - 692)) | (1 << (mysqlParser.INET_ATON - 692)) | (1 << (mysqlParser.INET_NTOA - 692)) | (1 << (mysqlParser.INSTR - 692)) | (1 << (mysqlParser.INTERIORRINGN - 692)) | (1 << (mysqlParser.INTERSECTS - 692)) | (1 << (mysqlParser.ISCLOSED - 692)) | (1 << (mysqlParser.ISEMPTY - 692)) | (1 << (mysqlParser.ISNULL - 692)) | (1 << (mysqlParser.ISSIMPLE - 692)) | (1 << (mysqlParser.IS_FREE_LOCK - 692)) | (1 << (mysqlParser.IS_IPV4 - 692)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 692)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 692)) | (1 << (mysqlParser.IS_IPV6 - 692)) | (1 << (mysqlParser.IS_USED_LOCK - 692)) | (1 << (mysqlParser.LAST_INSERT_ID - 692)) | (1 << (mysqlParser.LCASE - 692)) | (1 << (mysqlParser.LEAST - 692)) | (1 << (mysqlParser.LENGTH - 692)) | (1 << (mysqlParser.LINEFROMTEXT - 692)) | (1 << (mysqlParser.LINEFROMWKB - 692)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 692)) | (1 << (mysqlParser.LN - 692)) | (1 << (mysqlParser.LOAD_FILE - 692)) | (1 << (mysqlParser.LOCATE - 692)) | (1 << (mysqlParser.LOG - 692)) | (1 << (mysqlParser.LOG10 - 692)) | (1 << (mysqlParser.LOG2 - 692)) | (1 << (mysqlParser.LOWER - 692)) | (1 << (mysqlParser.LPAD - 692)) | (1 << (mysqlParser.LTRIM - 692)) | (1 << (mysqlParser.MAKEDATE - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (mysqlParser.MAKETIME - 756)) | (1 << (mysqlParser.MAKE_SET - 756)) | (1 << (mysqlParser.MASTER_POS_WAIT - 756)) | (1 << (mysqlParser.MBRCONTAINS - 756)) | (1 << (mysqlParser.MBRDISJOINT - 756)) | (1 << (mysqlParser.MBREQUAL - 756)) | (1 << (mysqlParser.MBRINTERSECTS - 756)) | (1 << (mysqlParser.MBROVERLAPS - 756)) | (1 << (mysqlParser.MBRTOUCHES - 756)) | (1 << (mysqlParser.MBRWITHIN - 756)) | (1 << (mysqlParser.MD5 - 756)) | (1 << (mysqlParser.MLINEFROMTEXT - 756)) | (1 << (mysqlParser.MLINEFROMWKB - 756)) | (1 << (mysqlParser.MONTHNAME - 756)) | (1 << (mysqlParser.MPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MPOINTFROMWKB - 756)) | (1 << (mysqlParser.MPOLYFROMTEXT - 756)) | (1 << (mysqlParser.MPOLYFROMWKB - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (mysqlParser.NAME_CONST - 756)) | (1 << (mysqlParser.NULLIF - 756)) | (1 << (mysqlParser.NUMGEOMETRIES - 756)) | (1 << (mysqlParser.NUMINTERIORRINGS - 756)) | (1 << (mysqlParser.NUMPOINTS - 756)) | (1 << (mysqlParser.OCT - 756)) | (1 << (mysqlParser.OCTET_LENGTH - 756)) | (1 << (mysqlParser.ORD - 756)) | (1 << (mysqlParser.OVERLAPS - 756)) | (1 << (mysqlParser.PERIOD_ADD - 756)) | (1 << (mysqlParser.PERIOD_DIFF - 756)) | (1 << (mysqlParser.PI - 756)) | (1 << (mysqlParser.POINTFROMTEXT - 756)) | (1 << (mysqlParser.POINTFROMWKB - 756)) | (1 << (mysqlParser.POINTN - 756)) | (1 << (mysqlParser.POLYFROMTEXT - 756)) | (1 << (mysqlParser.POLYFROMWKB - 756)) | (1 << (mysqlParser.POLYGONFROMTEXT - 756)) | (1 << (mysqlParser.POLYGONFROMWKB - 756)) | (1 << (mysqlParser.POW - 756)) | (1 << (mysqlParser.POWER - 756)) | (1 << (mysqlParser.QUOTE - 756)) | (1 << (mysqlParser.RADIANS - 756)) | (1 << (mysqlParser.RAND - 756)) | (1 << (mysqlParser.RANDOM_BYTES - 756)) | (1 << (mysqlParser.RELEASE_LOCK - 756)) | (1 << (mysqlParser.REVERSE - 756)) | (1 << (mysqlParser.ROUND - 756)) | (1 << (mysqlParser.ROW_COUNT - 756)) | (1 << (mysqlParser.RPAD - 756)) | (1 << (mysqlParser.RTRIM - 756)) | (1 << (mysqlParser.SEC_TO_TIME - 756)) | (1 << (mysqlParser.SESSION_USER - 756)) | (1 << (mysqlParser.SHA - 756)) | (1 << (mysqlParser.SHA1 - 756)) | (1 << (mysqlParser.SHA2 - 756)) | (1 << (mysqlParser.SIGN - 756)) | (1 << (mysqlParser.SIN - 756)) | (1 << (mysqlParser.SLEEP - 756)) | (1 << (mysqlParser.SOUNDEX - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (mysqlParser.SQRT - 820)) | (1 << (mysqlParser.SRID - 820)) | (1 << (mysqlParser.STARTPOINT - 820)) | (1 << (mysqlParser.STRCMP - 820)) | (1 << (mysqlParser.STR_TO_DATE - 820)) | (1 << (mysqlParser.ST_AREA - 820)) | (1 << (mysqlParser.ST_ASBINARY - 820)) | (1 << (mysqlParser.ST_ASTEXT - 820)) | (1 << (mysqlParser.ST_ASWKB - 820)) | (1 << (mysqlParser.ST_ASWKT - 820)) | (1 << (mysqlParser.ST_BUFFER - 820)) | (1 << (mysqlParser.ST_CENTROID - 820)) | (1 << (mysqlParser.ST_CONTAINS - 820)) | (1 << (mysqlParser.ST_CROSSES - 820)) | (1 << (mysqlParser.ST_DIFFERENCE - 820)) | (1 << (mysqlParser.ST_DIMENSION - 820)) | (1 << (mysqlParser.ST_DISJOINT - 820)) | (1 << (mysqlParser.ST_DISTANCE - 820)) | (1 << (mysqlParser.ST_ENDPOINT - 820)) | (1 << (mysqlParser.ST_ENVELOPE - 820)) | (1 << (mysqlParser.ST_EQUALS - 820)) | (1 << (mysqlParser.ST_EXTERIORRING - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYN - 820)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 820)) | (1 << (mysqlParser.ST_INTERIORRINGN - 820)) | (1 << (mysqlParser.ST_INTERSECTION - 820)) | (1 << (mysqlParser.ST_INTERSECTS - 820)) | (1 << (mysqlParser.ST_ISCLOSED - 820)) | (1 << (mysqlParser.ST_ISEMPTY - 820)) | (1 << (mysqlParser.ST_ISSIMPLE - 820)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINEFROMWKB - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (mysqlParser.ST_NUMPOINTS - 820)) | (1 << (mysqlParser.ST_OVERLAPS - 820)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 820)) | (1 << (mysqlParser.ST_POINTFROMWKB - 820)) | (1 << (mysqlParser.ST_POINTN - 820)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYFROMWKB - 820)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (mysqlParser.ST_SRID - 820)) | (1 << (mysqlParser.ST_STARTPOINT - 820)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (mysqlParser.ST_TOUCHES - 820)) | (1 << (mysqlParser.ST_UNION - 820)) | (1 << (mysqlParser.ST_WITHIN - 820)) | (1 << (mysqlParser.ST_X - 820)) | (1 << (mysqlParser.ST_Y - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (mysqlParser.SUBDATE - 884)) | (1 << (mysqlParser.SUBSTRING_INDEX - 884)) | (1 << (mysqlParser.SUBTIME - 884)) | (1 << (mysqlParser.SYSTEM_USER - 884)) | (1 << (mysqlParser.TAN - 884)) | (1 << (mysqlParser.TIMEDIFF - 884)) | (1 << (mysqlParser.TIMESTAMPADD - 884)) | (1 << (mysqlParser.TIMESTAMPDIFF - 884)) | (1 << (mysqlParser.TIME_FORMAT - 884)) | (1 << (mysqlParser.TIME_TO_SEC - 884)) | (1 << (mysqlParser.TOUCHES - 884)) | (1 << (mysqlParser.TO_BASE64 - 884)) | (1 << (mysqlParser.TO_DAYS - 884)) | (1 << (mysqlParser.TO_SECONDS - 884)) | (1 << (mysqlParser.UCASE - 884)) | (1 << (mysqlParser.UNCOMPRESS - 884)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (mysqlParser.UNHEX - 884)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 884)) | (1 << (mysqlParser.UPDATEXML - 884)) | (1 << (mysqlParser.UPPER - 884)) | (1 << (mysqlParser.UUID - 884)) | (1 << (mysqlParser.UUID_SHORT - 884)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (mysqlParser.VERSION - 884)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (mysqlParser.WEEKDAY - 884)) | (1 << (mysqlParser.WEEKOFYEAR - 884)) | (1 << (mysqlParser.WEIGHT_STRING - 884)) | (1 << (mysqlParser.WITHIN - 884)) | (1 << (mysqlParser.YEARWEEK - 884)) | (1 << (mysqlParser.Y_FUNCTION - 884)) | (1 << (mysqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 954)) & ~0x3f) == 0 and ((1 << (_la - 954)) & ((1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 954)) | (1 << (mysqlParser.ID - 954)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 954)))) != 0):
                self.state = 3979
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(mysqlParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStatement" ):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)




    def returnStatement(self):

        localctx = mysqlParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3982
            self.match(mysqlParser.RETURN)
            self.state = 3983
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WhileStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.WHILE)
            else:
                return self.getToken(mysqlParser.WHILE, i)

        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)


        def DO(self):
            return self.getToken(mysqlParser.DO, 0)

        def END(self):
            return self.getToken(mysqlParser.END, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UidContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UidContext,i)


        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(mysqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStatement" ):
                return visitor.visitWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def whileStatement(self):

        localctx = mysqlParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_whileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3988
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.LEFT or _la==mysqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (mysqlParser.DATE - 180)) | (1 << (mysqlParser.TIME - 180)) | (1 << (mysqlParser.TIMESTAMP - 180)) | (1 << (mysqlParser.DATETIME - 180)) | (1 << (mysqlParser.YEAR - 180)) | (1 << (mysqlParser.TEXT - 180)) | (1 << (mysqlParser.ENUM - 180)) | (1 << (mysqlParser.COUNT - 180)) | (1 << (mysqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (mysqlParser.ACCOUNT - 244)) | (1 << (mysqlParser.ACTION - 244)) | (1 << (mysqlParser.AFTER - 244)) | (1 << (mysqlParser.AGGREGATE - 244)) | (1 << (mysqlParser.ALGORITHM - 244)) | (1 << (mysqlParser.ANY - 244)) | (1 << (mysqlParser.AT - 244)) | (1 << (mysqlParser.AUTHORS - 244)) | (1 << (mysqlParser.AUTOCOMMIT - 244)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (mysqlParser.AUTO_INCREMENT - 244)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 244)) | (1 << (mysqlParser.BEGIN - 244)) | (1 << (mysqlParser.BINLOG - 244)) | (1 << (mysqlParser.BIT - 244)) | (1 << (mysqlParser.BLOCK - 244)) | (1 << (mysqlParser.BTREE - 244)) | (1 << (mysqlParser.CASCADED - 244)) | (1 << (mysqlParser.CHAIN - 244)) | (1 << (mysqlParser.CHANNEL - 244)) | (1 << (mysqlParser.CHECKSUM - 244)) | (1 << (mysqlParser.CIPHER - 244)) | (1 << (mysqlParser.CLIENT - 244)) | (1 << (mysqlParser.COALESCE - 244)) | (1 << (mysqlParser.CODE - 244)) | (1 << (mysqlParser.COLUMNS - 244)) | (1 << (mysqlParser.COLUMN_FORMAT - 244)) | (1 << (mysqlParser.COMMENT - 244)) | (1 << (mysqlParser.COMMIT - 244)) | (1 << (mysqlParser.COMPACT - 244)) | (1 << (mysqlParser.COMPLETION - 244)) | (1 << (mysqlParser.COMPRESSED - 244)) | (1 << (mysqlParser.COMPRESSION - 244)) | (1 << (mysqlParser.CONCURRENT - 244)) | (1 << (mysqlParser.CONNECTION - 244)) | (1 << (mysqlParser.CONSISTENT - 244)) | (1 << (mysqlParser.CONTAINS - 244)) | (1 << (mysqlParser.CONTEXT - 244)) | (1 << (mysqlParser.CONTRIBUTORS - 244)) | (1 << (mysqlParser.COPY - 244)) | (1 << (mysqlParser.CPU - 244)) | (1 << (mysqlParser.DATA - 244)) | (1 << (mysqlParser.DATAFILE - 244)) | (1 << (mysqlParser.DEALLOCATE - 244)) | (1 << (mysqlParser.DEFAULT_AUTH - 244)) | (1 << (mysqlParser.DEFINER - 244)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 244)) | (1 << (mysqlParser.DIRECTORY - 244)) | (1 << (mysqlParser.DISABLE - 244)) | (1 << (mysqlParser.DISCARD - 244)) | (1 << (mysqlParser.DISK - 244)) | (1 << (mysqlParser.DO - 244)) | (1 << (mysqlParser.DUMPFILE - 244)) | (1 << (mysqlParser.DUPLICATE - 244)) | (1 << (mysqlParser.DYNAMIC - 244)) | (1 << (mysqlParser.ENABLE - 244)) | (1 << (mysqlParser.ENCRYPTION - 244)) | (1 << (mysqlParser.ENDS - 244)) | (1 << (mysqlParser.ENGINE - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (mysqlParser.ENGINES - 308)) | (1 << (mysqlParser.ERROR - 308)) | (1 << (mysqlParser.ERRORS - 308)) | (1 << (mysqlParser.ESCAPE - 308)) | (1 << (mysqlParser.EVEN - 308)) | (1 << (mysqlParser.EVENT - 308)) | (1 << (mysqlParser.EVENTS - 308)) | (1 << (mysqlParser.EVERY - 308)) | (1 << (mysqlParser.EXCHANGE - 308)) | (1 << (mysqlParser.EXCLUSIVE - 308)) | (1 << (mysqlParser.EXPIRE - 308)) | (1 << (mysqlParser.EXTENT_SIZE - 308)) | (1 << (mysqlParser.FAULTS - 308)) | (1 << (mysqlParser.FIELDS - 308)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (mysqlParser.FILTER - 308)) | (1 << (mysqlParser.FIRST - 308)) | (1 << (mysqlParser.FIXED - 308)) | (1 << (mysqlParser.FOLLOWS - 308)) | (1 << (mysqlParser.FULL - 308)) | (1 << (mysqlParser.FUNCTION - 308)) | (1 << (mysqlParser.GLOBAL - 308)) | (1 << (mysqlParser.GRANTS - 308)) | (1 << (mysqlParser.GROUP_REPLICATION - 308)) | (1 << (mysqlParser.HASH - 308)) | (1 << (mysqlParser.HOST - 308)) | (1 << (mysqlParser.IDENTIFIED - 308)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (mysqlParser.IMPORT - 308)) | (1 << (mysqlParser.INDEXES - 308)) | (1 << (mysqlParser.INITIAL_SIZE - 308)) | (1 << (mysqlParser.INPLACE - 308)) | (1 << (mysqlParser.INSERT_METHOD - 308)) | (1 << (mysqlParser.INSTANCE - 308)) | (1 << (mysqlParser.INVOKER - 308)) | (1 << (mysqlParser.IO - 308)) | (1 << (mysqlParser.IO_THREAD - 308)) | (1 << (mysqlParser.IPC - 308)) | (1 << (mysqlParser.ISOLATION - 308)) | (1 << (mysqlParser.ISSUER - 308)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (mysqlParser.LANGUAGE - 308)) | (1 << (mysqlParser.LAST - 308)) | (1 << (mysqlParser.LEAVES - 308)) | (1 << (mysqlParser.LESS - 308)) | (1 << (mysqlParser.LEVEL - 308)) | (1 << (mysqlParser.LIST - 308)) | (1 << (mysqlParser.LOCAL - 308)) | (1 << (mysqlParser.LOGFILE - 308)) | (1 << (mysqlParser.LOGS - 308)) | (1 << (mysqlParser.MASTER - 308)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 308)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (mysqlParser.MASTER_DELAY - 372)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (mysqlParser.MASTER_HOST - 372)) | (1 << (mysqlParser.MASTER_LOG_FILE - 372)) | (1 << (mysqlParser.MASTER_LOG_POS - 372)) | (1 << (mysqlParser.MASTER_PASSWORD - 372)) | (1 << (mysqlParser.MASTER_PORT - 372)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (mysqlParser.MASTER_SSL - 372)) | (1 << (mysqlParser.MASTER_SSL_CA - 372)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_CERT - 372)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (mysqlParser.MASTER_SSL_CRL - 372)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_KEY - 372)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 372)) | (1 << (mysqlParser.MASTER_USER - 372)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_ROWS - 372)) | (1 << (mysqlParser.MAX_SIZE - 372)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (mysqlParser.MERGE - 372)) | (1 << (mysqlParser.MID - 372)) | (1 << (mysqlParser.MIGRATE - 372)) | (1 << (mysqlParser.MIN_ROWS - 372)) | (1 << (mysqlParser.MODIFY - 372)) | (1 << (mysqlParser.MUTEX - 372)) | (1 << (mysqlParser.MYSQL - 372)) | (1 << (mysqlParser.NAME - 372)) | (1 << (mysqlParser.NAMES - 372)) | (1 << (mysqlParser.NCHAR - 372)) | (1 << (mysqlParser.NEVER - 372)) | (1 << (mysqlParser.NO - 372)) | (1 << (mysqlParser.NODEGROUP - 372)) | (1 << (mysqlParser.NONE - 372)) | (1 << (mysqlParser.OFFLINE - 372)) | (1 << (mysqlParser.OFFSET - 372)) | (1 << (mysqlParser.OJ - 372)) | (1 << (mysqlParser.OLD_PASSWORD - 372)) | (1 << (mysqlParser.ONE - 372)) | (1 << (mysqlParser.ONLINE - 372)) | (1 << (mysqlParser.ONLY - 372)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 372)) | (1 << (mysqlParser.OPTIONS - 372)) | (1 << (mysqlParser.OWNER - 372)) | (1 << (mysqlParser.PACK_KEYS - 372)) | (1 << (mysqlParser.PAGE - 372)) | (1 << (mysqlParser.PARSER - 372)) | (1 << (mysqlParser.PARTIAL - 372)) | (1 << (mysqlParser.PARTITIONING - 372)) | (1 << (mysqlParser.PARTITIONS - 372)) | (1 << (mysqlParser.PASSWORD - 372)) | (1 << (mysqlParser.PHASE - 372)) | (1 << (mysqlParser.PLUGIN_DIR - 372)) | (1 << (mysqlParser.PLUGINS - 372)) | (1 << (mysqlParser.PORT - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (mysqlParser.PRECEDES - 436)) | (1 << (mysqlParser.PREPARE - 436)) | (1 << (mysqlParser.PRESERVE - 436)) | (1 << (mysqlParser.PREV - 436)) | (1 << (mysqlParser.PROCESSLIST - 436)) | (1 << (mysqlParser.PROFILE - 436)) | (1 << (mysqlParser.PROFILES - 436)) | (1 << (mysqlParser.PROXY - 436)) | (1 << (mysqlParser.QUERY - 436)) | (1 << (mysqlParser.QUICK - 436)) | (1 << (mysqlParser.REBUILD - 436)) | (1 << (mysqlParser.RECOVER - 436)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (mysqlParser.REDUNDANT - 436)) | (1 << (mysqlParser.RELAY_LOG_FILE - 436)) | (1 << (mysqlParser.RELAY_LOG_POS - 436)) | (1 << (mysqlParser.RELAYLOG - 436)) | (1 << (mysqlParser.REMOVE - 436)) | (1 << (mysqlParser.REORGANIZE - 436)) | (1 << (mysqlParser.REPAIR - 436)) | (1 << (mysqlParser.REPLICATE_DO_DB - 436)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATION - 436)) | (1 << (mysqlParser.RESUME - 436)) | (1 << (mysqlParser.RETURNS - 436)) | (1 << (mysqlParser.ROLLBACK - 436)) | (1 << (mysqlParser.ROLLUP - 436)) | (1 << (mysqlParser.ROTATE - 436)) | (1 << (mysqlParser.ROW - 436)) | (1 << (mysqlParser.ROWS - 436)) | (1 << (mysqlParser.ROW_FORMAT - 436)) | (1 << (mysqlParser.SAVEPOINT - 436)) | (1 << (mysqlParser.SCHEDULE - 436)) | (1 << (mysqlParser.SECURITY - 436)) | (1 << (mysqlParser.SERVER - 436)) | (1 << (mysqlParser.SESSION - 436)) | (1 << (mysqlParser.SHARE - 436)) | (1 << (mysqlParser.SHARED - 436)) | (1 << (mysqlParser.SIGNED - 436)) | (1 << (mysqlParser.SIMPLE - 436)) | (1 << (mysqlParser.SLAVE - 436)) | (1 << (mysqlParser.SNAPSHOT - 436)) | (1 << (mysqlParser.SOCKET - 436)) | (1 << (mysqlParser.SOME - 436)) | (1 << (mysqlParser.SOUNDS - 436)) | (1 << (mysqlParser.SOURCE - 436)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (mysqlParser.SQL_CACHE - 436)) | (1 << (mysqlParser.SQL_NO_CACHE - 436)) | (1 << (mysqlParser.SQL_THREAD - 436)) | (1 << (mysqlParser.START - 436)) | (1 << (mysqlParser.STARTS - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (mysqlParser.STATS_AUTO_RECALC - 500)) | (1 << (mysqlParser.STATS_PERSISTENT - 500)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (mysqlParser.STATUS - 500)) | (1 << (mysqlParser.STOP - 500)) | (1 << (mysqlParser.STORAGE - 500)) | (1 << (mysqlParser.STRING - 500)) | (1 << (mysqlParser.SUBJECT - 500)) | (1 << (mysqlParser.SUBPARTITION - 500)) | (1 << (mysqlParser.SUBPARTITIONS - 500)) | (1 << (mysqlParser.SUSPEND - 500)) | (1 << (mysqlParser.SWAPS - 500)) | (1 << (mysqlParser.SWITCHES - 500)) | (1 << (mysqlParser.TABLESPACE - 500)) | (1 << (mysqlParser.TEMPORARY - 500)) | (1 << (mysqlParser.TEMPTABLE - 500)) | (1 << (mysqlParser.THAN - 500)) | (1 << (mysqlParser.TRANSACTION - 500)) | (1 << (mysqlParser.TRUNCATE - 500)) | (1 << (mysqlParser.UNDEFINED - 500)) | (1 << (mysqlParser.UNDOFILE - 500)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (mysqlParser.UNKNOWN - 500)) | (1 << (mysqlParser.UPGRADE - 500)) | (1 << (mysqlParser.USER - 500)) | (1 << (mysqlParser.VALIDATION - 500)) | (1 << (mysqlParser.VALUE - 500)) | (1 << (mysqlParser.VARIABLES - 500)) | (1 << (mysqlParser.VIEW - 500)) | (1 << (mysqlParser.WAIT - 500)) | (1 << (mysqlParser.WARNINGS - 500)) | (1 << (mysqlParser.WITHOUT - 500)) | (1 << (mysqlParser.WORK - 500)) | (1 << (mysqlParser.WRAPPER - 500)) | (1 << (mysqlParser.X509 - 500)) | (1 << (mysqlParser.XA - 500)) | (1 << (mysqlParser.XML - 500)) | (1 << (mysqlParser.QUARTER - 500)) | (1 << (mysqlParser.MONTH - 500)) | (1 << (mysqlParser.DAY - 500)) | (1 << (mysqlParser.HOUR - 500)) | (1 << (mysqlParser.MINUTE - 500)) | (1 << (mysqlParser.WEEK - 500)) | (1 << (mysqlParser.SECOND - 500)) | (1 << (mysqlParser.MICROSECOND - 500)) | (1 << (mysqlParser.TABLES - 500)) | (1 << (mysqlParser.ROUTINE - 500)) | (1 << (mysqlParser.EXECUTE - 500)) | (1 << (mysqlParser.FILE - 500)) | (1 << (mysqlParser.PROCESS - 500)) | (1 << (mysqlParser.RELOAD - 500)) | (1 << (mysqlParser.SHUTDOWN - 500)) | (1 << (mysqlParser.SUPER - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (mysqlParser.PRIVILEGES - 564)) | (1 << (mysqlParser.ARMSCII8 - 564)) | (1 << (mysqlParser.ASCII - 564)) | (1 << (mysqlParser.BIG5 - 564)) | (1 << (mysqlParser.CP1250 - 564)) | (1 << (mysqlParser.CP1251 - 564)) | (1 << (mysqlParser.CP1256 - 564)) | (1 << (mysqlParser.CP1257 - 564)) | (1 << (mysqlParser.CP850 - 564)) | (1 << (mysqlParser.CP852 - 564)) | (1 << (mysqlParser.CP866 - 564)) | (1 << (mysqlParser.CP932 - 564)) | (1 << (mysqlParser.DEC8 - 564)) | (1 << (mysqlParser.EUCJPMS - 564)) | (1 << (mysqlParser.EUCKR - 564)) | (1 << (mysqlParser.GB2312 - 564)) | (1 << (mysqlParser.GBK - 564)) | (1 << (mysqlParser.GEOSTD8 - 564)) | (1 << (mysqlParser.GREEK - 564)) | (1 << (mysqlParser.HEBREW - 564)) | (1 << (mysqlParser.HP8 - 564)) | (1 << (mysqlParser.KEYBCS2 - 564)) | (1 << (mysqlParser.KOI8R - 564)) | (1 << (mysqlParser.KOI8U - 564)) | (1 << (mysqlParser.LATIN1 - 564)) | (1 << (mysqlParser.LATIN2 - 564)) | (1 << (mysqlParser.LATIN5 - 564)) | (1 << (mysqlParser.LATIN7 - 564)) | (1 << (mysqlParser.MACCE - 564)) | (1 << (mysqlParser.MACROMAN - 564)) | (1 << (mysqlParser.SJIS - 564)) | (1 << (mysqlParser.SWE7 - 564)) | (1 << (mysqlParser.TIS620 - 564)) | (1 << (mysqlParser.UCS2 - 564)) | (1 << (mysqlParser.UJIS - 564)) | (1 << (mysqlParser.UTF16 - 564)) | (1 << (mysqlParser.UTF16LE - 564)) | (1 << (mysqlParser.UTF32 - 564)) | (1 << (mysqlParser.UTF8 - 564)) | (1 << (mysqlParser.UTF8MB3 - 564)) | (1 << (mysqlParser.UTF8MB4 - 564)) | (1 << (mysqlParser.ARCHIVE - 564)) | (1 << (mysqlParser.BLACKHOLE - 564)) | (1 << (mysqlParser.CSV - 564)) | (1 << (mysqlParser.FEDERATED - 564)) | (1 << (mysqlParser.INNODB - 564)) | (1 << (mysqlParser.MEMORY - 564)) | (1 << (mysqlParser.MRG_MYISAM - 564)) | (1 << (mysqlParser.MYISAM - 564)) | (1 << (mysqlParser.NDB - 564)) | (1 << (mysqlParser.NDBCLUSTER - 564)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (mysqlParser.REPEATABLE - 564)) | (1 << (mysqlParser.COMMITTED - 564)) | (1 << (mysqlParser.UNCOMMITTED - 564)) | (1 << (mysqlParser.SERIALIZABLE - 564)) | (1 << (mysqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (mysqlParser.LINESTRING - 564)) | (1 << (mysqlParser.MULTILINESTRING - 564)) | (1 << (mysqlParser.MULTIPOINT - 564)) | (1 << (mysqlParser.MULTIPOLYGON - 564)) | (1 << (mysqlParser.POINT - 564)) | (1 << (mysqlParser.POLYGON - 564)) | (1 << (mysqlParser.ABS - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (mysqlParser.ACOS - 628)) | (1 << (mysqlParser.ADDDATE - 628)) | (1 << (mysqlParser.ADDTIME - 628)) | (1 << (mysqlParser.AES_DECRYPT - 628)) | (1 << (mysqlParser.AES_ENCRYPT - 628)) | (1 << (mysqlParser.AREA - 628)) | (1 << (mysqlParser.ASBINARY - 628)) | (1 << (mysqlParser.ASIN - 628)) | (1 << (mysqlParser.ASTEXT - 628)) | (1 << (mysqlParser.ASWKB - 628)) | (1 << (mysqlParser.ASWKT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (mysqlParser.ATAN - 628)) | (1 << (mysqlParser.ATAN2 - 628)) | (1 << (mysqlParser.BENCHMARK - 628)) | (1 << (mysqlParser.BIN - 628)) | (1 << (mysqlParser.BIT_COUNT - 628)) | (1 << (mysqlParser.BIT_LENGTH - 628)) | (1 << (mysqlParser.BUFFER - 628)) | (1 << (mysqlParser.CEIL - 628)) | (1 << (mysqlParser.CEILING - 628)) | (1 << (mysqlParser.CENTROID - 628)) | (1 << (mysqlParser.CHARACTER_LENGTH - 628)) | (1 << (mysqlParser.CHARSET - 628)) | (1 << (mysqlParser.CHAR_LENGTH - 628)) | (1 << (mysqlParser.COERCIBILITY - 628)) | (1 << (mysqlParser.COLLATION - 628)) | (1 << (mysqlParser.COMPRESS - 628)) | (1 << (mysqlParser.CONCAT - 628)) | (1 << (mysqlParser.CONCAT_WS - 628)) | (1 << (mysqlParser.CONNECTION_ID - 628)) | (1 << (mysqlParser.CONV - 628)) | (1 << (mysqlParser.CONVERT_TZ - 628)) | (1 << (mysqlParser.COS - 628)) | (1 << (mysqlParser.COT - 628)) | (1 << (mysqlParser.CRC32 - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (mysqlParser.CREATE_DIGEST - 628)) | (1 << (mysqlParser.CROSSES - 628)) | (1 << (mysqlParser.DATEDIFF - 628)) | (1 << (mysqlParser.DATE_FORMAT - 628)) | (1 << (mysqlParser.DAYNAME - 628)) | (1 << (mysqlParser.DAYOFMONTH - 628)) | (1 << (mysqlParser.DAYOFWEEK - 628)) | (1 << (mysqlParser.DAYOFYEAR - 628)) | (1 << (mysqlParser.DECODE - 628)) | (1 << (mysqlParser.DEGREES - 628)) | (1 << (mysqlParser.DES_DECRYPT - 628)) | (1 << (mysqlParser.DES_ENCRYPT - 628)) | (1 << (mysqlParser.DIMENSION - 628)) | (1 << (mysqlParser.DISJOINT - 628)) | (1 << (mysqlParser.ELT - 628)) | (1 << (mysqlParser.ENCODE - 628)) | (1 << (mysqlParser.ENCRYPT - 628)) | (1 << (mysqlParser.ENDPOINT - 628)) | (1 << (mysqlParser.ENVELOPE - 628)) | (1 << (mysqlParser.EQUALS - 628)) | (1 << (mysqlParser.EXP - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (mysqlParser.EXPORT_SET - 692)) | (1 << (mysqlParser.EXTERIORRING - 692)) | (1 << (mysqlParser.EXTRACTVALUE - 692)) | (1 << (mysqlParser.FIELD - 692)) | (1 << (mysqlParser.FIND_IN_SET - 692)) | (1 << (mysqlParser.FLOOR - 692)) | (1 << (mysqlParser.FORMAT - 692)) | (1 << (mysqlParser.FOUND_ROWS - 692)) | (1 << (mysqlParser.FROM_BASE64 - 692)) | (1 << (mysqlParser.FROM_DAYS - 692)) | (1 << (mysqlParser.FROM_UNIXTIME - 692)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYN - 692)) | (1 << (mysqlParser.GEOMETRYTYPE - 692)) | (1 << (mysqlParser.GEOMFROMTEXT - 692)) | (1 << (mysqlParser.GEOMFROMWKB - 692)) | (1 << (mysqlParser.GET_FORMAT - 692)) | (1 << (mysqlParser.GET_LOCK - 692)) | (1 << (mysqlParser.GLENGTH - 692)) | (1 << (mysqlParser.GREATEST - 692)) | (1 << (mysqlParser.GTID_SUBSET - 692)) | (1 << (mysqlParser.GTID_SUBTRACT - 692)) | (1 << (mysqlParser.HEX - 692)) | (1 << (mysqlParser.IFNULL - 692)) | (1 << (mysqlParser.INET6_ATON - 692)) | (1 << (mysqlParser.INET6_NTOA - 692)) | (1 << (mysqlParser.INET_ATON - 692)) | (1 << (mysqlParser.INET_NTOA - 692)) | (1 << (mysqlParser.INSTR - 692)) | (1 << (mysqlParser.INTERIORRINGN - 692)) | (1 << (mysqlParser.INTERSECTS - 692)) | (1 << (mysqlParser.ISCLOSED - 692)) | (1 << (mysqlParser.ISEMPTY - 692)) | (1 << (mysqlParser.ISNULL - 692)) | (1 << (mysqlParser.ISSIMPLE - 692)) | (1 << (mysqlParser.IS_FREE_LOCK - 692)) | (1 << (mysqlParser.IS_IPV4 - 692)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 692)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 692)) | (1 << (mysqlParser.IS_IPV6 - 692)) | (1 << (mysqlParser.IS_USED_LOCK - 692)) | (1 << (mysqlParser.LAST_INSERT_ID - 692)) | (1 << (mysqlParser.LCASE - 692)) | (1 << (mysqlParser.LEAST - 692)) | (1 << (mysqlParser.LENGTH - 692)) | (1 << (mysqlParser.LINEFROMTEXT - 692)) | (1 << (mysqlParser.LINEFROMWKB - 692)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 692)) | (1 << (mysqlParser.LN - 692)) | (1 << (mysqlParser.LOAD_FILE - 692)) | (1 << (mysqlParser.LOCATE - 692)) | (1 << (mysqlParser.LOG - 692)) | (1 << (mysqlParser.LOG10 - 692)) | (1 << (mysqlParser.LOG2 - 692)) | (1 << (mysqlParser.LOWER - 692)) | (1 << (mysqlParser.LPAD - 692)) | (1 << (mysqlParser.LTRIM - 692)) | (1 << (mysqlParser.MAKEDATE - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (mysqlParser.MAKETIME - 756)) | (1 << (mysqlParser.MAKE_SET - 756)) | (1 << (mysqlParser.MASTER_POS_WAIT - 756)) | (1 << (mysqlParser.MBRCONTAINS - 756)) | (1 << (mysqlParser.MBRDISJOINT - 756)) | (1 << (mysqlParser.MBREQUAL - 756)) | (1 << (mysqlParser.MBRINTERSECTS - 756)) | (1 << (mysqlParser.MBROVERLAPS - 756)) | (1 << (mysqlParser.MBRTOUCHES - 756)) | (1 << (mysqlParser.MBRWITHIN - 756)) | (1 << (mysqlParser.MD5 - 756)) | (1 << (mysqlParser.MLINEFROMTEXT - 756)) | (1 << (mysqlParser.MLINEFROMWKB - 756)) | (1 << (mysqlParser.MONTHNAME - 756)) | (1 << (mysqlParser.MPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MPOINTFROMWKB - 756)) | (1 << (mysqlParser.MPOLYFROMTEXT - 756)) | (1 << (mysqlParser.MPOLYFROMWKB - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (mysqlParser.NAME_CONST - 756)) | (1 << (mysqlParser.NULLIF - 756)) | (1 << (mysqlParser.NUMGEOMETRIES - 756)) | (1 << (mysqlParser.NUMINTERIORRINGS - 756)) | (1 << (mysqlParser.NUMPOINTS - 756)) | (1 << (mysqlParser.OCT - 756)) | (1 << (mysqlParser.OCTET_LENGTH - 756)) | (1 << (mysqlParser.ORD - 756)) | (1 << (mysqlParser.OVERLAPS - 756)) | (1 << (mysqlParser.PERIOD_ADD - 756)) | (1 << (mysqlParser.PERIOD_DIFF - 756)) | (1 << (mysqlParser.PI - 756)) | (1 << (mysqlParser.POINTFROMTEXT - 756)) | (1 << (mysqlParser.POINTFROMWKB - 756)) | (1 << (mysqlParser.POINTN - 756)) | (1 << (mysqlParser.POLYFROMTEXT - 756)) | (1 << (mysqlParser.POLYFROMWKB - 756)) | (1 << (mysqlParser.POLYGONFROMTEXT - 756)) | (1 << (mysqlParser.POLYGONFROMWKB - 756)) | (1 << (mysqlParser.POW - 756)) | (1 << (mysqlParser.POWER - 756)) | (1 << (mysqlParser.QUOTE - 756)) | (1 << (mysqlParser.RADIANS - 756)) | (1 << (mysqlParser.RAND - 756)) | (1 << (mysqlParser.RANDOM_BYTES - 756)) | (1 << (mysqlParser.RELEASE_LOCK - 756)) | (1 << (mysqlParser.REVERSE - 756)) | (1 << (mysqlParser.ROUND - 756)) | (1 << (mysqlParser.ROW_COUNT - 756)) | (1 << (mysqlParser.RPAD - 756)) | (1 << (mysqlParser.RTRIM - 756)) | (1 << (mysqlParser.SEC_TO_TIME - 756)) | (1 << (mysqlParser.SESSION_USER - 756)) | (1 << (mysqlParser.SHA - 756)) | (1 << (mysqlParser.SHA1 - 756)) | (1 << (mysqlParser.SHA2 - 756)) | (1 << (mysqlParser.SIGN - 756)) | (1 << (mysqlParser.SIN - 756)) | (1 << (mysqlParser.SLEEP - 756)) | (1 << (mysqlParser.SOUNDEX - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (mysqlParser.SQRT - 820)) | (1 << (mysqlParser.SRID - 820)) | (1 << (mysqlParser.STARTPOINT - 820)) | (1 << (mysqlParser.STRCMP - 820)) | (1 << (mysqlParser.STR_TO_DATE - 820)) | (1 << (mysqlParser.ST_AREA - 820)) | (1 << (mysqlParser.ST_ASBINARY - 820)) | (1 << (mysqlParser.ST_ASTEXT - 820)) | (1 << (mysqlParser.ST_ASWKB - 820)) | (1 << (mysqlParser.ST_ASWKT - 820)) | (1 << (mysqlParser.ST_BUFFER - 820)) | (1 << (mysqlParser.ST_CENTROID - 820)) | (1 << (mysqlParser.ST_CONTAINS - 820)) | (1 << (mysqlParser.ST_CROSSES - 820)) | (1 << (mysqlParser.ST_DIFFERENCE - 820)) | (1 << (mysqlParser.ST_DIMENSION - 820)) | (1 << (mysqlParser.ST_DISJOINT - 820)) | (1 << (mysqlParser.ST_DISTANCE - 820)) | (1 << (mysqlParser.ST_ENDPOINT - 820)) | (1 << (mysqlParser.ST_ENVELOPE - 820)) | (1 << (mysqlParser.ST_EQUALS - 820)) | (1 << (mysqlParser.ST_EXTERIORRING - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYN - 820)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 820)) | (1 << (mysqlParser.ST_INTERIORRINGN - 820)) | (1 << (mysqlParser.ST_INTERSECTION - 820)) | (1 << (mysqlParser.ST_INTERSECTS - 820)) | (1 << (mysqlParser.ST_ISCLOSED - 820)) | (1 << (mysqlParser.ST_ISEMPTY - 820)) | (1 << (mysqlParser.ST_ISSIMPLE - 820)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINEFROMWKB - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (mysqlParser.ST_NUMPOINTS - 820)) | (1 << (mysqlParser.ST_OVERLAPS - 820)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 820)) | (1 << (mysqlParser.ST_POINTFROMWKB - 820)) | (1 << (mysqlParser.ST_POINTN - 820)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYFROMWKB - 820)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (mysqlParser.ST_SRID - 820)) | (1 << (mysqlParser.ST_STARTPOINT - 820)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (mysqlParser.ST_TOUCHES - 820)) | (1 << (mysqlParser.ST_UNION - 820)) | (1 << (mysqlParser.ST_WITHIN - 820)) | (1 << (mysqlParser.ST_X - 820)) | (1 << (mysqlParser.ST_Y - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (mysqlParser.SUBDATE - 884)) | (1 << (mysqlParser.SUBSTRING_INDEX - 884)) | (1 << (mysqlParser.SUBTIME - 884)) | (1 << (mysqlParser.SYSTEM_USER - 884)) | (1 << (mysqlParser.TAN - 884)) | (1 << (mysqlParser.TIMEDIFF - 884)) | (1 << (mysqlParser.TIMESTAMPADD - 884)) | (1 << (mysqlParser.TIMESTAMPDIFF - 884)) | (1 << (mysqlParser.TIME_FORMAT - 884)) | (1 << (mysqlParser.TIME_TO_SEC - 884)) | (1 << (mysqlParser.TOUCHES - 884)) | (1 << (mysqlParser.TO_BASE64 - 884)) | (1 << (mysqlParser.TO_DAYS - 884)) | (1 << (mysqlParser.TO_SECONDS - 884)) | (1 << (mysqlParser.UCASE - 884)) | (1 << (mysqlParser.UNCOMPRESS - 884)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (mysqlParser.UNHEX - 884)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 884)) | (1 << (mysqlParser.UPDATEXML - 884)) | (1 << (mysqlParser.UPPER - 884)) | (1 << (mysqlParser.UUID - 884)) | (1 << (mysqlParser.UUID_SHORT - 884)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (mysqlParser.VERSION - 884)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (mysqlParser.WEEKDAY - 884)) | (1 << (mysqlParser.WEEKOFYEAR - 884)) | (1 << (mysqlParser.WEIGHT_STRING - 884)) | (1 << (mysqlParser.WITHIN - 884)) | (1 << (mysqlParser.YEARWEEK - 884)) | (1 << (mysqlParser.Y_FUNCTION - 884)) | (1 << (mysqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 954)) & ~0x3f) == 0 and ((1 << (_la - 954)) & ((1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 954)) | (1 << (mysqlParser.ID - 954)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 954)))) != 0):
                self.state = 3985
                self.uid()
                self.state = 3986
                self.match(mysqlParser.COLON_SYMB)


            self.state = 3990
            self.match(mysqlParser.WHILE)
            self.state = 3991
            self.expression(0)
            self.state = 3992
            self.match(mysqlParser.DO)
            self.state = 3994 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3993
                self.procedureSqlStatement()
                self.state = 3996 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 7)) & ~0x3f) == 0 and ((1 << (_la - 7)) & ((1 << (mysqlParser.ALTER - 7)) | (1 << (mysqlParser.ANALYZE - 7)) | (1 << (mysqlParser.CALL - 7)) | (1 << (mysqlParser.CASE - 7)) | (1 << (mysqlParser.CHANGE - 7)) | (1 << (mysqlParser.CHECK - 7)) | (1 << (mysqlParser.CREATE - 7)) | (1 << (mysqlParser.DELETE - 7)) | (1 << (mysqlParser.DESC - 7)) | (1 << (mysqlParser.DESCRIBE - 7)) | (1 << (mysqlParser.DROP - 7)) | (1 << (mysqlParser.EXPLAIN - 7)) | (1 << (mysqlParser.FETCH - 7)) | (1 << (mysqlParser.GRANT - 7)) | (1 << (mysqlParser.IF - 7)))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (mysqlParser.INSERT - 71)) | (1 << (mysqlParser.ITERATE - 71)) | (1 << (mysqlParser.KILL - 71)) | (1 << (mysqlParser.LEAVE - 71)) | (1 << (mysqlParser.LEFT - 71)) | (1 << (mysqlParser.LOAD - 71)) | (1 << (mysqlParser.LOCK - 71)) | (1 << (mysqlParser.LOOP - 71)) | (1 << (mysqlParser.OPTIMIZE - 71)) | (1 << (mysqlParser.PURGE - 71)) | (1 << (mysqlParser.RELEASE - 71)) | (1 << (mysqlParser.RENAME - 71)) | (1 << (mysqlParser.REPEAT - 71)) | (1 << (mysqlParser.REPLACE - 71)) | (1 << (mysqlParser.RETURN - 71)) | (1 << (mysqlParser.REVOKE - 71)) | (1 << (mysqlParser.RIGHT - 71)) | (1 << (mysqlParser.SELECT - 71)) | (1 << (mysqlParser.SET - 71)) | (1 << (mysqlParser.SHOW - 71)))) != 0) or ((((_la - 155)) & ~0x3f) == 0 and ((1 << (_la - 155)) & ((1 << (mysqlParser.UNLOCK - 155)) | (1 << (mysqlParser.UPDATE - 155)) | (1 << (mysqlParser.USE - 155)) | (1 << (mysqlParser.WHILE - 155)) | (1 << (mysqlParser.DATE - 155)) | (1 << (mysqlParser.TIME - 155)) | (1 << (mysqlParser.TIMESTAMP - 155)) | (1 << (mysqlParser.DATETIME - 155)) | (1 << (mysqlParser.YEAR - 155)) | (1 << (mysqlParser.TEXT - 155)) | (1 << (mysqlParser.ENUM - 155)) | (1 << (mysqlParser.COUNT - 155)))) != 0) or ((((_la - 236)) & ~0x3f) == 0 and ((1 << (_la - 236)) & ((1 << (mysqlParser.POSITION - 236)) | (1 << (mysqlParser.ACCOUNT - 236)) | (1 << (mysqlParser.ACTION - 236)) | (1 << (mysqlParser.AFTER - 236)) | (1 << (mysqlParser.AGGREGATE - 236)) | (1 << (mysqlParser.ALGORITHM - 236)) | (1 << (mysqlParser.ANY - 236)) | (1 << (mysqlParser.AT - 236)) | (1 << (mysqlParser.AUTHORS - 236)) | (1 << (mysqlParser.AUTOCOMMIT - 236)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 236)) | (1 << (mysqlParser.AUTO_INCREMENT - 236)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 236)) | (1 << (mysqlParser.BEGIN - 236)) | (1 << (mysqlParser.BINLOG - 236)) | (1 << (mysqlParser.BIT - 236)) | (1 << (mysqlParser.BLOCK - 236)) | (1 << (mysqlParser.BTREE - 236)) | (1 << (mysqlParser.CACHE - 236)) | (1 << (mysqlParser.CASCADED - 236)) | (1 << (mysqlParser.CHAIN - 236)) | (1 << (mysqlParser.CHANNEL - 236)) | (1 << (mysqlParser.CHECKSUM - 236)) | (1 << (mysqlParser.CIPHER - 236)) | (1 << (mysqlParser.CLIENT - 236)) | (1 << (mysqlParser.CLOSE - 236)) | (1 << (mysqlParser.COALESCE - 236)) | (1 << (mysqlParser.CODE - 236)) | (1 << (mysqlParser.COLUMNS - 236)) | (1 << (mysqlParser.COLUMN_FORMAT - 236)) | (1 << (mysqlParser.COMMENT - 236)) | (1 << (mysqlParser.COMMIT - 236)) | (1 << (mysqlParser.COMPACT - 236)) | (1 << (mysqlParser.COMPLETION - 236)) | (1 << (mysqlParser.COMPRESSED - 236)) | (1 << (mysqlParser.COMPRESSION - 236)) | (1 << (mysqlParser.CONCURRENT - 236)) | (1 << (mysqlParser.CONNECTION - 236)) | (1 << (mysqlParser.CONSISTENT - 236)) | (1 << (mysqlParser.CONTAINS - 236)) | (1 << (mysqlParser.CONTEXT - 236)) | (1 << (mysqlParser.CONTRIBUTORS - 236)) | (1 << (mysqlParser.COPY - 236)) | (1 << (mysqlParser.CPU - 236)) | (1 << (mysqlParser.DATA - 236)) | (1 << (mysqlParser.DATAFILE - 236)) | (1 << (mysqlParser.DEALLOCATE - 236)) | (1 << (mysqlParser.DEFAULT_AUTH - 236)) | (1 << (mysqlParser.DEFINER - 236)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 236)) | (1 << (mysqlParser.DIRECTORY - 236)) | (1 << (mysqlParser.DISABLE - 236)) | (1 << (mysqlParser.DISCARD - 236)) | (1 << (mysqlParser.DISK - 236)) | (1 << (mysqlParser.DO - 236)))) != 0) or ((((_la - 300)) & ~0x3f) == 0 and ((1 << (_la - 300)) & ((1 << (mysqlParser.DUMPFILE - 300)) | (1 << (mysqlParser.DUPLICATE - 300)) | (1 << (mysqlParser.DYNAMIC - 300)) | (1 << (mysqlParser.ENABLE - 300)) | (1 << (mysqlParser.ENCRYPTION - 300)) | (1 << (mysqlParser.ENDS - 300)) | (1 << (mysqlParser.ENGINE - 300)) | (1 << (mysqlParser.ENGINES - 300)) | (1 << (mysqlParser.ERROR - 300)) | (1 << (mysqlParser.ERRORS - 300)) | (1 << (mysqlParser.ESCAPE - 300)) | (1 << (mysqlParser.EVEN - 300)) | (1 << (mysqlParser.EVENT - 300)) | (1 << (mysqlParser.EVENTS - 300)) | (1 << (mysqlParser.EVERY - 300)) | (1 << (mysqlParser.EXCHANGE - 300)) | (1 << (mysqlParser.EXCLUSIVE - 300)) | (1 << (mysqlParser.EXPIRE - 300)) | (1 << (mysqlParser.EXTENT_SIZE - 300)) | (1 << (mysqlParser.FAULTS - 300)) | (1 << (mysqlParser.FIELDS - 300)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 300)) | (1 << (mysqlParser.FILTER - 300)) | (1 << (mysqlParser.FIRST - 300)) | (1 << (mysqlParser.FIXED - 300)) | (1 << (mysqlParser.FLUSH - 300)) | (1 << (mysqlParser.FOLLOWS - 300)) | (1 << (mysqlParser.FULL - 300)) | (1 << (mysqlParser.FUNCTION - 300)) | (1 << (mysqlParser.GLOBAL - 300)) | (1 << (mysqlParser.GRANTS - 300)) | (1 << (mysqlParser.GROUP_REPLICATION - 300)) | (1 << (mysqlParser.HANDLER - 300)) | (1 << (mysqlParser.HASH - 300)) | (1 << (mysqlParser.HELP - 300)) | (1 << (mysqlParser.HOST - 300)) | (1 << (mysqlParser.IDENTIFIED - 300)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 300)) | (1 << (mysqlParser.IMPORT - 300)) | (1 << (mysqlParser.INDEXES - 300)) | (1 << (mysqlParser.INITIAL_SIZE - 300)) | (1 << (mysqlParser.INPLACE - 300)) | (1 << (mysqlParser.INSERT_METHOD - 300)) | (1 << (mysqlParser.INSTALL - 300)) | (1 << (mysqlParser.INSTANCE - 300)) | (1 << (mysqlParser.INVOKER - 300)) | (1 << (mysqlParser.IO - 300)) | (1 << (mysqlParser.IO_THREAD - 300)) | (1 << (mysqlParser.IPC - 300)) | (1 << (mysqlParser.ISOLATION - 300)) | (1 << (mysqlParser.ISSUER - 300)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 300)) | (1 << (mysqlParser.LANGUAGE - 300)) | (1 << (mysqlParser.LAST - 300)) | (1 << (mysqlParser.LEAVES - 300)) | (1 << (mysqlParser.LESS - 300)))) != 0) or ((((_la - 364)) & ~0x3f) == 0 and ((1 << (_la - 364)) & ((1 << (mysqlParser.LEVEL - 364)) | (1 << (mysqlParser.LIST - 364)) | (1 << (mysqlParser.LOCAL - 364)) | (1 << (mysqlParser.LOGFILE - 364)) | (1 << (mysqlParser.LOGS - 364)) | (1 << (mysqlParser.MASTER - 364)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 364)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 364)) | (1 << (mysqlParser.MASTER_DELAY - 364)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 364)) | (1 << (mysqlParser.MASTER_HOST - 364)) | (1 << (mysqlParser.MASTER_LOG_FILE - 364)) | (1 << (mysqlParser.MASTER_LOG_POS - 364)) | (1 << (mysqlParser.MASTER_PASSWORD - 364)) | (1 << (mysqlParser.MASTER_PORT - 364)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 364)) | (1 << (mysqlParser.MASTER_SSL - 364)) | (1 << (mysqlParser.MASTER_SSL_CA - 364)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 364)) | (1 << (mysqlParser.MASTER_SSL_CERT - 364)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 364)) | (1 << (mysqlParser.MASTER_SSL_CRL - 364)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 364)) | (1 << (mysqlParser.MASTER_SSL_KEY - 364)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 364)) | (1 << (mysqlParser.MASTER_USER - 364)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 364)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 364)) | (1 << (mysqlParser.MAX_ROWS - 364)) | (1 << (mysqlParser.MAX_SIZE - 364)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 364)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 364)) | (1 << (mysqlParser.MERGE - 364)) | (1 << (mysqlParser.MID - 364)) | (1 << (mysqlParser.MIGRATE - 364)) | (1 << (mysqlParser.MIN_ROWS - 364)) | (1 << (mysqlParser.MODIFY - 364)) | (1 << (mysqlParser.MUTEX - 364)) | (1 << (mysqlParser.MYSQL - 364)) | (1 << (mysqlParser.NAME - 364)) | (1 << (mysqlParser.NAMES - 364)) | (1 << (mysqlParser.NCHAR - 364)) | (1 << (mysqlParser.NEVER - 364)) | (1 << (mysqlParser.NO - 364)) | (1 << (mysqlParser.NODEGROUP - 364)) | (1 << (mysqlParser.NONE - 364)) | (1 << (mysqlParser.OFFLINE - 364)) | (1 << (mysqlParser.OFFSET - 364)) | (1 << (mysqlParser.OJ - 364)) | (1 << (mysqlParser.OLD_PASSWORD - 364)) | (1 << (mysqlParser.ONE - 364)) | (1 << (mysqlParser.ONLINE - 364)) | (1 << (mysqlParser.ONLY - 364)) | (1 << (mysqlParser.OPEN - 364)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 364)) | (1 << (mysqlParser.OPTIONS - 364)) | (1 << (mysqlParser.OWNER - 364)) | (1 << (mysqlParser.PACK_KEYS - 364)) | (1 << (mysqlParser.PAGE - 364)) | (1 << (mysqlParser.PARSER - 364)) | (1 << (mysqlParser.PARTIAL - 364)))) != 0) or ((((_la - 428)) & ~0x3f) == 0 and ((1 << (_la - 428)) & ((1 << (mysqlParser.PARTITIONING - 428)) | (1 << (mysqlParser.PARTITIONS - 428)) | (1 << (mysqlParser.PASSWORD - 428)) | (1 << (mysqlParser.PHASE - 428)) | (1 << (mysqlParser.PLUGIN_DIR - 428)) | (1 << (mysqlParser.PLUGINS - 428)) | (1 << (mysqlParser.PORT - 428)) | (1 << (mysqlParser.PRECEDES - 428)) | (1 << (mysqlParser.PREPARE - 428)) | (1 << (mysqlParser.PRESERVE - 428)) | (1 << (mysqlParser.PREV - 428)) | (1 << (mysqlParser.PROCESSLIST - 428)) | (1 << (mysqlParser.PROFILE - 428)) | (1 << (mysqlParser.PROFILES - 428)) | (1 << (mysqlParser.PROXY - 428)) | (1 << (mysqlParser.QUERY - 428)) | (1 << (mysqlParser.QUICK - 428)) | (1 << (mysqlParser.REBUILD - 428)) | (1 << (mysqlParser.RECOVER - 428)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 428)) | (1 << (mysqlParser.REDUNDANT - 428)) | (1 << (mysqlParser.RELAY_LOG_FILE - 428)) | (1 << (mysqlParser.RELAY_LOG_POS - 428)) | (1 << (mysqlParser.RELAYLOG - 428)) | (1 << (mysqlParser.REMOVE - 428)) | (1 << (mysqlParser.REORGANIZE - 428)) | (1 << (mysqlParser.REPAIR - 428)) | (1 << (mysqlParser.REPLICATE_DO_DB - 428)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 428)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 428)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 428)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 428)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 428)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 428)) | (1 << (mysqlParser.REPLICATION - 428)) | (1 << (mysqlParser.RESET - 428)) | (1 << (mysqlParser.RESUME - 428)) | (1 << (mysqlParser.RETURNS - 428)) | (1 << (mysqlParser.ROLLBACK - 428)) | (1 << (mysqlParser.ROLLUP - 428)) | (1 << (mysqlParser.ROTATE - 428)) | (1 << (mysqlParser.ROW - 428)) | (1 << (mysqlParser.ROWS - 428)) | (1 << (mysqlParser.ROW_FORMAT - 428)) | (1 << (mysqlParser.SAVEPOINT - 428)) | (1 << (mysqlParser.SCHEDULE - 428)) | (1 << (mysqlParser.SECURITY - 428)) | (1 << (mysqlParser.SERVER - 428)) | (1 << (mysqlParser.SESSION - 428)) | (1 << (mysqlParser.SHARE - 428)) | (1 << (mysqlParser.SHARED - 428)) | (1 << (mysqlParser.SIGNED - 428)) | (1 << (mysqlParser.SIMPLE - 428)) | (1 << (mysqlParser.SLAVE - 428)) | (1 << (mysqlParser.SNAPSHOT - 428)) | (1 << (mysqlParser.SOCKET - 428)) | (1 << (mysqlParser.SOME - 428)) | (1 << (mysqlParser.SOUNDS - 428)) | (1 << (mysqlParser.SOURCE - 428)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 428)))) != 0) or ((((_la - 492)) & ~0x3f) == 0 and ((1 << (_la - 492)) & ((1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 492)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 492)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 492)) | (1 << (mysqlParser.SQL_CACHE - 492)) | (1 << (mysqlParser.SQL_NO_CACHE - 492)) | (1 << (mysqlParser.SQL_THREAD - 492)) | (1 << (mysqlParser.START - 492)) | (1 << (mysqlParser.STARTS - 492)) | (1 << (mysqlParser.STATS_AUTO_RECALC - 492)) | (1 << (mysqlParser.STATS_PERSISTENT - 492)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 492)) | (1 << (mysqlParser.STATUS - 492)) | (1 << (mysqlParser.STOP - 492)) | (1 << (mysqlParser.STORAGE - 492)) | (1 << (mysqlParser.STRING - 492)) | (1 << (mysqlParser.SUBJECT - 492)) | (1 << (mysqlParser.SUBPARTITION - 492)) | (1 << (mysqlParser.SUBPARTITIONS - 492)) | (1 << (mysqlParser.SUSPEND - 492)) | (1 << (mysqlParser.SWAPS - 492)) | (1 << (mysqlParser.SWITCHES - 492)) | (1 << (mysqlParser.TABLESPACE - 492)) | (1 << (mysqlParser.TEMPORARY - 492)) | (1 << (mysqlParser.TEMPTABLE - 492)) | (1 << (mysqlParser.THAN - 492)) | (1 << (mysqlParser.TRANSACTION - 492)) | (1 << (mysqlParser.TRUNCATE - 492)) | (1 << (mysqlParser.UNDEFINED - 492)) | (1 << (mysqlParser.UNDOFILE - 492)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 492)) | (1 << (mysqlParser.UNINSTALL - 492)) | (1 << (mysqlParser.UNKNOWN - 492)) | (1 << (mysqlParser.UPGRADE - 492)) | (1 << (mysqlParser.USER - 492)) | (1 << (mysqlParser.VALIDATION - 492)) | (1 << (mysqlParser.VALUE - 492)) | (1 << (mysqlParser.VARIABLES - 492)) | (1 << (mysqlParser.VIEW - 492)) | (1 << (mysqlParser.WAIT - 492)) | (1 << (mysqlParser.WARNINGS - 492)) | (1 << (mysqlParser.WITHOUT - 492)) | (1 << (mysqlParser.WORK - 492)) | (1 << (mysqlParser.WRAPPER - 492)) | (1 << (mysqlParser.X509 - 492)) | (1 << (mysqlParser.XA - 492)) | (1 << (mysqlParser.XML - 492)) | (1 << (mysqlParser.QUARTER - 492)) | (1 << (mysqlParser.MONTH - 492)) | (1 << (mysqlParser.DAY - 492)) | (1 << (mysqlParser.HOUR - 492)) | (1 << (mysqlParser.MINUTE - 492)) | (1 << (mysqlParser.WEEK - 492)) | (1 << (mysqlParser.SECOND - 492)) | (1 << (mysqlParser.MICROSECOND - 492)))) != 0) or ((((_la - 556)) & ~0x3f) == 0 and ((1 << (_la - 556)) & ((1 << (mysqlParser.TABLES - 556)) | (1 << (mysqlParser.ROUTINE - 556)) | (1 << (mysqlParser.EXECUTE - 556)) | (1 << (mysqlParser.FILE - 556)) | (1 << (mysqlParser.PROCESS - 556)) | (1 << (mysqlParser.RELOAD - 556)) | (1 << (mysqlParser.SHUTDOWN - 556)) | (1 << (mysqlParser.SUPER - 556)) | (1 << (mysqlParser.PRIVILEGES - 556)) | (1 << (mysqlParser.ARMSCII8 - 556)) | (1 << (mysqlParser.ASCII - 556)) | (1 << (mysqlParser.BIG5 - 556)) | (1 << (mysqlParser.CP1250 - 556)) | (1 << (mysqlParser.CP1251 - 556)) | (1 << (mysqlParser.CP1256 - 556)) | (1 << (mysqlParser.CP1257 - 556)) | (1 << (mysqlParser.CP850 - 556)) | (1 << (mysqlParser.CP852 - 556)) | (1 << (mysqlParser.CP866 - 556)) | (1 << (mysqlParser.CP932 - 556)) | (1 << (mysqlParser.DEC8 - 556)) | (1 << (mysqlParser.EUCJPMS - 556)) | (1 << (mysqlParser.EUCKR - 556)) | (1 << (mysqlParser.GB2312 - 556)) | (1 << (mysqlParser.GBK - 556)) | (1 << (mysqlParser.GEOSTD8 - 556)) | (1 << (mysqlParser.GREEK - 556)) | (1 << (mysqlParser.HEBREW - 556)) | (1 << (mysqlParser.HP8 - 556)) | (1 << (mysqlParser.KEYBCS2 - 556)) | (1 << (mysqlParser.KOI8R - 556)) | (1 << (mysqlParser.KOI8U - 556)) | (1 << (mysqlParser.LATIN1 - 556)) | (1 << (mysqlParser.LATIN2 - 556)) | (1 << (mysqlParser.LATIN5 - 556)) | (1 << (mysqlParser.LATIN7 - 556)) | (1 << (mysqlParser.MACCE - 556)) | (1 << (mysqlParser.MACROMAN - 556)) | (1 << (mysqlParser.SJIS - 556)) | (1 << (mysqlParser.SWE7 - 556)) | (1 << (mysqlParser.TIS620 - 556)) | (1 << (mysqlParser.UCS2 - 556)) | (1 << (mysqlParser.UJIS - 556)) | (1 << (mysqlParser.UTF16 - 556)) | (1 << (mysqlParser.UTF16LE - 556)) | (1 << (mysqlParser.UTF32 - 556)) | (1 << (mysqlParser.UTF8 - 556)) | (1 << (mysqlParser.UTF8MB3 - 556)) | (1 << (mysqlParser.UTF8MB4 - 556)) | (1 << (mysqlParser.ARCHIVE - 556)) | (1 << (mysqlParser.BLACKHOLE - 556)) | (1 << (mysqlParser.CSV - 556)) | (1 << (mysqlParser.FEDERATED - 556)) | (1 << (mysqlParser.INNODB - 556)) | (1 << (mysqlParser.MEMORY - 556)) | (1 << (mysqlParser.MRG_MYISAM - 556)) | (1 << (mysqlParser.MYISAM - 556)) | (1 << (mysqlParser.NDB - 556)) | (1 << (mysqlParser.NDBCLUSTER - 556)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 556)) | (1 << (mysqlParser.REPEATABLE - 556)) | (1 << (mysqlParser.COMMITTED - 556)) | (1 << (mysqlParser.UNCOMMITTED - 556)) | (1 << (mysqlParser.SERIALIZABLE - 556)))) != 0) or ((((_la - 620)) & ~0x3f) == 0 and ((1 << (_la - 620)) & ((1 << (mysqlParser.GEOMETRYCOLLECTION - 620)) | (1 << (mysqlParser.LINESTRING - 620)) | (1 << (mysqlParser.MULTILINESTRING - 620)) | (1 << (mysqlParser.MULTIPOINT - 620)) | (1 << (mysqlParser.MULTIPOLYGON - 620)) | (1 << (mysqlParser.POINT - 620)) | (1 << (mysqlParser.POLYGON - 620)) | (1 << (mysqlParser.ABS - 620)) | (1 << (mysqlParser.ACOS - 620)) | (1 << (mysqlParser.ADDDATE - 620)) | (1 << (mysqlParser.ADDTIME - 620)) | (1 << (mysqlParser.AES_DECRYPT - 620)) | (1 << (mysqlParser.AES_ENCRYPT - 620)) | (1 << (mysqlParser.AREA - 620)) | (1 << (mysqlParser.ASBINARY - 620)) | (1 << (mysqlParser.ASIN - 620)) | (1 << (mysqlParser.ASTEXT - 620)) | (1 << (mysqlParser.ASWKB - 620)) | (1 << (mysqlParser.ASWKT - 620)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 620)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 620)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 620)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 620)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 620)) | (1 << (mysqlParser.ATAN - 620)) | (1 << (mysqlParser.ATAN2 - 620)) | (1 << (mysqlParser.BENCHMARK - 620)) | (1 << (mysqlParser.BIN - 620)) | (1 << (mysqlParser.BIT_COUNT - 620)) | (1 << (mysqlParser.BIT_LENGTH - 620)) | (1 << (mysqlParser.BUFFER - 620)) | (1 << (mysqlParser.CEIL - 620)) | (1 << (mysqlParser.CEILING - 620)) | (1 << (mysqlParser.CENTROID - 620)) | (1 << (mysqlParser.CHARACTER_LENGTH - 620)) | (1 << (mysqlParser.CHARSET - 620)) | (1 << (mysqlParser.CHAR_LENGTH - 620)) | (1 << (mysqlParser.COERCIBILITY - 620)) | (1 << (mysqlParser.COLLATION - 620)) | (1 << (mysqlParser.COMPRESS - 620)) | (1 << (mysqlParser.CONCAT - 620)) | (1 << (mysqlParser.CONCAT_WS - 620)) | (1 << (mysqlParser.CONNECTION_ID - 620)) | (1 << (mysqlParser.CONV - 620)) | (1 << (mysqlParser.CONVERT_TZ - 620)) | (1 << (mysqlParser.COS - 620)) | (1 << (mysqlParser.COT - 620)) | (1 << (mysqlParser.CRC32 - 620)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 620)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 620)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 620)) | (1 << (mysqlParser.CREATE_DIGEST - 620)) | (1 << (mysqlParser.CROSSES - 620)) | (1 << (mysqlParser.DATEDIFF - 620)) | (1 << (mysqlParser.DATE_FORMAT - 620)) | (1 << (mysqlParser.DAYNAME - 620)) | (1 << (mysqlParser.DAYOFMONTH - 620)) | (1 << (mysqlParser.DAYOFWEEK - 620)) | (1 << (mysqlParser.DAYOFYEAR - 620)) | (1 << (mysqlParser.DECODE - 620)) | (1 << (mysqlParser.DEGREES - 620)) | (1 << (mysqlParser.DES_DECRYPT - 620)) | (1 << (mysqlParser.DES_ENCRYPT - 620)) | (1 << (mysqlParser.DIMENSION - 620)))) != 0) or ((((_la - 684)) & ~0x3f) == 0 and ((1 << (_la - 684)) & ((1 << (mysqlParser.DISJOINT - 684)) | (1 << (mysqlParser.ELT - 684)) | (1 << (mysqlParser.ENCODE - 684)) | (1 << (mysqlParser.ENCRYPT - 684)) | (1 << (mysqlParser.ENDPOINT - 684)) | (1 << (mysqlParser.ENVELOPE - 684)) | (1 << (mysqlParser.EQUALS - 684)) | (1 << (mysqlParser.EXP - 684)) | (1 << (mysqlParser.EXPORT_SET - 684)) | (1 << (mysqlParser.EXTERIORRING - 684)) | (1 << (mysqlParser.EXTRACTVALUE - 684)) | (1 << (mysqlParser.FIELD - 684)) | (1 << (mysqlParser.FIND_IN_SET - 684)) | (1 << (mysqlParser.FLOOR - 684)) | (1 << (mysqlParser.FORMAT - 684)) | (1 << (mysqlParser.FOUND_ROWS - 684)) | (1 << (mysqlParser.FROM_BASE64 - 684)) | (1 << (mysqlParser.FROM_DAYS - 684)) | (1 << (mysqlParser.FROM_UNIXTIME - 684)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 684)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 684)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 684)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 684)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 684)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 684)) | (1 << (mysqlParser.GEOMETRYN - 684)) | (1 << (mysqlParser.GEOMETRYTYPE - 684)) | (1 << (mysqlParser.GEOMFROMTEXT - 684)) | (1 << (mysqlParser.GEOMFROMWKB - 684)) | (1 << (mysqlParser.GET_FORMAT - 684)) | (1 << (mysqlParser.GET_LOCK - 684)) | (1 << (mysqlParser.GLENGTH - 684)) | (1 << (mysqlParser.GREATEST - 684)) | (1 << (mysqlParser.GTID_SUBSET - 684)) | (1 << (mysqlParser.GTID_SUBTRACT - 684)) | (1 << (mysqlParser.HEX - 684)) | (1 << (mysqlParser.IFNULL - 684)) | (1 << (mysqlParser.INET6_ATON - 684)) | (1 << (mysqlParser.INET6_NTOA - 684)) | (1 << (mysqlParser.INET_ATON - 684)) | (1 << (mysqlParser.INET_NTOA - 684)) | (1 << (mysqlParser.INSTR - 684)) | (1 << (mysqlParser.INTERIORRINGN - 684)) | (1 << (mysqlParser.INTERSECTS - 684)) | (1 << (mysqlParser.ISCLOSED - 684)) | (1 << (mysqlParser.ISEMPTY - 684)) | (1 << (mysqlParser.ISNULL - 684)) | (1 << (mysqlParser.ISSIMPLE - 684)) | (1 << (mysqlParser.IS_FREE_LOCK - 684)) | (1 << (mysqlParser.IS_IPV4 - 684)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 684)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 684)) | (1 << (mysqlParser.IS_IPV6 - 684)) | (1 << (mysqlParser.IS_USED_LOCK - 684)) | (1 << (mysqlParser.LAST_INSERT_ID - 684)) | (1 << (mysqlParser.LCASE - 684)) | (1 << (mysqlParser.LEAST - 684)) | (1 << (mysqlParser.LENGTH - 684)) | (1 << (mysqlParser.LINEFROMTEXT - 684)) | (1 << (mysqlParser.LINEFROMWKB - 684)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 684)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 684)) | (1 << (mysqlParser.LN - 684)) | (1 << (mysqlParser.LOAD_FILE - 684)))) != 0) or ((((_la - 748)) & ~0x3f) == 0 and ((1 << (_la - 748)) & ((1 << (mysqlParser.LOCATE - 748)) | (1 << (mysqlParser.LOG - 748)) | (1 << (mysqlParser.LOG10 - 748)) | (1 << (mysqlParser.LOG2 - 748)) | (1 << (mysqlParser.LOWER - 748)) | (1 << (mysqlParser.LPAD - 748)) | (1 << (mysqlParser.LTRIM - 748)) | (1 << (mysqlParser.MAKEDATE - 748)) | (1 << (mysqlParser.MAKETIME - 748)) | (1 << (mysqlParser.MAKE_SET - 748)) | (1 << (mysqlParser.MASTER_POS_WAIT - 748)) | (1 << (mysqlParser.MBRCONTAINS - 748)) | (1 << (mysqlParser.MBRDISJOINT - 748)) | (1 << (mysqlParser.MBREQUAL - 748)) | (1 << (mysqlParser.MBRINTERSECTS - 748)) | (1 << (mysqlParser.MBROVERLAPS - 748)) | (1 << (mysqlParser.MBRTOUCHES - 748)) | (1 << (mysqlParser.MBRWITHIN - 748)) | (1 << (mysqlParser.MD5 - 748)) | (1 << (mysqlParser.MLINEFROMTEXT - 748)) | (1 << (mysqlParser.MLINEFROMWKB - 748)) | (1 << (mysqlParser.MONTHNAME - 748)) | (1 << (mysqlParser.MPOINTFROMTEXT - 748)) | (1 << (mysqlParser.MPOINTFROMWKB - 748)) | (1 << (mysqlParser.MPOLYFROMTEXT - 748)) | (1 << (mysqlParser.MPOLYFROMWKB - 748)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 748)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 748)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 748)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 748)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 748)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 748)) | (1 << (mysqlParser.NAME_CONST - 748)) | (1 << (mysqlParser.NULLIF - 748)) | (1 << (mysqlParser.NUMGEOMETRIES - 748)) | (1 << (mysqlParser.NUMINTERIORRINGS - 748)) | (1 << (mysqlParser.NUMPOINTS - 748)) | (1 << (mysqlParser.OCT - 748)) | (1 << (mysqlParser.OCTET_LENGTH - 748)) | (1 << (mysqlParser.ORD - 748)) | (1 << (mysqlParser.OVERLAPS - 748)) | (1 << (mysqlParser.PERIOD_ADD - 748)) | (1 << (mysqlParser.PERIOD_DIFF - 748)) | (1 << (mysqlParser.PI - 748)) | (1 << (mysqlParser.POINTFROMTEXT - 748)) | (1 << (mysqlParser.POINTFROMWKB - 748)) | (1 << (mysqlParser.POINTN - 748)) | (1 << (mysqlParser.POLYFROMTEXT - 748)) | (1 << (mysqlParser.POLYFROMWKB - 748)) | (1 << (mysqlParser.POLYGONFROMTEXT - 748)) | (1 << (mysqlParser.POLYGONFROMWKB - 748)) | (1 << (mysqlParser.POW - 748)) | (1 << (mysqlParser.POWER - 748)) | (1 << (mysqlParser.QUOTE - 748)) | (1 << (mysqlParser.RADIANS - 748)) | (1 << (mysqlParser.RAND - 748)) | (1 << (mysqlParser.RANDOM_BYTES - 748)) | (1 << (mysqlParser.RELEASE_LOCK - 748)) | (1 << (mysqlParser.REVERSE - 748)) | (1 << (mysqlParser.ROUND - 748)) | (1 << (mysqlParser.ROW_COUNT - 748)) | (1 << (mysqlParser.RPAD - 748)) | (1 << (mysqlParser.RTRIM - 748)) | (1 << (mysqlParser.SEC_TO_TIME - 748)))) != 0) or ((((_la - 812)) & ~0x3f) == 0 and ((1 << (_la - 812)) & ((1 << (mysqlParser.SESSION_USER - 812)) | (1 << (mysqlParser.SHA - 812)) | (1 << (mysqlParser.SHA1 - 812)) | (1 << (mysqlParser.SHA2 - 812)) | (1 << (mysqlParser.SIGN - 812)) | (1 << (mysqlParser.SIN - 812)) | (1 << (mysqlParser.SLEEP - 812)) | (1 << (mysqlParser.SOUNDEX - 812)) | (1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 812)) | (1 << (mysqlParser.SQRT - 812)) | (1 << (mysqlParser.SRID - 812)) | (1 << (mysqlParser.STARTPOINT - 812)) | (1 << (mysqlParser.STRCMP - 812)) | (1 << (mysqlParser.STR_TO_DATE - 812)) | (1 << (mysqlParser.ST_AREA - 812)) | (1 << (mysqlParser.ST_ASBINARY - 812)) | (1 << (mysqlParser.ST_ASTEXT - 812)) | (1 << (mysqlParser.ST_ASWKB - 812)) | (1 << (mysqlParser.ST_ASWKT - 812)) | (1 << (mysqlParser.ST_BUFFER - 812)) | (1 << (mysqlParser.ST_CENTROID - 812)) | (1 << (mysqlParser.ST_CONTAINS - 812)) | (1 << (mysqlParser.ST_CROSSES - 812)) | (1 << (mysqlParser.ST_DIFFERENCE - 812)) | (1 << (mysqlParser.ST_DIMENSION - 812)) | (1 << (mysqlParser.ST_DISJOINT - 812)) | (1 << (mysqlParser.ST_DISTANCE - 812)) | (1 << (mysqlParser.ST_ENDPOINT - 812)) | (1 << (mysqlParser.ST_ENVELOPE - 812)) | (1 << (mysqlParser.ST_EQUALS - 812)) | (1 << (mysqlParser.ST_EXTERIORRING - 812)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 812)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 812)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 812)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 812)) | (1 << (mysqlParser.ST_GEOMETRYN - 812)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 812)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 812)) | (1 << (mysqlParser.ST_INTERIORRINGN - 812)) | (1 << (mysqlParser.ST_INTERSECTION - 812)) | (1 << (mysqlParser.ST_INTERSECTS - 812)) | (1 << (mysqlParser.ST_ISCLOSED - 812)) | (1 << (mysqlParser.ST_ISEMPTY - 812)) | (1 << (mysqlParser.ST_ISSIMPLE - 812)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 812)) | (1 << (mysqlParser.ST_LINEFROMWKB - 812)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 812)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 812)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 812)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 812)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 812)) | (1 << (mysqlParser.ST_NUMPOINTS - 812)) | (1 << (mysqlParser.ST_OVERLAPS - 812)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 812)) | (1 << (mysqlParser.ST_POINTFROMWKB - 812)) | (1 << (mysqlParser.ST_POINTN - 812)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 812)) | (1 << (mysqlParser.ST_POLYFROMWKB - 812)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 812)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 812)))) != 0) or ((((_la - 876)) & ~0x3f) == 0 and ((1 << (_la - 876)) & ((1 << (mysqlParser.ST_SRID - 876)) | (1 << (mysqlParser.ST_STARTPOINT - 876)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 876)) | (1 << (mysqlParser.ST_TOUCHES - 876)) | (1 << (mysqlParser.ST_UNION - 876)) | (1 << (mysqlParser.ST_WITHIN - 876)) | (1 << (mysqlParser.ST_X - 876)) | (1 << (mysqlParser.ST_Y - 876)) | (1 << (mysqlParser.SUBDATE - 876)) | (1 << (mysqlParser.SUBSTRING_INDEX - 876)) | (1 << (mysqlParser.SUBTIME - 876)) | (1 << (mysqlParser.SYSTEM_USER - 876)) | (1 << (mysqlParser.TAN - 876)) | (1 << (mysqlParser.TIMEDIFF - 876)) | (1 << (mysqlParser.TIMESTAMPADD - 876)) | (1 << (mysqlParser.TIMESTAMPDIFF - 876)) | (1 << (mysqlParser.TIME_FORMAT - 876)) | (1 << (mysqlParser.TIME_TO_SEC - 876)) | (1 << (mysqlParser.TOUCHES - 876)) | (1 << (mysqlParser.TO_BASE64 - 876)) | (1 << (mysqlParser.TO_DAYS - 876)) | (1 << (mysqlParser.TO_SECONDS - 876)) | (1 << (mysqlParser.UCASE - 876)) | (1 << (mysqlParser.UNCOMPRESS - 876)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 876)) | (1 << (mysqlParser.UNHEX - 876)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 876)) | (1 << (mysqlParser.UPDATEXML - 876)) | (1 << (mysqlParser.UPPER - 876)) | (1 << (mysqlParser.UUID - 876)) | (1 << (mysqlParser.UUID_SHORT - 876)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 876)) | (1 << (mysqlParser.VERSION - 876)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 876)) | (1 << (mysqlParser.WEEKDAY - 876)) | (1 << (mysqlParser.WEEKOFYEAR - 876)) | (1 << (mysqlParser.WEIGHT_STRING - 876)) | (1 << (mysqlParser.WITHIN - 876)) | (1 << (mysqlParser.YEARWEEK - 876)) | (1 << (mysqlParser.Y_FUNCTION - 876)) | (1 << (mysqlParser.X_FUNCTION - 876)))) != 0) or ((((_la - 942)) & ~0x3f) == 0 and ((1 << (_la - 942)) & ((1 << (mysqlParser.LR_BRACKET - 942)) | (1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 942)) | (1 << (mysqlParser.ID - 942)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 942)))) != 0)):
                    break

            self.state = 3998
            self.match(mysqlParser.END)
            self.state = 3999
            self.match(mysqlParser.WHILE)
            self.state = 4001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.LEFT or _la==mysqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (mysqlParser.DATE - 180)) | (1 << (mysqlParser.TIME - 180)) | (1 << (mysqlParser.TIMESTAMP - 180)) | (1 << (mysqlParser.DATETIME - 180)) | (1 << (mysqlParser.YEAR - 180)) | (1 << (mysqlParser.TEXT - 180)) | (1 << (mysqlParser.ENUM - 180)) | (1 << (mysqlParser.COUNT - 180)) | (1 << (mysqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (mysqlParser.ACCOUNT - 244)) | (1 << (mysqlParser.ACTION - 244)) | (1 << (mysqlParser.AFTER - 244)) | (1 << (mysqlParser.AGGREGATE - 244)) | (1 << (mysqlParser.ALGORITHM - 244)) | (1 << (mysqlParser.ANY - 244)) | (1 << (mysqlParser.AT - 244)) | (1 << (mysqlParser.AUTHORS - 244)) | (1 << (mysqlParser.AUTOCOMMIT - 244)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (mysqlParser.AUTO_INCREMENT - 244)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 244)) | (1 << (mysqlParser.BEGIN - 244)) | (1 << (mysqlParser.BINLOG - 244)) | (1 << (mysqlParser.BIT - 244)) | (1 << (mysqlParser.BLOCK - 244)) | (1 << (mysqlParser.BTREE - 244)) | (1 << (mysqlParser.CASCADED - 244)) | (1 << (mysqlParser.CHAIN - 244)) | (1 << (mysqlParser.CHANNEL - 244)) | (1 << (mysqlParser.CHECKSUM - 244)) | (1 << (mysqlParser.CIPHER - 244)) | (1 << (mysqlParser.CLIENT - 244)) | (1 << (mysqlParser.COALESCE - 244)) | (1 << (mysqlParser.CODE - 244)) | (1 << (mysqlParser.COLUMNS - 244)) | (1 << (mysqlParser.COLUMN_FORMAT - 244)) | (1 << (mysqlParser.COMMENT - 244)) | (1 << (mysqlParser.COMMIT - 244)) | (1 << (mysqlParser.COMPACT - 244)) | (1 << (mysqlParser.COMPLETION - 244)) | (1 << (mysqlParser.COMPRESSED - 244)) | (1 << (mysqlParser.COMPRESSION - 244)) | (1 << (mysqlParser.CONCURRENT - 244)) | (1 << (mysqlParser.CONNECTION - 244)) | (1 << (mysqlParser.CONSISTENT - 244)) | (1 << (mysqlParser.CONTAINS - 244)) | (1 << (mysqlParser.CONTEXT - 244)) | (1 << (mysqlParser.CONTRIBUTORS - 244)) | (1 << (mysqlParser.COPY - 244)) | (1 << (mysqlParser.CPU - 244)) | (1 << (mysqlParser.DATA - 244)) | (1 << (mysqlParser.DATAFILE - 244)) | (1 << (mysqlParser.DEALLOCATE - 244)) | (1 << (mysqlParser.DEFAULT_AUTH - 244)) | (1 << (mysqlParser.DEFINER - 244)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 244)) | (1 << (mysqlParser.DIRECTORY - 244)) | (1 << (mysqlParser.DISABLE - 244)) | (1 << (mysqlParser.DISCARD - 244)) | (1 << (mysqlParser.DISK - 244)) | (1 << (mysqlParser.DO - 244)) | (1 << (mysqlParser.DUMPFILE - 244)) | (1 << (mysqlParser.DUPLICATE - 244)) | (1 << (mysqlParser.DYNAMIC - 244)) | (1 << (mysqlParser.ENABLE - 244)) | (1 << (mysqlParser.ENCRYPTION - 244)) | (1 << (mysqlParser.ENDS - 244)) | (1 << (mysqlParser.ENGINE - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (mysqlParser.ENGINES - 308)) | (1 << (mysqlParser.ERROR - 308)) | (1 << (mysqlParser.ERRORS - 308)) | (1 << (mysqlParser.ESCAPE - 308)) | (1 << (mysqlParser.EVEN - 308)) | (1 << (mysqlParser.EVENT - 308)) | (1 << (mysqlParser.EVENTS - 308)) | (1 << (mysqlParser.EVERY - 308)) | (1 << (mysqlParser.EXCHANGE - 308)) | (1 << (mysqlParser.EXCLUSIVE - 308)) | (1 << (mysqlParser.EXPIRE - 308)) | (1 << (mysqlParser.EXTENT_SIZE - 308)) | (1 << (mysqlParser.FAULTS - 308)) | (1 << (mysqlParser.FIELDS - 308)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (mysqlParser.FILTER - 308)) | (1 << (mysqlParser.FIRST - 308)) | (1 << (mysqlParser.FIXED - 308)) | (1 << (mysqlParser.FOLLOWS - 308)) | (1 << (mysqlParser.FULL - 308)) | (1 << (mysqlParser.FUNCTION - 308)) | (1 << (mysqlParser.GLOBAL - 308)) | (1 << (mysqlParser.GRANTS - 308)) | (1 << (mysqlParser.GROUP_REPLICATION - 308)) | (1 << (mysqlParser.HASH - 308)) | (1 << (mysqlParser.HOST - 308)) | (1 << (mysqlParser.IDENTIFIED - 308)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (mysqlParser.IMPORT - 308)) | (1 << (mysqlParser.INDEXES - 308)) | (1 << (mysqlParser.INITIAL_SIZE - 308)) | (1 << (mysqlParser.INPLACE - 308)) | (1 << (mysqlParser.INSERT_METHOD - 308)) | (1 << (mysqlParser.INSTANCE - 308)) | (1 << (mysqlParser.INVOKER - 308)) | (1 << (mysqlParser.IO - 308)) | (1 << (mysqlParser.IO_THREAD - 308)) | (1 << (mysqlParser.IPC - 308)) | (1 << (mysqlParser.ISOLATION - 308)) | (1 << (mysqlParser.ISSUER - 308)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (mysqlParser.LANGUAGE - 308)) | (1 << (mysqlParser.LAST - 308)) | (1 << (mysqlParser.LEAVES - 308)) | (1 << (mysqlParser.LESS - 308)) | (1 << (mysqlParser.LEVEL - 308)) | (1 << (mysqlParser.LIST - 308)) | (1 << (mysqlParser.LOCAL - 308)) | (1 << (mysqlParser.LOGFILE - 308)) | (1 << (mysqlParser.LOGS - 308)) | (1 << (mysqlParser.MASTER - 308)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 308)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (mysqlParser.MASTER_DELAY - 372)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (mysqlParser.MASTER_HOST - 372)) | (1 << (mysqlParser.MASTER_LOG_FILE - 372)) | (1 << (mysqlParser.MASTER_LOG_POS - 372)) | (1 << (mysqlParser.MASTER_PASSWORD - 372)) | (1 << (mysqlParser.MASTER_PORT - 372)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (mysqlParser.MASTER_SSL - 372)) | (1 << (mysqlParser.MASTER_SSL_CA - 372)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_CERT - 372)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (mysqlParser.MASTER_SSL_CRL - 372)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_KEY - 372)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 372)) | (1 << (mysqlParser.MASTER_USER - 372)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_ROWS - 372)) | (1 << (mysqlParser.MAX_SIZE - 372)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (mysqlParser.MERGE - 372)) | (1 << (mysqlParser.MID - 372)) | (1 << (mysqlParser.MIGRATE - 372)) | (1 << (mysqlParser.MIN_ROWS - 372)) | (1 << (mysqlParser.MODIFY - 372)) | (1 << (mysqlParser.MUTEX - 372)) | (1 << (mysqlParser.MYSQL - 372)) | (1 << (mysqlParser.NAME - 372)) | (1 << (mysqlParser.NAMES - 372)) | (1 << (mysqlParser.NCHAR - 372)) | (1 << (mysqlParser.NEVER - 372)) | (1 << (mysqlParser.NO - 372)) | (1 << (mysqlParser.NODEGROUP - 372)) | (1 << (mysqlParser.NONE - 372)) | (1 << (mysqlParser.OFFLINE - 372)) | (1 << (mysqlParser.OFFSET - 372)) | (1 << (mysqlParser.OJ - 372)) | (1 << (mysqlParser.OLD_PASSWORD - 372)) | (1 << (mysqlParser.ONE - 372)) | (1 << (mysqlParser.ONLINE - 372)) | (1 << (mysqlParser.ONLY - 372)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 372)) | (1 << (mysqlParser.OPTIONS - 372)) | (1 << (mysqlParser.OWNER - 372)) | (1 << (mysqlParser.PACK_KEYS - 372)) | (1 << (mysqlParser.PAGE - 372)) | (1 << (mysqlParser.PARSER - 372)) | (1 << (mysqlParser.PARTIAL - 372)) | (1 << (mysqlParser.PARTITIONING - 372)) | (1 << (mysqlParser.PARTITIONS - 372)) | (1 << (mysqlParser.PASSWORD - 372)) | (1 << (mysqlParser.PHASE - 372)) | (1 << (mysqlParser.PLUGIN_DIR - 372)) | (1 << (mysqlParser.PLUGINS - 372)) | (1 << (mysqlParser.PORT - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (mysqlParser.PRECEDES - 436)) | (1 << (mysqlParser.PREPARE - 436)) | (1 << (mysqlParser.PRESERVE - 436)) | (1 << (mysqlParser.PREV - 436)) | (1 << (mysqlParser.PROCESSLIST - 436)) | (1 << (mysqlParser.PROFILE - 436)) | (1 << (mysqlParser.PROFILES - 436)) | (1 << (mysqlParser.PROXY - 436)) | (1 << (mysqlParser.QUERY - 436)) | (1 << (mysqlParser.QUICK - 436)) | (1 << (mysqlParser.REBUILD - 436)) | (1 << (mysqlParser.RECOVER - 436)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (mysqlParser.REDUNDANT - 436)) | (1 << (mysqlParser.RELAY_LOG_FILE - 436)) | (1 << (mysqlParser.RELAY_LOG_POS - 436)) | (1 << (mysqlParser.RELAYLOG - 436)) | (1 << (mysqlParser.REMOVE - 436)) | (1 << (mysqlParser.REORGANIZE - 436)) | (1 << (mysqlParser.REPAIR - 436)) | (1 << (mysqlParser.REPLICATE_DO_DB - 436)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATION - 436)) | (1 << (mysqlParser.RESUME - 436)) | (1 << (mysqlParser.RETURNS - 436)) | (1 << (mysqlParser.ROLLBACK - 436)) | (1 << (mysqlParser.ROLLUP - 436)) | (1 << (mysqlParser.ROTATE - 436)) | (1 << (mysqlParser.ROW - 436)) | (1 << (mysqlParser.ROWS - 436)) | (1 << (mysqlParser.ROW_FORMAT - 436)) | (1 << (mysqlParser.SAVEPOINT - 436)) | (1 << (mysqlParser.SCHEDULE - 436)) | (1 << (mysqlParser.SECURITY - 436)) | (1 << (mysqlParser.SERVER - 436)) | (1 << (mysqlParser.SESSION - 436)) | (1 << (mysqlParser.SHARE - 436)) | (1 << (mysqlParser.SHARED - 436)) | (1 << (mysqlParser.SIGNED - 436)) | (1 << (mysqlParser.SIMPLE - 436)) | (1 << (mysqlParser.SLAVE - 436)) | (1 << (mysqlParser.SNAPSHOT - 436)) | (1 << (mysqlParser.SOCKET - 436)) | (1 << (mysqlParser.SOME - 436)) | (1 << (mysqlParser.SOUNDS - 436)) | (1 << (mysqlParser.SOURCE - 436)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (mysqlParser.SQL_CACHE - 436)) | (1 << (mysqlParser.SQL_NO_CACHE - 436)) | (1 << (mysqlParser.SQL_THREAD - 436)) | (1 << (mysqlParser.START - 436)) | (1 << (mysqlParser.STARTS - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (mysqlParser.STATS_AUTO_RECALC - 500)) | (1 << (mysqlParser.STATS_PERSISTENT - 500)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (mysqlParser.STATUS - 500)) | (1 << (mysqlParser.STOP - 500)) | (1 << (mysqlParser.STORAGE - 500)) | (1 << (mysqlParser.STRING - 500)) | (1 << (mysqlParser.SUBJECT - 500)) | (1 << (mysqlParser.SUBPARTITION - 500)) | (1 << (mysqlParser.SUBPARTITIONS - 500)) | (1 << (mysqlParser.SUSPEND - 500)) | (1 << (mysqlParser.SWAPS - 500)) | (1 << (mysqlParser.SWITCHES - 500)) | (1 << (mysqlParser.TABLESPACE - 500)) | (1 << (mysqlParser.TEMPORARY - 500)) | (1 << (mysqlParser.TEMPTABLE - 500)) | (1 << (mysqlParser.THAN - 500)) | (1 << (mysqlParser.TRANSACTION - 500)) | (1 << (mysqlParser.TRUNCATE - 500)) | (1 << (mysqlParser.UNDEFINED - 500)) | (1 << (mysqlParser.UNDOFILE - 500)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (mysqlParser.UNKNOWN - 500)) | (1 << (mysqlParser.UPGRADE - 500)) | (1 << (mysqlParser.USER - 500)) | (1 << (mysqlParser.VALIDATION - 500)) | (1 << (mysqlParser.VALUE - 500)) | (1 << (mysqlParser.VARIABLES - 500)) | (1 << (mysqlParser.VIEW - 500)) | (1 << (mysqlParser.WAIT - 500)) | (1 << (mysqlParser.WARNINGS - 500)) | (1 << (mysqlParser.WITHOUT - 500)) | (1 << (mysqlParser.WORK - 500)) | (1 << (mysqlParser.WRAPPER - 500)) | (1 << (mysqlParser.X509 - 500)) | (1 << (mysqlParser.XA - 500)) | (1 << (mysqlParser.XML - 500)) | (1 << (mysqlParser.QUARTER - 500)) | (1 << (mysqlParser.MONTH - 500)) | (1 << (mysqlParser.DAY - 500)) | (1 << (mysqlParser.HOUR - 500)) | (1 << (mysqlParser.MINUTE - 500)) | (1 << (mysqlParser.WEEK - 500)) | (1 << (mysqlParser.SECOND - 500)) | (1 << (mysqlParser.MICROSECOND - 500)) | (1 << (mysqlParser.TABLES - 500)) | (1 << (mysqlParser.ROUTINE - 500)) | (1 << (mysqlParser.EXECUTE - 500)) | (1 << (mysqlParser.FILE - 500)) | (1 << (mysqlParser.PROCESS - 500)) | (1 << (mysqlParser.RELOAD - 500)) | (1 << (mysqlParser.SHUTDOWN - 500)) | (1 << (mysqlParser.SUPER - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (mysqlParser.PRIVILEGES - 564)) | (1 << (mysqlParser.ARMSCII8 - 564)) | (1 << (mysqlParser.ASCII - 564)) | (1 << (mysqlParser.BIG5 - 564)) | (1 << (mysqlParser.CP1250 - 564)) | (1 << (mysqlParser.CP1251 - 564)) | (1 << (mysqlParser.CP1256 - 564)) | (1 << (mysqlParser.CP1257 - 564)) | (1 << (mysqlParser.CP850 - 564)) | (1 << (mysqlParser.CP852 - 564)) | (1 << (mysqlParser.CP866 - 564)) | (1 << (mysqlParser.CP932 - 564)) | (1 << (mysqlParser.DEC8 - 564)) | (1 << (mysqlParser.EUCJPMS - 564)) | (1 << (mysqlParser.EUCKR - 564)) | (1 << (mysqlParser.GB2312 - 564)) | (1 << (mysqlParser.GBK - 564)) | (1 << (mysqlParser.GEOSTD8 - 564)) | (1 << (mysqlParser.GREEK - 564)) | (1 << (mysqlParser.HEBREW - 564)) | (1 << (mysqlParser.HP8 - 564)) | (1 << (mysqlParser.KEYBCS2 - 564)) | (1 << (mysqlParser.KOI8R - 564)) | (1 << (mysqlParser.KOI8U - 564)) | (1 << (mysqlParser.LATIN1 - 564)) | (1 << (mysqlParser.LATIN2 - 564)) | (1 << (mysqlParser.LATIN5 - 564)) | (1 << (mysqlParser.LATIN7 - 564)) | (1 << (mysqlParser.MACCE - 564)) | (1 << (mysqlParser.MACROMAN - 564)) | (1 << (mysqlParser.SJIS - 564)) | (1 << (mysqlParser.SWE7 - 564)) | (1 << (mysqlParser.TIS620 - 564)) | (1 << (mysqlParser.UCS2 - 564)) | (1 << (mysqlParser.UJIS - 564)) | (1 << (mysqlParser.UTF16 - 564)) | (1 << (mysqlParser.UTF16LE - 564)) | (1 << (mysqlParser.UTF32 - 564)) | (1 << (mysqlParser.UTF8 - 564)) | (1 << (mysqlParser.UTF8MB3 - 564)) | (1 << (mysqlParser.UTF8MB4 - 564)) | (1 << (mysqlParser.ARCHIVE - 564)) | (1 << (mysqlParser.BLACKHOLE - 564)) | (1 << (mysqlParser.CSV - 564)) | (1 << (mysqlParser.FEDERATED - 564)) | (1 << (mysqlParser.INNODB - 564)) | (1 << (mysqlParser.MEMORY - 564)) | (1 << (mysqlParser.MRG_MYISAM - 564)) | (1 << (mysqlParser.MYISAM - 564)) | (1 << (mysqlParser.NDB - 564)) | (1 << (mysqlParser.NDBCLUSTER - 564)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (mysqlParser.REPEATABLE - 564)) | (1 << (mysqlParser.COMMITTED - 564)) | (1 << (mysqlParser.UNCOMMITTED - 564)) | (1 << (mysqlParser.SERIALIZABLE - 564)) | (1 << (mysqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (mysqlParser.LINESTRING - 564)) | (1 << (mysqlParser.MULTILINESTRING - 564)) | (1 << (mysqlParser.MULTIPOINT - 564)) | (1 << (mysqlParser.MULTIPOLYGON - 564)) | (1 << (mysqlParser.POINT - 564)) | (1 << (mysqlParser.POLYGON - 564)) | (1 << (mysqlParser.ABS - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (mysqlParser.ACOS - 628)) | (1 << (mysqlParser.ADDDATE - 628)) | (1 << (mysqlParser.ADDTIME - 628)) | (1 << (mysqlParser.AES_DECRYPT - 628)) | (1 << (mysqlParser.AES_ENCRYPT - 628)) | (1 << (mysqlParser.AREA - 628)) | (1 << (mysqlParser.ASBINARY - 628)) | (1 << (mysqlParser.ASIN - 628)) | (1 << (mysqlParser.ASTEXT - 628)) | (1 << (mysqlParser.ASWKB - 628)) | (1 << (mysqlParser.ASWKT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (mysqlParser.ATAN - 628)) | (1 << (mysqlParser.ATAN2 - 628)) | (1 << (mysqlParser.BENCHMARK - 628)) | (1 << (mysqlParser.BIN - 628)) | (1 << (mysqlParser.BIT_COUNT - 628)) | (1 << (mysqlParser.BIT_LENGTH - 628)) | (1 << (mysqlParser.BUFFER - 628)) | (1 << (mysqlParser.CEIL - 628)) | (1 << (mysqlParser.CEILING - 628)) | (1 << (mysqlParser.CENTROID - 628)) | (1 << (mysqlParser.CHARACTER_LENGTH - 628)) | (1 << (mysqlParser.CHARSET - 628)) | (1 << (mysqlParser.CHAR_LENGTH - 628)) | (1 << (mysqlParser.COERCIBILITY - 628)) | (1 << (mysqlParser.COLLATION - 628)) | (1 << (mysqlParser.COMPRESS - 628)) | (1 << (mysqlParser.CONCAT - 628)) | (1 << (mysqlParser.CONCAT_WS - 628)) | (1 << (mysqlParser.CONNECTION_ID - 628)) | (1 << (mysqlParser.CONV - 628)) | (1 << (mysqlParser.CONVERT_TZ - 628)) | (1 << (mysqlParser.COS - 628)) | (1 << (mysqlParser.COT - 628)) | (1 << (mysqlParser.CRC32 - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (mysqlParser.CREATE_DIGEST - 628)) | (1 << (mysqlParser.CROSSES - 628)) | (1 << (mysqlParser.DATEDIFF - 628)) | (1 << (mysqlParser.DATE_FORMAT - 628)) | (1 << (mysqlParser.DAYNAME - 628)) | (1 << (mysqlParser.DAYOFMONTH - 628)) | (1 << (mysqlParser.DAYOFWEEK - 628)) | (1 << (mysqlParser.DAYOFYEAR - 628)) | (1 << (mysqlParser.DECODE - 628)) | (1 << (mysqlParser.DEGREES - 628)) | (1 << (mysqlParser.DES_DECRYPT - 628)) | (1 << (mysqlParser.DES_ENCRYPT - 628)) | (1 << (mysqlParser.DIMENSION - 628)) | (1 << (mysqlParser.DISJOINT - 628)) | (1 << (mysqlParser.ELT - 628)) | (1 << (mysqlParser.ENCODE - 628)) | (1 << (mysqlParser.ENCRYPT - 628)) | (1 << (mysqlParser.ENDPOINT - 628)) | (1 << (mysqlParser.ENVELOPE - 628)) | (1 << (mysqlParser.EQUALS - 628)) | (1 << (mysqlParser.EXP - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (mysqlParser.EXPORT_SET - 692)) | (1 << (mysqlParser.EXTERIORRING - 692)) | (1 << (mysqlParser.EXTRACTVALUE - 692)) | (1 << (mysqlParser.FIELD - 692)) | (1 << (mysqlParser.FIND_IN_SET - 692)) | (1 << (mysqlParser.FLOOR - 692)) | (1 << (mysqlParser.FORMAT - 692)) | (1 << (mysqlParser.FOUND_ROWS - 692)) | (1 << (mysqlParser.FROM_BASE64 - 692)) | (1 << (mysqlParser.FROM_DAYS - 692)) | (1 << (mysqlParser.FROM_UNIXTIME - 692)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 692)) | (1 << (mysqlParser.GEOMETRYN - 692)) | (1 << (mysqlParser.GEOMETRYTYPE - 692)) | (1 << (mysqlParser.GEOMFROMTEXT - 692)) | (1 << (mysqlParser.GEOMFROMWKB - 692)) | (1 << (mysqlParser.GET_FORMAT - 692)) | (1 << (mysqlParser.GET_LOCK - 692)) | (1 << (mysqlParser.GLENGTH - 692)) | (1 << (mysqlParser.GREATEST - 692)) | (1 << (mysqlParser.GTID_SUBSET - 692)) | (1 << (mysqlParser.GTID_SUBTRACT - 692)) | (1 << (mysqlParser.HEX - 692)) | (1 << (mysqlParser.IFNULL - 692)) | (1 << (mysqlParser.INET6_ATON - 692)) | (1 << (mysqlParser.INET6_NTOA - 692)) | (1 << (mysqlParser.INET_ATON - 692)) | (1 << (mysqlParser.INET_NTOA - 692)) | (1 << (mysqlParser.INSTR - 692)) | (1 << (mysqlParser.INTERIORRINGN - 692)) | (1 << (mysqlParser.INTERSECTS - 692)) | (1 << (mysqlParser.ISCLOSED - 692)) | (1 << (mysqlParser.ISEMPTY - 692)) | (1 << (mysqlParser.ISNULL - 692)) | (1 << (mysqlParser.ISSIMPLE - 692)) | (1 << (mysqlParser.IS_FREE_LOCK - 692)) | (1 << (mysqlParser.IS_IPV4 - 692)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 692)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 692)) | (1 << (mysqlParser.IS_IPV6 - 692)) | (1 << (mysqlParser.IS_USED_LOCK - 692)) | (1 << (mysqlParser.LAST_INSERT_ID - 692)) | (1 << (mysqlParser.LCASE - 692)) | (1 << (mysqlParser.LEAST - 692)) | (1 << (mysqlParser.LENGTH - 692)) | (1 << (mysqlParser.LINEFROMTEXT - 692)) | (1 << (mysqlParser.LINEFROMWKB - 692)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 692)) | (1 << (mysqlParser.LN - 692)) | (1 << (mysqlParser.LOAD_FILE - 692)) | (1 << (mysqlParser.LOCATE - 692)) | (1 << (mysqlParser.LOG - 692)) | (1 << (mysqlParser.LOG10 - 692)) | (1 << (mysqlParser.LOG2 - 692)) | (1 << (mysqlParser.LOWER - 692)) | (1 << (mysqlParser.LPAD - 692)) | (1 << (mysqlParser.LTRIM - 692)) | (1 << (mysqlParser.MAKEDATE - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (mysqlParser.MAKETIME - 756)) | (1 << (mysqlParser.MAKE_SET - 756)) | (1 << (mysqlParser.MASTER_POS_WAIT - 756)) | (1 << (mysqlParser.MBRCONTAINS - 756)) | (1 << (mysqlParser.MBRDISJOINT - 756)) | (1 << (mysqlParser.MBREQUAL - 756)) | (1 << (mysqlParser.MBRINTERSECTS - 756)) | (1 << (mysqlParser.MBROVERLAPS - 756)) | (1 << (mysqlParser.MBRTOUCHES - 756)) | (1 << (mysqlParser.MBRWITHIN - 756)) | (1 << (mysqlParser.MD5 - 756)) | (1 << (mysqlParser.MLINEFROMTEXT - 756)) | (1 << (mysqlParser.MLINEFROMWKB - 756)) | (1 << (mysqlParser.MONTHNAME - 756)) | (1 << (mysqlParser.MPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MPOINTFROMWKB - 756)) | (1 << (mysqlParser.MPOLYFROMTEXT - 756)) | (1 << (mysqlParser.MPOLYFROMWKB - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (mysqlParser.NAME_CONST - 756)) | (1 << (mysqlParser.NULLIF - 756)) | (1 << (mysqlParser.NUMGEOMETRIES - 756)) | (1 << (mysqlParser.NUMINTERIORRINGS - 756)) | (1 << (mysqlParser.NUMPOINTS - 756)) | (1 << (mysqlParser.OCT - 756)) | (1 << (mysqlParser.OCTET_LENGTH - 756)) | (1 << (mysqlParser.ORD - 756)) | (1 << (mysqlParser.OVERLAPS - 756)) | (1 << (mysqlParser.PERIOD_ADD - 756)) | (1 << (mysqlParser.PERIOD_DIFF - 756)) | (1 << (mysqlParser.PI - 756)) | (1 << (mysqlParser.POINTFROMTEXT - 756)) | (1 << (mysqlParser.POINTFROMWKB - 756)) | (1 << (mysqlParser.POINTN - 756)) | (1 << (mysqlParser.POLYFROMTEXT - 756)) | (1 << (mysqlParser.POLYFROMWKB - 756)) | (1 << (mysqlParser.POLYGONFROMTEXT - 756)) | (1 << (mysqlParser.POLYGONFROMWKB - 756)) | (1 << (mysqlParser.POW - 756)) | (1 << (mysqlParser.POWER - 756)) | (1 << (mysqlParser.QUOTE - 756)) | (1 << (mysqlParser.RADIANS - 756)) | (1 << (mysqlParser.RAND - 756)) | (1 << (mysqlParser.RANDOM_BYTES - 756)) | (1 << (mysqlParser.RELEASE_LOCK - 756)) | (1 << (mysqlParser.REVERSE - 756)) | (1 << (mysqlParser.ROUND - 756)) | (1 << (mysqlParser.ROW_COUNT - 756)) | (1 << (mysqlParser.RPAD - 756)) | (1 << (mysqlParser.RTRIM - 756)) | (1 << (mysqlParser.SEC_TO_TIME - 756)) | (1 << (mysqlParser.SESSION_USER - 756)) | (1 << (mysqlParser.SHA - 756)) | (1 << (mysqlParser.SHA1 - 756)) | (1 << (mysqlParser.SHA2 - 756)) | (1 << (mysqlParser.SIGN - 756)) | (1 << (mysqlParser.SIN - 756)) | (1 << (mysqlParser.SLEEP - 756)) | (1 << (mysqlParser.SOUNDEX - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (mysqlParser.SQRT - 820)) | (1 << (mysqlParser.SRID - 820)) | (1 << (mysqlParser.STARTPOINT - 820)) | (1 << (mysqlParser.STRCMP - 820)) | (1 << (mysqlParser.STR_TO_DATE - 820)) | (1 << (mysqlParser.ST_AREA - 820)) | (1 << (mysqlParser.ST_ASBINARY - 820)) | (1 << (mysqlParser.ST_ASTEXT - 820)) | (1 << (mysqlParser.ST_ASWKB - 820)) | (1 << (mysqlParser.ST_ASWKT - 820)) | (1 << (mysqlParser.ST_BUFFER - 820)) | (1 << (mysqlParser.ST_CENTROID - 820)) | (1 << (mysqlParser.ST_CONTAINS - 820)) | (1 << (mysqlParser.ST_CROSSES - 820)) | (1 << (mysqlParser.ST_DIFFERENCE - 820)) | (1 << (mysqlParser.ST_DIMENSION - 820)) | (1 << (mysqlParser.ST_DISJOINT - 820)) | (1 << (mysqlParser.ST_DISTANCE - 820)) | (1 << (mysqlParser.ST_ENDPOINT - 820)) | (1 << (mysqlParser.ST_ENVELOPE - 820)) | (1 << (mysqlParser.ST_EQUALS - 820)) | (1 << (mysqlParser.ST_EXTERIORRING - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (mysqlParser.ST_GEOMETRYN - 820)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 820)) | (1 << (mysqlParser.ST_INTERIORRINGN - 820)) | (1 << (mysqlParser.ST_INTERSECTION - 820)) | (1 << (mysqlParser.ST_INTERSECTS - 820)) | (1 << (mysqlParser.ST_ISCLOSED - 820)) | (1 << (mysqlParser.ST_ISEMPTY - 820)) | (1 << (mysqlParser.ST_ISSIMPLE - 820)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINEFROMWKB - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 820)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (mysqlParser.ST_NUMPOINTS - 820)) | (1 << (mysqlParser.ST_OVERLAPS - 820)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 820)) | (1 << (mysqlParser.ST_POINTFROMWKB - 820)) | (1 << (mysqlParser.ST_POINTN - 820)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYFROMWKB - 820)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (mysqlParser.ST_SRID - 820)) | (1 << (mysqlParser.ST_STARTPOINT - 820)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (mysqlParser.ST_TOUCHES - 820)) | (1 << (mysqlParser.ST_UNION - 820)) | (1 << (mysqlParser.ST_WITHIN - 820)) | (1 << (mysqlParser.ST_X - 820)) | (1 << (mysqlParser.ST_Y - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (mysqlParser.SUBDATE - 884)) | (1 << (mysqlParser.SUBSTRING_INDEX - 884)) | (1 << (mysqlParser.SUBTIME - 884)) | (1 << (mysqlParser.SYSTEM_USER - 884)) | (1 << (mysqlParser.TAN - 884)) | (1 << (mysqlParser.TIMEDIFF - 884)) | (1 << (mysqlParser.TIMESTAMPADD - 884)) | (1 << (mysqlParser.TIMESTAMPDIFF - 884)) | (1 << (mysqlParser.TIME_FORMAT - 884)) | (1 << (mysqlParser.TIME_TO_SEC - 884)) | (1 << (mysqlParser.TOUCHES - 884)) | (1 << (mysqlParser.TO_BASE64 - 884)) | (1 << (mysqlParser.TO_DAYS - 884)) | (1 << (mysqlParser.TO_SECONDS - 884)) | (1 << (mysqlParser.UCASE - 884)) | (1 << (mysqlParser.UNCOMPRESS - 884)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (mysqlParser.UNHEX - 884)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 884)) | (1 << (mysqlParser.UPDATEXML - 884)) | (1 << (mysqlParser.UPPER - 884)) | (1 << (mysqlParser.UUID - 884)) | (1 << (mysqlParser.UUID_SHORT - 884)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (mysqlParser.VERSION - 884)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (mysqlParser.WEEKDAY - 884)) | (1 << (mysqlParser.WEEKOFYEAR - 884)) | (1 << (mysqlParser.WEIGHT_STRING - 884)) | (1 << (mysqlParser.WITHIN - 884)) | (1 << (mysqlParser.YEARWEEK - 884)) | (1 << (mysqlParser.Y_FUNCTION - 884)) | (1 << (mysqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 954)) & ~0x3f) == 0 and ((1 << (_la - 954)) & ((1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 954)) | (1 << (mysqlParser.ID - 954)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 954)))) != 0):
                self.state = 4000
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CursorStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_cursorStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CloseCursorContext(CursorStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.CursorStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CLOSE(self):
            return self.getToken(mysqlParser.CLOSE, 0)
        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloseCursor" ):
                listener.enterCloseCursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloseCursor" ):
                listener.exitCloseCursor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCloseCursor" ):
                return visitor.visitCloseCursor(self)
            else:
                return visitor.visitChildren(self)


    class OpenCursorContext(CursorStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.CursorStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN(self):
            return self.getToken(mysqlParser.OPEN, 0)
        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenCursor" ):
                listener.enterOpenCursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenCursor" ):
                listener.exitOpenCursor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpenCursor" ):
                return visitor.visitOpenCursor(self)
            else:
                return visitor.visitChildren(self)


    class FetchCursorContext(CursorStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.CursorStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FETCH(self):
            return self.getToken(mysqlParser.FETCH, 0)
        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)

        def INTO(self):
            return self.getToken(mysqlParser.INTO, 0)
        def uidList(self):
            return self.getTypedRuleContext(mysqlParser.UidListContext,0)

        def FROM(self):
            return self.getToken(mysqlParser.FROM, 0)
        def NEXT(self):
            return self.getToken(mysqlParser.NEXT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetchCursor" ):
                listener.enterFetchCursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetchCursor" ):
                listener.exitFetchCursor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFetchCursor" ):
                return visitor.visitFetchCursor(self)
            else:
                return visitor.visitChildren(self)



    def cursorStatement(self):

        localctx = mysqlParser.CursorStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_cursorStatement)
        self._la = 0 # Token type
        try:
            self.state = 4018
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.CLOSE]:
                localctx = mysqlParser.CloseCursorContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4003
                self.match(mysqlParser.CLOSE)
                self.state = 4004
                self.uid()
                pass
            elif token in [mysqlParser.FETCH]:
                localctx = mysqlParser.FetchCursorContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4005
                self.match(mysqlParser.FETCH)
                self.state = 4010
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.FROM or _la==mysqlParser.NEXT:
                    self.state = 4007
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==mysqlParser.NEXT:
                        self.state = 4006
                        self.match(mysqlParser.NEXT)


                    self.state = 4009
                    self.match(mysqlParser.FROM)


                self.state = 4012
                self.uid()
                self.state = 4013
                self.match(mysqlParser.INTO)
                self.state = 4014
                self.uidList()
                pass
            elif token in [mysqlParser.OPEN]:
                localctx = mysqlParser.OpenCursorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4016
                self.match(mysqlParser.OPEN)
                self.state = 4017
                self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclareVariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(mysqlParser.DECLARE, 0)

        def uidList(self):
            return self.getTypedRuleContext(mysqlParser.UidListContext,0)


        def dataType(self):
            return self.getTypedRuleContext(mysqlParser.DataTypeContext,0)


        def DEFAULT(self):
            return self.getToken(mysqlParser.DEFAULT, 0)

        def defaultValue(self):
            return self.getTypedRuleContext(mysqlParser.DefaultValueContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_declareVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareVariable" ):
                listener.enterDeclareVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareVariable" ):
                listener.exitDeclareVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclareVariable" ):
                return visitor.visitDeclareVariable(self)
            else:
                return visitor.visitChildren(self)




    def declareVariable(self):

        localctx = mysqlParser.DeclareVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_declareVariable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4020
            self.match(mysqlParser.DECLARE)
            self.state = 4021
            self.uidList()
            self.state = 4022
            self.dataType()
            self.state = 4025
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.DEFAULT:
                self.state = 4023
                self.match(mysqlParser.DEFAULT)
                self.state = 4024
                self.defaultValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclareConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(mysqlParser.DECLARE, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def CONDITION(self):
            return self.getToken(mysqlParser.CONDITION, 0)

        def FOR(self):
            return self.getToken(mysqlParser.FOR, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,0)


        def SQLSTATE(self):
            return self.getToken(mysqlParser.SQLSTATE, 0)

        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def VALUE(self):
            return self.getToken(mysqlParser.VALUE, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_declareCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareCondition" ):
                listener.enterDeclareCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareCondition" ):
                listener.exitDeclareCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclareCondition" ):
                return visitor.visitDeclareCondition(self)
            else:
                return visitor.visitChildren(self)




    def declareCondition(self):

        localctx = mysqlParser.DeclareConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_declareCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4027
            self.match(mysqlParser.DECLARE)
            self.state = 4028
            self.uid()
            self.state = 4029
            self.match(mysqlParser.CONDITION)
            self.state = 4030
            self.match(mysqlParser.FOR)
            self.state = 4037
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.ZERO_DECIMAL, mysqlParser.ONE_DECIMAL, mysqlParser.TWO_DECIMAL, mysqlParser.DECIMAL_LITERAL]:
                self.state = 4031
                self.decimalLiteral()
                pass
            elif token in [mysqlParser.SQLSTATE]:
                self.state = 4032
                self.match(mysqlParser.SQLSTATE)
                self.state = 4034
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.VALUE:
                    self.state = 4033
                    self.match(mysqlParser.VALUE)


                self.state = 4036
                self.match(mysqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclareCursorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(mysqlParser.DECLARE, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def CURSOR(self):
            return self.getToken(mysqlParser.CURSOR, 0)

        def FOR(self):
            return self.getToken(mysqlParser.FOR, 0)

        def selectStatement(self):
            return self.getTypedRuleContext(mysqlParser.SelectStatementContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_declareCursor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareCursor" ):
                listener.enterDeclareCursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareCursor" ):
                listener.exitDeclareCursor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclareCursor" ):
                return visitor.visitDeclareCursor(self)
            else:
                return visitor.visitChildren(self)




    def declareCursor(self):

        localctx = mysqlParser.DeclareCursorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_declareCursor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4039
            self.match(mysqlParser.DECLARE)
            self.state = 4040
            self.uid()
            self.state = 4041
            self.match(mysqlParser.CURSOR)
            self.state = 4042
            self.match(mysqlParser.FOR)
            self.state = 4043
            self.selectStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclareHandlerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.handlerAction = None # Token

        def DECLARE(self):
            return self.getToken(mysqlParser.DECLARE, 0)

        def HANDLER(self):
            return self.getToken(mysqlParser.HANDLER, 0)

        def FOR(self):
            return self.getToken(mysqlParser.FOR, 0)

        def handlerConditionValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.HandlerConditionValueContext)
            else:
                return self.getTypedRuleContext(mysqlParser.HandlerConditionValueContext,i)


        def routineBody(self):
            return self.getTypedRuleContext(mysqlParser.RoutineBodyContext,0)


        def CONTINUE(self):
            return self.getToken(mysqlParser.CONTINUE, 0)

        def EXIT(self):
            return self.getToken(mysqlParser.EXIT, 0)

        def UNDO(self):
            return self.getToken(mysqlParser.UNDO, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_declareHandler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareHandler" ):
                listener.enterDeclareHandler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareHandler" ):
                listener.exitDeclareHandler(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclareHandler" ):
                return visitor.visitDeclareHandler(self)
            else:
                return visitor.visitChildren(self)




    def declareHandler(self):

        localctx = mysqlParser.DeclareHandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_declareHandler)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4045
            self.match(mysqlParser.DECLARE)
            self.state = 4046
            localctx.handlerAction = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==mysqlParser.CONTINUE or _la==mysqlParser.EXIT or _la==mysqlParser.UNDO):
                localctx.handlerAction = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4047
            self.match(mysqlParser.HANDLER)
            self.state = 4048
            self.match(mysqlParser.FOR)
            self.state = 4049
            self.handlerConditionValue()
            self.state = 4054
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.COMMA:
                self.state = 4050
                self.match(mysqlParser.COMMA)
                self.state = 4051
                self.handlerConditionValue()
                self.state = 4056
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4057
            self.routineBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HandlerConditionValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decimalLiteral(self):
            return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,0)


        def SQLSTATE(self):
            return self.getToken(mysqlParser.SQLSTATE, 0)

        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def VALUE(self):
            return self.getToken(mysqlParser.VALUE, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def SQLWARNING(self):
            return self.getToken(mysqlParser.SQLWARNING, 0)

        def NOT(self):
            return self.getToken(mysqlParser.NOT, 0)

        def FOUND(self):
            return self.getToken(mysqlParser.FOUND, 0)

        def SQLEXCEPTION(self):
            return self.getToken(mysqlParser.SQLEXCEPTION, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_handlerConditionValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerConditionValue" ):
                listener.enterHandlerConditionValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerConditionValue" ):
                listener.exitHandlerConditionValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHandlerConditionValue" ):
                return visitor.visitHandlerConditionValue(self)
            else:
                return visitor.visitChildren(self)




    def handlerConditionValue(self):

        localctx = mysqlParser.HandlerConditionValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_handlerConditionValue)
        self._la = 0 # Token type
        try:
            self.state = 4070
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.ZERO_DECIMAL, mysqlParser.ONE_DECIMAL, mysqlParser.TWO_DECIMAL, mysqlParser.DECIMAL_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4059
                self.decimalLiteral()
                pass
            elif token in [mysqlParser.SQLSTATE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4060
                self.match(mysqlParser.SQLSTATE)
                self.state = 4062
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.VALUE:
                    self.state = 4061
                    self.match(mysqlParser.VALUE)


                self.state = 4064
                self.match(mysqlParser.STRING_LITERAL)
                pass
            elif token in [mysqlParser.LEFT, mysqlParser.RIGHT, mysqlParser.DATE, mysqlParser.TIME, mysqlParser.TIMESTAMP, mysqlParser.DATETIME, mysqlParser.YEAR, mysqlParser.TEXT, mysqlParser.ENUM, mysqlParser.COUNT, mysqlParser.POSITION, mysqlParser.ACCOUNT, mysqlParser.ACTION, mysqlParser.AFTER, mysqlParser.AGGREGATE, mysqlParser.ALGORITHM, mysqlParser.ANY, mysqlParser.AT, mysqlParser.AUTHORS, mysqlParser.AUTOCOMMIT, mysqlParser.AUTOEXTEND_SIZE, mysqlParser.AUTO_INCREMENT, mysqlParser.AVG_ROW_LENGTH, mysqlParser.BEGIN, mysqlParser.BINLOG, mysqlParser.BIT, mysqlParser.BLOCK, mysqlParser.BTREE, mysqlParser.CASCADED, mysqlParser.CHAIN, mysqlParser.CHANNEL, mysqlParser.CHECKSUM, mysqlParser.CIPHER, mysqlParser.CLIENT, mysqlParser.COALESCE, mysqlParser.CODE, mysqlParser.COLUMNS, mysqlParser.COLUMN_FORMAT, mysqlParser.COMMENT, mysqlParser.COMMIT, mysqlParser.COMPACT, mysqlParser.COMPLETION, mysqlParser.COMPRESSED, mysqlParser.COMPRESSION, mysqlParser.CONCURRENT, mysqlParser.CONNECTION, mysqlParser.CONSISTENT, mysqlParser.CONTAINS, mysqlParser.CONTEXT, mysqlParser.CONTRIBUTORS, mysqlParser.COPY, mysqlParser.CPU, mysqlParser.DATA, mysqlParser.DATAFILE, mysqlParser.DEALLOCATE, mysqlParser.DEFAULT_AUTH, mysqlParser.DEFINER, mysqlParser.DELAY_KEY_WRITE, mysqlParser.DIRECTORY, mysqlParser.DISABLE, mysqlParser.DISCARD, mysqlParser.DISK, mysqlParser.DO, mysqlParser.DUMPFILE, mysqlParser.DUPLICATE, mysqlParser.DYNAMIC, mysqlParser.ENABLE, mysqlParser.ENCRYPTION, mysqlParser.ENDS, mysqlParser.ENGINE, mysqlParser.ENGINES, mysqlParser.ERROR, mysqlParser.ERRORS, mysqlParser.ESCAPE, mysqlParser.EVEN, mysqlParser.EVENT, mysqlParser.EVENTS, mysqlParser.EVERY, mysqlParser.EXCHANGE, mysqlParser.EXCLUSIVE, mysqlParser.EXPIRE, mysqlParser.EXTENT_SIZE, mysqlParser.FAULTS, mysqlParser.FIELDS, mysqlParser.FILE_BLOCK_SIZE, mysqlParser.FILTER, mysqlParser.FIRST, mysqlParser.FIXED, mysqlParser.FOLLOWS, mysqlParser.FULL, mysqlParser.FUNCTION, mysqlParser.GLOBAL, mysqlParser.GRANTS, mysqlParser.GROUP_REPLICATION, mysqlParser.HASH, mysqlParser.HOST, mysqlParser.IDENTIFIED, mysqlParser.IGNORE_SERVER_IDS, mysqlParser.IMPORT, mysqlParser.INDEXES, mysqlParser.INITIAL_SIZE, mysqlParser.INPLACE, mysqlParser.INSERT_METHOD, mysqlParser.INSTANCE, mysqlParser.INVOKER, mysqlParser.IO, mysqlParser.IO_THREAD, mysqlParser.IPC, mysqlParser.ISOLATION, mysqlParser.ISSUER, mysqlParser.KEY_BLOCK_SIZE, mysqlParser.LANGUAGE, mysqlParser.LAST, mysqlParser.LEAVES, mysqlParser.LESS, mysqlParser.LEVEL, mysqlParser.LIST, mysqlParser.LOCAL, mysqlParser.LOGFILE, mysqlParser.LOGS, mysqlParser.MASTER, mysqlParser.MASTER_AUTO_POSITION, mysqlParser.MASTER_CONNECT_RETRY, mysqlParser.MASTER_DELAY, mysqlParser.MASTER_HEARTBEAT_PERIOD, mysqlParser.MASTER_HOST, mysqlParser.MASTER_LOG_FILE, mysqlParser.MASTER_LOG_POS, mysqlParser.MASTER_PASSWORD, mysqlParser.MASTER_PORT, mysqlParser.MASTER_RETRY_COUNT, mysqlParser.MASTER_SSL, mysqlParser.MASTER_SSL_CA, mysqlParser.MASTER_SSL_CAPATH, mysqlParser.MASTER_SSL_CERT, mysqlParser.MASTER_SSL_CIPHER, mysqlParser.MASTER_SSL_CRL, mysqlParser.MASTER_SSL_CRLPATH, mysqlParser.MASTER_SSL_KEY, mysqlParser.MASTER_TLS_VERSION, mysqlParser.MASTER_USER, mysqlParser.MAX_CONNECTIONS_PER_HOUR, mysqlParser.MAX_QUERIES_PER_HOUR, mysqlParser.MAX_ROWS, mysqlParser.MAX_SIZE, mysqlParser.MAX_UPDATES_PER_HOUR, mysqlParser.MAX_USER_CONNECTIONS, mysqlParser.MERGE, mysqlParser.MID, mysqlParser.MIGRATE, mysqlParser.MIN_ROWS, mysqlParser.MODIFY, mysqlParser.MUTEX, mysqlParser.MYSQL, mysqlParser.NAME, mysqlParser.NAMES, mysqlParser.NCHAR, mysqlParser.NEVER, mysqlParser.NO, mysqlParser.NODEGROUP, mysqlParser.NONE, mysqlParser.OFFLINE, mysqlParser.OFFSET, mysqlParser.OJ, mysqlParser.OLD_PASSWORD, mysqlParser.ONE, mysqlParser.ONLINE, mysqlParser.ONLY, mysqlParser.OPTIMIZER_COSTS, mysqlParser.OPTIONS, mysqlParser.OWNER, mysqlParser.PACK_KEYS, mysqlParser.PAGE, mysqlParser.PARSER, mysqlParser.PARTIAL, mysqlParser.PARTITIONING, mysqlParser.PARTITIONS, mysqlParser.PASSWORD, mysqlParser.PHASE, mysqlParser.PLUGIN_DIR, mysqlParser.PLUGINS, mysqlParser.PORT, mysqlParser.PRECEDES, mysqlParser.PREPARE, mysqlParser.PRESERVE, mysqlParser.PREV, mysqlParser.PROCESSLIST, mysqlParser.PROFILE, mysqlParser.PROFILES, mysqlParser.PROXY, mysqlParser.QUERY, mysqlParser.QUICK, mysqlParser.REBUILD, mysqlParser.RECOVER, mysqlParser.REDO_BUFFER_SIZE, mysqlParser.REDUNDANT, mysqlParser.RELAY_LOG_FILE, mysqlParser.RELAY_LOG_POS, mysqlParser.RELAYLOG, mysqlParser.REMOVE, mysqlParser.REORGANIZE, mysqlParser.REPAIR, mysqlParser.REPLICATE_DO_DB, mysqlParser.REPLICATE_DO_TABLE, mysqlParser.REPLICATE_IGNORE_DB, mysqlParser.REPLICATE_IGNORE_TABLE, mysqlParser.REPLICATE_REWRITE_DB, mysqlParser.REPLICATE_WILD_DO_TABLE, mysqlParser.REPLICATE_WILD_IGNORE_TABLE, mysqlParser.REPLICATION, mysqlParser.RESUME, mysqlParser.RETURNS, mysqlParser.ROLLBACK, mysqlParser.ROLLUP, mysqlParser.ROTATE, mysqlParser.ROW, mysqlParser.ROWS, mysqlParser.ROW_FORMAT, mysqlParser.SAVEPOINT, mysqlParser.SCHEDULE, mysqlParser.SECURITY, mysqlParser.SERVER, mysqlParser.SESSION, mysqlParser.SHARE, mysqlParser.SHARED, mysqlParser.SIGNED, mysqlParser.SIMPLE, mysqlParser.SLAVE, mysqlParser.SNAPSHOT, mysqlParser.SOCKET, mysqlParser.SOME, mysqlParser.SOUNDS, mysqlParser.SOURCE, mysqlParser.SQL_AFTER_GTIDS, mysqlParser.SQL_AFTER_MTS_GAPS, mysqlParser.SQL_BEFORE_GTIDS, mysqlParser.SQL_BUFFER_RESULT, mysqlParser.SQL_CACHE, mysqlParser.SQL_NO_CACHE, mysqlParser.SQL_THREAD, mysqlParser.START, mysqlParser.STARTS, mysqlParser.STATS_AUTO_RECALC, mysqlParser.STATS_PERSISTENT, mysqlParser.STATS_SAMPLE_PAGES, mysqlParser.STATUS, mysqlParser.STOP, mysqlParser.STORAGE, mysqlParser.STRING, mysqlParser.SUBJECT, mysqlParser.SUBPARTITION, mysqlParser.SUBPARTITIONS, mysqlParser.SUSPEND, mysqlParser.SWAPS, mysqlParser.SWITCHES, mysqlParser.TABLESPACE, mysqlParser.TEMPORARY, mysqlParser.TEMPTABLE, mysqlParser.THAN, mysqlParser.TRANSACTION, mysqlParser.TRUNCATE, mysqlParser.UNDEFINED, mysqlParser.UNDOFILE, mysqlParser.UNDO_BUFFER_SIZE, mysqlParser.UNKNOWN, mysqlParser.UPGRADE, mysqlParser.USER, mysqlParser.VALIDATION, mysqlParser.VALUE, mysqlParser.VARIABLES, mysqlParser.VIEW, mysqlParser.WAIT, mysqlParser.WARNINGS, mysqlParser.WITHOUT, mysqlParser.WORK, mysqlParser.WRAPPER, mysqlParser.X509, mysqlParser.XA, mysqlParser.XML, mysqlParser.QUARTER, mysqlParser.MONTH, mysqlParser.DAY, mysqlParser.HOUR, mysqlParser.MINUTE, mysqlParser.WEEK, mysqlParser.SECOND, mysqlParser.MICROSECOND, mysqlParser.TABLES, mysqlParser.ROUTINE, mysqlParser.EXECUTE, mysqlParser.FILE, mysqlParser.PROCESS, mysqlParser.RELOAD, mysqlParser.SHUTDOWN, mysqlParser.SUPER, mysqlParser.PRIVILEGES, mysqlParser.ARMSCII8, mysqlParser.ASCII, mysqlParser.BIG5, mysqlParser.CP1250, mysqlParser.CP1251, mysqlParser.CP1256, mysqlParser.CP1257, mysqlParser.CP850, mysqlParser.CP852, mysqlParser.CP866, mysqlParser.CP932, mysqlParser.DEC8, mysqlParser.EUCJPMS, mysqlParser.EUCKR, mysqlParser.GB2312, mysqlParser.GBK, mysqlParser.GEOSTD8, mysqlParser.GREEK, mysqlParser.HEBREW, mysqlParser.HP8, mysqlParser.KEYBCS2, mysqlParser.KOI8R, mysqlParser.KOI8U, mysqlParser.LATIN1, mysqlParser.LATIN2, mysqlParser.LATIN5, mysqlParser.LATIN7, mysqlParser.MACCE, mysqlParser.MACROMAN, mysqlParser.SJIS, mysqlParser.SWE7, mysqlParser.TIS620, mysqlParser.UCS2, mysqlParser.UJIS, mysqlParser.UTF16, mysqlParser.UTF16LE, mysqlParser.UTF32, mysqlParser.UTF8, mysqlParser.UTF8MB3, mysqlParser.UTF8MB4, mysqlParser.ARCHIVE, mysqlParser.BLACKHOLE, mysqlParser.CSV, mysqlParser.FEDERATED, mysqlParser.INNODB, mysqlParser.MEMORY, mysqlParser.MRG_MYISAM, mysqlParser.MYISAM, mysqlParser.NDB, mysqlParser.NDBCLUSTER, mysqlParser.PERFOMANCE_SCHEMA, mysqlParser.REPEATABLE, mysqlParser.COMMITTED, mysqlParser.UNCOMMITTED, mysqlParser.SERIALIZABLE, mysqlParser.GEOMETRYCOLLECTION, mysqlParser.LINESTRING, mysqlParser.MULTILINESTRING, mysqlParser.MULTIPOINT, mysqlParser.MULTIPOLYGON, mysqlParser.POINT, mysqlParser.POLYGON, mysqlParser.ABS, mysqlParser.ACOS, mysqlParser.ADDDATE, mysqlParser.ADDTIME, mysqlParser.AES_DECRYPT, mysqlParser.AES_ENCRYPT, mysqlParser.AREA, mysqlParser.ASBINARY, mysqlParser.ASIN, mysqlParser.ASTEXT, mysqlParser.ASWKB, mysqlParser.ASWKT, mysqlParser.ASYMMETRIC_DECRYPT, mysqlParser.ASYMMETRIC_DERIVE, mysqlParser.ASYMMETRIC_ENCRYPT, mysqlParser.ASYMMETRIC_SIGN, mysqlParser.ASYMMETRIC_VERIFY, mysqlParser.ATAN, mysqlParser.ATAN2, mysqlParser.BENCHMARK, mysqlParser.BIN, mysqlParser.BIT_COUNT, mysqlParser.BIT_LENGTH, mysqlParser.BUFFER, mysqlParser.CEIL, mysqlParser.CEILING, mysqlParser.CENTROID, mysqlParser.CHARACTER_LENGTH, mysqlParser.CHARSET, mysqlParser.CHAR_LENGTH, mysqlParser.COERCIBILITY, mysqlParser.COLLATION, mysqlParser.COMPRESS, mysqlParser.CONCAT, mysqlParser.CONCAT_WS, mysqlParser.CONNECTION_ID, mysqlParser.CONV, mysqlParser.CONVERT_TZ, mysqlParser.COS, mysqlParser.COT, mysqlParser.CRC32, mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY, mysqlParser.CREATE_ASYMMETRIC_PUB_KEY, mysqlParser.CREATE_DH_PARAMETERS, mysqlParser.CREATE_DIGEST, mysqlParser.CROSSES, mysqlParser.DATEDIFF, mysqlParser.DATE_FORMAT, mysqlParser.DAYNAME, mysqlParser.DAYOFMONTH, mysqlParser.DAYOFWEEK, mysqlParser.DAYOFYEAR, mysqlParser.DECODE, mysqlParser.DEGREES, mysqlParser.DES_DECRYPT, mysqlParser.DES_ENCRYPT, mysqlParser.DIMENSION, mysqlParser.DISJOINT, mysqlParser.ELT, mysqlParser.ENCODE, mysqlParser.ENCRYPT, mysqlParser.ENDPOINT, mysqlParser.ENVELOPE, mysqlParser.EQUALS, mysqlParser.EXP, mysqlParser.EXPORT_SET, mysqlParser.EXTERIORRING, mysqlParser.EXTRACTVALUE, mysqlParser.FIELD, mysqlParser.FIND_IN_SET, mysqlParser.FLOOR, mysqlParser.FORMAT, mysqlParser.FOUND_ROWS, mysqlParser.FROM_BASE64, mysqlParser.FROM_DAYS, mysqlParser.FROM_UNIXTIME, mysqlParser.GEOMCOLLFROMTEXT, mysqlParser.GEOMCOLLFROMWKB, mysqlParser.GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.GEOMETRYCOLLECTIONFROMWKB, mysqlParser.GEOMETRYFROMTEXT, mysqlParser.GEOMETRYFROMWKB, mysqlParser.GEOMETRYN, mysqlParser.GEOMETRYTYPE, mysqlParser.GEOMFROMTEXT, mysqlParser.GEOMFROMWKB, mysqlParser.GET_FORMAT, mysqlParser.GET_LOCK, mysqlParser.GLENGTH, mysqlParser.GREATEST, mysqlParser.GTID_SUBSET, mysqlParser.GTID_SUBTRACT, mysqlParser.HEX, mysqlParser.IFNULL, mysqlParser.INET6_ATON, mysqlParser.INET6_NTOA, mysqlParser.INET_ATON, mysqlParser.INET_NTOA, mysqlParser.INSTR, mysqlParser.INTERIORRINGN, mysqlParser.INTERSECTS, mysqlParser.ISCLOSED, mysqlParser.ISEMPTY, mysqlParser.ISNULL, mysqlParser.ISSIMPLE, mysqlParser.IS_FREE_LOCK, mysqlParser.IS_IPV4, mysqlParser.IS_IPV4_COMPAT, mysqlParser.IS_IPV4_MAPPED, mysqlParser.IS_IPV6, mysqlParser.IS_USED_LOCK, mysqlParser.LAST_INSERT_ID, mysqlParser.LCASE, mysqlParser.LEAST, mysqlParser.LENGTH, mysqlParser.LINEFROMTEXT, mysqlParser.LINEFROMWKB, mysqlParser.LINESTRINGFROMTEXT, mysqlParser.LINESTRINGFROMWKB, mysqlParser.LN, mysqlParser.LOAD_FILE, mysqlParser.LOCATE, mysqlParser.LOG, mysqlParser.LOG10, mysqlParser.LOG2, mysqlParser.LOWER, mysqlParser.LPAD, mysqlParser.LTRIM, mysqlParser.MAKEDATE, mysqlParser.MAKETIME, mysqlParser.MAKE_SET, mysqlParser.MASTER_POS_WAIT, mysqlParser.MBRCONTAINS, mysqlParser.MBRDISJOINT, mysqlParser.MBREQUAL, mysqlParser.MBRINTERSECTS, mysqlParser.MBROVERLAPS, mysqlParser.MBRTOUCHES, mysqlParser.MBRWITHIN, mysqlParser.MD5, mysqlParser.MLINEFROMTEXT, mysqlParser.MLINEFROMWKB, mysqlParser.MONTHNAME, mysqlParser.MPOINTFROMTEXT, mysqlParser.MPOINTFROMWKB, mysqlParser.MPOLYFROMTEXT, mysqlParser.MPOLYFROMWKB, mysqlParser.MULTILINESTRINGFROMTEXT, mysqlParser.MULTILINESTRINGFROMWKB, mysqlParser.MULTIPOINTFROMTEXT, mysqlParser.MULTIPOINTFROMWKB, mysqlParser.MULTIPOLYGONFROMTEXT, mysqlParser.MULTIPOLYGONFROMWKB, mysqlParser.NAME_CONST, mysqlParser.NULLIF, mysqlParser.NUMGEOMETRIES, mysqlParser.NUMINTERIORRINGS, mysqlParser.NUMPOINTS, mysqlParser.OCT, mysqlParser.OCTET_LENGTH, mysqlParser.ORD, mysqlParser.OVERLAPS, mysqlParser.PERIOD_ADD, mysqlParser.PERIOD_DIFF, mysqlParser.PI, mysqlParser.POINTFROMTEXT, mysqlParser.POINTFROMWKB, mysqlParser.POINTN, mysqlParser.POLYFROMTEXT, mysqlParser.POLYFROMWKB, mysqlParser.POLYGONFROMTEXT, mysqlParser.POLYGONFROMWKB, mysqlParser.POW, mysqlParser.POWER, mysqlParser.QUOTE, mysqlParser.RADIANS, mysqlParser.RAND, mysqlParser.RANDOM_BYTES, mysqlParser.RELEASE_LOCK, mysqlParser.REVERSE, mysqlParser.ROUND, mysqlParser.ROW_COUNT, mysqlParser.RPAD, mysqlParser.RTRIM, mysqlParser.SEC_TO_TIME, mysqlParser.SESSION_USER, mysqlParser.SHA, mysqlParser.SHA1, mysqlParser.SHA2, mysqlParser.SIGN, mysqlParser.SIN, mysqlParser.SLEEP, mysqlParser.SOUNDEX, mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, mysqlParser.SQRT, mysqlParser.SRID, mysqlParser.STARTPOINT, mysqlParser.STRCMP, mysqlParser.STR_TO_DATE, mysqlParser.ST_AREA, mysqlParser.ST_ASBINARY, mysqlParser.ST_ASTEXT, mysqlParser.ST_ASWKB, mysqlParser.ST_ASWKT, mysqlParser.ST_BUFFER, mysqlParser.ST_CENTROID, mysqlParser.ST_CONTAINS, mysqlParser.ST_CROSSES, mysqlParser.ST_DIFFERENCE, mysqlParser.ST_DIMENSION, mysqlParser.ST_DISJOINT, mysqlParser.ST_DISTANCE, mysqlParser.ST_ENDPOINT, mysqlParser.ST_ENVELOPE, mysqlParser.ST_EQUALS, mysqlParser.ST_EXTERIORRING, mysqlParser.ST_GEOMCOLLFROMTEXT, mysqlParser.ST_GEOMCOLLFROMTXT, mysqlParser.ST_GEOMCOLLFROMWKB, mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, mysqlParser.ST_GEOMETRYFROMTEXT, mysqlParser.ST_GEOMETRYFROMWKB, mysqlParser.ST_GEOMETRYN, mysqlParser.ST_GEOMETRYTYPE, mysqlParser.ST_GEOMFROMTEXT, mysqlParser.ST_GEOMFROMWKB, mysqlParser.ST_INTERIORRINGN, mysqlParser.ST_INTERSECTION, mysqlParser.ST_INTERSECTS, mysqlParser.ST_ISCLOSED, mysqlParser.ST_ISEMPTY, mysqlParser.ST_ISSIMPLE, mysqlParser.ST_LINEFROMTEXT, mysqlParser.ST_LINEFROMWKB, mysqlParser.ST_LINESTRINGFROMTEXT, mysqlParser.ST_LINESTRINGFROMWKB, mysqlParser.ST_NUMGEOMETRIES, mysqlParser.ST_NUMINTERIORRING, mysqlParser.ST_NUMINTERIORRINGS, mysqlParser.ST_NUMPOINTS, mysqlParser.ST_OVERLAPS, mysqlParser.ST_POINTFROMTEXT, mysqlParser.ST_POINTFROMWKB, mysqlParser.ST_POINTN, mysqlParser.ST_POLYFROMTEXT, mysqlParser.ST_POLYFROMWKB, mysqlParser.ST_POLYGONFROMTEXT, mysqlParser.ST_POLYGONFROMWKB, mysqlParser.ST_SRID, mysqlParser.ST_STARTPOINT, mysqlParser.ST_SYMDIFFERENCE, mysqlParser.ST_TOUCHES, mysqlParser.ST_UNION, mysqlParser.ST_WITHIN, mysqlParser.ST_X, mysqlParser.ST_Y, mysqlParser.SUBDATE, mysqlParser.SUBSTRING_INDEX, mysqlParser.SUBTIME, mysqlParser.SYSTEM_USER, mysqlParser.TAN, mysqlParser.TIMEDIFF, mysqlParser.TIMESTAMPADD, mysqlParser.TIMESTAMPDIFF, mysqlParser.TIME_FORMAT, mysqlParser.TIME_TO_SEC, mysqlParser.TOUCHES, mysqlParser.TO_BASE64, mysqlParser.TO_DAYS, mysqlParser.TO_SECONDS, mysqlParser.UCASE, mysqlParser.UNCOMPRESS, mysqlParser.UNCOMPRESSED_LENGTH, mysqlParser.UNHEX, mysqlParser.UNIX_TIMESTAMP, mysqlParser.UPDATEXML, mysqlParser.UPPER, mysqlParser.UUID, mysqlParser.UUID_SHORT, mysqlParser.VALIDATE_PASSWORD_STRENGTH, mysqlParser.VERSION, mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, mysqlParser.WEEKDAY, mysqlParser.WEEKOFYEAR, mysqlParser.WEIGHT_STRING, mysqlParser.WITHIN, mysqlParser.YEARWEEK, mysqlParser.Y_FUNCTION, mysqlParser.X_FUNCTION, mysqlParser.CHARSET_REVERSE_QOUTE_STRING, mysqlParser.ID, mysqlParser.REVERSE_QUOTE_ID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4065
                self.uid()
                pass
            elif token in [mysqlParser.SQLWARNING]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4066
                self.match(mysqlParser.SQLWARNING)
                pass
            elif token in [mysqlParser.NOT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4067
                self.match(mysqlParser.NOT)
                self.state = 4068
                self.match(mysqlParser.FOUND)
                pass
            elif token in [mysqlParser.SQLEXCEPTION]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4069
                self.match(mysqlParser.SQLEXCEPTION)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureSqlStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(mysqlParser.SEMI, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(mysqlParser.CompoundStatementContext,0)


        def sqlStatement(self):
            return self.getTypedRuleContext(mysqlParser.SqlStatementContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_procedureSqlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureSqlStatement" ):
                listener.enterProcedureSqlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureSqlStatement" ):
                listener.exitProcedureSqlStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProcedureSqlStatement" ):
                return visitor.visitProcedureSqlStatement(self)
            else:
                return visitor.visitChildren(self)




    def procedureSqlStatement(self):

        localctx = mysqlParser.ProcedureSqlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_procedureSqlStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4074
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,582,self._ctx)
            if la_ == 1:
                self.state = 4072
                self.compoundStatement()
                pass

            elif la_ == 2:
                self.state = 4073
                self.sqlStatement()
                pass


            self.state = 4076
            self.match(mysqlParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CaseAlternativeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(mysqlParser.WHEN, 0)

        def THEN(self):
            return self.getToken(mysqlParser.THEN, 0)

        def constant(self):
            return self.getTypedRuleContext(mysqlParser.ConstantContext,0)


        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)


        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(mysqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_caseAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseAlternative" ):
                listener.enterCaseAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseAlternative" ):
                listener.exitCaseAlternative(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseAlternative" ):
                return visitor.visitCaseAlternative(self)
            else:
                return visitor.visitChildren(self)




    def caseAlternative(self):

        localctx = mysqlParser.CaseAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_caseAlternative)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4078
            self.match(mysqlParser.WHEN)
            self.state = 4081
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,583,self._ctx)
            if la_ == 1:
                self.state = 4079
                self.constant()
                pass

            elif la_ == 2:
                self.state = 4080
                self.expression(0)
                pass


            self.state = 4083
            self.match(mysqlParser.THEN)
            self.state = 4085 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4084
                self.procedureSqlStatement()
                self.state = 4087 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 7)) & ~0x3f) == 0 and ((1 << (_la - 7)) & ((1 << (mysqlParser.ALTER - 7)) | (1 << (mysqlParser.ANALYZE - 7)) | (1 << (mysqlParser.CALL - 7)) | (1 << (mysqlParser.CASE - 7)) | (1 << (mysqlParser.CHANGE - 7)) | (1 << (mysqlParser.CHECK - 7)) | (1 << (mysqlParser.CREATE - 7)) | (1 << (mysqlParser.DELETE - 7)) | (1 << (mysqlParser.DESC - 7)) | (1 << (mysqlParser.DESCRIBE - 7)) | (1 << (mysqlParser.DROP - 7)) | (1 << (mysqlParser.EXPLAIN - 7)) | (1 << (mysqlParser.FETCH - 7)) | (1 << (mysqlParser.GRANT - 7)) | (1 << (mysqlParser.IF - 7)))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (mysqlParser.INSERT - 71)) | (1 << (mysqlParser.ITERATE - 71)) | (1 << (mysqlParser.KILL - 71)) | (1 << (mysqlParser.LEAVE - 71)) | (1 << (mysqlParser.LEFT - 71)) | (1 << (mysqlParser.LOAD - 71)) | (1 << (mysqlParser.LOCK - 71)) | (1 << (mysqlParser.LOOP - 71)) | (1 << (mysqlParser.OPTIMIZE - 71)) | (1 << (mysqlParser.PURGE - 71)) | (1 << (mysqlParser.RELEASE - 71)) | (1 << (mysqlParser.RENAME - 71)) | (1 << (mysqlParser.REPEAT - 71)) | (1 << (mysqlParser.REPLACE - 71)) | (1 << (mysqlParser.RETURN - 71)) | (1 << (mysqlParser.REVOKE - 71)) | (1 << (mysqlParser.RIGHT - 71)) | (1 << (mysqlParser.SELECT - 71)) | (1 << (mysqlParser.SET - 71)) | (1 << (mysqlParser.SHOW - 71)))) != 0) or ((((_la - 155)) & ~0x3f) == 0 and ((1 << (_la - 155)) & ((1 << (mysqlParser.UNLOCK - 155)) | (1 << (mysqlParser.UPDATE - 155)) | (1 << (mysqlParser.USE - 155)) | (1 << (mysqlParser.WHILE - 155)) | (1 << (mysqlParser.DATE - 155)) | (1 << (mysqlParser.TIME - 155)) | (1 << (mysqlParser.TIMESTAMP - 155)) | (1 << (mysqlParser.DATETIME - 155)) | (1 << (mysqlParser.YEAR - 155)) | (1 << (mysqlParser.TEXT - 155)) | (1 << (mysqlParser.ENUM - 155)) | (1 << (mysqlParser.COUNT - 155)))) != 0) or ((((_la - 236)) & ~0x3f) == 0 and ((1 << (_la - 236)) & ((1 << (mysqlParser.POSITION - 236)) | (1 << (mysqlParser.ACCOUNT - 236)) | (1 << (mysqlParser.ACTION - 236)) | (1 << (mysqlParser.AFTER - 236)) | (1 << (mysqlParser.AGGREGATE - 236)) | (1 << (mysqlParser.ALGORITHM - 236)) | (1 << (mysqlParser.ANY - 236)) | (1 << (mysqlParser.AT - 236)) | (1 << (mysqlParser.AUTHORS - 236)) | (1 << (mysqlParser.AUTOCOMMIT - 236)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 236)) | (1 << (mysqlParser.AUTO_INCREMENT - 236)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 236)) | (1 << (mysqlParser.BEGIN - 236)) | (1 << (mysqlParser.BINLOG - 236)) | (1 << (mysqlParser.BIT - 236)) | (1 << (mysqlParser.BLOCK - 236)) | (1 << (mysqlParser.BTREE - 236)) | (1 << (mysqlParser.CACHE - 236)) | (1 << (mysqlParser.CASCADED - 236)) | (1 << (mysqlParser.CHAIN - 236)) | (1 << (mysqlParser.CHANNEL - 236)) | (1 << (mysqlParser.CHECKSUM - 236)) | (1 << (mysqlParser.CIPHER - 236)) | (1 << (mysqlParser.CLIENT - 236)) | (1 << (mysqlParser.CLOSE - 236)) | (1 << (mysqlParser.COALESCE - 236)) | (1 << (mysqlParser.CODE - 236)) | (1 << (mysqlParser.COLUMNS - 236)) | (1 << (mysqlParser.COLUMN_FORMAT - 236)) | (1 << (mysqlParser.COMMENT - 236)) | (1 << (mysqlParser.COMMIT - 236)) | (1 << (mysqlParser.COMPACT - 236)) | (1 << (mysqlParser.COMPLETION - 236)) | (1 << (mysqlParser.COMPRESSED - 236)) | (1 << (mysqlParser.COMPRESSION - 236)) | (1 << (mysqlParser.CONCURRENT - 236)) | (1 << (mysqlParser.CONNECTION - 236)) | (1 << (mysqlParser.CONSISTENT - 236)) | (1 << (mysqlParser.CONTAINS - 236)) | (1 << (mysqlParser.CONTEXT - 236)) | (1 << (mysqlParser.CONTRIBUTORS - 236)) | (1 << (mysqlParser.COPY - 236)) | (1 << (mysqlParser.CPU - 236)) | (1 << (mysqlParser.DATA - 236)) | (1 << (mysqlParser.DATAFILE - 236)) | (1 << (mysqlParser.DEALLOCATE - 236)) | (1 << (mysqlParser.DEFAULT_AUTH - 236)) | (1 << (mysqlParser.DEFINER - 236)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 236)) | (1 << (mysqlParser.DIRECTORY - 236)) | (1 << (mysqlParser.DISABLE - 236)) | (1 << (mysqlParser.DISCARD - 236)) | (1 << (mysqlParser.DISK - 236)) | (1 << (mysqlParser.DO - 236)))) != 0) or ((((_la - 300)) & ~0x3f) == 0 and ((1 << (_la - 300)) & ((1 << (mysqlParser.DUMPFILE - 300)) | (1 << (mysqlParser.DUPLICATE - 300)) | (1 << (mysqlParser.DYNAMIC - 300)) | (1 << (mysqlParser.ENABLE - 300)) | (1 << (mysqlParser.ENCRYPTION - 300)) | (1 << (mysqlParser.ENDS - 300)) | (1 << (mysqlParser.ENGINE - 300)) | (1 << (mysqlParser.ENGINES - 300)) | (1 << (mysqlParser.ERROR - 300)) | (1 << (mysqlParser.ERRORS - 300)) | (1 << (mysqlParser.ESCAPE - 300)) | (1 << (mysqlParser.EVEN - 300)) | (1 << (mysqlParser.EVENT - 300)) | (1 << (mysqlParser.EVENTS - 300)) | (1 << (mysqlParser.EVERY - 300)) | (1 << (mysqlParser.EXCHANGE - 300)) | (1 << (mysqlParser.EXCLUSIVE - 300)) | (1 << (mysqlParser.EXPIRE - 300)) | (1 << (mysqlParser.EXTENT_SIZE - 300)) | (1 << (mysqlParser.FAULTS - 300)) | (1 << (mysqlParser.FIELDS - 300)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 300)) | (1 << (mysqlParser.FILTER - 300)) | (1 << (mysqlParser.FIRST - 300)) | (1 << (mysqlParser.FIXED - 300)) | (1 << (mysqlParser.FLUSH - 300)) | (1 << (mysqlParser.FOLLOWS - 300)) | (1 << (mysqlParser.FULL - 300)) | (1 << (mysqlParser.FUNCTION - 300)) | (1 << (mysqlParser.GLOBAL - 300)) | (1 << (mysqlParser.GRANTS - 300)) | (1 << (mysqlParser.GROUP_REPLICATION - 300)) | (1 << (mysqlParser.HANDLER - 300)) | (1 << (mysqlParser.HASH - 300)) | (1 << (mysqlParser.HELP - 300)) | (1 << (mysqlParser.HOST - 300)) | (1 << (mysqlParser.IDENTIFIED - 300)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 300)) | (1 << (mysqlParser.IMPORT - 300)) | (1 << (mysqlParser.INDEXES - 300)) | (1 << (mysqlParser.INITIAL_SIZE - 300)) | (1 << (mysqlParser.INPLACE - 300)) | (1 << (mysqlParser.INSERT_METHOD - 300)) | (1 << (mysqlParser.INSTALL - 300)) | (1 << (mysqlParser.INSTANCE - 300)) | (1 << (mysqlParser.INVOKER - 300)) | (1 << (mysqlParser.IO - 300)) | (1 << (mysqlParser.IO_THREAD - 300)) | (1 << (mysqlParser.IPC - 300)) | (1 << (mysqlParser.ISOLATION - 300)) | (1 << (mysqlParser.ISSUER - 300)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 300)) | (1 << (mysqlParser.LANGUAGE - 300)) | (1 << (mysqlParser.LAST - 300)) | (1 << (mysqlParser.LEAVES - 300)) | (1 << (mysqlParser.LESS - 300)))) != 0) or ((((_la - 364)) & ~0x3f) == 0 and ((1 << (_la - 364)) & ((1 << (mysqlParser.LEVEL - 364)) | (1 << (mysqlParser.LIST - 364)) | (1 << (mysqlParser.LOCAL - 364)) | (1 << (mysqlParser.LOGFILE - 364)) | (1 << (mysqlParser.LOGS - 364)) | (1 << (mysqlParser.MASTER - 364)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 364)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 364)) | (1 << (mysqlParser.MASTER_DELAY - 364)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 364)) | (1 << (mysqlParser.MASTER_HOST - 364)) | (1 << (mysqlParser.MASTER_LOG_FILE - 364)) | (1 << (mysqlParser.MASTER_LOG_POS - 364)) | (1 << (mysqlParser.MASTER_PASSWORD - 364)) | (1 << (mysqlParser.MASTER_PORT - 364)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 364)) | (1 << (mysqlParser.MASTER_SSL - 364)) | (1 << (mysqlParser.MASTER_SSL_CA - 364)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 364)) | (1 << (mysqlParser.MASTER_SSL_CERT - 364)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 364)) | (1 << (mysqlParser.MASTER_SSL_CRL - 364)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 364)) | (1 << (mysqlParser.MASTER_SSL_KEY - 364)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 364)) | (1 << (mysqlParser.MASTER_USER - 364)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 364)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 364)) | (1 << (mysqlParser.MAX_ROWS - 364)) | (1 << (mysqlParser.MAX_SIZE - 364)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 364)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 364)) | (1 << (mysqlParser.MERGE - 364)) | (1 << (mysqlParser.MID - 364)) | (1 << (mysqlParser.MIGRATE - 364)) | (1 << (mysqlParser.MIN_ROWS - 364)) | (1 << (mysqlParser.MODIFY - 364)) | (1 << (mysqlParser.MUTEX - 364)) | (1 << (mysqlParser.MYSQL - 364)) | (1 << (mysqlParser.NAME - 364)) | (1 << (mysqlParser.NAMES - 364)) | (1 << (mysqlParser.NCHAR - 364)) | (1 << (mysqlParser.NEVER - 364)) | (1 << (mysqlParser.NO - 364)) | (1 << (mysqlParser.NODEGROUP - 364)) | (1 << (mysqlParser.NONE - 364)) | (1 << (mysqlParser.OFFLINE - 364)) | (1 << (mysqlParser.OFFSET - 364)) | (1 << (mysqlParser.OJ - 364)) | (1 << (mysqlParser.OLD_PASSWORD - 364)) | (1 << (mysqlParser.ONE - 364)) | (1 << (mysqlParser.ONLINE - 364)) | (1 << (mysqlParser.ONLY - 364)) | (1 << (mysqlParser.OPEN - 364)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 364)) | (1 << (mysqlParser.OPTIONS - 364)) | (1 << (mysqlParser.OWNER - 364)) | (1 << (mysqlParser.PACK_KEYS - 364)) | (1 << (mysqlParser.PAGE - 364)) | (1 << (mysqlParser.PARSER - 364)) | (1 << (mysqlParser.PARTIAL - 364)))) != 0) or ((((_la - 428)) & ~0x3f) == 0 and ((1 << (_la - 428)) & ((1 << (mysqlParser.PARTITIONING - 428)) | (1 << (mysqlParser.PARTITIONS - 428)) | (1 << (mysqlParser.PASSWORD - 428)) | (1 << (mysqlParser.PHASE - 428)) | (1 << (mysqlParser.PLUGIN_DIR - 428)) | (1 << (mysqlParser.PLUGINS - 428)) | (1 << (mysqlParser.PORT - 428)) | (1 << (mysqlParser.PRECEDES - 428)) | (1 << (mysqlParser.PREPARE - 428)) | (1 << (mysqlParser.PRESERVE - 428)) | (1 << (mysqlParser.PREV - 428)) | (1 << (mysqlParser.PROCESSLIST - 428)) | (1 << (mysqlParser.PROFILE - 428)) | (1 << (mysqlParser.PROFILES - 428)) | (1 << (mysqlParser.PROXY - 428)) | (1 << (mysqlParser.QUERY - 428)) | (1 << (mysqlParser.QUICK - 428)) | (1 << (mysqlParser.REBUILD - 428)) | (1 << (mysqlParser.RECOVER - 428)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 428)) | (1 << (mysqlParser.REDUNDANT - 428)) | (1 << (mysqlParser.RELAY_LOG_FILE - 428)) | (1 << (mysqlParser.RELAY_LOG_POS - 428)) | (1 << (mysqlParser.RELAYLOG - 428)) | (1 << (mysqlParser.REMOVE - 428)) | (1 << (mysqlParser.REORGANIZE - 428)) | (1 << (mysqlParser.REPAIR - 428)) | (1 << (mysqlParser.REPLICATE_DO_DB - 428)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 428)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 428)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 428)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 428)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 428)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 428)) | (1 << (mysqlParser.REPLICATION - 428)) | (1 << (mysqlParser.RESET - 428)) | (1 << (mysqlParser.RESUME - 428)) | (1 << (mysqlParser.RETURNS - 428)) | (1 << (mysqlParser.ROLLBACK - 428)) | (1 << (mysqlParser.ROLLUP - 428)) | (1 << (mysqlParser.ROTATE - 428)) | (1 << (mysqlParser.ROW - 428)) | (1 << (mysqlParser.ROWS - 428)) | (1 << (mysqlParser.ROW_FORMAT - 428)) | (1 << (mysqlParser.SAVEPOINT - 428)) | (1 << (mysqlParser.SCHEDULE - 428)) | (1 << (mysqlParser.SECURITY - 428)) | (1 << (mysqlParser.SERVER - 428)) | (1 << (mysqlParser.SESSION - 428)) | (1 << (mysqlParser.SHARE - 428)) | (1 << (mysqlParser.SHARED - 428)) | (1 << (mysqlParser.SIGNED - 428)) | (1 << (mysqlParser.SIMPLE - 428)) | (1 << (mysqlParser.SLAVE - 428)) | (1 << (mysqlParser.SNAPSHOT - 428)) | (1 << (mysqlParser.SOCKET - 428)) | (1 << (mysqlParser.SOME - 428)) | (1 << (mysqlParser.SOUNDS - 428)) | (1 << (mysqlParser.SOURCE - 428)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 428)))) != 0) or ((((_la - 492)) & ~0x3f) == 0 and ((1 << (_la - 492)) & ((1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 492)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 492)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 492)) | (1 << (mysqlParser.SQL_CACHE - 492)) | (1 << (mysqlParser.SQL_NO_CACHE - 492)) | (1 << (mysqlParser.SQL_THREAD - 492)) | (1 << (mysqlParser.START - 492)) | (1 << (mysqlParser.STARTS - 492)) | (1 << (mysqlParser.STATS_AUTO_RECALC - 492)) | (1 << (mysqlParser.STATS_PERSISTENT - 492)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 492)) | (1 << (mysqlParser.STATUS - 492)) | (1 << (mysqlParser.STOP - 492)) | (1 << (mysqlParser.STORAGE - 492)) | (1 << (mysqlParser.STRING - 492)) | (1 << (mysqlParser.SUBJECT - 492)) | (1 << (mysqlParser.SUBPARTITION - 492)) | (1 << (mysqlParser.SUBPARTITIONS - 492)) | (1 << (mysqlParser.SUSPEND - 492)) | (1 << (mysqlParser.SWAPS - 492)) | (1 << (mysqlParser.SWITCHES - 492)) | (1 << (mysqlParser.TABLESPACE - 492)) | (1 << (mysqlParser.TEMPORARY - 492)) | (1 << (mysqlParser.TEMPTABLE - 492)) | (1 << (mysqlParser.THAN - 492)) | (1 << (mysqlParser.TRANSACTION - 492)) | (1 << (mysqlParser.TRUNCATE - 492)) | (1 << (mysqlParser.UNDEFINED - 492)) | (1 << (mysqlParser.UNDOFILE - 492)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 492)) | (1 << (mysqlParser.UNINSTALL - 492)) | (1 << (mysqlParser.UNKNOWN - 492)) | (1 << (mysqlParser.UPGRADE - 492)) | (1 << (mysqlParser.USER - 492)) | (1 << (mysqlParser.VALIDATION - 492)) | (1 << (mysqlParser.VALUE - 492)) | (1 << (mysqlParser.VARIABLES - 492)) | (1 << (mysqlParser.VIEW - 492)) | (1 << (mysqlParser.WAIT - 492)) | (1 << (mysqlParser.WARNINGS - 492)) | (1 << (mysqlParser.WITHOUT - 492)) | (1 << (mysqlParser.WORK - 492)) | (1 << (mysqlParser.WRAPPER - 492)) | (1 << (mysqlParser.X509 - 492)) | (1 << (mysqlParser.XA - 492)) | (1 << (mysqlParser.XML - 492)) | (1 << (mysqlParser.QUARTER - 492)) | (1 << (mysqlParser.MONTH - 492)) | (1 << (mysqlParser.DAY - 492)) | (1 << (mysqlParser.HOUR - 492)) | (1 << (mysqlParser.MINUTE - 492)) | (1 << (mysqlParser.WEEK - 492)) | (1 << (mysqlParser.SECOND - 492)) | (1 << (mysqlParser.MICROSECOND - 492)))) != 0) or ((((_la - 556)) & ~0x3f) == 0 and ((1 << (_la - 556)) & ((1 << (mysqlParser.TABLES - 556)) | (1 << (mysqlParser.ROUTINE - 556)) | (1 << (mysqlParser.EXECUTE - 556)) | (1 << (mysqlParser.FILE - 556)) | (1 << (mysqlParser.PROCESS - 556)) | (1 << (mysqlParser.RELOAD - 556)) | (1 << (mysqlParser.SHUTDOWN - 556)) | (1 << (mysqlParser.SUPER - 556)) | (1 << (mysqlParser.PRIVILEGES - 556)) | (1 << (mysqlParser.ARMSCII8 - 556)) | (1 << (mysqlParser.ASCII - 556)) | (1 << (mysqlParser.BIG5 - 556)) | (1 << (mysqlParser.CP1250 - 556)) | (1 << (mysqlParser.CP1251 - 556)) | (1 << (mysqlParser.CP1256 - 556)) | (1 << (mysqlParser.CP1257 - 556)) | (1 << (mysqlParser.CP850 - 556)) | (1 << (mysqlParser.CP852 - 556)) | (1 << (mysqlParser.CP866 - 556)) | (1 << (mysqlParser.CP932 - 556)) | (1 << (mysqlParser.DEC8 - 556)) | (1 << (mysqlParser.EUCJPMS - 556)) | (1 << (mysqlParser.EUCKR - 556)) | (1 << (mysqlParser.GB2312 - 556)) | (1 << (mysqlParser.GBK - 556)) | (1 << (mysqlParser.GEOSTD8 - 556)) | (1 << (mysqlParser.GREEK - 556)) | (1 << (mysqlParser.HEBREW - 556)) | (1 << (mysqlParser.HP8 - 556)) | (1 << (mysqlParser.KEYBCS2 - 556)) | (1 << (mysqlParser.KOI8R - 556)) | (1 << (mysqlParser.KOI8U - 556)) | (1 << (mysqlParser.LATIN1 - 556)) | (1 << (mysqlParser.LATIN2 - 556)) | (1 << (mysqlParser.LATIN5 - 556)) | (1 << (mysqlParser.LATIN7 - 556)) | (1 << (mysqlParser.MACCE - 556)) | (1 << (mysqlParser.MACROMAN - 556)) | (1 << (mysqlParser.SJIS - 556)) | (1 << (mysqlParser.SWE7 - 556)) | (1 << (mysqlParser.TIS620 - 556)) | (1 << (mysqlParser.UCS2 - 556)) | (1 << (mysqlParser.UJIS - 556)) | (1 << (mysqlParser.UTF16 - 556)) | (1 << (mysqlParser.UTF16LE - 556)) | (1 << (mysqlParser.UTF32 - 556)) | (1 << (mysqlParser.UTF8 - 556)) | (1 << (mysqlParser.UTF8MB3 - 556)) | (1 << (mysqlParser.UTF8MB4 - 556)) | (1 << (mysqlParser.ARCHIVE - 556)) | (1 << (mysqlParser.BLACKHOLE - 556)) | (1 << (mysqlParser.CSV - 556)) | (1 << (mysqlParser.FEDERATED - 556)) | (1 << (mysqlParser.INNODB - 556)) | (1 << (mysqlParser.MEMORY - 556)) | (1 << (mysqlParser.MRG_MYISAM - 556)) | (1 << (mysqlParser.MYISAM - 556)) | (1 << (mysqlParser.NDB - 556)) | (1 << (mysqlParser.NDBCLUSTER - 556)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 556)) | (1 << (mysqlParser.REPEATABLE - 556)) | (1 << (mysqlParser.COMMITTED - 556)) | (1 << (mysqlParser.UNCOMMITTED - 556)) | (1 << (mysqlParser.SERIALIZABLE - 556)))) != 0) or ((((_la - 620)) & ~0x3f) == 0 and ((1 << (_la - 620)) & ((1 << (mysqlParser.GEOMETRYCOLLECTION - 620)) | (1 << (mysqlParser.LINESTRING - 620)) | (1 << (mysqlParser.MULTILINESTRING - 620)) | (1 << (mysqlParser.MULTIPOINT - 620)) | (1 << (mysqlParser.MULTIPOLYGON - 620)) | (1 << (mysqlParser.POINT - 620)) | (1 << (mysqlParser.POLYGON - 620)) | (1 << (mysqlParser.ABS - 620)) | (1 << (mysqlParser.ACOS - 620)) | (1 << (mysqlParser.ADDDATE - 620)) | (1 << (mysqlParser.ADDTIME - 620)) | (1 << (mysqlParser.AES_DECRYPT - 620)) | (1 << (mysqlParser.AES_ENCRYPT - 620)) | (1 << (mysqlParser.AREA - 620)) | (1 << (mysqlParser.ASBINARY - 620)) | (1 << (mysqlParser.ASIN - 620)) | (1 << (mysqlParser.ASTEXT - 620)) | (1 << (mysqlParser.ASWKB - 620)) | (1 << (mysqlParser.ASWKT - 620)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 620)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 620)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 620)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 620)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 620)) | (1 << (mysqlParser.ATAN - 620)) | (1 << (mysqlParser.ATAN2 - 620)) | (1 << (mysqlParser.BENCHMARK - 620)) | (1 << (mysqlParser.BIN - 620)) | (1 << (mysqlParser.BIT_COUNT - 620)) | (1 << (mysqlParser.BIT_LENGTH - 620)) | (1 << (mysqlParser.BUFFER - 620)) | (1 << (mysqlParser.CEIL - 620)) | (1 << (mysqlParser.CEILING - 620)) | (1 << (mysqlParser.CENTROID - 620)) | (1 << (mysqlParser.CHARACTER_LENGTH - 620)) | (1 << (mysqlParser.CHARSET - 620)) | (1 << (mysqlParser.CHAR_LENGTH - 620)) | (1 << (mysqlParser.COERCIBILITY - 620)) | (1 << (mysqlParser.COLLATION - 620)) | (1 << (mysqlParser.COMPRESS - 620)) | (1 << (mysqlParser.CONCAT - 620)) | (1 << (mysqlParser.CONCAT_WS - 620)) | (1 << (mysqlParser.CONNECTION_ID - 620)) | (1 << (mysqlParser.CONV - 620)) | (1 << (mysqlParser.CONVERT_TZ - 620)) | (1 << (mysqlParser.COS - 620)) | (1 << (mysqlParser.COT - 620)) | (1 << (mysqlParser.CRC32 - 620)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 620)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 620)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 620)) | (1 << (mysqlParser.CREATE_DIGEST - 620)) | (1 << (mysqlParser.CROSSES - 620)) | (1 << (mysqlParser.DATEDIFF - 620)) | (1 << (mysqlParser.DATE_FORMAT - 620)) | (1 << (mysqlParser.DAYNAME - 620)) | (1 << (mysqlParser.DAYOFMONTH - 620)) | (1 << (mysqlParser.DAYOFWEEK - 620)) | (1 << (mysqlParser.DAYOFYEAR - 620)) | (1 << (mysqlParser.DECODE - 620)) | (1 << (mysqlParser.DEGREES - 620)) | (1 << (mysqlParser.DES_DECRYPT - 620)) | (1 << (mysqlParser.DES_ENCRYPT - 620)) | (1 << (mysqlParser.DIMENSION - 620)))) != 0) or ((((_la - 684)) & ~0x3f) == 0 and ((1 << (_la - 684)) & ((1 << (mysqlParser.DISJOINT - 684)) | (1 << (mysqlParser.ELT - 684)) | (1 << (mysqlParser.ENCODE - 684)) | (1 << (mysqlParser.ENCRYPT - 684)) | (1 << (mysqlParser.ENDPOINT - 684)) | (1 << (mysqlParser.ENVELOPE - 684)) | (1 << (mysqlParser.EQUALS - 684)) | (1 << (mysqlParser.EXP - 684)) | (1 << (mysqlParser.EXPORT_SET - 684)) | (1 << (mysqlParser.EXTERIORRING - 684)) | (1 << (mysqlParser.EXTRACTVALUE - 684)) | (1 << (mysqlParser.FIELD - 684)) | (1 << (mysqlParser.FIND_IN_SET - 684)) | (1 << (mysqlParser.FLOOR - 684)) | (1 << (mysqlParser.FORMAT - 684)) | (1 << (mysqlParser.FOUND_ROWS - 684)) | (1 << (mysqlParser.FROM_BASE64 - 684)) | (1 << (mysqlParser.FROM_DAYS - 684)) | (1 << (mysqlParser.FROM_UNIXTIME - 684)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 684)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 684)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 684)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 684)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 684)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 684)) | (1 << (mysqlParser.GEOMETRYN - 684)) | (1 << (mysqlParser.GEOMETRYTYPE - 684)) | (1 << (mysqlParser.GEOMFROMTEXT - 684)) | (1 << (mysqlParser.GEOMFROMWKB - 684)) | (1 << (mysqlParser.GET_FORMAT - 684)) | (1 << (mysqlParser.GET_LOCK - 684)) | (1 << (mysqlParser.GLENGTH - 684)) | (1 << (mysqlParser.GREATEST - 684)) | (1 << (mysqlParser.GTID_SUBSET - 684)) | (1 << (mysqlParser.GTID_SUBTRACT - 684)) | (1 << (mysqlParser.HEX - 684)) | (1 << (mysqlParser.IFNULL - 684)) | (1 << (mysqlParser.INET6_ATON - 684)) | (1 << (mysqlParser.INET6_NTOA - 684)) | (1 << (mysqlParser.INET_ATON - 684)) | (1 << (mysqlParser.INET_NTOA - 684)) | (1 << (mysqlParser.INSTR - 684)) | (1 << (mysqlParser.INTERIORRINGN - 684)) | (1 << (mysqlParser.INTERSECTS - 684)) | (1 << (mysqlParser.ISCLOSED - 684)) | (1 << (mysqlParser.ISEMPTY - 684)) | (1 << (mysqlParser.ISNULL - 684)) | (1 << (mysqlParser.ISSIMPLE - 684)) | (1 << (mysqlParser.IS_FREE_LOCK - 684)) | (1 << (mysqlParser.IS_IPV4 - 684)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 684)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 684)) | (1 << (mysqlParser.IS_IPV6 - 684)) | (1 << (mysqlParser.IS_USED_LOCK - 684)) | (1 << (mysqlParser.LAST_INSERT_ID - 684)) | (1 << (mysqlParser.LCASE - 684)) | (1 << (mysqlParser.LEAST - 684)) | (1 << (mysqlParser.LENGTH - 684)) | (1 << (mysqlParser.LINEFROMTEXT - 684)) | (1 << (mysqlParser.LINEFROMWKB - 684)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 684)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 684)) | (1 << (mysqlParser.LN - 684)) | (1 << (mysqlParser.LOAD_FILE - 684)))) != 0) or ((((_la - 748)) & ~0x3f) == 0 and ((1 << (_la - 748)) & ((1 << (mysqlParser.LOCATE - 748)) | (1 << (mysqlParser.LOG - 748)) | (1 << (mysqlParser.LOG10 - 748)) | (1 << (mysqlParser.LOG2 - 748)) | (1 << (mysqlParser.LOWER - 748)) | (1 << (mysqlParser.LPAD - 748)) | (1 << (mysqlParser.LTRIM - 748)) | (1 << (mysqlParser.MAKEDATE - 748)) | (1 << (mysqlParser.MAKETIME - 748)) | (1 << (mysqlParser.MAKE_SET - 748)) | (1 << (mysqlParser.MASTER_POS_WAIT - 748)) | (1 << (mysqlParser.MBRCONTAINS - 748)) | (1 << (mysqlParser.MBRDISJOINT - 748)) | (1 << (mysqlParser.MBREQUAL - 748)) | (1 << (mysqlParser.MBRINTERSECTS - 748)) | (1 << (mysqlParser.MBROVERLAPS - 748)) | (1 << (mysqlParser.MBRTOUCHES - 748)) | (1 << (mysqlParser.MBRWITHIN - 748)) | (1 << (mysqlParser.MD5 - 748)) | (1 << (mysqlParser.MLINEFROMTEXT - 748)) | (1 << (mysqlParser.MLINEFROMWKB - 748)) | (1 << (mysqlParser.MONTHNAME - 748)) | (1 << (mysqlParser.MPOINTFROMTEXT - 748)) | (1 << (mysqlParser.MPOINTFROMWKB - 748)) | (1 << (mysqlParser.MPOLYFROMTEXT - 748)) | (1 << (mysqlParser.MPOLYFROMWKB - 748)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 748)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 748)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 748)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 748)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 748)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 748)) | (1 << (mysqlParser.NAME_CONST - 748)) | (1 << (mysqlParser.NULLIF - 748)) | (1 << (mysqlParser.NUMGEOMETRIES - 748)) | (1 << (mysqlParser.NUMINTERIORRINGS - 748)) | (1 << (mysqlParser.NUMPOINTS - 748)) | (1 << (mysqlParser.OCT - 748)) | (1 << (mysqlParser.OCTET_LENGTH - 748)) | (1 << (mysqlParser.ORD - 748)) | (1 << (mysqlParser.OVERLAPS - 748)) | (1 << (mysqlParser.PERIOD_ADD - 748)) | (1 << (mysqlParser.PERIOD_DIFF - 748)) | (1 << (mysqlParser.PI - 748)) | (1 << (mysqlParser.POINTFROMTEXT - 748)) | (1 << (mysqlParser.POINTFROMWKB - 748)) | (1 << (mysqlParser.POINTN - 748)) | (1 << (mysqlParser.POLYFROMTEXT - 748)) | (1 << (mysqlParser.POLYFROMWKB - 748)) | (1 << (mysqlParser.POLYGONFROMTEXT - 748)) | (1 << (mysqlParser.POLYGONFROMWKB - 748)) | (1 << (mysqlParser.POW - 748)) | (1 << (mysqlParser.POWER - 748)) | (1 << (mysqlParser.QUOTE - 748)) | (1 << (mysqlParser.RADIANS - 748)) | (1 << (mysqlParser.RAND - 748)) | (1 << (mysqlParser.RANDOM_BYTES - 748)) | (1 << (mysqlParser.RELEASE_LOCK - 748)) | (1 << (mysqlParser.REVERSE - 748)) | (1 << (mysqlParser.ROUND - 748)) | (1 << (mysqlParser.ROW_COUNT - 748)) | (1 << (mysqlParser.RPAD - 748)) | (1 << (mysqlParser.RTRIM - 748)) | (1 << (mysqlParser.SEC_TO_TIME - 748)))) != 0) or ((((_la - 812)) & ~0x3f) == 0 and ((1 << (_la - 812)) & ((1 << (mysqlParser.SESSION_USER - 812)) | (1 << (mysqlParser.SHA - 812)) | (1 << (mysqlParser.SHA1 - 812)) | (1 << (mysqlParser.SHA2 - 812)) | (1 << (mysqlParser.SIGN - 812)) | (1 << (mysqlParser.SIN - 812)) | (1 << (mysqlParser.SLEEP - 812)) | (1 << (mysqlParser.SOUNDEX - 812)) | (1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 812)) | (1 << (mysqlParser.SQRT - 812)) | (1 << (mysqlParser.SRID - 812)) | (1 << (mysqlParser.STARTPOINT - 812)) | (1 << (mysqlParser.STRCMP - 812)) | (1 << (mysqlParser.STR_TO_DATE - 812)) | (1 << (mysqlParser.ST_AREA - 812)) | (1 << (mysqlParser.ST_ASBINARY - 812)) | (1 << (mysqlParser.ST_ASTEXT - 812)) | (1 << (mysqlParser.ST_ASWKB - 812)) | (1 << (mysqlParser.ST_ASWKT - 812)) | (1 << (mysqlParser.ST_BUFFER - 812)) | (1 << (mysqlParser.ST_CENTROID - 812)) | (1 << (mysqlParser.ST_CONTAINS - 812)) | (1 << (mysqlParser.ST_CROSSES - 812)) | (1 << (mysqlParser.ST_DIFFERENCE - 812)) | (1 << (mysqlParser.ST_DIMENSION - 812)) | (1 << (mysqlParser.ST_DISJOINT - 812)) | (1 << (mysqlParser.ST_DISTANCE - 812)) | (1 << (mysqlParser.ST_ENDPOINT - 812)) | (1 << (mysqlParser.ST_ENVELOPE - 812)) | (1 << (mysqlParser.ST_EQUALS - 812)) | (1 << (mysqlParser.ST_EXTERIORRING - 812)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 812)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 812)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 812)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 812)) | (1 << (mysqlParser.ST_GEOMETRYN - 812)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 812)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 812)) | (1 << (mysqlParser.ST_INTERIORRINGN - 812)) | (1 << (mysqlParser.ST_INTERSECTION - 812)) | (1 << (mysqlParser.ST_INTERSECTS - 812)) | (1 << (mysqlParser.ST_ISCLOSED - 812)) | (1 << (mysqlParser.ST_ISEMPTY - 812)) | (1 << (mysqlParser.ST_ISSIMPLE - 812)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 812)) | (1 << (mysqlParser.ST_LINEFROMWKB - 812)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 812)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 812)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 812)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 812)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 812)) | (1 << (mysqlParser.ST_NUMPOINTS - 812)) | (1 << (mysqlParser.ST_OVERLAPS - 812)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 812)) | (1 << (mysqlParser.ST_POINTFROMWKB - 812)) | (1 << (mysqlParser.ST_POINTN - 812)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 812)) | (1 << (mysqlParser.ST_POLYFROMWKB - 812)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 812)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 812)))) != 0) or ((((_la - 876)) & ~0x3f) == 0 and ((1 << (_la - 876)) & ((1 << (mysqlParser.ST_SRID - 876)) | (1 << (mysqlParser.ST_STARTPOINT - 876)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 876)) | (1 << (mysqlParser.ST_TOUCHES - 876)) | (1 << (mysqlParser.ST_UNION - 876)) | (1 << (mysqlParser.ST_WITHIN - 876)) | (1 << (mysqlParser.ST_X - 876)) | (1 << (mysqlParser.ST_Y - 876)) | (1 << (mysqlParser.SUBDATE - 876)) | (1 << (mysqlParser.SUBSTRING_INDEX - 876)) | (1 << (mysqlParser.SUBTIME - 876)) | (1 << (mysqlParser.SYSTEM_USER - 876)) | (1 << (mysqlParser.TAN - 876)) | (1 << (mysqlParser.TIMEDIFF - 876)) | (1 << (mysqlParser.TIMESTAMPADD - 876)) | (1 << (mysqlParser.TIMESTAMPDIFF - 876)) | (1 << (mysqlParser.TIME_FORMAT - 876)) | (1 << (mysqlParser.TIME_TO_SEC - 876)) | (1 << (mysqlParser.TOUCHES - 876)) | (1 << (mysqlParser.TO_BASE64 - 876)) | (1 << (mysqlParser.TO_DAYS - 876)) | (1 << (mysqlParser.TO_SECONDS - 876)) | (1 << (mysqlParser.UCASE - 876)) | (1 << (mysqlParser.UNCOMPRESS - 876)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 876)) | (1 << (mysqlParser.UNHEX - 876)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 876)) | (1 << (mysqlParser.UPDATEXML - 876)) | (1 << (mysqlParser.UPPER - 876)) | (1 << (mysqlParser.UUID - 876)) | (1 << (mysqlParser.UUID_SHORT - 876)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 876)) | (1 << (mysqlParser.VERSION - 876)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 876)) | (1 << (mysqlParser.WEEKDAY - 876)) | (1 << (mysqlParser.WEEKOFYEAR - 876)) | (1 << (mysqlParser.WEIGHT_STRING - 876)) | (1 << (mysqlParser.WITHIN - 876)) | (1 << (mysqlParser.YEARWEEK - 876)) | (1 << (mysqlParser.Y_FUNCTION - 876)) | (1 << (mysqlParser.X_FUNCTION - 876)))) != 0) or ((((_la - 942)) & ~0x3f) == 0 and ((1 << (_la - 942)) & ((1 << (mysqlParser.LR_BRACKET - 942)) | (1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 942)) | (1 << (mysqlParser.ID - 942)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 942)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ElifAlternativeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSEIF(self):
            return self.getToken(mysqlParser.ELSEIF, 0)

        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)


        def THEN(self):
            return self.getToken(mysqlParser.THEN, 0)

        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(mysqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_elifAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElifAlternative" ):
                listener.enterElifAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElifAlternative" ):
                listener.exitElifAlternative(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElifAlternative" ):
                return visitor.visitElifAlternative(self)
            else:
                return visitor.visitChildren(self)




    def elifAlternative(self):

        localctx = mysqlParser.ElifAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_elifAlternative)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4089
            self.match(mysqlParser.ELSEIF)
            self.state = 4090
            self.expression(0)
            self.state = 4091
            self.match(mysqlParser.THEN)
            self.state = 4093 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4092
                self.procedureSqlStatement()
                self.state = 4095 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 7)) & ~0x3f) == 0 and ((1 << (_la - 7)) & ((1 << (mysqlParser.ALTER - 7)) | (1 << (mysqlParser.ANALYZE - 7)) | (1 << (mysqlParser.CALL - 7)) | (1 << (mysqlParser.CASE - 7)) | (1 << (mysqlParser.CHANGE - 7)) | (1 << (mysqlParser.CHECK - 7)) | (1 << (mysqlParser.CREATE - 7)) | (1 << (mysqlParser.DELETE - 7)) | (1 << (mysqlParser.DESC - 7)) | (1 << (mysqlParser.DESCRIBE - 7)) | (1 << (mysqlParser.DROP - 7)) | (1 << (mysqlParser.EXPLAIN - 7)) | (1 << (mysqlParser.FETCH - 7)) | (1 << (mysqlParser.GRANT - 7)) | (1 << (mysqlParser.IF - 7)))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (mysqlParser.INSERT - 71)) | (1 << (mysqlParser.ITERATE - 71)) | (1 << (mysqlParser.KILL - 71)) | (1 << (mysqlParser.LEAVE - 71)) | (1 << (mysqlParser.LEFT - 71)) | (1 << (mysqlParser.LOAD - 71)) | (1 << (mysqlParser.LOCK - 71)) | (1 << (mysqlParser.LOOP - 71)) | (1 << (mysqlParser.OPTIMIZE - 71)) | (1 << (mysqlParser.PURGE - 71)) | (1 << (mysqlParser.RELEASE - 71)) | (1 << (mysqlParser.RENAME - 71)) | (1 << (mysqlParser.REPEAT - 71)) | (1 << (mysqlParser.REPLACE - 71)) | (1 << (mysqlParser.RETURN - 71)) | (1 << (mysqlParser.REVOKE - 71)) | (1 << (mysqlParser.RIGHT - 71)) | (1 << (mysqlParser.SELECT - 71)) | (1 << (mysqlParser.SET - 71)) | (1 << (mysqlParser.SHOW - 71)))) != 0) or ((((_la - 155)) & ~0x3f) == 0 and ((1 << (_la - 155)) & ((1 << (mysqlParser.UNLOCK - 155)) | (1 << (mysqlParser.UPDATE - 155)) | (1 << (mysqlParser.USE - 155)) | (1 << (mysqlParser.WHILE - 155)) | (1 << (mysqlParser.DATE - 155)) | (1 << (mysqlParser.TIME - 155)) | (1 << (mysqlParser.TIMESTAMP - 155)) | (1 << (mysqlParser.DATETIME - 155)) | (1 << (mysqlParser.YEAR - 155)) | (1 << (mysqlParser.TEXT - 155)) | (1 << (mysqlParser.ENUM - 155)) | (1 << (mysqlParser.COUNT - 155)))) != 0) or ((((_la - 236)) & ~0x3f) == 0 and ((1 << (_la - 236)) & ((1 << (mysqlParser.POSITION - 236)) | (1 << (mysqlParser.ACCOUNT - 236)) | (1 << (mysqlParser.ACTION - 236)) | (1 << (mysqlParser.AFTER - 236)) | (1 << (mysqlParser.AGGREGATE - 236)) | (1 << (mysqlParser.ALGORITHM - 236)) | (1 << (mysqlParser.ANY - 236)) | (1 << (mysqlParser.AT - 236)) | (1 << (mysqlParser.AUTHORS - 236)) | (1 << (mysqlParser.AUTOCOMMIT - 236)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 236)) | (1 << (mysqlParser.AUTO_INCREMENT - 236)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 236)) | (1 << (mysqlParser.BEGIN - 236)) | (1 << (mysqlParser.BINLOG - 236)) | (1 << (mysqlParser.BIT - 236)) | (1 << (mysqlParser.BLOCK - 236)) | (1 << (mysqlParser.BTREE - 236)) | (1 << (mysqlParser.CACHE - 236)) | (1 << (mysqlParser.CASCADED - 236)) | (1 << (mysqlParser.CHAIN - 236)) | (1 << (mysqlParser.CHANNEL - 236)) | (1 << (mysqlParser.CHECKSUM - 236)) | (1 << (mysqlParser.CIPHER - 236)) | (1 << (mysqlParser.CLIENT - 236)) | (1 << (mysqlParser.CLOSE - 236)) | (1 << (mysqlParser.COALESCE - 236)) | (1 << (mysqlParser.CODE - 236)) | (1 << (mysqlParser.COLUMNS - 236)) | (1 << (mysqlParser.COLUMN_FORMAT - 236)) | (1 << (mysqlParser.COMMENT - 236)) | (1 << (mysqlParser.COMMIT - 236)) | (1 << (mysqlParser.COMPACT - 236)) | (1 << (mysqlParser.COMPLETION - 236)) | (1 << (mysqlParser.COMPRESSED - 236)) | (1 << (mysqlParser.COMPRESSION - 236)) | (1 << (mysqlParser.CONCURRENT - 236)) | (1 << (mysqlParser.CONNECTION - 236)) | (1 << (mysqlParser.CONSISTENT - 236)) | (1 << (mysqlParser.CONTAINS - 236)) | (1 << (mysqlParser.CONTEXT - 236)) | (1 << (mysqlParser.CONTRIBUTORS - 236)) | (1 << (mysqlParser.COPY - 236)) | (1 << (mysqlParser.CPU - 236)) | (1 << (mysqlParser.DATA - 236)) | (1 << (mysqlParser.DATAFILE - 236)) | (1 << (mysqlParser.DEALLOCATE - 236)) | (1 << (mysqlParser.DEFAULT_AUTH - 236)) | (1 << (mysqlParser.DEFINER - 236)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 236)) | (1 << (mysqlParser.DIRECTORY - 236)) | (1 << (mysqlParser.DISABLE - 236)) | (1 << (mysqlParser.DISCARD - 236)) | (1 << (mysqlParser.DISK - 236)) | (1 << (mysqlParser.DO - 236)))) != 0) or ((((_la - 300)) & ~0x3f) == 0 and ((1 << (_la - 300)) & ((1 << (mysqlParser.DUMPFILE - 300)) | (1 << (mysqlParser.DUPLICATE - 300)) | (1 << (mysqlParser.DYNAMIC - 300)) | (1 << (mysqlParser.ENABLE - 300)) | (1 << (mysqlParser.ENCRYPTION - 300)) | (1 << (mysqlParser.ENDS - 300)) | (1 << (mysqlParser.ENGINE - 300)) | (1 << (mysqlParser.ENGINES - 300)) | (1 << (mysqlParser.ERROR - 300)) | (1 << (mysqlParser.ERRORS - 300)) | (1 << (mysqlParser.ESCAPE - 300)) | (1 << (mysqlParser.EVEN - 300)) | (1 << (mysqlParser.EVENT - 300)) | (1 << (mysqlParser.EVENTS - 300)) | (1 << (mysqlParser.EVERY - 300)) | (1 << (mysqlParser.EXCHANGE - 300)) | (1 << (mysqlParser.EXCLUSIVE - 300)) | (1 << (mysqlParser.EXPIRE - 300)) | (1 << (mysqlParser.EXTENT_SIZE - 300)) | (1 << (mysqlParser.FAULTS - 300)) | (1 << (mysqlParser.FIELDS - 300)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 300)) | (1 << (mysqlParser.FILTER - 300)) | (1 << (mysqlParser.FIRST - 300)) | (1 << (mysqlParser.FIXED - 300)) | (1 << (mysqlParser.FLUSH - 300)) | (1 << (mysqlParser.FOLLOWS - 300)) | (1 << (mysqlParser.FULL - 300)) | (1 << (mysqlParser.FUNCTION - 300)) | (1 << (mysqlParser.GLOBAL - 300)) | (1 << (mysqlParser.GRANTS - 300)) | (1 << (mysqlParser.GROUP_REPLICATION - 300)) | (1 << (mysqlParser.HANDLER - 300)) | (1 << (mysqlParser.HASH - 300)) | (1 << (mysqlParser.HELP - 300)) | (1 << (mysqlParser.HOST - 300)) | (1 << (mysqlParser.IDENTIFIED - 300)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 300)) | (1 << (mysqlParser.IMPORT - 300)) | (1 << (mysqlParser.INDEXES - 300)) | (1 << (mysqlParser.INITIAL_SIZE - 300)) | (1 << (mysqlParser.INPLACE - 300)) | (1 << (mysqlParser.INSERT_METHOD - 300)) | (1 << (mysqlParser.INSTALL - 300)) | (1 << (mysqlParser.INSTANCE - 300)) | (1 << (mysqlParser.INVOKER - 300)) | (1 << (mysqlParser.IO - 300)) | (1 << (mysqlParser.IO_THREAD - 300)) | (1 << (mysqlParser.IPC - 300)) | (1 << (mysqlParser.ISOLATION - 300)) | (1 << (mysqlParser.ISSUER - 300)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 300)) | (1 << (mysqlParser.LANGUAGE - 300)) | (1 << (mysqlParser.LAST - 300)) | (1 << (mysqlParser.LEAVES - 300)) | (1 << (mysqlParser.LESS - 300)))) != 0) or ((((_la - 364)) & ~0x3f) == 0 and ((1 << (_la - 364)) & ((1 << (mysqlParser.LEVEL - 364)) | (1 << (mysqlParser.LIST - 364)) | (1 << (mysqlParser.LOCAL - 364)) | (1 << (mysqlParser.LOGFILE - 364)) | (1 << (mysqlParser.LOGS - 364)) | (1 << (mysqlParser.MASTER - 364)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 364)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 364)) | (1 << (mysqlParser.MASTER_DELAY - 364)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 364)) | (1 << (mysqlParser.MASTER_HOST - 364)) | (1 << (mysqlParser.MASTER_LOG_FILE - 364)) | (1 << (mysqlParser.MASTER_LOG_POS - 364)) | (1 << (mysqlParser.MASTER_PASSWORD - 364)) | (1 << (mysqlParser.MASTER_PORT - 364)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 364)) | (1 << (mysqlParser.MASTER_SSL - 364)) | (1 << (mysqlParser.MASTER_SSL_CA - 364)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 364)) | (1 << (mysqlParser.MASTER_SSL_CERT - 364)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 364)) | (1 << (mysqlParser.MASTER_SSL_CRL - 364)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 364)) | (1 << (mysqlParser.MASTER_SSL_KEY - 364)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 364)) | (1 << (mysqlParser.MASTER_USER - 364)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 364)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 364)) | (1 << (mysqlParser.MAX_ROWS - 364)) | (1 << (mysqlParser.MAX_SIZE - 364)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 364)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 364)) | (1 << (mysqlParser.MERGE - 364)) | (1 << (mysqlParser.MID - 364)) | (1 << (mysqlParser.MIGRATE - 364)) | (1 << (mysqlParser.MIN_ROWS - 364)) | (1 << (mysqlParser.MODIFY - 364)) | (1 << (mysqlParser.MUTEX - 364)) | (1 << (mysqlParser.MYSQL - 364)) | (1 << (mysqlParser.NAME - 364)) | (1 << (mysqlParser.NAMES - 364)) | (1 << (mysqlParser.NCHAR - 364)) | (1 << (mysqlParser.NEVER - 364)) | (1 << (mysqlParser.NO - 364)) | (1 << (mysqlParser.NODEGROUP - 364)) | (1 << (mysqlParser.NONE - 364)) | (1 << (mysqlParser.OFFLINE - 364)) | (1 << (mysqlParser.OFFSET - 364)) | (1 << (mysqlParser.OJ - 364)) | (1 << (mysqlParser.OLD_PASSWORD - 364)) | (1 << (mysqlParser.ONE - 364)) | (1 << (mysqlParser.ONLINE - 364)) | (1 << (mysqlParser.ONLY - 364)) | (1 << (mysqlParser.OPEN - 364)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 364)) | (1 << (mysqlParser.OPTIONS - 364)) | (1 << (mysqlParser.OWNER - 364)) | (1 << (mysqlParser.PACK_KEYS - 364)) | (1 << (mysqlParser.PAGE - 364)) | (1 << (mysqlParser.PARSER - 364)) | (1 << (mysqlParser.PARTIAL - 364)))) != 0) or ((((_la - 428)) & ~0x3f) == 0 and ((1 << (_la - 428)) & ((1 << (mysqlParser.PARTITIONING - 428)) | (1 << (mysqlParser.PARTITIONS - 428)) | (1 << (mysqlParser.PASSWORD - 428)) | (1 << (mysqlParser.PHASE - 428)) | (1 << (mysqlParser.PLUGIN_DIR - 428)) | (1 << (mysqlParser.PLUGINS - 428)) | (1 << (mysqlParser.PORT - 428)) | (1 << (mysqlParser.PRECEDES - 428)) | (1 << (mysqlParser.PREPARE - 428)) | (1 << (mysqlParser.PRESERVE - 428)) | (1 << (mysqlParser.PREV - 428)) | (1 << (mysqlParser.PROCESSLIST - 428)) | (1 << (mysqlParser.PROFILE - 428)) | (1 << (mysqlParser.PROFILES - 428)) | (1 << (mysqlParser.PROXY - 428)) | (1 << (mysqlParser.QUERY - 428)) | (1 << (mysqlParser.QUICK - 428)) | (1 << (mysqlParser.REBUILD - 428)) | (1 << (mysqlParser.RECOVER - 428)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 428)) | (1 << (mysqlParser.REDUNDANT - 428)) | (1 << (mysqlParser.RELAY_LOG_FILE - 428)) | (1 << (mysqlParser.RELAY_LOG_POS - 428)) | (1 << (mysqlParser.RELAYLOG - 428)) | (1 << (mysqlParser.REMOVE - 428)) | (1 << (mysqlParser.REORGANIZE - 428)) | (1 << (mysqlParser.REPAIR - 428)) | (1 << (mysqlParser.REPLICATE_DO_DB - 428)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 428)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 428)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 428)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 428)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 428)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 428)) | (1 << (mysqlParser.REPLICATION - 428)) | (1 << (mysqlParser.RESET - 428)) | (1 << (mysqlParser.RESUME - 428)) | (1 << (mysqlParser.RETURNS - 428)) | (1 << (mysqlParser.ROLLBACK - 428)) | (1 << (mysqlParser.ROLLUP - 428)) | (1 << (mysqlParser.ROTATE - 428)) | (1 << (mysqlParser.ROW - 428)) | (1 << (mysqlParser.ROWS - 428)) | (1 << (mysqlParser.ROW_FORMAT - 428)) | (1 << (mysqlParser.SAVEPOINT - 428)) | (1 << (mysqlParser.SCHEDULE - 428)) | (1 << (mysqlParser.SECURITY - 428)) | (1 << (mysqlParser.SERVER - 428)) | (1 << (mysqlParser.SESSION - 428)) | (1 << (mysqlParser.SHARE - 428)) | (1 << (mysqlParser.SHARED - 428)) | (1 << (mysqlParser.SIGNED - 428)) | (1 << (mysqlParser.SIMPLE - 428)) | (1 << (mysqlParser.SLAVE - 428)) | (1 << (mysqlParser.SNAPSHOT - 428)) | (1 << (mysqlParser.SOCKET - 428)) | (1 << (mysqlParser.SOME - 428)) | (1 << (mysqlParser.SOUNDS - 428)) | (1 << (mysqlParser.SOURCE - 428)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 428)))) != 0) or ((((_la - 492)) & ~0x3f) == 0 and ((1 << (_la - 492)) & ((1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 492)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 492)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 492)) | (1 << (mysqlParser.SQL_CACHE - 492)) | (1 << (mysqlParser.SQL_NO_CACHE - 492)) | (1 << (mysqlParser.SQL_THREAD - 492)) | (1 << (mysqlParser.START - 492)) | (1 << (mysqlParser.STARTS - 492)) | (1 << (mysqlParser.STATS_AUTO_RECALC - 492)) | (1 << (mysqlParser.STATS_PERSISTENT - 492)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 492)) | (1 << (mysqlParser.STATUS - 492)) | (1 << (mysqlParser.STOP - 492)) | (1 << (mysqlParser.STORAGE - 492)) | (1 << (mysqlParser.STRING - 492)) | (1 << (mysqlParser.SUBJECT - 492)) | (1 << (mysqlParser.SUBPARTITION - 492)) | (1 << (mysqlParser.SUBPARTITIONS - 492)) | (1 << (mysqlParser.SUSPEND - 492)) | (1 << (mysqlParser.SWAPS - 492)) | (1 << (mysqlParser.SWITCHES - 492)) | (1 << (mysqlParser.TABLESPACE - 492)) | (1 << (mysqlParser.TEMPORARY - 492)) | (1 << (mysqlParser.TEMPTABLE - 492)) | (1 << (mysqlParser.THAN - 492)) | (1 << (mysqlParser.TRANSACTION - 492)) | (1 << (mysqlParser.TRUNCATE - 492)) | (1 << (mysqlParser.UNDEFINED - 492)) | (1 << (mysqlParser.UNDOFILE - 492)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 492)) | (1 << (mysqlParser.UNINSTALL - 492)) | (1 << (mysqlParser.UNKNOWN - 492)) | (1 << (mysqlParser.UPGRADE - 492)) | (1 << (mysqlParser.USER - 492)) | (1 << (mysqlParser.VALIDATION - 492)) | (1 << (mysqlParser.VALUE - 492)) | (1 << (mysqlParser.VARIABLES - 492)) | (1 << (mysqlParser.VIEW - 492)) | (1 << (mysqlParser.WAIT - 492)) | (1 << (mysqlParser.WARNINGS - 492)) | (1 << (mysqlParser.WITHOUT - 492)) | (1 << (mysqlParser.WORK - 492)) | (1 << (mysqlParser.WRAPPER - 492)) | (1 << (mysqlParser.X509 - 492)) | (1 << (mysqlParser.XA - 492)) | (1 << (mysqlParser.XML - 492)) | (1 << (mysqlParser.QUARTER - 492)) | (1 << (mysqlParser.MONTH - 492)) | (1 << (mysqlParser.DAY - 492)) | (1 << (mysqlParser.HOUR - 492)) | (1 << (mysqlParser.MINUTE - 492)) | (1 << (mysqlParser.WEEK - 492)) | (1 << (mysqlParser.SECOND - 492)) | (1 << (mysqlParser.MICROSECOND - 492)))) != 0) or ((((_la - 556)) & ~0x3f) == 0 and ((1 << (_la - 556)) & ((1 << (mysqlParser.TABLES - 556)) | (1 << (mysqlParser.ROUTINE - 556)) | (1 << (mysqlParser.EXECUTE - 556)) | (1 << (mysqlParser.FILE - 556)) | (1 << (mysqlParser.PROCESS - 556)) | (1 << (mysqlParser.RELOAD - 556)) | (1 << (mysqlParser.SHUTDOWN - 556)) | (1 << (mysqlParser.SUPER - 556)) | (1 << (mysqlParser.PRIVILEGES - 556)) | (1 << (mysqlParser.ARMSCII8 - 556)) | (1 << (mysqlParser.ASCII - 556)) | (1 << (mysqlParser.BIG5 - 556)) | (1 << (mysqlParser.CP1250 - 556)) | (1 << (mysqlParser.CP1251 - 556)) | (1 << (mysqlParser.CP1256 - 556)) | (1 << (mysqlParser.CP1257 - 556)) | (1 << (mysqlParser.CP850 - 556)) | (1 << (mysqlParser.CP852 - 556)) | (1 << (mysqlParser.CP866 - 556)) | (1 << (mysqlParser.CP932 - 556)) | (1 << (mysqlParser.DEC8 - 556)) | (1 << (mysqlParser.EUCJPMS - 556)) | (1 << (mysqlParser.EUCKR - 556)) | (1 << (mysqlParser.GB2312 - 556)) | (1 << (mysqlParser.GBK - 556)) | (1 << (mysqlParser.GEOSTD8 - 556)) | (1 << (mysqlParser.GREEK - 556)) | (1 << (mysqlParser.HEBREW - 556)) | (1 << (mysqlParser.HP8 - 556)) | (1 << (mysqlParser.KEYBCS2 - 556)) | (1 << (mysqlParser.KOI8R - 556)) | (1 << (mysqlParser.KOI8U - 556)) | (1 << (mysqlParser.LATIN1 - 556)) | (1 << (mysqlParser.LATIN2 - 556)) | (1 << (mysqlParser.LATIN5 - 556)) | (1 << (mysqlParser.LATIN7 - 556)) | (1 << (mysqlParser.MACCE - 556)) | (1 << (mysqlParser.MACROMAN - 556)) | (1 << (mysqlParser.SJIS - 556)) | (1 << (mysqlParser.SWE7 - 556)) | (1 << (mysqlParser.TIS620 - 556)) | (1 << (mysqlParser.UCS2 - 556)) | (1 << (mysqlParser.UJIS - 556)) | (1 << (mysqlParser.UTF16 - 556)) | (1 << (mysqlParser.UTF16LE - 556)) | (1 << (mysqlParser.UTF32 - 556)) | (1 << (mysqlParser.UTF8 - 556)) | (1 << (mysqlParser.UTF8MB3 - 556)) | (1 << (mysqlParser.UTF8MB4 - 556)) | (1 << (mysqlParser.ARCHIVE - 556)) | (1 << (mysqlParser.BLACKHOLE - 556)) | (1 << (mysqlParser.CSV - 556)) | (1 << (mysqlParser.FEDERATED - 556)) | (1 << (mysqlParser.INNODB - 556)) | (1 << (mysqlParser.MEMORY - 556)) | (1 << (mysqlParser.MRG_MYISAM - 556)) | (1 << (mysqlParser.MYISAM - 556)) | (1 << (mysqlParser.NDB - 556)) | (1 << (mysqlParser.NDBCLUSTER - 556)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 556)) | (1 << (mysqlParser.REPEATABLE - 556)) | (1 << (mysqlParser.COMMITTED - 556)) | (1 << (mysqlParser.UNCOMMITTED - 556)) | (1 << (mysqlParser.SERIALIZABLE - 556)))) != 0) or ((((_la - 620)) & ~0x3f) == 0 and ((1 << (_la - 620)) & ((1 << (mysqlParser.GEOMETRYCOLLECTION - 620)) | (1 << (mysqlParser.LINESTRING - 620)) | (1 << (mysqlParser.MULTILINESTRING - 620)) | (1 << (mysqlParser.MULTIPOINT - 620)) | (1 << (mysqlParser.MULTIPOLYGON - 620)) | (1 << (mysqlParser.POINT - 620)) | (1 << (mysqlParser.POLYGON - 620)) | (1 << (mysqlParser.ABS - 620)) | (1 << (mysqlParser.ACOS - 620)) | (1 << (mysqlParser.ADDDATE - 620)) | (1 << (mysqlParser.ADDTIME - 620)) | (1 << (mysqlParser.AES_DECRYPT - 620)) | (1 << (mysqlParser.AES_ENCRYPT - 620)) | (1 << (mysqlParser.AREA - 620)) | (1 << (mysqlParser.ASBINARY - 620)) | (1 << (mysqlParser.ASIN - 620)) | (1 << (mysqlParser.ASTEXT - 620)) | (1 << (mysqlParser.ASWKB - 620)) | (1 << (mysqlParser.ASWKT - 620)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 620)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 620)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 620)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 620)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 620)) | (1 << (mysqlParser.ATAN - 620)) | (1 << (mysqlParser.ATAN2 - 620)) | (1 << (mysqlParser.BENCHMARK - 620)) | (1 << (mysqlParser.BIN - 620)) | (1 << (mysqlParser.BIT_COUNT - 620)) | (1 << (mysqlParser.BIT_LENGTH - 620)) | (1 << (mysqlParser.BUFFER - 620)) | (1 << (mysqlParser.CEIL - 620)) | (1 << (mysqlParser.CEILING - 620)) | (1 << (mysqlParser.CENTROID - 620)) | (1 << (mysqlParser.CHARACTER_LENGTH - 620)) | (1 << (mysqlParser.CHARSET - 620)) | (1 << (mysqlParser.CHAR_LENGTH - 620)) | (1 << (mysqlParser.COERCIBILITY - 620)) | (1 << (mysqlParser.COLLATION - 620)) | (1 << (mysqlParser.COMPRESS - 620)) | (1 << (mysqlParser.CONCAT - 620)) | (1 << (mysqlParser.CONCAT_WS - 620)) | (1 << (mysqlParser.CONNECTION_ID - 620)) | (1 << (mysqlParser.CONV - 620)) | (1 << (mysqlParser.CONVERT_TZ - 620)) | (1 << (mysqlParser.COS - 620)) | (1 << (mysqlParser.COT - 620)) | (1 << (mysqlParser.CRC32 - 620)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 620)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 620)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 620)) | (1 << (mysqlParser.CREATE_DIGEST - 620)) | (1 << (mysqlParser.CROSSES - 620)) | (1 << (mysqlParser.DATEDIFF - 620)) | (1 << (mysqlParser.DATE_FORMAT - 620)) | (1 << (mysqlParser.DAYNAME - 620)) | (1 << (mysqlParser.DAYOFMONTH - 620)) | (1 << (mysqlParser.DAYOFWEEK - 620)) | (1 << (mysqlParser.DAYOFYEAR - 620)) | (1 << (mysqlParser.DECODE - 620)) | (1 << (mysqlParser.DEGREES - 620)) | (1 << (mysqlParser.DES_DECRYPT - 620)) | (1 << (mysqlParser.DES_ENCRYPT - 620)) | (1 << (mysqlParser.DIMENSION - 620)))) != 0) or ((((_la - 684)) & ~0x3f) == 0 and ((1 << (_la - 684)) & ((1 << (mysqlParser.DISJOINT - 684)) | (1 << (mysqlParser.ELT - 684)) | (1 << (mysqlParser.ENCODE - 684)) | (1 << (mysqlParser.ENCRYPT - 684)) | (1 << (mysqlParser.ENDPOINT - 684)) | (1 << (mysqlParser.ENVELOPE - 684)) | (1 << (mysqlParser.EQUALS - 684)) | (1 << (mysqlParser.EXP - 684)) | (1 << (mysqlParser.EXPORT_SET - 684)) | (1 << (mysqlParser.EXTERIORRING - 684)) | (1 << (mysqlParser.EXTRACTVALUE - 684)) | (1 << (mysqlParser.FIELD - 684)) | (1 << (mysqlParser.FIND_IN_SET - 684)) | (1 << (mysqlParser.FLOOR - 684)) | (1 << (mysqlParser.FORMAT - 684)) | (1 << (mysqlParser.FOUND_ROWS - 684)) | (1 << (mysqlParser.FROM_BASE64 - 684)) | (1 << (mysqlParser.FROM_DAYS - 684)) | (1 << (mysqlParser.FROM_UNIXTIME - 684)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 684)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 684)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 684)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 684)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 684)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 684)) | (1 << (mysqlParser.GEOMETRYN - 684)) | (1 << (mysqlParser.GEOMETRYTYPE - 684)) | (1 << (mysqlParser.GEOMFROMTEXT - 684)) | (1 << (mysqlParser.GEOMFROMWKB - 684)) | (1 << (mysqlParser.GET_FORMAT - 684)) | (1 << (mysqlParser.GET_LOCK - 684)) | (1 << (mysqlParser.GLENGTH - 684)) | (1 << (mysqlParser.GREATEST - 684)) | (1 << (mysqlParser.GTID_SUBSET - 684)) | (1 << (mysqlParser.GTID_SUBTRACT - 684)) | (1 << (mysqlParser.HEX - 684)) | (1 << (mysqlParser.IFNULL - 684)) | (1 << (mysqlParser.INET6_ATON - 684)) | (1 << (mysqlParser.INET6_NTOA - 684)) | (1 << (mysqlParser.INET_ATON - 684)) | (1 << (mysqlParser.INET_NTOA - 684)) | (1 << (mysqlParser.INSTR - 684)) | (1 << (mysqlParser.INTERIORRINGN - 684)) | (1 << (mysqlParser.INTERSECTS - 684)) | (1 << (mysqlParser.ISCLOSED - 684)) | (1 << (mysqlParser.ISEMPTY - 684)) | (1 << (mysqlParser.ISNULL - 684)) | (1 << (mysqlParser.ISSIMPLE - 684)) | (1 << (mysqlParser.IS_FREE_LOCK - 684)) | (1 << (mysqlParser.IS_IPV4 - 684)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 684)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 684)) | (1 << (mysqlParser.IS_IPV6 - 684)) | (1 << (mysqlParser.IS_USED_LOCK - 684)) | (1 << (mysqlParser.LAST_INSERT_ID - 684)) | (1 << (mysqlParser.LCASE - 684)) | (1 << (mysqlParser.LEAST - 684)) | (1 << (mysqlParser.LENGTH - 684)) | (1 << (mysqlParser.LINEFROMTEXT - 684)) | (1 << (mysqlParser.LINEFROMWKB - 684)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 684)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 684)) | (1 << (mysqlParser.LN - 684)) | (1 << (mysqlParser.LOAD_FILE - 684)))) != 0) or ((((_la - 748)) & ~0x3f) == 0 and ((1 << (_la - 748)) & ((1 << (mysqlParser.LOCATE - 748)) | (1 << (mysqlParser.LOG - 748)) | (1 << (mysqlParser.LOG10 - 748)) | (1 << (mysqlParser.LOG2 - 748)) | (1 << (mysqlParser.LOWER - 748)) | (1 << (mysqlParser.LPAD - 748)) | (1 << (mysqlParser.LTRIM - 748)) | (1 << (mysqlParser.MAKEDATE - 748)) | (1 << (mysqlParser.MAKETIME - 748)) | (1 << (mysqlParser.MAKE_SET - 748)) | (1 << (mysqlParser.MASTER_POS_WAIT - 748)) | (1 << (mysqlParser.MBRCONTAINS - 748)) | (1 << (mysqlParser.MBRDISJOINT - 748)) | (1 << (mysqlParser.MBREQUAL - 748)) | (1 << (mysqlParser.MBRINTERSECTS - 748)) | (1 << (mysqlParser.MBROVERLAPS - 748)) | (1 << (mysqlParser.MBRTOUCHES - 748)) | (1 << (mysqlParser.MBRWITHIN - 748)) | (1 << (mysqlParser.MD5 - 748)) | (1 << (mysqlParser.MLINEFROMTEXT - 748)) | (1 << (mysqlParser.MLINEFROMWKB - 748)) | (1 << (mysqlParser.MONTHNAME - 748)) | (1 << (mysqlParser.MPOINTFROMTEXT - 748)) | (1 << (mysqlParser.MPOINTFROMWKB - 748)) | (1 << (mysqlParser.MPOLYFROMTEXT - 748)) | (1 << (mysqlParser.MPOLYFROMWKB - 748)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 748)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 748)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 748)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 748)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 748)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 748)) | (1 << (mysqlParser.NAME_CONST - 748)) | (1 << (mysqlParser.NULLIF - 748)) | (1 << (mysqlParser.NUMGEOMETRIES - 748)) | (1 << (mysqlParser.NUMINTERIORRINGS - 748)) | (1 << (mysqlParser.NUMPOINTS - 748)) | (1 << (mysqlParser.OCT - 748)) | (1 << (mysqlParser.OCTET_LENGTH - 748)) | (1 << (mysqlParser.ORD - 748)) | (1 << (mysqlParser.OVERLAPS - 748)) | (1 << (mysqlParser.PERIOD_ADD - 748)) | (1 << (mysqlParser.PERIOD_DIFF - 748)) | (1 << (mysqlParser.PI - 748)) | (1 << (mysqlParser.POINTFROMTEXT - 748)) | (1 << (mysqlParser.POINTFROMWKB - 748)) | (1 << (mysqlParser.POINTN - 748)) | (1 << (mysqlParser.POLYFROMTEXT - 748)) | (1 << (mysqlParser.POLYFROMWKB - 748)) | (1 << (mysqlParser.POLYGONFROMTEXT - 748)) | (1 << (mysqlParser.POLYGONFROMWKB - 748)) | (1 << (mysqlParser.POW - 748)) | (1 << (mysqlParser.POWER - 748)) | (1 << (mysqlParser.QUOTE - 748)) | (1 << (mysqlParser.RADIANS - 748)) | (1 << (mysqlParser.RAND - 748)) | (1 << (mysqlParser.RANDOM_BYTES - 748)) | (1 << (mysqlParser.RELEASE_LOCK - 748)) | (1 << (mysqlParser.REVERSE - 748)) | (1 << (mysqlParser.ROUND - 748)) | (1 << (mysqlParser.ROW_COUNT - 748)) | (1 << (mysqlParser.RPAD - 748)) | (1 << (mysqlParser.RTRIM - 748)) | (1 << (mysqlParser.SEC_TO_TIME - 748)))) != 0) or ((((_la - 812)) & ~0x3f) == 0 and ((1 << (_la - 812)) & ((1 << (mysqlParser.SESSION_USER - 812)) | (1 << (mysqlParser.SHA - 812)) | (1 << (mysqlParser.SHA1 - 812)) | (1 << (mysqlParser.SHA2 - 812)) | (1 << (mysqlParser.SIGN - 812)) | (1 << (mysqlParser.SIN - 812)) | (1 << (mysqlParser.SLEEP - 812)) | (1 << (mysqlParser.SOUNDEX - 812)) | (1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 812)) | (1 << (mysqlParser.SQRT - 812)) | (1 << (mysqlParser.SRID - 812)) | (1 << (mysqlParser.STARTPOINT - 812)) | (1 << (mysqlParser.STRCMP - 812)) | (1 << (mysqlParser.STR_TO_DATE - 812)) | (1 << (mysqlParser.ST_AREA - 812)) | (1 << (mysqlParser.ST_ASBINARY - 812)) | (1 << (mysqlParser.ST_ASTEXT - 812)) | (1 << (mysqlParser.ST_ASWKB - 812)) | (1 << (mysqlParser.ST_ASWKT - 812)) | (1 << (mysqlParser.ST_BUFFER - 812)) | (1 << (mysqlParser.ST_CENTROID - 812)) | (1 << (mysqlParser.ST_CONTAINS - 812)) | (1 << (mysqlParser.ST_CROSSES - 812)) | (1 << (mysqlParser.ST_DIFFERENCE - 812)) | (1 << (mysqlParser.ST_DIMENSION - 812)) | (1 << (mysqlParser.ST_DISJOINT - 812)) | (1 << (mysqlParser.ST_DISTANCE - 812)) | (1 << (mysqlParser.ST_ENDPOINT - 812)) | (1 << (mysqlParser.ST_ENVELOPE - 812)) | (1 << (mysqlParser.ST_EQUALS - 812)) | (1 << (mysqlParser.ST_EXTERIORRING - 812)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 812)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 812)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 812)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 812)) | (1 << (mysqlParser.ST_GEOMETRYN - 812)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 812)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 812)) | (1 << (mysqlParser.ST_INTERIORRINGN - 812)) | (1 << (mysqlParser.ST_INTERSECTION - 812)) | (1 << (mysqlParser.ST_INTERSECTS - 812)) | (1 << (mysqlParser.ST_ISCLOSED - 812)) | (1 << (mysqlParser.ST_ISEMPTY - 812)) | (1 << (mysqlParser.ST_ISSIMPLE - 812)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 812)) | (1 << (mysqlParser.ST_LINEFROMWKB - 812)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 812)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 812)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 812)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 812)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 812)) | (1 << (mysqlParser.ST_NUMPOINTS - 812)) | (1 << (mysqlParser.ST_OVERLAPS - 812)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 812)) | (1 << (mysqlParser.ST_POINTFROMWKB - 812)) | (1 << (mysqlParser.ST_POINTN - 812)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 812)) | (1 << (mysqlParser.ST_POLYFROMWKB - 812)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 812)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 812)))) != 0) or ((((_la - 876)) & ~0x3f) == 0 and ((1 << (_la - 876)) & ((1 << (mysqlParser.ST_SRID - 876)) | (1 << (mysqlParser.ST_STARTPOINT - 876)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 876)) | (1 << (mysqlParser.ST_TOUCHES - 876)) | (1 << (mysqlParser.ST_UNION - 876)) | (1 << (mysqlParser.ST_WITHIN - 876)) | (1 << (mysqlParser.ST_X - 876)) | (1 << (mysqlParser.ST_Y - 876)) | (1 << (mysqlParser.SUBDATE - 876)) | (1 << (mysqlParser.SUBSTRING_INDEX - 876)) | (1 << (mysqlParser.SUBTIME - 876)) | (1 << (mysqlParser.SYSTEM_USER - 876)) | (1 << (mysqlParser.TAN - 876)) | (1 << (mysqlParser.TIMEDIFF - 876)) | (1 << (mysqlParser.TIMESTAMPADD - 876)) | (1 << (mysqlParser.TIMESTAMPDIFF - 876)) | (1 << (mysqlParser.TIME_FORMAT - 876)) | (1 << (mysqlParser.TIME_TO_SEC - 876)) | (1 << (mysqlParser.TOUCHES - 876)) | (1 << (mysqlParser.TO_BASE64 - 876)) | (1 << (mysqlParser.TO_DAYS - 876)) | (1 << (mysqlParser.TO_SECONDS - 876)) | (1 << (mysqlParser.UCASE - 876)) | (1 << (mysqlParser.UNCOMPRESS - 876)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 876)) | (1 << (mysqlParser.UNHEX - 876)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 876)) | (1 << (mysqlParser.UPDATEXML - 876)) | (1 << (mysqlParser.UPPER - 876)) | (1 << (mysqlParser.UUID - 876)) | (1 << (mysqlParser.UUID_SHORT - 876)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 876)) | (1 << (mysqlParser.VERSION - 876)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 876)) | (1 << (mysqlParser.WEEKDAY - 876)) | (1 << (mysqlParser.WEEKOFYEAR - 876)) | (1 << (mysqlParser.WEIGHT_STRING - 876)) | (1 << (mysqlParser.WITHIN - 876)) | (1 << (mysqlParser.YEARWEEK - 876)) | (1 << (mysqlParser.Y_FUNCTION - 876)) | (1 << (mysqlParser.X_FUNCTION - 876)))) != 0) or ((((_la - 942)) & ~0x3f) == 0 and ((1 << (_la - 942)) & ((1 << (mysqlParser.LR_BRACKET - 942)) | (1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 942)) | (1 << (mysqlParser.ID - 942)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 942)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterUserContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_alterUser

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AlterUserMysqlV56Context(AlterUserContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterUserContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(mysqlParser.ALTER, 0)
        def USER(self):
            return self.getToken(mysqlParser.USER, 0)
        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UserNameContext,i)

        def userPasswordOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UserPasswordOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UserPasswordOptionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterUserMysqlV56" ):
                listener.enterAlterUserMysqlV56(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterUserMysqlV56" ):
                listener.exitAlterUserMysqlV56(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterUserMysqlV56" ):
                return visitor.visitAlterUserMysqlV56(self)
            else:
                return visitor.visitChildren(self)


    class AlterUserMysqlV57Context(AlterUserContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.AlterUserContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(mysqlParser.ALTER, 0)
        def USER(self):
            return self.getToken(mysqlParser.USER, 0)
        def userAuthOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UserAuthOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UserAuthOptionContext,i)

        def ifExists(self):
            return self.getTypedRuleContext(mysqlParser.IfExistsContext,0)

        def REQUIRE(self):
            return self.getToken(mysqlParser.REQUIRE, 0)
        def WITH(self):
            return self.getToken(mysqlParser.WITH, 0)
        def userPasswordOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UserPasswordOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UserPasswordOptionContext,i)

        def userLockOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UserLockOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UserLockOptionContext,i)

        def NONE(self):
            return self.getToken(mysqlParser.NONE, 0)
        def tlsOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.TlsOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.TlsOptionContext,i)

        def userResourceOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UserResourceOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UserResourceOptionContext,i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.AND)
            else:
                return self.getToken(mysqlParser.AND, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterUserMysqlV57" ):
                listener.enterAlterUserMysqlV57(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterUserMysqlV57" ):
                listener.exitAlterUserMysqlV57(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlterUserMysqlV57" ):
                return visitor.visitAlterUserMysqlV57(self)
            else:
                return visitor.visitChildren(self)



    def alterUser(self):

        localctx = mysqlParser.AlterUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_alterUser)
        self._la = 0 # Token type
        try:
            self.state = 4154
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,597,self._ctx)
            if la_ == 1:
                localctx = mysqlParser.AlterUserMysqlV56Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4097
                self.match(mysqlParser.ALTER)
                self.state = 4098
                self.match(mysqlParser.USER)
                self.state = 4099
                self.userName()
                self.state = 4100
                self.userPasswordOption()
                self.state = 4107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.COMMA:
                    self.state = 4101
                    self.match(mysqlParser.COMMA)
                    self.state = 4102
                    self.userName()
                    self.state = 4103
                    self.userPasswordOption()
                    self.state = 4109
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = mysqlParser.AlterUserMysqlV57Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4110
                self.match(mysqlParser.ALTER)
                self.state = 4111
                self.match(mysqlParser.USER)
                self.state = 4113
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.IF:
                    self.state = 4112
                    self.ifExists()


                self.state = 4115
                self.userAuthOption()
                self.state = 4120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.COMMA:
                    self.state = 4116
                    self.match(mysqlParser.COMMA)
                    self.state = 4117
                    self.userAuthOption()
                    self.state = 4122
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4137
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.REQUIRE:
                    self.state = 4123
                    self.match(mysqlParser.REQUIRE)
                    self.state = 4135
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [mysqlParser.NONE]:
                        self.state = 4124
                        self.match(mysqlParser.NONE)
                        pass
                    elif token in [mysqlParser.SSL, mysqlParser.CIPHER, mysqlParser.ISSUER, mysqlParser.SUBJECT, mysqlParser.X509]:
                        self.state = 4125
                        self.tlsOption()
                        self.state = 4132
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==mysqlParser.AND or _la==mysqlParser.SSL or _la==mysqlParser.CIPHER or _la==mysqlParser.ISSUER or _la==mysqlParser.SUBJECT or _la==mysqlParser.X509:
                            self.state = 4127
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==mysqlParser.AND:
                                self.state = 4126
                                self.match(mysqlParser.AND)


                            self.state = 4129
                            self.tlsOption()
                            self.state = 4134
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 4145
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.WITH:
                    self.state = 4139
                    self.match(mysqlParser.WITH)
                    self.state = 4141 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 4140
                        self.userResourceOption()
                        self.state = 4143 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 390)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 390)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 390)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 390)))) != 0)):
                            break



                self.state = 4151
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.ACCOUNT or _la==mysqlParser.PASSWORD:
                    self.state = 4149
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [mysqlParser.PASSWORD]:
                        self.state = 4147
                        self.userPasswordOption()
                        pass
                    elif token in [mysqlParser.ACCOUNT]:
                        self.state = 4148
                        self.userLockOption()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 4153
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateUserContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_createUser

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CreateUserMysqlV57Context(CreateUserContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.CreateUserContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(mysqlParser.CREATE, 0)
        def USER(self):
            return self.getToken(mysqlParser.USER, 0)
        def userAuthOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UserAuthOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UserAuthOptionContext,i)

        def ifNotExists(self):
            return self.getTypedRuleContext(mysqlParser.IfNotExistsContext,0)

        def REQUIRE(self):
            return self.getToken(mysqlParser.REQUIRE, 0)
        def WITH(self):
            return self.getToken(mysqlParser.WITH, 0)
        def userPasswordOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UserPasswordOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UserPasswordOptionContext,i)

        def userLockOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UserLockOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UserLockOptionContext,i)

        def NONE(self):
            return self.getToken(mysqlParser.NONE, 0)
        def tlsOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.TlsOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.TlsOptionContext,i)

        def userResourceOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UserResourceOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UserResourceOptionContext,i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.AND)
            else:
                return self.getToken(mysqlParser.AND, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUserMysqlV57" ):
                listener.enterCreateUserMysqlV57(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUserMysqlV57" ):
                listener.exitCreateUserMysqlV57(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateUserMysqlV57" ):
                return visitor.visitCreateUserMysqlV57(self)
            else:
                return visitor.visitChildren(self)


    class CreateUserMysqlV56Context(CreateUserContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.CreateUserContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(mysqlParser.CREATE, 0)
        def USER(self):
            return self.getToken(mysqlParser.USER, 0)
        def userAuthOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UserAuthOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UserAuthOptionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUserMysqlV56" ):
                listener.enterCreateUserMysqlV56(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUserMysqlV56" ):
                listener.exitCreateUserMysqlV56(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateUserMysqlV56" ):
                return visitor.visitCreateUserMysqlV56(self)
            else:
                return visitor.visitChildren(self)



    def createUser(self):

        localctx = mysqlParser.CreateUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_createUser)
        self._la = 0 # Token type
        try:
            self.state = 4210
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,609,self._ctx)
            if la_ == 1:
                localctx = mysqlParser.CreateUserMysqlV56Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4156
                self.match(mysqlParser.CREATE)
                self.state = 4157
                self.match(mysqlParser.USER)
                self.state = 4158
                self.userAuthOption()
                self.state = 4163
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.COMMA:
                    self.state = 4159
                    self.match(mysqlParser.COMMA)
                    self.state = 4160
                    self.userAuthOption()
                    self.state = 4165
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = mysqlParser.CreateUserMysqlV57Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4166
                self.match(mysqlParser.CREATE)
                self.state = 4167
                self.match(mysqlParser.USER)
                self.state = 4169
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.IF:
                    self.state = 4168
                    self.ifNotExists()


                self.state = 4171
                self.userAuthOption()
                self.state = 4176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.COMMA:
                    self.state = 4172
                    self.match(mysqlParser.COMMA)
                    self.state = 4173
                    self.userAuthOption()
                    self.state = 4178
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4193
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.REQUIRE:
                    self.state = 4179
                    self.match(mysqlParser.REQUIRE)
                    self.state = 4191
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [mysqlParser.NONE]:
                        self.state = 4180
                        self.match(mysqlParser.NONE)
                        pass
                    elif token in [mysqlParser.SSL, mysqlParser.CIPHER, mysqlParser.ISSUER, mysqlParser.SUBJECT, mysqlParser.X509]:
                        self.state = 4181
                        self.tlsOption()
                        self.state = 4188
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==mysqlParser.AND or _la==mysqlParser.SSL or _la==mysqlParser.CIPHER or _la==mysqlParser.ISSUER or _la==mysqlParser.SUBJECT or _la==mysqlParser.X509:
                            self.state = 4183
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==mysqlParser.AND:
                                self.state = 4182
                                self.match(mysqlParser.AND)


                            self.state = 4185
                            self.tlsOption()
                            self.state = 4190
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 4201
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.WITH:
                    self.state = 4195
                    self.match(mysqlParser.WITH)
                    self.state = 4197 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 4196
                        self.userResourceOption()
                        self.state = 4199 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 390)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 390)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 390)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 390)))) != 0)):
                            break



                self.state = 4207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.ACCOUNT or _la==mysqlParser.PASSWORD:
                    self.state = 4205
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [mysqlParser.PASSWORD]:
                        self.state = 4203
                        self.userPasswordOption()
                        pass
                    elif token in [mysqlParser.ACCOUNT]:
                        self.state = 4204
                        self.userLockOption()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 4209
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DropUserContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(mysqlParser.DROP, 0)

        def USER(self):
            return self.getToken(mysqlParser.USER, 0)

        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UserNameContext,i)


        def ifExists(self):
            return self.getTypedRuleContext(mysqlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_dropUser

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropUser" ):
                listener.enterDropUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropUser" ):
                listener.exitDropUser(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDropUser" ):
                return visitor.visitDropUser(self)
            else:
                return visitor.visitChildren(self)




    def dropUser(self):

        localctx = mysqlParser.DropUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_dropUser)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4212
            self.match(mysqlParser.DROP)
            self.state = 4213
            self.match(mysqlParser.USER)
            self.state = 4215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.IF:
                self.state = 4214
                self.ifExists()


            self.state = 4217
            self.userName()
            self.state = 4222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.COMMA:
                self.state = 4218
                self.match(mysqlParser.COMMA)
                self.state = 4219
                self.userName()
                self.state = 4224
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GrantStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.privilegeObject = None # Token

        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.GRANT)
            else:
                return self.getToken(mysqlParser.GRANT, i)

        def privelegeClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.PrivelegeClauseContext)
            else:
                return self.getTypedRuleContext(mysqlParser.PrivelegeClauseContext,i)


        def ON(self):
            return self.getToken(mysqlParser.ON, 0)

        def privilegeLevel(self):
            return self.getTypedRuleContext(mysqlParser.PrivilegeLevelContext,0)


        def TO(self):
            return self.getToken(mysqlParser.TO, 0)

        def userAuthOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UserAuthOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UserAuthOptionContext,i)


        def REQUIRE(self):
            return self.getToken(mysqlParser.REQUIRE, 0)

        def WITH(self):
            return self.getToken(mysqlParser.WITH, 0)

        def TABLE(self):
            return self.getToken(mysqlParser.TABLE, 0)

        def FUNCTION(self):
            return self.getToken(mysqlParser.FUNCTION, 0)

        def PROCEDURE(self):
            return self.getToken(mysqlParser.PROCEDURE, 0)

        def NONE(self):
            return self.getToken(mysqlParser.NONE, 0)

        def tlsOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.TlsOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.TlsOptionContext,i)


        def OPTION(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.OPTION)
            else:
                return self.getToken(mysqlParser.OPTION, i)

        def userResourceOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UserResourceOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UserResourceOptionContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.AND)
            else:
                return self.getToken(mysqlParser.AND, i)

        def getRuleIndex(self):
            return mysqlParser.RULE_grantStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantStatement" ):
                listener.enterGrantStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantStatement" ):
                listener.exitGrantStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrantStatement" ):
                return visitor.visitGrantStatement(self)
            else:
                return visitor.visitChildren(self)




    def grantStatement(self):

        localctx = mysqlParser.GrantStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_grantStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4225
            self.match(mysqlParser.GRANT)
            self.state = 4226
            self.privelegeClause()
            self.state = 4231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.COMMA:
                self.state = 4227
                self.match(mysqlParser.COMMA)
                self.state = 4228
                self.privelegeClause()
                self.state = 4233
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4234
            self.match(mysqlParser.ON)
            self.state = 4236
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,613,self._ctx)
            if la_ == 1:
                self.state = 4235
                localctx.privilegeObject = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.PROCEDURE or _la==mysqlParser.TABLE or _la==mysqlParser.FUNCTION):
                    localctx.privilegeObject = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4238
            self.privilegeLevel()
            self.state = 4239
            self.match(mysqlParser.TO)
            self.state = 4240
            self.userAuthOption()
            self.state = 4245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.COMMA:
                self.state = 4241
                self.match(mysqlParser.COMMA)
                self.state = 4242
                self.userAuthOption()
                self.state = 4247
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.REQUIRE:
                self.state = 4248
                self.match(mysqlParser.REQUIRE)
                self.state = 4260
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [mysqlParser.NONE]:
                    self.state = 4249
                    self.match(mysqlParser.NONE)
                    pass
                elif token in [mysqlParser.SSL, mysqlParser.CIPHER, mysqlParser.ISSUER, mysqlParser.SUBJECT, mysqlParser.X509]:
                    self.state = 4250
                    self.tlsOption()
                    self.state = 4257
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==mysqlParser.AND or _la==mysqlParser.SSL or _la==mysqlParser.CIPHER or _la==mysqlParser.ISSUER or _la==mysqlParser.SUBJECT or _la==mysqlParser.X509:
                        self.state = 4252
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==mysqlParser.AND:
                            self.state = 4251
                            self.match(mysqlParser.AND)


                        self.state = 4254
                        self.tlsOption()
                        self.state = 4259
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 4273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.WITH:
                self.state = 4264
                self.match(mysqlParser.WITH)
                self.state = 4270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.GRANT or ((((_la - 390)) & ~0x3f) == 0 and ((1 << (_la - 390)) & ((1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 390)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 390)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 390)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 390)))) != 0):
                    self.state = 4268
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [mysqlParser.GRANT]:
                        self.state = 4265
                        self.match(mysqlParser.GRANT)
                        self.state = 4266
                        self.match(mysqlParser.OPTION)
                        pass
                    elif token in [mysqlParser.MAX_CONNECTIONS_PER_HOUR, mysqlParser.MAX_QUERIES_PER_HOUR, mysqlParser.MAX_UPDATES_PER_HOUR, mysqlParser.MAX_USER_CONNECTIONS]:
                        self.state = 4267
                        self.userResourceOption()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 4272
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GrantProxyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fromFirst = None # UserNameContext
            self.toFirst = None # UserNameContext
            self._userName = None # UserNameContext
            self.toOther = list() # of UserNameContexts

        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.GRANT)
            else:
                return self.getToken(mysqlParser.GRANT, i)

        def PROXY(self):
            return self.getToken(mysqlParser.PROXY, 0)

        def ON(self):
            return self.getToken(mysqlParser.ON, 0)

        def TO(self):
            return self.getToken(mysqlParser.TO, 0)

        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UserNameContext,i)


        def WITH(self):
            return self.getToken(mysqlParser.WITH, 0)

        def OPTION(self):
            return self.getToken(mysqlParser.OPTION, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_grantProxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantProxy" ):
                listener.enterGrantProxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantProxy" ):
                listener.exitGrantProxy(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGrantProxy" ):
                return visitor.visitGrantProxy(self)
            else:
                return visitor.visitChildren(self)




    def grantProxy(self):

        localctx = mysqlParser.GrantProxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_grantProxy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4275
            self.match(mysqlParser.GRANT)
            self.state = 4276
            self.match(mysqlParser.PROXY)
            self.state = 4277
            self.match(mysqlParser.ON)
            self.state = 4278
            localctx.fromFirst = self.userName()
            self.state = 4279
            self.match(mysqlParser.TO)
            self.state = 4280
            localctx.toFirst = self.userName()
            self.state = 4285
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.COMMA:
                self.state = 4281
                self.match(mysqlParser.COMMA)
                self.state = 4282
                localctx._userName = self.userName()
                localctx.toOther.append(localctx._userName)
                self.state = 4287
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.WITH:
                self.state = 4288
                self.match(mysqlParser.WITH)
                self.state = 4289
                self.match(mysqlParser.GRANT)
                self.state = 4290
                self.match(mysqlParser.OPTION)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RenameUserContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fromFirst = None # UserNameContext
            self.toFirst = None # UserNameContext
            self._userName = None # UserNameContext
            self.fromOther = list() # of UserNameContexts
            self.toOther = list() # of UserNameContexts

        def RENAME(self):
            return self.getToken(mysqlParser.RENAME, 0)

        def USER(self):
            return self.getToken(mysqlParser.USER, 0)

        def TO(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.TO)
            else:
                return self.getToken(mysqlParser.TO, i)

        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UserNameContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_renameUser

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameUser" ):
                listener.enterRenameUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameUser" ):
                listener.exitRenameUser(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRenameUser" ):
                return visitor.visitRenameUser(self)
            else:
                return visitor.visitChildren(self)




    def renameUser(self):

        localctx = mysqlParser.RenameUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_renameUser)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4293
            self.match(mysqlParser.RENAME)
            self.state = 4294
            self.match(mysqlParser.USER)
            self.state = 4295
            localctx.fromFirst = self.userName()
            self.state = 4296
            self.match(mysqlParser.TO)
            self.state = 4297
            localctx.toFirst = self.userName()

            self.state = 4298
            self.match(mysqlParser.COMMA)
            self.state = 4299
            localctx._userName = self.userName()
            localctx.fromOther.append(localctx._userName)
            self.state = 4300
            self.match(mysqlParser.TO)
            self.state = 4301
            localctx._userName = self.userName()
            localctx.toOther.append(localctx._userName)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RevokeStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_revokeStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DetailRevokeContext(RevokeStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.RevokeStatementContext
            super().__init__(parser)
            self.privilegeObject = None # Token
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(mysqlParser.REVOKE, 0)
        def privelegeClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.PrivelegeClauseContext)
            else:
                return self.getTypedRuleContext(mysqlParser.PrivelegeClauseContext,i)

        def ON(self):
            return self.getToken(mysqlParser.ON, 0)
        def privilegeLevel(self):
            return self.getTypedRuleContext(mysqlParser.PrivilegeLevelContext,0)

        def FROM(self):
            return self.getToken(mysqlParser.FROM, 0)
        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UserNameContext,i)

        def TABLE(self):
            return self.getToken(mysqlParser.TABLE, 0)
        def FUNCTION(self):
            return self.getToken(mysqlParser.FUNCTION, 0)
        def PROCEDURE(self):
            return self.getToken(mysqlParser.PROCEDURE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDetailRevoke" ):
                listener.enterDetailRevoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDetailRevoke" ):
                listener.exitDetailRevoke(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDetailRevoke" ):
                return visitor.visitDetailRevoke(self)
            else:
                return visitor.visitChildren(self)


    class ShortRevokeContext(RevokeStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.RevokeStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(mysqlParser.REVOKE, 0)
        def ALL(self):
            return self.getToken(mysqlParser.ALL, 0)
        def GRANT(self):
            return self.getToken(mysqlParser.GRANT, 0)
        def OPTION(self):
            return self.getToken(mysqlParser.OPTION, 0)
        def FROM(self):
            return self.getToken(mysqlParser.FROM, 0)
        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UserNameContext,i)

        def PRIVILEGES(self):
            return self.getToken(mysqlParser.PRIVILEGES, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShortRevoke" ):
                listener.enterShortRevoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShortRevoke" ):
                listener.exitShortRevoke(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShortRevoke" ):
                return visitor.visitShortRevoke(self)
            else:
                return visitor.visitChildren(self)



    def revokeStatement(self):

        localctx = mysqlParser.RevokeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_revokeStatement)
        self._la = 0 # Token type
        try:
            self.state = 4343
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,629,self._ctx)
            if la_ == 1:
                localctx = mysqlParser.DetailRevokeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4303
                self.match(mysqlParser.REVOKE)
                self.state = 4304
                self.privelegeClause()
                self.state = 4309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.COMMA:
                    self.state = 4305
                    self.match(mysqlParser.COMMA)
                    self.state = 4306
                    self.privelegeClause()
                    self.state = 4311
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4312
                self.match(mysqlParser.ON)
                self.state = 4314
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,625,self._ctx)
                if la_ == 1:
                    self.state = 4313
                    localctx.privilegeObject = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==mysqlParser.PROCEDURE or _la==mysqlParser.TABLE or _la==mysqlParser.FUNCTION):
                        localctx.privilegeObject = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4316
                self.privilegeLevel()
                self.state = 4317
                self.match(mysqlParser.FROM)
                self.state = 4318
                self.userName()
                self.state = 4323
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.COMMA:
                    self.state = 4319
                    self.match(mysqlParser.COMMA)
                    self.state = 4320
                    self.userName()
                    self.state = 4325
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = mysqlParser.ShortRevokeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4326
                self.match(mysqlParser.REVOKE)
                self.state = 4327
                self.match(mysqlParser.ALL)
                self.state = 4329
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.PRIVILEGES:
                    self.state = 4328
                    self.match(mysqlParser.PRIVILEGES)


                self.state = 4331
                self.match(mysqlParser.COMMA)
                self.state = 4332
                self.match(mysqlParser.GRANT)
                self.state = 4333
                self.match(mysqlParser.OPTION)
                self.state = 4334
                self.match(mysqlParser.FROM)
                self.state = 4335
                self.userName()
                self.state = 4340
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.COMMA:
                    self.state = 4336
                    self.match(mysqlParser.COMMA)
                    self.state = 4337
                    self.userName()
                    self.state = 4342
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RevokeProxyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.onUser = None # UserNameContext
            self.fromFirst = None # UserNameContext
            self._userName = None # UserNameContext
            self.fromOther = list() # of UserNameContexts

        def REVOKE(self):
            return self.getToken(mysqlParser.REVOKE, 0)

        def PROXY(self):
            return self.getToken(mysqlParser.PROXY, 0)

        def ON(self):
            return self.getToken(mysqlParser.ON, 0)

        def FROM(self):
            return self.getToken(mysqlParser.FROM, 0)

        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UserNameContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_revokeProxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokeProxy" ):
                listener.enterRevokeProxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokeProxy" ):
                listener.exitRevokeProxy(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRevokeProxy" ):
                return visitor.visitRevokeProxy(self)
            else:
                return visitor.visitChildren(self)




    def revokeProxy(self):

        localctx = mysqlParser.RevokeProxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_revokeProxy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4345
            self.match(mysqlParser.REVOKE)
            self.state = 4346
            self.match(mysqlParser.PROXY)
            self.state = 4347
            self.match(mysqlParser.ON)
            self.state = 4348
            localctx.onUser = self.userName()
            self.state = 4349
            self.match(mysqlParser.FROM)
            self.state = 4350
            localctx.fromFirst = self.userName()
            self.state = 4355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.COMMA:
                self.state = 4351
                self.match(mysqlParser.COMMA)
                self.state = 4352
                localctx._userName = self.userName()
                localctx.fromOther.append(localctx._userName)
                self.state = 4357
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetPasswordStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(mysqlParser.SET, 0)

        def PASSWORD(self):
            return self.getToken(mysqlParser.PASSWORD, 0)

        def passwordFunctionClause(self):
            return self.getTypedRuleContext(mysqlParser.PasswordFunctionClauseContext,0)


        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def FOR(self):
            return self.getToken(mysqlParser.FOR, 0)

        def userName(self):
            return self.getTypedRuleContext(mysqlParser.UserNameContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_setPasswordStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetPasswordStatement" ):
                listener.enterSetPasswordStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetPasswordStatement" ):
                listener.exitSetPasswordStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetPasswordStatement" ):
                return visitor.visitSetPasswordStatement(self)
            else:
                return visitor.visitChildren(self)




    def setPasswordStatement(self):

        localctx = mysqlParser.SetPasswordStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_setPasswordStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4358
            self.match(mysqlParser.SET)
            self.state = 4359
            self.match(mysqlParser.PASSWORD)
            self.state = 4362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.FOR:
                self.state = 4360
                self.match(mysqlParser.FOR)
                self.state = 4361
                self.userName()


            self.state = 4364
            self.match(mysqlParser.EQUAL_SYMBOL)
            self.state = 4367
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.OLD_PASSWORD, mysqlParser.PASSWORD]:
                self.state = 4365
                self.passwordFunctionClause()
                pass
            elif token in [mysqlParser.STRING_LITERAL]:
                self.state = 4366
                self.match(mysqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UserPasswordOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASSWORD(self):
            return self.getToken(mysqlParser.PASSWORD, 0)

        def EXPIRE(self):
            return self.getToken(mysqlParser.EXPIRE, 0)

        def DEFAULT(self):
            return self.getToken(mysqlParser.DEFAULT, 0)

        def NEVER(self):
            return self.getToken(mysqlParser.NEVER, 0)

        def INTERVAL(self):
            return self.getToken(mysqlParser.INTERVAL, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,0)


        def DAY(self):
            return self.getToken(mysqlParser.DAY, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_userPasswordOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserPasswordOption" ):
                listener.enterUserPasswordOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserPasswordOption" ):
                listener.exitUserPasswordOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserPasswordOption" ):
                return visitor.visitUserPasswordOption(self)
            else:
                return visitor.visitChildren(self)




    def userPasswordOption(self):

        localctx = mysqlParser.UserPasswordOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_userPasswordOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4369
            self.match(mysqlParser.PASSWORD)
            self.state = 4370
            self.match(mysqlParser.EXPIRE)
            self.state = 4377
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.DEFAULT]:
                self.state = 4371
                self.match(mysqlParser.DEFAULT)
                pass
            elif token in [mysqlParser.NEVER]:
                self.state = 4372
                self.match(mysqlParser.NEVER)
                pass
            elif token in [mysqlParser.INTERVAL]:
                self.state = 4373
                self.match(mysqlParser.INTERVAL)
                self.state = 4374
                self.decimalLiteral()
                self.state = 4375
                self.match(mysqlParser.DAY)
                pass
            elif token in [mysqlParser.EOF, mysqlParser.ACCOUNT, mysqlParser.PASSWORD, mysqlParser.MINUS, mysqlParser.COMMA, mysqlParser.SEMI]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UserAuthOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_userAuthOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PasswordAuthOptionContext(UserAuthOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.UserAuthOptionContext
            super().__init__(parser)
            self.hashed = None # Token
            self.copyFrom(ctx)

        def userName(self):
            return self.getTypedRuleContext(mysqlParser.UserNameContext,0)

        def IDENTIFIED(self):
            return self.getToken(mysqlParser.IDENTIFIED, 0)
        def BY(self):
            return self.getToken(mysqlParser.BY, 0)
        def PASSWORD(self):
            return self.getToken(mysqlParser.PASSWORD, 0)
        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPasswordAuthOption" ):
                listener.enterPasswordAuthOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPasswordAuthOption" ):
                listener.exitPasswordAuthOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPasswordAuthOption" ):
                return visitor.visitPasswordAuthOption(self)
            else:
                return visitor.visitChildren(self)


    class StringAuthOptionContext(UserAuthOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.UserAuthOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def userName(self):
            return self.getTypedRuleContext(mysqlParser.UserNameContext,0)

        def IDENTIFIED(self):
            return self.getToken(mysqlParser.IDENTIFIED, 0)
        def BY(self):
            return self.getToken(mysqlParser.BY, 0)
        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)
        def WITH(self):
            return self.getToken(mysqlParser.WITH, 0)
        def authPlugin(self):
            return self.getTypedRuleContext(mysqlParser.AuthPluginContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringAuthOption" ):
                listener.enterStringAuthOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringAuthOption" ):
                listener.exitStringAuthOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringAuthOption" ):
                return visitor.visitStringAuthOption(self)
            else:
                return visitor.visitChildren(self)


    class HashAuthOptionContext(UserAuthOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.UserAuthOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def userName(self):
            return self.getTypedRuleContext(mysqlParser.UserNameContext,0)

        def IDENTIFIED(self):
            return self.getToken(mysqlParser.IDENTIFIED, 0)
        def WITH(self):
            return self.getToken(mysqlParser.WITH, 0)
        def authPlugin(self):
            return self.getTypedRuleContext(mysqlParser.AuthPluginContext,0)

        def AS(self):
            return self.getToken(mysqlParser.AS, 0)
        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHashAuthOption" ):
                listener.enterHashAuthOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHashAuthOption" ):
                listener.exitHashAuthOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHashAuthOption" ):
                return visitor.visitHashAuthOption(self)
            else:
                return visitor.visitChildren(self)



    def userAuthOption(self):

        localctx = mysqlParser.UserAuthOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_userAuthOption)
        self._la = 0 # Token type
        try:
            self.state = 4402
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,636,self._ctx)
            if la_ == 1:
                localctx = mysqlParser.PasswordAuthOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4379
                self.userName()
                self.state = 4380
                self.match(mysqlParser.IDENTIFIED)
                self.state = 4381
                self.match(mysqlParser.BY)
                self.state = 4382
                self.match(mysqlParser.PASSWORD)
                self.state = 4383
                localctx.hashed = self.match(mysqlParser.STRING_LITERAL)
                pass

            elif la_ == 2:
                localctx = mysqlParser.StringAuthOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4385
                self.userName()
                self.state = 4386
                self.match(mysqlParser.IDENTIFIED)
                self.state = 4389
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.WITH:
                    self.state = 4387
                    self.match(mysqlParser.WITH)
                    self.state = 4388
                    self.authPlugin()


                self.state = 4391
                self.match(mysqlParser.BY)
                self.state = 4392
                self.match(mysqlParser.STRING_LITERAL)
                pass

            elif la_ == 3:
                localctx = mysqlParser.HashAuthOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4394
                self.userName()
                self.state = 4395
                self.match(mysqlParser.IDENTIFIED)
                self.state = 4396
                self.match(mysqlParser.WITH)
                self.state = 4397
                self.authPlugin()
                self.state = 4400
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.AS:
                    self.state = 4398
                    self.match(mysqlParser.AS)
                    self.state = 4399
                    self.match(mysqlParser.STRING_LITERAL)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TlsOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SSL(self):
            return self.getToken(mysqlParser.SSL, 0)

        def X509(self):
            return self.getToken(mysqlParser.X509, 0)

        def CIPHER(self):
            return self.getToken(mysqlParser.CIPHER, 0)

        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def ISSUER(self):
            return self.getToken(mysqlParser.ISSUER, 0)

        def SUBJECT(self):
            return self.getToken(mysqlParser.SUBJECT, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_tlsOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTlsOption" ):
                listener.enterTlsOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTlsOption" ):
                listener.exitTlsOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTlsOption" ):
                return visitor.visitTlsOption(self)
            else:
                return visitor.visitChildren(self)




    def tlsOption(self):

        localctx = mysqlParser.TlsOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_tlsOption)
        try:
            self.state = 4412
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.SSL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4404
                self.match(mysqlParser.SSL)
                pass
            elif token in [mysqlParser.X509]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4405
                self.match(mysqlParser.X509)
                pass
            elif token in [mysqlParser.CIPHER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4406
                self.match(mysqlParser.CIPHER)
                self.state = 4407
                self.match(mysqlParser.STRING_LITERAL)
                pass
            elif token in [mysqlParser.ISSUER]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4408
                self.match(mysqlParser.ISSUER)
                self.state = 4409
                self.match(mysqlParser.STRING_LITERAL)
                pass
            elif token in [mysqlParser.SUBJECT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4410
                self.match(mysqlParser.SUBJECT)
                self.state = 4411
                self.match(mysqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UserResourceOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAX_QUERIES_PER_HOUR(self):
            return self.getToken(mysqlParser.MAX_QUERIES_PER_HOUR, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,0)


        def MAX_UPDATES_PER_HOUR(self):
            return self.getToken(mysqlParser.MAX_UPDATES_PER_HOUR, 0)

        def MAX_CONNECTIONS_PER_HOUR(self):
            return self.getToken(mysqlParser.MAX_CONNECTIONS_PER_HOUR, 0)

        def MAX_USER_CONNECTIONS(self):
            return self.getToken(mysqlParser.MAX_USER_CONNECTIONS, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_userResourceOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserResourceOption" ):
                listener.enterUserResourceOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserResourceOption" ):
                listener.exitUserResourceOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserResourceOption" ):
                return visitor.visitUserResourceOption(self)
            else:
                return visitor.visitChildren(self)




    def userResourceOption(self):

        localctx = mysqlParser.UserResourceOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_userResourceOption)
        try:
            self.state = 4422
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.MAX_QUERIES_PER_HOUR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4414
                self.match(mysqlParser.MAX_QUERIES_PER_HOUR)
                self.state = 4415
                self.decimalLiteral()
                pass
            elif token in [mysqlParser.MAX_UPDATES_PER_HOUR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4416
                self.match(mysqlParser.MAX_UPDATES_PER_HOUR)
                self.state = 4417
                self.decimalLiteral()
                pass
            elif token in [mysqlParser.MAX_CONNECTIONS_PER_HOUR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4418
                self.match(mysqlParser.MAX_CONNECTIONS_PER_HOUR)
                self.state = 4419
                self.decimalLiteral()
                pass
            elif token in [mysqlParser.MAX_USER_CONNECTIONS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4420
                self.match(mysqlParser.MAX_USER_CONNECTIONS)
                self.state = 4421
                self.decimalLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UserLockOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCOUNT(self):
            return self.getToken(mysqlParser.ACCOUNT, 0)

        def LOCK(self):
            return self.getToken(mysqlParser.LOCK, 0)

        def UNLOCK(self):
            return self.getToken(mysqlParser.UNLOCK, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_userLockOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserLockOption" ):
                listener.enterUserLockOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserLockOption" ):
                listener.exitUserLockOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserLockOption" ):
                return visitor.visitUserLockOption(self)
            else:
                return visitor.visitChildren(self)




    def userLockOption(self):

        localctx = mysqlParser.UserLockOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_userLockOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4424
            self.match(mysqlParser.ACCOUNT)
            self.state = 4425
            _la = self._input.LA(1)
            if not(_la==mysqlParser.LOCK or _la==mysqlParser.UNLOCK):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrivelegeClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def privilege(self):
            return self.getTypedRuleContext(mysqlParser.PrivilegeContext,0)


        def uidList(self):
            return self.getTypedRuleContext(mysqlParser.UidListContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_privelegeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivelegeClause" ):
                listener.enterPrivelegeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivelegeClause" ):
                listener.exitPrivelegeClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivelegeClause" ):
                return visitor.visitPrivelegeClause(self)
            else:
                return visitor.visitChildren(self)




    def privelegeClause(self):

        localctx = mysqlParser.PrivelegeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_privelegeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4427
            self.privilege()
            self.state = 4432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.LR_BRACKET:
                self.state = 4428
                self.match(mysqlParser.LR_BRACKET)
                self.state = 4429
                self.uidList()
                self.state = 4430
                self.match(mysqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrivilegeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(mysqlParser.ALL, 0)

        def PRIVILEGES(self):
            return self.getToken(mysqlParser.PRIVILEGES, 0)

        def ALTER(self):
            return self.getToken(mysqlParser.ALTER, 0)

        def ROUTINE(self):
            return self.getToken(mysqlParser.ROUTINE, 0)

        def CREATE(self):
            return self.getToken(mysqlParser.CREATE, 0)

        def TEMPORARY(self):
            return self.getToken(mysqlParser.TEMPORARY, 0)

        def TABLES(self):
            return self.getToken(mysqlParser.TABLES, 0)

        def VIEW(self):
            return self.getToken(mysqlParser.VIEW, 0)

        def USER(self):
            return self.getToken(mysqlParser.USER, 0)

        def TABLESPACE(self):
            return self.getToken(mysqlParser.TABLESPACE, 0)

        def DELETE(self):
            return self.getToken(mysqlParser.DELETE, 0)

        def DROP(self):
            return self.getToken(mysqlParser.DROP, 0)

        def EVENT(self):
            return self.getToken(mysqlParser.EVENT, 0)

        def EXECUTE(self):
            return self.getToken(mysqlParser.EXECUTE, 0)

        def FILE(self):
            return self.getToken(mysqlParser.FILE, 0)

        def GRANT(self):
            return self.getToken(mysqlParser.GRANT, 0)

        def OPTION(self):
            return self.getToken(mysqlParser.OPTION, 0)

        def INDEX(self):
            return self.getToken(mysqlParser.INDEX, 0)

        def INSERT(self):
            return self.getToken(mysqlParser.INSERT, 0)

        def LOCK(self):
            return self.getToken(mysqlParser.LOCK, 0)

        def PROCESS(self):
            return self.getToken(mysqlParser.PROCESS, 0)

        def PROXY(self):
            return self.getToken(mysqlParser.PROXY, 0)

        def REFERENCES(self):
            return self.getToken(mysqlParser.REFERENCES, 0)

        def RELOAD(self):
            return self.getToken(mysqlParser.RELOAD, 0)

        def REPLICATION(self):
            return self.getToken(mysqlParser.REPLICATION, 0)

        def CLIENT(self):
            return self.getToken(mysqlParser.CLIENT, 0)

        def SLAVE(self):
            return self.getToken(mysqlParser.SLAVE, 0)

        def SELECT(self):
            return self.getToken(mysqlParser.SELECT, 0)

        def SHOW(self):
            return self.getToken(mysqlParser.SHOW, 0)

        def DATABASES(self):
            return self.getToken(mysqlParser.DATABASES, 0)

        def SHUTDOWN(self):
            return self.getToken(mysqlParser.SHUTDOWN, 0)

        def SUPER(self):
            return self.getToken(mysqlParser.SUPER, 0)

        def TRIGGER(self):
            return self.getToken(mysqlParser.TRIGGER, 0)

        def UPDATE(self):
            return self.getToken(mysqlParser.UPDATE, 0)

        def USAGE(self):
            return self.getToken(mysqlParser.USAGE, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilege" ):
                listener.enterPrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilege" ):
                listener.exitPrivilege(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivilege" ):
                return visitor.visitPrivilege(self)
            else:
                return visitor.visitChildren(self)




    def privilege(self):

        localctx = mysqlParser.PrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_privilege)
        self._la = 0 # Token type
        try:
            self.state = 4476
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.ALL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4434
                self.match(mysqlParser.ALL)
                self.state = 4436
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.PRIVILEGES:
                    self.state = 4435
                    self.match(mysqlParser.PRIVILEGES)


                pass
            elif token in [mysqlParser.ALTER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4438
                self.match(mysqlParser.ALTER)
                self.state = 4440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.ROUTINE:
                    self.state = 4439
                    self.match(mysqlParser.ROUTINE)


                pass
            elif token in [mysqlParser.CREATE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4442
                self.match(mysqlParser.CREATE)
                self.state = 4449
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [mysqlParser.TEMPORARY]:
                    self.state = 4443
                    self.match(mysqlParser.TEMPORARY)
                    self.state = 4444
                    self.match(mysqlParser.TABLES)
                    pass
                elif token in [mysqlParser.ROUTINE]:
                    self.state = 4445
                    self.match(mysqlParser.ROUTINE)
                    pass
                elif token in [mysqlParser.VIEW]:
                    self.state = 4446
                    self.match(mysqlParser.VIEW)
                    pass
                elif token in [mysqlParser.USER]:
                    self.state = 4447
                    self.match(mysqlParser.USER)
                    pass
                elif token in [mysqlParser.TABLESPACE]:
                    self.state = 4448
                    self.match(mysqlParser.TABLESPACE)
                    pass
                elif token in [mysqlParser.ON, mysqlParser.LR_BRACKET, mysqlParser.COMMA]:
                    pass
                else:
                    pass
                pass
            elif token in [mysqlParser.DELETE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4451
                self.match(mysqlParser.DELETE)
                pass
            elif token in [mysqlParser.DROP]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4452
                self.match(mysqlParser.DROP)
                pass
            elif token in [mysqlParser.EVENT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4453
                self.match(mysqlParser.EVENT)
                pass
            elif token in [mysqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4454
                self.match(mysqlParser.EXECUTE)
                pass
            elif token in [mysqlParser.FILE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4455
                self.match(mysqlParser.FILE)
                pass
            elif token in [mysqlParser.GRANT]:
                self.enterOuterAlt(localctx, 9)
                self.state = 4456
                self.match(mysqlParser.GRANT)
                self.state = 4457
                self.match(mysqlParser.OPTION)
                pass
            elif token in [mysqlParser.INDEX]:
                self.enterOuterAlt(localctx, 10)
                self.state = 4458
                self.match(mysqlParser.INDEX)
                pass
            elif token in [mysqlParser.INSERT]:
                self.enterOuterAlt(localctx, 11)
                self.state = 4459
                self.match(mysqlParser.INSERT)
                pass
            elif token in [mysqlParser.LOCK]:
                self.enterOuterAlt(localctx, 12)
                self.state = 4460
                self.match(mysqlParser.LOCK)
                self.state = 4461
                self.match(mysqlParser.TABLES)
                pass
            elif token in [mysqlParser.PROCESS]:
                self.enterOuterAlt(localctx, 13)
                self.state = 4462
                self.match(mysqlParser.PROCESS)
                pass
            elif token in [mysqlParser.PROXY]:
                self.enterOuterAlt(localctx, 14)
                self.state = 4463
                self.match(mysqlParser.PROXY)
                pass
            elif token in [mysqlParser.REFERENCES]:
                self.enterOuterAlt(localctx, 15)
                self.state = 4464
                self.match(mysqlParser.REFERENCES)
                pass
            elif token in [mysqlParser.RELOAD]:
                self.enterOuterAlt(localctx, 16)
                self.state = 4465
                self.match(mysqlParser.RELOAD)
                pass
            elif token in [mysqlParser.REPLICATION]:
                self.enterOuterAlt(localctx, 17)
                self.state = 4466
                self.match(mysqlParser.REPLICATION)
                self.state = 4467
                _la = self._input.LA(1)
                if not(_la==mysqlParser.CLIENT or _la==mysqlParser.SLAVE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [mysqlParser.SELECT]:
                self.enterOuterAlt(localctx, 18)
                self.state = 4468
                self.match(mysqlParser.SELECT)
                pass
            elif token in [mysqlParser.SHOW]:
                self.enterOuterAlt(localctx, 19)
                self.state = 4469
                self.match(mysqlParser.SHOW)
                self.state = 4470
                _la = self._input.LA(1)
                if not(_la==mysqlParser.DATABASES or _la==mysqlParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [mysqlParser.SHUTDOWN]:
                self.enterOuterAlt(localctx, 20)
                self.state = 4471
                self.match(mysqlParser.SHUTDOWN)
                pass
            elif token in [mysqlParser.SUPER]:
                self.enterOuterAlt(localctx, 21)
                self.state = 4472
                self.match(mysqlParser.SUPER)
                pass
            elif token in [mysqlParser.TRIGGER]:
                self.enterOuterAlt(localctx, 22)
                self.state = 4473
                self.match(mysqlParser.TRIGGER)
                pass
            elif token in [mysqlParser.UPDATE]:
                self.enterOuterAlt(localctx, 23)
                self.state = 4474
                self.match(mysqlParser.UPDATE)
                pass
            elif token in [mysqlParser.USAGE]:
                self.enterOuterAlt(localctx, 24)
                self.state = 4475
                self.match(mysqlParser.USAGE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrivilegeLevelContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UidContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UidContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_privilegeLevel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilegeLevel" ):
                listener.enterPrivilegeLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilegeLevel" ):
                listener.exitPrivilegeLevel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivilegeLevel" ):
                return visitor.visitPrivilegeLevel(self)
            else:
                return visitor.visitChildren(self)




    def privilegeLevel(self):

        localctx = mysqlParser.PrivilegeLevelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_privilegeLevel)
        try:
            self.state = 4491
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,644,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4478
                self.match(mysqlParser.STAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4479
                self.match(mysqlParser.STAR)
                self.state = 4480
                self.match(mysqlParser.DOT)
                self.state = 4481
                self.match(mysqlParser.STAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4482
                self.uid()
                self.state = 4483
                self.match(mysqlParser.DOT)
                self.state = 4484
                self.match(mysqlParser.STAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4486
                self.uid()
                self.state = 4487
                self.match(mysqlParser.DOT)
                self.state = 4488
                self.uid()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 4490
                self.uid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AnalyzeTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.actionOption = None # Token

        def ANALYZE(self):
            return self.getToken(mysqlParser.ANALYZE, 0)

        def TABLE(self):
            return self.getToken(mysqlParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(mysqlParser.TablesContext,0)


        def NO_WRITE_TO_BINLOG(self):
            return self.getToken(mysqlParser.NO_WRITE_TO_BINLOG, 0)

        def LOCAL(self):
            return self.getToken(mysqlParser.LOCAL, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_analyzeTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyzeTable" ):
                listener.enterAnalyzeTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyzeTable" ):
                listener.exitAnalyzeTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnalyzeTable" ):
                return visitor.visitAnalyzeTable(self)
            else:
                return visitor.visitChildren(self)




    def analyzeTable(self):

        localctx = mysqlParser.AnalyzeTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_analyzeTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4493
            self.match(mysqlParser.ANALYZE)
            self.state = 4495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.NO_WRITE_TO_BINLOG or _la==mysqlParser.LOCAL:
                self.state = 4494
                localctx.actionOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.NO_WRITE_TO_BINLOG or _la==mysqlParser.LOCAL):
                    localctx.actionOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4497
            self.match(mysqlParser.TABLE)
            self.state = 4498
            self.tables()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CheckTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECK(self):
            return self.getToken(mysqlParser.CHECK, 0)

        def TABLE(self):
            return self.getToken(mysqlParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(mysqlParser.TablesContext,0)


        def checkTableOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.CheckTableOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.CheckTableOptionContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_checkTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckTable" ):
                listener.enterCheckTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckTable" ):
                listener.exitCheckTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCheckTable" ):
                return visitor.visitCheckTable(self)
            else:
                return visitor.visitChildren(self)




    def checkTable(self):

        localctx = mysqlParser.CheckTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_checkTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4500
            self.match(mysqlParser.CHECK)
            self.state = 4501
            self.match(mysqlParser.TABLE)
            self.state = 4502
            self.tables()
            self.state = 4506
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.FOR or ((((_la - 264)) & ~0x3f) == 0 and ((1 << (_la - 264)) & ((1 << (mysqlParser.CHANGED - 264)) | (1 << (mysqlParser.EXTENDED - 264)) | (1 << (mysqlParser.FAST - 264)))) != 0) or _la==mysqlParser.MEDIUM or _la==mysqlParser.QUICK:
                self.state = 4503
                self.checkTableOption()
                self.state = 4508
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ChecksumTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.actionOption = None # Token

        def CHECKSUM(self):
            return self.getToken(mysqlParser.CHECKSUM, 0)

        def TABLE(self):
            return self.getToken(mysqlParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(mysqlParser.TablesContext,0)


        def QUICK(self):
            return self.getToken(mysqlParser.QUICK, 0)

        def EXTENDED(self):
            return self.getToken(mysqlParser.EXTENDED, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_checksumTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChecksumTable" ):
                listener.enterChecksumTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChecksumTable" ):
                listener.exitChecksumTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChecksumTable" ):
                return visitor.visitChecksumTable(self)
            else:
                return visitor.visitChildren(self)




    def checksumTable(self):

        localctx = mysqlParser.ChecksumTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_checksumTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4509
            self.match(mysqlParser.CHECKSUM)
            self.state = 4510
            self.match(mysqlParser.TABLE)
            self.state = 4511
            self.tables()
            self.state = 4513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.EXTENDED or _la==mysqlParser.QUICK:
                self.state = 4512
                localctx.actionOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.EXTENDED or _la==mysqlParser.QUICK):
                    localctx.actionOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OptimizeTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.actionOption = None # Token

        def OPTIMIZE(self):
            return self.getToken(mysqlParser.OPTIMIZE, 0)

        def TABLE(self):
            return self.getToken(mysqlParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(mysqlParser.TablesContext,0)


        def NO_WRITE_TO_BINLOG(self):
            return self.getToken(mysqlParser.NO_WRITE_TO_BINLOG, 0)

        def LOCAL(self):
            return self.getToken(mysqlParser.LOCAL, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_optimizeTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptimizeTable" ):
                listener.enterOptimizeTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptimizeTable" ):
                listener.exitOptimizeTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptimizeTable" ):
                return visitor.visitOptimizeTable(self)
            else:
                return visitor.visitChildren(self)




    def optimizeTable(self):

        localctx = mysqlParser.OptimizeTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_optimizeTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4515
            self.match(mysqlParser.OPTIMIZE)
            self.state = 4517
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.NO_WRITE_TO_BINLOG or _la==mysqlParser.LOCAL:
                self.state = 4516
                localctx.actionOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.NO_WRITE_TO_BINLOG or _la==mysqlParser.LOCAL):
                    localctx.actionOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4519
            self.match(mysqlParser.TABLE)
            self.state = 4520
            self.tables()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RepairTableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.actionOption = None # Token

        def REPAIR(self):
            return self.getToken(mysqlParser.REPAIR, 0)

        def TABLE(self):
            return self.getToken(mysqlParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(mysqlParser.TablesContext,0)


        def QUICK(self):
            return self.getToken(mysqlParser.QUICK, 0)

        def EXTENDED(self):
            return self.getToken(mysqlParser.EXTENDED, 0)

        def USE_FRM(self):
            return self.getToken(mysqlParser.USE_FRM, 0)

        def NO_WRITE_TO_BINLOG(self):
            return self.getToken(mysqlParser.NO_WRITE_TO_BINLOG, 0)

        def LOCAL(self):
            return self.getToken(mysqlParser.LOCAL, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_repairTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepairTable" ):
                listener.enterRepairTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepairTable" ):
                listener.exitRepairTable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRepairTable" ):
                return visitor.visitRepairTable(self)
            else:
                return visitor.visitChildren(self)




    def repairTable(self):

        localctx = mysqlParser.RepairTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_repairTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4522
            self.match(mysqlParser.REPAIR)
            self.state = 4524
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.NO_WRITE_TO_BINLOG or _la==mysqlParser.LOCAL:
                self.state = 4523
                localctx.actionOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.NO_WRITE_TO_BINLOG or _la==mysqlParser.LOCAL):
                    localctx.actionOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4526
            self.match(mysqlParser.TABLE)
            self.state = 4527
            self.tables()
            self.state = 4529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.QUICK:
                self.state = 4528
                self.match(mysqlParser.QUICK)


            self.state = 4532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.EXTENDED:
                self.state = 4531
                self.match(mysqlParser.EXTENDED)


            self.state = 4535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.USE_FRM:
                self.state = 4534
                self.match(mysqlParser.USE_FRM)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CheckTableOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(mysqlParser.FOR, 0)

        def UPGRADE(self):
            return self.getToken(mysqlParser.UPGRADE, 0)

        def QUICK(self):
            return self.getToken(mysqlParser.QUICK, 0)

        def FAST(self):
            return self.getToken(mysqlParser.FAST, 0)

        def MEDIUM(self):
            return self.getToken(mysqlParser.MEDIUM, 0)

        def EXTENDED(self):
            return self.getToken(mysqlParser.EXTENDED, 0)

        def CHANGED(self):
            return self.getToken(mysqlParser.CHANGED, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_checkTableOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckTableOption" ):
                listener.enterCheckTableOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckTableOption" ):
                listener.exitCheckTableOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCheckTableOption" ):
                return visitor.visitCheckTableOption(self)
            else:
                return visitor.visitChildren(self)




    def checkTableOption(self):

        localctx = mysqlParser.CheckTableOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_checkTableOption)
        try:
            self.state = 4544
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4537
                self.match(mysqlParser.FOR)
                self.state = 4538
                self.match(mysqlParser.UPGRADE)
                pass
            elif token in [mysqlParser.QUICK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4539
                self.match(mysqlParser.QUICK)
                pass
            elif token in [mysqlParser.FAST]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4540
                self.match(mysqlParser.FAST)
                pass
            elif token in [mysqlParser.MEDIUM]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4541
                self.match(mysqlParser.MEDIUM)
                pass
            elif token in [mysqlParser.EXTENDED]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4542
                self.match(mysqlParser.EXTENDED)
                pass
            elif token in [mysqlParser.CHANGED]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4543
                self.match(mysqlParser.CHANGED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CreateUdfunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.returnType = None # Token

        def CREATE(self):
            return self.getToken(mysqlParser.CREATE, 0)

        def FUNCTION(self):
            return self.getToken(mysqlParser.FUNCTION, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def RETURNS(self):
            return self.getToken(mysqlParser.RETURNS, 0)

        def SONAME(self):
            return self.getToken(mysqlParser.SONAME, 0)

        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def STRING(self):
            return self.getToken(mysqlParser.STRING, 0)

        def INTEGER(self):
            return self.getToken(mysqlParser.INTEGER, 0)

        def REAL(self):
            return self.getToken(mysqlParser.REAL, 0)

        def DECIMAL(self):
            return self.getToken(mysqlParser.DECIMAL, 0)

        def AGGREGATE(self):
            return self.getToken(mysqlParser.AGGREGATE, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_createUdfunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUdfunction" ):
                listener.enterCreateUdfunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUdfunction" ):
                listener.exitCreateUdfunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreateUdfunction" ):
                return visitor.visitCreateUdfunction(self)
            else:
                return visitor.visitChildren(self)




    def createUdfunction(self):

        localctx = mysqlParser.CreateUdfunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_createUdfunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4546
            self.match(mysqlParser.CREATE)
            self.state = 4548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.AGGREGATE:
                self.state = 4547
                self.match(mysqlParser.AGGREGATE)


            self.state = 4550
            self.match(mysqlParser.FUNCTION)
            self.state = 4551
            self.uid()
            self.state = 4552
            self.match(mysqlParser.RETURNS)
            self.state = 4553
            localctx.returnType = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & ((1 << (mysqlParser.INTEGER - 173)) | (1 << (mysqlParser.REAL - 173)) | (1 << (mysqlParser.DECIMAL - 173)))) != 0) or _la==mysqlParser.STRING):
                localctx.returnType = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4554
            self.match(mysqlParser.SONAME)
            self.state = 4555
            self.match(mysqlParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InstallPluginContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSTALL(self):
            return self.getToken(mysqlParser.INSTALL, 0)

        def PLUGIN(self):
            return self.getToken(mysqlParser.PLUGIN, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def SONAME(self):
            return self.getToken(mysqlParser.SONAME, 0)

        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_installPlugin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstallPlugin" ):
                listener.enterInstallPlugin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstallPlugin" ):
                listener.exitInstallPlugin(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstallPlugin" ):
                return visitor.visitInstallPlugin(self)
            else:
                return visitor.visitChildren(self)




    def installPlugin(self):

        localctx = mysqlParser.InstallPluginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_installPlugin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4557
            self.match(mysqlParser.INSTALL)
            self.state = 4558
            self.match(mysqlParser.PLUGIN)
            self.state = 4559
            self.uid()
            self.state = 4560
            self.match(mysqlParser.SONAME)
            self.state = 4561
            self.match(mysqlParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UninstallPluginContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNINSTALL(self):
            return self.getToken(mysqlParser.UNINSTALL, 0)

        def PLUGIN(self):
            return self.getToken(mysqlParser.PLUGIN, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_uninstallPlugin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUninstallPlugin" ):
                listener.enterUninstallPlugin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUninstallPlugin" ):
                listener.exitUninstallPlugin(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUninstallPlugin" ):
                return visitor.visitUninstallPlugin(self)
            else:
                return visitor.visitChildren(self)




    def uninstallPlugin(self):

        localctx = mysqlParser.UninstallPluginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_uninstallPlugin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4563
            self.match(mysqlParser.UNINSTALL)
            self.state = 4564
            self.match(mysqlParser.PLUGIN)
            self.state = 4565
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_setStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SetTransactionContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def setTransactionStatement(self):
            return self.getTypedRuleContext(mysqlParser.SetTransactionStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTransaction" ):
                listener.enterSetTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTransaction" ):
                listener.exitSetTransaction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetTransaction" ):
                return visitor.visitSetTransaction(self)
            else:
                return visitor.visitChildren(self)


    class SetCharsetContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.SET)
            else:
                return self.getToken(mysqlParser.SET, i)
        def CHARACTER(self):
            return self.getToken(mysqlParser.CHARACTER, 0)
        def CHARSET(self):
            return self.getToken(mysqlParser.CHARSET, 0)
        def charsetName(self):
            return self.getTypedRuleContext(mysqlParser.CharsetNameContext,0)

        def DEFAULT(self):
            return self.getToken(mysqlParser.DEFAULT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetCharset" ):
                listener.enterSetCharset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetCharset" ):
                listener.exitSetCharset(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetCharset" ):
                return visitor.visitSetCharset(self)
            else:
                return visitor.visitChildren(self)


    class SetNamesContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(mysqlParser.SET, 0)
        def NAMES(self):
            return self.getToken(mysqlParser.NAMES, 0)
        def charsetName(self):
            return self.getTypedRuleContext(mysqlParser.CharsetNameContext,0)

        def DEFAULT(self):
            return self.getToken(mysqlParser.DEFAULT, 0)
        def COLLATE(self):
            return self.getToken(mysqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(mysqlParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetNames" ):
                listener.enterSetNames(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetNames" ):
                listener.exitSetNames(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetNames" ):
                return visitor.visitSetNames(self)
            else:
                return visitor.visitChildren(self)


    class SetPasswordContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def setPasswordStatement(self):
            return self.getTypedRuleContext(mysqlParser.SetPasswordStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetPassword" ):
                listener.enterSetPassword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetPassword" ):
                listener.exitSetPassword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetPassword" ):
                return visitor.visitSetPassword(self)
            else:
                return visitor.visitChildren(self)


    class SetAutocommitContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def setAutocommitStatement(self):
            return self.getTypedRuleContext(mysqlParser.SetAutocommitStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetAutocommit" ):
                listener.enterSetAutocommit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetAutocommit" ):
                listener.exitSetAutocommit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetAutocommit" ):
                return visitor.visitSetAutocommit(self)
            else:
                return visitor.visitChildren(self)


    class SetVariableContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(mysqlParser.SET, 0)
        def variableClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.VariableClauseContext)
            else:
                return self.getTypedRuleContext(mysqlParser.VariableClauseContext,i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetVariable" ):
                listener.enterSetVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetVariable" ):
                listener.exitSetVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetVariable" ):
                return visitor.visitSetVariable(self)
            else:
                return visitor.visitChildren(self)



    def setStatement(self):

        localctx = mysqlParser.SetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_setStatement)
        self._la = 0 # Token type
        try:
            self.state = 4604
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,660,self._ctx)
            if la_ == 1:
                localctx = mysqlParser.SetVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4567
                self.match(mysqlParser.SET)
                self.state = 4568
                self.variableClause()
                self.state = 4569
                self.match(mysqlParser.EQUAL_SYMBOL)
                self.state = 4570
                self.expression(0)
                self.state = 4578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.COMMA:
                    self.state = 4571
                    self.match(mysqlParser.COMMA)
                    self.state = 4572
                    self.variableClause()
                    self.state = 4573
                    self.match(mysqlParser.EQUAL_SYMBOL)
                    self.state = 4574
                    self.expression(0)
                    self.state = 4580
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = mysqlParser.SetCharsetContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4581
                self.match(mysqlParser.SET)
                self.state = 4585
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [mysqlParser.CHARACTER]:
                    self.state = 4582
                    self.match(mysqlParser.CHARACTER)
                    self.state = 4583
                    self.match(mysqlParser.SET)
                    pass
                elif token in [mysqlParser.CHARSET]:
                    self.state = 4584
                    self.match(mysqlParser.CHARSET)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4589
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [mysqlParser.BINARY, mysqlParser.ARMSCII8, mysqlParser.ASCII, mysqlParser.BIG5, mysqlParser.CP1250, mysqlParser.CP1251, mysqlParser.CP1256, mysqlParser.CP1257, mysqlParser.CP850, mysqlParser.CP852, mysqlParser.CP866, mysqlParser.CP932, mysqlParser.DEC8, mysqlParser.EUCJPMS, mysqlParser.EUCKR, mysqlParser.GB2312, mysqlParser.GBK, mysqlParser.GEOSTD8, mysqlParser.GREEK, mysqlParser.HEBREW, mysqlParser.HP8, mysqlParser.KEYBCS2, mysqlParser.KOI8R, mysqlParser.KOI8U, mysqlParser.LATIN1, mysqlParser.LATIN2, mysqlParser.LATIN5, mysqlParser.LATIN7, mysqlParser.MACCE, mysqlParser.MACROMAN, mysqlParser.SJIS, mysqlParser.SWE7, mysqlParser.TIS620, mysqlParser.UCS2, mysqlParser.UJIS, mysqlParser.UTF16, mysqlParser.UTF16LE, mysqlParser.UTF32, mysqlParser.UTF8, mysqlParser.UTF8MB3, mysqlParser.UTF8MB4, mysqlParser.CHARSET_REVERSE_QOUTE_STRING, mysqlParser.STRING_LITERAL]:
                    self.state = 4587
                    self.charsetName()
                    pass
                elif token in [mysqlParser.DEFAULT]:
                    self.state = 4588
                    self.match(mysqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                localctx = mysqlParser.SetNamesContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4591
                self.match(mysqlParser.SET)
                self.state = 4592
                self.match(mysqlParser.NAMES)
                self.state = 4599
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [mysqlParser.BINARY, mysqlParser.ARMSCII8, mysqlParser.ASCII, mysqlParser.BIG5, mysqlParser.CP1250, mysqlParser.CP1251, mysqlParser.CP1256, mysqlParser.CP1257, mysqlParser.CP850, mysqlParser.CP852, mysqlParser.CP866, mysqlParser.CP932, mysqlParser.DEC8, mysqlParser.EUCJPMS, mysqlParser.EUCKR, mysqlParser.GB2312, mysqlParser.GBK, mysqlParser.GEOSTD8, mysqlParser.GREEK, mysqlParser.HEBREW, mysqlParser.HP8, mysqlParser.KEYBCS2, mysqlParser.KOI8R, mysqlParser.KOI8U, mysqlParser.LATIN1, mysqlParser.LATIN2, mysqlParser.LATIN5, mysqlParser.LATIN7, mysqlParser.MACCE, mysqlParser.MACROMAN, mysqlParser.SJIS, mysqlParser.SWE7, mysqlParser.TIS620, mysqlParser.UCS2, mysqlParser.UJIS, mysqlParser.UTF16, mysqlParser.UTF16LE, mysqlParser.UTF32, mysqlParser.UTF8, mysqlParser.UTF8MB3, mysqlParser.UTF8MB4, mysqlParser.CHARSET_REVERSE_QOUTE_STRING, mysqlParser.STRING_LITERAL]:
                    self.state = 4593
                    self.charsetName()
                    self.state = 4596
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==mysqlParser.COLLATE:
                        self.state = 4594
                        self.match(mysqlParser.COLLATE)
                        self.state = 4595
                        self.collationName()


                    pass
                elif token in [mysqlParser.DEFAULT]:
                    self.state = 4598
                    self.match(mysqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                localctx = mysqlParser.SetPasswordContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4601
                self.setPasswordStatement()
                pass

            elif la_ == 5:
                localctx = mysqlParser.SetTransactionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 4602
                self.setTransactionStatement()
                pass

            elif la_ == 6:
                localctx = mysqlParser.SetAutocommitContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 4603
                self.setAutocommitStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShowStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_showStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ShowOpenTablesContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ShowStatementContext
            super().__init__(parser)
            self.schemaFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(mysqlParser.SHOW, 0)
        def OPEN(self):
            return self.getToken(mysqlParser.OPEN, 0)
        def TABLES(self):
            return self.getToken(mysqlParser.TABLES, 0)
        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)

        def showFilter(self):
            return self.getTypedRuleContext(mysqlParser.ShowFilterContext,0)

        def FROM(self):
            return self.getToken(mysqlParser.FROM, 0)
        def IN(self):
            return self.getToken(mysqlParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowOpenTables" ):
                listener.enterShowOpenTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowOpenTables" ):
                listener.exitShowOpenTables(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowOpenTables" ):
                return visitor.visitShowOpenTables(self)
            else:
                return visitor.visitChildren(self)


    class ShowGlobalInfoContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ShowStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(mysqlParser.SHOW, 0)
        def showGlobalInfoClause(self):
            return self.getTypedRuleContext(mysqlParser.ShowGlobalInfoClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowGlobalInfo" ):
                listener.enterShowGlobalInfo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowGlobalInfo" ):
                listener.exitShowGlobalInfo(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowGlobalInfo" ):
                return visitor.visitShowGlobalInfo(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateFullIdObjectContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ShowStatementContext
            super().__init__(parser)
            self.namedEntity = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(mysqlParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(mysqlParser.CREATE, 0)
        def fullId(self):
            return self.getTypedRuleContext(mysqlParser.FullIdContext,0)

        def EVENT(self):
            return self.getToken(mysqlParser.EVENT, 0)
        def FUNCTION(self):
            return self.getToken(mysqlParser.FUNCTION, 0)
        def PROCEDURE(self):
            return self.getToken(mysqlParser.PROCEDURE, 0)
        def TABLE(self):
            return self.getToken(mysqlParser.TABLE, 0)
        def TRIGGER(self):
            return self.getToken(mysqlParser.TRIGGER, 0)
        def VIEW(self):
            return self.getToken(mysqlParser.VIEW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateFullIdObject" ):
                listener.enterShowCreateFullIdObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateFullIdObject" ):
                listener.exitShowCreateFullIdObject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateFullIdObject" ):
                return visitor.visitShowCreateFullIdObject(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateUserContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ShowStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(mysqlParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(mysqlParser.CREATE, 0)
        def USER(self):
            return self.getToken(mysqlParser.USER, 0)
        def userName(self):
            return self.getTypedRuleContext(mysqlParser.UserNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateUser" ):
                listener.enterShowCreateUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateUser" ):
                listener.exitShowCreateUser(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateUser" ):
                return visitor.visitShowCreateUser(self)
            else:
                return visitor.visitChildren(self)


    class ShowErrorsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ShowStatementContext
            super().__init__(parser)
            self.errorFormat = None # Token
            self.offset = None # DecimalLiteralContext
            self.rowCount = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(mysqlParser.SHOW, 0)
        def ERRORS(self):
            return self.getToken(mysqlParser.ERRORS, 0)
        def WARNINGS(self):
            return self.getToken(mysqlParser.WARNINGS, 0)
        def LIMIT(self):
            return self.getToken(mysqlParser.LIMIT, 0)
        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowErrors" ):
                listener.enterShowErrors(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowErrors" ):
                listener.exitShowErrors(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowErrors" ):
                return visitor.visitShowErrors(self)
            else:
                return visitor.visitChildren(self)


    class ShowCountErrorsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ShowStatementContext
            super().__init__(parser)
            self.errorFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(mysqlParser.SHOW, 0)
        def COUNT(self):
            return self.getToken(mysqlParser.COUNT, 0)
        def ERRORS(self):
            return self.getToken(mysqlParser.ERRORS, 0)
        def WARNINGS(self):
            return self.getToken(mysqlParser.WARNINGS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCountErrors" ):
                listener.enterShowCountErrors(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCountErrors" ):
                listener.exitShowCountErrors(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCountErrors" ):
                return visitor.visitShowCountErrors(self)
            else:
                return visitor.visitChildren(self)


    class ShowObjectFilterContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ShowStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(mysqlParser.SHOW, 0)
        def showCommonEntity(self):
            return self.getTypedRuleContext(mysqlParser.ShowCommonEntityContext,0)

        def showFilter(self):
            return self.getTypedRuleContext(mysqlParser.ShowFilterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowObjectFilter" ):
                listener.enterShowObjectFilter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowObjectFilter" ):
                listener.exitShowObjectFilter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowObjectFilter" ):
                return visitor.visitShowObjectFilter(self)
            else:
                return visitor.visitChildren(self)


    class ShowCreateDbContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ShowStatementContext
            super().__init__(parser)
            self.schemaFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(mysqlParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(mysqlParser.CREATE, 0)
        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)

        def DATABASE(self):
            return self.getToken(mysqlParser.DATABASE, 0)
        def SCHEMA(self):
            return self.getToken(mysqlParser.SCHEMA, 0)
        def ifNotExists(self):
            return self.getTypedRuleContext(mysqlParser.IfNotExistsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateDb" ):
                listener.enterShowCreateDb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateDb" ):
                listener.exitShowCreateDb(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCreateDb" ):
                return visitor.visitShowCreateDb(self)
            else:
                return visitor.visitChildren(self)


    class ShowEngineContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ShowStatementContext
            super().__init__(parser)
            self.engineOption = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(mysqlParser.SHOW, 0)
        def ENGINE(self):
            return self.getToken(mysqlParser.ENGINE, 0)
        def engineName(self):
            return self.getTypedRuleContext(mysqlParser.EngineNameContext,0)

        def STATUS(self):
            return self.getToken(mysqlParser.STATUS, 0)
        def MUTEX(self):
            return self.getToken(mysqlParser.MUTEX, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowEngine" ):
                listener.enterShowEngine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowEngine" ):
                listener.exitShowEngine(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowEngine" ):
                return visitor.visitShowEngine(self)
            else:
                return visitor.visitChildren(self)


    class ShowSchemaFilterContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ShowStatementContext
            super().__init__(parser)
            self.schemaFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(mysqlParser.SHOW, 0)
        def showSchemaEntity(self):
            return self.getTypedRuleContext(mysqlParser.ShowSchemaEntityContext,0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)

        def showFilter(self):
            return self.getTypedRuleContext(mysqlParser.ShowFilterContext,0)

        def FROM(self):
            return self.getToken(mysqlParser.FROM, 0)
        def IN(self):
            return self.getToken(mysqlParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSchemaFilter" ):
                listener.enterShowSchemaFilter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSchemaFilter" ):
                listener.exitShowSchemaFilter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowSchemaFilter" ):
                return visitor.visitShowSchemaFilter(self)
            else:
                return visitor.visitChildren(self)


    class ShowIndexesContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ShowStatementContext
            super().__init__(parser)
            self.indexFormat = None # Token
            self.tableFormat = None # Token
            self.schemaFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(mysqlParser.SHOW, 0)
        def tableName(self):
            return self.getTypedRuleContext(mysqlParser.TableNameContext,0)

        def INDEX(self):
            return self.getToken(mysqlParser.INDEX, 0)
        def INDEXES(self):
            return self.getToken(mysqlParser.INDEXES, 0)
        def KEYS(self):
            return self.getToken(mysqlParser.KEYS, 0)
        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.FROM)
            else:
                return self.getToken(mysqlParser.FROM, i)
        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.IN)
            else:
                return self.getToken(mysqlParser.IN, i)
        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)

        def WHERE(self):
            return self.getToken(mysqlParser.WHERE, 0)
        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowIndexes" ):
                listener.enterShowIndexes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowIndexes" ):
                listener.exitShowIndexes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowIndexes" ):
                return visitor.visitShowIndexes(self)
            else:
                return visitor.visitChildren(self)


    class ShowLogEventsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ShowStatementContext
            super().__init__(parser)
            self.logFormat = None # Token
            self.filename = None # Token
            self.fromPosition = None # DecimalLiteralContext
            self.offset = None # DecimalLiteralContext
            self.rowCount = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(mysqlParser.SHOW, 0)
        def EVENTS(self):
            return self.getToken(mysqlParser.EVENTS, 0)
        def BINLOG(self):
            return self.getToken(mysqlParser.BINLOG, 0)
        def RELAYLOG(self):
            return self.getToken(mysqlParser.RELAYLOG, 0)
        def IN(self):
            return self.getToken(mysqlParser.IN, 0)
        def FROM(self):
            return self.getToken(mysqlParser.FROM, 0)
        def LIMIT(self):
            return self.getToken(mysqlParser.LIMIT, 0)
        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)
        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowLogEvents" ):
                listener.enterShowLogEvents(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowLogEvents" ):
                listener.exitShowLogEvents(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowLogEvents" ):
                return visitor.visitShowLogEvents(self)
            else:
                return visitor.visitChildren(self)


    class ShowMasterLogsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ShowStatementContext
            super().__init__(parser)
            self.logFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(mysqlParser.SHOW, 0)
        def LOGS(self):
            return self.getToken(mysqlParser.LOGS, 0)
        def BINARY(self):
            return self.getToken(mysqlParser.BINARY, 0)
        def MASTER(self):
            return self.getToken(mysqlParser.MASTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowMasterLogs" ):
                listener.enterShowMasterLogs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowMasterLogs" ):
                listener.exitShowMasterLogs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowMasterLogs" ):
                return visitor.visitShowMasterLogs(self)
            else:
                return visitor.visitChildren(self)


    class ShowGrantsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ShowStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(mysqlParser.SHOW, 0)
        def GRANTS(self):
            return self.getToken(mysqlParser.GRANTS, 0)
        def FOR(self):
            return self.getToken(mysqlParser.FOR, 0)
        def userName(self):
            return self.getTypedRuleContext(mysqlParser.UserNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowGrants" ):
                listener.enterShowGrants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowGrants" ):
                listener.exitShowGrants(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowGrants" ):
                return visitor.visitShowGrants(self)
            else:
                return visitor.visitChildren(self)


    class ShowSlaveStatusContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ShowStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(mysqlParser.SHOW, 0)
        def SLAVE(self):
            return self.getToken(mysqlParser.SLAVE, 0)
        def STATUS(self):
            return self.getToken(mysqlParser.STATUS, 0)
        def FOR(self):
            return self.getToken(mysqlParser.FOR, 0)
        def CHANNEL(self):
            return self.getToken(mysqlParser.CHANNEL, 0)
        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSlaveStatus" ):
                listener.enterShowSlaveStatus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSlaveStatus" ):
                listener.exitShowSlaveStatus(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowSlaveStatus" ):
                return visitor.visitShowSlaveStatus(self)
            else:
                return visitor.visitChildren(self)


    class ShowRoutineContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ShowStatementContext
            super().__init__(parser)
            self.routine = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(mysqlParser.SHOW, 0)
        def CODE(self):
            return self.getToken(mysqlParser.CODE, 0)
        def fullId(self):
            return self.getTypedRuleContext(mysqlParser.FullIdContext,0)

        def FUNCTION(self):
            return self.getToken(mysqlParser.FUNCTION, 0)
        def PROCEDURE(self):
            return self.getToken(mysqlParser.PROCEDURE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRoutine" ):
                listener.enterShowRoutine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRoutine" ):
                listener.exitShowRoutine(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowRoutine" ):
                return visitor.visitShowRoutine(self)
            else:
                return visitor.visitChildren(self)


    class ShowProfileContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ShowStatementContext
            super().__init__(parser)
            self.offset = None # DecimalLiteralContext
            self.rowCount = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(mysqlParser.SHOW, 0)
        def PROFILE(self):
            return self.getToken(mysqlParser.PROFILE, 0)
        def showProfileType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.ShowProfileTypeContext)
            else:
                return self.getTypedRuleContext(mysqlParser.ShowProfileTypeContext,i)

        def LIMIT(self):
            return self.getToken(mysqlParser.LIMIT, 0)
        def FOR(self):
            return self.getToken(mysqlParser.FOR, 0)
        def QUERY(self):
            return self.getToken(mysqlParser.QUERY, 0)
        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowProfile" ):
                listener.enterShowProfile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowProfile" ):
                listener.exitShowProfile(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowProfile" ):
                return visitor.visitShowProfile(self)
            else:
                return visitor.visitChildren(self)


    class ShowColumnsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ShowStatementContext
            super().__init__(parser)
            self.columnsFormat = None # Token
            self.tableFormat = None # Token
            self.schemaFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(mysqlParser.SHOW, 0)
        def tableName(self):
            return self.getTypedRuleContext(mysqlParser.TableNameContext,0)

        def COLUMNS(self):
            return self.getToken(mysqlParser.COLUMNS, 0)
        def FIELDS(self):
            return self.getToken(mysqlParser.FIELDS, 0)
        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.FROM)
            else:
                return self.getToken(mysqlParser.FROM, i)
        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.IN)
            else:
                return self.getToken(mysqlParser.IN, i)
        def FULL(self):
            return self.getToken(mysqlParser.FULL, 0)
        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)

        def showFilter(self):
            return self.getTypedRuleContext(mysqlParser.ShowFilterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowColumns" ):
                listener.enterShowColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowColumns" ):
                listener.exitShowColumns(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowColumns" ):
                return visitor.visitShowColumns(self)
            else:
                return visitor.visitChildren(self)



    def showStatement(self):

        localctx = mysqlParser.ShowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_showStatement)
        self._la = 0 # Token type
        try:
            self.state = 4757
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,682,self._ctx)
            if la_ == 1:
                localctx = mysqlParser.ShowMasterLogsContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4606
                self.match(mysqlParser.SHOW)
                self.state = 4607
                localctx.logFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.BINARY or _la==mysqlParser.MASTER):
                    localctx.logFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4608
                self.match(mysqlParser.LOGS)
                pass

            elif la_ == 2:
                localctx = mysqlParser.ShowLogEventsContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4609
                self.match(mysqlParser.SHOW)
                self.state = 4610
                localctx.logFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.BINLOG or _la==mysqlParser.RELAYLOG):
                    localctx.logFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4611
                self.match(mysqlParser.EVENTS)
                self.state = 4614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.IN:
                    self.state = 4612
                    self.match(mysqlParser.IN)
                    self.state = 4613
                    localctx.filename = self.match(mysqlParser.STRING_LITERAL)


                self.state = 4618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.FROM:
                    self.state = 4616
                    self.match(mysqlParser.FROM)
                    self.state = 4617
                    localctx.fromPosition = self.decimalLiteral()


                self.state = 4627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.LIMIT:
                    self.state = 4620
                    self.match(mysqlParser.LIMIT)
                    self.state = 4624
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,663,self._ctx)
                    if la_ == 1:
                        self.state = 4621
                        localctx.offset = self.decimalLiteral()
                        self.state = 4622
                        self.match(mysqlParser.COMMA)


                    self.state = 4626
                    localctx.rowCount = self.decimalLiteral()


                pass

            elif la_ == 3:
                localctx = mysqlParser.ShowObjectFilterContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4629
                self.match(mysqlParser.SHOW)
                self.state = 4630
                self.showCommonEntity()
                self.state = 4632
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.LIKE or _la==mysqlParser.WHERE:
                    self.state = 4631
                    self.showFilter()


                pass

            elif la_ == 4:
                localctx = mysqlParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4634
                self.match(mysqlParser.SHOW)
                self.state = 4636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.FULL:
                    self.state = 4635
                    self.match(mysqlParser.FULL)


                self.state = 4638
                localctx.columnsFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.COLUMNS or _la==mysqlParser.FIELDS):
                    localctx.columnsFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4639
                localctx.tableFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.FROM or _la==mysqlParser.IN):
                    localctx.tableFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4640
                self.tableName()
                self.state = 4643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.FROM or _la==mysqlParser.IN:
                    self.state = 4641
                    localctx.schemaFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==mysqlParser.FROM or _la==mysqlParser.IN):
                        localctx.schemaFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4642
                    self.uid()


                self.state = 4646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.LIKE or _la==mysqlParser.WHERE:
                    self.state = 4645
                    self.showFilter()


                pass

            elif la_ == 5:
                localctx = mysqlParser.ShowCreateDbContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 4648
                self.match(mysqlParser.SHOW)
                self.state = 4649
                self.match(mysqlParser.CREATE)
                self.state = 4650
                localctx.schemaFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.DATABASE or _la==mysqlParser.SCHEMA):
                    localctx.schemaFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.IF:
                    self.state = 4651
                    self.ifNotExists()


                self.state = 4654
                self.uid()
                pass

            elif la_ == 6:
                localctx = mysqlParser.ShowCreateFullIdObjectContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 4655
                self.match(mysqlParser.SHOW)
                self.state = 4656
                self.match(mysqlParser.CREATE)
                self.state = 4657
                localctx.namedEntity = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 111)) & ~0x3f) == 0 and ((1 << (_la - 111)) & ((1 << (mysqlParser.PROCEDURE - 111)) | (1 << (mysqlParser.TABLE - 111)) | (1 << (mysqlParser.TRIGGER - 111)))) != 0) or _la==mysqlParser.EVENT or _la==mysqlParser.FUNCTION or _la==mysqlParser.VIEW):
                    localctx.namedEntity = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4658
                self.fullId()
                pass

            elif la_ == 7:
                localctx = mysqlParser.ShowCreateUserContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 4659
                self.match(mysqlParser.SHOW)
                self.state = 4660
                self.match(mysqlParser.CREATE)
                self.state = 4661
                self.match(mysqlParser.USER)
                self.state = 4662
                self.userName()
                pass

            elif la_ == 8:
                localctx = mysqlParser.ShowEngineContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 4663
                self.match(mysqlParser.SHOW)
                self.state = 4664
                self.match(mysqlParser.ENGINE)
                self.state = 4665
                self.engineName()
                self.state = 4666
                localctx.engineOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.MUTEX or _la==mysqlParser.STATUS):
                    localctx.engineOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                localctx = mysqlParser.ShowGlobalInfoContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 4668
                self.match(mysqlParser.SHOW)
                self.state = 4669
                self.showGlobalInfoClause()
                pass

            elif la_ == 10:
                localctx = mysqlParser.ShowErrorsContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 4670
                self.match(mysqlParser.SHOW)
                self.state = 4671
                localctx.errorFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.ERRORS or _la==mysqlParser.WARNINGS):
                    localctx.errorFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

                self.state = 4672
                self.match(mysqlParser.LIMIT)
                self.state = 4676
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,670,self._ctx)
                if la_ == 1:
                    self.state = 4673
                    localctx.offset = self.decimalLiteral()
                    self.state = 4674
                    self.match(mysqlParser.COMMA)


                self.state = 4678
                localctx.rowCount = self.decimalLiteral()
                pass

            elif la_ == 11:
                localctx = mysqlParser.ShowCountErrorsContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 4679
                self.match(mysqlParser.SHOW)
                self.state = 4680
                self.match(mysqlParser.COUNT)
                self.state = 4681
                self.match(mysqlParser.LR_BRACKET)
                self.state = 4682
                self.match(mysqlParser.STAR)
                self.state = 4683
                self.match(mysqlParser.RR_BRACKET)
                self.state = 4684
                localctx.errorFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.ERRORS or _la==mysqlParser.WARNINGS):
                    localctx.errorFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 12:
                localctx = mysqlParser.ShowSchemaFilterContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 4685
                self.match(mysqlParser.SHOW)
                self.state = 4686
                self.showSchemaEntity()
                self.state = 4689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.FROM or _la==mysqlParser.IN:
                    self.state = 4687
                    localctx.schemaFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==mysqlParser.FROM or _la==mysqlParser.IN):
                        localctx.schemaFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4688
                    self.uid()


                self.state = 4692
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.LIKE or _la==mysqlParser.WHERE:
                    self.state = 4691
                    self.showFilter()


                pass

            elif la_ == 13:
                localctx = mysqlParser.ShowRoutineContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 4694
                self.match(mysqlParser.SHOW)
                self.state = 4695
                localctx.routine = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.PROCEDURE or _la==mysqlParser.FUNCTION):
                    localctx.routine = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4696
                self.match(mysqlParser.CODE)
                self.state = 4697
                self.fullId()
                pass

            elif la_ == 14:
                localctx = mysqlParser.ShowGrantsContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 4698
                self.match(mysqlParser.SHOW)
                self.state = 4699
                self.match(mysqlParser.GRANTS)
                self.state = 4702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.FOR:
                    self.state = 4700
                    self.match(mysqlParser.FOR)
                    self.state = 4701
                    self.userName()


                pass

            elif la_ == 15:
                localctx = mysqlParser.ShowIndexesContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 4704
                self.match(mysqlParser.SHOW)
                self.state = 4705
                localctx.indexFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.INDEX or _la==mysqlParser.KEYS or _la==mysqlParser.INDEXES):
                    localctx.indexFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4706
                localctx.tableFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.FROM or _la==mysqlParser.IN):
                    localctx.tableFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4707
                self.tableName()
                self.state = 4710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.FROM or _la==mysqlParser.IN:
                    self.state = 4708
                    localctx.schemaFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==mysqlParser.FROM or _la==mysqlParser.IN):
                        localctx.schemaFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4709
                    self.uid()


                self.state = 4714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.WHERE:
                    self.state = 4712
                    self.match(mysqlParser.WHERE)
                    self.state = 4713
                    self.expression(0)


                pass

            elif la_ == 16:
                localctx = mysqlParser.ShowOpenTablesContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 4716
                self.match(mysqlParser.SHOW)
                self.state = 4717
                self.match(mysqlParser.OPEN)
                self.state = 4718
                self.match(mysqlParser.TABLES)
                self.state = 4721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.FROM or _la==mysqlParser.IN:
                    self.state = 4719
                    localctx.schemaFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==mysqlParser.FROM or _la==mysqlParser.IN):
                        localctx.schemaFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4720
                    self.uid()


                self.state = 4724
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.LIKE or _la==mysqlParser.WHERE:
                    self.state = 4723
                    self.showFilter()


                pass

            elif la_ == 17:
                localctx = mysqlParser.ShowProfileContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 4726
                self.match(mysqlParser.SHOW)
                self.state = 4727
                self.match(mysqlParser.PROFILE)
                self.state = 4728
                self.showProfileType()
                self.state = 4733
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.COMMA:
                    self.state = 4729
                    self.match(mysqlParser.COMMA)
                    self.state = 4730
                    self.showProfileType()
                    self.state = 4735
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4739
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.FOR:
                    self.state = 4736
                    self.match(mysqlParser.FOR)
                    self.state = 4737
                    self.match(mysqlParser.QUERY)
                    self.state = 4738
                    self.decimalLiteral()


                self.state = 4741
                self.match(mysqlParser.LIMIT)
                self.state = 4745
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,680,self._ctx)
                if la_ == 1:
                    self.state = 4742
                    localctx.offset = self.decimalLiteral()
                    self.state = 4743
                    self.match(mysqlParser.COMMA)


                self.state = 4747
                localctx.rowCount = self.decimalLiteral()
                pass

            elif la_ == 18:
                localctx = mysqlParser.ShowSlaveStatusContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 4749
                self.match(mysqlParser.SHOW)
                self.state = 4750
                self.match(mysqlParser.SLAVE)
                self.state = 4751
                self.match(mysqlParser.STATUS)
                self.state = 4755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.FOR:
                    self.state = 4752
                    self.match(mysqlParser.FOR)
                    self.state = 4753
                    self.match(mysqlParser.CHANNEL)
                    self.state = 4754
                    self.match(mysqlParser.STRING_LITERAL)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class VariableClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(mysqlParser.LOCAL_ID, 0)

        def GLOBAL_ID(self):
            return self.getToken(mysqlParser.GLOBAL_ID, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def GLOBAL(self):
            return self.getToken(mysqlParser.GLOBAL, 0)

        def SESSION(self):
            return self.getToken(mysqlParser.SESSION, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_variableClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableClause" ):
                listener.enterVariableClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableClause" ):
                listener.exitVariableClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableClause" ):
                return visitor.visitVariableClause(self)
            else:
                return visitor.visitChildren(self)




    def variableClause(self):

        localctx = mysqlParser.VariableClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_variableClause)
        self._la = 0 # Token type
        try:
            self.state = 4769
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4759
                self.match(mysqlParser.LOCAL_ID)
                pass
            elif token in [mysqlParser.GLOBAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4760
                self.match(mysqlParser.GLOBAL_ID)
                pass
            elif token in [mysqlParser.LEFT, mysqlParser.RIGHT, mysqlParser.DATE, mysqlParser.TIME, mysqlParser.TIMESTAMP, mysqlParser.DATETIME, mysqlParser.YEAR, mysqlParser.TEXT, mysqlParser.ENUM, mysqlParser.COUNT, mysqlParser.POSITION, mysqlParser.ACCOUNT, mysqlParser.ACTION, mysqlParser.AFTER, mysqlParser.AGGREGATE, mysqlParser.ALGORITHM, mysqlParser.ANY, mysqlParser.AT, mysqlParser.AUTHORS, mysqlParser.AUTOCOMMIT, mysqlParser.AUTOEXTEND_SIZE, mysqlParser.AUTO_INCREMENT, mysqlParser.AVG_ROW_LENGTH, mysqlParser.BEGIN, mysqlParser.BINLOG, mysqlParser.BIT, mysqlParser.BLOCK, mysqlParser.BTREE, mysqlParser.CASCADED, mysqlParser.CHAIN, mysqlParser.CHANNEL, mysqlParser.CHECKSUM, mysqlParser.CIPHER, mysqlParser.CLIENT, mysqlParser.COALESCE, mysqlParser.CODE, mysqlParser.COLUMNS, mysqlParser.COLUMN_FORMAT, mysqlParser.COMMENT, mysqlParser.COMMIT, mysqlParser.COMPACT, mysqlParser.COMPLETION, mysqlParser.COMPRESSED, mysqlParser.COMPRESSION, mysqlParser.CONCURRENT, mysqlParser.CONNECTION, mysqlParser.CONSISTENT, mysqlParser.CONTAINS, mysqlParser.CONTEXT, mysqlParser.CONTRIBUTORS, mysqlParser.COPY, mysqlParser.CPU, mysqlParser.DATA, mysqlParser.DATAFILE, mysqlParser.DEALLOCATE, mysqlParser.DEFAULT_AUTH, mysqlParser.DEFINER, mysqlParser.DELAY_KEY_WRITE, mysqlParser.DIRECTORY, mysqlParser.DISABLE, mysqlParser.DISCARD, mysqlParser.DISK, mysqlParser.DO, mysqlParser.DUMPFILE, mysqlParser.DUPLICATE, mysqlParser.DYNAMIC, mysqlParser.ENABLE, mysqlParser.ENCRYPTION, mysqlParser.ENDS, mysqlParser.ENGINE, mysqlParser.ENGINES, mysqlParser.ERROR, mysqlParser.ERRORS, mysqlParser.ESCAPE, mysqlParser.EVEN, mysqlParser.EVENT, mysqlParser.EVENTS, mysqlParser.EVERY, mysqlParser.EXCHANGE, mysqlParser.EXCLUSIVE, mysqlParser.EXPIRE, mysqlParser.EXTENT_SIZE, mysqlParser.FAULTS, mysqlParser.FIELDS, mysqlParser.FILE_BLOCK_SIZE, mysqlParser.FILTER, mysqlParser.FIRST, mysqlParser.FIXED, mysqlParser.FOLLOWS, mysqlParser.FULL, mysqlParser.FUNCTION, mysqlParser.GLOBAL, mysqlParser.GRANTS, mysqlParser.GROUP_REPLICATION, mysqlParser.HASH, mysqlParser.HOST, mysqlParser.IDENTIFIED, mysqlParser.IGNORE_SERVER_IDS, mysqlParser.IMPORT, mysqlParser.INDEXES, mysqlParser.INITIAL_SIZE, mysqlParser.INPLACE, mysqlParser.INSERT_METHOD, mysqlParser.INSTANCE, mysqlParser.INVOKER, mysqlParser.IO, mysqlParser.IO_THREAD, mysqlParser.IPC, mysqlParser.ISOLATION, mysqlParser.ISSUER, mysqlParser.KEY_BLOCK_SIZE, mysqlParser.LANGUAGE, mysqlParser.LAST, mysqlParser.LEAVES, mysqlParser.LESS, mysqlParser.LEVEL, mysqlParser.LIST, mysqlParser.LOCAL, mysqlParser.LOGFILE, mysqlParser.LOGS, mysqlParser.MASTER, mysqlParser.MASTER_AUTO_POSITION, mysqlParser.MASTER_CONNECT_RETRY, mysqlParser.MASTER_DELAY, mysqlParser.MASTER_HEARTBEAT_PERIOD, mysqlParser.MASTER_HOST, mysqlParser.MASTER_LOG_FILE, mysqlParser.MASTER_LOG_POS, mysqlParser.MASTER_PASSWORD, mysqlParser.MASTER_PORT, mysqlParser.MASTER_RETRY_COUNT, mysqlParser.MASTER_SSL, mysqlParser.MASTER_SSL_CA, mysqlParser.MASTER_SSL_CAPATH, mysqlParser.MASTER_SSL_CERT, mysqlParser.MASTER_SSL_CIPHER, mysqlParser.MASTER_SSL_CRL, mysqlParser.MASTER_SSL_CRLPATH, mysqlParser.MASTER_SSL_KEY, mysqlParser.MASTER_TLS_VERSION, mysqlParser.MASTER_USER, mysqlParser.MAX_CONNECTIONS_PER_HOUR, mysqlParser.MAX_QUERIES_PER_HOUR, mysqlParser.MAX_ROWS, mysqlParser.MAX_SIZE, mysqlParser.MAX_UPDATES_PER_HOUR, mysqlParser.MAX_USER_CONNECTIONS, mysqlParser.MERGE, mysqlParser.MID, mysqlParser.MIGRATE, mysqlParser.MIN_ROWS, mysqlParser.MODIFY, mysqlParser.MUTEX, mysqlParser.MYSQL, mysqlParser.NAME, mysqlParser.NAMES, mysqlParser.NCHAR, mysqlParser.NEVER, mysqlParser.NO, mysqlParser.NODEGROUP, mysqlParser.NONE, mysqlParser.OFFLINE, mysqlParser.OFFSET, mysqlParser.OJ, mysqlParser.OLD_PASSWORD, mysqlParser.ONE, mysqlParser.ONLINE, mysqlParser.ONLY, mysqlParser.OPTIMIZER_COSTS, mysqlParser.OPTIONS, mysqlParser.OWNER, mysqlParser.PACK_KEYS, mysqlParser.PAGE, mysqlParser.PARSER, mysqlParser.PARTIAL, mysqlParser.PARTITIONING, mysqlParser.PARTITIONS, mysqlParser.PASSWORD, mysqlParser.PHASE, mysqlParser.PLUGIN_DIR, mysqlParser.PLUGINS, mysqlParser.PORT, mysqlParser.PRECEDES, mysqlParser.PREPARE, mysqlParser.PRESERVE, mysqlParser.PREV, mysqlParser.PROCESSLIST, mysqlParser.PROFILE, mysqlParser.PROFILES, mysqlParser.PROXY, mysqlParser.QUERY, mysqlParser.QUICK, mysqlParser.REBUILD, mysqlParser.RECOVER, mysqlParser.REDO_BUFFER_SIZE, mysqlParser.REDUNDANT, mysqlParser.RELAY_LOG_FILE, mysqlParser.RELAY_LOG_POS, mysqlParser.RELAYLOG, mysqlParser.REMOVE, mysqlParser.REORGANIZE, mysqlParser.REPAIR, mysqlParser.REPLICATE_DO_DB, mysqlParser.REPLICATE_DO_TABLE, mysqlParser.REPLICATE_IGNORE_DB, mysqlParser.REPLICATE_IGNORE_TABLE, mysqlParser.REPLICATE_REWRITE_DB, mysqlParser.REPLICATE_WILD_DO_TABLE, mysqlParser.REPLICATE_WILD_IGNORE_TABLE, mysqlParser.REPLICATION, mysqlParser.RESUME, mysqlParser.RETURNS, mysqlParser.ROLLBACK, mysqlParser.ROLLUP, mysqlParser.ROTATE, mysqlParser.ROW, mysqlParser.ROWS, mysqlParser.ROW_FORMAT, mysqlParser.SAVEPOINT, mysqlParser.SCHEDULE, mysqlParser.SECURITY, mysqlParser.SERVER, mysqlParser.SESSION, mysqlParser.SHARE, mysqlParser.SHARED, mysqlParser.SIGNED, mysqlParser.SIMPLE, mysqlParser.SLAVE, mysqlParser.SNAPSHOT, mysqlParser.SOCKET, mysqlParser.SOME, mysqlParser.SOUNDS, mysqlParser.SOURCE, mysqlParser.SQL_AFTER_GTIDS, mysqlParser.SQL_AFTER_MTS_GAPS, mysqlParser.SQL_BEFORE_GTIDS, mysqlParser.SQL_BUFFER_RESULT, mysqlParser.SQL_CACHE, mysqlParser.SQL_NO_CACHE, mysqlParser.SQL_THREAD, mysqlParser.START, mysqlParser.STARTS, mysqlParser.STATS_AUTO_RECALC, mysqlParser.STATS_PERSISTENT, mysqlParser.STATS_SAMPLE_PAGES, mysqlParser.STATUS, mysqlParser.STOP, mysqlParser.STORAGE, mysqlParser.STRING, mysqlParser.SUBJECT, mysqlParser.SUBPARTITION, mysqlParser.SUBPARTITIONS, mysqlParser.SUSPEND, mysqlParser.SWAPS, mysqlParser.SWITCHES, mysqlParser.TABLESPACE, mysqlParser.TEMPORARY, mysqlParser.TEMPTABLE, mysqlParser.THAN, mysqlParser.TRANSACTION, mysqlParser.TRUNCATE, mysqlParser.UNDEFINED, mysqlParser.UNDOFILE, mysqlParser.UNDO_BUFFER_SIZE, mysqlParser.UNKNOWN, mysqlParser.UPGRADE, mysqlParser.USER, mysqlParser.VALIDATION, mysqlParser.VALUE, mysqlParser.VARIABLES, mysqlParser.VIEW, mysqlParser.WAIT, mysqlParser.WARNINGS, mysqlParser.WITHOUT, mysqlParser.WORK, mysqlParser.WRAPPER, mysqlParser.X509, mysqlParser.XA, mysqlParser.XML, mysqlParser.QUARTER, mysqlParser.MONTH, mysqlParser.DAY, mysqlParser.HOUR, mysqlParser.MINUTE, mysqlParser.WEEK, mysqlParser.SECOND, mysqlParser.MICROSECOND, mysqlParser.TABLES, mysqlParser.ROUTINE, mysqlParser.EXECUTE, mysqlParser.FILE, mysqlParser.PROCESS, mysqlParser.RELOAD, mysqlParser.SHUTDOWN, mysqlParser.SUPER, mysqlParser.PRIVILEGES, mysqlParser.ARMSCII8, mysqlParser.ASCII, mysqlParser.BIG5, mysqlParser.CP1250, mysqlParser.CP1251, mysqlParser.CP1256, mysqlParser.CP1257, mysqlParser.CP850, mysqlParser.CP852, mysqlParser.CP866, mysqlParser.CP932, mysqlParser.DEC8, mysqlParser.EUCJPMS, mysqlParser.EUCKR, mysqlParser.GB2312, mysqlParser.GBK, mysqlParser.GEOSTD8, mysqlParser.GREEK, mysqlParser.HEBREW, mysqlParser.HP8, mysqlParser.KEYBCS2, mysqlParser.KOI8R, mysqlParser.KOI8U, mysqlParser.LATIN1, mysqlParser.LATIN2, mysqlParser.LATIN5, mysqlParser.LATIN7, mysqlParser.MACCE, mysqlParser.MACROMAN, mysqlParser.SJIS, mysqlParser.SWE7, mysqlParser.TIS620, mysqlParser.UCS2, mysqlParser.UJIS, mysqlParser.UTF16, mysqlParser.UTF16LE, mysqlParser.UTF32, mysqlParser.UTF8, mysqlParser.UTF8MB3, mysqlParser.UTF8MB4, mysqlParser.ARCHIVE, mysqlParser.BLACKHOLE, mysqlParser.CSV, mysqlParser.FEDERATED, mysqlParser.INNODB, mysqlParser.MEMORY, mysqlParser.MRG_MYISAM, mysqlParser.MYISAM, mysqlParser.NDB, mysqlParser.NDBCLUSTER, mysqlParser.PERFOMANCE_SCHEMA, mysqlParser.REPEATABLE, mysqlParser.COMMITTED, mysqlParser.UNCOMMITTED, mysqlParser.SERIALIZABLE, mysqlParser.GEOMETRYCOLLECTION, mysqlParser.LINESTRING, mysqlParser.MULTILINESTRING, mysqlParser.MULTIPOINT, mysqlParser.MULTIPOLYGON, mysqlParser.POINT, mysqlParser.POLYGON, mysqlParser.ABS, mysqlParser.ACOS, mysqlParser.ADDDATE, mysqlParser.ADDTIME, mysqlParser.AES_DECRYPT, mysqlParser.AES_ENCRYPT, mysqlParser.AREA, mysqlParser.ASBINARY, mysqlParser.ASIN, mysqlParser.ASTEXT, mysqlParser.ASWKB, mysqlParser.ASWKT, mysqlParser.ASYMMETRIC_DECRYPT, mysqlParser.ASYMMETRIC_DERIVE, mysqlParser.ASYMMETRIC_ENCRYPT, mysqlParser.ASYMMETRIC_SIGN, mysqlParser.ASYMMETRIC_VERIFY, mysqlParser.ATAN, mysqlParser.ATAN2, mysqlParser.BENCHMARK, mysqlParser.BIN, mysqlParser.BIT_COUNT, mysqlParser.BIT_LENGTH, mysqlParser.BUFFER, mysqlParser.CEIL, mysqlParser.CEILING, mysqlParser.CENTROID, mysqlParser.CHARACTER_LENGTH, mysqlParser.CHARSET, mysqlParser.CHAR_LENGTH, mysqlParser.COERCIBILITY, mysqlParser.COLLATION, mysqlParser.COMPRESS, mysqlParser.CONCAT, mysqlParser.CONCAT_WS, mysqlParser.CONNECTION_ID, mysqlParser.CONV, mysqlParser.CONVERT_TZ, mysqlParser.COS, mysqlParser.COT, mysqlParser.CRC32, mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY, mysqlParser.CREATE_ASYMMETRIC_PUB_KEY, mysqlParser.CREATE_DH_PARAMETERS, mysqlParser.CREATE_DIGEST, mysqlParser.CROSSES, mysqlParser.DATEDIFF, mysqlParser.DATE_FORMAT, mysqlParser.DAYNAME, mysqlParser.DAYOFMONTH, mysqlParser.DAYOFWEEK, mysqlParser.DAYOFYEAR, mysqlParser.DECODE, mysqlParser.DEGREES, mysqlParser.DES_DECRYPT, mysqlParser.DES_ENCRYPT, mysqlParser.DIMENSION, mysqlParser.DISJOINT, mysqlParser.ELT, mysqlParser.ENCODE, mysqlParser.ENCRYPT, mysqlParser.ENDPOINT, mysqlParser.ENVELOPE, mysqlParser.EQUALS, mysqlParser.EXP, mysqlParser.EXPORT_SET, mysqlParser.EXTERIORRING, mysqlParser.EXTRACTVALUE, mysqlParser.FIELD, mysqlParser.FIND_IN_SET, mysqlParser.FLOOR, mysqlParser.FORMAT, mysqlParser.FOUND_ROWS, mysqlParser.FROM_BASE64, mysqlParser.FROM_DAYS, mysqlParser.FROM_UNIXTIME, mysqlParser.GEOMCOLLFROMTEXT, mysqlParser.GEOMCOLLFROMWKB, mysqlParser.GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.GEOMETRYCOLLECTIONFROMWKB, mysqlParser.GEOMETRYFROMTEXT, mysqlParser.GEOMETRYFROMWKB, mysqlParser.GEOMETRYN, mysqlParser.GEOMETRYTYPE, mysqlParser.GEOMFROMTEXT, mysqlParser.GEOMFROMWKB, mysqlParser.GET_FORMAT, mysqlParser.GET_LOCK, mysqlParser.GLENGTH, mysqlParser.GREATEST, mysqlParser.GTID_SUBSET, mysqlParser.GTID_SUBTRACT, mysqlParser.HEX, mysqlParser.IFNULL, mysqlParser.INET6_ATON, mysqlParser.INET6_NTOA, mysqlParser.INET_ATON, mysqlParser.INET_NTOA, mysqlParser.INSTR, mysqlParser.INTERIORRINGN, mysqlParser.INTERSECTS, mysqlParser.ISCLOSED, mysqlParser.ISEMPTY, mysqlParser.ISNULL, mysqlParser.ISSIMPLE, mysqlParser.IS_FREE_LOCK, mysqlParser.IS_IPV4, mysqlParser.IS_IPV4_COMPAT, mysqlParser.IS_IPV4_MAPPED, mysqlParser.IS_IPV6, mysqlParser.IS_USED_LOCK, mysqlParser.LAST_INSERT_ID, mysqlParser.LCASE, mysqlParser.LEAST, mysqlParser.LENGTH, mysqlParser.LINEFROMTEXT, mysqlParser.LINEFROMWKB, mysqlParser.LINESTRINGFROMTEXT, mysqlParser.LINESTRINGFROMWKB, mysqlParser.LN, mysqlParser.LOAD_FILE, mysqlParser.LOCATE, mysqlParser.LOG, mysqlParser.LOG10, mysqlParser.LOG2, mysqlParser.LOWER, mysqlParser.LPAD, mysqlParser.LTRIM, mysqlParser.MAKEDATE, mysqlParser.MAKETIME, mysqlParser.MAKE_SET, mysqlParser.MASTER_POS_WAIT, mysqlParser.MBRCONTAINS, mysqlParser.MBRDISJOINT, mysqlParser.MBREQUAL, mysqlParser.MBRINTERSECTS, mysqlParser.MBROVERLAPS, mysqlParser.MBRTOUCHES, mysqlParser.MBRWITHIN, mysqlParser.MD5, mysqlParser.MLINEFROMTEXT, mysqlParser.MLINEFROMWKB, mysqlParser.MONTHNAME, mysqlParser.MPOINTFROMTEXT, mysqlParser.MPOINTFROMWKB, mysqlParser.MPOLYFROMTEXT, mysqlParser.MPOLYFROMWKB, mysqlParser.MULTILINESTRINGFROMTEXT, mysqlParser.MULTILINESTRINGFROMWKB, mysqlParser.MULTIPOINTFROMTEXT, mysqlParser.MULTIPOINTFROMWKB, mysqlParser.MULTIPOLYGONFROMTEXT, mysqlParser.MULTIPOLYGONFROMWKB, mysqlParser.NAME_CONST, mysqlParser.NULLIF, mysqlParser.NUMGEOMETRIES, mysqlParser.NUMINTERIORRINGS, mysqlParser.NUMPOINTS, mysqlParser.OCT, mysqlParser.OCTET_LENGTH, mysqlParser.ORD, mysqlParser.OVERLAPS, mysqlParser.PERIOD_ADD, mysqlParser.PERIOD_DIFF, mysqlParser.PI, mysqlParser.POINTFROMTEXT, mysqlParser.POINTFROMWKB, mysqlParser.POINTN, mysqlParser.POLYFROMTEXT, mysqlParser.POLYFROMWKB, mysqlParser.POLYGONFROMTEXT, mysqlParser.POLYGONFROMWKB, mysqlParser.POW, mysqlParser.POWER, mysqlParser.QUOTE, mysqlParser.RADIANS, mysqlParser.RAND, mysqlParser.RANDOM_BYTES, mysqlParser.RELEASE_LOCK, mysqlParser.REVERSE, mysqlParser.ROUND, mysqlParser.ROW_COUNT, mysqlParser.RPAD, mysqlParser.RTRIM, mysqlParser.SEC_TO_TIME, mysqlParser.SESSION_USER, mysqlParser.SHA, mysqlParser.SHA1, mysqlParser.SHA2, mysqlParser.SIGN, mysqlParser.SIN, mysqlParser.SLEEP, mysqlParser.SOUNDEX, mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, mysqlParser.SQRT, mysqlParser.SRID, mysqlParser.STARTPOINT, mysqlParser.STRCMP, mysqlParser.STR_TO_DATE, mysqlParser.ST_AREA, mysqlParser.ST_ASBINARY, mysqlParser.ST_ASTEXT, mysqlParser.ST_ASWKB, mysqlParser.ST_ASWKT, mysqlParser.ST_BUFFER, mysqlParser.ST_CENTROID, mysqlParser.ST_CONTAINS, mysqlParser.ST_CROSSES, mysqlParser.ST_DIFFERENCE, mysqlParser.ST_DIMENSION, mysqlParser.ST_DISJOINT, mysqlParser.ST_DISTANCE, mysqlParser.ST_ENDPOINT, mysqlParser.ST_ENVELOPE, mysqlParser.ST_EQUALS, mysqlParser.ST_EXTERIORRING, mysqlParser.ST_GEOMCOLLFROMTEXT, mysqlParser.ST_GEOMCOLLFROMTXT, mysqlParser.ST_GEOMCOLLFROMWKB, mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, mysqlParser.ST_GEOMETRYFROMTEXT, mysqlParser.ST_GEOMETRYFROMWKB, mysqlParser.ST_GEOMETRYN, mysqlParser.ST_GEOMETRYTYPE, mysqlParser.ST_GEOMFROMTEXT, mysqlParser.ST_GEOMFROMWKB, mysqlParser.ST_INTERIORRINGN, mysqlParser.ST_INTERSECTION, mysqlParser.ST_INTERSECTS, mysqlParser.ST_ISCLOSED, mysqlParser.ST_ISEMPTY, mysqlParser.ST_ISSIMPLE, mysqlParser.ST_LINEFROMTEXT, mysqlParser.ST_LINEFROMWKB, mysqlParser.ST_LINESTRINGFROMTEXT, mysqlParser.ST_LINESTRINGFROMWKB, mysqlParser.ST_NUMGEOMETRIES, mysqlParser.ST_NUMINTERIORRING, mysqlParser.ST_NUMINTERIORRINGS, mysqlParser.ST_NUMPOINTS, mysqlParser.ST_OVERLAPS, mysqlParser.ST_POINTFROMTEXT, mysqlParser.ST_POINTFROMWKB, mysqlParser.ST_POINTN, mysqlParser.ST_POLYFROMTEXT, mysqlParser.ST_POLYFROMWKB, mysqlParser.ST_POLYGONFROMTEXT, mysqlParser.ST_POLYGONFROMWKB, mysqlParser.ST_SRID, mysqlParser.ST_STARTPOINT, mysqlParser.ST_SYMDIFFERENCE, mysqlParser.ST_TOUCHES, mysqlParser.ST_UNION, mysqlParser.ST_WITHIN, mysqlParser.ST_X, mysqlParser.ST_Y, mysqlParser.SUBDATE, mysqlParser.SUBSTRING_INDEX, mysqlParser.SUBTIME, mysqlParser.SYSTEM_USER, mysqlParser.TAN, mysqlParser.TIMEDIFF, mysqlParser.TIMESTAMPADD, mysqlParser.TIMESTAMPDIFF, mysqlParser.TIME_FORMAT, mysqlParser.TIME_TO_SEC, mysqlParser.TOUCHES, mysqlParser.TO_BASE64, mysqlParser.TO_DAYS, mysqlParser.TO_SECONDS, mysqlParser.UCASE, mysqlParser.UNCOMPRESS, mysqlParser.UNCOMPRESSED_LENGTH, mysqlParser.UNHEX, mysqlParser.UNIX_TIMESTAMP, mysqlParser.UPDATEXML, mysqlParser.UPPER, mysqlParser.UUID, mysqlParser.UUID_SHORT, mysqlParser.VALIDATE_PASSWORD_STRENGTH, mysqlParser.VERSION, mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, mysqlParser.WEEKDAY, mysqlParser.WEEKOFYEAR, mysqlParser.WEIGHT_STRING, mysqlParser.WITHIN, mysqlParser.YEARWEEK, mysqlParser.Y_FUNCTION, mysqlParser.X_FUNCTION, mysqlParser.AT_SIGN, mysqlParser.CHARSET_REVERSE_QOUTE_STRING, mysqlParser.ID, mysqlParser.REVERSE_QUOTE_ID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4766
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,684,self._ctx)
                if la_ == 1:
                    self.state = 4763
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==mysqlParser.AT_SIGN:
                        self.state = 4761
                        self.match(mysqlParser.AT_SIGN)
                        self.state = 4762
                        self.match(mysqlParser.AT_SIGN)


                    self.state = 4765
                    _la = self._input.LA(1)
                    if not(_la==mysqlParser.GLOBAL or _la==mysqlParser.SESSION):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4768
                self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShowCommonEntityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHARACTER(self):
            return self.getToken(mysqlParser.CHARACTER, 0)

        def SET(self):
            return self.getToken(mysqlParser.SET, 0)

        def COLLATION(self):
            return self.getToken(mysqlParser.COLLATION, 0)

        def DATABASES(self):
            return self.getToken(mysqlParser.DATABASES, 0)

        def SCHEMAS(self):
            return self.getToken(mysqlParser.SCHEMAS, 0)

        def FUNCTION(self):
            return self.getToken(mysqlParser.FUNCTION, 0)

        def STATUS(self):
            return self.getToken(mysqlParser.STATUS, 0)

        def PROCEDURE(self):
            return self.getToken(mysqlParser.PROCEDURE, 0)

        def VARIABLES(self):
            return self.getToken(mysqlParser.VARIABLES, 0)

        def GLOBAL(self):
            return self.getToken(mysqlParser.GLOBAL, 0)

        def SESSION(self):
            return self.getToken(mysqlParser.SESSION, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_showCommonEntity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCommonEntity" ):
                listener.enterShowCommonEntity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCommonEntity" ):
                listener.exitShowCommonEntity(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowCommonEntity" ):
                return visitor.visitShowCommonEntity(self)
            else:
                return visitor.visitChildren(self)




    def showCommonEntity(self):

        localctx = mysqlParser.ShowCommonEntityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_showCommonEntity)
        self._la = 0 # Token type
        try:
            self.state = 4784
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.CHARACTER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4771
                self.match(mysqlParser.CHARACTER)
                self.state = 4772
                self.match(mysqlParser.SET)
                pass
            elif token in [mysqlParser.COLLATION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4773
                self.match(mysqlParser.COLLATION)
                pass
            elif token in [mysqlParser.DATABASES]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4774
                self.match(mysqlParser.DATABASES)
                pass
            elif token in [mysqlParser.SCHEMAS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4775
                self.match(mysqlParser.SCHEMAS)
                pass
            elif token in [mysqlParser.FUNCTION]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4776
                self.match(mysqlParser.FUNCTION)
                self.state = 4777
                self.match(mysqlParser.STATUS)
                pass
            elif token in [mysqlParser.PROCEDURE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4778
                self.match(mysqlParser.PROCEDURE)
                self.state = 4779
                self.match(mysqlParser.STATUS)
                pass
            elif token in [mysqlParser.GLOBAL, mysqlParser.SESSION, mysqlParser.STATUS, mysqlParser.VARIABLES]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4781
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.GLOBAL or _la==mysqlParser.SESSION:
                    self.state = 4780
                    _la = self._input.LA(1)
                    if not(_la==mysqlParser.GLOBAL or _la==mysqlParser.SESSION):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4783
                _la = self._input.LA(1)
                if not(_la==mysqlParser.STATUS or _la==mysqlParser.VARIABLES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShowFilterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIKE(self):
            return self.getToken(mysqlParser.LIKE, 0)

        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def WHERE(self):
            return self.getToken(mysqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_showFilter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowFilter" ):
                listener.enterShowFilter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowFilter" ):
                listener.exitShowFilter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowFilter" ):
                return visitor.visitShowFilter(self)
            else:
                return visitor.visitChildren(self)




    def showFilter(self):

        localctx = mysqlParser.ShowFilterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_showFilter)
        try:
            self.state = 4790
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.LIKE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4786
                self.match(mysqlParser.LIKE)
                self.state = 4787
                self.match(mysqlParser.STRING_LITERAL)
                pass
            elif token in [mysqlParser.WHERE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4788
                self.match(mysqlParser.WHERE)
                self.state = 4789
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShowGlobalInfoClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENGINES(self):
            return self.getToken(mysqlParser.ENGINES, 0)

        def STORAGE(self):
            return self.getToken(mysqlParser.STORAGE, 0)

        def MASTER(self):
            return self.getToken(mysqlParser.MASTER, 0)

        def STATUS(self):
            return self.getToken(mysqlParser.STATUS, 0)

        def PLUGINS(self):
            return self.getToken(mysqlParser.PLUGINS, 0)

        def PRIVILEGES(self):
            return self.getToken(mysqlParser.PRIVILEGES, 0)

        def PROCESSLIST(self):
            return self.getToken(mysqlParser.PROCESSLIST, 0)

        def FULL(self):
            return self.getToken(mysqlParser.FULL, 0)

        def PROFILES(self):
            return self.getToken(mysqlParser.PROFILES, 0)

        def SLAVE(self):
            return self.getToken(mysqlParser.SLAVE, 0)

        def HOSTS(self):
            return self.getToken(mysqlParser.HOSTS, 0)

        def AUTHORS(self):
            return self.getToken(mysqlParser.AUTHORS, 0)

        def CONTRIBUTORS(self):
            return self.getToken(mysqlParser.CONTRIBUTORS, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_showGlobalInfoClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowGlobalInfoClause" ):
                listener.enterShowGlobalInfoClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowGlobalInfoClause" ):
                listener.exitShowGlobalInfoClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowGlobalInfoClause" ):
                return visitor.visitShowGlobalInfoClause(self)
            else:
                return visitor.visitChildren(self)




    def showGlobalInfoClause(self):

        localctx = mysqlParser.ShowGlobalInfoClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_showGlobalInfoClause)
        self._la = 0 # Token type
        try:
            self.state = 4809
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.ENGINES, mysqlParser.STORAGE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4793
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.STORAGE:
                    self.state = 4792
                    self.match(mysqlParser.STORAGE)


                self.state = 4795
                self.match(mysqlParser.ENGINES)
                pass
            elif token in [mysqlParser.MASTER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4796
                self.match(mysqlParser.MASTER)
                self.state = 4797
                self.match(mysqlParser.STATUS)
                pass
            elif token in [mysqlParser.PLUGINS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4798
                self.match(mysqlParser.PLUGINS)
                pass
            elif token in [mysqlParser.PRIVILEGES]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4799
                self.match(mysqlParser.PRIVILEGES)
                pass
            elif token in [mysqlParser.FULL, mysqlParser.PROCESSLIST]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4801
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.FULL:
                    self.state = 4800
                    self.match(mysqlParser.FULL)


                self.state = 4803
                self.match(mysqlParser.PROCESSLIST)
                pass
            elif token in [mysqlParser.PROFILES]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4804
                self.match(mysqlParser.PROFILES)
                pass
            elif token in [mysqlParser.SLAVE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4805
                self.match(mysqlParser.SLAVE)
                self.state = 4806
                self.match(mysqlParser.HOSTS)
                pass
            elif token in [mysqlParser.AUTHORS]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4807
                self.match(mysqlParser.AUTHORS)
                pass
            elif token in [mysqlParser.CONTRIBUTORS]:
                self.enterOuterAlt(localctx, 9)
                self.state = 4808
                self.match(mysqlParser.CONTRIBUTORS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShowSchemaEntityContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENTS(self):
            return self.getToken(mysqlParser.EVENTS, 0)

        def TABLE(self):
            return self.getToken(mysqlParser.TABLE, 0)

        def STATUS(self):
            return self.getToken(mysqlParser.STATUS, 0)

        def TABLES(self):
            return self.getToken(mysqlParser.TABLES, 0)

        def FULL(self):
            return self.getToken(mysqlParser.FULL, 0)

        def TRIGGERS(self):
            return self.getToken(mysqlParser.TRIGGERS, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_showSchemaEntity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSchemaEntity" ):
                listener.enterShowSchemaEntity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSchemaEntity" ):
                listener.exitShowSchemaEntity(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowSchemaEntity" ):
                return visitor.visitShowSchemaEntity(self)
            else:
                return visitor.visitChildren(self)




    def showSchemaEntity(self):

        localctx = mysqlParser.ShowSchemaEntityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_showSchemaEntity)
        self._la = 0 # Token type
        try:
            self.state = 4819
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.EVENTS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4811
                self.match(mysqlParser.EVENTS)
                pass
            elif token in [mysqlParser.TABLE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4812
                self.match(mysqlParser.TABLE)
                self.state = 4813
                self.match(mysqlParser.STATUS)
                pass
            elif token in [mysqlParser.FULL, mysqlParser.TABLES]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4815
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.FULL:
                    self.state = 4814
                    self.match(mysqlParser.FULL)


                self.state = 4817
                self.match(mysqlParser.TABLES)
                pass
            elif token in [mysqlParser.TRIGGERS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4818
                self.match(mysqlParser.TRIGGERS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShowProfileTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(mysqlParser.ALL, 0)

        def BLOCK(self):
            return self.getToken(mysqlParser.BLOCK, 0)

        def IO(self):
            return self.getToken(mysqlParser.IO, 0)

        def CONTEXT(self):
            return self.getToken(mysqlParser.CONTEXT, 0)

        def SWITCHES(self):
            return self.getToken(mysqlParser.SWITCHES, 0)

        def CPU(self):
            return self.getToken(mysqlParser.CPU, 0)

        def IPC(self):
            return self.getToken(mysqlParser.IPC, 0)

        def MEMORY(self):
            return self.getToken(mysqlParser.MEMORY, 0)

        def PAGE(self):
            return self.getToken(mysqlParser.PAGE, 0)

        def FAULTS(self):
            return self.getToken(mysqlParser.FAULTS, 0)

        def SOURCE(self):
            return self.getToken(mysqlParser.SOURCE, 0)

        def SWAPS(self):
            return self.getToken(mysqlParser.SWAPS, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_showProfileType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowProfileType" ):
                listener.enterShowProfileType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowProfileType" ):
                listener.exitShowProfileType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShowProfileType" ):
                return visitor.visitShowProfileType(self)
            else:
                return visitor.visitChildren(self)




    def showProfileType(self):

        localctx = mysqlParser.ShowProfileTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_showProfileType)
        try:
            self.state = 4833
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.ALL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4821
                self.match(mysqlParser.ALL)
                pass
            elif token in [mysqlParser.BLOCK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4822
                self.match(mysqlParser.BLOCK)
                self.state = 4823
                self.match(mysqlParser.IO)
                pass
            elif token in [mysqlParser.CONTEXT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4824
                self.match(mysqlParser.CONTEXT)
                self.state = 4825
                self.match(mysqlParser.SWITCHES)
                pass
            elif token in [mysqlParser.CPU]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4826
                self.match(mysqlParser.CPU)
                pass
            elif token in [mysqlParser.IPC]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4827
                self.match(mysqlParser.IPC)
                pass
            elif token in [mysqlParser.MEMORY]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4828
                self.match(mysqlParser.MEMORY)
                pass
            elif token in [mysqlParser.PAGE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4829
                self.match(mysqlParser.PAGE)
                self.state = 4830
                self.match(mysqlParser.FAULTS)
                pass
            elif token in [mysqlParser.SOURCE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4831
                self.match(mysqlParser.SOURCE)
                pass
            elif token in [mysqlParser.SWAPS]:
                self.enterOuterAlt(localctx, 9)
                self.state = 4832
                self.match(mysqlParser.SWAPS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BinlogStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINLOG(self):
            return self.getToken(mysqlParser.BINLOG, 0)

        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_binlogStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinlogStatement" ):
                listener.enterBinlogStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinlogStatement" ):
                listener.exitBinlogStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinlogStatement" ):
                return visitor.visitBinlogStatement(self)
            else:
                return visitor.visitChildren(self)




    def binlogStatement(self):

        localctx = mysqlParser.BinlogStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_binlogStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4835
            self.match(mysqlParser.BINLOG)
            self.state = 4836
            self.match(mysqlParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CacheIndexStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema = None # UidContext

        def CACHE(self):
            return self.getToken(mysqlParser.CACHE, 0)

        def INDEX(self):
            return self.getToken(mysqlParser.INDEX, 0)

        def tableIndexes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.TableIndexesContext)
            else:
                return self.getTypedRuleContext(mysqlParser.TableIndexesContext,i)


        def IN(self):
            return self.getToken(mysqlParser.IN, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def PARTITION(self):
            return self.getToken(mysqlParser.PARTITION, 0)

        def uidList(self):
            return self.getTypedRuleContext(mysqlParser.UidListContext,0)


        def ALL(self):
            return self.getToken(mysqlParser.ALL, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_cacheIndexStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCacheIndexStatement" ):
                listener.enterCacheIndexStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCacheIndexStatement" ):
                listener.exitCacheIndexStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCacheIndexStatement" ):
                return visitor.visitCacheIndexStatement(self)
            else:
                return visitor.visitChildren(self)




    def cacheIndexStatement(self):

        localctx = mysqlParser.CacheIndexStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_cacheIndexStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4838
            self.match(mysqlParser.CACHE)
            self.state = 4839
            self.match(mysqlParser.INDEX)
            self.state = 4840
            self.tableIndexes()
            self.state = 4845
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.COMMA:
                self.state = 4841
                self.match(mysqlParser.COMMA)
                self.state = 4842
                self.tableIndexes()
                self.state = 4847
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.PARTITION:
                self.state = 4848
                self.match(mysqlParser.PARTITION)
                self.state = 4849
                self.match(mysqlParser.LR_BRACKET)
                self.state = 4852
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [mysqlParser.LEFT, mysqlParser.RIGHT, mysqlParser.DATE, mysqlParser.TIME, mysqlParser.TIMESTAMP, mysqlParser.DATETIME, mysqlParser.YEAR, mysqlParser.TEXT, mysqlParser.ENUM, mysqlParser.COUNT, mysqlParser.POSITION, mysqlParser.ACCOUNT, mysqlParser.ACTION, mysqlParser.AFTER, mysqlParser.AGGREGATE, mysqlParser.ALGORITHM, mysqlParser.ANY, mysqlParser.AT, mysqlParser.AUTHORS, mysqlParser.AUTOCOMMIT, mysqlParser.AUTOEXTEND_SIZE, mysqlParser.AUTO_INCREMENT, mysqlParser.AVG_ROW_LENGTH, mysqlParser.BEGIN, mysqlParser.BINLOG, mysqlParser.BIT, mysqlParser.BLOCK, mysqlParser.BTREE, mysqlParser.CASCADED, mysqlParser.CHAIN, mysqlParser.CHANNEL, mysqlParser.CHECKSUM, mysqlParser.CIPHER, mysqlParser.CLIENT, mysqlParser.COALESCE, mysqlParser.CODE, mysqlParser.COLUMNS, mysqlParser.COLUMN_FORMAT, mysqlParser.COMMENT, mysqlParser.COMMIT, mysqlParser.COMPACT, mysqlParser.COMPLETION, mysqlParser.COMPRESSED, mysqlParser.COMPRESSION, mysqlParser.CONCURRENT, mysqlParser.CONNECTION, mysqlParser.CONSISTENT, mysqlParser.CONTAINS, mysqlParser.CONTEXT, mysqlParser.CONTRIBUTORS, mysqlParser.COPY, mysqlParser.CPU, mysqlParser.DATA, mysqlParser.DATAFILE, mysqlParser.DEALLOCATE, mysqlParser.DEFAULT_AUTH, mysqlParser.DEFINER, mysqlParser.DELAY_KEY_WRITE, mysqlParser.DIRECTORY, mysqlParser.DISABLE, mysqlParser.DISCARD, mysqlParser.DISK, mysqlParser.DO, mysqlParser.DUMPFILE, mysqlParser.DUPLICATE, mysqlParser.DYNAMIC, mysqlParser.ENABLE, mysqlParser.ENCRYPTION, mysqlParser.ENDS, mysqlParser.ENGINE, mysqlParser.ENGINES, mysqlParser.ERROR, mysqlParser.ERRORS, mysqlParser.ESCAPE, mysqlParser.EVEN, mysqlParser.EVENT, mysqlParser.EVENTS, mysqlParser.EVERY, mysqlParser.EXCHANGE, mysqlParser.EXCLUSIVE, mysqlParser.EXPIRE, mysqlParser.EXTENT_SIZE, mysqlParser.FAULTS, mysqlParser.FIELDS, mysqlParser.FILE_BLOCK_SIZE, mysqlParser.FILTER, mysqlParser.FIRST, mysqlParser.FIXED, mysqlParser.FOLLOWS, mysqlParser.FULL, mysqlParser.FUNCTION, mysqlParser.GLOBAL, mysqlParser.GRANTS, mysqlParser.GROUP_REPLICATION, mysqlParser.HASH, mysqlParser.HOST, mysqlParser.IDENTIFIED, mysqlParser.IGNORE_SERVER_IDS, mysqlParser.IMPORT, mysqlParser.INDEXES, mysqlParser.INITIAL_SIZE, mysqlParser.INPLACE, mysqlParser.INSERT_METHOD, mysqlParser.INSTANCE, mysqlParser.INVOKER, mysqlParser.IO, mysqlParser.IO_THREAD, mysqlParser.IPC, mysqlParser.ISOLATION, mysqlParser.ISSUER, mysqlParser.KEY_BLOCK_SIZE, mysqlParser.LANGUAGE, mysqlParser.LAST, mysqlParser.LEAVES, mysqlParser.LESS, mysqlParser.LEVEL, mysqlParser.LIST, mysqlParser.LOCAL, mysqlParser.LOGFILE, mysqlParser.LOGS, mysqlParser.MASTER, mysqlParser.MASTER_AUTO_POSITION, mysqlParser.MASTER_CONNECT_RETRY, mysqlParser.MASTER_DELAY, mysqlParser.MASTER_HEARTBEAT_PERIOD, mysqlParser.MASTER_HOST, mysqlParser.MASTER_LOG_FILE, mysqlParser.MASTER_LOG_POS, mysqlParser.MASTER_PASSWORD, mysqlParser.MASTER_PORT, mysqlParser.MASTER_RETRY_COUNT, mysqlParser.MASTER_SSL, mysqlParser.MASTER_SSL_CA, mysqlParser.MASTER_SSL_CAPATH, mysqlParser.MASTER_SSL_CERT, mysqlParser.MASTER_SSL_CIPHER, mysqlParser.MASTER_SSL_CRL, mysqlParser.MASTER_SSL_CRLPATH, mysqlParser.MASTER_SSL_KEY, mysqlParser.MASTER_TLS_VERSION, mysqlParser.MASTER_USER, mysqlParser.MAX_CONNECTIONS_PER_HOUR, mysqlParser.MAX_QUERIES_PER_HOUR, mysqlParser.MAX_ROWS, mysqlParser.MAX_SIZE, mysqlParser.MAX_UPDATES_PER_HOUR, mysqlParser.MAX_USER_CONNECTIONS, mysqlParser.MERGE, mysqlParser.MID, mysqlParser.MIGRATE, mysqlParser.MIN_ROWS, mysqlParser.MODIFY, mysqlParser.MUTEX, mysqlParser.MYSQL, mysqlParser.NAME, mysqlParser.NAMES, mysqlParser.NCHAR, mysqlParser.NEVER, mysqlParser.NO, mysqlParser.NODEGROUP, mysqlParser.NONE, mysqlParser.OFFLINE, mysqlParser.OFFSET, mysqlParser.OJ, mysqlParser.OLD_PASSWORD, mysqlParser.ONE, mysqlParser.ONLINE, mysqlParser.ONLY, mysqlParser.OPTIMIZER_COSTS, mysqlParser.OPTIONS, mysqlParser.OWNER, mysqlParser.PACK_KEYS, mysqlParser.PAGE, mysqlParser.PARSER, mysqlParser.PARTIAL, mysqlParser.PARTITIONING, mysqlParser.PARTITIONS, mysqlParser.PASSWORD, mysqlParser.PHASE, mysqlParser.PLUGIN_DIR, mysqlParser.PLUGINS, mysqlParser.PORT, mysqlParser.PRECEDES, mysqlParser.PREPARE, mysqlParser.PRESERVE, mysqlParser.PREV, mysqlParser.PROCESSLIST, mysqlParser.PROFILE, mysqlParser.PROFILES, mysqlParser.PROXY, mysqlParser.QUERY, mysqlParser.QUICK, mysqlParser.REBUILD, mysqlParser.RECOVER, mysqlParser.REDO_BUFFER_SIZE, mysqlParser.REDUNDANT, mysqlParser.RELAY_LOG_FILE, mysqlParser.RELAY_LOG_POS, mysqlParser.RELAYLOG, mysqlParser.REMOVE, mysqlParser.REORGANIZE, mysqlParser.REPAIR, mysqlParser.REPLICATE_DO_DB, mysqlParser.REPLICATE_DO_TABLE, mysqlParser.REPLICATE_IGNORE_DB, mysqlParser.REPLICATE_IGNORE_TABLE, mysqlParser.REPLICATE_REWRITE_DB, mysqlParser.REPLICATE_WILD_DO_TABLE, mysqlParser.REPLICATE_WILD_IGNORE_TABLE, mysqlParser.REPLICATION, mysqlParser.RESUME, mysqlParser.RETURNS, mysqlParser.ROLLBACK, mysqlParser.ROLLUP, mysqlParser.ROTATE, mysqlParser.ROW, mysqlParser.ROWS, mysqlParser.ROW_FORMAT, mysqlParser.SAVEPOINT, mysqlParser.SCHEDULE, mysqlParser.SECURITY, mysqlParser.SERVER, mysqlParser.SESSION, mysqlParser.SHARE, mysqlParser.SHARED, mysqlParser.SIGNED, mysqlParser.SIMPLE, mysqlParser.SLAVE, mysqlParser.SNAPSHOT, mysqlParser.SOCKET, mysqlParser.SOME, mysqlParser.SOUNDS, mysqlParser.SOURCE, mysqlParser.SQL_AFTER_GTIDS, mysqlParser.SQL_AFTER_MTS_GAPS, mysqlParser.SQL_BEFORE_GTIDS, mysqlParser.SQL_BUFFER_RESULT, mysqlParser.SQL_CACHE, mysqlParser.SQL_NO_CACHE, mysqlParser.SQL_THREAD, mysqlParser.START, mysqlParser.STARTS, mysqlParser.STATS_AUTO_RECALC, mysqlParser.STATS_PERSISTENT, mysqlParser.STATS_SAMPLE_PAGES, mysqlParser.STATUS, mysqlParser.STOP, mysqlParser.STORAGE, mysqlParser.STRING, mysqlParser.SUBJECT, mysqlParser.SUBPARTITION, mysqlParser.SUBPARTITIONS, mysqlParser.SUSPEND, mysqlParser.SWAPS, mysqlParser.SWITCHES, mysqlParser.TABLESPACE, mysqlParser.TEMPORARY, mysqlParser.TEMPTABLE, mysqlParser.THAN, mysqlParser.TRANSACTION, mysqlParser.TRUNCATE, mysqlParser.UNDEFINED, mysqlParser.UNDOFILE, mysqlParser.UNDO_BUFFER_SIZE, mysqlParser.UNKNOWN, mysqlParser.UPGRADE, mysqlParser.USER, mysqlParser.VALIDATION, mysqlParser.VALUE, mysqlParser.VARIABLES, mysqlParser.VIEW, mysqlParser.WAIT, mysqlParser.WARNINGS, mysqlParser.WITHOUT, mysqlParser.WORK, mysqlParser.WRAPPER, mysqlParser.X509, mysqlParser.XA, mysqlParser.XML, mysqlParser.QUARTER, mysqlParser.MONTH, mysqlParser.DAY, mysqlParser.HOUR, mysqlParser.MINUTE, mysqlParser.WEEK, mysqlParser.SECOND, mysqlParser.MICROSECOND, mysqlParser.TABLES, mysqlParser.ROUTINE, mysqlParser.EXECUTE, mysqlParser.FILE, mysqlParser.PROCESS, mysqlParser.RELOAD, mysqlParser.SHUTDOWN, mysqlParser.SUPER, mysqlParser.PRIVILEGES, mysqlParser.ARMSCII8, mysqlParser.ASCII, mysqlParser.BIG5, mysqlParser.CP1250, mysqlParser.CP1251, mysqlParser.CP1256, mysqlParser.CP1257, mysqlParser.CP850, mysqlParser.CP852, mysqlParser.CP866, mysqlParser.CP932, mysqlParser.DEC8, mysqlParser.EUCJPMS, mysqlParser.EUCKR, mysqlParser.GB2312, mysqlParser.GBK, mysqlParser.GEOSTD8, mysqlParser.GREEK, mysqlParser.HEBREW, mysqlParser.HP8, mysqlParser.KEYBCS2, mysqlParser.KOI8R, mysqlParser.KOI8U, mysqlParser.LATIN1, mysqlParser.LATIN2, mysqlParser.LATIN5, mysqlParser.LATIN7, mysqlParser.MACCE, mysqlParser.MACROMAN, mysqlParser.SJIS, mysqlParser.SWE7, mysqlParser.TIS620, mysqlParser.UCS2, mysqlParser.UJIS, mysqlParser.UTF16, mysqlParser.UTF16LE, mysqlParser.UTF32, mysqlParser.UTF8, mysqlParser.UTF8MB3, mysqlParser.UTF8MB4, mysqlParser.ARCHIVE, mysqlParser.BLACKHOLE, mysqlParser.CSV, mysqlParser.FEDERATED, mysqlParser.INNODB, mysqlParser.MEMORY, mysqlParser.MRG_MYISAM, mysqlParser.MYISAM, mysqlParser.NDB, mysqlParser.NDBCLUSTER, mysqlParser.PERFOMANCE_SCHEMA, mysqlParser.REPEATABLE, mysqlParser.COMMITTED, mysqlParser.UNCOMMITTED, mysqlParser.SERIALIZABLE, mysqlParser.GEOMETRYCOLLECTION, mysqlParser.LINESTRING, mysqlParser.MULTILINESTRING, mysqlParser.MULTIPOINT, mysqlParser.MULTIPOLYGON, mysqlParser.POINT, mysqlParser.POLYGON, mysqlParser.ABS, mysqlParser.ACOS, mysqlParser.ADDDATE, mysqlParser.ADDTIME, mysqlParser.AES_DECRYPT, mysqlParser.AES_ENCRYPT, mysqlParser.AREA, mysqlParser.ASBINARY, mysqlParser.ASIN, mysqlParser.ASTEXT, mysqlParser.ASWKB, mysqlParser.ASWKT, mysqlParser.ASYMMETRIC_DECRYPT, mysqlParser.ASYMMETRIC_DERIVE, mysqlParser.ASYMMETRIC_ENCRYPT, mysqlParser.ASYMMETRIC_SIGN, mysqlParser.ASYMMETRIC_VERIFY, mysqlParser.ATAN, mysqlParser.ATAN2, mysqlParser.BENCHMARK, mysqlParser.BIN, mysqlParser.BIT_COUNT, mysqlParser.BIT_LENGTH, mysqlParser.BUFFER, mysqlParser.CEIL, mysqlParser.CEILING, mysqlParser.CENTROID, mysqlParser.CHARACTER_LENGTH, mysqlParser.CHARSET, mysqlParser.CHAR_LENGTH, mysqlParser.COERCIBILITY, mysqlParser.COLLATION, mysqlParser.COMPRESS, mysqlParser.CONCAT, mysqlParser.CONCAT_WS, mysqlParser.CONNECTION_ID, mysqlParser.CONV, mysqlParser.CONVERT_TZ, mysqlParser.COS, mysqlParser.COT, mysqlParser.CRC32, mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY, mysqlParser.CREATE_ASYMMETRIC_PUB_KEY, mysqlParser.CREATE_DH_PARAMETERS, mysqlParser.CREATE_DIGEST, mysqlParser.CROSSES, mysqlParser.DATEDIFF, mysqlParser.DATE_FORMAT, mysqlParser.DAYNAME, mysqlParser.DAYOFMONTH, mysqlParser.DAYOFWEEK, mysqlParser.DAYOFYEAR, mysqlParser.DECODE, mysqlParser.DEGREES, mysqlParser.DES_DECRYPT, mysqlParser.DES_ENCRYPT, mysqlParser.DIMENSION, mysqlParser.DISJOINT, mysqlParser.ELT, mysqlParser.ENCODE, mysqlParser.ENCRYPT, mysqlParser.ENDPOINT, mysqlParser.ENVELOPE, mysqlParser.EQUALS, mysqlParser.EXP, mysqlParser.EXPORT_SET, mysqlParser.EXTERIORRING, mysqlParser.EXTRACTVALUE, mysqlParser.FIELD, mysqlParser.FIND_IN_SET, mysqlParser.FLOOR, mysqlParser.FORMAT, mysqlParser.FOUND_ROWS, mysqlParser.FROM_BASE64, mysqlParser.FROM_DAYS, mysqlParser.FROM_UNIXTIME, mysqlParser.GEOMCOLLFROMTEXT, mysqlParser.GEOMCOLLFROMWKB, mysqlParser.GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.GEOMETRYCOLLECTIONFROMWKB, mysqlParser.GEOMETRYFROMTEXT, mysqlParser.GEOMETRYFROMWKB, mysqlParser.GEOMETRYN, mysqlParser.GEOMETRYTYPE, mysqlParser.GEOMFROMTEXT, mysqlParser.GEOMFROMWKB, mysqlParser.GET_FORMAT, mysqlParser.GET_LOCK, mysqlParser.GLENGTH, mysqlParser.GREATEST, mysqlParser.GTID_SUBSET, mysqlParser.GTID_SUBTRACT, mysqlParser.HEX, mysqlParser.IFNULL, mysqlParser.INET6_ATON, mysqlParser.INET6_NTOA, mysqlParser.INET_ATON, mysqlParser.INET_NTOA, mysqlParser.INSTR, mysqlParser.INTERIORRINGN, mysqlParser.INTERSECTS, mysqlParser.ISCLOSED, mysqlParser.ISEMPTY, mysqlParser.ISNULL, mysqlParser.ISSIMPLE, mysqlParser.IS_FREE_LOCK, mysqlParser.IS_IPV4, mysqlParser.IS_IPV4_COMPAT, mysqlParser.IS_IPV4_MAPPED, mysqlParser.IS_IPV6, mysqlParser.IS_USED_LOCK, mysqlParser.LAST_INSERT_ID, mysqlParser.LCASE, mysqlParser.LEAST, mysqlParser.LENGTH, mysqlParser.LINEFROMTEXT, mysqlParser.LINEFROMWKB, mysqlParser.LINESTRINGFROMTEXT, mysqlParser.LINESTRINGFROMWKB, mysqlParser.LN, mysqlParser.LOAD_FILE, mysqlParser.LOCATE, mysqlParser.LOG, mysqlParser.LOG10, mysqlParser.LOG2, mysqlParser.LOWER, mysqlParser.LPAD, mysqlParser.LTRIM, mysqlParser.MAKEDATE, mysqlParser.MAKETIME, mysqlParser.MAKE_SET, mysqlParser.MASTER_POS_WAIT, mysqlParser.MBRCONTAINS, mysqlParser.MBRDISJOINT, mysqlParser.MBREQUAL, mysqlParser.MBRINTERSECTS, mysqlParser.MBROVERLAPS, mysqlParser.MBRTOUCHES, mysqlParser.MBRWITHIN, mysqlParser.MD5, mysqlParser.MLINEFROMTEXT, mysqlParser.MLINEFROMWKB, mysqlParser.MONTHNAME, mysqlParser.MPOINTFROMTEXT, mysqlParser.MPOINTFROMWKB, mysqlParser.MPOLYFROMTEXT, mysqlParser.MPOLYFROMWKB, mysqlParser.MULTILINESTRINGFROMTEXT, mysqlParser.MULTILINESTRINGFROMWKB, mysqlParser.MULTIPOINTFROMTEXT, mysqlParser.MULTIPOINTFROMWKB, mysqlParser.MULTIPOLYGONFROMTEXT, mysqlParser.MULTIPOLYGONFROMWKB, mysqlParser.NAME_CONST, mysqlParser.NULLIF, mysqlParser.NUMGEOMETRIES, mysqlParser.NUMINTERIORRINGS, mysqlParser.NUMPOINTS, mysqlParser.OCT, mysqlParser.OCTET_LENGTH, mysqlParser.ORD, mysqlParser.OVERLAPS, mysqlParser.PERIOD_ADD, mysqlParser.PERIOD_DIFF, mysqlParser.PI, mysqlParser.POINTFROMTEXT, mysqlParser.POINTFROMWKB, mysqlParser.POINTN, mysqlParser.POLYFROMTEXT, mysqlParser.POLYFROMWKB, mysqlParser.POLYGONFROMTEXT, mysqlParser.POLYGONFROMWKB, mysqlParser.POW, mysqlParser.POWER, mysqlParser.QUOTE, mysqlParser.RADIANS, mysqlParser.RAND, mysqlParser.RANDOM_BYTES, mysqlParser.RELEASE_LOCK, mysqlParser.REVERSE, mysqlParser.ROUND, mysqlParser.ROW_COUNT, mysqlParser.RPAD, mysqlParser.RTRIM, mysqlParser.SEC_TO_TIME, mysqlParser.SESSION_USER, mysqlParser.SHA, mysqlParser.SHA1, mysqlParser.SHA2, mysqlParser.SIGN, mysqlParser.SIN, mysqlParser.SLEEP, mysqlParser.SOUNDEX, mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, mysqlParser.SQRT, mysqlParser.SRID, mysqlParser.STARTPOINT, mysqlParser.STRCMP, mysqlParser.STR_TO_DATE, mysqlParser.ST_AREA, mysqlParser.ST_ASBINARY, mysqlParser.ST_ASTEXT, mysqlParser.ST_ASWKB, mysqlParser.ST_ASWKT, mysqlParser.ST_BUFFER, mysqlParser.ST_CENTROID, mysqlParser.ST_CONTAINS, mysqlParser.ST_CROSSES, mysqlParser.ST_DIFFERENCE, mysqlParser.ST_DIMENSION, mysqlParser.ST_DISJOINT, mysqlParser.ST_DISTANCE, mysqlParser.ST_ENDPOINT, mysqlParser.ST_ENVELOPE, mysqlParser.ST_EQUALS, mysqlParser.ST_EXTERIORRING, mysqlParser.ST_GEOMCOLLFROMTEXT, mysqlParser.ST_GEOMCOLLFROMTXT, mysqlParser.ST_GEOMCOLLFROMWKB, mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, mysqlParser.ST_GEOMETRYFROMTEXT, mysqlParser.ST_GEOMETRYFROMWKB, mysqlParser.ST_GEOMETRYN, mysqlParser.ST_GEOMETRYTYPE, mysqlParser.ST_GEOMFROMTEXT, mysqlParser.ST_GEOMFROMWKB, mysqlParser.ST_INTERIORRINGN, mysqlParser.ST_INTERSECTION, mysqlParser.ST_INTERSECTS, mysqlParser.ST_ISCLOSED, mysqlParser.ST_ISEMPTY, mysqlParser.ST_ISSIMPLE, mysqlParser.ST_LINEFROMTEXT, mysqlParser.ST_LINEFROMWKB, mysqlParser.ST_LINESTRINGFROMTEXT, mysqlParser.ST_LINESTRINGFROMWKB, mysqlParser.ST_NUMGEOMETRIES, mysqlParser.ST_NUMINTERIORRING, mysqlParser.ST_NUMINTERIORRINGS, mysqlParser.ST_NUMPOINTS, mysqlParser.ST_OVERLAPS, mysqlParser.ST_POINTFROMTEXT, mysqlParser.ST_POINTFROMWKB, mysqlParser.ST_POINTN, mysqlParser.ST_POLYFROMTEXT, mysqlParser.ST_POLYFROMWKB, mysqlParser.ST_POLYGONFROMTEXT, mysqlParser.ST_POLYGONFROMWKB, mysqlParser.ST_SRID, mysqlParser.ST_STARTPOINT, mysqlParser.ST_SYMDIFFERENCE, mysqlParser.ST_TOUCHES, mysqlParser.ST_UNION, mysqlParser.ST_WITHIN, mysqlParser.ST_X, mysqlParser.ST_Y, mysqlParser.SUBDATE, mysqlParser.SUBSTRING_INDEX, mysqlParser.SUBTIME, mysqlParser.SYSTEM_USER, mysqlParser.TAN, mysqlParser.TIMEDIFF, mysqlParser.TIMESTAMPADD, mysqlParser.TIMESTAMPDIFF, mysqlParser.TIME_FORMAT, mysqlParser.TIME_TO_SEC, mysqlParser.TOUCHES, mysqlParser.TO_BASE64, mysqlParser.TO_DAYS, mysqlParser.TO_SECONDS, mysqlParser.UCASE, mysqlParser.UNCOMPRESS, mysqlParser.UNCOMPRESSED_LENGTH, mysqlParser.UNHEX, mysqlParser.UNIX_TIMESTAMP, mysqlParser.UPDATEXML, mysqlParser.UPPER, mysqlParser.UUID, mysqlParser.UUID_SHORT, mysqlParser.VALIDATE_PASSWORD_STRENGTH, mysqlParser.VERSION, mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, mysqlParser.WEEKDAY, mysqlParser.WEEKOFYEAR, mysqlParser.WEIGHT_STRING, mysqlParser.WITHIN, mysqlParser.YEARWEEK, mysqlParser.Y_FUNCTION, mysqlParser.X_FUNCTION, mysqlParser.CHARSET_REVERSE_QOUTE_STRING, mysqlParser.ID, mysqlParser.REVERSE_QUOTE_ID]:
                    self.state = 4850
                    self.uidList()
                    pass
                elif token in [mysqlParser.ALL]:
                    self.state = 4851
                    self.match(mysqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4854
                self.match(mysqlParser.RR_BRACKET)


            self.state = 4857
            self.match(mysqlParser.IN)
            self.state = 4858
            localctx.schema = self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FlushStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLUSH(self):
            return self.getToken(mysqlParser.FLUSH, 0)

        def flushOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.FlushOptionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.FlushOptionContext,i)


        def NO_WRITE_TO_BINLOG(self):
            return self.getToken(mysqlParser.NO_WRITE_TO_BINLOG, 0)

        def LOCAL(self):
            return self.getToken(mysqlParser.LOCAL, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_flushStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlushStatement" ):
                listener.enterFlushStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlushStatement" ):
                listener.exitFlushStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlushStatement" ):
                return visitor.visitFlushStatement(self)
            else:
                return visitor.visitChildren(self)




    def flushStatement(self):

        localctx = mysqlParser.FlushStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_flushStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4860
            self.match(mysqlParser.FLUSH)
            self.state = 4862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.NO_WRITE_TO_BINLOG or _la==mysqlParser.LOCAL:
                self.state = 4861
                _la = self._input.LA(1)
                if not(_la==mysqlParser.NO_WRITE_TO_BINLOG or _la==mysqlParser.LOCAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4864
            self.flushOption()
            self.state = 4869
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.COMMA:
                self.state = 4865
                self.match(mysqlParser.COMMA)
                self.state = 4866
                self.flushOption()
                self.state = 4871
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KillStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.connectionFormat = None # Token

        def KILL(self):
            return self.getToken(mysqlParser.KILL, 0)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,i)


        def CONNECTION(self):
            return self.getToken(mysqlParser.CONNECTION, 0)

        def QUERY(self):
            return self.getToken(mysqlParser.QUERY, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_killStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKillStatement" ):
                listener.enterKillStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKillStatement" ):
                listener.exitKillStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKillStatement" ):
                return visitor.visitKillStatement(self)
            else:
                return visitor.visitChildren(self)




    def killStatement(self):

        localctx = mysqlParser.KillStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_killStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4872
            self.match(mysqlParser.KILL)
            self.state = 4874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.CONNECTION or _la==mysqlParser.QUERY:
                self.state = 4873
                localctx.connectionFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.CONNECTION or _la==mysqlParser.QUERY):
                    localctx.connectionFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4877 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4876
                self.decimalLiteral()
                self.state = 4879 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 947)) & ~0x3f) == 0 and ((1 << (_la - 947)) & ((1 << (mysqlParser.ZERO_DECIMAL - 947)) | (1 << (mysqlParser.ONE_DECIMAL - 947)) | (1 << (mysqlParser.TWO_DECIMAL - 947)) | (1 << (mysqlParser.DECIMAL_LITERAL - 947)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LoadIndexIntoCacheContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOAD(self):
            return self.getToken(mysqlParser.LOAD, 0)

        def INDEX(self):
            return self.getToken(mysqlParser.INDEX, 0)

        def INTO(self):
            return self.getToken(mysqlParser.INTO, 0)

        def CACHE(self):
            return self.getToken(mysqlParser.CACHE, 0)

        def loadedTableIndexes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.LoadedTableIndexesContext)
            else:
                return self.getTypedRuleContext(mysqlParser.LoadedTableIndexesContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_loadIndexIntoCache

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadIndexIntoCache" ):
                listener.enterLoadIndexIntoCache(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadIndexIntoCache" ):
                listener.exitLoadIndexIntoCache(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoadIndexIntoCache" ):
                return visitor.visitLoadIndexIntoCache(self)
            else:
                return visitor.visitChildren(self)




    def loadIndexIntoCache(self):

        localctx = mysqlParser.LoadIndexIntoCacheContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_loadIndexIntoCache)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4881
            self.match(mysqlParser.LOAD)
            self.state = 4882
            self.match(mysqlParser.INDEX)
            self.state = 4883
            self.match(mysqlParser.INTO)
            self.state = 4884
            self.match(mysqlParser.CACHE)
            self.state = 4885
            self.loadedTableIndexes()
            self.state = 4890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.COMMA:
                self.state = 4886
                self.match(mysqlParser.COMMA)
                self.state = 4887
                self.loadedTableIndexes()
                self.state = 4892
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ResetStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(mysqlParser.RESET, 0)

        def QUERY(self):
            return self.getToken(mysqlParser.QUERY, 0)

        def CACHE(self):
            return self.getToken(mysqlParser.CACHE, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_resetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetStatement" ):
                listener.enterResetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetStatement" ):
                listener.exitResetStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResetStatement" ):
                return visitor.visitResetStatement(self)
            else:
                return visitor.visitChildren(self)




    def resetStatement(self):

        localctx = mysqlParser.ResetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_resetStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4893
            self.match(mysqlParser.RESET)
            self.state = 4894
            self.match(mysqlParser.QUERY)
            self.state = 4895
            self.match(mysqlParser.CACHE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ShutdownStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHUTDOWN(self):
            return self.getToken(mysqlParser.SHUTDOWN, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_shutdownStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShutdownStatement" ):
                listener.enterShutdownStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShutdownStatement" ):
                listener.exitShutdownStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShutdownStatement" ):
                return visitor.visitShutdownStatement(self)
            else:
                return visitor.visitChildren(self)




    def shutdownStatement(self):

        localctx = mysqlParser.ShutdownStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_shutdownStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4897
            self.match(mysqlParser.SHUTDOWN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableIndexesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self):
            return self.getTypedRuleContext(mysqlParser.TableNameContext,0)


        def uidList(self):
            return self.getTypedRuleContext(mysqlParser.UidListContext,0)


        def INDEX(self):
            return self.getToken(mysqlParser.INDEX, 0)

        def KEY(self):
            return self.getToken(mysqlParser.KEY, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_tableIndexes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableIndexes" ):
                listener.enterTableIndexes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableIndexes" ):
                listener.exitTableIndexes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableIndexes" ):
                return visitor.visitTableIndexes(self)
            else:
                return visitor.visitChildren(self)




    def tableIndexes(self):

        localctx = mysqlParser.TableIndexesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_tableIndexes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4899
            self.tableName()
            self.state = 4907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.INDEX or _la==mysqlParser.KEY or _la==mysqlParser.LR_BRACKET:
                self.state = 4901
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.INDEX or _la==mysqlParser.KEY:
                    self.state = 4900
                    _la = self._input.LA(1)
                    if not(_la==mysqlParser.INDEX or _la==mysqlParser.KEY):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4903
                self.match(mysqlParser.LR_BRACKET)
                self.state = 4904
                self.uidList()
                self.state = 4905
                self.match(mysqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FlushOptionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_flushOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableFlushOptionContext(FlushOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.FlushOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLES(self):
            return self.getToken(mysqlParser.TABLES, 0)
        def tables(self):
            return self.getTypedRuleContext(mysqlParser.TablesContext,0)

        def WITH(self):
            return self.getToken(mysqlParser.WITH, 0)
        def READ(self):
            return self.getToken(mysqlParser.READ, 0)
        def LOCK(self):
            return self.getToken(mysqlParser.LOCK, 0)
        def FOR(self):
            return self.getToken(mysqlParser.FOR, 0)
        def EXPORT(self):
            return self.getToken(mysqlParser.EXPORT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFlushOption" ):
                listener.enterTableFlushOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFlushOption" ):
                listener.exitTableFlushOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableFlushOption" ):
                return visitor.visitTableFlushOption(self)
            else:
                return visitor.visitChildren(self)


    class ChannelFlushOptionContext(FlushOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.FlushOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RELAY(self):
            return self.getToken(mysqlParser.RELAY, 0)
        def LOGS(self):
            return self.getToken(mysqlParser.LOGS, 0)
        def channelOption(self):
            return self.getTypedRuleContext(mysqlParser.ChannelOptionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChannelFlushOption" ):
                listener.enterChannelFlushOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChannelFlushOption" ):
                listener.exitChannelFlushOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitChannelFlushOption" ):
                return visitor.visitChannelFlushOption(self)
            else:
                return visitor.visitChildren(self)


    class SimpleFlushOptionContext(FlushOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.FlushOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DES_KEY_FILE(self):
            return self.getToken(mysqlParser.DES_KEY_FILE, 0)
        def HOSTS(self):
            return self.getToken(mysqlParser.HOSTS, 0)
        def LOGS(self):
            return self.getToken(mysqlParser.LOGS, 0)
        def OPTIMIZER_COSTS(self):
            return self.getToken(mysqlParser.OPTIMIZER_COSTS, 0)
        def PRIVILEGES(self):
            return self.getToken(mysqlParser.PRIVILEGES, 0)
        def QUERY(self):
            return self.getToken(mysqlParser.QUERY, 0)
        def CACHE(self):
            return self.getToken(mysqlParser.CACHE, 0)
        def STATUS(self):
            return self.getToken(mysqlParser.STATUS, 0)
        def USER_RESOURCES(self):
            return self.getToken(mysqlParser.USER_RESOURCES, 0)
        def TABLES(self):
            return self.getToken(mysqlParser.TABLES, 0)
        def WITH(self):
            return self.getToken(mysqlParser.WITH, 0)
        def READ(self):
            return self.getToken(mysqlParser.READ, 0)
        def LOCK(self):
            return self.getToken(mysqlParser.LOCK, 0)
        def BINARY(self):
            return self.getToken(mysqlParser.BINARY, 0)
        def ENGINE(self):
            return self.getToken(mysqlParser.ENGINE, 0)
        def ERROR(self):
            return self.getToken(mysqlParser.ERROR, 0)
        def GENERAL(self):
            return self.getToken(mysqlParser.GENERAL, 0)
        def RELAY(self):
            return self.getToken(mysqlParser.RELAY, 0)
        def SLOW(self):
            return self.getToken(mysqlParser.SLOW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleFlushOption" ):
                listener.enterSimpleFlushOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleFlushOption" ):
                listener.exitSimpleFlushOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleFlushOption" ):
                return visitor.visitSimpleFlushOption(self)
            else:
                return visitor.visitChildren(self)



    def flushOption(self):

        localctx = mysqlParser.FlushOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_flushOption)
        self._la = 0 # Token type
        try:
            self.state = 4943
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,710,self._ctx)
            if la_ == 1:
                localctx = mysqlParser.SimpleFlushOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4927
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [mysqlParser.DES_KEY_FILE]:
                    self.state = 4909
                    self.match(mysqlParser.DES_KEY_FILE)
                    pass
                elif token in [mysqlParser.HOSTS]:
                    self.state = 4910
                    self.match(mysqlParser.HOSTS)
                    pass
                elif token in [mysqlParser.BINARY, mysqlParser.ENGINE, mysqlParser.ERROR, mysqlParser.GENERAL, mysqlParser.LOGS, mysqlParser.RELAY, mysqlParser.SLOW]:
                    self.state = 4912
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==mysqlParser.BINARY or ((((_la - 307)) & ~0x3f) == 0 and ((1 << (_la - 307)) & ((1 << (mysqlParser.ENGINE - 307)) | (1 << (mysqlParser.ERROR - 307)) | (1 << (mysqlParser.GENERAL - 307)))) != 0) or _la==mysqlParser.RELAY or _la==mysqlParser.SLOW:
                        self.state = 4911
                        _la = self._input.LA(1)
                        if not(_la==mysqlParser.BINARY or ((((_la - 307)) & ~0x3f) == 0 and ((1 << (_la - 307)) & ((1 << (mysqlParser.ENGINE - 307)) | (1 << (mysqlParser.ERROR - 307)) | (1 << (mysqlParser.GENERAL - 307)))) != 0) or _la==mysqlParser.RELAY or _la==mysqlParser.SLOW):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 4914
                    self.match(mysqlParser.LOGS)
                    pass
                elif token in [mysqlParser.OPTIMIZER_COSTS]:
                    self.state = 4915
                    self.match(mysqlParser.OPTIMIZER_COSTS)
                    pass
                elif token in [mysqlParser.PRIVILEGES]:
                    self.state = 4916
                    self.match(mysqlParser.PRIVILEGES)
                    pass
                elif token in [mysqlParser.QUERY]:
                    self.state = 4917
                    self.match(mysqlParser.QUERY)
                    self.state = 4918
                    self.match(mysqlParser.CACHE)
                    pass
                elif token in [mysqlParser.STATUS]:
                    self.state = 4919
                    self.match(mysqlParser.STATUS)
                    pass
                elif token in [mysqlParser.USER_RESOURCES]:
                    self.state = 4920
                    self.match(mysqlParser.USER_RESOURCES)
                    pass
                elif token in [mysqlParser.TABLES]:
                    self.state = 4921
                    self.match(mysqlParser.TABLES)
                    self.state = 4925
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==mysqlParser.WITH:
                        self.state = 4922
                        self.match(mysqlParser.WITH)
                        self.state = 4923
                        self.match(mysqlParser.READ)
                        self.state = 4924
                        self.match(mysqlParser.LOCK)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                localctx = mysqlParser.ChannelFlushOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4929
                self.match(mysqlParser.RELAY)
                self.state = 4930
                self.match(mysqlParser.LOGS)
                self.state = 4932
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.FOR:
                    self.state = 4931
                    self.channelOption()


                pass

            elif la_ == 3:
                localctx = mysqlParser.TableFlushOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4934
                self.match(mysqlParser.TABLES)
                self.state = 4935
                self.tables()
                self.state = 4941
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [mysqlParser.WITH]:
                    self.state = 4936
                    self.match(mysqlParser.WITH)
                    self.state = 4937
                    self.match(mysqlParser.READ)
                    self.state = 4938
                    self.match(mysqlParser.LOCK)
                    pass
                elif token in [mysqlParser.FOR]:
                    self.state = 4939
                    self.match(mysqlParser.FOR)
                    self.state = 4940
                    self.match(mysqlParser.EXPORT)
                    pass
                elif token in [mysqlParser.EOF, mysqlParser.MINUS, mysqlParser.COMMA, mysqlParser.SEMI]:
                    pass
                else:
                    pass
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LoadedTableIndexesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.partitionList = None # UidListContext
            self.indexFormat = None # Token
            self.indexList = None # UidListContext

        def tableName(self):
            return self.getTypedRuleContext(mysqlParser.TableNameContext,0)


        def PARTITION(self):
            return self.getToken(mysqlParser.PARTITION, 0)

        def IGNORE(self):
            return self.getToken(mysqlParser.IGNORE, 0)

        def LEAVES(self):
            return self.getToken(mysqlParser.LEAVES, 0)

        def uidList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UidListContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UidListContext,i)


        def ALL(self):
            return self.getToken(mysqlParser.ALL, 0)

        def INDEX(self):
            return self.getToken(mysqlParser.INDEX, 0)

        def KEY(self):
            return self.getToken(mysqlParser.KEY, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_loadedTableIndexes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadedTableIndexes" ):
                listener.enterLoadedTableIndexes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadedTableIndexes" ):
                listener.exitLoadedTableIndexes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoadedTableIndexes" ):
                return visitor.visitLoadedTableIndexes(self)
            else:
                return visitor.visitChildren(self)




    def loadedTableIndexes(self):

        localctx = mysqlParser.LoadedTableIndexesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_loadedTableIndexes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4945
            self.tableName()
            self.state = 4953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.PARTITION:
                self.state = 4946
                self.match(mysqlParser.PARTITION)
                self.state = 4947
                self.match(mysqlParser.LR_BRACKET)
                self.state = 4950
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [mysqlParser.LEFT, mysqlParser.RIGHT, mysqlParser.DATE, mysqlParser.TIME, mysqlParser.TIMESTAMP, mysqlParser.DATETIME, mysqlParser.YEAR, mysqlParser.TEXT, mysqlParser.ENUM, mysqlParser.COUNT, mysqlParser.POSITION, mysqlParser.ACCOUNT, mysqlParser.ACTION, mysqlParser.AFTER, mysqlParser.AGGREGATE, mysqlParser.ALGORITHM, mysqlParser.ANY, mysqlParser.AT, mysqlParser.AUTHORS, mysqlParser.AUTOCOMMIT, mysqlParser.AUTOEXTEND_SIZE, mysqlParser.AUTO_INCREMENT, mysqlParser.AVG_ROW_LENGTH, mysqlParser.BEGIN, mysqlParser.BINLOG, mysqlParser.BIT, mysqlParser.BLOCK, mysqlParser.BTREE, mysqlParser.CASCADED, mysqlParser.CHAIN, mysqlParser.CHANNEL, mysqlParser.CHECKSUM, mysqlParser.CIPHER, mysqlParser.CLIENT, mysqlParser.COALESCE, mysqlParser.CODE, mysqlParser.COLUMNS, mysqlParser.COLUMN_FORMAT, mysqlParser.COMMENT, mysqlParser.COMMIT, mysqlParser.COMPACT, mysqlParser.COMPLETION, mysqlParser.COMPRESSED, mysqlParser.COMPRESSION, mysqlParser.CONCURRENT, mysqlParser.CONNECTION, mysqlParser.CONSISTENT, mysqlParser.CONTAINS, mysqlParser.CONTEXT, mysqlParser.CONTRIBUTORS, mysqlParser.COPY, mysqlParser.CPU, mysqlParser.DATA, mysqlParser.DATAFILE, mysqlParser.DEALLOCATE, mysqlParser.DEFAULT_AUTH, mysqlParser.DEFINER, mysqlParser.DELAY_KEY_WRITE, mysqlParser.DIRECTORY, mysqlParser.DISABLE, mysqlParser.DISCARD, mysqlParser.DISK, mysqlParser.DO, mysqlParser.DUMPFILE, mysqlParser.DUPLICATE, mysqlParser.DYNAMIC, mysqlParser.ENABLE, mysqlParser.ENCRYPTION, mysqlParser.ENDS, mysqlParser.ENGINE, mysqlParser.ENGINES, mysqlParser.ERROR, mysqlParser.ERRORS, mysqlParser.ESCAPE, mysqlParser.EVEN, mysqlParser.EVENT, mysqlParser.EVENTS, mysqlParser.EVERY, mysqlParser.EXCHANGE, mysqlParser.EXCLUSIVE, mysqlParser.EXPIRE, mysqlParser.EXTENT_SIZE, mysqlParser.FAULTS, mysqlParser.FIELDS, mysqlParser.FILE_BLOCK_SIZE, mysqlParser.FILTER, mysqlParser.FIRST, mysqlParser.FIXED, mysqlParser.FOLLOWS, mysqlParser.FULL, mysqlParser.FUNCTION, mysqlParser.GLOBAL, mysqlParser.GRANTS, mysqlParser.GROUP_REPLICATION, mysqlParser.HASH, mysqlParser.HOST, mysqlParser.IDENTIFIED, mysqlParser.IGNORE_SERVER_IDS, mysqlParser.IMPORT, mysqlParser.INDEXES, mysqlParser.INITIAL_SIZE, mysqlParser.INPLACE, mysqlParser.INSERT_METHOD, mysqlParser.INSTANCE, mysqlParser.INVOKER, mysqlParser.IO, mysqlParser.IO_THREAD, mysqlParser.IPC, mysqlParser.ISOLATION, mysqlParser.ISSUER, mysqlParser.KEY_BLOCK_SIZE, mysqlParser.LANGUAGE, mysqlParser.LAST, mysqlParser.LEAVES, mysqlParser.LESS, mysqlParser.LEVEL, mysqlParser.LIST, mysqlParser.LOCAL, mysqlParser.LOGFILE, mysqlParser.LOGS, mysqlParser.MASTER, mysqlParser.MASTER_AUTO_POSITION, mysqlParser.MASTER_CONNECT_RETRY, mysqlParser.MASTER_DELAY, mysqlParser.MASTER_HEARTBEAT_PERIOD, mysqlParser.MASTER_HOST, mysqlParser.MASTER_LOG_FILE, mysqlParser.MASTER_LOG_POS, mysqlParser.MASTER_PASSWORD, mysqlParser.MASTER_PORT, mysqlParser.MASTER_RETRY_COUNT, mysqlParser.MASTER_SSL, mysqlParser.MASTER_SSL_CA, mysqlParser.MASTER_SSL_CAPATH, mysqlParser.MASTER_SSL_CERT, mysqlParser.MASTER_SSL_CIPHER, mysqlParser.MASTER_SSL_CRL, mysqlParser.MASTER_SSL_CRLPATH, mysqlParser.MASTER_SSL_KEY, mysqlParser.MASTER_TLS_VERSION, mysqlParser.MASTER_USER, mysqlParser.MAX_CONNECTIONS_PER_HOUR, mysqlParser.MAX_QUERIES_PER_HOUR, mysqlParser.MAX_ROWS, mysqlParser.MAX_SIZE, mysqlParser.MAX_UPDATES_PER_HOUR, mysqlParser.MAX_USER_CONNECTIONS, mysqlParser.MERGE, mysqlParser.MID, mysqlParser.MIGRATE, mysqlParser.MIN_ROWS, mysqlParser.MODIFY, mysqlParser.MUTEX, mysqlParser.MYSQL, mysqlParser.NAME, mysqlParser.NAMES, mysqlParser.NCHAR, mysqlParser.NEVER, mysqlParser.NO, mysqlParser.NODEGROUP, mysqlParser.NONE, mysqlParser.OFFLINE, mysqlParser.OFFSET, mysqlParser.OJ, mysqlParser.OLD_PASSWORD, mysqlParser.ONE, mysqlParser.ONLINE, mysqlParser.ONLY, mysqlParser.OPTIMIZER_COSTS, mysqlParser.OPTIONS, mysqlParser.OWNER, mysqlParser.PACK_KEYS, mysqlParser.PAGE, mysqlParser.PARSER, mysqlParser.PARTIAL, mysqlParser.PARTITIONING, mysqlParser.PARTITIONS, mysqlParser.PASSWORD, mysqlParser.PHASE, mysqlParser.PLUGIN_DIR, mysqlParser.PLUGINS, mysqlParser.PORT, mysqlParser.PRECEDES, mysqlParser.PREPARE, mysqlParser.PRESERVE, mysqlParser.PREV, mysqlParser.PROCESSLIST, mysqlParser.PROFILE, mysqlParser.PROFILES, mysqlParser.PROXY, mysqlParser.QUERY, mysqlParser.QUICK, mysqlParser.REBUILD, mysqlParser.RECOVER, mysqlParser.REDO_BUFFER_SIZE, mysqlParser.REDUNDANT, mysqlParser.RELAY_LOG_FILE, mysqlParser.RELAY_LOG_POS, mysqlParser.RELAYLOG, mysqlParser.REMOVE, mysqlParser.REORGANIZE, mysqlParser.REPAIR, mysqlParser.REPLICATE_DO_DB, mysqlParser.REPLICATE_DO_TABLE, mysqlParser.REPLICATE_IGNORE_DB, mysqlParser.REPLICATE_IGNORE_TABLE, mysqlParser.REPLICATE_REWRITE_DB, mysqlParser.REPLICATE_WILD_DO_TABLE, mysqlParser.REPLICATE_WILD_IGNORE_TABLE, mysqlParser.REPLICATION, mysqlParser.RESUME, mysqlParser.RETURNS, mysqlParser.ROLLBACK, mysqlParser.ROLLUP, mysqlParser.ROTATE, mysqlParser.ROW, mysqlParser.ROWS, mysqlParser.ROW_FORMAT, mysqlParser.SAVEPOINT, mysqlParser.SCHEDULE, mysqlParser.SECURITY, mysqlParser.SERVER, mysqlParser.SESSION, mysqlParser.SHARE, mysqlParser.SHARED, mysqlParser.SIGNED, mysqlParser.SIMPLE, mysqlParser.SLAVE, mysqlParser.SNAPSHOT, mysqlParser.SOCKET, mysqlParser.SOME, mysqlParser.SOUNDS, mysqlParser.SOURCE, mysqlParser.SQL_AFTER_GTIDS, mysqlParser.SQL_AFTER_MTS_GAPS, mysqlParser.SQL_BEFORE_GTIDS, mysqlParser.SQL_BUFFER_RESULT, mysqlParser.SQL_CACHE, mysqlParser.SQL_NO_CACHE, mysqlParser.SQL_THREAD, mysqlParser.START, mysqlParser.STARTS, mysqlParser.STATS_AUTO_RECALC, mysqlParser.STATS_PERSISTENT, mysqlParser.STATS_SAMPLE_PAGES, mysqlParser.STATUS, mysqlParser.STOP, mysqlParser.STORAGE, mysqlParser.STRING, mysqlParser.SUBJECT, mysqlParser.SUBPARTITION, mysqlParser.SUBPARTITIONS, mysqlParser.SUSPEND, mysqlParser.SWAPS, mysqlParser.SWITCHES, mysqlParser.TABLESPACE, mysqlParser.TEMPORARY, mysqlParser.TEMPTABLE, mysqlParser.THAN, mysqlParser.TRANSACTION, mysqlParser.TRUNCATE, mysqlParser.UNDEFINED, mysqlParser.UNDOFILE, mysqlParser.UNDO_BUFFER_SIZE, mysqlParser.UNKNOWN, mysqlParser.UPGRADE, mysqlParser.USER, mysqlParser.VALIDATION, mysqlParser.VALUE, mysqlParser.VARIABLES, mysqlParser.VIEW, mysqlParser.WAIT, mysqlParser.WARNINGS, mysqlParser.WITHOUT, mysqlParser.WORK, mysqlParser.WRAPPER, mysqlParser.X509, mysqlParser.XA, mysqlParser.XML, mysqlParser.QUARTER, mysqlParser.MONTH, mysqlParser.DAY, mysqlParser.HOUR, mysqlParser.MINUTE, mysqlParser.WEEK, mysqlParser.SECOND, mysqlParser.MICROSECOND, mysqlParser.TABLES, mysqlParser.ROUTINE, mysqlParser.EXECUTE, mysqlParser.FILE, mysqlParser.PROCESS, mysqlParser.RELOAD, mysqlParser.SHUTDOWN, mysqlParser.SUPER, mysqlParser.PRIVILEGES, mysqlParser.ARMSCII8, mysqlParser.ASCII, mysqlParser.BIG5, mysqlParser.CP1250, mysqlParser.CP1251, mysqlParser.CP1256, mysqlParser.CP1257, mysqlParser.CP850, mysqlParser.CP852, mysqlParser.CP866, mysqlParser.CP932, mysqlParser.DEC8, mysqlParser.EUCJPMS, mysqlParser.EUCKR, mysqlParser.GB2312, mysqlParser.GBK, mysqlParser.GEOSTD8, mysqlParser.GREEK, mysqlParser.HEBREW, mysqlParser.HP8, mysqlParser.KEYBCS2, mysqlParser.KOI8R, mysqlParser.KOI8U, mysqlParser.LATIN1, mysqlParser.LATIN2, mysqlParser.LATIN5, mysqlParser.LATIN7, mysqlParser.MACCE, mysqlParser.MACROMAN, mysqlParser.SJIS, mysqlParser.SWE7, mysqlParser.TIS620, mysqlParser.UCS2, mysqlParser.UJIS, mysqlParser.UTF16, mysqlParser.UTF16LE, mysqlParser.UTF32, mysqlParser.UTF8, mysqlParser.UTF8MB3, mysqlParser.UTF8MB4, mysqlParser.ARCHIVE, mysqlParser.BLACKHOLE, mysqlParser.CSV, mysqlParser.FEDERATED, mysqlParser.INNODB, mysqlParser.MEMORY, mysqlParser.MRG_MYISAM, mysqlParser.MYISAM, mysqlParser.NDB, mysqlParser.NDBCLUSTER, mysqlParser.PERFOMANCE_SCHEMA, mysqlParser.REPEATABLE, mysqlParser.COMMITTED, mysqlParser.UNCOMMITTED, mysqlParser.SERIALIZABLE, mysqlParser.GEOMETRYCOLLECTION, mysqlParser.LINESTRING, mysqlParser.MULTILINESTRING, mysqlParser.MULTIPOINT, mysqlParser.MULTIPOLYGON, mysqlParser.POINT, mysqlParser.POLYGON, mysqlParser.ABS, mysqlParser.ACOS, mysqlParser.ADDDATE, mysqlParser.ADDTIME, mysqlParser.AES_DECRYPT, mysqlParser.AES_ENCRYPT, mysqlParser.AREA, mysqlParser.ASBINARY, mysqlParser.ASIN, mysqlParser.ASTEXT, mysqlParser.ASWKB, mysqlParser.ASWKT, mysqlParser.ASYMMETRIC_DECRYPT, mysqlParser.ASYMMETRIC_DERIVE, mysqlParser.ASYMMETRIC_ENCRYPT, mysqlParser.ASYMMETRIC_SIGN, mysqlParser.ASYMMETRIC_VERIFY, mysqlParser.ATAN, mysqlParser.ATAN2, mysqlParser.BENCHMARK, mysqlParser.BIN, mysqlParser.BIT_COUNT, mysqlParser.BIT_LENGTH, mysqlParser.BUFFER, mysqlParser.CEIL, mysqlParser.CEILING, mysqlParser.CENTROID, mysqlParser.CHARACTER_LENGTH, mysqlParser.CHARSET, mysqlParser.CHAR_LENGTH, mysqlParser.COERCIBILITY, mysqlParser.COLLATION, mysqlParser.COMPRESS, mysqlParser.CONCAT, mysqlParser.CONCAT_WS, mysqlParser.CONNECTION_ID, mysqlParser.CONV, mysqlParser.CONVERT_TZ, mysqlParser.COS, mysqlParser.COT, mysqlParser.CRC32, mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY, mysqlParser.CREATE_ASYMMETRIC_PUB_KEY, mysqlParser.CREATE_DH_PARAMETERS, mysqlParser.CREATE_DIGEST, mysqlParser.CROSSES, mysqlParser.DATEDIFF, mysqlParser.DATE_FORMAT, mysqlParser.DAYNAME, mysqlParser.DAYOFMONTH, mysqlParser.DAYOFWEEK, mysqlParser.DAYOFYEAR, mysqlParser.DECODE, mysqlParser.DEGREES, mysqlParser.DES_DECRYPT, mysqlParser.DES_ENCRYPT, mysqlParser.DIMENSION, mysqlParser.DISJOINT, mysqlParser.ELT, mysqlParser.ENCODE, mysqlParser.ENCRYPT, mysqlParser.ENDPOINT, mysqlParser.ENVELOPE, mysqlParser.EQUALS, mysqlParser.EXP, mysqlParser.EXPORT_SET, mysqlParser.EXTERIORRING, mysqlParser.EXTRACTVALUE, mysqlParser.FIELD, mysqlParser.FIND_IN_SET, mysqlParser.FLOOR, mysqlParser.FORMAT, mysqlParser.FOUND_ROWS, mysqlParser.FROM_BASE64, mysqlParser.FROM_DAYS, mysqlParser.FROM_UNIXTIME, mysqlParser.GEOMCOLLFROMTEXT, mysqlParser.GEOMCOLLFROMWKB, mysqlParser.GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.GEOMETRYCOLLECTIONFROMWKB, mysqlParser.GEOMETRYFROMTEXT, mysqlParser.GEOMETRYFROMWKB, mysqlParser.GEOMETRYN, mysqlParser.GEOMETRYTYPE, mysqlParser.GEOMFROMTEXT, mysqlParser.GEOMFROMWKB, mysqlParser.GET_FORMAT, mysqlParser.GET_LOCK, mysqlParser.GLENGTH, mysqlParser.GREATEST, mysqlParser.GTID_SUBSET, mysqlParser.GTID_SUBTRACT, mysqlParser.HEX, mysqlParser.IFNULL, mysqlParser.INET6_ATON, mysqlParser.INET6_NTOA, mysqlParser.INET_ATON, mysqlParser.INET_NTOA, mysqlParser.INSTR, mysqlParser.INTERIORRINGN, mysqlParser.INTERSECTS, mysqlParser.ISCLOSED, mysqlParser.ISEMPTY, mysqlParser.ISNULL, mysqlParser.ISSIMPLE, mysqlParser.IS_FREE_LOCK, mysqlParser.IS_IPV4, mysqlParser.IS_IPV4_COMPAT, mysqlParser.IS_IPV4_MAPPED, mysqlParser.IS_IPV6, mysqlParser.IS_USED_LOCK, mysqlParser.LAST_INSERT_ID, mysqlParser.LCASE, mysqlParser.LEAST, mysqlParser.LENGTH, mysqlParser.LINEFROMTEXT, mysqlParser.LINEFROMWKB, mysqlParser.LINESTRINGFROMTEXT, mysqlParser.LINESTRINGFROMWKB, mysqlParser.LN, mysqlParser.LOAD_FILE, mysqlParser.LOCATE, mysqlParser.LOG, mysqlParser.LOG10, mysqlParser.LOG2, mysqlParser.LOWER, mysqlParser.LPAD, mysqlParser.LTRIM, mysqlParser.MAKEDATE, mysqlParser.MAKETIME, mysqlParser.MAKE_SET, mysqlParser.MASTER_POS_WAIT, mysqlParser.MBRCONTAINS, mysqlParser.MBRDISJOINT, mysqlParser.MBREQUAL, mysqlParser.MBRINTERSECTS, mysqlParser.MBROVERLAPS, mysqlParser.MBRTOUCHES, mysqlParser.MBRWITHIN, mysqlParser.MD5, mysqlParser.MLINEFROMTEXT, mysqlParser.MLINEFROMWKB, mysqlParser.MONTHNAME, mysqlParser.MPOINTFROMTEXT, mysqlParser.MPOINTFROMWKB, mysqlParser.MPOLYFROMTEXT, mysqlParser.MPOLYFROMWKB, mysqlParser.MULTILINESTRINGFROMTEXT, mysqlParser.MULTILINESTRINGFROMWKB, mysqlParser.MULTIPOINTFROMTEXT, mysqlParser.MULTIPOINTFROMWKB, mysqlParser.MULTIPOLYGONFROMTEXT, mysqlParser.MULTIPOLYGONFROMWKB, mysqlParser.NAME_CONST, mysqlParser.NULLIF, mysqlParser.NUMGEOMETRIES, mysqlParser.NUMINTERIORRINGS, mysqlParser.NUMPOINTS, mysqlParser.OCT, mysqlParser.OCTET_LENGTH, mysqlParser.ORD, mysqlParser.OVERLAPS, mysqlParser.PERIOD_ADD, mysqlParser.PERIOD_DIFF, mysqlParser.PI, mysqlParser.POINTFROMTEXT, mysqlParser.POINTFROMWKB, mysqlParser.POINTN, mysqlParser.POLYFROMTEXT, mysqlParser.POLYFROMWKB, mysqlParser.POLYGONFROMTEXT, mysqlParser.POLYGONFROMWKB, mysqlParser.POW, mysqlParser.POWER, mysqlParser.QUOTE, mysqlParser.RADIANS, mysqlParser.RAND, mysqlParser.RANDOM_BYTES, mysqlParser.RELEASE_LOCK, mysqlParser.REVERSE, mysqlParser.ROUND, mysqlParser.ROW_COUNT, mysqlParser.RPAD, mysqlParser.RTRIM, mysqlParser.SEC_TO_TIME, mysqlParser.SESSION_USER, mysqlParser.SHA, mysqlParser.SHA1, mysqlParser.SHA2, mysqlParser.SIGN, mysqlParser.SIN, mysqlParser.SLEEP, mysqlParser.SOUNDEX, mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, mysqlParser.SQRT, mysqlParser.SRID, mysqlParser.STARTPOINT, mysqlParser.STRCMP, mysqlParser.STR_TO_DATE, mysqlParser.ST_AREA, mysqlParser.ST_ASBINARY, mysqlParser.ST_ASTEXT, mysqlParser.ST_ASWKB, mysqlParser.ST_ASWKT, mysqlParser.ST_BUFFER, mysqlParser.ST_CENTROID, mysqlParser.ST_CONTAINS, mysqlParser.ST_CROSSES, mysqlParser.ST_DIFFERENCE, mysqlParser.ST_DIMENSION, mysqlParser.ST_DISJOINT, mysqlParser.ST_DISTANCE, mysqlParser.ST_ENDPOINT, mysqlParser.ST_ENVELOPE, mysqlParser.ST_EQUALS, mysqlParser.ST_EXTERIORRING, mysqlParser.ST_GEOMCOLLFROMTEXT, mysqlParser.ST_GEOMCOLLFROMTXT, mysqlParser.ST_GEOMCOLLFROMWKB, mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, mysqlParser.ST_GEOMETRYFROMTEXT, mysqlParser.ST_GEOMETRYFROMWKB, mysqlParser.ST_GEOMETRYN, mysqlParser.ST_GEOMETRYTYPE, mysqlParser.ST_GEOMFROMTEXT, mysqlParser.ST_GEOMFROMWKB, mysqlParser.ST_INTERIORRINGN, mysqlParser.ST_INTERSECTION, mysqlParser.ST_INTERSECTS, mysqlParser.ST_ISCLOSED, mysqlParser.ST_ISEMPTY, mysqlParser.ST_ISSIMPLE, mysqlParser.ST_LINEFROMTEXT, mysqlParser.ST_LINEFROMWKB, mysqlParser.ST_LINESTRINGFROMTEXT, mysqlParser.ST_LINESTRINGFROMWKB, mysqlParser.ST_NUMGEOMETRIES, mysqlParser.ST_NUMINTERIORRING, mysqlParser.ST_NUMINTERIORRINGS, mysqlParser.ST_NUMPOINTS, mysqlParser.ST_OVERLAPS, mysqlParser.ST_POINTFROMTEXT, mysqlParser.ST_POINTFROMWKB, mysqlParser.ST_POINTN, mysqlParser.ST_POLYFROMTEXT, mysqlParser.ST_POLYFROMWKB, mysqlParser.ST_POLYGONFROMTEXT, mysqlParser.ST_POLYGONFROMWKB, mysqlParser.ST_SRID, mysqlParser.ST_STARTPOINT, mysqlParser.ST_SYMDIFFERENCE, mysqlParser.ST_TOUCHES, mysqlParser.ST_UNION, mysqlParser.ST_WITHIN, mysqlParser.ST_X, mysqlParser.ST_Y, mysqlParser.SUBDATE, mysqlParser.SUBSTRING_INDEX, mysqlParser.SUBTIME, mysqlParser.SYSTEM_USER, mysqlParser.TAN, mysqlParser.TIMEDIFF, mysqlParser.TIMESTAMPADD, mysqlParser.TIMESTAMPDIFF, mysqlParser.TIME_FORMAT, mysqlParser.TIME_TO_SEC, mysqlParser.TOUCHES, mysqlParser.TO_BASE64, mysqlParser.TO_DAYS, mysqlParser.TO_SECONDS, mysqlParser.UCASE, mysqlParser.UNCOMPRESS, mysqlParser.UNCOMPRESSED_LENGTH, mysqlParser.UNHEX, mysqlParser.UNIX_TIMESTAMP, mysqlParser.UPDATEXML, mysqlParser.UPPER, mysqlParser.UUID, mysqlParser.UUID_SHORT, mysqlParser.VALIDATE_PASSWORD_STRENGTH, mysqlParser.VERSION, mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, mysqlParser.WEEKDAY, mysqlParser.WEEKOFYEAR, mysqlParser.WEIGHT_STRING, mysqlParser.WITHIN, mysqlParser.YEARWEEK, mysqlParser.Y_FUNCTION, mysqlParser.X_FUNCTION, mysqlParser.CHARSET_REVERSE_QOUTE_STRING, mysqlParser.ID, mysqlParser.REVERSE_QUOTE_ID]:
                    self.state = 4948
                    localctx.partitionList = self.uidList()
                    pass
                elif token in [mysqlParser.ALL]:
                    self.state = 4949
                    self.match(mysqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4952
                self.match(mysqlParser.RR_BRACKET)


            self.state = 4962
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.INDEX or _la==mysqlParser.KEY or _la==mysqlParser.LR_BRACKET:
                self.state = 4956
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.INDEX or _la==mysqlParser.KEY:
                    self.state = 4955
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==mysqlParser.INDEX or _la==mysqlParser.KEY):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4958
                self.match(mysqlParser.LR_BRACKET)
                self.state = 4959
                localctx.indexList = self.uidList()
                self.state = 4960
                self.match(mysqlParser.RR_BRACKET)


            self.state = 4966
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.IGNORE:
                self.state = 4964
                self.match(mysqlParser.IGNORE)
                self.state = 4965
                self.match(mysqlParser.LEAVES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleDescribeStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.command = None # Token
            self.column = None # UidContext
            self.pattern = None # Token

        def tableName(self):
            return self.getTypedRuleContext(mysqlParser.TableNameContext,0)


        def EXPLAIN(self):
            return self.getToken(mysqlParser.EXPLAIN, 0)

        def DESCRIBE(self):
            return self.getToken(mysqlParser.DESCRIBE, 0)

        def DESC(self):
            return self.getToken(mysqlParser.DESC, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_simpleDescribeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleDescribeStatement" ):
                listener.enterSimpleDescribeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleDescribeStatement" ):
                listener.exitSimpleDescribeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleDescribeStatement" ):
                return visitor.visitSimpleDescribeStatement(self)
            else:
                return visitor.visitChildren(self)




    def simpleDescribeStatement(self):

        localctx = mysqlParser.SimpleDescribeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_simpleDescribeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4968
            localctx.command = self._input.LT(1)
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << mysqlParser.DESC) | (1 << mysqlParser.DESCRIBE) | (1 << mysqlParser.EXPLAIN))) != 0)):
                localctx.command = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4969
            self.tableName()
            self.state = 4972
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.LEFT, mysqlParser.RIGHT, mysqlParser.DATE, mysqlParser.TIME, mysqlParser.TIMESTAMP, mysqlParser.DATETIME, mysqlParser.YEAR, mysqlParser.TEXT, mysqlParser.ENUM, mysqlParser.COUNT, mysqlParser.POSITION, mysqlParser.ACCOUNT, mysqlParser.ACTION, mysqlParser.AFTER, mysqlParser.AGGREGATE, mysqlParser.ALGORITHM, mysqlParser.ANY, mysqlParser.AT, mysqlParser.AUTHORS, mysqlParser.AUTOCOMMIT, mysqlParser.AUTOEXTEND_SIZE, mysqlParser.AUTO_INCREMENT, mysqlParser.AVG_ROW_LENGTH, mysqlParser.BEGIN, mysqlParser.BINLOG, mysqlParser.BIT, mysqlParser.BLOCK, mysqlParser.BTREE, mysqlParser.CASCADED, mysqlParser.CHAIN, mysqlParser.CHANNEL, mysqlParser.CHECKSUM, mysqlParser.CIPHER, mysqlParser.CLIENT, mysqlParser.COALESCE, mysqlParser.CODE, mysqlParser.COLUMNS, mysqlParser.COLUMN_FORMAT, mysqlParser.COMMENT, mysqlParser.COMMIT, mysqlParser.COMPACT, mysqlParser.COMPLETION, mysqlParser.COMPRESSED, mysqlParser.COMPRESSION, mysqlParser.CONCURRENT, mysqlParser.CONNECTION, mysqlParser.CONSISTENT, mysqlParser.CONTAINS, mysqlParser.CONTEXT, mysqlParser.CONTRIBUTORS, mysqlParser.COPY, mysqlParser.CPU, mysqlParser.DATA, mysqlParser.DATAFILE, mysqlParser.DEALLOCATE, mysqlParser.DEFAULT_AUTH, mysqlParser.DEFINER, mysqlParser.DELAY_KEY_WRITE, mysqlParser.DIRECTORY, mysqlParser.DISABLE, mysqlParser.DISCARD, mysqlParser.DISK, mysqlParser.DO, mysqlParser.DUMPFILE, mysqlParser.DUPLICATE, mysqlParser.DYNAMIC, mysqlParser.ENABLE, mysqlParser.ENCRYPTION, mysqlParser.ENDS, mysqlParser.ENGINE, mysqlParser.ENGINES, mysqlParser.ERROR, mysqlParser.ERRORS, mysqlParser.ESCAPE, mysqlParser.EVEN, mysqlParser.EVENT, mysqlParser.EVENTS, mysqlParser.EVERY, mysqlParser.EXCHANGE, mysqlParser.EXCLUSIVE, mysqlParser.EXPIRE, mysqlParser.EXTENT_SIZE, mysqlParser.FAULTS, mysqlParser.FIELDS, mysqlParser.FILE_BLOCK_SIZE, mysqlParser.FILTER, mysqlParser.FIRST, mysqlParser.FIXED, mysqlParser.FOLLOWS, mysqlParser.FULL, mysqlParser.FUNCTION, mysqlParser.GLOBAL, mysqlParser.GRANTS, mysqlParser.GROUP_REPLICATION, mysqlParser.HASH, mysqlParser.HOST, mysqlParser.IDENTIFIED, mysqlParser.IGNORE_SERVER_IDS, mysqlParser.IMPORT, mysqlParser.INDEXES, mysqlParser.INITIAL_SIZE, mysqlParser.INPLACE, mysqlParser.INSERT_METHOD, mysqlParser.INSTANCE, mysqlParser.INVOKER, mysqlParser.IO, mysqlParser.IO_THREAD, mysqlParser.IPC, mysqlParser.ISOLATION, mysqlParser.ISSUER, mysqlParser.KEY_BLOCK_SIZE, mysqlParser.LANGUAGE, mysqlParser.LAST, mysqlParser.LEAVES, mysqlParser.LESS, mysqlParser.LEVEL, mysqlParser.LIST, mysqlParser.LOCAL, mysqlParser.LOGFILE, mysqlParser.LOGS, mysqlParser.MASTER, mysqlParser.MASTER_AUTO_POSITION, mysqlParser.MASTER_CONNECT_RETRY, mysqlParser.MASTER_DELAY, mysqlParser.MASTER_HEARTBEAT_PERIOD, mysqlParser.MASTER_HOST, mysqlParser.MASTER_LOG_FILE, mysqlParser.MASTER_LOG_POS, mysqlParser.MASTER_PASSWORD, mysqlParser.MASTER_PORT, mysqlParser.MASTER_RETRY_COUNT, mysqlParser.MASTER_SSL, mysqlParser.MASTER_SSL_CA, mysqlParser.MASTER_SSL_CAPATH, mysqlParser.MASTER_SSL_CERT, mysqlParser.MASTER_SSL_CIPHER, mysqlParser.MASTER_SSL_CRL, mysqlParser.MASTER_SSL_CRLPATH, mysqlParser.MASTER_SSL_KEY, mysqlParser.MASTER_TLS_VERSION, mysqlParser.MASTER_USER, mysqlParser.MAX_CONNECTIONS_PER_HOUR, mysqlParser.MAX_QUERIES_PER_HOUR, mysqlParser.MAX_ROWS, mysqlParser.MAX_SIZE, mysqlParser.MAX_UPDATES_PER_HOUR, mysqlParser.MAX_USER_CONNECTIONS, mysqlParser.MERGE, mysqlParser.MID, mysqlParser.MIGRATE, mysqlParser.MIN_ROWS, mysqlParser.MODIFY, mysqlParser.MUTEX, mysqlParser.MYSQL, mysqlParser.NAME, mysqlParser.NAMES, mysqlParser.NCHAR, mysqlParser.NEVER, mysqlParser.NO, mysqlParser.NODEGROUP, mysqlParser.NONE, mysqlParser.OFFLINE, mysqlParser.OFFSET, mysqlParser.OJ, mysqlParser.OLD_PASSWORD, mysqlParser.ONE, mysqlParser.ONLINE, mysqlParser.ONLY, mysqlParser.OPTIMIZER_COSTS, mysqlParser.OPTIONS, mysqlParser.OWNER, mysqlParser.PACK_KEYS, mysqlParser.PAGE, mysqlParser.PARSER, mysqlParser.PARTIAL, mysqlParser.PARTITIONING, mysqlParser.PARTITIONS, mysqlParser.PASSWORD, mysqlParser.PHASE, mysqlParser.PLUGIN_DIR, mysqlParser.PLUGINS, mysqlParser.PORT, mysqlParser.PRECEDES, mysqlParser.PREPARE, mysqlParser.PRESERVE, mysqlParser.PREV, mysqlParser.PROCESSLIST, mysqlParser.PROFILE, mysqlParser.PROFILES, mysqlParser.PROXY, mysqlParser.QUERY, mysqlParser.QUICK, mysqlParser.REBUILD, mysqlParser.RECOVER, mysqlParser.REDO_BUFFER_SIZE, mysqlParser.REDUNDANT, mysqlParser.RELAY_LOG_FILE, mysqlParser.RELAY_LOG_POS, mysqlParser.RELAYLOG, mysqlParser.REMOVE, mysqlParser.REORGANIZE, mysqlParser.REPAIR, mysqlParser.REPLICATE_DO_DB, mysqlParser.REPLICATE_DO_TABLE, mysqlParser.REPLICATE_IGNORE_DB, mysqlParser.REPLICATE_IGNORE_TABLE, mysqlParser.REPLICATE_REWRITE_DB, mysqlParser.REPLICATE_WILD_DO_TABLE, mysqlParser.REPLICATE_WILD_IGNORE_TABLE, mysqlParser.REPLICATION, mysqlParser.RESUME, mysqlParser.RETURNS, mysqlParser.ROLLBACK, mysqlParser.ROLLUP, mysqlParser.ROTATE, mysqlParser.ROW, mysqlParser.ROWS, mysqlParser.ROW_FORMAT, mysqlParser.SAVEPOINT, mysqlParser.SCHEDULE, mysqlParser.SECURITY, mysqlParser.SERVER, mysqlParser.SESSION, mysqlParser.SHARE, mysqlParser.SHARED, mysqlParser.SIGNED, mysqlParser.SIMPLE, mysqlParser.SLAVE, mysqlParser.SNAPSHOT, mysqlParser.SOCKET, mysqlParser.SOME, mysqlParser.SOUNDS, mysqlParser.SOURCE, mysqlParser.SQL_AFTER_GTIDS, mysqlParser.SQL_AFTER_MTS_GAPS, mysqlParser.SQL_BEFORE_GTIDS, mysqlParser.SQL_BUFFER_RESULT, mysqlParser.SQL_CACHE, mysqlParser.SQL_NO_CACHE, mysqlParser.SQL_THREAD, mysqlParser.START, mysqlParser.STARTS, mysqlParser.STATS_AUTO_RECALC, mysqlParser.STATS_PERSISTENT, mysqlParser.STATS_SAMPLE_PAGES, mysqlParser.STATUS, mysqlParser.STOP, mysqlParser.STORAGE, mysqlParser.STRING, mysqlParser.SUBJECT, mysqlParser.SUBPARTITION, mysqlParser.SUBPARTITIONS, mysqlParser.SUSPEND, mysqlParser.SWAPS, mysqlParser.SWITCHES, mysqlParser.TABLESPACE, mysqlParser.TEMPORARY, mysqlParser.TEMPTABLE, mysqlParser.THAN, mysqlParser.TRANSACTION, mysqlParser.TRUNCATE, mysqlParser.UNDEFINED, mysqlParser.UNDOFILE, mysqlParser.UNDO_BUFFER_SIZE, mysqlParser.UNKNOWN, mysqlParser.UPGRADE, mysqlParser.USER, mysqlParser.VALIDATION, mysqlParser.VALUE, mysqlParser.VARIABLES, mysqlParser.VIEW, mysqlParser.WAIT, mysqlParser.WARNINGS, mysqlParser.WITHOUT, mysqlParser.WORK, mysqlParser.WRAPPER, mysqlParser.X509, mysqlParser.XA, mysqlParser.XML, mysqlParser.QUARTER, mysqlParser.MONTH, mysqlParser.DAY, mysqlParser.HOUR, mysqlParser.MINUTE, mysqlParser.WEEK, mysqlParser.SECOND, mysqlParser.MICROSECOND, mysqlParser.TABLES, mysqlParser.ROUTINE, mysqlParser.EXECUTE, mysqlParser.FILE, mysqlParser.PROCESS, mysqlParser.RELOAD, mysqlParser.SHUTDOWN, mysqlParser.SUPER, mysqlParser.PRIVILEGES, mysqlParser.ARMSCII8, mysqlParser.ASCII, mysqlParser.BIG5, mysqlParser.CP1250, mysqlParser.CP1251, mysqlParser.CP1256, mysqlParser.CP1257, mysqlParser.CP850, mysqlParser.CP852, mysqlParser.CP866, mysqlParser.CP932, mysqlParser.DEC8, mysqlParser.EUCJPMS, mysqlParser.EUCKR, mysqlParser.GB2312, mysqlParser.GBK, mysqlParser.GEOSTD8, mysqlParser.GREEK, mysqlParser.HEBREW, mysqlParser.HP8, mysqlParser.KEYBCS2, mysqlParser.KOI8R, mysqlParser.KOI8U, mysqlParser.LATIN1, mysqlParser.LATIN2, mysqlParser.LATIN5, mysqlParser.LATIN7, mysqlParser.MACCE, mysqlParser.MACROMAN, mysqlParser.SJIS, mysqlParser.SWE7, mysqlParser.TIS620, mysqlParser.UCS2, mysqlParser.UJIS, mysqlParser.UTF16, mysqlParser.UTF16LE, mysqlParser.UTF32, mysqlParser.UTF8, mysqlParser.UTF8MB3, mysqlParser.UTF8MB4, mysqlParser.ARCHIVE, mysqlParser.BLACKHOLE, mysqlParser.CSV, mysqlParser.FEDERATED, mysqlParser.INNODB, mysqlParser.MEMORY, mysqlParser.MRG_MYISAM, mysqlParser.MYISAM, mysqlParser.NDB, mysqlParser.NDBCLUSTER, mysqlParser.PERFOMANCE_SCHEMA, mysqlParser.REPEATABLE, mysqlParser.COMMITTED, mysqlParser.UNCOMMITTED, mysqlParser.SERIALIZABLE, mysqlParser.GEOMETRYCOLLECTION, mysqlParser.LINESTRING, mysqlParser.MULTILINESTRING, mysqlParser.MULTIPOINT, mysqlParser.MULTIPOLYGON, mysqlParser.POINT, mysqlParser.POLYGON, mysqlParser.ABS, mysqlParser.ACOS, mysqlParser.ADDDATE, mysqlParser.ADDTIME, mysqlParser.AES_DECRYPT, mysqlParser.AES_ENCRYPT, mysqlParser.AREA, mysqlParser.ASBINARY, mysqlParser.ASIN, mysqlParser.ASTEXT, mysqlParser.ASWKB, mysqlParser.ASWKT, mysqlParser.ASYMMETRIC_DECRYPT, mysqlParser.ASYMMETRIC_DERIVE, mysqlParser.ASYMMETRIC_ENCRYPT, mysqlParser.ASYMMETRIC_SIGN, mysqlParser.ASYMMETRIC_VERIFY, mysqlParser.ATAN, mysqlParser.ATAN2, mysqlParser.BENCHMARK, mysqlParser.BIN, mysqlParser.BIT_COUNT, mysqlParser.BIT_LENGTH, mysqlParser.BUFFER, mysqlParser.CEIL, mysqlParser.CEILING, mysqlParser.CENTROID, mysqlParser.CHARACTER_LENGTH, mysqlParser.CHARSET, mysqlParser.CHAR_LENGTH, mysqlParser.COERCIBILITY, mysqlParser.COLLATION, mysqlParser.COMPRESS, mysqlParser.CONCAT, mysqlParser.CONCAT_WS, mysqlParser.CONNECTION_ID, mysqlParser.CONV, mysqlParser.CONVERT_TZ, mysqlParser.COS, mysqlParser.COT, mysqlParser.CRC32, mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY, mysqlParser.CREATE_ASYMMETRIC_PUB_KEY, mysqlParser.CREATE_DH_PARAMETERS, mysqlParser.CREATE_DIGEST, mysqlParser.CROSSES, mysqlParser.DATEDIFF, mysqlParser.DATE_FORMAT, mysqlParser.DAYNAME, mysqlParser.DAYOFMONTH, mysqlParser.DAYOFWEEK, mysqlParser.DAYOFYEAR, mysqlParser.DECODE, mysqlParser.DEGREES, mysqlParser.DES_DECRYPT, mysqlParser.DES_ENCRYPT, mysqlParser.DIMENSION, mysqlParser.DISJOINT, mysqlParser.ELT, mysqlParser.ENCODE, mysqlParser.ENCRYPT, mysqlParser.ENDPOINT, mysqlParser.ENVELOPE, mysqlParser.EQUALS, mysqlParser.EXP, mysqlParser.EXPORT_SET, mysqlParser.EXTERIORRING, mysqlParser.EXTRACTVALUE, mysqlParser.FIELD, mysqlParser.FIND_IN_SET, mysqlParser.FLOOR, mysqlParser.FORMAT, mysqlParser.FOUND_ROWS, mysqlParser.FROM_BASE64, mysqlParser.FROM_DAYS, mysqlParser.FROM_UNIXTIME, mysqlParser.GEOMCOLLFROMTEXT, mysqlParser.GEOMCOLLFROMWKB, mysqlParser.GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.GEOMETRYCOLLECTIONFROMWKB, mysqlParser.GEOMETRYFROMTEXT, mysqlParser.GEOMETRYFROMWKB, mysqlParser.GEOMETRYN, mysqlParser.GEOMETRYTYPE, mysqlParser.GEOMFROMTEXT, mysqlParser.GEOMFROMWKB, mysqlParser.GET_FORMAT, mysqlParser.GET_LOCK, mysqlParser.GLENGTH, mysqlParser.GREATEST, mysqlParser.GTID_SUBSET, mysqlParser.GTID_SUBTRACT, mysqlParser.HEX, mysqlParser.IFNULL, mysqlParser.INET6_ATON, mysqlParser.INET6_NTOA, mysqlParser.INET_ATON, mysqlParser.INET_NTOA, mysqlParser.INSTR, mysqlParser.INTERIORRINGN, mysqlParser.INTERSECTS, mysqlParser.ISCLOSED, mysqlParser.ISEMPTY, mysqlParser.ISNULL, mysqlParser.ISSIMPLE, mysqlParser.IS_FREE_LOCK, mysqlParser.IS_IPV4, mysqlParser.IS_IPV4_COMPAT, mysqlParser.IS_IPV4_MAPPED, mysqlParser.IS_IPV6, mysqlParser.IS_USED_LOCK, mysqlParser.LAST_INSERT_ID, mysqlParser.LCASE, mysqlParser.LEAST, mysqlParser.LENGTH, mysqlParser.LINEFROMTEXT, mysqlParser.LINEFROMWKB, mysqlParser.LINESTRINGFROMTEXT, mysqlParser.LINESTRINGFROMWKB, mysqlParser.LN, mysqlParser.LOAD_FILE, mysqlParser.LOCATE, mysqlParser.LOG, mysqlParser.LOG10, mysqlParser.LOG2, mysqlParser.LOWER, mysqlParser.LPAD, mysqlParser.LTRIM, mysqlParser.MAKEDATE, mysqlParser.MAKETIME, mysqlParser.MAKE_SET, mysqlParser.MASTER_POS_WAIT, mysqlParser.MBRCONTAINS, mysqlParser.MBRDISJOINT, mysqlParser.MBREQUAL, mysqlParser.MBRINTERSECTS, mysqlParser.MBROVERLAPS, mysqlParser.MBRTOUCHES, mysqlParser.MBRWITHIN, mysqlParser.MD5, mysqlParser.MLINEFROMTEXT, mysqlParser.MLINEFROMWKB, mysqlParser.MONTHNAME, mysqlParser.MPOINTFROMTEXT, mysqlParser.MPOINTFROMWKB, mysqlParser.MPOLYFROMTEXT, mysqlParser.MPOLYFROMWKB, mysqlParser.MULTILINESTRINGFROMTEXT, mysqlParser.MULTILINESTRINGFROMWKB, mysqlParser.MULTIPOINTFROMTEXT, mysqlParser.MULTIPOINTFROMWKB, mysqlParser.MULTIPOLYGONFROMTEXT, mysqlParser.MULTIPOLYGONFROMWKB, mysqlParser.NAME_CONST, mysqlParser.NULLIF, mysqlParser.NUMGEOMETRIES, mysqlParser.NUMINTERIORRINGS, mysqlParser.NUMPOINTS, mysqlParser.OCT, mysqlParser.OCTET_LENGTH, mysqlParser.ORD, mysqlParser.OVERLAPS, mysqlParser.PERIOD_ADD, mysqlParser.PERIOD_DIFF, mysqlParser.PI, mysqlParser.POINTFROMTEXT, mysqlParser.POINTFROMWKB, mysqlParser.POINTN, mysqlParser.POLYFROMTEXT, mysqlParser.POLYFROMWKB, mysqlParser.POLYGONFROMTEXT, mysqlParser.POLYGONFROMWKB, mysqlParser.POW, mysqlParser.POWER, mysqlParser.QUOTE, mysqlParser.RADIANS, mysqlParser.RAND, mysqlParser.RANDOM_BYTES, mysqlParser.RELEASE_LOCK, mysqlParser.REVERSE, mysqlParser.ROUND, mysqlParser.ROW_COUNT, mysqlParser.RPAD, mysqlParser.RTRIM, mysqlParser.SEC_TO_TIME, mysqlParser.SESSION_USER, mysqlParser.SHA, mysqlParser.SHA1, mysqlParser.SHA2, mysqlParser.SIGN, mysqlParser.SIN, mysqlParser.SLEEP, mysqlParser.SOUNDEX, mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, mysqlParser.SQRT, mysqlParser.SRID, mysqlParser.STARTPOINT, mysqlParser.STRCMP, mysqlParser.STR_TO_DATE, mysqlParser.ST_AREA, mysqlParser.ST_ASBINARY, mysqlParser.ST_ASTEXT, mysqlParser.ST_ASWKB, mysqlParser.ST_ASWKT, mysqlParser.ST_BUFFER, mysqlParser.ST_CENTROID, mysqlParser.ST_CONTAINS, mysqlParser.ST_CROSSES, mysqlParser.ST_DIFFERENCE, mysqlParser.ST_DIMENSION, mysqlParser.ST_DISJOINT, mysqlParser.ST_DISTANCE, mysqlParser.ST_ENDPOINT, mysqlParser.ST_ENVELOPE, mysqlParser.ST_EQUALS, mysqlParser.ST_EXTERIORRING, mysqlParser.ST_GEOMCOLLFROMTEXT, mysqlParser.ST_GEOMCOLLFROMTXT, mysqlParser.ST_GEOMCOLLFROMWKB, mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, mysqlParser.ST_GEOMETRYFROMTEXT, mysqlParser.ST_GEOMETRYFROMWKB, mysqlParser.ST_GEOMETRYN, mysqlParser.ST_GEOMETRYTYPE, mysqlParser.ST_GEOMFROMTEXT, mysqlParser.ST_GEOMFROMWKB, mysqlParser.ST_INTERIORRINGN, mysqlParser.ST_INTERSECTION, mysqlParser.ST_INTERSECTS, mysqlParser.ST_ISCLOSED, mysqlParser.ST_ISEMPTY, mysqlParser.ST_ISSIMPLE, mysqlParser.ST_LINEFROMTEXT, mysqlParser.ST_LINEFROMWKB, mysqlParser.ST_LINESTRINGFROMTEXT, mysqlParser.ST_LINESTRINGFROMWKB, mysqlParser.ST_NUMGEOMETRIES, mysqlParser.ST_NUMINTERIORRING, mysqlParser.ST_NUMINTERIORRINGS, mysqlParser.ST_NUMPOINTS, mysqlParser.ST_OVERLAPS, mysqlParser.ST_POINTFROMTEXT, mysqlParser.ST_POINTFROMWKB, mysqlParser.ST_POINTN, mysqlParser.ST_POLYFROMTEXT, mysqlParser.ST_POLYFROMWKB, mysqlParser.ST_POLYGONFROMTEXT, mysqlParser.ST_POLYGONFROMWKB, mysqlParser.ST_SRID, mysqlParser.ST_STARTPOINT, mysqlParser.ST_SYMDIFFERENCE, mysqlParser.ST_TOUCHES, mysqlParser.ST_UNION, mysqlParser.ST_WITHIN, mysqlParser.ST_X, mysqlParser.ST_Y, mysqlParser.SUBDATE, mysqlParser.SUBSTRING_INDEX, mysqlParser.SUBTIME, mysqlParser.SYSTEM_USER, mysqlParser.TAN, mysqlParser.TIMEDIFF, mysqlParser.TIMESTAMPADD, mysqlParser.TIMESTAMPDIFF, mysqlParser.TIME_FORMAT, mysqlParser.TIME_TO_SEC, mysqlParser.TOUCHES, mysqlParser.TO_BASE64, mysqlParser.TO_DAYS, mysqlParser.TO_SECONDS, mysqlParser.UCASE, mysqlParser.UNCOMPRESS, mysqlParser.UNCOMPRESSED_LENGTH, mysqlParser.UNHEX, mysqlParser.UNIX_TIMESTAMP, mysqlParser.UPDATEXML, mysqlParser.UPPER, mysqlParser.UUID, mysqlParser.UUID_SHORT, mysqlParser.VALIDATE_PASSWORD_STRENGTH, mysqlParser.VERSION, mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, mysqlParser.WEEKDAY, mysqlParser.WEEKOFYEAR, mysqlParser.WEIGHT_STRING, mysqlParser.WITHIN, mysqlParser.YEARWEEK, mysqlParser.Y_FUNCTION, mysqlParser.X_FUNCTION, mysqlParser.CHARSET_REVERSE_QOUTE_STRING, mysqlParser.ID, mysqlParser.REVERSE_QUOTE_ID]:
                self.state = 4970
                localctx.column = self.uid()
                pass
            elif token in [mysqlParser.STRING_LITERAL]:
                self.state = 4971
                localctx.pattern = self.match(mysqlParser.STRING_LITERAL)
                pass
            elif token in [mysqlParser.EOF, mysqlParser.MINUS, mysqlParser.SEMI]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FullDescribeStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.command = None # Token
            self.formatType = None # Token
            self.formatValue = None # Token

        def describeObjectClause(self):
            return self.getTypedRuleContext(mysqlParser.DescribeObjectClauseContext,0)


        def EXPLAIN(self):
            return self.getToken(mysqlParser.EXPLAIN, 0)

        def DESCRIBE(self):
            return self.getToken(mysqlParser.DESCRIBE, 0)

        def DESC(self):
            return self.getToken(mysqlParser.DESC, 0)

        def EXTENDED(self):
            return self.getToken(mysqlParser.EXTENDED, 0)

        def PARTITIONS(self):
            return self.getToken(mysqlParser.PARTITIONS, 0)

        def FORMAT(self):
            return self.getToken(mysqlParser.FORMAT, 0)

        def TRADITIONAL(self):
            return self.getToken(mysqlParser.TRADITIONAL, 0)

        def JSON(self):
            return self.getToken(mysqlParser.JSON, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_fullDescribeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullDescribeStatement" ):
                listener.enterFullDescribeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullDescribeStatement" ):
                listener.exitFullDescribeStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFullDescribeStatement" ):
                return visitor.visitFullDescribeStatement(self)
            else:
                return visitor.visitChildren(self)




    def fullDescribeStatement(self):

        localctx = mysqlParser.FullDescribeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_fullDescribeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4974
            localctx.command = self._input.LT(1)
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << mysqlParser.DESC) | (1 << mysqlParser.DESCRIBE) | (1 << mysqlParser.EXPLAIN))) != 0)):
                localctx.command = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.EXTENDED or _la==mysqlParser.PARTITIONS or _la==mysqlParser.FORMAT:
                self.state = 4975
                localctx.formatType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.EXTENDED or _la==mysqlParser.PARTITIONS or _la==mysqlParser.FORMAT):
                    localctx.formatType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4976
                self.match(mysqlParser.EQUAL_SYMBOL)
                self.state = 4977
                localctx.formatValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.JSON or _la==mysqlParser.TRADITIONAL):
                    localctx.formatValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4980
            self.describeObjectClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HelpStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HELP(self):
            return self.getToken(mysqlParser.HELP, 0)

        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_helpStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpStatement" ):
                listener.enterHelpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpStatement" ):
                listener.exitHelpStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHelpStatement" ):
                return visitor.visitHelpStatement(self)
            else:
                return visitor.visitChildren(self)




    def helpStatement(self):

        localctx = mysqlParser.HelpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_helpStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4982
            self.match(mysqlParser.HELP)
            self.state = 4983
            self.match(mysqlParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UseStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE(self):
            return self.getToken(mysqlParser.USE, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_useStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseStatement" ):
                listener.enterUseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseStatement" ):
                listener.exitUseStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUseStatement" ):
                return visitor.visitUseStatement(self)
            else:
                return visitor.visitChildren(self)




    def useStatement(self):

        localctx = mysqlParser.UseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_useStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4985
            self.match(mysqlParser.USE)
            self.state = 4986
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DescribeObjectClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_describeObjectClause

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DescribeStatementsContext(DescribeObjectClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.DescribeObjectClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def selectStatement(self):
            return self.getTypedRuleContext(mysqlParser.SelectStatementContext,0)

        def deleteStatement(self):
            return self.getTypedRuleContext(mysqlParser.DeleteStatementContext,0)

        def insertStatement(self):
            return self.getTypedRuleContext(mysqlParser.InsertStatementContext,0)

        def replaceStatement(self):
            return self.getTypedRuleContext(mysqlParser.ReplaceStatementContext,0)

        def updateStatement(self):
            return self.getTypedRuleContext(mysqlParser.UpdateStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeStatements" ):
                listener.enterDescribeStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeStatements" ):
                listener.exitDescribeStatements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeStatements" ):
                return visitor.visitDescribeStatements(self)
            else:
                return visitor.visitChildren(self)


    class DescribeConnectionContext(DescribeObjectClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.DescribeObjectClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FOR(self):
            return self.getToken(mysqlParser.FOR, 0)
        def CONNECTION(self):
            return self.getToken(mysqlParser.CONNECTION, 0)
        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeConnection" ):
                listener.enterDescribeConnection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeConnection" ):
                listener.exitDescribeConnection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDescribeConnection" ):
                return visitor.visitDescribeConnection(self)
            else:
                return visitor.visitChildren(self)



    def describeObjectClause(self):

        localctx = mysqlParser.DescribeObjectClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_describeObjectClause)
        try:
            self.state = 4998
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.DELETE, mysqlParser.INSERT, mysqlParser.REPLACE, mysqlParser.SELECT, mysqlParser.UPDATE, mysqlParser.LR_BRACKET]:
                localctx = mysqlParser.DescribeStatementsContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4993
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [mysqlParser.SELECT, mysqlParser.LR_BRACKET]:
                    self.state = 4988
                    self.selectStatement()
                    pass
                elif token in [mysqlParser.DELETE]:
                    self.state = 4989
                    self.deleteStatement()
                    pass
                elif token in [mysqlParser.INSERT]:
                    self.state = 4990
                    self.insertStatement()
                    pass
                elif token in [mysqlParser.REPLACE]:
                    self.state = 4991
                    self.replaceStatement()
                    pass
                elif token in [mysqlParser.UPDATE]:
                    self.state = 4992
                    self.updateStatement()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [mysqlParser.FOR]:
                localctx = mysqlParser.DescribeConnectionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4995
                self.match(mysqlParser.FOR)
                self.state = 4996
                self.match(mysqlParser.CONNECTION)
                self.state = 4997
                self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FullIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UidContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UidContext,i)


        def DOT_ID(self):
            return self.getToken(mysqlParser.DOT_ID, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_fullId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullId" ):
                listener.enterFullId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullId" ):
                listener.exitFullId(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFullId" ):
                return visitor.visitFullId(self)
            else:
                return visitor.visitChildren(self)




    def fullId(self):

        localctx = mysqlParser.FullIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_fullId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5000
            self.uid()
            self.state = 5004
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,720,self._ctx)
            if la_ == 1:
                self.state = 5001
                self.match(mysqlParser.DOT_ID)

            elif la_ == 2:
                self.state = 5002
                self.match(mysqlParser.DOT)
                self.state = 5003
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullId(self):
            return self.getTypedRuleContext(mysqlParser.FullIdContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_tableName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTableName" ):
                return visitor.visitTableName(self)
            else:
                return visitor.visitChildren(self)




    def tableName(self):

        localctx = mysqlParser.TableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_tableName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5006
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FullColumnNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def dottedId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.DottedIdContext)
            else:
                return self.getTypedRuleContext(mysqlParser.DottedIdContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_fullColumnName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullColumnName" ):
                listener.enterFullColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullColumnName" ):
                listener.exitFullColumnName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFullColumnName" ):
                return visitor.visitFullColumnName(self)
            else:
                return visitor.visitChildren(self)




    def fullColumnName(self):

        localctx = mysqlParser.FullColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_fullColumnName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5008
            self.uid()
            self.state = 5013
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,722,self._ctx)
            if la_ == 1:
                self.state = 5009
                self.dottedId()
                self.state = 5011
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,721,self._ctx)
                if la_ == 1:
                    self.state = 5010
                    self.dottedId()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndexColumnNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def decimalLiteral(self):
            return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,0)


        def ASC(self):
            return self.getToken(mysqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(mysqlParser.DESC, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_indexColumnName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexColumnName" ):
                listener.enterIndexColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexColumnName" ):
                listener.exitIndexColumnName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexColumnName" ):
                return visitor.visitIndexColumnName(self)
            else:
                return visitor.visitChildren(self)




    def indexColumnName(self):

        localctx = mysqlParser.IndexColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_indexColumnName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5015
            self.uid()
            self.state = 5020
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.LR_BRACKET:
                self.state = 5016
                self.match(mysqlParser.LR_BRACKET)
                self.state = 5017
                self.decimalLiteral()
                self.state = 5018
                self.match(mysqlParser.RR_BRACKET)


            self.state = 5023
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.ASC or _la==mysqlParser.DESC:
                self.state = 5022
                _la = self._input.LA(1)
                if not(_la==mysqlParser.ASC or _la==mysqlParser.DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UserNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_USER_NAME(self):
            return self.getToken(mysqlParser.STRING_USER_NAME, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_userName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserName" ):
                listener.enterUserName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserName" ):
                listener.exitUserName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserName" ):
                return visitor.visitUserName(self)
            else:
                return visitor.visitChildren(self)




    def userName(self):

        localctx = mysqlParser.UserNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_userName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5025
            self.match(mysqlParser.STRING_USER_NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MysqlVariableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(mysqlParser.LOCAL_ID, 0)

        def GLOBAL_ID(self):
            return self.getToken(mysqlParser.GLOBAL_ID, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_mysqlVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMysqlVariable" ):
                listener.enterMysqlVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMysqlVariable" ):
                listener.exitMysqlVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMysqlVariable" ):
                return visitor.visitMysqlVariable(self)
            else:
                return visitor.visitChildren(self)




    def mysqlVariable(self):

        localctx = mysqlParser.MysqlVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_mysqlVariable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5027
            _la = self._input.LA(1)
            if not(_la==mysqlParser.LOCAL_ID or _la==mysqlParser.GLOBAL_ID):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CharsetNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY(self):
            return self.getToken(mysqlParser.BINARY, 0)

        def charsetNameBase(self):
            return self.getTypedRuleContext(mysqlParser.CharsetNameBaseContext,0)


        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def CHARSET_REVERSE_QOUTE_STRING(self):
            return self.getToken(mysqlParser.CHARSET_REVERSE_QOUTE_STRING, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_charsetName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharsetName" ):
                listener.enterCharsetName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharsetName" ):
                listener.exitCharsetName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharsetName" ):
                return visitor.visitCharsetName(self)
            else:
                return visitor.visitChildren(self)




    def charsetName(self):

        localctx = mysqlParser.CharsetNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_charsetName)
        try:
            self.state = 5033
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.BINARY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5029
                self.match(mysqlParser.BINARY)
                pass
            elif token in [mysqlParser.ARMSCII8, mysqlParser.ASCII, mysqlParser.BIG5, mysqlParser.CP1250, mysqlParser.CP1251, mysqlParser.CP1256, mysqlParser.CP1257, mysqlParser.CP850, mysqlParser.CP852, mysqlParser.CP866, mysqlParser.CP932, mysqlParser.DEC8, mysqlParser.EUCJPMS, mysqlParser.EUCKR, mysqlParser.GB2312, mysqlParser.GBK, mysqlParser.GEOSTD8, mysqlParser.GREEK, mysqlParser.HEBREW, mysqlParser.HP8, mysqlParser.KEYBCS2, mysqlParser.KOI8R, mysqlParser.KOI8U, mysqlParser.LATIN1, mysqlParser.LATIN2, mysqlParser.LATIN5, mysqlParser.LATIN7, mysqlParser.MACCE, mysqlParser.MACROMAN, mysqlParser.SJIS, mysqlParser.SWE7, mysqlParser.TIS620, mysqlParser.UCS2, mysqlParser.UJIS, mysqlParser.UTF16, mysqlParser.UTF16LE, mysqlParser.UTF32, mysqlParser.UTF8, mysqlParser.UTF8MB3, mysqlParser.UTF8MB4]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5030
                self.charsetNameBase()
                pass
            elif token in [mysqlParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5031
                self.match(mysqlParser.STRING_LITERAL)
                pass
            elif token in [mysqlParser.CHARSET_REVERSE_QOUTE_STRING]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5032
                self.match(mysqlParser.CHARSET_REVERSE_QOUTE_STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CollationNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_collationName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollationName" ):
                listener.enterCollationName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollationName" ):
                listener.exitCollationName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollationName" ):
                return visitor.visitCollationName(self)
            else:
                return visitor.visitChildren(self)




    def collationName(self):

        localctx = mysqlParser.CollationNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_collationName)
        try:
            self.state = 5037
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.LEFT, mysqlParser.RIGHT, mysqlParser.DATE, mysqlParser.TIME, mysqlParser.TIMESTAMP, mysqlParser.DATETIME, mysqlParser.YEAR, mysqlParser.TEXT, mysqlParser.ENUM, mysqlParser.COUNT, mysqlParser.POSITION, mysqlParser.ACCOUNT, mysqlParser.ACTION, mysqlParser.AFTER, mysqlParser.AGGREGATE, mysqlParser.ALGORITHM, mysqlParser.ANY, mysqlParser.AT, mysqlParser.AUTHORS, mysqlParser.AUTOCOMMIT, mysqlParser.AUTOEXTEND_SIZE, mysqlParser.AUTO_INCREMENT, mysqlParser.AVG_ROW_LENGTH, mysqlParser.BEGIN, mysqlParser.BINLOG, mysqlParser.BIT, mysqlParser.BLOCK, mysqlParser.BTREE, mysqlParser.CASCADED, mysqlParser.CHAIN, mysqlParser.CHANNEL, mysqlParser.CHECKSUM, mysqlParser.CIPHER, mysqlParser.CLIENT, mysqlParser.COALESCE, mysqlParser.CODE, mysqlParser.COLUMNS, mysqlParser.COLUMN_FORMAT, mysqlParser.COMMENT, mysqlParser.COMMIT, mysqlParser.COMPACT, mysqlParser.COMPLETION, mysqlParser.COMPRESSED, mysqlParser.COMPRESSION, mysqlParser.CONCURRENT, mysqlParser.CONNECTION, mysqlParser.CONSISTENT, mysqlParser.CONTAINS, mysqlParser.CONTEXT, mysqlParser.CONTRIBUTORS, mysqlParser.COPY, mysqlParser.CPU, mysqlParser.DATA, mysqlParser.DATAFILE, mysqlParser.DEALLOCATE, mysqlParser.DEFAULT_AUTH, mysqlParser.DEFINER, mysqlParser.DELAY_KEY_WRITE, mysqlParser.DIRECTORY, mysqlParser.DISABLE, mysqlParser.DISCARD, mysqlParser.DISK, mysqlParser.DO, mysqlParser.DUMPFILE, mysqlParser.DUPLICATE, mysqlParser.DYNAMIC, mysqlParser.ENABLE, mysqlParser.ENCRYPTION, mysqlParser.ENDS, mysqlParser.ENGINE, mysqlParser.ENGINES, mysqlParser.ERROR, mysqlParser.ERRORS, mysqlParser.ESCAPE, mysqlParser.EVEN, mysqlParser.EVENT, mysqlParser.EVENTS, mysqlParser.EVERY, mysqlParser.EXCHANGE, mysqlParser.EXCLUSIVE, mysqlParser.EXPIRE, mysqlParser.EXTENT_SIZE, mysqlParser.FAULTS, mysqlParser.FIELDS, mysqlParser.FILE_BLOCK_SIZE, mysqlParser.FILTER, mysqlParser.FIRST, mysqlParser.FIXED, mysqlParser.FOLLOWS, mysqlParser.FULL, mysqlParser.FUNCTION, mysqlParser.GLOBAL, mysqlParser.GRANTS, mysqlParser.GROUP_REPLICATION, mysqlParser.HASH, mysqlParser.HOST, mysqlParser.IDENTIFIED, mysqlParser.IGNORE_SERVER_IDS, mysqlParser.IMPORT, mysqlParser.INDEXES, mysqlParser.INITIAL_SIZE, mysqlParser.INPLACE, mysqlParser.INSERT_METHOD, mysqlParser.INSTANCE, mysqlParser.INVOKER, mysqlParser.IO, mysqlParser.IO_THREAD, mysqlParser.IPC, mysqlParser.ISOLATION, mysqlParser.ISSUER, mysqlParser.KEY_BLOCK_SIZE, mysqlParser.LANGUAGE, mysqlParser.LAST, mysqlParser.LEAVES, mysqlParser.LESS, mysqlParser.LEVEL, mysqlParser.LIST, mysqlParser.LOCAL, mysqlParser.LOGFILE, mysqlParser.LOGS, mysqlParser.MASTER, mysqlParser.MASTER_AUTO_POSITION, mysqlParser.MASTER_CONNECT_RETRY, mysqlParser.MASTER_DELAY, mysqlParser.MASTER_HEARTBEAT_PERIOD, mysqlParser.MASTER_HOST, mysqlParser.MASTER_LOG_FILE, mysqlParser.MASTER_LOG_POS, mysqlParser.MASTER_PASSWORD, mysqlParser.MASTER_PORT, mysqlParser.MASTER_RETRY_COUNT, mysqlParser.MASTER_SSL, mysqlParser.MASTER_SSL_CA, mysqlParser.MASTER_SSL_CAPATH, mysqlParser.MASTER_SSL_CERT, mysqlParser.MASTER_SSL_CIPHER, mysqlParser.MASTER_SSL_CRL, mysqlParser.MASTER_SSL_CRLPATH, mysqlParser.MASTER_SSL_KEY, mysqlParser.MASTER_TLS_VERSION, mysqlParser.MASTER_USER, mysqlParser.MAX_CONNECTIONS_PER_HOUR, mysqlParser.MAX_QUERIES_PER_HOUR, mysqlParser.MAX_ROWS, mysqlParser.MAX_SIZE, mysqlParser.MAX_UPDATES_PER_HOUR, mysqlParser.MAX_USER_CONNECTIONS, mysqlParser.MERGE, mysqlParser.MID, mysqlParser.MIGRATE, mysqlParser.MIN_ROWS, mysqlParser.MODIFY, mysqlParser.MUTEX, mysqlParser.MYSQL, mysqlParser.NAME, mysqlParser.NAMES, mysqlParser.NCHAR, mysqlParser.NEVER, mysqlParser.NO, mysqlParser.NODEGROUP, mysqlParser.NONE, mysqlParser.OFFLINE, mysqlParser.OFFSET, mysqlParser.OJ, mysqlParser.OLD_PASSWORD, mysqlParser.ONE, mysqlParser.ONLINE, mysqlParser.ONLY, mysqlParser.OPTIMIZER_COSTS, mysqlParser.OPTIONS, mysqlParser.OWNER, mysqlParser.PACK_KEYS, mysqlParser.PAGE, mysqlParser.PARSER, mysqlParser.PARTIAL, mysqlParser.PARTITIONING, mysqlParser.PARTITIONS, mysqlParser.PASSWORD, mysqlParser.PHASE, mysqlParser.PLUGIN_DIR, mysqlParser.PLUGINS, mysqlParser.PORT, mysqlParser.PRECEDES, mysqlParser.PREPARE, mysqlParser.PRESERVE, mysqlParser.PREV, mysqlParser.PROCESSLIST, mysqlParser.PROFILE, mysqlParser.PROFILES, mysqlParser.PROXY, mysqlParser.QUERY, mysqlParser.QUICK, mysqlParser.REBUILD, mysqlParser.RECOVER, mysqlParser.REDO_BUFFER_SIZE, mysqlParser.REDUNDANT, mysqlParser.RELAY_LOG_FILE, mysqlParser.RELAY_LOG_POS, mysqlParser.RELAYLOG, mysqlParser.REMOVE, mysqlParser.REORGANIZE, mysqlParser.REPAIR, mysqlParser.REPLICATE_DO_DB, mysqlParser.REPLICATE_DO_TABLE, mysqlParser.REPLICATE_IGNORE_DB, mysqlParser.REPLICATE_IGNORE_TABLE, mysqlParser.REPLICATE_REWRITE_DB, mysqlParser.REPLICATE_WILD_DO_TABLE, mysqlParser.REPLICATE_WILD_IGNORE_TABLE, mysqlParser.REPLICATION, mysqlParser.RESUME, mysqlParser.RETURNS, mysqlParser.ROLLBACK, mysqlParser.ROLLUP, mysqlParser.ROTATE, mysqlParser.ROW, mysqlParser.ROWS, mysqlParser.ROW_FORMAT, mysqlParser.SAVEPOINT, mysqlParser.SCHEDULE, mysqlParser.SECURITY, mysqlParser.SERVER, mysqlParser.SESSION, mysqlParser.SHARE, mysqlParser.SHARED, mysqlParser.SIGNED, mysqlParser.SIMPLE, mysqlParser.SLAVE, mysqlParser.SNAPSHOT, mysqlParser.SOCKET, mysqlParser.SOME, mysqlParser.SOUNDS, mysqlParser.SOURCE, mysqlParser.SQL_AFTER_GTIDS, mysqlParser.SQL_AFTER_MTS_GAPS, mysqlParser.SQL_BEFORE_GTIDS, mysqlParser.SQL_BUFFER_RESULT, mysqlParser.SQL_CACHE, mysqlParser.SQL_NO_CACHE, mysqlParser.SQL_THREAD, mysqlParser.START, mysqlParser.STARTS, mysqlParser.STATS_AUTO_RECALC, mysqlParser.STATS_PERSISTENT, mysqlParser.STATS_SAMPLE_PAGES, mysqlParser.STATUS, mysqlParser.STOP, mysqlParser.STORAGE, mysqlParser.STRING, mysqlParser.SUBJECT, mysqlParser.SUBPARTITION, mysqlParser.SUBPARTITIONS, mysqlParser.SUSPEND, mysqlParser.SWAPS, mysqlParser.SWITCHES, mysqlParser.TABLESPACE, mysqlParser.TEMPORARY, mysqlParser.TEMPTABLE, mysqlParser.THAN, mysqlParser.TRANSACTION, mysqlParser.TRUNCATE, mysqlParser.UNDEFINED, mysqlParser.UNDOFILE, mysqlParser.UNDO_BUFFER_SIZE, mysqlParser.UNKNOWN, mysqlParser.UPGRADE, mysqlParser.USER, mysqlParser.VALIDATION, mysqlParser.VALUE, mysqlParser.VARIABLES, mysqlParser.VIEW, mysqlParser.WAIT, mysqlParser.WARNINGS, mysqlParser.WITHOUT, mysqlParser.WORK, mysqlParser.WRAPPER, mysqlParser.X509, mysqlParser.XA, mysqlParser.XML, mysqlParser.QUARTER, mysqlParser.MONTH, mysqlParser.DAY, mysqlParser.HOUR, mysqlParser.MINUTE, mysqlParser.WEEK, mysqlParser.SECOND, mysqlParser.MICROSECOND, mysqlParser.TABLES, mysqlParser.ROUTINE, mysqlParser.EXECUTE, mysqlParser.FILE, mysqlParser.PROCESS, mysqlParser.RELOAD, mysqlParser.SHUTDOWN, mysqlParser.SUPER, mysqlParser.PRIVILEGES, mysqlParser.ARMSCII8, mysqlParser.ASCII, mysqlParser.BIG5, mysqlParser.CP1250, mysqlParser.CP1251, mysqlParser.CP1256, mysqlParser.CP1257, mysqlParser.CP850, mysqlParser.CP852, mysqlParser.CP866, mysqlParser.CP932, mysqlParser.DEC8, mysqlParser.EUCJPMS, mysqlParser.EUCKR, mysqlParser.GB2312, mysqlParser.GBK, mysqlParser.GEOSTD8, mysqlParser.GREEK, mysqlParser.HEBREW, mysqlParser.HP8, mysqlParser.KEYBCS2, mysqlParser.KOI8R, mysqlParser.KOI8U, mysqlParser.LATIN1, mysqlParser.LATIN2, mysqlParser.LATIN5, mysqlParser.LATIN7, mysqlParser.MACCE, mysqlParser.MACROMAN, mysqlParser.SJIS, mysqlParser.SWE7, mysqlParser.TIS620, mysqlParser.UCS2, mysqlParser.UJIS, mysqlParser.UTF16, mysqlParser.UTF16LE, mysqlParser.UTF32, mysqlParser.UTF8, mysqlParser.UTF8MB3, mysqlParser.UTF8MB4, mysqlParser.ARCHIVE, mysqlParser.BLACKHOLE, mysqlParser.CSV, mysqlParser.FEDERATED, mysqlParser.INNODB, mysqlParser.MEMORY, mysqlParser.MRG_MYISAM, mysqlParser.MYISAM, mysqlParser.NDB, mysqlParser.NDBCLUSTER, mysqlParser.PERFOMANCE_SCHEMA, mysqlParser.REPEATABLE, mysqlParser.COMMITTED, mysqlParser.UNCOMMITTED, mysqlParser.SERIALIZABLE, mysqlParser.GEOMETRYCOLLECTION, mysqlParser.LINESTRING, mysqlParser.MULTILINESTRING, mysqlParser.MULTIPOINT, mysqlParser.MULTIPOLYGON, mysqlParser.POINT, mysqlParser.POLYGON, mysqlParser.ABS, mysqlParser.ACOS, mysqlParser.ADDDATE, mysqlParser.ADDTIME, mysqlParser.AES_DECRYPT, mysqlParser.AES_ENCRYPT, mysqlParser.AREA, mysqlParser.ASBINARY, mysqlParser.ASIN, mysqlParser.ASTEXT, mysqlParser.ASWKB, mysqlParser.ASWKT, mysqlParser.ASYMMETRIC_DECRYPT, mysqlParser.ASYMMETRIC_DERIVE, mysqlParser.ASYMMETRIC_ENCRYPT, mysqlParser.ASYMMETRIC_SIGN, mysqlParser.ASYMMETRIC_VERIFY, mysqlParser.ATAN, mysqlParser.ATAN2, mysqlParser.BENCHMARK, mysqlParser.BIN, mysqlParser.BIT_COUNT, mysqlParser.BIT_LENGTH, mysqlParser.BUFFER, mysqlParser.CEIL, mysqlParser.CEILING, mysqlParser.CENTROID, mysqlParser.CHARACTER_LENGTH, mysqlParser.CHARSET, mysqlParser.CHAR_LENGTH, mysqlParser.COERCIBILITY, mysqlParser.COLLATION, mysqlParser.COMPRESS, mysqlParser.CONCAT, mysqlParser.CONCAT_WS, mysqlParser.CONNECTION_ID, mysqlParser.CONV, mysqlParser.CONVERT_TZ, mysqlParser.COS, mysqlParser.COT, mysqlParser.CRC32, mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY, mysqlParser.CREATE_ASYMMETRIC_PUB_KEY, mysqlParser.CREATE_DH_PARAMETERS, mysqlParser.CREATE_DIGEST, mysqlParser.CROSSES, mysqlParser.DATEDIFF, mysqlParser.DATE_FORMAT, mysqlParser.DAYNAME, mysqlParser.DAYOFMONTH, mysqlParser.DAYOFWEEK, mysqlParser.DAYOFYEAR, mysqlParser.DECODE, mysqlParser.DEGREES, mysqlParser.DES_DECRYPT, mysqlParser.DES_ENCRYPT, mysqlParser.DIMENSION, mysqlParser.DISJOINT, mysqlParser.ELT, mysqlParser.ENCODE, mysqlParser.ENCRYPT, mysqlParser.ENDPOINT, mysqlParser.ENVELOPE, mysqlParser.EQUALS, mysqlParser.EXP, mysqlParser.EXPORT_SET, mysqlParser.EXTERIORRING, mysqlParser.EXTRACTVALUE, mysqlParser.FIELD, mysqlParser.FIND_IN_SET, mysqlParser.FLOOR, mysqlParser.FORMAT, mysqlParser.FOUND_ROWS, mysqlParser.FROM_BASE64, mysqlParser.FROM_DAYS, mysqlParser.FROM_UNIXTIME, mysqlParser.GEOMCOLLFROMTEXT, mysqlParser.GEOMCOLLFROMWKB, mysqlParser.GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.GEOMETRYCOLLECTIONFROMWKB, mysqlParser.GEOMETRYFROMTEXT, mysqlParser.GEOMETRYFROMWKB, mysqlParser.GEOMETRYN, mysqlParser.GEOMETRYTYPE, mysqlParser.GEOMFROMTEXT, mysqlParser.GEOMFROMWKB, mysqlParser.GET_FORMAT, mysqlParser.GET_LOCK, mysqlParser.GLENGTH, mysqlParser.GREATEST, mysqlParser.GTID_SUBSET, mysqlParser.GTID_SUBTRACT, mysqlParser.HEX, mysqlParser.IFNULL, mysqlParser.INET6_ATON, mysqlParser.INET6_NTOA, mysqlParser.INET_ATON, mysqlParser.INET_NTOA, mysqlParser.INSTR, mysqlParser.INTERIORRINGN, mysqlParser.INTERSECTS, mysqlParser.ISCLOSED, mysqlParser.ISEMPTY, mysqlParser.ISNULL, mysqlParser.ISSIMPLE, mysqlParser.IS_FREE_LOCK, mysqlParser.IS_IPV4, mysqlParser.IS_IPV4_COMPAT, mysqlParser.IS_IPV4_MAPPED, mysqlParser.IS_IPV6, mysqlParser.IS_USED_LOCK, mysqlParser.LAST_INSERT_ID, mysqlParser.LCASE, mysqlParser.LEAST, mysqlParser.LENGTH, mysqlParser.LINEFROMTEXT, mysqlParser.LINEFROMWKB, mysqlParser.LINESTRINGFROMTEXT, mysqlParser.LINESTRINGFROMWKB, mysqlParser.LN, mysqlParser.LOAD_FILE, mysqlParser.LOCATE, mysqlParser.LOG, mysqlParser.LOG10, mysqlParser.LOG2, mysqlParser.LOWER, mysqlParser.LPAD, mysqlParser.LTRIM, mysqlParser.MAKEDATE, mysqlParser.MAKETIME, mysqlParser.MAKE_SET, mysqlParser.MASTER_POS_WAIT, mysqlParser.MBRCONTAINS, mysqlParser.MBRDISJOINT, mysqlParser.MBREQUAL, mysqlParser.MBRINTERSECTS, mysqlParser.MBROVERLAPS, mysqlParser.MBRTOUCHES, mysqlParser.MBRWITHIN, mysqlParser.MD5, mysqlParser.MLINEFROMTEXT, mysqlParser.MLINEFROMWKB, mysqlParser.MONTHNAME, mysqlParser.MPOINTFROMTEXT, mysqlParser.MPOINTFROMWKB, mysqlParser.MPOLYFROMTEXT, mysqlParser.MPOLYFROMWKB, mysqlParser.MULTILINESTRINGFROMTEXT, mysqlParser.MULTILINESTRINGFROMWKB, mysqlParser.MULTIPOINTFROMTEXT, mysqlParser.MULTIPOINTFROMWKB, mysqlParser.MULTIPOLYGONFROMTEXT, mysqlParser.MULTIPOLYGONFROMWKB, mysqlParser.NAME_CONST, mysqlParser.NULLIF, mysqlParser.NUMGEOMETRIES, mysqlParser.NUMINTERIORRINGS, mysqlParser.NUMPOINTS, mysqlParser.OCT, mysqlParser.OCTET_LENGTH, mysqlParser.ORD, mysqlParser.OVERLAPS, mysqlParser.PERIOD_ADD, mysqlParser.PERIOD_DIFF, mysqlParser.PI, mysqlParser.POINTFROMTEXT, mysqlParser.POINTFROMWKB, mysqlParser.POINTN, mysqlParser.POLYFROMTEXT, mysqlParser.POLYFROMWKB, mysqlParser.POLYGONFROMTEXT, mysqlParser.POLYGONFROMWKB, mysqlParser.POW, mysqlParser.POWER, mysqlParser.QUOTE, mysqlParser.RADIANS, mysqlParser.RAND, mysqlParser.RANDOM_BYTES, mysqlParser.RELEASE_LOCK, mysqlParser.REVERSE, mysqlParser.ROUND, mysqlParser.ROW_COUNT, mysqlParser.RPAD, mysqlParser.RTRIM, mysqlParser.SEC_TO_TIME, mysqlParser.SESSION_USER, mysqlParser.SHA, mysqlParser.SHA1, mysqlParser.SHA2, mysqlParser.SIGN, mysqlParser.SIN, mysqlParser.SLEEP, mysqlParser.SOUNDEX, mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, mysqlParser.SQRT, mysqlParser.SRID, mysqlParser.STARTPOINT, mysqlParser.STRCMP, mysqlParser.STR_TO_DATE, mysqlParser.ST_AREA, mysqlParser.ST_ASBINARY, mysqlParser.ST_ASTEXT, mysqlParser.ST_ASWKB, mysqlParser.ST_ASWKT, mysqlParser.ST_BUFFER, mysqlParser.ST_CENTROID, mysqlParser.ST_CONTAINS, mysqlParser.ST_CROSSES, mysqlParser.ST_DIFFERENCE, mysqlParser.ST_DIMENSION, mysqlParser.ST_DISJOINT, mysqlParser.ST_DISTANCE, mysqlParser.ST_ENDPOINT, mysqlParser.ST_ENVELOPE, mysqlParser.ST_EQUALS, mysqlParser.ST_EXTERIORRING, mysqlParser.ST_GEOMCOLLFROMTEXT, mysqlParser.ST_GEOMCOLLFROMTXT, mysqlParser.ST_GEOMCOLLFROMWKB, mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, mysqlParser.ST_GEOMETRYFROMTEXT, mysqlParser.ST_GEOMETRYFROMWKB, mysqlParser.ST_GEOMETRYN, mysqlParser.ST_GEOMETRYTYPE, mysqlParser.ST_GEOMFROMTEXT, mysqlParser.ST_GEOMFROMWKB, mysqlParser.ST_INTERIORRINGN, mysqlParser.ST_INTERSECTION, mysqlParser.ST_INTERSECTS, mysqlParser.ST_ISCLOSED, mysqlParser.ST_ISEMPTY, mysqlParser.ST_ISSIMPLE, mysqlParser.ST_LINEFROMTEXT, mysqlParser.ST_LINEFROMWKB, mysqlParser.ST_LINESTRINGFROMTEXT, mysqlParser.ST_LINESTRINGFROMWKB, mysqlParser.ST_NUMGEOMETRIES, mysqlParser.ST_NUMINTERIORRING, mysqlParser.ST_NUMINTERIORRINGS, mysqlParser.ST_NUMPOINTS, mysqlParser.ST_OVERLAPS, mysqlParser.ST_POINTFROMTEXT, mysqlParser.ST_POINTFROMWKB, mysqlParser.ST_POINTN, mysqlParser.ST_POLYFROMTEXT, mysqlParser.ST_POLYFROMWKB, mysqlParser.ST_POLYGONFROMTEXT, mysqlParser.ST_POLYGONFROMWKB, mysqlParser.ST_SRID, mysqlParser.ST_STARTPOINT, mysqlParser.ST_SYMDIFFERENCE, mysqlParser.ST_TOUCHES, mysqlParser.ST_UNION, mysqlParser.ST_WITHIN, mysqlParser.ST_X, mysqlParser.ST_Y, mysqlParser.SUBDATE, mysqlParser.SUBSTRING_INDEX, mysqlParser.SUBTIME, mysqlParser.SYSTEM_USER, mysqlParser.TAN, mysqlParser.TIMEDIFF, mysqlParser.TIMESTAMPADD, mysqlParser.TIMESTAMPDIFF, mysqlParser.TIME_FORMAT, mysqlParser.TIME_TO_SEC, mysqlParser.TOUCHES, mysqlParser.TO_BASE64, mysqlParser.TO_DAYS, mysqlParser.TO_SECONDS, mysqlParser.UCASE, mysqlParser.UNCOMPRESS, mysqlParser.UNCOMPRESSED_LENGTH, mysqlParser.UNHEX, mysqlParser.UNIX_TIMESTAMP, mysqlParser.UPDATEXML, mysqlParser.UPPER, mysqlParser.UUID, mysqlParser.UUID_SHORT, mysqlParser.VALIDATE_PASSWORD_STRENGTH, mysqlParser.VERSION, mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, mysqlParser.WEEKDAY, mysqlParser.WEEKOFYEAR, mysqlParser.WEIGHT_STRING, mysqlParser.WITHIN, mysqlParser.YEARWEEK, mysqlParser.Y_FUNCTION, mysqlParser.X_FUNCTION, mysqlParser.CHARSET_REVERSE_QOUTE_STRING, mysqlParser.ID, mysqlParser.REVERSE_QUOTE_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5035
                self.uid()
                pass
            elif token in [mysqlParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5036
                self.match(mysqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EngineNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARCHIVE(self):
            return self.getToken(mysqlParser.ARCHIVE, 0)

        def BLACKHOLE(self):
            return self.getToken(mysqlParser.BLACKHOLE, 0)

        def CSV(self):
            return self.getToken(mysqlParser.CSV, 0)

        def FEDERATED(self):
            return self.getToken(mysqlParser.FEDERATED, 0)

        def INNODB(self):
            return self.getToken(mysqlParser.INNODB, 0)

        def MEMORY(self):
            return self.getToken(mysqlParser.MEMORY, 0)

        def MRG_MYISAM(self):
            return self.getToken(mysqlParser.MRG_MYISAM, 0)

        def MYISAM(self):
            return self.getToken(mysqlParser.MYISAM, 0)

        def NDB(self):
            return self.getToken(mysqlParser.NDB, 0)

        def NDBCLUSTER(self):
            return self.getToken(mysqlParser.NDBCLUSTER, 0)

        def PERFOMANCE_SCHEMA(self):
            return self.getToken(mysqlParser.PERFOMANCE_SCHEMA, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_engineName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEngineName" ):
                listener.enterEngineName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEngineName" ):
                listener.exitEngineName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEngineName" ):
                return visitor.visitEngineName(self)
            else:
                return visitor.visitChildren(self)




    def engineName(self):

        localctx = mysqlParser.EngineNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_engineName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5039
            _la = self._input.LA(1)
            if not(((((_la - 605)) & ~0x3f) == 0 and ((1 << (_la - 605)) & ((1 << (mysqlParser.ARCHIVE - 605)) | (1 << (mysqlParser.BLACKHOLE - 605)) | (1 << (mysqlParser.CSV - 605)) | (1 << (mysqlParser.FEDERATED - 605)) | (1 << (mysqlParser.INNODB - 605)) | (1 << (mysqlParser.MEMORY - 605)) | (1 << (mysqlParser.MRG_MYISAM - 605)) | (1 << (mysqlParser.MYISAM - 605)) | (1 << (mysqlParser.NDB - 605)) | (1 << (mysqlParser.NDBCLUSTER - 605)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 605)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UuidSetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_uuidSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUuidSet" ):
                listener.enterUuidSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUuidSet" ):
                listener.exitUuidSet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUuidSet" ):
                return visitor.visitUuidSet(self)
            else:
                return visitor.visitChildren(self)




    def uuidSet(self):

        localctx = mysqlParser.UuidSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_uuidSet)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5041
            self.decimalLiteral()
            self.state = 5042
            self.match(mysqlParser.MINUS)
            self.state = 5043
            self.decimalLiteral()
            self.state = 5044
            self.match(mysqlParser.MINUS)
            self.state = 5045
            self.decimalLiteral()
            self.state = 5046
            self.match(mysqlParser.MINUS)
            self.state = 5047
            self.decimalLiteral()
            self.state = 5048
            self.match(mysqlParser.MINUS)
            self.state = 5049
            self.decimalLiteral()
            self.state = 5055 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5050
                self.match(mysqlParser.COLON_SYMB)
                self.state = 5051
                self.decimalLiteral()
                self.state = 5052
                self.match(mysqlParser.MINUS)
                self.state = 5053
                self.decimalLiteral()
                self.state = 5057 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==mysqlParser.COLON_SYMB):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class XidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.globalTableUid = None # XuidStringIdContext
            self.qualifier = None # XuidStringIdContext
            self.idFormat = None # DecimalLiteralContext

        def xuidStringId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.XuidStringIdContext)
            else:
                return self.getTypedRuleContext(mysqlParser.XuidStringIdContext,i)


        def decimalLiteral(self):
            return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_xid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXid" ):
                listener.enterXid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXid" ):
                listener.exitXid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXid" ):
                return visitor.visitXid(self)
            else:
                return visitor.visitChildren(self)




    def xid(self):

        localctx = mysqlParser.XidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_xid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5059
            localctx.globalTableUid = self.xuidStringId()
            self.state = 5066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.COMMA:
                self.state = 5060
                self.match(mysqlParser.COMMA)
                self.state = 5061
                localctx.qualifier = self.xuidStringId()
                self.state = 5064
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.COMMA:
                    self.state = 5062
                    self.match(mysqlParser.COMMA)
                    self.state = 5063
                    localctx.idFormat = self.decimalLiteral()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class XuidStringIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def BIT_STRING(self):
            return self.getToken(mysqlParser.BIT_STRING, 0)

        def HEXADECIMAL_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.HEXADECIMAL_LITERAL)
            else:
                return self.getToken(mysqlParser.HEXADECIMAL_LITERAL, i)

        def getRuleIndex(self):
            return mysqlParser.RULE_xuidStringId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXuidStringId" ):
                listener.enterXuidStringId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXuidStringId" ):
                listener.exitXuidStringId(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXuidStringId" ):
                return visitor.visitXuidStringId(self)
            else:
                return visitor.visitChildren(self)




    def xuidStringId(self):

        localctx = mysqlParser.XuidStringIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_xuidStringId)
        self._la = 0 # Token type
        try:
            self.state = 5075
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5068
                self.match(mysqlParser.STRING_LITERAL)
                pass
            elif token in [mysqlParser.BIT_STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5069
                self.match(mysqlParser.BIT_STRING)
                pass
            elif token in [mysqlParser.HEXADECIMAL_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5071 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5070
                    self.match(mysqlParser.HEXADECIMAL_LITERAL)
                    self.state = 5073 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==mysqlParser.HEXADECIMAL_LITERAL):
                        break

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AuthPluginContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_authPlugin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthPlugin" ):
                listener.enterAuthPlugin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthPlugin" ):
                listener.exitAuthPlugin(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAuthPlugin" ):
                return visitor.visitAuthPlugin(self)
            else:
                return visitor.visitChildren(self)




    def authPlugin(self):

        localctx = mysqlParser.AuthPluginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_authPlugin)
        try:
            self.state = 5079
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.LEFT, mysqlParser.RIGHT, mysqlParser.DATE, mysqlParser.TIME, mysqlParser.TIMESTAMP, mysqlParser.DATETIME, mysqlParser.YEAR, mysqlParser.TEXT, mysqlParser.ENUM, mysqlParser.COUNT, mysqlParser.POSITION, mysqlParser.ACCOUNT, mysqlParser.ACTION, mysqlParser.AFTER, mysqlParser.AGGREGATE, mysqlParser.ALGORITHM, mysqlParser.ANY, mysqlParser.AT, mysqlParser.AUTHORS, mysqlParser.AUTOCOMMIT, mysqlParser.AUTOEXTEND_SIZE, mysqlParser.AUTO_INCREMENT, mysqlParser.AVG_ROW_LENGTH, mysqlParser.BEGIN, mysqlParser.BINLOG, mysqlParser.BIT, mysqlParser.BLOCK, mysqlParser.BTREE, mysqlParser.CASCADED, mysqlParser.CHAIN, mysqlParser.CHANNEL, mysqlParser.CHECKSUM, mysqlParser.CIPHER, mysqlParser.CLIENT, mysqlParser.COALESCE, mysqlParser.CODE, mysqlParser.COLUMNS, mysqlParser.COLUMN_FORMAT, mysqlParser.COMMENT, mysqlParser.COMMIT, mysqlParser.COMPACT, mysqlParser.COMPLETION, mysqlParser.COMPRESSED, mysqlParser.COMPRESSION, mysqlParser.CONCURRENT, mysqlParser.CONNECTION, mysqlParser.CONSISTENT, mysqlParser.CONTAINS, mysqlParser.CONTEXT, mysqlParser.CONTRIBUTORS, mysqlParser.COPY, mysqlParser.CPU, mysqlParser.DATA, mysqlParser.DATAFILE, mysqlParser.DEALLOCATE, mysqlParser.DEFAULT_AUTH, mysqlParser.DEFINER, mysqlParser.DELAY_KEY_WRITE, mysqlParser.DIRECTORY, mysqlParser.DISABLE, mysqlParser.DISCARD, mysqlParser.DISK, mysqlParser.DO, mysqlParser.DUMPFILE, mysqlParser.DUPLICATE, mysqlParser.DYNAMIC, mysqlParser.ENABLE, mysqlParser.ENCRYPTION, mysqlParser.ENDS, mysqlParser.ENGINE, mysqlParser.ENGINES, mysqlParser.ERROR, mysqlParser.ERRORS, mysqlParser.ESCAPE, mysqlParser.EVEN, mysqlParser.EVENT, mysqlParser.EVENTS, mysqlParser.EVERY, mysqlParser.EXCHANGE, mysqlParser.EXCLUSIVE, mysqlParser.EXPIRE, mysqlParser.EXTENT_SIZE, mysqlParser.FAULTS, mysqlParser.FIELDS, mysqlParser.FILE_BLOCK_SIZE, mysqlParser.FILTER, mysqlParser.FIRST, mysqlParser.FIXED, mysqlParser.FOLLOWS, mysqlParser.FULL, mysqlParser.FUNCTION, mysqlParser.GLOBAL, mysqlParser.GRANTS, mysqlParser.GROUP_REPLICATION, mysqlParser.HASH, mysqlParser.HOST, mysqlParser.IDENTIFIED, mysqlParser.IGNORE_SERVER_IDS, mysqlParser.IMPORT, mysqlParser.INDEXES, mysqlParser.INITIAL_SIZE, mysqlParser.INPLACE, mysqlParser.INSERT_METHOD, mysqlParser.INSTANCE, mysqlParser.INVOKER, mysqlParser.IO, mysqlParser.IO_THREAD, mysqlParser.IPC, mysqlParser.ISOLATION, mysqlParser.ISSUER, mysqlParser.KEY_BLOCK_SIZE, mysqlParser.LANGUAGE, mysqlParser.LAST, mysqlParser.LEAVES, mysqlParser.LESS, mysqlParser.LEVEL, mysqlParser.LIST, mysqlParser.LOCAL, mysqlParser.LOGFILE, mysqlParser.LOGS, mysqlParser.MASTER, mysqlParser.MASTER_AUTO_POSITION, mysqlParser.MASTER_CONNECT_RETRY, mysqlParser.MASTER_DELAY, mysqlParser.MASTER_HEARTBEAT_PERIOD, mysqlParser.MASTER_HOST, mysqlParser.MASTER_LOG_FILE, mysqlParser.MASTER_LOG_POS, mysqlParser.MASTER_PASSWORD, mysqlParser.MASTER_PORT, mysqlParser.MASTER_RETRY_COUNT, mysqlParser.MASTER_SSL, mysqlParser.MASTER_SSL_CA, mysqlParser.MASTER_SSL_CAPATH, mysqlParser.MASTER_SSL_CERT, mysqlParser.MASTER_SSL_CIPHER, mysqlParser.MASTER_SSL_CRL, mysqlParser.MASTER_SSL_CRLPATH, mysqlParser.MASTER_SSL_KEY, mysqlParser.MASTER_TLS_VERSION, mysqlParser.MASTER_USER, mysqlParser.MAX_CONNECTIONS_PER_HOUR, mysqlParser.MAX_QUERIES_PER_HOUR, mysqlParser.MAX_ROWS, mysqlParser.MAX_SIZE, mysqlParser.MAX_UPDATES_PER_HOUR, mysqlParser.MAX_USER_CONNECTIONS, mysqlParser.MERGE, mysqlParser.MID, mysqlParser.MIGRATE, mysqlParser.MIN_ROWS, mysqlParser.MODIFY, mysqlParser.MUTEX, mysqlParser.MYSQL, mysqlParser.NAME, mysqlParser.NAMES, mysqlParser.NCHAR, mysqlParser.NEVER, mysqlParser.NO, mysqlParser.NODEGROUP, mysqlParser.NONE, mysqlParser.OFFLINE, mysqlParser.OFFSET, mysqlParser.OJ, mysqlParser.OLD_PASSWORD, mysqlParser.ONE, mysqlParser.ONLINE, mysqlParser.ONLY, mysqlParser.OPTIMIZER_COSTS, mysqlParser.OPTIONS, mysqlParser.OWNER, mysqlParser.PACK_KEYS, mysqlParser.PAGE, mysqlParser.PARSER, mysqlParser.PARTIAL, mysqlParser.PARTITIONING, mysqlParser.PARTITIONS, mysqlParser.PASSWORD, mysqlParser.PHASE, mysqlParser.PLUGIN_DIR, mysqlParser.PLUGINS, mysqlParser.PORT, mysqlParser.PRECEDES, mysqlParser.PREPARE, mysqlParser.PRESERVE, mysqlParser.PREV, mysqlParser.PROCESSLIST, mysqlParser.PROFILE, mysqlParser.PROFILES, mysqlParser.PROXY, mysqlParser.QUERY, mysqlParser.QUICK, mysqlParser.REBUILD, mysqlParser.RECOVER, mysqlParser.REDO_BUFFER_SIZE, mysqlParser.REDUNDANT, mysqlParser.RELAY_LOG_FILE, mysqlParser.RELAY_LOG_POS, mysqlParser.RELAYLOG, mysqlParser.REMOVE, mysqlParser.REORGANIZE, mysqlParser.REPAIR, mysqlParser.REPLICATE_DO_DB, mysqlParser.REPLICATE_DO_TABLE, mysqlParser.REPLICATE_IGNORE_DB, mysqlParser.REPLICATE_IGNORE_TABLE, mysqlParser.REPLICATE_REWRITE_DB, mysqlParser.REPLICATE_WILD_DO_TABLE, mysqlParser.REPLICATE_WILD_IGNORE_TABLE, mysqlParser.REPLICATION, mysqlParser.RESUME, mysqlParser.RETURNS, mysqlParser.ROLLBACK, mysqlParser.ROLLUP, mysqlParser.ROTATE, mysqlParser.ROW, mysqlParser.ROWS, mysqlParser.ROW_FORMAT, mysqlParser.SAVEPOINT, mysqlParser.SCHEDULE, mysqlParser.SECURITY, mysqlParser.SERVER, mysqlParser.SESSION, mysqlParser.SHARE, mysqlParser.SHARED, mysqlParser.SIGNED, mysqlParser.SIMPLE, mysqlParser.SLAVE, mysqlParser.SNAPSHOT, mysqlParser.SOCKET, mysqlParser.SOME, mysqlParser.SOUNDS, mysqlParser.SOURCE, mysqlParser.SQL_AFTER_GTIDS, mysqlParser.SQL_AFTER_MTS_GAPS, mysqlParser.SQL_BEFORE_GTIDS, mysqlParser.SQL_BUFFER_RESULT, mysqlParser.SQL_CACHE, mysqlParser.SQL_NO_CACHE, mysqlParser.SQL_THREAD, mysqlParser.START, mysqlParser.STARTS, mysqlParser.STATS_AUTO_RECALC, mysqlParser.STATS_PERSISTENT, mysqlParser.STATS_SAMPLE_PAGES, mysqlParser.STATUS, mysqlParser.STOP, mysqlParser.STORAGE, mysqlParser.STRING, mysqlParser.SUBJECT, mysqlParser.SUBPARTITION, mysqlParser.SUBPARTITIONS, mysqlParser.SUSPEND, mysqlParser.SWAPS, mysqlParser.SWITCHES, mysqlParser.TABLESPACE, mysqlParser.TEMPORARY, mysqlParser.TEMPTABLE, mysqlParser.THAN, mysqlParser.TRANSACTION, mysqlParser.TRUNCATE, mysqlParser.UNDEFINED, mysqlParser.UNDOFILE, mysqlParser.UNDO_BUFFER_SIZE, mysqlParser.UNKNOWN, mysqlParser.UPGRADE, mysqlParser.USER, mysqlParser.VALIDATION, mysqlParser.VALUE, mysqlParser.VARIABLES, mysqlParser.VIEW, mysqlParser.WAIT, mysqlParser.WARNINGS, mysqlParser.WITHOUT, mysqlParser.WORK, mysqlParser.WRAPPER, mysqlParser.X509, mysqlParser.XA, mysqlParser.XML, mysqlParser.QUARTER, mysqlParser.MONTH, mysqlParser.DAY, mysqlParser.HOUR, mysqlParser.MINUTE, mysqlParser.WEEK, mysqlParser.SECOND, mysqlParser.MICROSECOND, mysqlParser.TABLES, mysqlParser.ROUTINE, mysqlParser.EXECUTE, mysqlParser.FILE, mysqlParser.PROCESS, mysqlParser.RELOAD, mysqlParser.SHUTDOWN, mysqlParser.SUPER, mysqlParser.PRIVILEGES, mysqlParser.ARMSCII8, mysqlParser.ASCII, mysqlParser.BIG5, mysqlParser.CP1250, mysqlParser.CP1251, mysqlParser.CP1256, mysqlParser.CP1257, mysqlParser.CP850, mysqlParser.CP852, mysqlParser.CP866, mysqlParser.CP932, mysqlParser.DEC8, mysqlParser.EUCJPMS, mysqlParser.EUCKR, mysqlParser.GB2312, mysqlParser.GBK, mysqlParser.GEOSTD8, mysqlParser.GREEK, mysqlParser.HEBREW, mysqlParser.HP8, mysqlParser.KEYBCS2, mysqlParser.KOI8R, mysqlParser.KOI8U, mysqlParser.LATIN1, mysqlParser.LATIN2, mysqlParser.LATIN5, mysqlParser.LATIN7, mysqlParser.MACCE, mysqlParser.MACROMAN, mysqlParser.SJIS, mysqlParser.SWE7, mysqlParser.TIS620, mysqlParser.UCS2, mysqlParser.UJIS, mysqlParser.UTF16, mysqlParser.UTF16LE, mysqlParser.UTF32, mysqlParser.UTF8, mysqlParser.UTF8MB3, mysqlParser.UTF8MB4, mysqlParser.ARCHIVE, mysqlParser.BLACKHOLE, mysqlParser.CSV, mysqlParser.FEDERATED, mysqlParser.INNODB, mysqlParser.MEMORY, mysqlParser.MRG_MYISAM, mysqlParser.MYISAM, mysqlParser.NDB, mysqlParser.NDBCLUSTER, mysqlParser.PERFOMANCE_SCHEMA, mysqlParser.REPEATABLE, mysqlParser.COMMITTED, mysqlParser.UNCOMMITTED, mysqlParser.SERIALIZABLE, mysqlParser.GEOMETRYCOLLECTION, mysqlParser.LINESTRING, mysqlParser.MULTILINESTRING, mysqlParser.MULTIPOINT, mysqlParser.MULTIPOLYGON, mysqlParser.POINT, mysqlParser.POLYGON, mysqlParser.ABS, mysqlParser.ACOS, mysqlParser.ADDDATE, mysqlParser.ADDTIME, mysqlParser.AES_DECRYPT, mysqlParser.AES_ENCRYPT, mysqlParser.AREA, mysqlParser.ASBINARY, mysqlParser.ASIN, mysqlParser.ASTEXT, mysqlParser.ASWKB, mysqlParser.ASWKT, mysqlParser.ASYMMETRIC_DECRYPT, mysqlParser.ASYMMETRIC_DERIVE, mysqlParser.ASYMMETRIC_ENCRYPT, mysqlParser.ASYMMETRIC_SIGN, mysqlParser.ASYMMETRIC_VERIFY, mysqlParser.ATAN, mysqlParser.ATAN2, mysqlParser.BENCHMARK, mysqlParser.BIN, mysqlParser.BIT_COUNT, mysqlParser.BIT_LENGTH, mysqlParser.BUFFER, mysqlParser.CEIL, mysqlParser.CEILING, mysqlParser.CENTROID, mysqlParser.CHARACTER_LENGTH, mysqlParser.CHARSET, mysqlParser.CHAR_LENGTH, mysqlParser.COERCIBILITY, mysqlParser.COLLATION, mysqlParser.COMPRESS, mysqlParser.CONCAT, mysqlParser.CONCAT_WS, mysqlParser.CONNECTION_ID, mysqlParser.CONV, mysqlParser.CONVERT_TZ, mysqlParser.COS, mysqlParser.COT, mysqlParser.CRC32, mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY, mysqlParser.CREATE_ASYMMETRIC_PUB_KEY, mysqlParser.CREATE_DH_PARAMETERS, mysqlParser.CREATE_DIGEST, mysqlParser.CROSSES, mysqlParser.DATEDIFF, mysqlParser.DATE_FORMAT, mysqlParser.DAYNAME, mysqlParser.DAYOFMONTH, mysqlParser.DAYOFWEEK, mysqlParser.DAYOFYEAR, mysqlParser.DECODE, mysqlParser.DEGREES, mysqlParser.DES_DECRYPT, mysqlParser.DES_ENCRYPT, mysqlParser.DIMENSION, mysqlParser.DISJOINT, mysqlParser.ELT, mysqlParser.ENCODE, mysqlParser.ENCRYPT, mysqlParser.ENDPOINT, mysqlParser.ENVELOPE, mysqlParser.EQUALS, mysqlParser.EXP, mysqlParser.EXPORT_SET, mysqlParser.EXTERIORRING, mysqlParser.EXTRACTVALUE, mysqlParser.FIELD, mysqlParser.FIND_IN_SET, mysqlParser.FLOOR, mysqlParser.FORMAT, mysqlParser.FOUND_ROWS, mysqlParser.FROM_BASE64, mysqlParser.FROM_DAYS, mysqlParser.FROM_UNIXTIME, mysqlParser.GEOMCOLLFROMTEXT, mysqlParser.GEOMCOLLFROMWKB, mysqlParser.GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.GEOMETRYCOLLECTIONFROMWKB, mysqlParser.GEOMETRYFROMTEXT, mysqlParser.GEOMETRYFROMWKB, mysqlParser.GEOMETRYN, mysqlParser.GEOMETRYTYPE, mysqlParser.GEOMFROMTEXT, mysqlParser.GEOMFROMWKB, mysqlParser.GET_FORMAT, mysqlParser.GET_LOCK, mysqlParser.GLENGTH, mysqlParser.GREATEST, mysqlParser.GTID_SUBSET, mysqlParser.GTID_SUBTRACT, mysqlParser.HEX, mysqlParser.IFNULL, mysqlParser.INET6_ATON, mysqlParser.INET6_NTOA, mysqlParser.INET_ATON, mysqlParser.INET_NTOA, mysqlParser.INSTR, mysqlParser.INTERIORRINGN, mysqlParser.INTERSECTS, mysqlParser.ISCLOSED, mysqlParser.ISEMPTY, mysqlParser.ISNULL, mysqlParser.ISSIMPLE, mysqlParser.IS_FREE_LOCK, mysqlParser.IS_IPV4, mysqlParser.IS_IPV4_COMPAT, mysqlParser.IS_IPV4_MAPPED, mysqlParser.IS_IPV6, mysqlParser.IS_USED_LOCK, mysqlParser.LAST_INSERT_ID, mysqlParser.LCASE, mysqlParser.LEAST, mysqlParser.LENGTH, mysqlParser.LINEFROMTEXT, mysqlParser.LINEFROMWKB, mysqlParser.LINESTRINGFROMTEXT, mysqlParser.LINESTRINGFROMWKB, mysqlParser.LN, mysqlParser.LOAD_FILE, mysqlParser.LOCATE, mysqlParser.LOG, mysqlParser.LOG10, mysqlParser.LOG2, mysqlParser.LOWER, mysqlParser.LPAD, mysqlParser.LTRIM, mysqlParser.MAKEDATE, mysqlParser.MAKETIME, mysqlParser.MAKE_SET, mysqlParser.MASTER_POS_WAIT, mysqlParser.MBRCONTAINS, mysqlParser.MBRDISJOINT, mysqlParser.MBREQUAL, mysqlParser.MBRINTERSECTS, mysqlParser.MBROVERLAPS, mysqlParser.MBRTOUCHES, mysqlParser.MBRWITHIN, mysqlParser.MD5, mysqlParser.MLINEFROMTEXT, mysqlParser.MLINEFROMWKB, mysqlParser.MONTHNAME, mysqlParser.MPOINTFROMTEXT, mysqlParser.MPOINTFROMWKB, mysqlParser.MPOLYFROMTEXT, mysqlParser.MPOLYFROMWKB, mysqlParser.MULTILINESTRINGFROMTEXT, mysqlParser.MULTILINESTRINGFROMWKB, mysqlParser.MULTIPOINTFROMTEXT, mysqlParser.MULTIPOINTFROMWKB, mysqlParser.MULTIPOLYGONFROMTEXT, mysqlParser.MULTIPOLYGONFROMWKB, mysqlParser.NAME_CONST, mysqlParser.NULLIF, mysqlParser.NUMGEOMETRIES, mysqlParser.NUMINTERIORRINGS, mysqlParser.NUMPOINTS, mysqlParser.OCT, mysqlParser.OCTET_LENGTH, mysqlParser.ORD, mysqlParser.OVERLAPS, mysqlParser.PERIOD_ADD, mysqlParser.PERIOD_DIFF, mysqlParser.PI, mysqlParser.POINTFROMTEXT, mysqlParser.POINTFROMWKB, mysqlParser.POINTN, mysqlParser.POLYFROMTEXT, mysqlParser.POLYFROMWKB, mysqlParser.POLYGONFROMTEXT, mysqlParser.POLYGONFROMWKB, mysqlParser.POW, mysqlParser.POWER, mysqlParser.QUOTE, mysqlParser.RADIANS, mysqlParser.RAND, mysqlParser.RANDOM_BYTES, mysqlParser.RELEASE_LOCK, mysqlParser.REVERSE, mysqlParser.ROUND, mysqlParser.ROW_COUNT, mysqlParser.RPAD, mysqlParser.RTRIM, mysqlParser.SEC_TO_TIME, mysqlParser.SESSION_USER, mysqlParser.SHA, mysqlParser.SHA1, mysqlParser.SHA2, mysqlParser.SIGN, mysqlParser.SIN, mysqlParser.SLEEP, mysqlParser.SOUNDEX, mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, mysqlParser.SQRT, mysqlParser.SRID, mysqlParser.STARTPOINT, mysqlParser.STRCMP, mysqlParser.STR_TO_DATE, mysqlParser.ST_AREA, mysqlParser.ST_ASBINARY, mysqlParser.ST_ASTEXT, mysqlParser.ST_ASWKB, mysqlParser.ST_ASWKT, mysqlParser.ST_BUFFER, mysqlParser.ST_CENTROID, mysqlParser.ST_CONTAINS, mysqlParser.ST_CROSSES, mysqlParser.ST_DIFFERENCE, mysqlParser.ST_DIMENSION, mysqlParser.ST_DISJOINT, mysqlParser.ST_DISTANCE, mysqlParser.ST_ENDPOINT, mysqlParser.ST_ENVELOPE, mysqlParser.ST_EQUALS, mysqlParser.ST_EXTERIORRING, mysqlParser.ST_GEOMCOLLFROMTEXT, mysqlParser.ST_GEOMCOLLFROMTXT, mysqlParser.ST_GEOMCOLLFROMWKB, mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, mysqlParser.ST_GEOMETRYFROMTEXT, mysqlParser.ST_GEOMETRYFROMWKB, mysqlParser.ST_GEOMETRYN, mysqlParser.ST_GEOMETRYTYPE, mysqlParser.ST_GEOMFROMTEXT, mysqlParser.ST_GEOMFROMWKB, mysqlParser.ST_INTERIORRINGN, mysqlParser.ST_INTERSECTION, mysqlParser.ST_INTERSECTS, mysqlParser.ST_ISCLOSED, mysqlParser.ST_ISEMPTY, mysqlParser.ST_ISSIMPLE, mysqlParser.ST_LINEFROMTEXT, mysqlParser.ST_LINEFROMWKB, mysqlParser.ST_LINESTRINGFROMTEXT, mysqlParser.ST_LINESTRINGFROMWKB, mysqlParser.ST_NUMGEOMETRIES, mysqlParser.ST_NUMINTERIORRING, mysqlParser.ST_NUMINTERIORRINGS, mysqlParser.ST_NUMPOINTS, mysqlParser.ST_OVERLAPS, mysqlParser.ST_POINTFROMTEXT, mysqlParser.ST_POINTFROMWKB, mysqlParser.ST_POINTN, mysqlParser.ST_POLYFROMTEXT, mysqlParser.ST_POLYFROMWKB, mysqlParser.ST_POLYGONFROMTEXT, mysqlParser.ST_POLYGONFROMWKB, mysqlParser.ST_SRID, mysqlParser.ST_STARTPOINT, mysqlParser.ST_SYMDIFFERENCE, mysqlParser.ST_TOUCHES, mysqlParser.ST_UNION, mysqlParser.ST_WITHIN, mysqlParser.ST_X, mysqlParser.ST_Y, mysqlParser.SUBDATE, mysqlParser.SUBSTRING_INDEX, mysqlParser.SUBTIME, mysqlParser.SYSTEM_USER, mysqlParser.TAN, mysqlParser.TIMEDIFF, mysqlParser.TIMESTAMPADD, mysqlParser.TIMESTAMPDIFF, mysqlParser.TIME_FORMAT, mysqlParser.TIME_TO_SEC, mysqlParser.TOUCHES, mysqlParser.TO_BASE64, mysqlParser.TO_DAYS, mysqlParser.TO_SECONDS, mysqlParser.UCASE, mysqlParser.UNCOMPRESS, mysqlParser.UNCOMPRESSED_LENGTH, mysqlParser.UNHEX, mysqlParser.UNIX_TIMESTAMP, mysqlParser.UPDATEXML, mysqlParser.UPPER, mysqlParser.UUID, mysqlParser.UUID_SHORT, mysqlParser.VALIDATE_PASSWORD_STRENGTH, mysqlParser.VERSION, mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, mysqlParser.WEEKDAY, mysqlParser.WEEKOFYEAR, mysqlParser.WEIGHT_STRING, mysqlParser.WITHIN, mysqlParser.YEARWEEK, mysqlParser.Y_FUNCTION, mysqlParser.X_FUNCTION, mysqlParser.CHARSET_REVERSE_QOUTE_STRING, mysqlParser.ID, mysqlParser.REVERSE_QUOTE_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5077
                self.uid()
                pass
            elif token in [mysqlParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5078
                self.match(mysqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleId(self):
            return self.getTypedRuleContext(mysqlParser.SimpleIdContext,0)


        def REVERSE_QUOTE_ID(self):
            return self.getToken(mysqlParser.REVERSE_QUOTE_ID, 0)

        def CHARSET_REVERSE_QOUTE_STRING(self):
            return self.getToken(mysqlParser.CHARSET_REVERSE_QOUTE_STRING, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_uid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUid" ):
                listener.enterUid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUid" ):
                listener.exitUid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUid" ):
                return visitor.visitUid(self)
            else:
                return visitor.visitChildren(self)




    def uid(self):

        localctx = mysqlParser.UidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_uid)
        try:
            self.state = 5084
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.LEFT, mysqlParser.RIGHT, mysqlParser.DATE, mysqlParser.TIME, mysqlParser.TIMESTAMP, mysqlParser.DATETIME, mysqlParser.YEAR, mysqlParser.TEXT, mysqlParser.ENUM, mysqlParser.COUNT, mysqlParser.POSITION, mysqlParser.ACCOUNT, mysqlParser.ACTION, mysqlParser.AFTER, mysqlParser.AGGREGATE, mysqlParser.ALGORITHM, mysqlParser.ANY, mysqlParser.AT, mysqlParser.AUTHORS, mysqlParser.AUTOCOMMIT, mysqlParser.AUTOEXTEND_SIZE, mysqlParser.AUTO_INCREMENT, mysqlParser.AVG_ROW_LENGTH, mysqlParser.BEGIN, mysqlParser.BINLOG, mysqlParser.BIT, mysqlParser.BLOCK, mysqlParser.BTREE, mysqlParser.CASCADED, mysqlParser.CHAIN, mysqlParser.CHANNEL, mysqlParser.CHECKSUM, mysqlParser.CIPHER, mysqlParser.CLIENT, mysqlParser.COALESCE, mysqlParser.CODE, mysqlParser.COLUMNS, mysqlParser.COLUMN_FORMAT, mysqlParser.COMMENT, mysqlParser.COMMIT, mysqlParser.COMPACT, mysqlParser.COMPLETION, mysqlParser.COMPRESSED, mysqlParser.COMPRESSION, mysqlParser.CONCURRENT, mysqlParser.CONNECTION, mysqlParser.CONSISTENT, mysqlParser.CONTAINS, mysqlParser.CONTEXT, mysqlParser.CONTRIBUTORS, mysqlParser.COPY, mysqlParser.CPU, mysqlParser.DATA, mysqlParser.DATAFILE, mysqlParser.DEALLOCATE, mysqlParser.DEFAULT_AUTH, mysqlParser.DEFINER, mysqlParser.DELAY_KEY_WRITE, mysqlParser.DIRECTORY, mysqlParser.DISABLE, mysqlParser.DISCARD, mysqlParser.DISK, mysqlParser.DO, mysqlParser.DUMPFILE, mysqlParser.DUPLICATE, mysqlParser.DYNAMIC, mysqlParser.ENABLE, mysqlParser.ENCRYPTION, mysqlParser.ENDS, mysqlParser.ENGINE, mysqlParser.ENGINES, mysqlParser.ERROR, mysqlParser.ERRORS, mysqlParser.ESCAPE, mysqlParser.EVEN, mysqlParser.EVENT, mysqlParser.EVENTS, mysqlParser.EVERY, mysqlParser.EXCHANGE, mysqlParser.EXCLUSIVE, mysqlParser.EXPIRE, mysqlParser.EXTENT_SIZE, mysqlParser.FAULTS, mysqlParser.FIELDS, mysqlParser.FILE_BLOCK_SIZE, mysqlParser.FILTER, mysqlParser.FIRST, mysqlParser.FIXED, mysqlParser.FOLLOWS, mysqlParser.FULL, mysqlParser.FUNCTION, mysqlParser.GLOBAL, mysqlParser.GRANTS, mysqlParser.GROUP_REPLICATION, mysqlParser.HASH, mysqlParser.HOST, mysqlParser.IDENTIFIED, mysqlParser.IGNORE_SERVER_IDS, mysqlParser.IMPORT, mysqlParser.INDEXES, mysqlParser.INITIAL_SIZE, mysqlParser.INPLACE, mysqlParser.INSERT_METHOD, mysqlParser.INSTANCE, mysqlParser.INVOKER, mysqlParser.IO, mysqlParser.IO_THREAD, mysqlParser.IPC, mysqlParser.ISOLATION, mysqlParser.ISSUER, mysqlParser.KEY_BLOCK_SIZE, mysqlParser.LANGUAGE, mysqlParser.LAST, mysqlParser.LEAVES, mysqlParser.LESS, mysqlParser.LEVEL, mysqlParser.LIST, mysqlParser.LOCAL, mysqlParser.LOGFILE, mysqlParser.LOGS, mysqlParser.MASTER, mysqlParser.MASTER_AUTO_POSITION, mysqlParser.MASTER_CONNECT_RETRY, mysqlParser.MASTER_DELAY, mysqlParser.MASTER_HEARTBEAT_PERIOD, mysqlParser.MASTER_HOST, mysqlParser.MASTER_LOG_FILE, mysqlParser.MASTER_LOG_POS, mysqlParser.MASTER_PASSWORD, mysqlParser.MASTER_PORT, mysqlParser.MASTER_RETRY_COUNT, mysqlParser.MASTER_SSL, mysqlParser.MASTER_SSL_CA, mysqlParser.MASTER_SSL_CAPATH, mysqlParser.MASTER_SSL_CERT, mysqlParser.MASTER_SSL_CIPHER, mysqlParser.MASTER_SSL_CRL, mysqlParser.MASTER_SSL_CRLPATH, mysqlParser.MASTER_SSL_KEY, mysqlParser.MASTER_TLS_VERSION, mysqlParser.MASTER_USER, mysqlParser.MAX_CONNECTIONS_PER_HOUR, mysqlParser.MAX_QUERIES_PER_HOUR, mysqlParser.MAX_ROWS, mysqlParser.MAX_SIZE, mysqlParser.MAX_UPDATES_PER_HOUR, mysqlParser.MAX_USER_CONNECTIONS, mysqlParser.MERGE, mysqlParser.MID, mysqlParser.MIGRATE, mysqlParser.MIN_ROWS, mysqlParser.MODIFY, mysqlParser.MUTEX, mysqlParser.MYSQL, mysqlParser.NAME, mysqlParser.NAMES, mysqlParser.NCHAR, mysqlParser.NEVER, mysqlParser.NO, mysqlParser.NODEGROUP, mysqlParser.NONE, mysqlParser.OFFLINE, mysqlParser.OFFSET, mysqlParser.OJ, mysqlParser.OLD_PASSWORD, mysqlParser.ONE, mysqlParser.ONLINE, mysqlParser.ONLY, mysqlParser.OPTIMIZER_COSTS, mysqlParser.OPTIONS, mysqlParser.OWNER, mysqlParser.PACK_KEYS, mysqlParser.PAGE, mysqlParser.PARSER, mysqlParser.PARTIAL, mysqlParser.PARTITIONING, mysqlParser.PARTITIONS, mysqlParser.PASSWORD, mysqlParser.PHASE, mysqlParser.PLUGIN_DIR, mysqlParser.PLUGINS, mysqlParser.PORT, mysqlParser.PRECEDES, mysqlParser.PREPARE, mysqlParser.PRESERVE, mysqlParser.PREV, mysqlParser.PROCESSLIST, mysqlParser.PROFILE, mysqlParser.PROFILES, mysqlParser.PROXY, mysqlParser.QUERY, mysqlParser.QUICK, mysqlParser.REBUILD, mysqlParser.RECOVER, mysqlParser.REDO_BUFFER_SIZE, mysqlParser.REDUNDANT, mysqlParser.RELAY_LOG_FILE, mysqlParser.RELAY_LOG_POS, mysqlParser.RELAYLOG, mysqlParser.REMOVE, mysqlParser.REORGANIZE, mysqlParser.REPAIR, mysqlParser.REPLICATE_DO_DB, mysqlParser.REPLICATE_DO_TABLE, mysqlParser.REPLICATE_IGNORE_DB, mysqlParser.REPLICATE_IGNORE_TABLE, mysqlParser.REPLICATE_REWRITE_DB, mysqlParser.REPLICATE_WILD_DO_TABLE, mysqlParser.REPLICATE_WILD_IGNORE_TABLE, mysqlParser.REPLICATION, mysqlParser.RESUME, mysqlParser.RETURNS, mysqlParser.ROLLBACK, mysqlParser.ROLLUP, mysqlParser.ROTATE, mysqlParser.ROW, mysqlParser.ROWS, mysqlParser.ROW_FORMAT, mysqlParser.SAVEPOINT, mysqlParser.SCHEDULE, mysqlParser.SECURITY, mysqlParser.SERVER, mysqlParser.SESSION, mysqlParser.SHARE, mysqlParser.SHARED, mysqlParser.SIGNED, mysqlParser.SIMPLE, mysqlParser.SLAVE, mysqlParser.SNAPSHOT, mysqlParser.SOCKET, mysqlParser.SOME, mysqlParser.SOUNDS, mysqlParser.SOURCE, mysqlParser.SQL_AFTER_GTIDS, mysqlParser.SQL_AFTER_MTS_GAPS, mysqlParser.SQL_BEFORE_GTIDS, mysqlParser.SQL_BUFFER_RESULT, mysqlParser.SQL_CACHE, mysqlParser.SQL_NO_CACHE, mysqlParser.SQL_THREAD, mysqlParser.START, mysqlParser.STARTS, mysqlParser.STATS_AUTO_RECALC, mysqlParser.STATS_PERSISTENT, mysqlParser.STATS_SAMPLE_PAGES, mysqlParser.STATUS, mysqlParser.STOP, mysqlParser.STORAGE, mysqlParser.STRING, mysqlParser.SUBJECT, mysqlParser.SUBPARTITION, mysqlParser.SUBPARTITIONS, mysqlParser.SUSPEND, mysqlParser.SWAPS, mysqlParser.SWITCHES, mysqlParser.TABLESPACE, mysqlParser.TEMPORARY, mysqlParser.TEMPTABLE, mysqlParser.THAN, mysqlParser.TRANSACTION, mysqlParser.TRUNCATE, mysqlParser.UNDEFINED, mysqlParser.UNDOFILE, mysqlParser.UNDO_BUFFER_SIZE, mysqlParser.UNKNOWN, mysqlParser.UPGRADE, mysqlParser.USER, mysqlParser.VALIDATION, mysqlParser.VALUE, mysqlParser.VARIABLES, mysqlParser.VIEW, mysqlParser.WAIT, mysqlParser.WARNINGS, mysqlParser.WITHOUT, mysqlParser.WORK, mysqlParser.WRAPPER, mysqlParser.X509, mysqlParser.XA, mysqlParser.XML, mysqlParser.QUARTER, mysqlParser.MONTH, mysqlParser.DAY, mysqlParser.HOUR, mysqlParser.MINUTE, mysqlParser.WEEK, mysqlParser.SECOND, mysqlParser.MICROSECOND, mysqlParser.TABLES, mysqlParser.ROUTINE, mysqlParser.EXECUTE, mysqlParser.FILE, mysqlParser.PROCESS, mysqlParser.RELOAD, mysqlParser.SHUTDOWN, mysqlParser.SUPER, mysqlParser.PRIVILEGES, mysqlParser.ARMSCII8, mysqlParser.ASCII, mysqlParser.BIG5, mysqlParser.CP1250, mysqlParser.CP1251, mysqlParser.CP1256, mysqlParser.CP1257, mysqlParser.CP850, mysqlParser.CP852, mysqlParser.CP866, mysqlParser.CP932, mysqlParser.DEC8, mysqlParser.EUCJPMS, mysqlParser.EUCKR, mysqlParser.GB2312, mysqlParser.GBK, mysqlParser.GEOSTD8, mysqlParser.GREEK, mysqlParser.HEBREW, mysqlParser.HP8, mysqlParser.KEYBCS2, mysqlParser.KOI8R, mysqlParser.KOI8U, mysqlParser.LATIN1, mysqlParser.LATIN2, mysqlParser.LATIN5, mysqlParser.LATIN7, mysqlParser.MACCE, mysqlParser.MACROMAN, mysqlParser.SJIS, mysqlParser.SWE7, mysqlParser.TIS620, mysqlParser.UCS2, mysqlParser.UJIS, mysqlParser.UTF16, mysqlParser.UTF16LE, mysqlParser.UTF32, mysqlParser.UTF8, mysqlParser.UTF8MB3, mysqlParser.UTF8MB4, mysqlParser.ARCHIVE, mysqlParser.BLACKHOLE, mysqlParser.CSV, mysqlParser.FEDERATED, mysqlParser.INNODB, mysqlParser.MEMORY, mysqlParser.MRG_MYISAM, mysqlParser.MYISAM, mysqlParser.NDB, mysqlParser.NDBCLUSTER, mysqlParser.PERFOMANCE_SCHEMA, mysqlParser.REPEATABLE, mysqlParser.COMMITTED, mysqlParser.UNCOMMITTED, mysqlParser.SERIALIZABLE, mysqlParser.GEOMETRYCOLLECTION, mysqlParser.LINESTRING, mysqlParser.MULTILINESTRING, mysqlParser.MULTIPOINT, mysqlParser.MULTIPOLYGON, mysqlParser.POINT, mysqlParser.POLYGON, mysqlParser.ABS, mysqlParser.ACOS, mysqlParser.ADDDATE, mysqlParser.ADDTIME, mysqlParser.AES_DECRYPT, mysqlParser.AES_ENCRYPT, mysqlParser.AREA, mysqlParser.ASBINARY, mysqlParser.ASIN, mysqlParser.ASTEXT, mysqlParser.ASWKB, mysqlParser.ASWKT, mysqlParser.ASYMMETRIC_DECRYPT, mysqlParser.ASYMMETRIC_DERIVE, mysqlParser.ASYMMETRIC_ENCRYPT, mysqlParser.ASYMMETRIC_SIGN, mysqlParser.ASYMMETRIC_VERIFY, mysqlParser.ATAN, mysqlParser.ATAN2, mysqlParser.BENCHMARK, mysqlParser.BIN, mysqlParser.BIT_COUNT, mysqlParser.BIT_LENGTH, mysqlParser.BUFFER, mysqlParser.CEIL, mysqlParser.CEILING, mysqlParser.CENTROID, mysqlParser.CHARACTER_LENGTH, mysqlParser.CHARSET, mysqlParser.CHAR_LENGTH, mysqlParser.COERCIBILITY, mysqlParser.COLLATION, mysqlParser.COMPRESS, mysqlParser.CONCAT, mysqlParser.CONCAT_WS, mysqlParser.CONNECTION_ID, mysqlParser.CONV, mysqlParser.CONVERT_TZ, mysqlParser.COS, mysqlParser.COT, mysqlParser.CRC32, mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY, mysqlParser.CREATE_ASYMMETRIC_PUB_KEY, mysqlParser.CREATE_DH_PARAMETERS, mysqlParser.CREATE_DIGEST, mysqlParser.CROSSES, mysqlParser.DATEDIFF, mysqlParser.DATE_FORMAT, mysqlParser.DAYNAME, mysqlParser.DAYOFMONTH, mysqlParser.DAYOFWEEK, mysqlParser.DAYOFYEAR, mysqlParser.DECODE, mysqlParser.DEGREES, mysqlParser.DES_DECRYPT, mysqlParser.DES_ENCRYPT, mysqlParser.DIMENSION, mysqlParser.DISJOINT, mysqlParser.ELT, mysqlParser.ENCODE, mysqlParser.ENCRYPT, mysqlParser.ENDPOINT, mysqlParser.ENVELOPE, mysqlParser.EQUALS, mysqlParser.EXP, mysqlParser.EXPORT_SET, mysqlParser.EXTERIORRING, mysqlParser.EXTRACTVALUE, mysqlParser.FIELD, mysqlParser.FIND_IN_SET, mysqlParser.FLOOR, mysqlParser.FORMAT, mysqlParser.FOUND_ROWS, mysqlParser.FROM_BASE64, mysqlParser.FROM_DAYS, mysqlParser.FROM_UNIXTIME, mysqlParser.GEOMCOLLFROMTEXT, mysqlParser.GEOMCOLLFROMWKB, mysqlParser.GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.GEOMETRYCOLLECTIONFROMWKB, mysqlParser.GEOMETRYFROMTEXT, mysqlParser.GEOMETRYFROMWKB, mysqlParser.GEOMETRYN, mysqlParser.GEOMETRYTYPE, mysqlParser.GEOMFROMTEXT, mysqlParser.GEOMFROMWKB, mysqlParser.GET_FORMAT, mysqlParser.GET_LOCK, mysqlParser.GLENGTH, mysqlParser.GREATEST, mysqlParser.GTID_SUBSET, mysqlParser.GTID_SUBTRACT, mysqlParser.HEX, mysqlParser.IFNULL, mysqlParser.INET6_ATON, mysqlParser.INET6_NTOA, mysqlParser.INET_ATON, mysqlParser.INET_NTOA, mysqlParser.INSTR, mysqlParser.INTERIORRINGN, mysqlParser.INTERSECTS, mysqlParser.ISCLOSED, mysqlParser.ISEMPTY, mysqlParser.ISNULL, mysqlParser.ISSIMPLE, mysqlParser.IS_FREE_LOCK, mysqlParser.IS_IPV4, mysqlParser.IS_IPV4_COMPAT, mysqlParser.IS_IPV4_MAPPED, mysqlParser.IS_IPV6, mysqlParser.IS_USED_LOCK, mysqlParser.LAST_INSERT_ID, mysqlParser.LCASE, mysqlParser.LEAST, mysqlParser.LENGTH, mysqlParser.LINEFROMTEXT, mysqlParser.LINEFROMWKB, mysqlParser.LINESTRINGFROMTEXT, mysqlParser.LINESTRINGFROMWKB, mysqlParser.LN, mysqlParser.LOAD_FILE, mysqlParser.LOCATE, mysqlParser.LOG, mysqlParser.LOG10, mysqlParser.LOG2, mysqlParser.LOWER, mysqlParser.LPAD, mysqlParser.LTRIM, mysqlParser.MAKEDATE, mysqlParser.MAKETIME, mysqlParser.MAKE_SET, mysqlParser.MASTER_POS_WAIT, mysqlParser.MBRCONTAINS, mysqlParser.MBRDISJOINT, mysqlParser.MBREQUAL, mysqlParser.MBRINTERSECTS, mysqlParser.MBROVERLAPS, mysqlParser.MBRTOUCHES, mysqlParser.MBRWITHIN, mysqlParser.MD5, mysqlParser.MLINEFROMTEXT, mysqlParser.MLINEFROMWKB, mysqlParser.MONTHNAME, mysqlParser.MPOINTFROMTEXT, mysqlParser.MPOINTFROMWKB, mysqlParser.MPOLYFROMTEXT, mysqlParser.MPOLYFROMWKB, mysqlParser.MULTILINESTRINGFROMTEXT, mysqlParser.MULTILINESTRINGFROMWKB, mysqlParser.MULTIPOINTFROMTEXT, mysqlParser.MULTIPOINTFROMWKB, mysqlParser.MULTIPOLYGONFROMTEXT, mysqlParser.MULTIPOLYGONFROMWKB, mysqlParser.NAME_CONST, mysqlParser.NULLIF, mysqlParser.NUMGEOMETRIES, mysqlParser.NUMINTERIORRINGS, mysqlParser.NUMPOINTS, mysqlParser.OCT, mysqlParser.OCTET_LENGTH, mysqlParser.ORD, mysqlParser.OVERLAPS, mysqlParser.PERIOD_ADD, mysqlParser.PERIOD_DIFF, mysqlParser.PI, mysqlParser.POINTFROMTEXT, mysqlParser.POINTFROMWKB, mysqlParser.POINTN, mysqlParser.POLYFROMTEXT, mysqlParser.POLYFROMWKB, mysqlParser.POLYGONFROMTEXT, mysqlParser.POLYGONFROMWKB, mysqlParser.POW, mysqlParser.POWER, mysqlParser.QUOTE, mysqlParser.RADIANS, mysqlParser.RAND, mysqlParser.RANDOM_BYTES, mysqlParser.RELEASE_LOCK, mysqlParser.REVERSE, mysqlParser.ROUND, mysqlParser.ROW_COUNT, mysqlParser.RPAD, mysqlParser.RTRIM, mysqlParser.SEC_TO_TIME, mysqlParser.SESSION_USER, mysqlParser.SHA, mysqlParser.SHA1, mysqlParser.SHA2, mysqlParser.SIGN, mysqlParser.SIN, mysqlParser.SLEEP, mysqlParser.SOUNDEX, mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, mysqlParser.SQRT, mysqlParser.SRID, mysqlParser.STARTPOINT, mysqlParser.STRCMP, mysqlParser.STR_TO_DATE, mysqlParser.ST_AREA, mysqlParser.ST_ASBINARY, mysqlParser.ST_ASTEXT, mysqlParser.ST_ASWKB, mysqlParser.ST_ASWKT, mysqlParser.ST_BUFFER, mysqlParser.ST_CENTROID, mysqlParser.ST_CONTAINS, mysqlParser.ST_CROSSES, mysqlParser.ST_DIFFERENCE, mysqlParser.ST_DIMENSION, mysqlParser.ST_DISJOINT, mysqlParser.ST_DISTANCE, mysqlParser.ST_ENDPOINT, mysqlParser.ST_ENVELOPE, mysqlParser.ST_EQUALS, mysqlParser.ST_EXTERIORRING, mysqlParser.ST_GEOMCOLLFROMTEXT, mysqlParser.ST_GEOMCOLLFROMTXT, mysqlParser.ST_GEOMCOLLFROMWKB, mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, mysqlParser.ST_GEOMETRYFROMTEXT, mysqlParser.ST_GEOMETRYFROMWKB, mysqlParser.ST_GEOMETRYN, mysqlParser.ST_GEOMETRYTYPE, mysqlParser.ST_GEOMFROMTEXT, mysqlParser.ST_GEOMFROMWKB, mysqlParser.ST_INTERIORRINGN, mysqlParser.ST_INTERSECTION, mysqlParser.ST_INTERSECTS, mysqlParser.ST_ISCLOSED, mysqlParser.ST_ISEMPTY, mysqlParser.ST_ISSIMPLE, mysqlParser.ST_LINEFROMTEXT, mysqlParser.ST_LINEFROMWKB, mysqlParser.ST_LINESTRINGFROMTEXT, mysqlParser.ST_LINESTRINGFROMWKB, mysqlParser.ST_NUMGEOMETRIES, mysqlParser.ST_NUMINTERIORRING, mysqlParser.ST_NUMINTERIORRINGS, mysqlParser.ST_NUMPOINTS, mysqlParser.ST_OVERLAPS, mysqlParser.ST_POINTFROMTEXT, mysqlParser.ST_POINTFROMWKB, mysqlParser.ST_POINTN, mysqlParser.ST_POLYFROMTEXT, mysqlParser.ST_POLYFROMWKB, mysqlParser.ST_POLYGONFROMTEXT, mysqlParser.ST_POLYGONFROMWKB, mysqlParser.ST_SRID, mysqlParser.ST_STARTPOINT, mysqlParser.ST_SYMDIFFERENCE, mysqlParser.ST_TOUCHES, mysqlParser.ST_UNION, mysqlParser.ST_WITHIN, mysqlParser.ST_X, mysqlParser.ST_Y, mysqlParser.SUBDATE, mysqlParser.SUBSTRING_INDEX, mysqlParser.SUBTIME, mysqlParser.SYSTEM_USER, mysqlParser.TAN, mysqlParser.TIMEDIFF, mysqlParser.TIMESTAMPADD, mysqlParser.TIMESTAMPDIFF, mysqlParser.TIME_FORMAT, mysqlParser.TIME_TO_SEC, mysqlParser.TOUCHES, mysqlParser.TO_BASE64, mysqlParser.TO_DAYS, mysqlParser.TO_SECONDS, mysqlParser.UCASE, mysqlParser.UNCOMPRESS, mysqlParser.UNCOMPRESSED_LENGTH, mysqlParser.UNHEX, mysqlParser.UNIX_TIMESTAMP, mysqlParser.UPDATEXML, mysqlParser.UPPER, mysqlParser.UUID, mysqlParser.UUID_SHORT, mysqlParser.VALIDATE_PASSWORD_STRENGTH, mysqlParser.VERSION, mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, mysqlParser.WEEKDAY, mysqlParser.WEEKOFYEAR, mysqlParser.WEIGHT_STRING, mysqlParser.WITHIN, mysqlParser.YEARWEEK, mysqlParser.Y_FUNCTION, mysqlParser.X_FUNCTION, mysqlParser.ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5081
                self.simpleId()
                pass
            elif token in [mysqlParser.REVERSE_QUOTE_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5082
                self.match(mysqlParser.REVERSE_QUOTE_ID)
                pass
            elif token in [mysqlParser.CHARSET_REVERSE_QOUTE_STRING]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5083
                self.match(mysqlParser.CHARSET_REVERSE_QOUTE_STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(mysqlParser.ID, 0)

        def charsetNameBase(self):
            return self.getTypedRuleContext(mysqlParser.CharsetNameBaseContext,0)


        def transactionLevelBase(self):
            return self.getTypedRuleContext(mysqlParser.TransactionLevelBaseContext,0)


        def engineName(self):
            return self.getTypedRuleContext(mysqlParser.EngineNameContext,0)


        def privilegesBase(self):
            return self.getTypedRuleContext(mysqlParser.PrivilegesBaseContext,0)


        def intervalTypeBase(self):
            return self.getTypedRuleContext(mysqlParser.IntervalTypeBaseContext,0)


        def dataTypeBase(self):
            return self.getTypedRuleContext(mysqlParser.DataTypeBaseContext,0)


        def keywordsCanBeId(self):
            return self.getTypedRuleContext(mysqlParser.KeywordsCanBeIdContext,0)


        def functionNameBase(self):
            return self.getTypedRuleContext(mysqlParser.FunctionNameBaseContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_simpleId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleId" ):
                listener.enterSimpleId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleId" ):
                listener.exitSimpleId(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleId" ):
                return visitor.visitSimpleId(self)
            else:
                return visitor.visitChildren(self)




    def simpleId(self):

        localctx = mysqlParser.SimpleIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_simpleId)
        try:
            self.state = 5095
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,734,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5086
                self.match(mysqlParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5087
                self.charsetNameBase()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5088
                self.transactionLevelBase()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5089
                self.engineName()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5090
                self.privilegesBase()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5091
                self.intervalTypeBase()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5092
                self.dataTypeBase()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5093
                self.keywordsCanBeId()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5094
                self.functionNameBase()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DottedIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT_ID(self):
            return self.getToken(mysqlParser.DOT_ID, 0)

        def uid(self):
            return self.getTypedRuleContext(mysqlParser.UidContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_dottedId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDottedId" ):
                listener.enterDottedId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDottedId" ):
                listener.exitDottedId(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDottedId" ):
                return visitor.visitDottedId(self)
            else:
                return visitor.visitChildren(self)




    def dottedId(self):

        localctx = mysqlParser.DottedIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_dottedId)
        try:
            self.state = 5100
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.DOT_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5097
                self.match(mysqlParser.DOT_ID)
                pass
            elif token in [mysqlParser.DOT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5098
                self.match(mysqlParser.DOT)
                self.state = 5099
                self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecimalLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_LITERAL(self):
            return self.getToken(mysqlParser.DECIMAL_LITERAL, 0)

        def ZERO_DECIMAL(self):
            return self.getToken(mysqlParser.ZERO_DECIMAL, 0)

        def ONE_DECIMAL(self):
            return self.getToken(mysqlParser.ONE_DECIMAL, 0)

        def TWO_DECIMAL(self):
            return self.getToken(mysqlParser.TWO_DECIMAL, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_decimalLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteral" ):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteral" ):
                listener.exitDecimalLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecimalLiteral" ):
                return visitor.visitDecimalLiteral(self)
            else:
                return visitor.visitChildren(self)




    def decimalLiteral(self):

        localctx = mysqlParser.DecimalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_decimalLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5102
            _la = self._input.LA(1)
            if not(((((_la - 947)) & ~0x3f) == 0 and ((1 << (_la - 947)) & ((1 << (mysqlParser.ZERO_DECIMAL - 947)) | (1 << (mysqlParser.ONE_DECIMAL - 947)) | (1 << (mysqlParser.TWO_DECIMAL - 947)) | (1 << (mysqlParser.DECIMAL_LITERAL - 947)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FileSizeLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILESIZE_LITERAL(self):
            return self.getToken(mysqlParser.FILESIZE_LITERAL, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_fileSizeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileSizeLiteral" ):
                listener.enterFileSizeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileSizeLiteral" ):
                listener.exitFileSizeLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileSizeLiteral" ):
                return visitor.visitFileSizeLiteral(self)
            else:
                return visitor.visitChildren(self)




    def fileSizeLiteral(self):

        localctx = mysqlParser.FileSizeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_fileSizeLiteral)
        try:
            self.state = 5106
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.FILESIZE_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5104
                self.match(mysqlParser.FILESIZE_LITERAL)
                pass
            elif token in [mysqlParser.ZERO_DECIMAL, mysqlParser.ONE_DECIMAL, mysqlParser.TWO_DECIMAL, mysqlParser.DECIMAL_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5105
                self.decimalLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.STRING_LITERAL)
            else:
                return self.getToken(mysqlParser.STRING_LITERAL, i)

        def START_NATIONAL_STRING_LITERAL(self):
            return self.getToken(mysqlParser.START_NATIONAL_STRING_LITERAL, 0)

        def STRING_CHARSET_NAME(self):
            return self.getToken(mysqlParser.STRING_CHARSET_NAME, 0)

        def COLLATE(self):
            return self.getToken(mysqlParser.COLLATE, 0)

        def collationName(self):
            return self.getTypedRuleContext(mysqlParser.CollationNameContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = mysqlParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_stringLiteral)
        self._la = 0 # Token type
        try:
            self.state = 5131
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,743,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5113
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [mysqlParser.STRING_LITERAL, mysqlParser.STRING_CHARSET_NAME]:
                    self.state = 5109
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==mysqlParser.STRING_CHARSET_NAME:
                        self.state = 5108
                        self.match(mysqlParser.STRING_CHARSET_NAME)


                    self.state = 5111
                    self.match(mysqlParser.STRING_LITERAL)
                    pass
                elif token in [mysqlParser.START_NATIONAL_STRING_LITERAL]:
                    self.state = 5112
                    self.match(mysqlParser.START_NATIONAL_STRING_LITERAL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5116 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 5115
                        self.match(mysqlParser.STRING_LITERAL)

                    else:
                        raise NoViableAltException(self)
                    self.state = 5118 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,739,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5125
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [mysqlParser.STRING_LITERAL, mysqlParser.STRING_CHARSET_NAME]:
                    self.state = 5121
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==mysqlParser.STRING_CHARSET_NAME:
                        self.state = 5120
                        self.match(mysqlParser.STRING_CHARSET_NAME)


                    self.state = 5123
                    self.match(mysqlParser.STRING_LITERAL)
                    pass
                elif token in [mysqlParser.START_NATIONAL_STRING_LITERAL]:
                    self.state = 5124
                    self.match(mysqlParser.START_NATIONAL_STRING_LITERAL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5129
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,742,self._ctx)
                if la_ == 1:
                    self.state = 5127
                    self.match(mysqlParser.COLLATE)
                    self.state = 5128
                    self.collationName()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BooleanLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(mysqlParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(mysqlParser.FALSE, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanLiteral" ):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteral(self):

        localctx = mysqlParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5133
            _la = self._input.LA(1)
            if not(_la==mysqlParser.FALSE or _la==mysqlParser.TRUE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class HexadecimalLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEXADECIMAL_LITERAL(self):
            return self.getToken(mysqlParser.HEXADECIMAL_LITERAL, 0)

        def STRING_CHARSET_NAME(self):
            return self.getToken(mysqlParser.STRING_CHARSET_NAME, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_hexadecimalLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHexadecimalLiteral" ):
                listener.enterHexadecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHexadecimalLiteral" ):
                listener.exitHexadecimalLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHexadecimalLiteral" ):
                return visitor.visitHexadecimalLiteral(self)
            else:
                return visitor.visitChildren(self)




    def hexadecimalLiteral(self):

        localctx = mysqlParser.HexadecimalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_hexadecimalLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5136
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.STRING_CHARSET_NAME:
                self.state = 5135
                self.match(mysqlParser.STRING_CHARSET_NAME)


            self.state = 5138
            self.match(mysqlParser.HEXADECIMAL_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NullNotnullContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_LITERAL(self):
            return self.getToken(mysqlParser.NULL_LITERAL, 0)

        def NULL_SPEC_LITERAL(self):
            return self.getToken(mysqlParser.NULL_SPEC_LITERAL, 0)

        def NOT(self):
            return self.getToken(mysqlParser.NOT, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_nullNotnull

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullNotnull" ):
                listener.enterNullNotnull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullNotnull" ):
                listener.exitNullNotnull(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullNotnull" ):
                return visitor.visitNullNotnull(self)
            else:
                return visitor.visitChildren(self)




    def nullNotnull(self):

        localctx = mysqlParser.NullNotnullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_nullNotnull)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5141
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.NOT:
                self.state = 5140
                self.match(mysqlParser.NOT)


            self.state = 5143
            _la = self._input.LA(1)
            if not(_la==mysqlParser.NULL_LITERAL or _la==mysqlParser.NULL_SPEC_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(mysqlParser.StringLiteralContext,0)


        def decimalLiteral(self):
            return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,0)


        def hexadecimalLiteral(self):
            return self.getTypedRuleContext(mysqlParser.HexadecimalLiteralContext,0)


        def booleanLiteral(self):
            return self.getTypedRuleContext(mysqlParser.BooleanLiteralContext,0)


        def REAL_LITERAL(self):
            return self.getToken(mysqlParser.REAL_LITERAL, 0)

        def BIT_STRING(self):
            return self.getToken(mysqlParser.BIT_STRING, 0)

        def NULL_LITERAL(self):
            return self.getToken(mysqlParser.NULL_LITERAL, 0)

        def NULL_SPEC_LITERAL(self):
            return self.getToken(mysqlParser.NULL_SPEC_LITERAL, 0)

        def NOT(self):
            return self.getToken(mysqlParser.NOT, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstant" ):
                return visitor.visitConstant(self)
            else:
                return visitor.visitChildren(self)




    def constant(self):

        localctx = mysqlParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 5155
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,747,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5145
                self.stringLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5146
                self.decimalLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5147
                self.hexadecimalLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5148
                self.booleanLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5149
                self.match(mysqlParser.REAL_LITERAL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5150
                self.match(mysqlParser.BIT_STRING)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5152
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.NOT:
                    self.state = 5151
                    self.match(mysqlParser.NOT)


                self.state = 5154
                _la = self._input.LA(1)
                if not(_la==mysqlParser.NULL_LITERAL or _la==mysqlParser.NULL_SPEC_LITERAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_dataType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SpatialDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def GEOMETRYCOLLECTION(self):
            return self.getToken(mysqlParser.GEOMETRYCOLLECTION, 0)
        def LINESTRING(self):
            return self.getToken(mysqlParser.LINESTRING, 0)
        def MULTILINESTRING(self):
            return self.getToken(mysqlParser.MULTILINESTRING, 0)
        def MULTIPOINT(self):
            return self.getToken(mysqlParser.MULTIPOINT, 0)
        def MULTIPOLYGON(self):
            return self.getToken(mysqlParser.MULTIPOLYGON, 0)
        def POINT(self):
            return self.getToken(mysqlParser.POINT, 0)
        def POLYGON(self):
            return self.getToken(mysqlParser.POLYGON, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpatialDataType" ):
                listener.enterSpatialDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpatialDataType" ):
                listener.exitSpatialDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpatialDataType" ):
                return visitor.visitSpatialDataType(self)
            else:
                return visitor.visitChildren(self)


    class CollectionDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.STRING_LITERAL)
            else:
                return self.getToken(mysqlParser.STRING_LITERAL, i)
        def ENUM(self):
            return self.getToken(mysqlParser.ENUM, 0)
        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.SET)
            else:
                return self.getToken(mysqlParser.SET, i)
        def BINARY(self):
            return self.getToken(mysqlParser.BINARY, 0)
        def CHARACTER(self):
            return self.getToken(mysqlParser.CHARACTER, 0)
        def charsetName(self):
            return self.getTypedRuleContext(mysqlParser.CharsetNameContext,0)

        def COLLATE(self):
            return self.getToken(mysqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(mysqlParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionDataType" ):
                listener.enterCollectionDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionDataType" ):
                listener.exitCollectionDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollectionDataType" ):
                return visitor.visitCollectionDataType(self)
            else:
                return visitor.visitChildren(self)


    class DimensionDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def TINYINT(self):
            return self.getToken(mysqlParser.TINYINT, 0)
        def SMALLINT(self):
            return self.getToken(mysqlParser.SMALLINT, 0)
        def MEDIUMINT(self):
            return self.getToken(mysqlParser.MEDIUMINT, 0)
        def INT(self):
            return self.getToken(mysqlParser.INT, 0)
        def INTEGER(self):
            return self.getToken(mysqlParser.INTEGER, 0)
        def BIGINT(self):
            return self.getToken(mysqlParser.BIGINT, 0)
        def lengthOneDimension(self):
            return self.getTypedRuleContext(mysqlParser.LengthOneDimensionContext,0)

        def UNSIGNED(self):
            return self.getToken(mysqlParser.UNSIGNED, 0)
        def ZEROFILL(self):
            return self.getToken(mysqlParser.ZEROFILL, 0)
        def REAL(self):
            return self.getToken(mysqlParser.REAL, 0)
        def DOUBLE(self):
            return self.getToken(mysqlParser.DOUBLE, 0)
        def FLOAT(self):
            return self.getToken(mysqlParser.FLOAT, 0)
        def lengthTwoDimension(self):
            return self.getTypedRuleContext(mysqlParser.LengthTwoDimensionContext,0)

        def DECIMAL(self):
            return self.getToken(mysqlParser.DECIMAL, 0)
        def NUMERIC(self):
            return self.getToken(mysqlParser.NUMERIC, 0)
        def lengthTwoOptionalDimension(self):
            return self.getTypedRuleContext(mysqlParser.LengthTwoOptionalDimensionContext,0)

        def BIT(self):
            return self.getToken(mysqlParser.BIT, 0)
        def TIME(self):
            return self.getToken(mysqlParser.TIME, 0)
        def TIMESTAMP(self):
            return self.getToken(mysqlParser.TIMESTAMP, 0)
        def DATETIME(self):
            return self.getToken(mysqlParser.DATETIME, 0)
        def BINARY(self):
            return self.getToken(mysqlParser.BINARY, 0)
        def VARBINARY(self):
            return self.getToken(mysqlParser.VARBINARY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDimensionDataType" ):
                listener.enterDimensionDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDimensionDataType" ):
                listener.exitDimensionDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDimensionDataType" ):
                return visitor.visitDimensionDataType(self)
            else:
                return visitor.visitChildren(self)


    class StringDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def CHAR(self):
            return self.getToken(mysqlParser.CHAR, 0)
        def VARCHAR(self):
            return self.getToken(mysqlParser.VARCHAR, 0)
        def TINYTEXT(self):
            return self.getToken(mysqlParser.TINYTEXT, 0)
        def TEXT(self):
            return self.getToken(mysqlParser.TEXT, 0)
        def MEDIUMTEXT(self):
            return self.getToken(mysqlParser.MEDIUMTEXT, 0)
        def LONGTEXT(self):
            return self.getToken(mysqlParser.LONGTEXT, 0)
        def lengthOneDimension(self):
            return self.getTypedRuleContext(mysqlParser.LengthOneDimensionContext,0)

        def BINARY(self):
            return self.getToken(mysqlParser.BINARY, 0)
        def CHARACTER(self):
            return self.getToken(mysqlParser.CHARACTER, 0)
        def SET(self):
            return self.getToken(mysqlParser.SET, 0)
        def charsetName(self):
            return self.getTypedRuleContext(mysqlParser.CharsetNameContext,0)

        def COLLATE(self):
            return self.getToken(mysqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(mysqlParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringDataType" ):
                listener.enterStringDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringDataType" ):
                listener.exitStringDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringDataType" ):
                return visitor.visitStringDataType(self)
            else:
                return visitor.visitChildren(self)


    class SimpleDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def DATE(self):
            return self.getToken(mysqlParser.DATE, 0)
        def YEAR(self):
            return self.getToken(mysqlParser.YEAR, 0)
        def TINYBLOB(self):
            return self.getToken(mysqlParser.TINYBLOB, 0)
        def BLOB(self):
            return self.getToken(mysqlParser.BLOB, 0)
        def MEDIUMBLOB(self):
            return self.getToken(mysqlParser.MEDIUMBLOB, 0)
        def LONGBLOB(self):
            return self.getToken(mysqlParser.LONGBLOB, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleDataType" ):
                listener.enterSimpleDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleDataType" ):
                listener.exitSimpleDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleDataType" ):
                return visitor.visitSimpleDataType(self)
            else:
                return visitor.visitChildren(self)



    def dataType(self):

        localctx = mysqlParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.state = 5232
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.CHAR, mysqlParser.VARCHAR, mysqlParser.TINYTEXT, mysqlParser.TEXT, mysqlParser.MEDIUMTEXT, mysqlParser.LONGTEXT]:
                localctx = mysqlParser.StringDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5157
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 185)) & ~0x3f) == 0 and ((1 << (_la - 185)) & ((1 << (mysqlParser.CHAR - 185)) | (1 << (mysqlParser.VARCHAR - 185)) | (1 << (mysqlParser.TINYTEXT - 185)) | (1 << (mysqlParser.TEXT - 185)) | (1 << (mysqlParser.MEDIUMTEXT - 185)) | (1 << (mysqlParser.LONGTEXT - 185)))) != 0)):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5159
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,748,self._ctx)
                if la_ == 1:
                    self.state = 5158
                    self.lengthOneDimension()


                self.state = 5162
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.BINARY:
                    self.state = 5161
                    self.match(mysqlParser.BINARY)


                self.state = 5167
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.CHARACTER:
                    self.state = 5164
                    self.match(mysqlParser.CHARACTER)
                    self.state = 5165
                    self.match(mysqlParser.SET)
                    self.state = 5166
                    self.charsetName()


                self.state = 5171
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.COLLATE:
                    self.state = 5169
                    self.match(mysqlParser.COLLATE)
                    self.state = 5170
                    self.collationName()


                pass
            elif token in [mysqlParser.TINYINT, mysqlParser.SMALLINT, mysqlParser.MEDIUMINT, mysqlParser.INT, mysqlParser.INTEGER, mysqlParser.BIGINT]:
                localctx = mysqlParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5173
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 169)) & ~0x3f) == 0 and ((1 << (_la - 169)) & ((1 << (mysqlParser.TINYINT - 169)) | (1 << (mysqlParser.SMALLINT - 169)) | (1 << (mysqlParser.MEDIUMINT - 169)) | (1 << (mysqlParser.INT - 169)) | (1 << (mysqlParser.INTEGER - 169)) | (1 << (mysqlParser.BIGINT - 169)))) != 0)):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5175
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,752,self._ctx)
                if la_ == 1:
                    self.state = 5174
                    self.lengthOneDimension()


                self.state = 5178
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.UNSIGNED:
                    self.state = 5177
                    self.match(mysqlParser.UNSIGNED)


                self.state = 5181
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.ZEROFILL:
                    self.state = 5180
                    self.match(mysqlParser.ZEROFILL)


                pass
            elif token in [mysqlParser.REAL, mysqlParser.DOUBLE, mysqlParser.FLOAT]:
                localctx = mysqlParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5183
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 175)) & ~0x3f) == 0 and ((1 << (_la - 175)) & ((1 << (mysqlParser.REAL - 175)) | (1 << (mysqlParser.DOUBLE - 175)) | (1 << (mysqlParser.FLOAT - 175)))) != 0)):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5185
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,755,self._ctx)
                if la_ == 1:
                    self.state = 5184
                    self.lengthTwoDimension()


                self.state = 5188
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.UNSIGNED:
                    self.state = 5187
                    self.match(mysqlParser.UNSIGNED)


                self.state = 5191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.ZEROFILL:
                    self.state = 5190
                    self.match(mysqlParser.ZEROFILL)


                pass
            elif token in [mysqlParser.DECIMAL, mysqlParser.NUMERIC]:
                localctx = mysqlParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 5193
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.DECIMAL or _la==mysqlParser.NUMERIC):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5195
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,758,self._ctx)
                if la_ == 1:
                    self.state = 5194
                    self.lengthTwoOptionalDimension()


                self.state = 5198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.UNSIGNED:
                    self.state = 5197
                    self.match(mysqlParser.UNSIGNED)


                self.state = 5201
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.ZEROFILL:
                    self.state = 5200
                    self.match(mysqlParser.ZEROFILL)


                pass
            elif token in [mysqlParser.DATE, mysqlParser.YEAR, mysqlParser.TINYBLOB, mysqlParser.BLOB, mysqlParser.MEDIUMBLOB, mysqlParser.LONGBLOB]:
                localctx = mysqlParser.SimpleDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 5203
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (mysqlParser.DATE - 180)) | (1 << (mysqlParser.YEAR - 180)) | (1 << (mysqlParser.TINYBLOB - 180)) | (1 << (mysqlParser.BLOB - 180)) | (1 << (mysqlParser.MEDIUMBLOB - 180)) | (1 << (mysqlParser.LONGBLOB - 180)))) != 0)):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [mysqlParser.TIME, mysqlParser.TIMESTAMP, mysqlParser.DATETIME, mysqlParser.BINARY, mysqlParser.VARBINARY, mysqlParser.BIT]:
                localctx = mysqlParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 5204
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 181)) & ~0x3f) == 0 and ((1 << (_la - 181)) & ((1 << (mysqlParser.TIME - 181)) | (1 << (mysqlParser.TIMESTAMP - 181)) | (1 << (mysqlParser.DATETIME - 181)) | (1 << (mysqlParser.BINARY - 181)) | (1 << (mysqlParser.VARBINARY - 181)))) != 0) or _la==mysqlParser.BIT):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5206
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,761,self._ctx)
                if la_ == 1:
                    self.state = 5205
                    self.lengthOneDimension()


                pass
            elif token in [mysqlParser.SET, mysqlParser.ENUM]:
                localctx = mysqlParser.CollectionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 5208
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.SET or _la==mysqlParser.ENUM):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5209
                self.match(mysqlParser.LR_BRACKET)
                self.state = 5210
                self.match(mysqlParser.STRING_LITERAL)
                self.state = 5215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.COMMA:
                    self.state = 5211
                    self.match(mysqlParser.COMMA)
                    self.state = 5212
                    self.match(mysqlParser.STRING_LITERAL)
                    self.state = 5217
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5218
                self.match(mysqlParser.RR_BRACKET)
                self.state = 5220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.BINARY:
                    self.state = 5219
                    self.match(mysqlParser.BINARY)


                self.state = 5225
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.CHARACTER:
                    self.state = 5222
                    self.match(mysqlParser.CHARACTER)
                    self.state = 5223
                    self.match(mysqlParser.SET)
                    self.state = 5224
                    self.charsetName()


                self.state = 5229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.COLLATE:
                    self.state = 5227
                    self.match(mysqlParser.COLLATE)
                    self.state = 5228
                    self.collationName()


                pass
            elif token in [mysqlParser.GEOMETRYCOLLECTION, mysqlParser.LINESTRING, mysqlParser.MULTILINESTRING, mysqlParser.MULTIPOINT, mysqlParser.MULTIPOLYGON, mysqlParser.POINT, mysqlParser.POLYGON]:
                localctx = mysqlParser.SpatialDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 5231
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 620)) & ~0x3f) == 0 and ((1 << (_la - 620)) & ((1 << (mysqlParser.GEOMETRYCOLLECTION - 620)) | (1 << (mysqlParser.LINESTRING - 620)) | (1 << (mysqlParser.MULTILINESTRING - 620)) | (1 << (mysqlParser.MULTIPOINT - 620)) | (1 << (mysqlParser.MULTIPOLYGON - 620)) | (1 << (mysqlParser.POINT - 620)) | (1 << (mysqlParser.POLYGON - 620)))) != 0)):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConvertedDataTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.typeName = None # Token

        def BINARY(self):
            return self.getToken(mysqlParser.BINARY, 0)

        def NCHAR(self):
            return self.getToken(mysqlParser.NCHAR, 0)

        def lengthOneDimension(self):
            return self.getTypedRuleContext(mysqlParser.LengthOneDimensionContext,0)


        def CHAR(self):
            return self.getToken(mysqlParser.CHAR, 0)

        def CHARACTER(self):
            return self.getToken(mysqlParser.CHARACTER, 0)

        def SET(self):
            return self.getToken(mysqlParser.SET, 0)

        def charsetName(self):
            return self.getTypedRuleContext(mysqlParser.CharsetNameContext,0)


        def DATE(self):
            return self.getToken(mysqlParser.DATE, 0)

        def DATETIME(self):
            return self.getToken(mysqlParser.DATETIME, 0)

        def TIME(self):
            return self.getToken(mysqlParser.TIME, 0)

        def DECIMAL(self):
            return self.getToken(mysqlParser.DECIMAL, 0)

        def lengthTwoDimension(self):
            return self.getTypedRuleContext(mysqlParser.LengthTwoDimensionContext,0)


        def SIGNED(self):
            return self.getToken(mysqlParser.SIGNED, 0)

        def UNSIGNED(self):
            return self.getToken(mysqlParser.UNSIGNED, 0)

        def INTEGER(self):
            return self.getToken(mysqlParser.INTEGER, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_convertedDataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConvertedDataType" ):
                listener.enterConvertedDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConvertedDataType" ):
                listener.exitConvertedDataType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConvertedDataType" ):
                return visitor.visitConvertedDataType(self)
            else:
                return visitor.visitChildren(self)




    def convertedDataType(self):

        localctx = mysqlParser.ConvertedDataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_convertedDataType)
        self._la = 0 # Token type
        try:
            self.state = 5256
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.BINARY, mysqlParser.NCHAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5234
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.BINARY or _la==mysqlParser.NCHAR):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.LR_BRACKET:
                    self.state = 5235
                    self.lengthOneDimension()


                pass
            elif token in [mysqlParser.CHAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5238
                localctx.typeName = self.match(mysqlParser.CHAR)
                self.state = 5240
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.LR_BRACKET:
                    self.state = 5239
                    self.lengthOneDimension()


                self.state = 5245
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.CHARACTER:
                    self.state = 5242
                    self.match(mysqlParser.CHARACTER)
                    self.state = 5243
                    self.match(mysqlParser.SET)
                    self.state = 5244
                    self.charsetName()


                pass
            elif token in [mysqlParser.DATE, mysqlParser.TIME, mysqlParser.DATETIME]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5247
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (mysqlParser.DATE - 180)) | (1 << (mysqlParser.TIME - 180)) | (1 << (mysqlParser.DATETIME - 180)))) != 0)):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [mysqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5248
                localctx.typeName = self.match(mysqlParser.DECIMAL)
                self.state = 5250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.LR_BRACKET:
                    self.state = 5249
                    self.lengthTwoDimension()


                pass
            elif token in [mysqlParser.UNSIGNED, mysqlParser.SIGNED]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5252
                _la = self._input.LA(1)
                if not(_la==mysqlParser.UNSIGNED or _la==mysqlParser.SIGNED):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.INTEGER:
                    self.state = 5253
                    self.match(mysqlParser.INTEGER)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LengthOneDimensionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decimalLiteral(self):
            return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_lengthOneDimension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLengthOneDimension" ):
                listener.enterLengthOneDimension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLengthOneDimension" ):
                listener.exitLengthOneDimension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLengthOneDimension" ):
                return visitor.visitLengthOneDimension(self)
            else:
                return visitor.visitChildren(self)




    def lengthOneDimension(self):

        localctx = mysqlParser.LengthOneDimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_lengthOneDimension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5258
            self.match(mysqlParser.LR_BRACKET)
            self.state = 5259
            self.decimalLiteral()
            self.state = 5260
            self.match(mysqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LengthTwoDimensionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_lengthTwoDimension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLengthTwoDimension" ):
                listener.enterLengthTwoDimension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLengthTwoDimension" ):
                listener.exitLengthTwoDimension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLengthTwoDimension" ):
                return visitor.visitLengthTwoDimension(self)
            else:
                return visitor.visitChildren(self)




    def lengthTwoDimension(self):

        localctx = mysqlParser.LengthTwoDimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_lengthTwoDimension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5262
            self.match(mysqlParser.LR_BRACKET)
            self.state = 5263
            self.decimalLiteral()
            self.state = 5264
            self.match(mysqlParser.COMMA)
            self.state = 5265
            self.decimalLiteral()
            self.state = 5266
            self.match(mysqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LengthTwoOptionalDimensionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_lengthTwoOptionalDimension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLengthTwoOptionalDimension" ):
                listener.enterLengthTwoOptionalDimension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLengthTwoOptionalDimension" ):
                listener.exitLengthTwoOptionalDimension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLengthTwoOptionalDimension" ):
                return visitor.visitLengthTwoOptionalDimension(self)
            else:
                return visitor.visitChildren(self)




    def lengthTwoOptionalDimension(self):

        localctx = mysqlParser.LengthTwoOptionalDimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_lengthTwoOptionalDimension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5268
            self.match(mysqlParser.LR_BRACKET)
            self.state = 5269
            self.decimalLiteral()
            self.state = 5272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==mysqlParser.COMMA:
                self.state = 5270
                self.match(mysqlParser.COMMA)
                self.state = 5271
                self.decimalLiteral()


            self.state = 5274
            self.match(mysqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UidListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.UidContext)
            else:
                return self.getTypedRuleContext(mysqlParser.UidContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_uidList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUidList" ):
                listener.enterUidList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUidList" ):
                listener.exitUidList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUidList" ):
                return visitor.visitUidList(self)
            else:
                return visitor.visitChildren(self)




    def uidList(self):

        localctx = mysqlParser.UidListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_uidList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5276
            self.uid()
            self.state = 5281
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,774,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5277
                    self.match(mysqlParser.COMMA)
                    self.state = 5278
                    self.uid() 
                self.state = 5283
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,774,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TablesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.TableNameContext)
            else:
                return self.getTypedRuleContext(mysqlParser.TableNameContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_tables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTables" ):
                listener.enterTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTables" ):
                listener.exitTables(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTables" ):
                return visitor.visitTables(self)
            else:
                return visitor.visitChildren(self)




    def tables(self):

        localctx = mysqlParser.TablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_tables)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5284
            self.tableName()
            self.state = 5289
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,775,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5285
                    self.match(mysqlParser.COMMA)
                    self.state = 5286
                    self.tableName() 
                self.state = 5291
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,775,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TablePairsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.TableNameContext)
            else:
                return self.getTypedRuleContext(mysqlParser.TableNameContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_tablePairs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablePairs" ):
                listener.enterTablePairs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablePairs" ):
                listener.exitTablePairs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTablePairs" ):
                return visitor.visitTablePairs(self)
            else:
                return visitor.visitChildren(self)




    def tablePairs(self):

        localctx = mysqlParser.TablePairsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_tablePairs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5292
            self.match(mysqlParser.LR_BRACKET)
            self.state = 5293
            self.tableName()
            self.state = 5294
            self.match(mysqlParser.COMMA)
            self.state = 5295
            self.tableName()
            self.state = 5296
            self.match(mysqlParser.RR_BRACKET)
            self.state = 5306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.COMMA:
                self.state = 5297
                self.match(mysqlParser.COMMA)
                self.state = 5298
                self.match(mysqlParser.LR_BRACKET)
                self.state = 5299
                self.tableName()
                self.state = 5300
                self.match(mysqlParser.COMMA)
                self.state = 5301
                self.tableName()
                self.state = 5302
                self.match(mysqlParser.RR_BRACKET)
                self.state = 5308
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndexColumnNamesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def indexColumnName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.IndexColumnNameContext)
            else:
                return self.getTypedRuleContext(mysqlParser.IndexColumnNameContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_indexColumnNames

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexColumnNames" ):
                listener.enterIndexColumnNames(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexColumnNames" ):
                listener.exitIndexColumnNames(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexColumnNames" ):
                return visitor.visitIndexColumnNames(self)
            else:
                return visitor.visitChildren(self)




    def indexColumnNames(self):

        localctx = mysqlParser.IndexColumnNamesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_indexColumnNames)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5309
            self.match(mysqlParser.LR_BRACKET)
            self.state = 5310
            self.indexColumnName()
            self.state = 5315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.COMMA:
                self.state = 5311
                self.match(mysqlParser.COMMA)
                self.state = 5312
                self.indexColumnName()
                self.state = 5317
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5318
            self.match(mysqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_expressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressions" ):
                listener.enterExpressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressions" ):
                listener.exitExpressions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressions" ):
                return visitor.visitExpressions(self)
            else:
                return visitor.visitChildren(self)




    def expressions(self):

        localctx = mysqlParser.ExpressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_expressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5320
            self.expression(0)
            self.state = 5325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.COMMA:
                self.state = 5321
                self.match(mysqlParser.COMMA)
                self.state = 5322
                self.expression(0)
                self.state = 5327
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.ConstantContext)
            else:
                return self.getTypedRuleContext(mysqlParser.ConstantContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_constants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstants" ):
                listener.enterConstants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstants" ):
                listener.exitConstants(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstants" ):
                return visitor.visitConstants(self)
            else:
                return visitor.visitChildren(self)




    def constants(self):

        localctx = mysqlParser.ConstantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_constants)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5328
            self.constant()
            self.state = 5333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.COMMA:
                self.state = 5329
                self.match(mysqlParser.COMMA)
                self.state = 5330
                self.constant()
                self.state = 5335
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleStringsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.STRING_LITERAL)
            else:
                return self.getToken(mysqlParser.STRING_LITERAL, i)

        def getRuleIndex(self):
            return mysqlParser.RULE_simpleStrings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStrings" ):
                listener.enterSimpleStrings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStrings" ):
                listener.exitSimpleStrings(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleStrings" ):
                return visitor.visitSimpleStrings(self)
            else:
                return visitor.visitChildren(self)




    def simpleStrings(self):

        localctx = mysqlParser.SimpleStringsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_simpleStrings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5336
            self.match(mysqlParser.STRING_LITERAL)
            self.state = 5341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.COMMA:
                self.state = 5337
                self.match(mysqlParser.COMMA)
                self.state = 5338
                self.match(mysqlParser.STRING_LITERAL)
                self.state = 5343
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UserVariablesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.LOCAL_ID)
            else:
                return self.getToken(mysqlParser.LOCAL_ID, i)

        def getRuleIndex(self):
            return mysqlParser.RULE_userVariables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserVariables" ):
                listener.enterUserVariables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserVariables" ):
                listener.exitUserVariables(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserVariables" ):
                return visitor.visitUserVariables(self)
            else:
                return visitor.visitChildren(self)




    def userVariables(self):

        localctx = mysqlParser.UserVariablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_userVariables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5344
            self.match(mysqlParser.LOCAL_ID)
            self.state = 5349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.COMMA:
                self.state = 5345
                self.match(mysqlParser.COMMA)
                self.state = 5346
                self.match(mysqlParser.LOCAL_ID)
                self.state = 5351
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefaultValueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_LITERAL(self):
            return self.getToken(mysqlParser.NULL_LITERAL, 0)

        def constant(self):
            return self.getTypedRuleContext(mysqlParser.ConstantContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_defaultValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValue" ):
                listener.enterDefaultValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValue" ):
                listener.exitDefaultValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultValue" ):
                return visitor.visitDefaultValue(self)
            else:
                return visitor.visitChildren(self)




    def defaultValue(self):

        localctx = mysqlParser.DefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_defaultValue)
        try:
            self.state = 5354
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,782,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5352
                self.match(mysqlParser.NULL_LITERAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5353
                self.constant()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfExistsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(mysqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(mysqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_ifExists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExists" ):
                listener.enterIfExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExists" ):
                listener.exitIfExists(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfExists" ):
                return visitor.visitIfExists(self)
            else:
                return visitor.visitChildren(self)




    def ifExists(self):

        localctx = mysqlParser.IfExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_ifExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5356
            self.match(mysqlParser.IF)
            self.state = 5357
            self.match(mysqlParser.EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfNotExistsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(mysqlParser.IF, 0)

        def NOT(self):
            return self.getToken(mysqlParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(mysqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_ifNotExists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfNotExists" ):
                listener.enterIfNotExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfNotExists" ):
                listener.exitIfNotExists(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfNotExists" ):
                return visitor.visitIfNotExists(self)
            else:
                return visitor.visitChildren(self)




    def ifNotExists(self):

        localctx = mysqlParser.IfNotExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_ifNotExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5359
            self.match(mysqlParser.IF)
            self.state = 5360
            self.match(mysqlParser.NOT)
            self.state = 5361
            self.match(mysqlParser.EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_functionCall

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SpecificFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def specificFunction(self):
            return self.getTypedRuleContext(mysqlParser.SpecificFunctionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecificFunctionCall" ):
                listener.enterSpecificFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecificFunctionCall" ):
                listener.exitSpecificFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecificFunctionCall" ):
                return visitor.visitSpecificFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class PasswordFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def passwordFunctionClause(self):
            return self.getTypedRuleContext(mysqlParser.PasswordFunctionClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPasswordFunctionCall" ):
                listener.enterPasswordFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPasswordFunctionCall" ):
                listener.exitPasswordFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPasswordFunctionCall" ):
                return visitor.visitPasswordFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class UdfFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullId(self):
            return self.getTypedRuleContext(mysqlParser.FullIdContext,0)

        def functionArgs(self):
            return self.getTypedRuleContext(mysqlParser.FunctionArgsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdfFunctionCall" ):
                listener.enterUdfFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdfFunctionCall" ):
                listener.exitUdfFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUdfFunctionCall" ):
                return visitor.visitUdfFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class AggregateFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def aggregateWindowedFunction(self):
            return self.getTypedRuleContext(mysqlParser.AggregateWindowedFunctionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregateFunctionCall" ):
                listener.enterAggregateFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregateFunctionCall" ):
                listener.exitAggregateFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregateFunctionCall" ):
                return visitor.visitAggregateFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class ScalarFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalarFunctionName(self):
            return self.getTypedRuleContext(mysqlParser.ScalarFunctionNameContext,0)

        def functionArgs(self):
            return self.getTypedRuleContext(mysqlParser.FunctionArgsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarFunctionCall" ):
                listener.enterScalarFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarFunctionCall" ):
                listener.exitScalarFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScalarFunctionCall" ):
                return visitor.visitScalarFunctionCall(self)
            else:
                return visitor.visitChildren(self)



    def functionCall(self):

        localctx = mysqlParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_functionCall)
        self._la = 0 # Token type
        try:
            self.state = 5380
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,785,self._ctx)
            if la_ == 1:
                localctx = mysqlParser.SpecificFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5363
                self.specificFunction()
                pass

            elif la_ == 2:
                localctx = mysqlParser.AggregateFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5364
                self.aggregateWindowedFunction()
                pass

            elif la_ == 3:
                localctx = mysqlParser.ScalarFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5365
                self.scalarFunctionName()
                self.state = 5366
                self.match(mysqlParser.LR_BRACKET)
                self.state = 5368
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << mysqlParser.CASE) | (1 << mysqlParser.CAST) | (1 << mysqlParser.CONVERT) | (1 << mysqlParser.CURRENT_USER) | (1 << mysqlParser.DEFAULT) | (1 << mysqlParser.EXISTS) | (1 << mysqlParser.FALSE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (mysqlParser.IF - 64)) | (1 << (mysqlParser.INTERVAL - 64)) | (1 << (mysqlParser.LEFT - 64)) | (1 << (mysqlParser.NOT - 64)) | (1 << (mysqlParser.NULL_LITERAL - 64)) | (1 << (mysqlParser.REPLACE - 64)) | (1 << (mysqlParser.RIGHT - 64)))) != 0) or ((((_la - 151)) & ~0x3f) == 0 and ((1 << (_la - 151)) & ((1 << (mysqlParser.TRUE - 151)) | (1 << (mysqlParser.VALUES - 151)) | (1 << (mysqlParser.DATE - 151)) | (1 << (mysqlParser.TIME - 151)) | (1 << (mysqlParser.TIMESTAMP - 151)) | (1 << (mysqlParser.DATETIME - 151)) | (1 << (mysqlParser.YEAR - 151)) | (1 << (mysqlParser.CHAR - 151)) | (1 << (mysqlParser.BINARY - 151)) | (1 << (mysqlParser.TEXT - 151)) | (1 << (mysqlParser.ENUM - 151)) | (1 << (mysqlParser.AVG - 151)) | (1 << (mysqlParser.BIT_AND - 151)) | (1 << (mysqlParser.BIT_OR - 151)) | (1 << (mysqlParser.BIT_XOR - 151)) | (1 << (mysqlParser.COUNT - 151)) | (1 << (mysqlParser.GROUP_CONCAT - 151)))) != 0) or ((((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & ((1 << (mysqlParser.MAX - 215)) | (1 << (mysqlParser.MIN - 215)) | (1 << (mysqlParser.STD - 215)) | (1 << (mysqlParser.STDDEV - 215)) | (1 << (mysqlParser.STDDEV_POP - 215)) | (1 << (mysqlParser.STDDEV_SAMP - 215)) | (1 << (mysqlParser.SUM - 215)) | (1 << (mysqlParser.VAR_POP - 215)) | (1 << (mysqlParser.VAR_SAMP - 215)) | (1 << (mysqlParser.VARIANCE - 215)) | (1 << (mysqlParser.CURRENT_DATE - 215)) | (1 << (mysqlParser.CURRENT_TIME - 215)) | (1 << (mysqlParser.CURRENT_TIMESTAMP - 215)) | (1 << (mysqlParser.LOCALTIME - 215)) | (1 << (mysqlParser.CURDATE - 215)) | (1 << (mysqlParser.CURTIME - 215)) | (1 << (mysqlParser.DATE_ADD - 215)) | (1 << (mysqlParser.DATE_SUB - 215)) | (1 << (mysqlParser.EXTRACT - 215)) | (1 << (mysqlParser.LOCALTIMESTAMP - 215)) | (1 << (mysqlParser.NOW - 215)) | (1 << (mysqlParser.POSITION - 215)) | (1 << (mysqlParser.SUBSTR - 215)) | (1 << (mysqlParser.SUBSTRING - 215)) | (1 << (mysqlParser.SYSDATE - 215)) | (1 << (mysqlParser.TRIM - 215)) | (1 << (mysqlParser.UTC_DATE - 215)) | (1 << (mysqlParser.UTC_TIME - 215)) | (1 << (mysqlParser.UTC_TIMESTAMP - 215)) | (1 << (mysqlParser.ACCOUNT - 215)) | (1 << (mysqlParser.ACTION - 215)) | (1 << (mysqlParser.AFTER - 215)) | (1 << (mysqlParser.AGGREGATE - 215)) | (1 << (mysqlParser.ALGORITHM - 215)) | (1 << (mysqlParser.ANY - 215)) | (1 << (mysqlParser.AT - 215)) | (1 << (mysqlParser.AUTHORS - 215)) | (1 << (mysqlParser.AUTOCOMMIT - 215)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 215)) | (1 << (mysqlParser.AUTO_INCREMENT - 215)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 215)) | (1 << (mysqlParser.BEGIN - 215)) | (1 << (mysqlParser.BINLOG - 215)) | (1 << (mysqlParser.BIT - 215)) | (1 << (mysqlParser.BLOCK - 215)) | (1 << (mysqlParser.BTREE - 215)) | (1 << (mysqlParser.CASCADED - 215)) | (1 << (mysqlParser.CHAIN - 215)) | (1 << (mysqlParser.CHANNEL - 215)) | (1 << (mysqlParser.CHECKSUM - 215)) | (1 << (mysqlParser.CIPHER - 215)) | (1 << (mysqlParser.CLIENT - 215)) | (1 << (mysqlParser.COALESCE - 215)) | (1 << (mysqlParser.CODE - 215)) | (1 << (mysqlParser.COLUMNS - 215)) | (1 << (mysqlParser.COLUMN_FORMAT - 215)) | (1 << (mysqlParser.COMMENT - 215)) | (1 << (mysqlParser.COMMIT - 215)) | (1 << (mysqlParser.COMPACT - 215)) | (1 << (mysqlParser.COMPLETION - 215)) | (1 << (mysqlParser.COMPRESSED - 215)))) != 0) or ((((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & ((1 << (mysqlParser.COMPRESSION - 279)) | (1 << (mysqlParser.CONCURRENT - 279)) | (1 << (mysqlParser.CONNECTION - 279)) | (1 << (mysqlParser.CONSISTENT - 279)) | (1 << (mysqlParser.CONTAINS - 279)) | (1 << (mysqlParser.CONTEXT - 279)) | (1 << (mysqlParser.CONTRIBUTORS - 279)) | (1 << (mysqlParser.COPY - 279)) | (1 << (mysqlParser.CPU - 279)) | (1 << (mysqlParser.DATA - 279)) | (1 << (mysqlParser.DATAFILE - 279)) | (1 << (mysqlParser.DEALLOCATE - 279)) | (1 << (mysqlParser.DEFAULT_AUTH - 279)) | (1 << (mysqlParser.DEFINER - 279)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 279)) | (1 << (mysqlParser.DIRECTORY - 279)) | (1 << (mysqlParser.DISABLE - 279)) | (1 << (mysqlParser.DISCARD - 279)) | (1 << (mysqlParser.DISK - 279)) | (1 << (mysqlParser.DO - 279)) | (1 << (mysqlParser.DUMPFILE - 279)) | (1 << (mysqlParser.DUPLICATE - 279)) | (1 << (mysqlParser.DYNAMIC - 279)) | (1 << (mysqlParser.ENABLE - 279)) | (1 << (mysqlParser.ENCRYPTION - 279)) | (1 << (mysqlParser.ENDS - 279)) | (1 << (mysqlParser.ENGINE - 279)) | (1 << (mysqlParser.ENGINES - 279)) | (1 << (mysqlParser.ERROR - 279)) | (1 << (mysqlParser.ERRORS - 279)) | (1 << (mysqlParser.ESCAPE - 279)) | (1 << (mysqlParser.EVEN - 279)) | (1 << (mysqlParser.EVENT - 279)) | (1 << (mysqlParser.EVENTS - 279)) | (1 << (mysqlParser.EVERY - 279)) | (1 << (mysqlParser.EXCHANGE - 279)) | (1 << (mysqlParser.EXCLUSIVE - 279)) | (1 << (mysqlParser.EXPIRE - 279)) | (1 << (mysqlParser.EXTENT_SIZE - 279)) | (1 << (mysqlParser.FAULTS - 279)) | (1 << (mysqlParser.FIELDS - 279)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 279)) | (1 << (mysqlParser.FILTER - 279)) | (1 << (mysqlParser.FIRST - 279)) | (1 << (mysqlParser.FIXED - 279)) | (1 << (mysqlParser.FOLLOWS - 279)) | (1 << (mysqlParser.FULL - 279)) | (1 << (mysqlParser.FUNCTION - 279)) | (1 << (mysqlParser.GLOBAL - 279)) | (1 << (mysqlParser.GRANTS - 279)) | (1 << (mysqlParser.GROUP_REPLICATION - 279)) | (1 << (mysqlParser.HASH - 279)) | (1 << (mysqlParser.HOST - 279)))) != 0) or ((((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & ((1 << (mysqlParser.IDENTIFIED - 343)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 343)) | (1 << (mysqlParser.IMPORT - 343)) | (1 << (mysqlParser.INDEXES - 343)) | (1 << (mysqlParser.INITIAL_SIZE - 343)) | (1 << (mysqlParser.INPLACE - 343)) | (1 << (mysqlParser.INSERT_METHOD - 343)) | (1 << (mysqlParser.INSTANCE - 343)) | (1 << (mysqlParser.INVOKER - 343)) | (1 << (mysqlParser.IO - 343)) | (1 << (mysqlParser.IO_THREAD - 343)) | (1 << (mysqlParser.IPC - 343)) | (1 << (mysqlParser.ISOLATION - 343)) | (1 << (mysqlParser.ISSUER - 343)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 343)) | (1 << (mysqlParser.LANGUAGE - 343)) | (1 << (mysqlParser.LAST - 343)) | (1 << (mysqlParser.LEAVES - 343)) | (1 << (mysqlParser.LESS - 343)) | (1 << (mysqlParser.LEVEL - 343)) | (1 << (mysqlParser.LIST - 343)) | (1 << (mysqlParser.LOCAL - 343)) | (1 << (mysqlParser.LOGFILE - 343)) | (1 << (mysqlParser.LOGS - 343)) | (1 << (mysqlParser.MASTER - 343)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 343)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 343)) | (1 << (mysqlParser.MASTER_DELAY - 343)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 343)) | (1 << (mysqlParser.MASTER_HOST - 343)) | (1 << (mysqlParser.MASTER_LOG_FILE - 343)) | (1 << (mysqlParser.MASTER_LOG_POS - 343)) | (1 << (mysqlParser.MASTER_PASSWORD - 343)) | (1 << (mysqlParser.MASTER_PORT - 343)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 343)) | (1 << (mysqlParser.MASTER_SSL - 343)) | (1 << (mysqlParser.MASTER_SSL_CA - 343)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 343)) | (1 << (mysqlParser.MASTER_SSL_CERT - 343)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 343)) | (1 << (mysqlParser.MASTER_SSL_CRL - 343)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 343)) | (1 << (mysqlParser.MASTER_SSL_KEY - 343)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 343)) | (1 << (mysqlParser.MASTER_USER - 343)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 343)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 343)) | (1 << (mysqlParser.MAX_ROWS - 343)) | (1 << (mysqlParser.MAX_SIZE - 343)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 343)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 343)) | (1 << (mysqlParser.MERGE - 343)) | (1 << (mysqlParser.MID - 343)) | (1 << (mysqlParser.MIGRATE - 343)) | (1 << (mysqlParser.MIN_ROWS - 343)) | (1 << (mysqlParser.MODIFY - 343)) | (1 << (mysqlParser.MUTEX - 343)) | (1 << (mysqlParser.MYSQL - 343)) | (1 << (mysqlParser.NAME - 343)) | (1 << (mysqlParser.NAMES - 343)))) != 0) or ((((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & ((1 << (mysqlParser.NCHAR - 407)) | (1 << (mysqlParser.NEVER - 407)) | (1 << (mysqlParser.NO - 407)) | (1 << (mysqlParser.NODEGROUP - 407)) | (1 << (mysqlParser.NONE - 407)) | (1 << (mysqlParser.OFFLINE - 407)) | (1 << (mysqlParser.OFFSET - 407)) | (1 << (mysqlParser.OJ - 407)) | (1 << (mysqlParser.OLD_PASSWORD - 407)) | (1 << (mysqlParser.ONE - 407)) | (1 << (mysqlParser.ONLINE - 407)) | (1 << (mysqlParser.ONLY - 407)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 407)) | (1 << (mysqlParser.OPTIONS - 407)) | (1 << (mysqlParser.OWNER - 407)) | (1 << (mysqlParser.PACK_KEYS - 407)) | (1 << (mysqlParser.PAGE - 407)) | (1 << (mysqlParser.PARSER - 407)) | (1 << (mysqlParser.PARTIAL - 407)) | (1 << (mysqlParser.PARTITIONING - 407)) | (1 << (mysqlParser.PARTITIONS - 407)) | (1 << (mysqlParser.PASSWORD - 407)) | (1 << (mysqlParser.PHASE - 407)) | (1 << (mysqlParser.PLUGIN_DIR - 407)) | (1 << (mysqlParser.PLUGINS - 407)) | (1 << (mysqlParser.PORT - 407)) | (1 << (mysqlParser.PRECEDES - 407)) | (1 << (mysqlParser.PREPARE - 407)) | (1 << (mysqlParser.PRESERVE - 407)) | (1 << (mysqlParser.PREV - 407)) | (1 << (mysqlParser.PROCESSLIST - 407)) | (1 << (mysqlParser.PROFILE - 407)) | (1 << (mysqlParser.PROFILES - 407)) | (1 << (mysqlParser.PROXY - 407)) | (1 << (mysqlParser.QUERY - 407)) | (1 << (mysqlParser.QUICK - 407)) | (1 << (mysqlParser.REBUILD - 407)) | (1 << (mysqlParser.RECOVER - 407)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 407)) | (1 << (mysqlParser.REDUNDANT - 407)) | (1 << (mysqlParser.RELAY_LOG_FILE - 407)) | (1 << (mysqlParser.RELAY_LOG_POS - 407)) | (1 << (mysqlParser.RELAYLOG - 407)) | (1 << (mysqlParser.REMOVE - 407)) | (1 << (mysqlParser.REORGANIZE - 407)) | (1 << (mysqlParser.REPAIR - 407)) | (1 << (mysqlParser.REPLICATE_DO_DB - 407)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 407)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 407)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 407)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 407)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 407)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 407)) | (1 << (mysqlParser.REPLICATION - 407)) | (1 << (mysqlParser.RESUME - 407)) | (1 << (mysqlParser.RETURNS - 407)) | (1 << (mysqlParser.ROLLBACK - 407)) | (1 << (mysqlParser.ROLLUP - 407)) | (1 << (mysqlParser.ROTATE - 407)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (mysqlParser.ROW - 471)) | (1 << (mysqlParser.ROWS - 471)) | (1 << (mysqlParser.ROW_FORMAT - 471)) | (1 << (mysqlParser.SAVEPOINT - 471)) | (1 << (mysqlParser.SCHEDULE - 471)) | (1 << (mysqlParser.SECURITY - 471)) | (1 << (mysqlParser.SERVER - 471)) | (1 << (mysqlParser.SESSION - 471)) | (1 << (mysqlParser.SHARE - 471)) | (1 << (mysqlParser.SHARED - 471)) | (1 << (mysqlParser.SIGNED - 471)) | (1 << (mysqlParser.SIMPLE - 471)) | (1 << (mysqlParser.SLAVE - 471)) | (1 << (mysqlParser.SNAPSHOT - 471)) | (1 << (mysqlParser.SOCKET - 471)) | (1 << (mysqlParser.SOME - 471)) | (1 << (mysqlParser.SOUNDS - 471)) | (1 << (mysqlParser.SOURCE - 471)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 471)) | (1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 471)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 471)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 471)) | (1 << (mysqlParser.SQL_CACHE - 471)) | (1 << (mysqlParser.SQL_NO_CACHE - 471)) | (1 << (mysqlParser.SQL_THREAD - 471)) | (1 << (mysqlParser.START - 471)) | (1 << (mysqlParser.STARTS - 471)) | (1 << (mysqlParser.STATS_AUTO_RECALC - 471)) | (1 << (mysqlParser.STATS_PERSISTENT - 471)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 471)) | (1 << (mysqlParser.STATUS - 471)) | (1 << (mysqlParser.STOP - 471)) | (1 << (mysqlParser.STORAGE - 471)) | (1 << (mysqlParser.STRING - 471)) | (1 << (mysqlParser.SUBJECT - 471)) | (1 << (mysqlParser.SUBPARTITION - 471)) | (1 << (mysqlParser.SUBPARTITIONS - 471)) | (1 << (mysqlParser.SUSPEND - 471)) | (1 << (mysqlParser.SWAPS - 471)) | (1 << (mysqlParser.SWITCHES - 471)) | (1 << (mysqlParser.TABLESPACE - 471)) | (1 << (mysqlParser.TEMPORARY - 471)) | (1 << (mysqlParser.TEMPTABLE - 471)) | (1 << (mysqlParser.THAN - 471)) | (1 << (mysqlParser.TRANSACTION - 471)) | (1 << (mysqlParser.TRUNCATE - 471)) | (1 << (mysqlParser.UNDEFINED - 471)) | (1 << (mysqlParser.UNDOFILE - 471)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 471)) | (1 << (mysqlParser.UNKNOWN - 471)) | (1 << (mysqlParser.UPGRADE - 471)) | (1 << (mysqlParser.USER - 471)) | (1 << (mysqlParser.VALIDATION - 471)) | (1 << (mysqlParser.VALUE - 471)) | (1 << (mysqlParser.VARIABLES - 471)) | (1 << (mysqlParser.VIEW - 471)))) != 0) or ((((_la - 535)) & ~0x3f) == 0 and ((1 << (_la - 535)) & ((1 << (mysqlParser.WAIT - 535)) | (1 << (mysqlParser.WARNINGS - 535)) | (1 << (mysqlParser.WITHOUT - 535)) | (1 << (mysqlParser.WORK - 535)) | (1 << (mysqlParser.WRAPPER - 535)) | (1 << (mysqlParser.X509 - 535)) | (1 << (mysqlParser.XA - 535)) | (1 << (mysqlParser.XML - 535)) | (1 << (mysqlParser.QUARTER - 535)) | (1 << (mysqlParser.MONTH - 535)) | (1 << (mysqlParser.DAY - 535)) | (1 << (mysqlParser.HOUR - 535)) | (1 << (mysqlParser.MINUTE - 535)) | (1 << (mysqlParser.WEEK - 535)) | (1 << (mysqlParser.SECOND - 535)) | (1 << (mysqlParser.MICROSECOND - 535)) | (1 << (mysqlParser.TABLES - 535)) | (1 << (mysqlParser.ROUTINE - 535)) | (1 << (mysqlParser.EXECUTE - 535)) | (1 << (mysqlParser.FILE - 535)) | (1 << (mysqlParser.PROCESS - 535)) | (1 << (mysqlParser.RELOAD - 535)) | (1 << (mysqlParser.SHUTDOWN - 535)) | (1 << (mysqlParser.SUPER - 535)) | (1 << (mysqlParser.PRIVILEGES - 535)) | (1 << (mysqlParser.ARMSCII8 - 535)) | (1 << (mysqlParser.ASCII - 535)) | (1 << (mysqlParser.BIG5 - 535)) | (1 << (mysqlParser.CP1250 - 535)) | (1 << (mysqlParser.CP1251 - 535)) | (1 << (mysqlParser.CP1256 - 535)) | (1 << (mysqlParser.CP1257 - 535)) | (1 << (mysqlParser.CP850 - 535)) | (1 << (mysqlParser.CP852 - 535)) | (1 << (mysqlParser.CP866 - 535)) | (1 << (mysqlParser.CP932 - 535)) | (1 << (mysqlParser.DEC8 - 535)) | (1 << (mysqlParser.EUCJPMS - 535)) | (1 << (mysqlParser.EUCKR - 535)) | (1 << (mysqlParser.GB2312 - 535)) | (1 << (mysqlParser.GBK - 535)) | (1 << (mysqlParser.GEOSTD8 - 535)) | (1 << (mysqlParser.GREEK - 535)) | (1 << (mysqlParser.HEBREW - 535)) | (1 << (mysqlParser.HP8 - 535)) | (1 << (mysqlParser.KEYBCS2 - 535)) | (1 << (mysqlParser.KOI8R - 535)) | (1 << (mysqlParser.KOI8U - 535)) | (1 << (mysqlParser.LATIN1 - 535)) | (1 << (mysqlParser.LATIN2 - 535)) | (1 << (mysqlParser.LATIN5 - 535)) | (1 << (mysqlParser.LATIN7 - 535)) | (1 << (mysqlParser.MACCE - 535)) | (1 << (mysqlParser.MACROMAN - 535)) | (1 << (mysqlParser.SJIS - 535)) | (1 << (mysqlParser.SWE7 - 535)) | (1 << (mysqlParser.TIS620 - 535)) | (1 << (mysqlParser.UCS2 - 535)) | (1 << (mysqlParser.UJIS - 535)))) != 0) or ((((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & ((1 << (mysqlParser.UTF16 - 599)) | (1 << (mysqlParser.UTF16LE - 599)) | (1 << (mysqlParser.UTF32 - 599)) | (1 << (mysqlParser.UTF8 - 599)) | (1 << (mysqlParser.UTF8MB3 - 599)) | (1 << (mysqlParser.UTF8MB4 - 599)) | (1 << (mysqlParser.ARCHIVE - 599)) | (1 << (mysqlParser.BLACKHOLE - 599)) | (1 << (mysqlParser.CSV - 599)) | (1 << (mysqlParser.FEDERATED - 599)) | (1 << (mysqlParser.INNODB - 599)) | (1 << (mysqlParser.MEMORY - 599)) | (1 << (mysqlParser.MRG_MYISAM - 599)) | (1 << (mysqlParser.MYISAM - 599)) | (1 << (mysqlParser.NDB - 599)) | (1 << (mysqlParser.NDBCLUSTER - 599)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 599)) | (1 << (mysqlParser.REPEATABLE - 599)) | (1 << (mysqlParser.COMMITTED - 599)) | (1 << (mysqlParser.UNCOMMITTED - 599)) | (1 << (mysqlParser.SERIALIZABLE - 599)) | (1 << (mysqlParser.GEOMETRYCOLLECTION - 599)) | (1 << (mysqlParser.LINESTRING - 599)) | (1 << (mysqlParser.MULTILINESTRING - 599)) | (1 << (mysqlParser.MULTIPOINT - 599)) | (1 << (mysqlParser.MULTIPOLYGON - 599)) | (1 << (mysqlParser.POINT - 599)) | (1 << (mysqlParser.POLYGON - 599)) | (1 << (mysqlParser.ABS - 599)) | (1 << (mysqlParser.ACOS - 599)) | (1 << (mysqlParser.ADDDATE - 599)) | (1 << (mysqlParser.ADDTIME - 599)) | (1 << (mysqlParser.AES_DECRYPT - 599)) | (1 << (mysqlParser.AES_ENCRYPT - 599)) | (1 << (mysqlParser.AREA - 599)) | (1 << (mysqlParser.ASBINARY - 599)) | (1 << (mysqlParser.ASIN - 599)) | (1 << (mysqlParser.ASTEXT - 599)) | (1 << (mysqlParser.ASWKB - 599)) | (1 << (mysqlParser.ASWKT - 599)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 599)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 599)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 599)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 599)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 599)) | (1 << (mysqlParser.ATAN - 599)) | (1 << (mysqlParser.ATAN2 - 599)) | (1 << (mysqlParser.BENCHMARK - 599)) | (1 << (mysqlParser.BIN - 599)) | (1 << (mysqlParser.BIT_COUNT - 599)) | (1 << (mysqlParser.BIT_LENGTH - 599)) | (1 << (mysqlParser.BUFFER - 599)) | (1 << (mysqlParser.CEIL - 599)) | (1 << (mysqlParser.CEILING - 599)) | (1 << (mysqlParser.CENTROID - 599)) | (1 << (mysqlParser.CHARACTER_LENGTH - 599)) | (1 << (mysqlParser.CHARSET - 599)) | (1 << (mysqlParser.CHAR_LENGTH - 599)) | (1 << (mysqlParser.COERCIBILITY - 599)) | (1 << (mysqlParser.COLLATION - 599)) | (1 << (mysqlParser.COMPRESS - 599)) | (1 << (mysqlParser.CONCAT - 599)) | (1 << (mysqlParser.CONCAT_WS - 599)) | (1 << (mysqlParser.CONNECTION_ID - 599)))) != 0) or ((((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & ((1 << (mysqlParser.CONV - 663)) | (1 << (mysqlParser.CONVERT_TZ - 663)) | (1 << (mysqlParser.COS - 663)) | (1 << (mysqlParser.COT - 663)) | (1 << (mysqlParser.CRC32 - 663)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 663)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 663)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 663)) | (1 << (mysqlParser.CREATE_DIGEST - 663)) | (1 << (mysqlParser.CROSSES - 663)) | (1 << (mysqlParser.DATEDIFF - 663)) | (1 << (mysqlParser.DATE_FORMAT - 663)) | (1 << (mysqlParser.DAYNAME - 663)) | (1 << (mysqlParser.DAYOFMONTH - 663)) | (1 << (mysqlParser.DAYOFWEEK - 663)) | (1 << (mysqlParser.DAYOFYEAR - 663)) | (1 << (mysqlParser.DECODE - 663)) | (1 << (mysqlParser.DEGREES - 663)) | (1 << (mysqlParser.DES_DECRYPT - 663)) | (1 << (mysqlParser.DES_ENCRYPT - 663)) | (1 << (mysqlParser.DIMENSION - 663)) | (1 << (mysqlParser.DISJOINT - 663)) | (1 << (mysqlParser.ELT - 663)) | (1 << (mysqlParser.ENCODE - 663)) | (1 << (mysqlParser.ENCRYPT - 663)) | (1 << (mysqlParser.ENDPOINT - 663)) | (1 << (mysqlParser.ENVELOPE - 663)) | (1 << (mysqlParser.EQUALS - 663)) | (1 << (mysqlParser.EXP - 663)) | (1 << (mysqlParser.EXPORT_SET - 663)) | (1 << (mysqlParser.EXTERIORRING - 663)) | (1 << (mysqlParser.EXTRACTVALUE - 663)) | (1 << (mysqlParser.FIELD - 663)) | (1 << (mysqlParser.FIND_IN_SET - 663)) | (1 << (mysqlParser.FLOOR - 663)) | (1 << (mysqlParser.FORMAT - 663)) | (1 << (mysqlParser.FOUND_ROWS - 663)) | (1 << (mysqlParser.FROM_BASE64 - 663)) | (1 << (mysqlParser.FROM_DAYS - 663)) | (1 << (mysqlParser.FROM_UNIXTIME - 663)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 663)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 663)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 663)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 663)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 663)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 663)) | (1 << (mysqlParser.GEOMETRYN - 663)) | (1 << (mysqlParser.GEOMETRYTYPE - 663)) | (1 << (mysqlParser.GEOMFROMTEXT - 663)) | (1 << (mysqlParser.GEOMFROMWKB - 663)) | (1 << (mysqlParser.GET_FORMAT - 663)) | (1 << (mysqlParser.GET_LOCK - 663)) | (1 << (mysqlParser.GLENGTH - 663)) | (1 << (mysqlParser.GREATEST - 663)) | (1 << (mysqlParser.GTID_SUBSET - 663)) | (1 << (mysqlParser.GTID_SUBTRACT - 663)) | (1 << (mysqlParser.HEX - 663)) | (1 << (mysqlParser.IFNULL - 663)) | (1 << (mysqlParser.INET6_ATON - 663)) | (1 << (mysqlParser.INET6_NTOA - 663)) | (1 << (mysqlParser.INET_ATON - 663)) | (1 << (mysqlParser.INET_NTOA - 663)) | (1 << (mysqlParser.INSTR - 663)) | (1 << (mysqlParser.INTERIORRINGN - 663)))) != 0) or ((((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & ((1 << (mysqlParser.INTERSECTS - 727)) | (1 << (mysqlParser.ISCLOSED - 727)) | (1 << (mysqlParser.ISEMPTY - 727)) | (1 << (mysqlParser.ISNULL - 727)) | (1 << (mysqlParser.ISSIMPLE - 727)) | (1 << (mysqlParser.IS_FREE_LOCK - 727)) | (1 << (mysqlParser.IS_IPV4 - 727)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 727)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 727)) | (1 << (mysqlParser.IS_IPV6 - 727)) | (1 << (mysqlParser.IS_USED_LOCK - 727)) | (1 << (mysqlParser.LAST_INSERT_ID - 727)) | (1 << (mysqlParser.LCASE - 727)) | (1 << (mysqlParser.LEAST - 727)) | (1 << (mysqlParser.LENGTH - 727)) | (1 << (mysqlParser.LINEFROMTEXT - 727)) | (1 << (mysqlParser.LINEFROMWKB - 727)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 727)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 727)) | (1 << (mysqlParser.LN - 727)) | (1 << (mysqlParser.LOAD_FILE - 727)) | (1 << (mysqlParser.LOCATE - 727)) | (1 << (mysqlParser.LOG - 727)) | (1 << (mysqlParser.LOG10 - 727)) | (1 << (mysqlParser.LOG2 - 727)) | (1 << (mysqlParser.LOWER - 727)) | (1 << (mysqlParser.LPAD - 727)) | (1 << (mysqlParser.LTRIM - 727)) | (1 << (mysqlParser.MAKEDATE - 727)) | (1 << (mysqlParser.MAKETIME - 727)) | (1 << (mysqlParser.MAKE_SET - 727)) | (1 << (mysqlParser.MASTER_POS_WAIT - 727)) | (1 << (mysqlParser.MBRCONTAINS - 727)) | (1 << (mysqlParser.MBRDISJOINT - 727)) | (1 << (mysqlParser.MBREQUAL - 727)) | (1 << (mysqlParser.MBRINTERSECTS - 727)) | (1 << (mysqlParser.MBROVERLAPS - 727)) | (1 << (mysqlParser.MBRTOUCHES - 727)) | (1 << (mysqlParser.MBRWITHIN - 727)) | (1 << (mysqlParser.MD5 - 727)) | (1 << (mysqlParser.MLINEFROMTEXT - 727)) | (1 << (mysqlParser.MLINEFROMWKB - 727)) | (1 << (mysqlParser.MONTHNAME - 727)) | (1 << (mysqlParser.MPOINTFROMTEXT - 727)) | (1 << (mysqlParser.MPOINTFROMWKB - 727)) | (1 << (mysqlParser.MPOLYFROMTEXT - 727)) | (1 << (mysqlParser.MPOLYFROMWKB - 727)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 727)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 727)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 727)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 727)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 727)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 727)) | (1 << (mysqlParser.NAME_CONST - 727)) | (1 << (mysqlParser.NULLIF - 727)) | (1 << (mysqlParser.NUMGEOMETRIES - 727)) | (1 << (mysqlParser.NUMINTERIORRINGS - 727)) | (1 << (mysqlParser.NUMPOINTS - 727)) | (1 << (mysqlParser.OCT - 727)) | (1 << (mysqlParser.OCTET_LENGTH - 727)) | (1 << (mysqlParser.ORD - 727)) | (1 << (mysqlParser.OVERLAPS - 727)) | (1 << (mysqlParser.PERIOD_ADD - 727)) | (1 << (mysqlParser.PERIOD_DIFF - 727)))) != 0) or ((((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & ((1 << (mysqlParser.PI - 791)) | (1 << (mysqlParser.POINTFROMTEXT - 791)) | (1 << (mysqlParser.POINTFROMWKB - 791)) | (1 << (mysqlParser.POINTN - 791)) | (1 << (mysqlParser.POLYFROMTEXT - 791)) | (1 << (mysqlParser.POLYFROMWKB - 791)) | (1 << (mysqlParser.POLYGONFROMTEXT - 791)) | (1 << (mysqlParser.POLYGONFROMWKB - 791)) | (1 << (mysqlParser.POW - 791)) | (1 << (mysqlParser.POWER - 791)) | (1 << (mysqlParser.QUOTE - 791)) | (1 << (mysqlParser.RADIANS - 791)) | (1 << (mysqlParser.RAND - 791)) | (1 << (mysqlParser.RANDOM_BYTES - 791)) | (1 << (mysqlParser.RELEASE_LOCK - 791)) | (1 << (mysqlParser.REVERSE - 791)) | (1 << (mysqlParser.ROUND - 791)) | (1 << (mysqlParser.ROW_COUNT - 791)) | (1 << (mysqlParser.RPAD - 791)) | (1 << (mysqlParser.RTRIM - 791)) | (1 << (mysqlParser.SEC_TO_TIME - 791)) | (1 << (mysqlParser.SESSION_USER - 791)) | (1 << (mysqlParser.SHA - 791)) | (1 << (mysqlParser.SHA1 - 791)) | (1 << (mysqlParser.SHA2 - 791)) | (1 << (mysqlParser.SIGN - 791)) | (1 << (mysqlParser.SIN - 791)) | (1 << (mysqlParser.SLEEP - 791)) | (1 << (mysqlParser.SOUNDEX - 791)) | (1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 791)) | (1 << (mysqlParser.SQRT - 791)) | (1 << (mysqlParser.SRID - 791)) | (1 << (mysqlParser.STARTPOINT - 791)) | (1 << (mysqlParser.STRCMP - 791)) | (1 << (mysqlParser.STR_TO_DATE - 791)) | (1 << (mysqlParser.ST_AREA - 791)) | (1 << (mysqlParser.ST_ASBINARY - 791)) | (1 << (mysqlParser.ST_ASTEXT - 791)) | (1 << (mysqlParser.ST_ASWKB - 791)) | (1 << (mysqlParser.ST_ASWKT - 791)) | (1 << (mysqlParser.ST_BUFFER - 791)) | (1 << (mysqlParser.ST_CENTROID - 791)) | (1 << (mysqlParser.ST_CONTAINS - 791)) | (1 << (mysqlParser.ST_CROSSES - 791)) | (1 << (mysqlParser.ST_DIFFERENCE - 791)) | (1 << (mysqlParser.ST_DIMENSION - 791)) | (1 << (mysqlParser.ST_DISJOINT - 791)) | (1 << (mysqlParser.ST_DISTANCE - 791)) | (1 << (mysqlParser.ST_ENDPOINT - 791)) | (1 << (mysqlParser.ST_ENVELOPE - 791)) | (1 << (mysqlParser.ST_EQUALS - 791)) | (1 << (mysqlParser.ST_EXTERIORRING - 791)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 791)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 791)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 791)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 791)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 791)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 791)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 791)) | (1 << (mysqlParser.ST_GEOMETRYN - 791)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 791)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 791)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 791)) | (1 << (mysqlParser.ST_INTERIORRINGN - 791)))) != 0) or ((((_la - 855)) & ~0x3f) == 0 and ((1 << (_la - 855)) & ((1 << (mysqlParser.ST_INTERSECTION - 855)) | (1 << (mysqlParser.ST_INTERSECTS - 855)) | (1 << (mysqlParser.ST_ISCLOSED - 855)) | (1 << (mysqlParser.ST_ISEMPTY - 855)) | (1 << (mysqlParser.ST_ISSIMPLE - 855)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 855)) | (1 << (mysqlParser.ST_LINEFROMWKB - 855)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 855)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 855)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 855)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 855)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 855)) | (1 << (mysqlParser.ST_NUMPOINTS - 855)) | (1 << (mysqlParser.ST_OVERLAPS - 855)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 855)) | (1 << (mysqlParser.ST_POINTFROMWKB - 855)) | (1 << (mysqlParser.ST_POINTN - 855)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 855)) | (1 << (mysqlParser.ST_POLYFROMWKB - 855)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 855)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 855)) | (1 << (mysqlParser.ST_SRID - 855)) | (1 << (mysqlParser.ST_STARTPOINT - 855)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 855)) | (1 << (mysqlParser.ST_TOUCHES - 855)) | (1 << (mysqlParser.ST_UNION - 855)) | (1 << (mysqlParser.ST_WITHIN - 855)) | (1 << (mysqlParser.ST_X - 855)) | (1 << (mysqlParser.ST_Y - 855)) | (1 << (mysqlParser.SUBDATE - 855)) | (1 << (mysqlParser.SUBSTRING_INDEX - 855)) | (1 << (mysqlParser.SUBTIME - 855)) | (1 << (mysqlParser.SYSTEM_USER - 855)) | (1 << (mysqlParser.TAN - 855)) | (1 << (mysqlParser.TIMEDIFF - 855)) | (1 << (mysqlParser.TIMESTAMPADD - 855)) | (1 << (mysqlParser.TIMESTAMPDIFF - 855)) | (1 << (mysqlParser.TIME_FORMAT - 855)) | (1 << (mysqlParser.TIME_TO_SEC - 855)) | (1 << (mysqlParser.TOUCHES - 855)) | (1 << (mysqlParser.TO_BASE64 - 855)) | (1 << (mysqlParser.TO_DAYS - 855)) | (1 << (mysqlParser.TO_SECONDS - 855)) | (1 << (mysqlParser.UCASE - 855)) | (1 << (mysqlParser.UNCOMPRESS - 855)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 855)) | (1 << (mysqlParser.UNHEX - 855)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 855)) | (1 << (mysqlParser.UPDATEXML - 855)) | (1 << (mysqlParser.UPPER - 855)) | (1 << (mysqlParser.UUID - 855)) | (1 << (mysqlParser.UUID_SHORT - 855)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 855)) | (1 << (mysqlParser.VERSION - 855)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 855)) | (1 << (mysqlParser.WEEKDAY - 855)) | (1 << (mysqlParser.WEEKOFYEAR - 855)) | (1 << (mysqlParser.WEIGHT_STRING - 855)) | (1 << (mysqlParser.WITHIN - 855)) | (1 << (mysqlParser.YEARWEEK - 855)) | (1 << (mysqlParser.Y_FUNCTION - 855)) | (1 << (mysqlParser.X_FUNCTION - 855)))) != 0) or ((((_la - 929)) & ~0x3f) == 0 and ((1 << (_la - 929)) & ((1 << (mysqlParser.PLUS - 929)) | (1 << (mysqlParser.MINUS - 929)) | (1 << (mysqlParser.EXCLAMATION_SYMBOL - 929)) | (1 << (mysqlParser.BIT_NOT_OP - 929)) | (1 << (mysqlParser.LR_BRACKET - 929)) | (1 << (mysqlParser.ZERO_DECIMAL - 929)) | (1 << (mysqlParser.ONE_DECIMAL - 929)) | (1 << (mysqlParser.TWO_DECIMAL - 929)) | (1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 929)) | (1 << (mysqlParser.START_NATIONAL_STRING_LITERAL - 929)) | (1 << (mysqlParser.STRING_LITERAL - 929)) | (1 << (mysqlParser.DECIMAL_LITERAL - 929)) | (1 << (mysqlParser.HEXADECIMAL_LITERAL - 929)) | (1 << (mysqlParser.REAL_LITERAL - 929)) | (1 << (mysqlParser.NULL_SPEC_LITERAL - 929)) | (1 << (mysqlParser.BIT_STRING - 929)) | (1 << (mysqlParser.STRING_CHARSET_NAME - 929)) | (1 << (mysqlParser.ID - 929)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 929)) | (1 << (mysqlParser.LOCAL_ID - 929)) | (1 << (mysqlParser.GLOBAL_ID - 929)))) != 0):
                    self.state = 5367
                    self.functionArgs()


                self.state = 5370
                self.match(mysqlParser.RR_BRACKET)
                pass

            elif la_ == 4:
                localctx = mysqlParser.UdfFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 5372
                self.fullId()
                self.state = 5373
                self.match(mysqlParser.LR_BRACKET)
                self.state = 5375
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << mysqlParser.CASE) | (1 << mysqlParser.CAST) | (1 << mysqlParser.CONVERT) | (1 << mysqlParser.CURRENT_USER) | (1 << mysqlParser.DEFAULT) | (1 << mysqlParser.EXISTS) | (1 << mysqlParser.FALSE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (mysqlParser.IF - 64)) | (1 << (mysqlParser.INTERVAL - 64)) | (1 << (mysqlParser.LEFT - 64)) | (1 << (mysqlParser.NOT - 64)) | (1 << (mysqlParser.NULL_LITERAL - 64)) | (1 << (mysqlParser.REPLACE - 64)) | (1 << (mysqlParser.RIGHT - 64)))) != 0) or ((((_la - 151)) & ~0x3f) == 0 and ((1 << (_la - 151)) & ((1 << (mysqlParser.TRUE - 151)) | (1 << (mysqlParser.VALUES - 151)) | (1 << (mysqlParser.DATE - 151)) | (1 << (mysqlParser.TIME - 151)) | (1 << (mysqlParser.TIMESTAMP - 151)) | (1 << (mysqlParser.DATETIME - 151)) | (1 << (mysqlParser.YEAR - 151)) | (1 << (mysqlParser.CHAR - 151)) | (1 << (mysqlParser.BINARY - 151)) | (1 << (mysqlParser.TEXT - 151)) | (1 << (mysqlParser.ENUM - 151)) | (1 << (mysqlParser.AVG - 151)) | (1 << (mysqlParser.BIT_AND - 151)) | (1 << (mysqlParser.BIT_OR - 151)) | (1 << (mysqlParser.BIT_XOR - 151)) | (1 << (mysqlParser.COUNT - 151)) | (1 << (mysqlParser.GROUP_CONCAT - 151)))) != 0) or ((((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & ((1 << (mysqlParser.MAX - 215)) | (1 << (mysqlParser.MIN - 215)) | (1 << (mysqlParser.STD - 215)) | (1 << (mysqlParser.STDDEV - 215)) | (1 << (mysqlParser.STDDEV_POP - 215)) | (1 << (mysqlParser.STDDEV_SAMP - 215)) | (1 << (mysqlParser.SUM - 215)) | (1 << (mysqlParser.VAR_POP - 215)) | (1 << (mysqlParser.VAR_SAMP - 215)) | (1 << (mysqlParser.VARIANCE - 215)) | (1 << (mysqlParser.CURRENT_DATE - 215)) | (1 << (mysqlParser.CURRENT_TIME - 215)) | (1 << (mysqlParser.CURRENT_TIMESTAMP - 215)) | (1 << (mysqlParser.LOCALTIME - 215)) | (1 << (mysqlParser.CURDATE - 215)) | (1 << (mysqlParser.CURTIME - 215)) | (1 << (mysqlParser.DATE_ADD - 215)) | (1 << (mysqlParser.DATE_SUB - 215)) | (1 << (mysqlParser.EXTRACT - 215)) | (1 << (mysqlParser.LOCALTIMESTAMP - 215)) | (1 << (mysqlParser.NOW - 215)) | (1 << (mysqlParser.POSITION - 215)) | (1 << (mysqlParser.SUBSTR - 215)) | (1 << (mysqlParser.SUBSTRING - 215)) | (1 << (mysqlParser.SYSDATE - 215)) | (1 << (mysqlParser.TRIM - 215)) | (1 << (mysqlParser.UTC_DATE - 215)) | (1 << (mysqlParser.UTC_TIME - 215)) | (1 << (mysqlParser.UTC_TIMESTAMP - 215)) | (1 << (mysqlParser.ACCOUNT - 215)) | (1 << (mysqlParser.ACTION - 215)) | (1 << (mysqlParser.AFTER - 215)) | (1 << (mysqlParser.AGGREGATE - 215)) | (1 << (mysqlParser.ALGORITHM - 215)) | (1 << (mysqlParser.ANY - 215)) | (1 << (mysqlParser.AT - 215)) | (1 << (mysqlParser.AUTHORS - 215)) | (1 << (mysqlParser.AUTOCOMMIT - 215)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 215)) | (1 << (mysqlParser.AUTO_INCREMENT - 215)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 215)) | (1 << (mysqlParser.BEGIN - 215)) | (1 << (mysqlParser.BINLOG - 215)) | (1 << (mysqlParser.BIT - 215)) | (1 << (mysqlParser.BLOCK - 215)) | (1 << (mysqlParser.BTREE - 215)) | (1 << (mysqlParser.CASCADED - 215)) | (1 << (mysqlParser.CHAIN - 215)) | (1 << (mysqlParser.CHANNEL - 215)) | (1 << (mysqlParser.CHECKSUM - 215)) | (1 << (mysqlParser.CIPHER - 215)) | (1 << (mysqlParser.CLIENT - 215)) | (1 << (mysqlParser.COALESCE - 215)) | (1 << (mysqlParser.CODE - 215)) | (1 << (mysqlParser.COLUMNS - 215)) | (1 << (mysqlParser.COLUMN_FORMAT - 215)) | (1 << (mysqlParser.COMMENT - 215)) | (1 << (mysqlParser.COMMIT - 215)) | (1 << (mysqlParser.COMPACT - 215)) | (1 << (mysqlParser.COMPLETION - 215)) | (1 << (mysqlParser.COMPRESSED - 215)))) != 0) or ((((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & ((1 << (mysqlParser.COMPRESSION - 279)) | (1 << (mysqlParser.CONCURRENT - 279)) | (1 << (mysqlParser.CONNECTION - 279)) | (1 << (mysqlParser.CONSISTENT - 279)) | (1 << (mysqlParser.CONTAINS - 279)) | (1 << (mysqlParser.CONTEXT - 279)) | (1 << (mysqlParser.CONTRIBUTORS - 279)) | (1 << (mysqlParser.COPY - 279)) | (1 << (mysqlParser.CPU - 279)) | (1 << (mysqlParser.DATA - 279)) | (1 << (mysqlParser.DATAFILE - 279)) | (1 << (mysqlParser.DEALLOCATE - 279)) | (1 << (mysqlParser.DEFAULT_AUTH - 279)) | (1 << (mysqlParser.DEFINER - 279)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 279)) | (1 << (mysqlParser.DIRECTORY - 279)) | (1 << (mysqlParser.DISABLE - 279)) | (1 << (mysqlParser.DISCARD - 279)) | (1 << (mysqlParser.DISK - 279)) | (1 << (mysqlParser.DO - 279)) | (1 << (mysqlParser.DUMPFILE - 279)) | (1 << (mysqlParser.DUPLICATE - 279)) | (1 << (mysqlParser.DYNAMIC - 279)) | (1 << (mysqlParser.ENABLE - 279)) | (1 << (mysqlParser.ENCRYPTION - 279)) | (1 << (mysqlParser.ENDS - 279)) | (1 << (mysqlParser.ENGINE - 279)) | (1 << (mysqlParser.ENGINES - 279)) | (1 << (mysqlParser.ERROR - 279)) | (1 << (mysqlParser.ERRORS - 279)) | (1 << (mysqlParser.ESCAPE - 279)) | (1 << (mysqlParser.EVEN - 279)) | (1 << (mysqlParser.EVENT - 279)) | (1 << (mysqlParser.EVENTS - 279)) | (1 << (mysqlParser.EVERY - 279)) | (1 << (mysqlParser.EXCHANGE - 279)) | (1 << (mysqlParser.EXCLUSIVE - 279)) | (1 << (mysqlParser.EXPIRE - 279)) | (1 << (mysqlParser.EXTENT_SIZE - 279)) | (1 << (mysqlParser.FAULTS - 279)) | (1 << (mysqlParser.FIELDS - 279)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 279)) | (1 << (mysqlParser.FILTER - 279)) | (1 << (mysqlParser.FIRST - 279)) | (1 << (mysqlParser.FIXED - 279)) | (1 << (mysqlParser.FOLLOWS - 279)) | (1 << (mysqlParser.FULL - 279)) | (1 << (mysqlParser.FUNCTION - 279)) | (1 << (mysqlParser.GLOBAL - 279)) | (1 << (mysqlParser.GRANTS - 279)) | (1 << (mysqlParser.GROUP_REPLICATION - 279)) | (1 << (mysqlParser.HASH - 279)) | (1 << (mysqlParser.HOST - 279)))) != 0) or ((((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & ((1 << (mysqlParser.IDENTIFIED - 343)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 343)) | (1 << (mysqlParser.IMPORT - 343)) | (1 << (mysqlParser.INDEXES - 343)) | (1 << (mysqlParser.INITIAL_SIZE - 343)) | (1 << (mysqlParser.INPLACE - 343)) | (1 << (mysqlParser.INSERT_METHOD - 343)) | (1 << (mysqlParser.INSTANCE - 343)) | (1 << (mysqlParser.INVOKER - 343)) | (1 << (mysqlParser.IO - 343)) | (1 << (mysqlParser.IO_THREAD - 343)) | (1 << (mysqlParser.IPC - 343)) | (1 << (mysqlParser.ISOLATION - 343)) | (1 << (mysqlParser.ISSUER - 343)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 343)) | (1 << (mysqlParser.LANGUAGE - 343)) | (1 << (mysqlParser.LAST - 343)) | (1 << (mysqlParser.LEAVES - 343)) | (1 << (mysqlParser.LESS - 343)) | (1 << (mysqlParser.LEVEL - 343)) | (1 << (mysqlParser.LIST - 343)) | (1 << (mysqlParser.LOCAL - 343)) | (1 << (mysqlParser.LOGFILE - 343)) | (1 << (mysqlParser.LOGS - 343)) | (1 << (mysqlParser.MASTER - 343)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 343)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 343)) | (1 << (mysqlParser.MASTER_DELAY - 343)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 343)) | (1 << (mysqlParser.MASTER_HOST - 343)) | (1 << (mysqlParser.MASTER_LOG_FILE - 343)) | (1 << (mysqlParser.MASTER_LOG_POS - 343)) | (1 << (mysqlParser.MASTER_PASSWORD - 343)) | (1 << (mysqlParser.MASTER_PORT - 343)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 343)) | (1 << (mysqlParser.MASTER_SSL - 343)) | (1 << (mysqlParser.MASTER_SSL_CA - 343)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 343)) | (1 << (mysqlParser.MASTER_SSL_CERT - 343)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 343)) | (1 << (mysqlParser.MASTER_SSL_CRL - 343)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 343)) | (1 << (mysqlParser.MASTER_SSL_KEY - 343)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 343)) | (1 << (mysqlParser.MASTER_USER - 343)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 343)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 343)) | (1 << (mysqlParser.MAX_ROWS - 343)) | (1 << (mysqlParser.MAX_SIZE - 343)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 343)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 343)) | (1 << (mysqlParser.MERGE - 343)) | (1 << (mysqlParser.MID - 343)) | (1 << (mysqlParser.MIGRATE - 343)) | (1 << (mysqlParser.MIN_ROWS - 343)) | (1 << (mysqlParser.MODIFY - 343)) | (1 << (mysqlParser.MUTEX - 343)) | (1 << (mysqlParser.MYSQL - 343)) | (1 << (mysqlParser.NAME - 343)) | (1 << (mysqlParser.NAMES - 343)))) != 0) or ((((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & ((1 << (mysqlParser.NCHAR - 407)) | (1 << (mysqlParser.NEVER - 407)) | (1 << (mysqlParser.NO - 407)) | (1 << (mysqlParser.NODEGROUP - 407)) | (1 << (mysqlParser.NONE - 407)) | (1 << (mysqlParser.OFFLINE - 407)) | (1 << (mysqlParser.OFFSET - 407)) | (1 << (mysqlParser.OJ - 407)) | (1 << (mysqlParser.OLD_PASSWORD - 407)) | (1 << (mysqlParser.ONE - 407)) | (1 << (mysqlParser.ONLINE - 407)) | (1 << (mysqlParser.ONLY - 407)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 407)) | (1 << (mysqlParser.OPTIONS - 407)) | (1 << (mysqlParser.OWNER - 407)) | (1 << (mysqlParser.PACK_KEYS - 407)) | (1 << (mysqlParser.PAGE - 407)) | (1 << (mysqlParser.PARSER - 407)) | (1 << (mysqlParser.PARTIAL - 407)) | (1 << (mysqlParser.PARTITIONING - 407)) | (1 << (mysqlParser.PARTITIONS - 407)) | (1 << (mysqlParser.PASSWORD - 407)) | (1 << (mysqlParser.PHASE - 407)) | (1 << (mysqlParser.PLUGIN_DIR - 407)) | (1 << (mysqlParser.PLUGINS - 407)) | (1 << (mysqlParser.PORT - 407)) | (1 << (mysqlParser.PRECEDES - 407)) | (1 << (mysqlParser.PREPARE - 407)) | (1 << (mysqlParser.PRESERVE - 407)) | (1 << (mysqlParser.PREV - 407)) | (1 << (mysqlParser.PROCESSLIST - 407)) | (1 << (mysqlParser.PROFILE - 407)) | (1 << (mysqlParser.PROFILES - 407)) | (1 << (mysqlParser.PROXY - 407)) | (1 << (mysqlParser.QUERY - 407)) | (1 << (mysqlParser.QUICK - 407)) | (1 << (mysqlParser.REBUILD - 407)) | (1 << (mysqlParser.RECOVER - 407)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 407)) | (1 << (mysqlParser.REDUNDANT - 407)) | (1 << (mysqlParser.RELAY_LOG_FILE - 407)) | (1 << (mysqlParser.RELAY_LOG_POS - 407)) | (1 << (mysqlParser.RELAYLOG - 407)) | (1 << (mysqlParser.REMOVE - 407)) | (1 << (mysqlParser.REORGANIZE - 407)) | (1 << (mysqlParser.REPAIR - 407)) | (1 << (mysqlParser.REPLICATE_DO_DB - 407)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 407)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 407)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 407)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 407)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 407)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 407)) | (1 << (mysqlParser.REPLICATION - 407)) | (1 << (mysqlParser.RESUME - 407)) | (1 << (mysqlParser.RETURNS - 407)) | (1 << (mysqlParser.ROLLBACK - 407)) | (1 << (mysqlParser.ROLLUP - 407)) | (1 << (mysqlParser.ROTATE - 407)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (mysqlParser.ROW - 471)) | (1 << (mysqlParser.ROWS - 471)) | (1 << (mysqlParser.ROW_FORMAT - 471)) | (1 << (mysqlParser.SAVEPOINT - 471)) | (1 << (mysqlParser.SCHEDULE - 471)) | (1 << (mysqlParser.SECURITY - 471)) | (1 << (mysqlParser.SERVER - 471)) | (1 << (mysqlParser.SESSION - 471)) | (1 << (mysqlParser.SHARE - 471)) | (1 << (mysqlParser.SHARED - 471)) | (1 << (mysqlParser.SIGNED - 471)) | (1 << (mysqlParser.SIMPLE - 471)) | (1 << (mysqlParser.SLAVE - 471)) | (1 << (mysqlParser.SNAPSHOT - 471)) | (1 << (mysqlParser.SOCKET - 471)) | (1 << (mysqlParser.SOME - 471)) | (1 << (mysqlParser.SOUNDS - 471)) | (1 << (mysqlParser.SOURCE - 471)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 471)) | (1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 471)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 471)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 471)) | (1 << (mysqlParser.SQL_CACHE - 471)) | (1 << (mysqlParser.SQL_NO_CACHE - 471)) | (1 << (mysqlParser.SQL_THREAD - 471)) | (1 << (mysqlParser.START - 471)) | (1 << (mysqlParser.STARTS - 471)) | (1 << (mysqlParser.STATS_AUTO_RECALC - 471)) | (1 << (mysqlParser.STATS_PERSISTENT - 471)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 471)) | (1 << (mysqlParser.STATUS - 471)) | (1 << (mysqlParser.STOP - 471)) | (1 << (mysqlParser.STORAGE - 471)) | (1 << (mysqlParser.STRING - 471)) | (1 << (mysqlParser.SUBJECT - 471)) | (1 << (mysqlParser.SUBPARTITION - 471)) | (1 << (mysqlParser.SUBPARTITIONS - 471)) | (1 << (mysqlParser.SUSPEND - 471)) | (1 << (mysqlParser.SWAPS - 471)) | (1 << (mysqlParser.SWITCHES - 471)) | (1 << (mysqlParser.TABLESPACE - 471)) | (1 << (mysqlParser.TEMPORARY - 471)) | (1 << (mysqlParser.TEMPTABLE - 471)) | (1 << (mysqlParser.THAN - 471)) | (1 << (mysqlParser.TRANSACTION - 471)) | (1 << (mysqlParser.TRUNCATE - 471)) | (1 << (mysqlParser.UNDEFINED - 471)) | (1 << (mysqlParser.UNDOFILE - 471)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 471)) | (1 << (mysqlParser.UNKNOWN - 471)) | (1 << (mysqlParser.UPGRADE - 471)) | (1 << (mysqlParser.USER - 471)) | (1 << (mysqlParser.VALIDATION - 471)) | (1 << (mysqlParser.VALUE - 471)) | (1 << (mysqlParser.VARIABLES - 471)) | (1 << (mysqlParser.VIEW - 471)))) != 0) or ((((_la - 535)) & ~0x3f) == 0 and ((1 << (_la - 535)) & ((1 << (mysqlParser.WAIT - 535)) | (1 << (mysqlParser.WARNINGS - 535)) | (1 << (mysqlParser.WITHOUT - 535)) | (1 << (mysqlParser.WORK - 535)) | (1 << (mysqlParser.WRAPPER - 535)) | (1 << (mysqlParser.X509 - 535)) | (1 << (mysqlParser.XA - 535)) | (1 << (mysqlParser.XML - 535)) | (1 << (mysqlParser.QUARTER - 535)) | (1 << (mysqlParser.MONTH - 535)) | (1 << (mysqlParser.DAY - 535)) | (1 << (mysqlParser.HOUR - 535)) | (1 << (mysqlParser.MINUTE - 535)) | (1 << (mysqlParser.WEEK - 535)) | (1 << (mysqlParser.SECOND - 535)) | (1 << (mysqlParser.MICROSECOND - 535)) | (1 << (mysqlParser.TABLES - 535)) | (1 << (mysqlParser.ROUTINE - 535)) | (1 << (mysqlParser.EXECUTE - 535)) | (1 << (mysqlParser.FILE - 535)) | (1 << (mysqlParser.PROCESS - 535)) | (1 << (mysqlParser.RELOAD - 535)) | (1 << (mysqlParser.SHUTDOWN - 535)) | (1 << (mysqlParser.SUPER - 535)) | (1 << (mysqlParser.PRIVILEGES - 535)) | (1 << (mysqlParser.ARMSCII8 - 535)) | (1 << (mysqlParser.ASCII - 535)) | (1 << (mysqlParser.BIG5 - 535)) | (1 << (mysqlParser.CP1250 - 535)) | (1 << (mysqlParser.CP1251 - 535)) | (1 << (mysqlParser.CP1256 - 535)) | (1 << (mysqlParser.CP1257 - 535)) | (1 << (mysqlParser.CP850 - 535)) | (1 << (mysqlParser.CP852 - 535)) | (1 << (mysqlParser.CP866 - 535)) | (1 << (mysqlParser.CP932 - 535)) | (1 << (mysqlParser.DEC8 - 535)) | (1 << (mysqlParser.EUCJPMS - 535)) | (1 << (mysqlParser.EUCKR - 535)) | (1 << (mysqlParser.GB2312 - 535)) | (1 << (mysqlParser.GBK - 535)) | (1 << (mysqlParser.GEOSTD8 - 535)) | (1 << (mysqlParser.GREEK - 535)) | (1 << (mysqlParser.HEBREW - 535)) | (1 << (mysqlParser.HP8 - 535)) | (1 << (mysqlParser.KEYBCS2 - 535)) | (1 << (mysqlParser.KOI8R - 535)) | (1 << (mysqlParser.KOI8U - 535)) | (1 << (mysqlParser.LATIN1 - 535)) | (1 << (mysqlParser.LATIN2 - 535)) | (1 << (mysqlParser.LATIN5 - 535)) | (1 << (mysqlParser.LATIN7 - 535)) | (1 << (mysqlParser.MACCE - 535)) | (1 << (mysqlParser.MACROMAN - 535)) | (1 << (mysqlParser.SJIS - 535)) | (1 << (mysqlParser.SWE7 - 535)) | (1 << (mysqlParser.TIS620 - 535)) | (1 << (mysqlParser.UCS2 - 535)) | (1 << (mysqlParser.UJIS - 535)))) != 0) or ((((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & ((1 << (mysqlParser.UTF16 - 599)) | (1 << (mysqlParser.UTF16LE - 599)) | (1 << (mysqlParser.UTF32 - 599)) | (1 << (mysqlParser.UTF8 - 599)) | (1 << (mysqlParser.UTF8MB3 - 599)) | (1 << (mysqlParser.UTF8MB4 - 599)) | (1 << (mysqlParser.ARCHIVE - 599)) | (1 << (mysqlParser.BLACKHOLE - 599)) | (1 << (mysqlParser.CSV - 599)) | (1 << (mysqlParser.FEDERATED - 599)) | (1 << (mysqlParser.INNODB - 599)) | (1 << (mysqlParser.MEMORY - 599)) | (1 << (mysqlParser.MRG_MYISAM - 599)) | (1 << (mysqlParser.MYISAM - 599)) | (1 << (mysqlParser.NDB - 599)) | (1 << (mysqlParser.NDBCLUSTER - 599)) | (1 << (mysqlParser.PERFOMANCE_SCHEMA - 599)) | (1 << (mysqlParser.REPEATABLE - 599)) | (1 << (mysqlParser.COMMITTED - 599)) | (1 << (mysqlParser.UNCOMMITTED - 599)) | (1 << (mysqlParser.SERIALIZABLE - 599)) | (1 << (mysqlParser.GEOMETRYCOLLECTION - 599)) | (1 << (mysqlParser.LINESTRING - 599)) | (1 << (mysqlParser.MULTILINESTRING - 599)) | (1 << (mysqlParser.MULTIPOINT - 599)) | (1 << (mysqlParser.MULTIPOLYGON - 599)) | (1 << (mysqlParser.POINT - 599)) | (1 << (mysqlParser.POLYGON - 599)) | (1 << (mysqlParser.ABS - 599)) | (1 << (mysqlParser.ACOS - 599)) | (1 << (mysqlParser.ADDDATE - 599)) | (1 << (mysqlParser.ADDTIME - 599)) | (1 << (mysqlParser.AES_DECRYPT - 599)) | (1 << (mysqlParser.AES_ENCRYPT - 599)) | (1 << (mysqlParser.AREA - 599)) | (1 << (mysqlParser.ASBINARY - 599)) | (1 << (mysqlParser.ASIN - 599)) | (1 << (mysqlParser.ASTEXT - 599)) | (1 << (mysqlParser.ASWKB - 599)) | (1 << (mysqlParser.ASWKT - 599)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 599)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 599)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 599)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 599)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 599)) | (1 << (mysqlParser.ATAN - 599)) | (1 << (mysqlParser.ATAN2 - 599)) | (1 << (mysqlParser.BENCHMARK - 599)) | (1 << (mysqlParser.BIN - 599)) | (1 << (mysqlParser.BIT_COUNT - 599)) | (1 << (mysqlParser.BIT_LENGTH - 599)) | (1 << (mysqlParser.BUFFER - 599)) | (1 << (mysqlParser.CEIL - 599)) | (1 << (mysqlParser.CEILING - 599)) | (1 << (mysqlParser.CENTROID - 599)) | (1 << (mysqlParser.CHARACTER_LENGTH - 599)) | (1 << (mysqlParser.CHARSET - 599)) | (1 << (mysqlParser.CHAR_LENGTH - 599)) | (1 << (mysqlParser.COERCIBILITY - 599)) | (1 << (mysqlParser.COLLATION - 599)) | (1 << (mysqlParser.COMPRESS - 599)) | (1 << (mysqlParser.CONCAT - 599)) | (1 << (mysqlParser.CONCAT_WS - 599)) | (1 << (mysqlParser.CONNECTION_ID - 599)))) != 0) or ((((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & ((1 << (mysqlParser.CONV - 663)) | (1 << (mysqlParser.CONVERT_TZ - 663)) | (1 << (mysqlParser.COS - 663)) | (1 << (mysqlParser.COT - 663)) | (1 << (mysqlParser.CRC32 - 663)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 663)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 663)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 663)) | (1 << (mysqlParser.CREATE_DIGEST - 663)) | (1 << (mysqlParser.CROSSES - 663)) | (1 << (mysqlParser.DATEDIFF - 663)) | (1 << (mysqlParser.DATE_FORMAT - 663)) | (1 << (mysqlParser.DAYNAME - 663)) | (1 << (mysqlParser.DAYOFMONTH - 663)) | (1 << (mysqlParser.DAYOFWEEK - 663)) | (1 << (mysqlParser.DAYOFYEAR - 663)) | (1 << (mysqlParser.DECODE - 663)) | (1 << (mysqlParser.DEGREES - 663)) | (1 << (mysqlParser.DES_DECRYPT - 663)) | (1 << (mysqlParser.DES_ENCRYPT - 663)) | (1 << (mysqlParser.DIMENSION - 663)) | (1 << (mysqlParser.DISJOINT - 663)) | (1 << (mysqlParser.ELT - 663)) | (1 << (mysqlParser.ENCODE - 663)) | (1 << (mysqlParser.ENCRYPT - 663)) | (1 << (mysqlParser.ENDPOINT - 663)) | (1 << (mysqlParser.ENVELOPE - 663)) | (1 << (mysqlParser.EQUALS - 663)) | (1 << (mysqlParser.EXP - 663)) | (1 << (mysqlParser.EXPORT_SET - 663)) | (1 << (mysqlParser.EXTERIORRING - 663)) | (1 << (mysqlParser.EXTRACTVALUE - 663)) | (1 << (mysqlParser.FIELD - 663)) | (1 << (mysqlParser.FIND_IN_SET - 663)) | (1 << (mysqlParser.FLOOR - 663)) | (1 << (mysqlParser.FORMAT - 663)) | (1 << (mysqlParser.FOUND_ROWS - 663)) | (1 << (mysqlParser.FROM_BASE64 - 663)) | (1 << (mysqlParser.FROM_DAYS - 663)) | (1 << (mysqlParser.FROM_UNIXTIME - 663)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 663)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 663)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 663)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 663)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 663)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 663)) | (1 << (mysqlParser.GEOMETRYN - 663)) | (1 << (mysqlParser.GEOMETRYTYPE - 663)) | (1 << (mysqlParser.GEOMFROMTEXT - 663)) | (1 << (mysqlParser.GEOMFROMWKB - 663)) | (1 << (mysqlParser.GET_FORMAT - 663)) | (1 << (mysqlParser.GET_LOCK - 663)) | (1 << (mysqlParser.GLENGTH - 663)) | (1 << (mysqlParser.GREATEST - 663)) | (1 << (mysqlParser.GTID_SUBSET - 663)) | (1 << (mysqlParser.GTID_SUBTRACT - 663)) | (1 << (mysqlParser.HEX - 663)) | (1 << (mysqlParser.IFNULL - 663)) | (1 << (mysqlParser.INET6_ATON - 663)) | (1 << (mysqlParser.INET6_NTOA - 663)) | (1 << (mysqlParser.INET_ATON - 663)) | (1 << (mysqlParser.INET_NTOA - 663)) | (1 << (mysqlParser.INSTR - 663)) | (1 << (mysqlParser.INTERIORRINGN - 663)))) != 0) or ((((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & ((1 << (mysqlParser.INTERSECTS - 727)) | (1 << (mysqlParser.ISCLOSED - 727)) | (1 << (mysqlParser.ISEMPTY - 727)) | (1 << (mysqlParser.ISNULL - 727)) | (1 << (mysqlParser.ISSIMPLE - 727)) | (1 << (mysqlParser.IS_FREE_LOCK - 727)) | (1 << (mysqlParser.IS_IPV4 - 727)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 727)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 727)) | (1 << (mysqlParser.IS_IPV6 - 727)) | (1 << (mysqlParser.IS_USED_LOCK - 727)) | (1 << (mysqlParser.LAST_INSERT_ID - 727)) | (1 << (mysqlParser.LCASE - 727)) | (1 << (mysqlParser.LEAST - 727)) | (1 << (mysqlParser.LENGTH - 727)) | (1 << (mysqlParser.LINEFROMTEXT - 727)) | (1 << (mysqlParser.LINEFROMWKB - 727)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 727)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 727)) | (1 << (mysqlParser.LN - 727)) | (1 << (mysqlParser.LOAD_FILE - 727)) | (1 << (mysqlParser.LOCATE - 727)) | (1 << (mysqlParser.LOG - 727)) | (1 << (mysqlParser.LOG10 - 727)) | (1 << (mysqlParser.LOG2 - 727)) | (1 << (mysqlParser.LOWER - 727)) | (1 << (mysqlParser.LPAD - 727)) | (1 << (mysqlParser.LTRIM - 727)) | (1 << (mysqlParser.MAKEDATE - 727)) | (1 << (mysqlParser.MAKETIME - 727)) | (1 << (mysqlParser.MAKE_SET - 727)) | (1 << (mysqlParser.MASTER_POS_WAIT - 727)) | (1 << (mysqlParser.MBRCONTAINS - 727)) | (1 << (mysqlParser.MBRDISJOINT - 727)) | (1 << (mysqlParser.MBREQUAL - 727)) | (1 << (mysqlParser.MBRINTERSECTS - 727)) | (1 << (mysqlParser.MBROVERLAPS - 727)) | (1 << (mysqlParser.MBRTOUCHES - 727)) | (1 << (mysqlParser.MBRWITHIN - 727)) | (1 << (mysqlParser.MD5 - 727)) | (1 << (mysqlParser.MLINEFROMTEXT - 727)) | (1 << (mysqlParser.MLINEFROMWKB - 727)) | (1 << (mysqlParser.MONTHNAME - 727)) | (1 << (mysqlParser.MPOINTFROMTEXT - 727)) | (1 << (mysqlParser.MPOINTFROMWKB - 727)) | (1 << (mysqlParser.MPOLYFROMTEXT - 727)) | (1 << (mysqlParser.MPOLYFROMWKB - 727)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 727)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 727)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 727)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 727)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 727)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 727)) | (1 << (mysqlParser.NAME_CONST - 727)) | (1 << (mysqlParser.NULLIF - 727)) | (1 << (mysqlParser.NUMGEOMETRIES - 727)) | (1 << (mysqlParser.NUMINTERIORRINGS - 727)) | (1 << (mysqlParser.NUMPOINTS - 727)) | (1 << (mysqlParser.OCT - 727)) | (1 << (mysqlParser.OCTET_LENGTH - 727)) | (1 << (mysqlParser.ORD - 727)) | (1 << (mysqlParser.OVERLAPS - 727)) | (1 << (mysqlParser.PERIOD_ADD - 727)) | (1 << (mysqlParser.PERIOD_DIFF - 727)))) != 0) or ((((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & ((1 << (mysqlParser.PI - 791)) | (1 << (mysqlParser.POINTFROMTEXT - 791)) | (1 << (mysqlParser.POINTFROMWKB - 791)) | (1 << (mysqlParser.POINTN - 791)) | (1 << (mysqlParser.POLYFROMTEXT - 791)) | (1 << (mysqlParser.POLYFROMWKB - 791)) | (1 << (mysqlParser.POLYGONFROMTEXT - 791)) | (1 << (mysqlParser.POLYGONFROMWKB - 791)) | (1 << (mysqlParser.POW - 791)) | (1 << (mysqlParser.POWER - 791)) | (1 << (mysqlParser.QUOTE - 791)) | (1 << (mysqlParser.RADIANS - 791)) | (1 << (mysqlParser.RAND - 791)) | (1 << (mysqlParser.RANDOM_BYTES - 791)) | (1 << (mysqlParser.RELEASE_LOCK - 791)) | (1 << (mysqlParser.REVERSE - 791)) | (1 << (mysqlParser.ROUND - 791)) | (1 << (mysqlParser.ROW_COUNT - 791)) | (1 << (mysqlParser.RPAD - 791)) | (1 << (mysqlParser.RTRIM - 791)) | (1 << (mysqlParser.SEC_TO_TIME - 791)) | (1 << (mysqlParser.SESSION_USER - 791)) | (1 << (mysqlParser.SHA - 791)) | (1 << (mysqlParser.SHA1 - 791)) | (1 << (mysqlParser.SHA2 - 791)) | (1 << (mysqlParser.SIGN - 791)) | (1 << (mysqlParser.SIN - 791)) | (1 << (mysqlParser.SLEEP - 791)) | (1 << (mysqlParser.SOUNDEX - 791)) | (1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 791)) | (1 << (mysqlParser.SQRT - 791)) | (1 << (mysqlParser.SRID - 791)) | (1 << (mysqlParser.STARTPOINT - 791)) | (1 << (mysqlParser.STRCMP - 791)) | (1 << (mysqlParser.STR_TO_DATE - 791)) | (1 << (mysqlParser.ST_AREA - 791)) | (1 << (mysqlParser.ST_ASBINARY - 791)) | (1 << (mysqlParser.ST_ASTEXT - 791)) | (1 << (mysqlParser.ST_ASWKB - 791)) | (1 << (mysqlParser.ST_ASWKT - 791)) | (1 << (mysqlParser.ST_BUFFER - 791)) | (1 << (mysqlParser.ST_CENTROID - 791)) | (1 << (mysqlParser.ST_CONTAINS - 791)) | (1 << (mysqlParser.ST_CROSSES - 791)) | (1 << (mysqlParser.ST_DIFFERENCE - 791)) | (1 << (mysqlParser.ST_DIMENSION - 791)) | (1 << (mysqlParser.ST_DISJOINT - 791)) | (1 << (mysqlParser.ST_DISTANCE - 791)) | (1 << (mysqlParser.ST_ENDPOINT - 791)) | (1 << (mysqlParser.ST_ENVELOPE - 791)) | (1 << (mysqlParser.ST_EQUALS - 791)) | (1 << (mysqlParser.ST_EXTERIORRING - 791)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 791)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 791)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 791)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 791)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 791)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 791)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 791)) | (1 << (mysqlParser.ST_GEOMETRYN - 791)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 791)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 791)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 791)) | (1 << (mysqlParser.ST_INTERIORRINGN - 791)))) != 0) or ((((_la - 855)) & ~0x3f) == 0 and ((1 << (_la - 855)) & ((1 << (mysqlParser.ST_INTERSECTION - 855)) | (1 << (mysqlParser.ST_INTERSECTS - 855)) | (1 << (mysqlParser.ST_ISCLOSED - 855)) | (1 << (mysqlParser.ST_ISEMPTY - 855)) | (1 << (mysqlParser.ST_ISSIMPLE - 855)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 855)) | (1 << (mysqlParser.ST_LINEFROMWKB - 855)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 855)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 855)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 855)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 855)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 855)) | (1 << (mysqlParser.ST_NUMPOINTS - 855)) | (1 << (mysqlParser.ST_OVERLAPS - 855)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 855)) | (1 << (mysqlParser.ST_POINTFROMWKB - 855)) | (1 << (mysqlParser.ST_POINTN - 855)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 855)) | (1 << (mysqlParser.ST_POLYFROMWKB - 855)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 855)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 855)) | (1 << (mysqlParser.ST_SRID - 855)) | (1 << (mysqlParser.ST_STARTPOINT - 855)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 855)) | (1 << (mysqlParser.ST_TOUCHES - 855)) | (1 << (mysqlParser.ST_UNION - 855)) | (1 << (mysqlParser.ST_WITHIN - 855)) | (1 << (mysqlParser.ST_X - 855)) | (1 << (mysqlParser.ST_Y - 855)) | (1 << (mysqlParser.SUBDATE - 855)) | (1 << (mysqlParser.SUBSTRING_INDEX - 855)) | (1 << (mysqlParser.SUBTIME - 855)) | (1 << (mysqlParser.SYSTEM_USER - 855)) | (1 << (mysqlParser.TAN - 855)) | (1 << (mysqlParser.TIMEDIFF - 855)) | (1 << (mysqlParser.TIMESTAMPADD - 855)) | (1 << (mysqlParser.TIMESTAMPDIFF - 855)) | (1 << (mysqlParser.TIME_FORMAT - 855)) | (1 << (mysqlParser.TIME_TO_SEC - 855)) | (1 << (mysqlParser.TOUCHES - 855)) | (1 << (mysqlParser.TO_BASE64 - 855)) | (1 << (mysqlParser.TO_DAYS - 855)) | (1 << (mysqlParser.TO_SECONDS - 855)) | (1 << (mysqlParser.UCASE - 855)) | (1 << (mysqlParser.UNCOMPRESS - 855)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 855)) | (1 << (mysqlParser.UNHEX - 855)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 855)) | (1 << (mysqlParser.UPDATEXML - 855)) | (1 << (mysqlParser.UPPER - 855)) | (1 << (mysqlParser.UUID - 855)) | (1 << (mysqlParser.UUID_SHORT - 855)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 855)) | (1 << (mysqlParser.VERSION - 855)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 855)) | (1 << (mysqlParser.WEEKDAY - 855)) | (1 << (mysqlParser.WEEKOFYEAR - 855)) | (1 << (mysqlParser.WEIGHT_STRING - 855)) | (1 << (mysqlParser.WITHIN - 855)) | (1 << (mysqlParser.YEARWEEK - 855)) | (1 << (mysqlParser.Y_FUNCTION - 855)) | (1 << (mysqlParser.X_FUNCTION - 855)))) != 0) or ((((_la - 929)) & ~0x3f) == 0 and ((1 << (_la - 929)) & ((1 << (mysqlParser.PLUS - 929)) | (1 << (mysqlParser.MINUS - 929)) | (1 << (mysqlParser.EXCLAMATION_SYMBOL - 929)) | (1 << (mysqlParser.BIT_NOT_OP - 929)) | (1 << (mysqlParser.LR_BRACKET - 929)) | (1 << (mysqlParser.ZERO_DECIMAL - 929)) | (1 << (mysqlParser.ONE_DECIMAL - 929)) | (1 << (mysqlParser.TWO_DECIMAL - 929)) | (1 << (mysqlParser.CHARSET_REVERSE_QOUTE_STRING - 929)) | (1 << (mysqlParser.START_NATIONAL_STRING_LITERAL - 929)) | (1 << (mysqlParser.STRING_LITERAL - 929)) | (1 << (mysqlParser.DECIMAL_LITERAL - 929)) | (1 << (mysqlParser.HEXADECIMAL_LITERAL - 929)) | (1 << (mysqlParser.REAL_LITERAL - 929)) | (1 << (mysqlParser.NULL_SPEC_LITERAL - 929)) | (1 << (mysqlParser.BIT_STRING - 929)) | (1 << (mysqlParser.STRING_CHARSET_NAME - 929)) | (1 << (mysqlParser.ID - 929)) | (1 << (mysqlParser.REVERSE_QUOTE_ID - 929)) | (1 << (mysqlParser.LOCAL_ID - 929)) | (1 << (mysqlParser.GLOBAL_ID - 929)))) != 0):
                    self.state = 5374
                    self.functionArgs()


                self.state = 5377
                self.match(mysqlParser.RR_BRACKET)
                pass

            elif la_ == 5:
                localctx = mysqlParser.PasswordFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 5379
                self.passwordFunctionClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpecificFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_specificFunction

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PositionFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.positionString = None # StringLiteralContext
            self.positionExpression = None # ExpressionContext
            self.inString = None # StringLiteralContext
            self.inExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def POSITION(self):
            return self.getToken(mysqlParser.POSITION, 0)
        def IN(self):
            return self.getToken(mysqlParser.IN, 0)
        def stringLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.StringLiteralContext)
            else:
                return self.getTypedRuleContext(mysqlParser.StringLiteralContext,i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositionFunctionCall" ):
                listener.enterPositionFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositionFunctionCall" ):
                listener.exitPositionFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPositionFunctionCall" ):
                return visitor.visitPositionFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class TrimFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.positioinForm = None # Token
            self.sourceString = None # StringLiteralContext
            self.sourceExpression = None # ExpressionContext
            self.fromString = None # StringLiteralContext
            self.fromExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(mysqlParser.TRIM, 0)
        def FROM(self):
            return self.getToken(mysqlParser.FROM, 0)
        def BOTH(self):
            return self.getToken(mysqlParser.BOTH, 0)
        def LEADING(self):
            return self.getToken(mysqlParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(mysqlParser.TRAILING, 0)
        def stringLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.StringLiteralContext)
            else:
                return self.getTypedRuleContext(mysqlParser.StringLiteralContext,i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrimFunctionCall" ):
                listener.enterTrimFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrimFunctionCall" ):
                listener.exitTrimFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrimFunctionCall" ):
                return visitor.visitTrimFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class SimpleFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_DATE(self):
            return self.getToken(mysqlParser.CURRENT_DATE, 0)
        def CURRENT_TIME(self):
            return self.getToken(mysqlParser.CURRENT_TIME, 0)
        def CURRENT_TIMESTAMP(self):
            return self.getToken(mysqlParser.CURRENT_TIMESTAMP, 0)
        def CURRENT_USER(self):
            return self.getToken(mysqlParser.CURRENT_USER, 0)
        def LOCALTIME(self):
            return self.getToken(mysqlParser.LOCALTIME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleFunctionCall" ):
                listener.enterSimpleFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleFunctionCall" ):
                listener.exitSimpleFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleFunctionCall" ):
                return visitor.visitSimpleFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class CharFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHAR(self):
            return self.getToken(mysqlParser.CHAR, 0)
        def functionArgs(self):
            return self.getTypedRuleContext(mysqlParser.FunctionArgsContext,0)

        def USING(self):
            return self.getToken(mysqlParser.USING, 0)
        def charsetName(self):
            return self.getTypedRuleContext(mysqlParser.CharsetNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharFunctionCall" ):
                listener.enterCharFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharFunctionCall" ):
                listener.exitCharFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharFunctionCall" ):
                return visitor.visitCharFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class WeightFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.stringFormat = None # Token
            self.copyFrom(ctx)

        def WEIGHT_STRING(self):
            return self.getToken(mysqlParser.WEIGHT_STRING, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(mysqlParser.StringLiteralContext,0)

        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(mysqlParser.AS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,0)

        def levelsInWeightString(self):
            return self.getTypedRuleContext(mysqlParser.LevelsInWeightStringContext,0)

        def CHAR(self):
            return self.getToken(mysqlParser.CHAR, 0)
        def BINARY(self):
            return self.getToken(mysqlParser.BINARY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWeightFunctionCall" ):
                listener.enterWeightFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWeightFunctionCall" ):
                listener.exitWeightFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWeightFunctionCall" ):
                return visitor.visitWeightFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class GetFormatFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.datetimeFormat = None # Token
            self.copyFrom(ctx)

        def GET_FORMAT(self):
            return self.getToken(mysqlParser.GET_FORMAT, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(mysqlParser.StringLiteralContext,0)

        def DATE(self):
            return self.getToken(mysqlParser.DATE, 0)
        def TIME(self):
            return self.getToken(mysqlParser.TIME, 0)
        def DATETIME(self):
            return self.getToken(mysqlParser.DATETIME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetFormatFunctionCall" ):
                listener.enterGetFormatFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetFormatFunctionCall" ):
                listener.exitGetFormatFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetFormatFunctionCall" ):
                return visitor.visitGetFormatFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class CaseFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.SpecificFunctionContext
            super().__init__(parser)
            self._functionArg = None # FunctionArgContext
            self.condition = list() # of FunctionArgContexts
            self.consequent = list() # of FunctionArgContexts
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(mysqlParser.CASE, 0)
        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)

        def END(self):
            return self.getToken(mysqlParser.END, 0)
        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.WHEN)
            else:
                return self.getToken(mysqlParser.WHEN, i)
        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.THEN)
            else:
                return self.getToken(mysqlParser.THEN, i)
        def ELSE(self):
            return self.getToken(mysqlParser.ELSE, 0)
        def functionArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.FunctionArgContext)
            else:
                return self.getTypedRuleContext(mysqlParser.FunctionArgContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseFunctionCall" ):
                listener.enterCaseFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseFunctionCall" ):
                listener.exitCaseFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseFunctionCall" ):
                return visitor.visitCaseFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class ExtractFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.sourceString = None # StringLiteralContext
            self.sourceExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def EXTRACT(self):
            return self.getToken(mysqlParser.EXTRACT, 0)
        def intervalType(self):
            return self.getTypedRuleContext(mysqlParser.IntervalTypeContext,0)

        def FROM(self):
            return self.getToken(mysqlParser.FROM, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(mysqlParser.StringLiteralContext,0)

        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtractFunctionCall" ):
                listener.enterExtractFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtractFunctionCall" ):
                listener.exitExtractFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtractFunctionCall" ):
                return visitor.visitExtractFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class DataTypeFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONVERT(self):
            return self.getToken(mysqlParser.CONVERT, 0)
        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)

        def convertedDataType(self):
            return self.getTypedRuleContext(mysqlParser.ConvertedDataTypeContext,0)

        def USING(self):
            return self.getToken(mysqlParser.USING, 0)
        def charsetName(self):
            return self.getTypedRuleContext(mysqlParser.CharsetNameContext,0)

        def CAST(self):
            return self.getToken(mysqlParser.CAST, 0)
        def AS(self):
            return self.getToken(mysqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataTypeFunctionCall" ):
                listener.enterDataTypeFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataTypeFunctionCall" ):
                listener.exitDataTypeFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataTypeFunctionCall" ):
                return visitor.visitDataTypeFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class ValuesFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VALUES(self):
            return self.getToken(mysqlParser.VALUES, 0)
        def fullColumnName(self):
            return self.getTypedRuleContext(mysqlParser.FullColumnNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValuesFunctionCall" ):
                listener.enterValuesFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValuesFunctionCall" ):
                listener.exitValuesFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValuesFunctionCall" ):
                return visitor.visitValuesFunctionCall(self)
            else:
                return visitor.visitChildren(self)


    class SubstrFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.sourceString = None # StringLiteralContext
            self.sourceExpression = None # ExpressionContext
            self.fromDecimal = None # DecimalLiteralContext
            self.fromExpression = None # ExpressionContext
            self.forDecimal = None # DecimalLiteralContext
            self.forExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def FROM(self):
            return self.getToken(mysqlParser.FROM, 0)
        def SUBSTR(self):
            return self.getToken(mysqlParser.SUBSTR, 0)
        def SUBSTRING(self):
            return self.getToken(mysqlParser.SUBSTRING, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(mysqlParser.StringLiteralContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.ExpressionContext,i)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,i)

        def FOR(self):
            return self.getToken(mysqlParser.FOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstrFunctionCall" ):
                listener.enterSubstrFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstrFunctionCall" ):
                listener.exitSubstrFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubstrFunctionCall" ):
                return visitor.visitSubstrFunctionCall(self)
            else:
                return visitor.visitChildren(self)



    def specificFunction(self):

        localctx = mysqlParser.SpecificFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_specificFunction)
        self._la = 0 # Token type
        try:
            self.state = 5547
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,805,self._ctx)
            if la_ == 1:
                localctx = mysqlParser.SimpleFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5382
                _la = self._input.LA(1)
                if not(_la==mysqlParser.CURRENT_USER or ((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & ((1 << (mysqlParser.CURRENT_DATE - 225)) | (1 << (mysqlParser.CURRENT_TIME - 225)) | (1 << (mysqlParser.CURRENT_TIMESTAMP - 225)) | (1 << (mysqlParser.LOCALTIME - 225)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                localctx = mysqlParser.DataTypeFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5383
                self.match(mysqlParser.CONVERT)
                self.state = 5384
                self.match(mysqlParser.LR_BRACKET)
                self.state = 5385
                self.expression(0)
                self.state = 5386
                self.match(mysqlParser.COMMA)
                self.state = 5387
                self.convertedDataType()
                self.state = 5388
                self.match(mysqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                localctx = mysqlParser.DataTypeFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5390
                self.match(mysqlParser.CONVERT)
                self.state = 5391
                self.match(mysqlParser.LR_BRACKET)
                self.state = 5392
                self.expression(0)
                self.state = 5393
                self.match(mysqlParser.USING)
                self.state = 5394
                self.charsetName()
                self.state = 5395
                self.match(mysqlParser.RR_BRACKET)
                pass

            elif la_ == 4:
                localctx = mysqlParser.DataTypeFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 5397
                self.match(mysqlParser.CAST)
                self.state = 5398
                self.match(mysqlParser.LR_BRACKET)
                self.state = 5399
                self.expression(0)
                self.state = 5400
                self.match(mysqlParser.AS)
                self.state = 5401
                self.convertedDataType()
                self.state = 5402
                self.match(mysqlParser.RR_BRACKET)
                pass

            elif la_ == 5:
                localctx = mysqlParser.ValuesFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 5404
                self.match(mysqlParser.VALUES)
                self.state = 5405
                self.match(mysqlParser.LR_BRACKET)
                self.state = 5406
                self.fullColumnName()
                self.state = 5407
                self.match(mysqlParser.RR_BRACKET)
                pass

            elif la_ == 6:
                localctx = mysqlParser.CaseFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 5409
                self.match(mysqlParser.CASE)
                self.state = 5410
                self.expression(0)
                self.state = 5416 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5411
                    self.match(mysqlParser.WHEN)
                    self.state = 5412
                    localctx._functionArg = self.functionArg()
                    localctx.condition.append(localctx._functionArg)
                    self.state = 5413
                    self.match(mysqlParser.THEN)
                    self.state = 5414
                    localctx._functionArg = self.functionArg()
                    localctx.consequent.append(localctx._functionArg)
                    self.state = 5418 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==mysqlParser.WHEN):
                        break

                self.state = 5422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.ELSE:
                    self.state = 5420
                    self.match(mysqlParser.ELSE)
                    self.state = 5421
                    self.functionArg()


                self.state = 5424
                self.match(mysqlParser.END)
                pass

            elif la_ == 7:
                localctx = mysqlParser.CaseFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 5426
                self.match(mysqlParser.CASE)
                self.state = 5432 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5427
                    self.match(mysqlParser.WHEN)
                    self.state = 5428
                    localctx._functionArg = self.functionArg()
                    localctx.condition.append(localctx._functionArg)
                    self.state = 5429
                    self.match(mysqlParser.THEN)
                    self.state = 5430
                    localctx._functionArg = self.functionArg()
                    localctx.consequent.append(localctx._functionArg)
                    self.state = 5434 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==mysqlParser.WHEN):
                        break

                self.state = 5438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.ELSE:
                    self.state = 5436
                    self.match(mysqlParser.ELSE)
                    self.state = 5437
                    self.functionArg()


                self.state = 5440
                self.match(mysqlParser.END)
                pass

            elif la_ == 8:
                localctx = mysqlParser.CharFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 5442
                self.match(mysqlParser.CHAR)
                self.state = 5443
                self.match(mysqlParser.LR_BRACKET)
                self.state = 5444
                self.functionArgs()
                self.state = 5447
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.USING:
                    self.state = 5445
                    self.match(mysqlParser.USING)
                    self.state = 5446
                    self.charsetName()


                self.state = 5449
                self.match(mysqlParser.RR_BRACKET)
                pass

            elif la_ == 9:
                localctx = mysqlParser.PositionFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 5451
                self.match(mysqlParser.POSITION)
                self.state = 5452
                self.match(mysqlParser.LR_BRACKET)
                self.state = 5455
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,791,self._ctx)
                if la_ == 1:
                    self.state = 5453
                    localctx.positionString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 5454
                    localctx.positionExpression = self.expression(0)
                    pass


                self.state = 5457
                self.match(mysqlParser.IN)
                self.state = 5460
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,792,self._ctx)
                if la_ == 1:
                    self.state = 5458
                    localctx.inString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 5459
                    localctx.inExpression = self.expression(0)
                    pass


                self.state = 5462
                self.match(mysqlParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = mysqlParser.SubstrFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 5464
                _la = self._input.LA(1)
                if not(_la==mysqlParser.SUBSTR or _la==mysqlParser.SUBSTRING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5465
                self.match(mysqlParser.LR_BRACKET)
                self.state = 5468
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,793,self._ctx)
                if la_ == 1:
                    self.state = 5466
                    localctx.sourceString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 5467
                    localctx.sourceExpression = self.expression(0)
                    pass


                self.state = 5470
                self.match(mysqlParser.FROM)
                self.state = 5473
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,794,self._ctx)
                if la_ == 1:
                    self.state = 5471
                    localctx.fromDecimal = self.decimalLiteral()
                    pass

                elif la_ == 2:
                    self.state = 5472
                    localctx.fromExpression = self.expression(0)
                    pass


                self.state = 5480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.FOR:
                    self.state = 5475
                    self.match(mysqlParser.FOR)
                    self.state = 5478
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,795,self._ctx)
                    if la_ == 1:
                        self.state = 5476
                        localctx.forDecimal = self.decimalLiteral()
                        pass

                    elif la_ == 2:
                        self.state = 5477
                        localctx.forExpression = self.expression(0)
                        pass




                self.state = 5482
                self.match(mysqlParser.RR_BRACKET)
                pass

            elif la_ == 11:
                localctx = mysqlParser.TrimFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 5484
                self.match(mysqlParser.TRIM)
                self.state = 5485
                self.match(mysqlParser.LR_BRACKET)
                self.state = 5486
                localctx.positioinForm = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.BOTH or _la==mysqlParser.LEADING or _la==mysqlParser.TRAILING):
                    localctx.positioinForm = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5489
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,797,self._ctx)
                if la_ == 1:
                    self.state = 5487
                    localctx.sourceString = self.stringLiteral()

                elif la_ == 2:
                    self.state = 5488
                    localctx.sourceExpression = self.expression(0)


                self.state = 5491
                self.match(mysqlParser.FROM)
                self.state = 5494
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,798,self._ctx)
                if la_ == 1:
                    self.state = 5492
                    localctx.fromString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 5493
                    localctx.fromExpression = self.expression(0)
                    pass


                self.state = 5496
                self.match(mysqlParser.RR_BRACKET)
                pass

            elif la_ == 12:
                localctx = mysqlParser.TrimFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 5498
                self.match(mysqlParser.TRIM)
                self.state = 5499
                self.match(mysqlParser.LR_BRACKET)
                self.state = 5502
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,799,self._ctx)
                if la_ == 1:
                    self.state = 5500
                    localctx.sourceString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 5501
                    localctx.sourceExpression = self.expression(0)
                    pass


                self.state = 5504
                self.match(mysqlParser.FROM)
                self.state = 5507
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,800,self._ctx)
                if la_ == 1:
                    self.state = 5505
                    localctx.fromString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 5506
                    localctx.fromExpression = self.expression(0)
                    pass


                self.state = 5509
                self.match(mysqlParser.RR_BRACKET)
                pass

            elif la_ == 13:
                localctx = mysqlParser.WeightFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 5511
                self.match(mysqlParser.WEIGHT_STRING)
                self.state = 5512
                self.match(mysqlParser.LR_BRACKET)
                self.state = 5515
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,801,self._ctx)
                if la_ == 1:
                    self.state = 5513
                    self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 5514
                    self.expression(0)
                    pass


                self.state = 5523
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.AS:
                    self.state = 5517
                    self.match(mysqlParser.AS)
                    self.state = 5518
                    localctx.stringFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==mysqlParser.CHAR or _la==mysqlParser.BINARY):
                        localctx.stringFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5519
                    self.match(mysqlParser.LR_BRACKET)
                    self.state = 5520
                    self.decimalLiteral()
                    self.state = 5521
                    self.match(mysqlParser.RR_BRACKET)


                self.state = 5526
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.LEVEL:
                    self.state = 5525
                    self.levelsInWeightString()


                self.state = 5528
                self.match(mysqlParser.RR_BRACKET)
                pass

            elif la_ == 14:
                localctx = mysqlParser.ExtractFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 5530
                self.match(mysqlParser.EXTRACT)
                self.state = 5531
                self.match(mysqlParser.LR_BRACKET)
                self.state = 5532
                self.intervalType()
                self.state = 5533
                self.match(mysqlParser.FROM)
                self.state = 5536
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,804,self._ctx)
                if la_ == 1:
                    self.state = 5534
                    localctx.sourceString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 5535
                    localctx.sourceExpression = self.expression(0)
                    pass


                self.state = 5538
                self.match(mysqlParser.RR_BRACKET)
                pass

            elif la_ == 15:
                localctx = mysqlParser.GetFormatFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 5540
                self.match(mysqlParser.GET_FORMAT)
                self.state = 5541
                self.match(mysqlParser.LR_BRACKET)
                self.state = 5542
                localctx.datetimeFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (mysqlParser.DATE - 180)) | (1 << (mysqlParser.TIME - 180)) | (1 << (mysqlParser.DATETIME - 180)))) != 0)):
                    localctx.datetimeFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5543
                self.match(mysqlParser.COMMA)
                self.state = 5544
                self.stringLiteral()
                self.state = 5545
                self.match(mysqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LevelsInWeightStringContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_levelsInWeightString

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class LevelWeightRangeContext(LevelsInWeightStringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.LevelsInWeightStringContext
            super().__init__(parser)
            self.firstLevel = None # DecimalLiteralContext
            self.lastLevel = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def LEVEL(self):
            return self.getToken(mysqlParser.LEVEL, 0)
        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLevelWeightRange" ):
                listener.enterLevelWeightRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLevelWeightRange" ):
                listener.exitLevelWeightRange(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLevelWeightRange" ):
                return visitor.visitLevelWeightRange(self)
            else:
                return visitor.visitChildren(self)


    class LevelWeightListContext(LevelsInWeightStringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.LevelsInWeightStringContext
            super().__init__(parser)
            self.firstLevel = None # DecimalLiteralContext
            self.firstOrder = None # Token
            self._decimalLiteral = None # DecimalLiteralContext
            self.nextLevel = list() # of DecimalLiteralContexts
            self._ASC = None # Token
            self.nextOrder = list() # of Tokens
            self._DESC = None # Token
            self._REVERSE = None # Token
            self._tset12517 = None # Token
            self.copyFrom(ctx)

        def LEVEL(self):
            return self.getToken(mysqlParser.LEVEL, 0)
        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(mysqlParser.DecimalLiteralContext,i)

        def ASC(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.ASC)
            else:
                return self.getToken(mysqlParser.ASC, i)
        def DESC(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.DESC)
            else:
                return self.getToken(mysqlParser.DESC, i)
        def REVERSE(self, i:int=None):
            if i is None:
                return self.getTokens(mysqlParser.REVERSE)
            else:
                return self.getToken(mysqlParser.REVERSE, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLevelWeightList" ):
                listener.enterLevelWeightList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLevelWeightList" ):
                listener.exitLevelWeightList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLevelWeightList" ):
                return visitor.visitLevelWeightList(self)
            else:
                return visitor.visitChildren(self)



    def levelsInWeightString(self):

        localctx = mysqlParser.LevelsInWeightStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_levelsInWeightString)
        self._la = 0 # Token type
        try:
            self.state = 5569
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,809,self._ctx)
            if la_ == 1:
                localctx = mysqlParser.LevelWeightListContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5549
                self.match(mysqlParser.LEVEL)
                self.state = 5550
                localctx.firstLevel = self.decimalLiteral()
                self.state = 5552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.ASC or _la==mysqlParser.DESC or _la==mysqlParser.REVERSE:
                    self.state = 5551
                    localctx.firstOrder = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==mysqlParser.ASC or _la==mysqlParser.DESC or _la==mysqlParser.REVERSE):
                        localctx.firstOrder = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==mysqlParser.COMMA:
                    self.state = 5554
                    self.match(mysqlParser.COMMA)
                    self.state = 5555
                    localctx._decimalLiteral = self.decimalLiteral()
                    localctx.nextLevel.append(localctx._decimalLiteral)
                    self.state = 5557
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==mysqlParser.ASC or _la==mysqlParser.DESC or _la==mysqlParser.REVERSE:
                        self.state = 5556
                        localctx._tset12517 = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==mysqlParser.ASC or _la==mysqlParser.DESC or _la==mysqlParser.REVERSE):
                            localctx._tset12517 = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        localctx.nextOrder.append(localctx._tset12517)


                    self.state = 5563
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = mysqlParser.LevelWeightRangeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5564
                self.match(mysqlParser.LEVEL)
                self.state = 5565
                localctx.firstLevel = self.decimalLiteral()
                self.state = 5566
                self.match(mysqlParser.MINUS)
                self.state = 5567
                localctx.lastLevel = self.decimalLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AggregateWindowedFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionArg(self):
            return self.getTypedRuleContext(mysqlParser.FunctionArgContext,0)


        def AVG(self):
            return self.getToken(mysqlParser.AVG, 0)

        def MAX(self):
            return self.getToken(mysqlParser.MAX, 0)

        def MIN(self):
            return self.getToken(mysqlParser.MIN, 0)

        def SUM(self):
            return self.getToken(mysqlParser.SUM, 0)

        def ALL(self):
            return self.getToken(mysqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(mysqlParser.DISTINCT, 0)

        def COUNT(self):
            return self.getToken(mysqlParser.COUNT, 0)

        def functionArgs(self):
            return self.getTypedRuleContext(mysqlParser.FunctionArgsContext,0)


        def BIT_AND(self):
            return self.getToken(mysqlParser.BIT_AND, 0)

        def BIT_OR(self):
            return self.getToken(mysqlParser.BIT_OR, 0)

        def BIT_XOR(self):
            return self.getToken(mysqlParser.BIT_XOR, 0)

        def STD(self):
            return self.getToken(mysqlParser.STD, 0)

        def STDDEV(self):
            return self.getToken(mysqlParser.STDDEV, 0)

        def STDDEV_POP(self):
            return self.getToken(mysqlParser.STDDEV_POP, 0)

        def STDDEV_SAMP(self):
            return self.getToken(mysqlParser.STDDEV_SAMP, 0)

        def VAR_POP(self):
            return self.getToken(mysqlParser.VAR_POP, 0)

        def VAR_SAMP(self):
            return self.getToken(mysqlParser.VAR_SAMP, 0)

        def VARIANCE(self):
            return self.getToken(mysqlParser.VARIANCE, 0)

        def GROUP_CONCAT(self):
            return self.getToken(mysqlParser.GROUP_CONCAT, 0)

        def ORDER(self):
            return self.getToken(mysqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(mysqlParser.BY, 0)

        def orderByExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.OrderByExpressionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.OrderByExpressionContext,i)


        def SEPARATOR(self):
            return self.getToken(mysqlParser.SEPARATOR, 0)

        def STRING_LITERAL(self):
            return self.getToken(mysqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_aggregateWindowedFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregateWindowedFunction" ):
                listener.enterAggregateWindowedFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregateWindowedFunction" ):
                listener.exitAggregateWindowedFunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregateWindowedFunction" ):
                return visitor.visitAggregateWindowedFunction(self)
            else:
                return visitor.visitChildren(self)




    def aggregateWindowedFunction(self):

        localctx = mysqlParser.AggregateWindowedFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_aggregateWindowedFunction)
        self._la = 0 # Token type
        try:
            self.state = 5627
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,818,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5571
                _la = self._input.LA(1)
                if not(((((_la - 209)) & ~0x3f) == 0 and ((1 << (_la - 209)) & ((1 << (mysqlParser.AVG - 209)) | (1 << (mysqlParser.MAX - 209)) | (1 << (mysqlParser.MIN - 209)) | (1 << (mysqlParser.SUM - 209)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5572
                self.match(mysqlParser.LR_BRACKET)
                self.state = 5574
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.ALL or _la==mysqlParser.DISTINCT:
                    self.state = 5573
                    _la = self._input.LA(1)
                    if not(_la==mysqlParser.ALL or _la==mysqlParser.DISTINCT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5576
                self.functionArg()
                self.state = 5577
                self.match(mysqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5579
                self.match(mysqlParser.COUNT)
                self.state = 5580
                self.match(mysqlParser.LR_BRACKET)
                self.state = 5586
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [mysqlParser.STAR]:
                    self.state = 5581
                    self.match(mysqlParser.STAR)
                    pass
                elif token in [mysqlParser.ALL, mysqlParser.CASE, mysqlParser.CAST, mysqlParser.CONVERT, mysqlParser.CURRENT_USER, mysqlParser.DEFAULT, mysqlParser.EXISTS, mysqlParser.FALSE, mysqlParser.IF, mysqlParser.INTERVAL, mysqlParser.LEFT, mysqlParser.NOT, mysqlParser.NULL_LITERAL, mysqlParser.REPLACE, mysqlParser.RIGHT, mysqlParser.TRUE, mysqlParser.VALUES, mysqlParser.DATE, mysqlParser.TIME, mysqlParser.TIMESTAMP, mysqlParser.DATETIME, mysqlParser.YEAR, mysqlParser.CHAR, mysqlParser.BINARY, mysqlParser.TEXT, mysqlParser.ENUM, mysqlParser.AVG, mysqlParser.BIT_AND, mysqlParser.BIT_OR, mysqlParser.BIT_XOR, mysqlParser.COUNT, mysqlParser.GROUP_CONCAT, mysqlParser.MAX, mysqlParser.MIN, mysqlParser.STD, mysqlParser.STDDEV, mysqlParser.STDDEV_POP, mysqlParser.STDDEV_SAMP, mysqlParser.SUM, mysqlParser.VAR_POP, mysqlParser.VAR_SAMP, mysqlParser.VARIANCE, mysqlParser.CURRENT_DATE, mysqlParser.CURRENT_TIME, mysqlParser.CURRENT_TIMESTAMP, mysqlParser.LOCALTIME, mysqlParser.CURDATE, mysqlParser.CURTIME, mysqlParser.DATE_ADD, mysqlParser.DATE_SUB, mysqlParser.EXTRACT, mysqlParser.LOCALTIMESTAMP, mysqlParser.NOW, mysqlParser.POSITION, mysqlParser.SUBSTR, mysqlParser.SUBSTRING, mysqlParser.SYSDATE, mysqlParser.TRIM, mysqlParser.UTC_DATE, mysqlParser.UTC_TIME, mysqlParser.UTC_TIMESTAMP, mysqlParser.ACCOUNT, mysqlParser.ACTION, mysqlParser.AFTER, mysqlParser.AGGREGATE, mysqlParser.ALGORITHM, mysqlParser.ANY, mysqlParser.AT, mysqlParser.AUTHORS, mysqlParser.AUTOCOMMIT, mysqlParser.AUTOEXTEND_SIZE, mysqlParser.AUTO_INCREMENT, mysqlParser.AVG_ROW_LENGTH, mysqlParser.BEGIN, mysqlParser.BINLOG, mysqlParser.BIT, mysqlParser.BLOCK, mysqlParser.BTREE, mysqlParser.CASCADED, mysqlParser.CHAIN, mysqlParser.CHANNEL, mysqlParser.CHECKSUM, mysqlParser.CIPHER, mysqlParser.CLIENT, mysqlParser.COALESCE, mysqlParser.CODE, mysqlParser.COLUMNS, mysqlParser.COLUMN_FORMAT, mysqlParser.COMMENT, mysqlParser.COMMIT, mysqlParser.COMPACT, mysqlParser.COMPLETION, mysqlParser.COMPRESSED, mysqlParser.COMPRESSION, mysqlParser.CONCURRENT, mysqlParser.CONNECTION, mysqlParser.CONSISTENT, mysqlParser.CONTAINS, mysqlParser.CONTEXT, mysqlParser.CONTRIBUTORS, mysqlParser.COPY, mysqlParser.CPU, mysqlParser.DATA, mysqlParser.DATAFILE, mysqlParser.DEALLOCATE, mysqlParser.DEFAULT_AUTH, mysqlParser.DEFINER, mysqlParser.DELAY_KEY_WRITE, mysqlParser.DIRECTORY, mysqlParser.DISABLE, mysqlParser.DISCARD, mysqlParser.DISK, mysqlParser.DO, mysqlParser.DUMPFILE, mysqlParser.DUPLICATE, mysqlParser.DYNAMIC, mysqlParser.ENABLE, mysqlParser.ENCRYPTION, mysqlParser.ENDS, mysqlParser.ENGINE, mysqlParser.ENGINES, mysqlParser.ERROR, mysqlParser.ERRORS, mysqlParser.ESCAPE, mysqlParser.EVEN, mysqlParser.EVENT, mysqlParser.EVENTS, mysqlParser.EVERY, mysqlParser.EXCHANGE, mysqlParser.EXCLUSIVE, mysqlParser.EXPIRE, mysqlParser.EXTENT_SIZE, mysqlParser.FAULTS, mysqlParser.FIELDS, mysqlParser.FILE_BLOCK_SIZE, mysqlParser.FILTER, mysqlParser.FIRST, mysqlParser.FIXED, mysqlParser.FOLLOWS, mysqlParser.FULL, mysqlParser.FUNCTION, mysqlParser.GLOBAL, mysqlParser.GRANTS, mysqlParser.GROUP_REPLICATION, mysqlParser.HASH, mysqlParser.HOST, mysqlParser.IDENTIFIED, mysqlParser.IGNORE_SERVER_IDS, mysqlParser.IMPORT, mysqlParser.INDEXES, mysqlParser.INITIAL_SIZE, mysqlParser.INPLACE, mysqlParser.INSERT_METHOD, mysqlParser.INSTANCE, mysqlParser.INVOKER, mysqlParser.IO, mysqlParser.IO_THREAD, mysqlParser.IPC, mysqlParser.ISOLATION, mysqlParser.ISSUER, mysqlParser.KEY_BLOCK_SIZE, mysqlParser.LANGUAGE, mysqlParser.LAST, mysqlParser.LEAVES, mysqlParser.LESS, mysqlParser.LEVEL, mysqlParser.LIST, mysqlParser.LOCAL, mysqlParser.LOGFILE, mysqlParser.LOGS, mysqlParser.MASTER, mysqlParser.MASTER_AUTO_POSITION, mysqlParser.MASTER_CONNECT_RETRY, mysqlParser.MASTER_DELAY, mysqlParser.MASTER_HEARTBEAT_PERIOD, mysqlParser.MASTER_HOST, mysqlParser.MASTER_LOG_FILE, mysqlParser.MASTER_LOG_POS, mysqlParser.MASTER_PASSWORD, mysqlParser.MASTER_PORT, mysqlParser.MASTER_RETRY_COUNT, mysqlParser.MASTER_SSL, mysqlParser.MASTER_SSL_CA, mysqlParser.MASTER_SSL_CAPATH, mysqlParser.MASTER_SSL_CERT, mysqlParser.MASTER_SSL_CIPHER, mysqlParser.MASTER_SSL_CRL, mysqlParser.MASTER_SSL_CRLPATH, mysqlParser.MASTER_SSL_KEY, mysqlParser.MASTER_TLS_VERSION, mysqlParser.MASTER_USER, mysqlParser.MAX_CONNECTIONS_PER_HOUR, mysqlParser.MAX_QUERIES_PER_HOUR, mysqlParser.MAX_ROWS, mysqlParser.MAX_SIZE, mysqlParser.MAX_UPDATES_PER_HOUR, mysqlParser.MAX_USER_CONNECTIONS, mysqlParser.MERGE, mysqlParser.MID, mysqlParser.MIGRATE, mysqlParser.MIN_ROWS, mysqlParser.MODIFY, mysqlParser.MUTEX, mysqlParser.MYSQL, mysqlParser.NAME, mysqlParser.NAMES, mysqlParser.NCHAR, mysqlParser.NEVER, mysqlParser.NO, mysqlParser.NODEGROUP, mysqlParser.NONE, mysqlParser.OFFLINE, mysqlParser.OFFSET, mysqlParser.OJ, mysqlParser.OLD_PASSWORD, mysqlParser.ONE, mysqlParser.ONLINE, mysqlParser.ONLY, mysqlParser.OPTIMIZER_COSTS, mysqlParser.OPTIONS, mysqlParser.OWNER, mysqlParser.PACK_KEYS, mysqlParser.PAGE, mysqlParser.PARSER, mysqlParser.PARTIAL, mysqlParser.PARTITIONING, mysqlParser.PARTITIONS, mysqlParser.PASSWORD, mysqlParser.PHASE, mysqlParser.PLUGIN_DIR, mysqlParser.PLUGINS, mysqlParser.PORT, mysqlParser.PRECEDES, mysqlParser.PREPARE, mysqlParser.PRESERVE, mysqlParser.PREV, mysqlParser.PROCESSLIST, mysqlParser.PROFILE, mysqlParser.PROFILES, mysqlParser.PROXY, mysqlParser.QUERY, mysqlParser.QUICK, mysqlParser.REBUILD, mysqlParser.RECOVER, mysqlParser.REDO_BUFFER_SIZE, mysqlParser.REDUNDANT, mysqlParser.RELAY_LOG_FILE, mysqlParser.RELAY_LOG_POS, mysqlParser.RELAYLOG, mysqlParser.REMOVE, mysqlParser.REORGANIZE, mysqlParser.REPAIR, mysqlParser.REPLICATE_DO_DB, mysqlParser.REPLICATE_DO_TABLE, mysqlParser.REPLICATE_IGNORE_DB, mysqlParser.REPLICATE_IGNORE_TABLE, mysqlParser.REPLICATE_REWRITE_DB, mysqlParser.REPLICATE_WILD_DO_TABLE, mysqlParser.REPLICATE_WILD_IGNORE_TABLE, mysqlParser.REPLICATION, mysqlParser.RESUME, mysqlParser.RETURNS, mysqlParser.ROLLBACK, mysqlParser.ROLLUP, mysqlParser.ROTATE, mysqlParser.ROW, mysqlParser.ROWS, mysqlParser.ROW_FORMAT, mysqlParser.SAVEPOINT, mysqlParser.SCHEDULE, mysqlParser.SECURITY, mysqlParser.SERVER, mysqlParser.SESSION, mysqlParser.SHARE, mysqlParser.SHARED, mysqlParser.SIGNED, mysqlParser.SIMPLE, mysqlParser.SLAVE, mysqlParser.SNAPSHOT, mysqlParser.SOCKET, mysqlParser.SOME, mysqlParser.SOUNDS, mysqlParser.SOURCE, mysqlParser.SQL_AFTER_GTIDS, mysqlParser.SQL_AFTER_MTS_GAPS, mysqlParser.SQL_BEFORE_GTIDS, mysqlParser.SQL_BUFFER_RESULT, mysqlParser.SQL_CACHE, mysqlParser.SQL_NO_CACHE, mysqlParser.SQL_THREAD, mysqlParser.START, mysqlParser.STARTS, mysqlParser.STATS_AUTO_RECALC, mysqlParser.STATS_PERSISTENT, mysqlParser.STATS_SAMPLE_PAGES, mysqlParser.STATUS, mysqlParser.STOP, mysqlParser.STORAGE, mysqlParser.STRING, mysqlParser.SUBJECT, mysqlParser.SUBPARTITION, mysqlParser.SUBPARTITIONS, mysqlParser.SUSPEND, mysqlParser.SWAPS, mysqlParser.SWITCHES, mysqlParser.TABLESPACE, mysqlParser.TEMPORARY, mysqlParser.TEMPTABLE, mysqlParser.THAN, mysqlParser.TRANSACTION, mysqlParser.TRUNCATE, mysqlParser.UNDEFINED, mysqlParser.UNDOFILE, mysqlParser.UNDO_BUFFER_SIZE, mysqlParser.UNKNOWN, mysqlParser.UPGRADE, mysqlParser.USER, mysqlParser.VALIDATION, mysqlParser.VALUE, mysqlParser.VARIABLES, mysqlParser.VIEW, mysqlParser.WAIT, mysqlParser.WARNINGS, mysqlParser.WITHOUT, mysqlParser.WORK, mysqlParser.WRAPPER, mysqlParser.X509, mysqlParser.XA, mysqlParser.XML, mysqlParser.QUARTER, mysqlParser.MONTH, mysqlParser.DAY, mysqlParser.HOUR, mysqlParser.MINUTE, mysqlParser.WEEK, mysqlParser.SECOND, mysqlParser.MICROSECOND, mysqlParser.TABLES, mysqlParser.ROUTINE, mysqlParser.EXECUTE, mysqlParser.FILE, mysqlParser.PROCESS, mysqlParser.RELOAD, mysqlParser.SHUTDOWN, mysqlParser.SUPER, mysqlParser.PRIVILEGES, mysqlParser.ARMSCII8, mysqlParser.ASCII, mysqlParser.BIG5, mysqlParser.CP1250, mysqlParser.CP1251, mysqlParser.CP1256, mysqlParser.CP1257, mysqlParser.CP850, mysqlParser.CP852, mysqlParser.CP866, mysqlParser.CP932, mysqlParser.DEC8, mysqlParser.EUCJPMS, mysqlParser.EUCKR, mysqlParser.GB2312, mysqlParser.GBK, mysqlParser.GEOSTD8, mysqlParser.GREEK, mysqlParser.HEBREW, mysqlParser.HP8, mysqlParser.KEYBCS2, mysqlParser.KOI8R, mysqlParser.KOI8U, mysqlParser.LATIN1, mysqlParser.LATIN2, mysqlParser.LATIN5, mysqlParser.LATIN7, mysqlParser.MACCE, mysqlParser.MACROMAN, mysqlParser.SJIS, mysqlParser.SWE7, mysqlParser.TIS620, mysqlParser.UCS2, mysqlParser.UJIS, mysqlParser.UTF16, mysqlParser.UTF16LE, mysqlParser.UTF32, mysqlParser.UTF8, mysqlParser.UTF8MB3, mysqlParser.UTF8MB4, mysqlParser.ARCHIVE, mysqlParser.BLACKHOLE, mysqlParser.CSV, mysqlParser.FEDERATED, mysqlParser.INNODB, mysqlParser.MEMORY, mysqlParser.MRG_MYISAM, mysqlParser.MYISAM, mysqlParser.NDB, mysqlParser.NDBCLUSTER, mysqlParser.PERFOMANCE_SCHEMA, mysqlParser.REPEATABLE, mysqlParser.COMMITTED, mysqlParser.UNCOMMITTED, mysqlParser.SERIALIZABLE, mysqlParser.GEOMETRYCOLLECTION, mysqlParser.LINESTRING, mysqlParser.MULTILINESTRING, mysqlParser.MULTIPOINT, mysqlParser.MULTIPOLYGON, mysqlParser.POINT, mysqlParser.POLYGON, mysqlParser.ABS, mysqlParser.ACOS, mysqlParser.ADDDATE, mysqlParser.ADDTIME, mysqlParser.AES_DECRYPT, mysqlParser.AES_ENCRYPT, mysqlParser.AREA, mysqlParser.ASBINARY, mysqlParser.ASIN, mysqlParser.ASTEXT, mysqlParser.ASWKB, mysqlParser.ASWKT, mysqlParser.ASYMMETRIC_DECRYPT, mysqlParser.ASYMMETRIC_DERIVE, mysqlParser.ASYMMETRIC_ENCRYPT, mysqlParser.ASYMMETRIC_SIGN, mysqlParser.ASYMMETRIC_VERIFY, mysqlParser.ATAN, mysqlParser.ATAN2, mysqlParser.BENCHMARK, mysqlParser.BIN, mysqlParser.BIT_COUNT, mysqlParser.BIT_LENGTH, mysqlParser.BUFFER, mysqlParser.CEIL, mysqlParser.CEILING, mysqlParser.CENTROID, mysqlParser.CHARACTER_LENGTH, mysqlParser.CHARSET, mysqlParser.CHAR_LENGTH, mysqlParser.COERCIBILITY, mysqlParser.COLLATION, mysqlParser.COMPRESS, mysqlParser.CONCAT, mysqlParser.CONCAT_WS, mysqlParser.CONNECTION_ID, mysqlParser.CONV, mysqlParser.CONVERT_TZ, mysqlParser.COS, mysqlParser.COT, mysqlParser.CRC32, mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY, mysqlParser.CREATE_ASYMMETRIC_PUB_KEY, mysqlParser.CREATE_DH_PARAMETERS, mysqlParser.CREATE_DIGEST, mysqlParser.CROSSES, mysqlParser.DATEDIFF, mysqlParser.DATE_FORMAT, mysqlParser.DAYNAME, mysqlParser.DAYOFMONTH, mysqlParser.DAYOFWEEK, mysqlParser.DAYOFYEAR, mysqlParser.DECODE, mysqlParser.DEGREES, mysqlParser.DES_DECRYPT, mysqlParser.DES_ENCRYPT, mysqlParser.DIMENSION, mysqlParser.DISJOINT, mysqlParser.ELT, mysqlParser.ENCODE, mysqlParser.ENCRYPT, mysqlParser.ENDPOINT, mysqlParser.ENVELOPE, mysqlParser.EQUALS, mysqlParser.EXP, mysqlParser.EXPORT_SET, mysqlParser.EXTERIORRING, mysqlParser.EXTRACTVALUE, mysqlParser.FIELD, mysqlParser.FIND_IN_SET, mysqlParser.FLOOR, mysqlParser.FORMAT, mysqlParser.FOUND_ROWS, mysqlParser.FROM_BASE64, mysqlParser.FROM_DAYS, mysqlParser.FROM_UNIXTIME, mysqlParser.GEOMCOLLFROMTEXT, mysqlParser.GEOMCOLLFROMWKB, mysqlParser.GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.GEOMETRYCOLLECTIONFROMWKB, mysqlParser.GEOMETRYFROMTEXT, mysqlParser.GEOMETRYFROMWKB, mysqlParser.GEOMETRYN, mysqlParser.GEOMETRYTYPE, mysqlParser.GEOMFROMTEXT, mysqlParser.GEOMFROMWKB, mysqlParser.GET_FORMAT, mysqlParser.GET_LOCK, mysqlParser.GLENGTH, mysqlParser.GREATEST, mysqlParser.GTID_SUBSET, mysqlParser.GTID_SUBTRACT, mysqlParser.HEX, mysqlParser.IFNULL, mysqlParser.INET6_ATON, mysqlParser.INET6_NTOA, mysqlParser.INET_ATON, mysqlParser.INET_NTOA, mysqlParser.INSTR, mysqlParser.INTERIORRINGN, mysqlParser.INTERSECTS, mysqlParser.ISCLOSED, mysqlParser.ISEMPTY, mysqlParser.ISNULL, mysqlParser.ISSIMPLE, mysqlParser.IS_FREE_LOCK, mysqlParser.IS_IPV4, mysqlParser.IS_IPV4_COMPAT, mysqlParser.IS_IPV4_MAPPED, mysqlParser.IS_IPV6, mysqlParser.IS_USED_LOCK, mysqlParser.LAST_INSERT_ID, mysqlParser.LCASE, mysqlParser.LEAST, mysqlParser.LENGTH, mysqlParser.LINEFROMTEXT, mysqlParser.LINEFROMWKB, mysqlParser.LINESTRINGFROMTEXT, mysqlParser.LINESTRINGFROMWKB, mysqlParser.LN, mysqlParser.LOAD_FILE, mysqlParser.LOCATE, mysqlParser.LOG, mysqlParser.LOG10, mysqlParser.LOG2, mysqlParser.LOWER, mysqlParser.LPAD, mysqlParser.LTRIM, mysqlParser.MAKEDATE, mysqlParser.MAKETIME, mysqlParser.MAKE_SET, mysqlParser.MASTER_POS_WAIT, mysqlParser.MBRCONTAINS, mysqlParser.MBRDISJOINT, mysqlParser.MBREQUAL, mysqlParser.MBRINTERSECTS, mysqlParser.MBROVERLAPS, mysqlParser.MBRTOUCHES, mysqlParser.MBRWITHIN, mysqlParser.MD5, mysqlParser.MLINEFROMTEXT, mysqlParser.MLINEFROMWKB, mysqlParser.MONTHNAME, mysqlParser.MPOINTFROMTEXT, mysqlParser.MPOINTFROMWKB, mysqlParser.MPOLYFROMTEXT, mysqlParser.MPOLYFROMWKB, mysqlParser.MULTILINESTRINGFROMTEXT, mysqlParser.MULTILINESTRINGFROMWKB, mysqlParser.MULTIPOINTFROMTEXT, mysqlParser.MULTIPOINTFROMWKB, mysqlParser.MULTIPOLYGONFROMTEXT, mysqlParser.MULTIPOLYGONFROMWKB, mysqlParser.NAME_CONST, mysqlParser.NULLIF, mysqlParser.NUMGEOMETRIES, mysqlParser.NUMINTERIORRINGS, mysqlParser.NUMPOINTS, mysqlParser.OCT, mysqlParser.OCTET_LENGTH, mysqlParser.ORD, mysqlParser.OVERLAPS, mysqlParser.PERIOD_ADD, mysqlParser.PERIOD_DIFF, mysqlParser.PI, mysqlParser.POINTFROMTEXT, mysqlParser.POINTFROMWKB, mysqlParser.POINTN, mysqlParser.POLYFROMTEXT, mysqlParser.POLYFROMWKB, mysqlParser.POLYGONFROMTEXT, mysqlParser.POLYGONFROMWKB, mysqlParser.POW, mysqlParser.POWER, mysqlParser.QUOTE, mysqlParser.RADIANS, mysqlParser.RAND, mysqlParser.RANDOM_BYTES, mysqlParser.RELEASE_LOCK, mysqlParser.REVERSE, mysqlParser.ROUND, mysqlParser.ROW_COUNT, mysqlParser.RPAD, mysqlParser.RTRIM, mysqlParser.SEC_TO_TIME, mysqlParser.SESSION_USER, mysqlParser.SHA, mysqlParser.SHA1, mysqlParser.SHA2, mysqlParser.SIGN, mysqlParser.SIN, mysqlParser.SLEEP, mysqlParser.SOUNDEX, mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, mysqlParser.SQRT, mysqlParser.SRID, mysqlParser.STARTPOINT, mysqlParser.STRCMP, mysqlParser.STR_TO_DATE, mysqlParser.ST_AREA, mysqlParser.ST_ASBINARY, mysqlParser.ST_ASTEXT, mysqlParser.ST_ASWKB, mysqlParser.ST_ASWKT, mysqlParser.ST_BUFFER, mysqlParser.ST_CENTROID, mysqlParser.ST_CONTAINS, mysqlParser.ST_CROSSES, mysqlParser.ST_DIFFERENCE, mysqlParser.ST_DIMENSION, mysqlParser.ST_DISJOINT, mysqlParser.ST_DISTANCE, mysqlParser.ST_ENDPOINT, mysqlParser.ST_ENVELOPE, mysqlParser.ST_EQUALS, mysqlParser.ST_EXTERIORRING, mysqlParser.ST_GEOMCOLLFROMTEXT, mysqlParser.ST_GEOMCOLLFROMTXT, mysqlParser.ST_GEOMCOLLFROMWKB, mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, mysqlParser.ST_GEOMETRYFROMTEXT, mysqlParser.ST_GEOMETRYFROMWKB, mysqlParser.ST_GEOMETRYN, mysqlParser.ST_GEOMETRYTYPE, mysqlParser.ST_GEOMFROMTEXT, mysqlParser.ST_GEOMFROMWKB, mysqlParser.ST_INTERIORRINGN, mysqlParser.ST_INTERSECTION, mysqlParser.ST_INTERSECTS, mysqlParser.ST_ISCLOSED, mysqlParser.ST_ISEMPTY, mysqlParser.ST_ISSIMPLE, mysqlParser.ST_LINEFROMTEXT, mysqlParser.ST_LINEFROMWKB, mysqlParser.ST_LINESTRINGFROMTEXT, mysqlParser.ST_LINESTRINGFROMWKB, mysqlParser.ST_NUMGEOMETRIES, mysqlParser.ST_NUMINTERIORRING, mysqlParser.ST_NUMINTERIORRINGS, mysqlParser.ST_NUMPOINTS, mysqlParser.ST_OVERLAPS, mysqlParser.ST_POINTFROMTEXT, mysqlParser.ST_POINTFROMWKB, mysqlParser.ST_POINTN, mysqlParser.ST_POLYFROMTEXT, mysqlParser.ST_POLYFROMWKB, mysqlParser.ST_POLYGONFROMTEXT, mysqlParser.ST_POLYGONFROMWKB, mysqlParser.ST_SRID, mysqlParser.ST_STARTPOINT, mysqlParser.ST_SYMDIFFERENCE, mysqlParser.ST_TOUCHES, mysqlParser.ST_UNION, mysqlParser.ST_WITHIN, mysqlParser.ST_X, mysqlParser.ST_Y, mysqlParser.SUBDATE, mysqlParser.SUBSTRING_INDEX, mysqlParser.SUBTIME, mysqlParser.SYSTEM_USER, mysqlParser.TAN, mysqlParser.TIMEDIFF, mysqlParser.TIMESTAMPADD, mysqlParser.TIMESTAMPDIFF, mysqlParser.TIME_FORMAT, mysqlParser.TIME_TO_SEC, mysqlParser.TOUCHES, mysqlParser.TO_BASE64, mysqlParser.TO_DAYS, mysqlParser.TO_SECONDS, mysqlParser.UCASE, mysqlParser.UNCOMPRESS, mysqlParser.UNCOMPRESSED_LENGTH, mysqlParser.UNHEX, mysqlParser.UNIX_TIMESTAMP, mysqlParser.UPDATEXML, mysqlParser.UPPER, mysqlParser.UUID, mysqlParser.UUID_SHORT, mysqlParser.VALIDATE_PASSWORD_STRENGTH, mysqlParser.VERSION, mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, mysqlParser.WEEKDAY, mysqlParser.WEEKOFYEAR, mysqlParser.WEIGHT_STRING, mysqlParser.WITHIN, mysqlParser.YEARWEEK, mysqlParser.Y_FUNCTION, mysqlParser.X_FUNCTION, mysqlParser.PLUS, mysqlParser.MINUS, mysqlParser.EXCLAMATION_SYMBOL, mysqlParser.BIT_NOT_OP, mysqlParser.LR_BRACKET, mysqlParser.ZERO_DECIMAL, mysqlParser.ONE_DECIMAL, mysqlParser.TWO_DECIMAL, mysqlParser.CHARSET_REVERSE_QOUTE_STRING, mysqlParser.START_NATIONAL_STRING_LITERAL, mysqlParser.STRING_LITERAL, mysqlParser.DECIMAL_LITERAL, mysqlParser.HEXADECIMAL_LITERAL, mysqlParser.REAL_LITERAL, mysqlParser.NULL_SPEC_LITERAL, mysqlParser.BIT_STRING, mysqlParser.STRING_CHARSET_NAME, mysqlParser.ID, mysqlParser.REVERSE_QUOTE_ID, mysqlParser.LOCAL_ID, mysqlParser.GLOBAL_ID]:
                    self.state = 5583
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==mysqlParser.ALL:
                        self.state = 5582
                        self.match(mysqlParser.ALL)


                    self.state = 5585
                    self.functionArg()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5588
                self.match(mysqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5589
                self.match(mysqlParser.COUNT)
                self.state = 5590
                self.match(mysqlParser.LR_BRACKET)
                self.state = 5591
                self.match(mysqlParser.DISTINCT)
                self.state = 5592
                self.functionArgs()
                self.state = 5593
                self.match(mysqlParser.RR_BRACKET)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5595
                _la = self._input.LA(1)
                if not(((((_la - 210)) & ~0x3f) == 0 and ((1 << (_la - 210)) & ((1 << (mysqlParser.BIT_AND - 210)) | (1 << (mysqlParser.BIT_OR - 210)) | (1 << (mysqlParser.BIT_XOR - 210)) | (1 << (mysqlParser.STD - 210)) | (1 << (mysqlParser.STDDEV - 210)) | (1 << (mysqlParser.STDDEV_POP - 210)) | (1 << (mysqlParser.STDDEV_SAMP - 210)) | (1 << (mysqlParser.VAR_POP - 210)) | (1 << (mysqlParser.VAR_SAMP - 210)) | (1 << (mysqlParser.VARIANCE - 210)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5596
                self.match(mysqlParser.LR_BRACKET)
                self.state = 5598
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.ALL:
                    self.state = 5597
                    self.match(mysqlParser.ALL)


                self.state = 5600
                self.functionArg()
                self.state = 5601
                self.match(mysqlParser.RR_BRACKET)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5603
                self.match(mysqlParser.GROUP_CONCAT)
                self.state = 5604
                self.match(mysqlParser.LR_BRACKET)
                self.state = 5606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.DISTINCT:
                    self.state = 5605
                    self.match(mysqlParser.DISTINCT)


                self.state = 5608
                self.functionArgs()
                self.state = 5619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.ORDER:
                    self.state = 5609
                    self.match(mysqlParser.ORDER)
                    self.state = 5610
                    self.match(mysqlParser.BY)
                    self.state = 5611
                    self.orderByExpression()
                    self.state = 5616
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==mysqlParser.COMMA:
                        self.state = 5612
                        self.match(mysqlParser.COMMA)
                        self.state = 5613
                        self.orderByExpression()
                        self.state = 5618
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 5623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.SEPARATOR:
                    self.state = 5621
                    self.match(mysqlParser.SEPARATOR)
                    self.state = 5622
                    self.match(mysqlParser.STRING_LITERAL)


                self.state = 5625
                self.match(mysqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScalarFunctionNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionNameBase(self):
            return self.getTypedRuleContext(mysqlParser.FunctionNameBaseContext,0)


        def ASCII(self):
            return self.getToken(mysqlParser.ASCII, 0)

        def CURDATE(self):
            return self.getToken(mysqlParser.CURDATE, 0)

        def CURRENT_DATE(self):
            return self.getToken(mysqlParser.CURRENT_DATE, 0)

        def CURRENT_TIME(self):
            return self.getToken(mysqlParser.CURRENT_TIME, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(mysqlParser.CURRENT_TIMESTAMP, 0)

        def CURTIME(self):
            return self.getToken(mysqlParser.CURTIME, 0)

        def DATE_ADD(self):
            return self.getToken(mysqlParser.DATE_ADD, 0)

        def DATE_SUB(self):
            return self.getToken(mysqlParser.DATE_SUB, 0)

        def IF(self):
            return self.getToken(mysqlParser.IF, 0)

        def LOCALTIME(self):
            return self.getToken(mysqlParser.LOCALTIME, 0)

        def LOCALTIMESTAMP(self):
            return self.getToken(mysqlParser.LOCALTIMESTAMP, 0)

        def MID(self):
            return self.getToken(mysqlParser.MID, 0)

        def NOW(self):
            return self.getToken(mysqlParser.NOW, 0)

        def REPLACE(self):
            return self.getToken(mysqlParser.REPLACE, 0)

        def SUBSTR(self):
            return self.getToken(mysqlParser.SUBSTR, 0)

        def SUBSTRING(self):
            return self.getToken(mysqlParser.SUBSTRING, 0)

        def SYSDATE(self):
            return self.getToken(mysqlParser.SYSDATE, 0)

        def TRIM(self):
            return self.getToken(mysqlParser.TRIM, 0)

        def UTC_DATE(self):
            return self.getToken(mysqlParser.UTC_DATE, 0)

        def UTC_TIME(self):
            return self.getToken(mysqlParser.UTC_TIME, 0)

        def UTC_TIMESTAMP(self):
            return self.getToken(mysqlParser.UTC_TIMESTAMP, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_scalarFunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarFunctionName" ):
                listener.enterScalarFunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarFunctionName" ):
                listener.exitScalarFunctionName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScalarFunctionName" ):
                return visitor.visitScalarFunctionName(self)
            else:
                return visitor.visitChildren(self)




    def scalarFunctionName(self):

        localctx = mysqlParser.ScalarFunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_scalarFunctionName)
        try:
            self.state = 5651
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.LEFT, mysqlParser.RIGHT, mysqlParser.DATE, mysqlParser.TIME, mysqlParser.TIMESTAMP, mysqlParser.YEAR, mysqlParser.COUNT, mysqlParser.POSITION, mysqlParser.QUARTER, mysqlParser.MONTH, mysqlParser.DAY, mysqlParser.HOUR, mysqlParser.MINUTE, mysqlParser.WEEK, mysqlParser.SECOND, mysqlParser.MICROSECOND, mysqlParser.GEOMETRYCOLLECTION, mysqlParser.LINESTRING, mysqlParser.MULTILINESTRING, mysqlParser.MULTIPOINT, mysqlParser.MULTIPOLYGON, mysqlParser.POINT, mysqlParser.POLYGON, mysqlParser.ABS, mysqlParser.ACOS, mysqlParser.ADDDATE, mysqlParser.ADDTIME, mysqlParser.AES_DECRYPT, mysqlParser.AES_ENCRYPT, mysqlParser.AREA, mysqlParser.ASBINARY, mysqlParser.ASIN, mysqlParser.ASTEXT, mysqlParser.ASWKB, mysqlParser.ASWKT, mysqlParser.ASYMMETRIC_DECRYPT, mysqlParser.ASYMMETRIC_DERIVE, mysqlParser.ASYMMETRIC_ENCRYPT, mysqlParser.ASYMMETRIC_SIGN, mysqlParser.ASYMMETRIC_VERIFY, mysqlParser.ATAN, mysqlParser.ATAN2, mysqlParser.BENCHMARK, mysqlParser.BIN, mysqlParser.BIT_COUNT, mysqlParser.BIT_LENGTH, mysqlParser.BUFFER, mysqlParser.CEIL, mysqlParser.CEILING, mysqlParser.CENTROID, mysqlParser.CHARACTER_LENGTH, mysqlParser.CHARSET, mysqlParser.CHAR_LENGTH, mysqlParser.COERCIBILITY, mysqlParser.COLLATION, mysqlParser.COMPRESS, mysqlParser.CONCAT, mysqlParser.CONCAT_WS, mysqlParser.CONNECTION_ID, mysqlParser.CONV, mysqlParser.CONVERT_TZ, mysqlParser.COS, mysqlParser.COT, mysqlParser.CRC32, mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY, mysqlParser.CREATE_ASYMMETRIC_PUB_KEY, mysqlParser.CREATE_DH_PARAMETERS, mysqlParser.CREATE_DIGEST, mysqlParser.CROSSES, mysqlParser.DATEDIFF, mysqlParser.DATE_FORMAT, mysqlParser.DAYNAME, mysqlParser.DAYOFMONTH, mysqlParser.DAYOFWEEK, mysqlParser.DAYOFYEAR, mysqlParser.DECODE, mysqlParser.DEGREES, mysqlParser.DES_DECRYPT, mysqlParser.DES_ENCRYPT, mysqlParser.DIMENSION, mysqlParser.DISJOINT, mysqlParser.ELT, mysqlParser.ENCODE, mysqlParser.ENCRYPT, mysqlParser.ENDPOINT, mysqlParser.ENVELOPE, mysqlParser.EQUALS, mysqlParser.EXP, mysqlParser.EXPORT_SET, mysqlParser.EXTERIORRING, mysqlParser.EXTRACTVALUE, mysqlParser.FIELD, mysqlParser.FIND_IN_SET, mysqlParser.FLOOR, mysqlParser.FORMAT, mysqlParser.FOUND_ROWS, mysqlParser.FROM_BASE64, mysqlParser.FROM_DAYS, mysqlParser.FROM_UNIXTIME, mysqlParser.GEOMCOLLFROMTEXT, mysqlParser.GEOMCOLLFROMWKB, mysqlParser.GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.GEOMETRYCOLLECTIONFROMWKB, mysqlParser.GEOMETRYFROMTEXT, mysqlParser.GEOMETRYFROMWKB, mysqlParser.GEOMETRYN, mysqlParser.GEOMETRYTYPE, mysqlParser.GEOMFROMTEXT, mysqlParser.GEOMFROMWKB, mysqlParser.GET_FORMAT, mysqlParser.GET_LOCK, mysqlParser.GLENGTH, mysqlParser.GREATEST, mysqlParser.GTID_SUBSET, mysqlParser.GTID_SUBTRACT, mysqlParser.HEX, mysqlParser.IFNULL, mysqlParser.INET6_ATON, mysqlParser.INET6_NTOA, mysqlParser.INET_ATON, mysqlParser.INET_NTOA, mysqlParser.INSTR, mysqlParser.INTERIORRINGN, mysqlParser.INTERSECTS, mysqlParser.ISCLOSED, mysqlParser.ISEMPTY, mysqlParser.ISNULL, mysqlParser.ISSIMPLE, mysqlParser.IS_FREE_LOCK, mysqlParser.IS_IPV4, mysqlParser.IS_IPV4_COMPAT, mysqlParser.IS_IPV4_MAPPED, mysqlParser.IS_IPV6, mysqlParser.IS_USED_LOCK, mysqlParser.LAST_INSERT_ID, mysqlParser.LCASE, mysqlParser.LEAST, mysqlParser.LENGTH, mysqlParser.LINEFROMTEXT, mysqlParser.LINEFROMWKB, mysqlParser.LINESTRINGFROMTEXT, mysqlParser.LINESTRINGFROMWKB, mysqlParser.LN, mysqlParser.LOAD_FILE, mysqlParser.LOCATE, mysqlParser.LOG, mysqlParser.LOG10, mysqlParser.LOG2, mysqlParser.LOWER, mysqlParser.LPAD, mysqlParser.LTRIM, mysqlParser.MAKEDATE, mysqlParser.MAKETIME, mysqlParser.MAKE_SET, mysqlParser.MASTER_POS_WAIT, mysqlParser.MBRCONTAINS, mysqlParser.MBRDISJOINT, mysqlParser.MBREQUAL, mysqlParser.MBRINTERSECTS, mysqlParser.MBROVERLAPS, mysqlParser.MBRTOUCHES, mysqlParser.MBRWITHIN, mysqlParser.MD5, mysqlParser.MLINEFROMTEXT, mysqlParser.MLINEFROMWKB, mysqlParser.MONTHNAME, mysqlParser.MPOINTFROMTEXT, mysqlParser.MPOINTFROMWKB, mysqlParser.MPOLYFROMTEXT, mysqlParser.MPOLYFROMWKB, mysqlParser.MULTILINESTRINGFROMTEXT, mysqlParser.MULTILINESTRINGFROMWKB, mysqlParser.MULTIPOINTFROMTEXT, mysqlParser.MULTIPOINTFROMWKB, mysqlParser.MULTIPOLYGONFROMTEXT, mysqlParser.MULTIPOLYGONFROMWKB, mysqlParser.NAME_CONST, mysqlParser.NULLIF, mysqlParser.NUMGEOMETRIES, mysqlParser.NUMINTERIORRINGS, mysqlParser.NUMPOINTS, mysqlParser.OCT, mysqlParser.OCTET_LENGTH, mysqlParser.ORD, mysqlParser.OVERLAPS, mysqlParser.PERIOD_ADD, mysqlParser.PERIOD_DIFF, mysqlParser.PI, mysqlParser.POINTFROMTEXT, mysqlParser.POINTFROMWKB, mysqlParser.POINTN, mysqlParser.POLYFROMTEXT, mysqlParser.POLYFROMWKB, mysqlParser.POLYGONFROMTEXT, mysqlParser.POLYGONFROMWKB, mysqlParser.POW, mysqlParser.POWER, mysqlParser.QUOTE, mysqlParser.RADIANS, mysqlParser.RAND, mysqlParser.RANDOM_BYTES, mysqlParser.RELEASE_LOCK, mysqlParser.REVERSE, mysqlParser.ROUND, mysqlParser.ROW_COUNT, mysqlParser.RPAD, mysqlParser.RTRIM, mysqlParser.SEC_TO_TIME, mysqlParser.SESSION_USER, mysqlParser.SHA, mysqlParser.SHA1, mysqlParser.SHA2, mysqlParser.SIGN, mysqlParser.SIN, mysqlParser.SLEEP, mysqlParser.SOUNDEX, mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, mysqlParser.SQRT, mysqlParser.SRID, mysqlParser.STARTPOINT, mysqlParser.STRCMP, mysqlParser.STR_TO_DATE, mysqlParser.ST_AREA, mysqlParser.ST_ASBINARY, mysqlParser.ST_ASTEXT, mysqlParser.ST_ASWKB, mysqlParser.ST_ASWKT, mysqlParser.ST_BUFFER, mysqlParser.ST_CENTROID, mysqlParser.ST_CONTAINS, mysqlParser.ST_CROSSES, mysqlParser.ST_DIFFERENCE, mysqlParser.ST_DIMENSION, mysqlParser.ST_DISJOINT, mysqlParser.ST_DISTANCE, mysqlParser.ST_ENDPOINT, mysqlParser.ST_ENVELOPE, mysqlParser.ST_EQUALS, mysqlParser.ST_EXTERIORRING, mysqlParser.ST_GEOMCOLLFROMTEXT, mysqlParser.ST_GEOMCOLLFROMTXT, mysqlParser.ST_GEOMCOLLFROMWKB, mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, mysqlParser.ST_GEOMETRYFROMTEXT, mysqlParser.ST_GEOMETRYFROMWKB, mysqlParser.ST_GEOMETRYN, mysqlParser.ST_GEOMETRYTYPE, mysqlParser.ST_GEOMFROMTEXT, mysqlParser.ST_GEOMFROMWKB, mysqlParser.ST_INTERIORRINGN, mysqlParser.ST_INTERSECTION, mysqlParser.ST_INTERSECTS, mysqlParser.ST_ISCLOSED, mysqlParser.ST_ISEMPTY, mysqlParser.ST_ISSIMPLE, mysqlParser.ST_LINEFROMTEXT, mysqlParser.ST_LINEFROMWKB, mysqlParser.ST_LINESTRINGFROMTEXT, mysqlParser.ST_LINESTRINGFROMWKB, mysqlParser.ST_NUMGEOMETRIES, mysqlParser.ST_NUMINTERIORRING, mysqlParser.ST_NUMINTERIORRINGS, mysqlParser.ST_NUMPOINTS, mysqlParser.ST_OVERLAPS, mysqlParser.ST_POINTFROMTEXT, mysqlParser.ST_POINTFROMWKB, mysqlParser.ST_POINTN, mysqlParser.ST_POLYFROMTEXT, mysqlParser.ST_POLYFROMWKB, mysqlParser.ST_POLYGONFROMTEXT, mysqlParser.ST_POLYGONFROMWKB, mysqlParser.ST_SRID, mysqlParser.ST_STARTPOINT, mysqlParser.ST_SYMDIFFERENCE, mysqlParser.ST_TOUCHES, mysqlParser.ST_UNION, mysqlParser.ST_WITHIN, mysqlParser.ST_X, mysqlParser.ST_Y, mysqlParser.SUBDATE, mysqlParser.SUBSTRING_INDEX, mysqlParser.SUBTIME, mysqlParser.SYSTEM_USER, mysqlParser.TAN, mysqlParser.TIMEDIFF, mysqlParser.TIMESTAMPADD, mysqlParser.TIMESTAMPDIFF, mysqlParser.TIME_FORMAT, mysqlParser.TIME_TO_SEC, mysqlParser.TOUCHES, mysqlParser.TO_BASE64, mysqlParser.TO_DAYS, mysqlParser.TO_SECONDS, mysqlParser.UCASE, mysqlParser.UNCOMPRESS, mysqlParser.UNCOMPRESSED_LENGTH, mysqlParser.UNHEX, mysqlParser.UNIX_TIMESTAMP, mysqlParser.UPDATEXML, mysqlParser.UPPER, mysqlParser.UUID, mysqlParser.UUID_SHORT, mysqlParser.VALIDATE_PASSWORD_STRENGTH, mysqlParser.VERSION, mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, mysqlParser.WEEKDAY, mysqlParser.WEEKOFYEAR, mysqlParser.WEIGHT_STRING, mysqlParser.WITHIN, mysqlParser.YEARWEEK, mysqlParser.Y_FUNCTION, mysqlParser.X_FUNCTION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5629
                self.functionNameBase()
                pass
            elif token in [mysqlParser.ASCII]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5630
                self.match(mysqlParser.ASCII)
                pass
            elif token in [mysqlParser.CURDATE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5631
                self.match(mysqlParser.CURDATE)
                pass
            elif token in [mysqlParser.CURRENT_DATE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5632
                self.match(mysqlParser.CURRENT_DATE)
                pass
            elif token in [mysqlParser.CURRENT_TIME]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5633
                self.match(mysqlParser.CURRENT_TIME)
                pass
            elif token in [mysqlParser.CURRENT_TIMESTAMP]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5634
                self.match(mysqlParser.CURRENT_TIMESTAMP)
                pass
            elif token in [mysqlParser.CURTIME]:
                self.enterOuterAlt(localctx, 7)
                self.state = 5635
                self.match(mysqlParser.CURTIME)
                pass
            elif token in [mysqlParser.DATE_ADD]:
                self.enterOuterAlt(localctx, 8)
                self.state = 5636
                self.match(mysqlParser.DATE_ADD)
                pass
            elif token in [mysqlParser.DATE_SUB]:
                self.enterOuterAlt(localctx, 9)
                self.state = 5637
                self.match(mysqlParser.DATE_SUB)
                pass
            elif token in [mysqlParser.IF]:
                self.enterOuterAlt(localctx, 10)
                self.state = 5638
                self.match(mysqlParser.IF)
                pass
            elif token in [mysqlParser.LOCALTIME]:
                self.enterOuterAlt(localctx, 11)
                self.state = 5639
                self.match(mysqlParser.LOCALTIME)
                pass
            elif token in [mysqlParser.LOCALTIMESTAMP]:
                self.enterOuterAlt(localctx, 12)
                self.state = 5640
                self.match(mysqlParser.LOCALTIMESTAMP)
                pass
            elif token in [mysqlParser.MID]:
                self.enterOuterAlt(localctx, 13)
                self.state = 5641
                self.match(mysqlParser.MID)
                pass
            elif token in [mysqlParser.NOW]:
                self.enterOuterAlt(localctx, 14)
                self.state = 5642
                self.match(mysqlParser.NOW)
                pass
            elif token in [mysqlParser.REPLACE]:
                self.enterOuterAlt(localctx, 15)
                self.state = 5643
                self.match(mysqlParser.REPLACE)
                pass
            elif token in [mysqlParser.SUBSTR]:
                self.enterOuterAlt(localctx, 16)
                self.state = 5644
                self.match(mysqlParser.SUBSTR)
                pass
            elif token in [mysqlParser.SUBSTRING]:
                self.enterOuterAlt(localctx, 17)
                self.state = 5645
                self.match(mysqlParser.SUBSTRING)
                pass
            elif token in [mysqlParser.SYSDATE]:
                self.enterOuterAlt(localctx, 18)
                self.state = 5646
                self.match(mysqlParser.SYSDATE)
                pass
            elif token in [mysqlParser.TRIM]:
                self.enterOuterAlt(localctx, 19)
                self.state = 5647
                self.match(mysqlParser.TRIM)
                pass
            elif token in [mysqlParser.UTC_DATE]:
                self.enterOuterAlt(localctx, 20)
                self.state = 5648
                self.match(mysqlParser.UTC_DATE)
                pass
            elif token in [mysqlParser.UTC_TIME]:
                self.enterOuterAlt(localctx, 21)
                self.state = 5649
                self.match(mysqlParser.UTC_TIME)
                pass
            elif token in [mysqlParser.UTC_TIMESTAMP]:
                self.enterOuterAlt(localctx, 22)
                self.state = 5650
                self.match(mysqlParser.UTC_TIMESTAMP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PasswordFunctionClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.functionName = None # Token

        def functionArg(self):
            return self.getTypedRuleContext(mysqlParser.FunctionArgContext,0)


        def PASSWORD(self):
            return self.getToken(mysqlParser.PASSWORD, 0)

        def OLD_PASSWORD(self):
            return self.getToken(mysqlParser.OLD_PASSWORD, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_passwordFunctionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPasswordFunctionClause" ):
                listener.enterPasswordFunctionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPasswordFunctionClause" ):
                listener.exitPasswordFunctionClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPasswordFunctionClause" ):
                return visitor.visitPasswordFunctionClause(self)
            else:
                return visitor.visitChildren(self)




    def passwordFunctionClause(self):

        localctx = mysqlParser.PasswordFunctionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_passwordFunctionClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5653
            localctx.functionName = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==mysqlParser.OLD_PASSWORD or _la==mysqlParser.PASSWORD):
                localctx.functionName = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5654
            self.match(mysqlParser.LR_BRACKET)
            self.state = 5655
            self.functionArg()
            self.state = 5656
            self.match(mysqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionArgsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.ConstantContext)
            else:
                return self.getTypedRuleContext(mysqlParser.ConstantContext,i)


        def fullColumnName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.FullColumnNameContext)
            else:
                return self.getTypedRuleContext(mysqlParser.FullColumnNameContext,i)


        def functionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.FunctionCallContext)
            else:
                return self.getTypedRuleContext(mysqlParser.FunctionCallContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.ExpressionContext,i)


        def getRuleIndex(self):
            return mysqlParser.RULE_functionArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionArgs" ):
                listener.enterFunctionArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionArgs" ):
                listener.exitFunctionArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionArgs" ):
                return visitor.visitFunctionArgs(self)
            else:
                return visitor.visitChildren(self)




    def functionArgs(self):

        localctx = mysqlParser.FunctionArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_functionArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5662
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,820,self._ctx)
            if la_ == 1:
                self.state = 5658
                self.constant()
                pass

            elif la_ == 2:
                self.state = 5659
                self.fullColumnName()
                pass

            elif la_ == 3:
                self.state = 5660
                self.functionCall()
                pass

            elif la_ == 4:
                self.state = 5661
                self.expression(0)
                pass


            self.state = 5673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==mysqlParser.COMMA:
                self.state = 5664
                self.match(mysqlParser.COMMA)
                self.state = 5669
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,821,self._ctx)
                if la_ == 1:
                    self.state = 5665
                    self.constant()
                    pass

                elif la_ == 2:
                    self.state = 5666
                    self.fullColumnName()
                    pass

                elif la_ == 3:
                    self.state = 5667
                    self.functionCall()
                    pass

                elif la_ == 4:
                    self.state = 5668
                    self.expression(0)
                    pass


                self.state = 5675
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionArgContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(mysqlParser.ConstantContext,0)


        def fullColumnName(self):
            return self.getTypedRuleContext(mysqlParser.FullColumnNameContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(mysqlParser.FunctionCallContext,0)


        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return mysqlParser.RULE_functionArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionArg" ):
                listener.enterFunctionArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionArg" ):
                listener.exitFunctionArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionArg" ):
                return visitor.visitFunctionArg(self)
            else:
                return visitor.visitChildren(self)




    def functionArg(self):

        localctx = mysqlParser.FunctionArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_functionArg)
        try:
            self.state = 5680
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,823,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5676
                self.constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5677
                self.fullColumnName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5678
                self.functionCall()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5679
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class IsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ExpressionContext
            super().__init__(parser)
            self.isValue = None # Token
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(mysqlParser.PredicateContext,0)

        def IS(self):
            return self.getToken(mysqlParser.IS, 0)
        def TRUE(self):
            return self.getToken(mysqlParser.TRUE, 0)
        def FALSE(self):
            return self.getToken(mysqlParser.FALSE, 0)
        def UNKNOWN(self):
            return self.getToken(mysqlParser.UNKNOWN, 0)
        def NOT(self):
            return self.getToken(mysqlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsExpression" ):
                listener.enterIsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsExpression" ):
                listener.exitIsExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsExpression" ):
                return visitor.visitIsExpression(self)
            else:
                return visitor.visitChildren(self)


    class NotExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)

        def NOT(self):
            return self.getToken(mysqlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotExpression" ):
                listener.enterNotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotExpression" ):
                listener.exitNotExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotExpression" ):
                return visitor.visitNotExpression(self)
            else:
                return visitor.visitChildren(self)


    class LogicalExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(mysqlParser.ExpressionContext,i)

        def logicalOperator(self):
            return self.getTypedRuleContext(mysqlParser.LogicalOperatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalExpression" ):
                listener.enterLogicalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalExpression" ):
                listener.exitLogicalExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalExpression" ):
                return visitor.visitLogicalExpression(self)
            else:
                return visitor.visitChildren(self)


    class PredicateExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(mysqlParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateExpression" ):
                listener.enterPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateExpression" ):
                listener.exitPredicateExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPredicateExpression" ):
                return visitor.visitPredicateExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = mysqlParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 562
        self.enterRecursionRule(localctx, 562, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5693
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,825,self._ctx)
            if la_ == 1:
                localctx = mysqlParser.NotExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 5683
                _la = self._input.LA(1)
                if not(_la==mysqlParser.NOT or _la==mysqlParser.EXCLAMATION_SYMBOL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5684
                self.expression(4)
                pass

            elif la_ == 2:
                localctx = mysqlParser.IsExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5685
                self.predicate(0)
                self.state = 5686
                self.match(mysqlParser.IS)
                self.state = 5688
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.NOT:
                    self.state = 5687
                    self.match(mysqlParser.NOT)


                self.state = 5690
                localctx.isValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==mysqlParser.FALSE or _la==mysqlParser.TRUE or _la==mysqlParser.UNKNOWN):
                    localctx.isValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                localctx = mysqlParser.PredicateExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5692
                self.predicate(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 5701
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,826,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = mysqlParser.LogicalExpressionContext(self, mysqlParser.ExpressionContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 5695
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 5696
                    self.logicalOperator()
                    self.state = 5697
                    self.expression(4) 
                self.state = 5703
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,826,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class PredicateContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_predicate

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class SoundsLikePredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.PredicateContext)
            else:
                return self.getTypedRuleContext(mysqlParser.PredicateContext,i)

        def SOUNDS(self):
            return self.getToken(mysqlParser.SOUNDS, 0)
        def LIKE(self):
            return self.getToken(mysqlParser.LIKE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSoundsLikePredicate" ):
                listener.enterSoundsLikePredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSoundsLikePredicate" ):
                listener.exitSoundsLikePredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSoundsLikePredicate" ):
                return visitor.visitSoundsLikePredicate(self)
            else:
                return visitor.visitChildren(self)


    class ExpressionAtomPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionAtom(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionAtomContext,0)

        def LOCAL_ID(self):
            return self.getToken(mysqlParser.LOCAL_ID, 0)
        def VAR_ASSIGN(self):
            return self.getToken(mysqlParser.VAR_ASSIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionAtomPredicate" ):
                listener.enterExpressionAtomPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionAtomPredicate" ):
                listener.exitExpressionAtomPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionAtomPredicate" ):
                return visitor.visitExpressionAtomPredicate(self)
            else:
                return visitor.visitChildren(self)


    class InPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(mysqlParser.PredicateContext,0)

        def IN(self):
            return self.getToken(mysqlParser.IN, 0)
        def subquery(self):
            return self.getTypedRuleContext(mysqlParser.SubqueryContext,0)

        def expressions(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionsContext,0)

        def NOT(self):
            return self.getToken(mysqlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInPredicate" ):
                listener.enterInPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInPredicate" ):
                listener.exitInPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInPredicate" ):
                return visitor.visitInPredicate(self)
            else:
                return visitor.visitChildren(self)


    class SubqueryComparasionPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.PredicateContext
            super().__init__(parser)
            self.quantifier = None # Token
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(mysqlParser.PredicateContext,0)

        def comparisonOperator(self):
            return self.getTypedRuleContext(mysqlParser.ComparisonOperatorContext,0)

        def subquery(self):
            return self.getTypedRuleContext(mysqlParser.SubqueryContext,0)

        def ALL(self):
            return self.getToken(mysqlParser.ALL, 0)
        def ANY(self):
            return self.getToken(mysqlParser.ANY, 0)
        def SOME(self):
            return self.getToken(mysqlParser.SOME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryComparasionPredicate" ):
                listener.enterSubqueryComparasionPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryComparasionPredicate" ):
                listener.exitSubqueryComparasionPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubqueryComparasionPredicate" ):
                return visitor.visitSubqueryComparasionPredicate(self)
            else:
                return visitor.visitChildren(self)


    class BetweenPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.PredicateContext)
            else:
                return self.getTypedRuleContext(mysqlParser.PredicateContext,i)

        def BETWEEN(self):
            return self.getToken(mysqlParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(mysqlParser.AND, 0)
        def NOT(self):
            return self.getToken(mysqlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetweenPredicate" ):
                listener.enterBetweenPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetweenPredicate" ):
                listener.exitBetweenPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBetweenPredicate" ):
                return visitor.visitBetweenPredicate(self)
            else:
                return visitor.visitChildren(self)


    class BinaryComparasionPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.PredicateContext
            super().__init__(parser)
            self.left = None # PredicateContext
            self.right = None # PredicateContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(mysqlParser.ComparisonOperatorContext,0)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.PredicateContext)
            else:
                return self.getTypedRuleContext(mysqlParser.PredicateContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryComparasionPredicate" ):
                listener.enterBinaryComparasionPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryComparasionPredicate" ):
                listener.exitBinaryComparasionPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryComparasionPredicate" ):
                return visitor.visitBinaryComparasionPredicate(self)
            else:
                return visitor.visitChildren(self)


    class IsNullPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(mysqlParser.PredicateContext,0)

        def IS(self):
            return self.getToken(mysqlParser.IS, 0)
        def nullNotnull(self):
            return self.getTypedRuleContext(mysqlParser.NullNotnullContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsNullPredicate" ):
                listener.enterIsNullPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsNullPredicate" ):
                listener.exitIsNullPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsNullPredicate" ):
                return visitor.visitIsNullPredicate(self)
            else:
                return visitor.visitChildren(self)


    class LikePredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.PredicateContext)
            else:
                return self.getTypedRuleContext(mysqlParser.PredicateContext,i)

        def LIKE(self):
            return self.getToken(mysqlParser.LIKE, 0)
        def NOT(self):
            return self.getToken(mysqlParser.NOT, 0)
        def ESCAPE(self):
            return self.getToken(mysqlParser.ESCAPE, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(mysqlParser.StringLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLikePredicate" ):
                listener.enterLikePredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLikePredicate" ):
                listener.exitLikePredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLikePredicate" ):
                return visitor.visitLikePredicate(self)
            else:
                return visitor.visitChildren(self)


    class RegexpPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.PredicateContext
            super().__init__(parser)
            self.regex = None # Token
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.PredicateContext)
            else:
                return self.getTypedRuleContext(mysqlParser.PredicateContext,i)

        def REGEXP(self):
            return self.getToken(mysqlParser.REGEXP, 0)
        def RLIKE(self):
            return self.getToken(mysqlParser.RLIKE, 0)
        def NOT(self):
            return self.getToken(mysqlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegexpPredicate" ):
                listener.enterRegexpPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegexpPredicate" ):
                listener.exitRegexpPredicate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRegexpPredicate" ):
                return visitor.visitRegexpPredicate(self)
            else:
                return visitor.visitChildren(self)



    def predicate(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = mysqlParser.PredicateContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 564
        self.enterRecursionRule(localctx, 564, self.RULE_predicate, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = mysqlParser.ExpressionAtomPredicateContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 5707
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,827,self._ctx)
            if la_ == 1:
                self.state = 5705
                self.match(mysqlParser.LOCAL_ID)
                self.state = 5706
                self.match(mysqlParser.VAR_ASSIGN)


            self.state = 5709
            self.expressionAtom(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 5768
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,835,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 5766
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,834,self._ctx)
                    if la_ == 1:
                        localctx = mysqlParser.BinaryComparasionPredicateContext(self, mysqlParser.PredicateContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 5711
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 5712
                        self.comparisonOperator()
                        self.state = 5713
                        localctx.right = self.predicate(8)
                        pass

                    elif la_ == 2:
                        localctx = mysqlParser.BetweenPredicateContext(self, mysqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 5715
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 5717
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==mysqlParser.NOT:
                            self.state = 5716
                            self.match(mysqlParser.NOT)


                        self.state = 5719
                        self.match(mysqlParser.BETWEEN)
                        self.state = 5720
                        self.predicate(0)
                        self.state = 5721
                        self.match(mysqlParser.AND)
                        self.state = 5722
                        self.predicate(6)
                        pass

                    elif la_ == 3:
                        localctx = mysqlParser.SoundsLikePredicateContext(self, mysqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 5724
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 5725
                        self.match(mysqlParser.SOUNDS)
                        self.state = 5726
                        self.match(mysqlParser.LIKE)
                        self.state = 5727
                        self.predicate(5)
                        pass

                    elif la_ == 4:
                        localctx = mysqlParser.RegexpPredicateContext(self, mysqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 5728
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 5730
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==mysqlParser.NOT:
                            self.state = 5729
                            self.match(mysqlParser.NOT)


                        self.state = 5732
                        localctx.regex = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==mysqlParser.REGEXP or _la==mysqlParser.RLIKE):
                            localctx.regex = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 5733
                        self.predicate(3)
                        pass

                    elif la_ == 5:
                        localctx = mysqlParser.InPredicateContext(self, mysqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 5734
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 5736
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==mysqlParser.NOT:
                            self.state = 5735
                            self.match(mysqlParser.NOT)


                        self.state = 5738
                        self.match(mysqlParser.IN)
                        self.state = 5739
                        self.match(mysqlParser.LR_BRACKET)
                        self.state = 5742
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,831,self._ctx)
                        if la_ == 1:
                            self.state = 5740
                            self.subquery()
                            pass

                        elif la_ == 2:
                            self.state = 5741
                            self.expressions()
                            pass


                        self.state = 5744
                        self.match(mysqlParser.RR_BRACKET)
                        pass

                    elif la_ == 6:
                        localctx = mysqlParser.IsNullPredicateContext(self, mysqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 5746
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 5747
                        self.match(mysqlParser.IS)
                        self.state = 5748
                        self.nullNotnull()
                        pass

                    elif la_ == 7:
                        localctx = mysqlParser.SubqueryComparasionPredicateContext(self, mysqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 5749
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 5750
                        self.comparisonOperator()
                        self.state = 5751
                        localctx.quantifier = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==mysqlParser.ALL or _la==mysqlParser.ANY or _la==mysqlParser.SOME):
                            localctx.quantifier = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 5752
                        self.match(mysqlParser.LR_BRACKET)
                        self.state = 5753
                        self.subquery()
                        self.state = 5754
                        self.match(mysqlParser.RR_BRACKET)
                        pass

                    elif la_ == 8:
                        localctx = mysqlParser.LikePredicateContext(self, mysqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 5756
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 5758
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==mysqlParser.NOT:
                            self.state = 5757
                            self.match(mysqlParser.NOT)


                        self.state = 5760
                        self.match(mysqlParser.LIKE)
                        self.state = 5761
                        self.predicate(0)
                        self.state = 5764
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,833,self._ctx)
                        if la_ == 1:
                            self.state = 5762
                            self.match(mysqlParser.ESCAPE)
                            self.state = 5763
                            self.stringLiteral()


                        pass

             
                self.state = 5770
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,835,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ExpressionAtomContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_expressionAtom

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class UnaryExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def unaryOperator(self):
            return self.getTypedRuleContext(mysqlParser.UnaryOperatorContext,0)

        def expressionAtom(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionAtomContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpressionAtom" ):
                listener.enterUnaryExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpressionAtom" ):
                listener.exitUnaryExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryExpressionAtom" ):
                return visitor.visitUnaryExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class ExistsExpessionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def subquery(self):
            return self.getTypedRuleContext(mysqlParser.SubqueryContext,0)

        def EXISTS(self):
            return self.getToken(mysqlParser.EXISTS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExistsExpessionAtom" ):
                listener.enterExistsExpessionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExistsExpessionAtom" ):
                listener.exitExistsExpessionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExistsExpessionAtom" ):
                return visitor.visitExistsExpessionAtom(self)
            else:
                return visitor.visitChildren(self)


    class ConstantExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(mysqlParser.ConstantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpressionAtom" ):
                listener.enterConstantExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpressionAtom" ):
                listener.exitConstantExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantExpressionAtom" ):
                return visitor.visitConstantExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class FunctionCallExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(mysqlParser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallExpressionAtom" ):
                listener.enterFunctionCallExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallExpressionAtom" ):
                listener.exitFunctionCallExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallExpressionAtom" ):
                return visitor.visitFunctionCallExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class MysqlVariableExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def mysqlVariable(self):
            return self.getTypedRuleContext(mysqlParser.MysqlVariableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMysqlVariableExpressionAtom" ):
                listener.enterMysqlVariableExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMysqlVariableExpressionAtom" ):
                listener.exitMysqlVariableExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMysqlVariableExpressionAtom" ):
                return visitor.visitMysqlVariableExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class BinaryExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BINARY(self):
            return self.getToken(mysqlParser.BINARY, 0)
        def expressionAtom(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionAtomContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryExpressionAtom" ):
                listener.enterBinaryExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryExpressionAtom" ):
                listener.exitBinaryExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryExpressionAtom" ):
                return visitor.visitBinaryExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class FullColumnNameExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullColumnName(self):
            return self.getTypedRuleContext(mysqlParser.FullColumnNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullColumnNameExpressionAtom" ):
                listener.enterFullColumnNameExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullColumnNameExpressionAtom" ):
                listener.exitFullColumnNameExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFullColumnNameExpressionAtom" ):
                return visitor.visitFullColumnNameExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class DefaultExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFAULT(self):
            return self.getToken(mysqlParser.DEFAULT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultExpressionAtom" ):
                listener.enterDefaultExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultExpressionAtom" ):
                listener.exitDefaultExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultExpressionAtom" ):
                return visitor.visitDefaultExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class BitExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.left = None # ExpressionAtomContext
            self.right = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def bitOperator(self):
            return self.getTypedRuleContext(mysqlParser.BitOperatorContext,0)

        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(mysqlParser.ExpressionAtomContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitExpressionAtom" ):
                listener.enterBitExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitExpressionAtom" ):
                listener.exitBitExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitExpressionAtom" ):
                return visitor.visitBitExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class NestedExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedExpressionAtom" ):
                listener.enterNestedExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedExpressionAtom" ):
                listener.exitNestedExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedExpressionAtom" ):
                return visitor.visitNestedExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class MathExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.left = None # ExpressionAtomContext
            self.right = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def mathOperator(self):
            return self.getTypedRuleContext(mysqlParser.MathOperatorContext,0)

        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(mysqlParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(mysqlParser.ExpressionAtomContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMathExpressionAtom" ):
                listener.enterMathExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMathExpressionAtom" ):
                listener.exitMathExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMathExpressionAtom" ):
                return visitor.visitMathExpressionAtom(self)
            else:
                return visitor.visitChildren(self)


    class IntervalExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a mysqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTERVAL(self):
            return self.getToken(mysqlParser.INTERVAL, 0)
        def expression(self):
            return self.getTypedRuleContext(mysqlParser.ExpressionContext,0)

        def intervalType(self):
            return self.getTypedRuleContext(mysqlParser.IntervalTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalExpressionAtom" ):
                listener.enterIntervalExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalExpressionAtom" ):
                listener.exitIntervalExpressionAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalExpressionAtom" ):
                return visitor.visitIntervalExpressionAtom(self)
            else:
                return visitor.visitChildren(self)



    def expressionAtom(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = mysqlParser.ExpressionAtomContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 566
        self.enterRecursionRule(localctx, 566, self.RULE_expressionAtom, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5797
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,837,self._ctx)
            if la_ == 1:
                localctx = mysqlParser.DefaultExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 5772
                self.match(mysqlParser.DEFAULT)
                pass

            elif la_ == 2:
                localctx = mysqlParser.ConstantExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5773
                self.constant()
                pass

            elif la_ == 3:
                localctx = mysqlParser.FullColumnNameExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5774
                self.fullColumnName()
                pass

            elif la_ == 4:
                localctx = mysqlParser.FunctionCallExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5775
                self.functionCall()
                pass

            elif la_ == 5:
                localctx = mysqlParser.MysqlVariableExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5776
                self.mysqlVariable()
                pass

            elif la_ == 6:
                localctx = mysqlParser.UnaryExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5777
                self.unaryOperator()
                self.state = 5778
                self.expressionAtom(7)
                pass

            elif la_ == 7:
                localctx = mysqlParser.BinaryExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5780
                self.match(mysqlParser.BINARY)
                self.state = 5781
                self.expressionAtom(6)
                pass

            elif la_ == 8:
                localctx = mysqlParser.NestedExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5782
                self.match(mysqlParser.LR_BRACKET)
                self.state = 5783
                self.expression(0)
                self.state = 5784
                self.match(mysqlParser.RR_BRACKET)
                pass

            elif la_ == 9:
                localctx = mysqlParser.ExistsExpessionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5787
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==mysqlParser.EXISTS:
                    self.state = 5786
                    self.match(mysqlParser.EXISTS)


                self.state = 5789
                self.match(mysqlParser.LR_BRACKET)
                self.state = 5790
                self.subquery()
                self.state = 5791
                self.match(mysqlParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = mysqlParser.IntervalExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5793
                self.match(mysqlParser.INTERVAL)
                self.state = 5794
                self.expression(0)
                self.state = 5795
                self.intervalType()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 5809
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,839,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 5807
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,838,self._ctx)
                    if la_ == 1:
                        localctx = mysqlParser.BitExpressionAtomContext(self, mysqlParser.ExpressionAtomContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 5799
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 5800
                        self.bitOperator()
                        self.state = 5801
                        localctx.right = self.expressionAtom(3)
                        pass

                    elif la_ == 2:
                        localctx = mysqlParser.MathExpressionAtomContext(self, mysqlParser.ExpressionAtomContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 5803
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 5804
                        self.mathOperator()
                        self.state = 5805
                        localctx.right = self.expressionAtom(2)
                        pass

             
                self.state = 5811
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,839,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class UnaryOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(mysqlParser.NOT, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryOperator" ):
                return visitor.visitUnaryOperator(self)
            else:
                return visitor.visitChildren(self)




    def unaryOperator(self):

        localctx = mysqlParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5812
            _la = self._input.LA(1)
            if not(_la==mysqlParser.NOT or ((((_la - 929)) & ~0x3f) == 0 and ((1 << (_la - 929)) & ((1 << (mysqlParser.PLUS - 929)) | (1 << (mysqlParser.MINUS - 929)) | (1 << (mysqlParser.EXCLAMATION_SYMBOL - 929)) | (1 << (mysqlParser.BIT_NOT_OP - 929)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComparisonOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonOperator" ):
                return visitor.visitComparisonOperator(self)
            else:
                return visitor.visitChildren(self)




    def comparisonOperator(self):

        localctx = mysqlParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_comparisonOperator)
        try:
            self.state = 5828
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,840,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5814
                self.match(mysqlParser.EQUAL_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5815
                self.match(mysqlParser.GREATER_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5816
                self.match(mysqlParser.LESS_SYMBOL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5817
                self.match(mysqlParser.LESS_SYMBOL)
                self.state = 5818
                self.match(mysqlParser.EQUAL_SYMBOL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5819
                self.match(mysqlParser.GREATER_SYMBOL)
                self.state = 5820
                self.match(mysqlParser.EQUAL_SYMBOL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5821
                self.match(mysqlParser.LESS_SYMBOL)
                self.state = 5822
                self.match(mysqlParser.GREATER_SYMBOL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5823
                self.match(mysqlParser.EXCLAMATION_SYMBOL)
                self.state = 5824
                self.match(mysqlParser.EQUAL_SYMBOL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5825
                self.match(mysqlParser.LESS_SYMBOL)
                self.state = 5826
                self.match(mysqlParser.EQUAL_SYMBOL)
                self.state = 5827
                self.match(mysqlParser.GREATER_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LogicalOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(mysqlParser.AND, 0)

        def XOR(self):
            return self.getToken(mysqlParser.XOR, 0)

        def OR(self):
            return self.getToken(mysqlParser.OR, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_logicalOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOperator" ):
                listener.enterLogicalOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOperator" ):
                listener.exitLogicalOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalOperator" ):
                return visitor.visitLogicalOperator(self)
            else:
                return visitor.visitChildren(self)




    def logicalOperator(self):

        localctx = mysqlParser.LogicalOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_logicalOperator)
        try:
            self.state = 5837
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.AND]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5830
                self.match(mysqlParser.AND)
                pass
            elif token in [mysqlParser.BIT_AND_OP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5831
                self.match(mysqlParser.BIT_AND_OP)
                self.state = 5832
                self.match(mysqlParser.BIT_AND_OP)
                pass
            elif token in [mysqlParser.XOR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5833
                self.match(mysqlParser.XOR)
                pass
            elif token in [mysqlParser.OR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5834
                self.match(mysqlParser.OR)
                pass
            elif token in [mysqlParser.BIT_OR_OP]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5835
                self.match(mysqlParser.BIT_OR_OP)
                self.state = 5836
                self.match(mysqlParser.BIT_OR_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BitOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return mysqlParser.RULE_bitOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitOperator" ):
                listener.enterBitOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitOperator" ):
                listener.exitBitOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitOperator" ):
                return visitor.visitBitOperator(self)
            else:
                return visitor.visitChildren(self)




    def bitOperator(self):

        localctx = mysqlParser.BitOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_bitOperator)
        try:
            self.state = 5846
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [mysqlParser.LESS_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5839
                self.match(mysqlParser.LESS_SYMBOL)
                self.state = 5840
                self.match(mysqlParser.LESS_SYMBOL)
                pass
            elif token in [mysqlParser.GREATER_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5841
                self.match(mysqlParser.GREATER_SYMBOL)
                self.state = 5842
                self.match(mysqlParser.GREATER_SYMBOL)
                pass
            elif token in [mysqlParser.BIT_AND_OP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5843
                self.match(mysqlParser.BIT_AND_OP)
                pass
            elif token in [mysqlParser.BIT_XOR_OP]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5844
                self.match(mysqlParser.BIT_XOR_OP)
                pass
            elif token in [mysqlParser.BIT_OR_OP]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5845
                self.match(mysqlParser.BIT_OR_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MathOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIV(self):
            return self.getToken(mysqlParser.DIV, 0)

        def MOD(self):
            return self.getToken(mysqlParser.MOD, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_mathOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMathOperator" ):
                listener.enterMathOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMathOperator" ):
                listener.exitMathOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMathOperator" ):
                return visitor.visitMathOperator(self)
            else:
                return visitor.visitChildren(self)




    def mathOperator(self):

        localctx = mysqlParser.MathOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_mathOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5848
            _la = self._input.LA(1)
            if not(((((_la - 926)) & ~0x3f) == 0 and ((1 << (_la - 926)) & ((1 << (mysqlParser.STAR - 926)) | (1 << (mysqlParser.DIVIDE - 926)) | (1 << (mysqlParser.MODULE - 926)) | (1 << (mysqlParser.PLUS - 926)) | (1 << (mysqlParser.MINUS - 926)) | (1 << (mysqlParser.DIV - 926)) | (1 << (mysqlParser.MOD - 926)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CharsetNameBaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARMSCII8(self):
            return self.getToken(mysqlParser.ARMSCII8, 0)

        def ASCII(self):
            return self.getToken(mysqlParser.ASCII, 0)

        def BIG5(self):
            return self.getToken(mysqlParser.BIG5, 0)

        def CP1250(self):
            return self.getToken(mysqlParser.CP1250, 0)

        def CP1251(self):
            return self.getToken(mysqlParser.CP1251, 0)

        def CP1256(self):
            return self.getToken(mysqlParser.CP1256, 0)

        def CP1257(self):
            return self.getToken(mysqlParser.CP1257, 0)

        def CP850(self):
            return self.getToken(mysqlParser.CP850, 0)

        def CP852(self):
            return self.getToken(mysqlParser.CP852, 0)

        def CP866(self):
            return self.getToken(mysqlParser.CP866, 0)

        def CP932(self):
            return self.getToken(mysqlParser.CP932, 0)

        def DEC8(self):
            return self.getToken(mysqlParser.DEC8, 0)

        def EUCJPMS(self):
            return self.getToken(mysqlParser.EUCJPMS, 0)

        def EUCKR(self):
            return self.getToken(mysqlParser.EUCKR, 0)

        def GB2312(self):
            return self.getToken(mysqlParser.GB2312, 0)

        def GBK(self):
            return self.getToken(mysqlParser.GBK, 0)

        def GEOSTD8(self):
            return self.getToken(mysqlParser.GEOSTD8, 0)

        def GREEK(self):
            return self.getToken(mysqlParser.GREEK, 0)

        def HEBREW(self):
            return self.getToken(mysqlParser.HEBREW, 0)

        def HP8(self):
            return self.getToken(mysqlParser.HP8, 0)

        def KEYBCS2(self):
            return self.getToken(mysqlParser.KEYBCS2, 0)

        def KOI8R(self):
            return self.getToken(mysqlParser.KOI8R, 0)

        def KOI8U(self):
            return self.getToken(mysqlParser.KOI8U, 0)

        def LATIN1(self):
            return self.getToken(mysqlParser.LATIN1, 0)

        def LATIN2(self):
            return self.getToken(mysqlParser.LATIN2, 0)

        def LATIN5(self):
            return self.getToken(mysqlParser.LATIN5, 0)

        def LATIN7(self):
            return self.getToken(mysqlParser.LATIN7, 0)

        def MACCE(self):
            return self.getToken(mysqlParser.MACCE, 0)

        def MACROMAN(self):
            return self.getToken(mysqlParser.MACROMAN, 0)

        def SJIS(self):
            return self.getToken(mysqlParser.SJIS, 0)

        def SWE7(self):
            return self.getToken(mysqlParser.SWE7, 0)

        def TIS620(self):
            return self.getToken(mysqlParser.TIS620, 0)

        def UCS2(self):
            return self.getToken(mysqlParser.UCS2, 0)

        def UJIS(self):
            return self.getToken(mysqlParser.UJIS, 0)

        def UTF16(self):
            return self.getToken(mysqlParser.UTF16, 0)

        def UTF16LE(self):
            return self.getToken(mysqlParser.UTF16LE, 0)

        def UTF32(self):
            return self.getToken(mysqlParser.UTF32, 0)

        def UTF8(self):
            return self.getToken(mysqlParser.UTF8, 0)

        def UTF8MB3(self):
            return self.getToken(mysqlParser.UTF8MB3, 0)

        def UTF8MB4(self):
            return self.getToken(mysqlParser.UTF8MB4, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_charsetNameBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharsetNameBase" ):
                listener.enterCharsetNameBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharsetNameBase" ):
                listener.exitCharsetNameBase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharsetNameBase" ):
                return visitor.visitCharsetNameBase(self)
            else:
                return visitor.visitChildren(self)




    def charsetNameBase(self):

        localctx = mysqlParser.CharsetNameBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_charsetNameBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5850
            _la = self._input.LA(1)
            if not(((((_la - 565)) & ~0x3f) == 0 and ((1 << (_la - 565)) & ((1 << (mysqlParser.ARMSCII8 - 565)) | (1 << (mysqlParser.ASCII - 565)) | (1 << (mysqlParser.BIG5 - 565)) | (1 << (mysqlParser.CP1250 - 565)) | (1 << (mysqlParser.CP1251 - 565)) | (1 << (mysqlParser.CP1256 - 565)) | (1 << (mysqlParser.CP1257 - 565)) | (1 << (mysqlParser.CP850 - 565)) | (1 << (mysqlParser.CP852 - 565)) | (1 << (mysqlParser.CP866 - 565)) | (1 << (mysqlParser.CP932 - 565)) | (1 << (mysqlParser.DEC8 - 565)) | (1 << (mysqlParser.EUCJPMS - 565)) | (1 << (mysqlParser.EUCKR - 565)) | (1 << (mysqlParser.GB2312 - 565)) | (1 << (mysqlParser.GBK - 565)) | (1 << (mysqlParser.GEOSTD8 - 565)) | (1 << (mysqlParser.GREEK - 565)) | (1 << (mysqlParser.HEBREW - 565)) | (1 << (mysqlParser.HP8 - 565)) | (1 << (mysqlParser.KEYBCS2 - 565)) | (1 << (mysqlParser.KOI8R - 565)) | (1 << (mysqlParser.KOI8U - 565)) | (1 << (mysqlParser.LATIN1 - 565)) | (1 << (mysqlParser.LATIN2 - 565)) | (1 << (mysqlParser.LATIN5 - 565)) | (1 << (mysqlParser.LATIN7 - 565)) | (1 << (mysqlParser.MACCE - 565)) | (1 << (mysqlParser.MACROMAN - 565)) | (1 << (mysqlParser.SJIS - 565)) | (1 << (mysqlParser.SWE7 - 565)) | (1 << (mysqlParser.TIS620 - 565)) | (1 << (mysqlParser.UCS2 - 565)) | (1 << (mysqlParser.UJIS - 565)) | (1 << (mysqlParser.UTF16 - 565)) | (1 << (mysqlParser.UTF16LE - 565)) | (1 << (mysqlParser.UTF32 - 565)) | (1 << (mysqlParser.UTF8 - 565)) | (1 << (mysqlParser.UTF8MB3 - 565)) | (1 << (mysqlParser.UTF8MB4 - 565)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TransactionLevelBaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEATABLE(self):
            return self.getToken(mysqlParser.REPEATABLE, 0)

        def COMMITTED(self):
            return self.getToken(mysqlParser.COMMITTED, 0)

        def UNCOMMITTED(self):
            return self.getToken(mysqlParser.UNCOMMITTED, 0)

        def SERIALIZABLE(self):
            return self.getToken(mysqlParser.SERIALIZABLE, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_transactionLevelBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionLevelBase" ):
                listener.enterTransactionLevelBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionLevelBase" ):
                listener.exitTransactionLevelBase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransactionLevelBase" ):
                return visitor.visitTransactionLevelBase(self)
            else:
                return visitor.visitChildren(self)




    def transactionLevelBase(self):

        localctx = mysqlParser.TransactionLevelBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_transactionLevelBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5852
            _la = self._input.LA(1)
            if not(((((_la - 616)) & ~0x3f) == 0 and ((1 << (_la - 616)) & ((1 << (mysqlParser.REPEATABLE - 616)) | (1 << (mysqlParser.COMMITTED - 616)) | (1 << (mysqlParser.UNCOMMITTED - 616)) | (1 << (mysqlParser.SERIALIZABLE - 616)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PrivilegesBaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLES(self):
            return self.getToken(mysqlParser.TABLES, 0)

        def ROUTINE(self):
            return self.getToken(mysqlParser.ROUTINE, 0)

        def EXECUTE(self):
            return self.getToken(mysqlParser.EXECUTE, 0)

        def FILE(self):
            return self.getToken(mysqlParser.FILE, 0)

        def PROCESS(self):
            return self.getToken(mysqlParser.PROCESS, 0)

        def RELOAD(self):
            return self.getToken(mysqlParser.RELOAD, 0)

        def SHUTDOWN(self):
            return self.getToken(mysqlParser.SHUTDOWN, 0)

        def SUPER(self):
            return self.getToken(mysqlParser.SUPER, 0)

        def PRIVILEGES(self):
            return self.getToken(mysqlParser.PRIVILEGES, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_privilegesBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilegesBase" ):
                listener.enterPrivilegesBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilegesBase" ):
                listener.exitPrivilegesBase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivilegesBase" ):
                return visitor.visitPrivilegesBase(self)
            else:
                return visitor.visitChildren(self)




    def privilegesBase(self):

        localctx = mysqlParser.PrivilegesBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_privilegesBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5854
            _la = self._input.LA(1)
            if not(((((_la - 556)) & ~0x3f) == 0 and ((1 << (_la - 556)) & ((1 << (mysqlParser.TABLES - 556)) | (1 << (mysqlParser.ROUTINE - 556)) | (1 << (mysqlParser.EXECUTE - 556)) | (1 << (mysqlParser.FILE - 556)) | (1 << (mysqlParser.PROCESS - 556)) | (1 << (mysqlParser.RELOAD - 556)) | (1 << (mysqlParser.SHUTDOWN - 556)) | (1 << (mysqlParser.SUPER - 556)) | (1 << (mysqlParser.PRIVILEGES - 556)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntervalTypeBaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUARTER(self):
            return self.getToken(mysqlParser.QUARTER, 0)

        def MONTH(self):
            return self.getToken(mysqlParser.MONTH, 0)

        def DAY(self):
            return self.getToken(mysqlParser.DAY, 0)

        def HOUR(self):
            return self.getToken(mysqlParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(mysqlParser.MINUTE, 0)

        def WEEK(self):
            return self.getToken(mysqlParser.WEEK, 0)

        def SECOND(self):
            return self.getToken(mysqlParser.SECOND, 0)

        def MICROSECOND(self):
            return self.getToken(mysqlParser.MICROSECOND, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_intervalTypeBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalTypeBase" ):
                listener.enterIntervalTypeBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalTypeBase" ):
                listener.exitIntervalTypeBase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntervalTypeBase" ):
                return visitor.visitIntervalTypeBase(self)
            else:
                return visitor.visitChildren(self)




    def intervalTypeBase(self):

        localctx = mysqlParser.IntervalTypeBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_intervalTypeBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5856
            _la = self._input.LA(1)
            if not(((((_la - 548)) & ~0x3f) == 0 and ((1 << (_la - 548)) & ((1 << (mysqlParser.QUARTER - 548)) | (1 << (mysqlParser.MONTH - 548)) | (1 << (mysqlParser.DAY - 548)) | (1 << (mysqlParser.HOUR - 548)) | (1 << (mysqlParser.MINUTE - 548)) | (1 << (mysqlParser.WEEK - 548)) | (1 << (mysqlParser.SECOND - 548)) | (1 << (mysqlParser.MICROSECOND - 548)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataTypeBaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(mysqlParser.DATE, 0)

        def TIME(self):
            return self.getToken(mysqlParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(mysqlParser.TIMESTAMP, 0)

        def DATETIME(self):
            return self.getToken(mysqlParser.DATETIME, 0)

        def YEAR(self):
            return self.getToken(mysqlParser.YEAR, 0)

        def ENUM(self):
            return self.getToken(mysqlParser.ENUM, 0)

        def TEXT(self):
            return self.getToken(mysqlParser.TEXT, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_dataTypeBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataTypeBase" ):
                listener.enterDataTypeBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataTypeBase" ):
                listener.exitDataTypeBase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDataTypeBase" ):
                return visitor.visitDataTypeBase(self)
            else:
                return visitor.visitChildren(self)




    def dataTypeBase(self):

        localctx = mysqlParser.DataTypeBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_dataTypeBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5858
            _la = self._input.LA(1)
            if not(((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (mysqlParser.DATE - 180)) | (1 << (mysqlParser.TIME - 180)) | (1 << (mysqlParser.TIMESTAMP - 180)) | (1 << (mysqlParser.DATETIME - 180)) | (1 << (mysqlParser.YEAR - 180)) | (1 << (mysqlParser.TEXT - 180)) | (1 << (mysqlParser.ENUM - 180)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeywordsCanBeIdContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCOUNT(self):
            return self.getToken(mysqlParser.ACCOUNT, 0)

        def ACTION(self):
            return self.getToken(mysqlParser.ACTION, 0)

        def AFTER(self):
            return self.getToken(mysqlParser.AFTER, 0)

        def AGGREGATE(self):
            return self.getToken(mysqlParser.AGGREGATE, 0)

        def ALGORITHM(self):
            return self.getToken(mysqlParser.ALGORITHM, 0)

        def ANY(self):
            return self.getToken(mysqlParser.ANY, 0)

        def AT(self):
            return self.getToken(mysqlParser.AT, 0)

        def AUTHORS(self):
            return self.getToken(mysqlParser.AUTHORS, 0)

        def AUTOCOMMIT(self):
            return self.getToken(mysqlParser.AUTOCOMMIT, 0)

        def AUTOEXTEND_SIZE(self):
            return self.getToken(mysqlParser.AUTOEXTEND_SIZE, 0)

        def AUTO_INCREMENT(self):
            return self.getToken(mysqlParser.AUTO_INCREMENT, 0)

        def AVG_ROW_LENGTH(self):
            return self.getToken(mysqlParser.AVG_ROW_LENGTH, 0)

        def BEGIN(self):
            return self.getToken(mysqlParser.BEGIN, 0)

        def BINLOG(self):
            return self.getToken(mysqlParser.BINLOG, 0)

        def BIT(self):
            return self.getToken(mysqlParser.BIT, 0)

        def BLOCK(self):
            return self.getToken(mysqlParser.BLOCK, 0)

        def BTREE(self):
            return self.getToken(mysqlParser.BTREE, 0)

        def CASCADED(self):
            return self.getToken(mysqlParser.CASCADED, 0)

        def CHAIN(self):
            return self.getToken(mysqlParser.CHAIN, 0)

        def CHANNEL(self):
            return self.getToken(mysqlParser.CHANNEL, 0)

        def CHECKSUM(self):
            return self.getToken(mysqlParser.CHECKSUM, 0)

        def CIPHER(self):
            return self.getToken(mysqlParser.CIPHER, 0)

        def CLIENT(self):
            return self.getToken(mysqlParser.CLIENT, 0)

        def COALESCE(self):
            return self.getToken(mysqlParser.COALESCE, 0)

        def CODE(self):
            return self.getToken(mysqlParser.CODE, 0)

        def COLUMNS(self):
            return self.getToken(mysqlParser.COLUMNS, 0)

        def COLUMN_FORMAT(self):
            return self.getToken(mysqlParser.COLUMN_FORMAT, 0)

        def COMMENT(self):
            return self.getToken(mysqlParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(mysqlParser.COMMIT, 0)

        def COMPACT(self):
            return self.getToken(mysqlParser.COMPACT, 0)

        def COMPLETION(self):
            return self.getToken(mysqlParser.COMPLETION, 0)

        def COMPRESSED(self):
            return self.getToken(mysqlParser.COMPRESSED, 0)

        def COMPRESSION(self):
            return self.getToken(mysqlParser.COMPRESSION, 0)

        def CONCURRENT(self):
            return self.getToken(mysqlParser.CONCURRENT, 0)

        def CONNECTION(self):
            return self.getToken(mysqlParser.CONNECTION, 0)

        def CONSISTENT(self):
            return self.getToken(mysqlParser.CONSISTENT, 0)

        def CONTAINS(self):
            return self.getToken(mysqlParser.CONTAINS, 0)

        def CONTEXT(self):
            return self.getToken(mysqlParser.CONTEXT, 0)

        def CONTRIBUTORS(self):
            return self.getToken(mysqlParser.CONTRIBUTORS, 0)

        def COPY(self):
            return self.getToken(mysqlParser.COPY, 0)

        def CPU(self):
            return self.getToken(mysqlParser.CPU, 0)

        def DATA(self):
            return self.getToken(mysqlParser.DATA, 0)

        def DATAFILE(self):
            return self.getToken(mysqlParser.DATAFILE, 0)

        def DEALLOCATE(self):
            return self.getToken(mysqlParser.DEALLOCATE, 0)

        def DEFAULT_AUTH(self):
            return self.getToken(mysqlParser.DEFAULT_AUTH, 0)

        def DEFINER(self):
            return self.getToken(mysqlParser.DEFINER, 0)

        def DELAY_KEY_WRITE(self):
            return self.getToken(mysqlParser.DELAY_KEY_WRITE, 0)

        def DIRECTORY(self):
            return self.getToken(mysqlParser.DIRECTORY, 0)

        def DISABLE(self):
            return self.getToken(mysqlParser.DISABLE, 0)

        def DISCARD(self):
            return self.getToken(mysqlParser.DISCARD, 0)

        def DISK(self):
            return self.getToken(mysqlParser.DISK, 0)

        def DO(self):
            return self.getToken(mysqlParser.DO, 0)

        def DUMPFILE(self):
            return self.getToken(mysqlParser.DUMPFILE, 0)

        def DUPLICATE(self):
            return self.getToken(mysqlParser.DUPLICATE, 0)

        def DYNAMIC(self):
            return self.getToken(mysqlParser.DYNAMIC, 0)

        def ENABLE(self):
            return self.getToken(mysqlParser.ENABLE, 0)

        def ENCRYPTION(self):
            return self.getToken(mysqlParser.ENCRYPTION, 0)

        def ENDS(self):
            return self.getToken(mysqlParser.ENDS, 0)

        def ENGINE(self):
            return self.getToken(mysqlParser.ENGINE, 0)

        def ENGINES(self):
            return self.getToken(mysqlParser.ENGINES, 0)

        def ERROR(self):
            return self.getToken(mysqlParser.ERROR, 0)

        def ERRORS(self):
            return self.getToken(mysqlParser.ERRORS, 0)

        def ESCAPE(self):
            return self.getToken(mysqlParser.ESCAPE, 0)

        def EVEN(self):
            return self.getToken(mysqlParser.EVEN, 0)

        def EVENT(self):
            return self.getToken(mysqlParser.EVENT, 0)

        def EVENTS(self):
            return self.getToken(mysqlParser.EVENTS, 0)

        def EVERY(self):
            return self.getToken(mysqlParser.EVERY, 0)

        def EXCHANGE(self):
            return self.getToken(mysqlParser.EXCHANGE, 0)

        def EXCLUSIVE(self):
            return self.getToken(mysqlParser.EXCLUSIVE, 0)

        def EXPIRE(self):
            return self.getToken(mysqlParser.EXPIRE, 0)

        def EXTENT_SIZE(self):
            return self.getToken(mysqlParser.EXTENT_SIZE, 0)

        def FAULTS(self):
            return self.getToken(mysqlParser.FAULTS, 0)

        def FIELDS(self):
            return self.getToken(mysqlParser.FIELDS, 0)

        def FILE_BLOCK_SIZE(self):
            return self.getToken(mysqlParser.FILE_BLOCK_SIZE, 0)

        def FILTER(self):
            return self.getToken(mysqlParser.FILTER, 0)

        def FIRST(self):
            return self.getToken(mysqlParser.FIRST, 0)

        def FIXED(self):
            return self.getToken(mysqlParser.FIXED, 0)

        def FOLLOWS(self):
            return self.getToken(mysqlParser.FOLLOWS, 0)

        def FULL(self):
            return self.getToken(mysqlParser.FULL, 0)

        def FUNCTION(self):
            return self.getToken(mysqlParser.FUNCTION, 0)

        def GLOBAL(self):
            return self.getToken(mysqlParser.GLOBAL, 0)

        def GRANTS(self):
            return self.getToken(mysqlParser.GRANTS, 0)

        def GROUP_REPLICATION(self):
            return self.getToken(mysqlParser.GROUP_REPLICATION, 0)

        def HASH(self):
            return self.getToken(mysqlParser.HASH, 0)

        def HOST(self):
            return self.getToken(mysqlParser.HOST, 0)

        def IDENTIFIED(self):
            return self.getToken(mysqlParser.IDENTIFIED, 0)

        def IGNORE_SERVER_IDS(self):
            return self.getToken(mysqlParser.IGNORE_SERVER_IDS, 0)

        def IMPORT(self):
            return self.getToken(mysqlParser.IMPORT, 0)

        def INDEXES(self):
            return self.getToken(mysqlParser.INDEXES, 0)

        def INITIAL_SIZE(self):
            return self.getToken(mysqlParser.INITIAL_SIZE, 0)

        def INPLACE(self):
            return self.getToken(mysqlParser.INPLACE, 0)

        def INSERT_METHOD(self):
            return self.getToken(mysqlParser.INSERT_METHOD, 0)

        def INSTANCE(self):
            return self.getToken(mysqlParser.INSTANCE, 0)

        def INVOKER(self):
            return self.getToken(mysqlParser.INVOKER, 0)

        def IO(self):
            return self.getToken(mysqlParser.IO, 0)

        def IO_THREAD(self):
            return self.getToken(mysqlParser.IO_THREAD, 0)

        def IPC(self):
            return self.getToken(mysqlParser.IPC, 0)

        def ISOLATION(self):
            return self.getToken(mysqlParser.ISOLATION, 0)

        def ISSUER(self):
            return self.getToken(mysqlParser.ISSUER, 0)

        def KEY_BLOCK_SIZE(self):
            return self.getToken(mysqlParser.KEY_BLOCK_SIZE, 0)

        def LANGUAGE(self):
            return self.getToken(mysqlParser.LANGUAGE, 0)

        def LAST(self):
            return self.getToken(mysqlParser.LAST, 0)

        def LEAVES(self):
            return self.getToken(mysqlParser.LEAVES, 0)

        def LESS(self):
            return self.getToken(mysqlParser.LESS, 0)

        def LEVEL(self):
            return self.getToken(mysqlParser.LEVEL, 0)

        def LIST(self):
            return self.getToken(mysqlParser.LIST, 0)

        def LOCAL(self):
            return self.getToken(mysqlParser.LOCAL, 0)

        def LOGFILE(self):
            return self.getToken(mysqlParser.LOGFILE, 0)

        def LOGS(self):
            return self.getToken(mysqlParser.LOGS, 0)

        def MASTER(self):
            return self.getToken(mysqlParser.MASTER, 0)

        def MASTER_AUTO_POSITION(self):
            return self.getToken(mysqlParser.MASTER_AUTO_POSITION, 0)

        def MASTER_CONNECT_RETRY(self):
            return self.getToken(mysqlParser.MASTER_CONNECT_RETRY, 0)

        def MASTER_DELAY(self):
            return self.getToken(mysqlParser.MASTER_DELAY, 0)

        def MASTER_HEARTBEAT_PERIOD(self):
            return self.getToken(mysqlParser.MASTER_HEARTBEAT_PERIOD, 0)

        def MASTER_HOST(self):
            return self.getToken(mysqlParser.MASTER_HOST, 0)

        def MASTER_LOG_FILE(self):
            return self.getToken(mysqlParser.MASTER_LOG_FILE, 0)

        def MASTER_LOG_POS(self):
            return self.getToken(mysqlParser.MASTER_LOG_POS, 0)

        def MASTER_PASSWORD(self):
            return self.getToken(mysqlParser.MASTER_PASSWORD, 0)

        def MASTER_PORT(self):
            return self.getToken(mysqlParser.MASTER_PORT, 0)

        def MASTER_RETRY_COUNT(self):
            return self.getToken(mysqlParser.MASTER_RETRY_COUNT, 0)

        def MASTER_SSL(self):
            return self.getToken(mysqlParser.MASTER_SSL, 0)

        def MASTER_SSL_CA(self):
            return self.getToken(mysqlParser.MASTER_SSL_CA, 0)

        def MASTER_SSL_CAPATH(self):
            return self.getToken(mysqlParser.MASTER_SSL_CAPATH, 0)

        def MASTER_SSL_CERT(self):
            return self.getToken(mysqlParser.MASTER_SSL_CERT, 0)

        def MASTER_SSL_CIPHER(self):
            return self.getToken(mysqlParser.MASTER_SSL_CIPHER, 0)

        def MASTER_SSL_CRL(self):
            return self.getToken(mysqlParser.MASTER_SSL_CRL, 0)

        def MASTER_SSL_CRLPATH(self):
            return self.getToken(mysqlParser.MASTER_SSL_CRLPATH, 0)

        def MASTER_SSL_KEY(self):
            return self.getToken(mysqlParser.MASTER_SSL_KEY, 0)

        def MASTER_TLS_VERSION(self):
            return self.getToken(mysqlParser.MASTER_TLS_VERSION, 0)

        def MASTER_USER(self):
            return self.getToken(mysqlParser.MASTER_USER, 0)

        def MAX_CONNECTIONS_PER_HOUR(self):
            return self.getToken(mysqlParser.MAX_CONNECTIONS_PER_HOUR, 0)

        def MAX_QUERIES_PER_HOUR(self):
            return self.getToken(mysqlParser.MAX_QUERIES_PER_HOUR, 0)

        def MAX_ROWS(self):
            return self.getToken(mysqlParser.MAX_ROWS, 0)

        def MAX_SIZE(self):
            return self.getToken(mysqlParser.MAX_SIZE, 0)

        def MAX_UPDATES_PER_HOUR(self):
            return self.getToken(mysqlParser.MAX_UPDATES_PER_HOUR, 0)

        def MAX_USER_CONNECTIONS(self):
            return self.getToken(mysqlParser.MAX_USER_CONNECTIONS, 0)

        def MEMORY(self):
            return self.getToken(mysqlParser.MEMORY, 0)

        def MERGE(self):
            return self.getToken(mysqlParser.MERGE, 0)

        def MID(self):
            return self.getToken(mysqlParser.MID, 0)

        def MIGRATE(self):
            return self.getToken(mysqlParser.MIGRATE, 0)

        def MIN_ROWS(self):
            return self.getToken(mysqlParser.MIN_ROWS, 0)

        def MODIFY(self):
            return self.getToken(mysqlParser.MODIFY, 0)

        def MUTEX(self):
            return self.getToken(mysqlParser.MUTEX, 0)

        def MYSQL(self):
            return self.getToken(mysqlParser.MYSQL, 0)

        def NAME(self):
            return self.getToken(mysqlParser.NAME, 0)

        def NAMES(self):
            return self.getToken(mysqlParser.NAMES, 0)

        def NCHAR(self):
            return self.getToken(mysqlParser.NCHAR, 0)

        def NEVER(self):
            return self.getToken(mysqlParser.NEVER, 0)

        def NO(self):
            return self.getToken(mysqlParser.NO, 0)

        def NODEGROUP(self):
            return self.getToken(mysqlParser.NODEGROUP, 0)

        def NONE(self):
            return self.getToken(mysqlParser.NONE, 0)

        def OFFLINE(self):
            return self.getToken(mysqlParser.OFFLINE, 0)

        def OFFSET(self):
            return self.getToken(mysqlParser.OFFSET, 0)

        def OJ(self):
            return self.getToken(mysqlParser.OJ, 0)

        def OLD_PASSWORD(self):
            return self.getToken(mysqlParser.OLD_PASSWORD, 0)

        def ONE(self):
            return self.getToken(mysqlParser.ONE, 0)

        def ONLINE(self):
            return self.getToken(mysqlParser.ONLINE, 0)

        def ONLY(self):
            return self.getToken(mysqlParser.ONLY, 0)

        def OPTIMIZER_COSTS(self):
            return self.getToken(mysqlParser.OPTIMIZER_COSTS, 0)

        def OPTIONS(self):
            return self.getToken(mysqlParser.OPTIONS, 0)

        def OWNER(self):
            return self.getToken(mysqlParser.OWNER, 0)

        def PACK_KEYS(self):
            return self.getToken(mysqlParser.PACK_KEYS, 0)

        def PAGE(self):
            return self.getToken(mysqlParser.PAGE, 0)

        def PARSER(self):
            return self.getToken(mysqlParser.PARSER, 0)

        def PARTIAL(self):
            return self.getToken(mysqlParser.PARTIAL, 0)

        def PARTITIONING(self):
            return self.getToken(mysqlParser.PARTITIONING, 0)

        def PARTITIONS(self):
            return self.getToken(mysqlParser.PARTITIONS, 0)

        def PASSWORD(self):
            return self.getToken(mysqlParser.PASSWORD, 0)

        def PHASE(self):
            return self.getToken(mysqlParser.PHASE, 0)

        def PLUGINS(self):
            return self.getToken(mysqlParser.PLUGINS, 0)

        def PLUGIN_DIR(self):
            return self.getToken(mysqlParser.PLUGIN_DIR, 0)

        def PORT(self):
            return self.getToken(mysqlParser.PORT, 0)

        def PRECEDES(self):
            return self.getToken(mysqlParser.PRECEDES, 0)

        def PREPARE(self):
            return self.getToken(mysqlParser.PREPARE, 0)

        def PRESERVE(self):
            return self.getToken(mysqlParser.PRESERVE, 0)

        def PREV(self):
            return self.getToken(mysqlParser.PREV, 0)

        def PROCESSLIST(self):
            return self.getToken(mysqlParser.PROCESSLIST, 0)

        def PROFILE(self):
            return self.getToken(mysqlParser.PROFILE, 0)

        def PROFILES(self):
            return self.getToken(mysqlParser.PROFILES, 0)

        def PROXY(self):
            return self.getToken(mysqlParser.PROXY, 0)

        def QUERY(self):
            return self.getToken(mysqlParser.QUERY, 0)

        def QUICK(self):
            return self.getToken(mysqlParser.QUICK, 0)

        def REBUILD(self):
            return self.getToken(mysqlParser.REBUILD, 0)

        def RECOVER(self):
            return self.getToken(mysqlParser.RECOVER, 0)

        def REDO_BUFFER_SIZE(self):
            return self.getToken(mysqlParser.REDO_BUFFER_SIZE, 0)

        def REDUNDANT(self):
            return self.getToken(mysqlParser.REDUNDANT, 0)

        def RELAYLOG(self):
            return self.getToken(mysqlParser.RELAYLOG, 0)

        def RELAY_LOG_FILE(self):
            return self.getToken(mysqlParser.RELAY_LOG_FILE, 0)

        def RELAY_LOG_POS(self):
            return self.getToken(mysqlParser.RELAY_LOG_POS, 0)

        def REMOVE(self):
            return self.getToken(mysqlParser.REMOVE, 0)

        def REORGANIZE(self):
            return self.getToken(mysqlParser.REORGANIZE, 0)

        def REPAIR(self):
            return self.getToken(mysqlParser.REPAIR, 0)

        def REPLICATE_DO_DB(self):
            return self.getToken(mysqlParser.REPLICATE_DO_DB, 0)

        def REPLICATE_DO_TABLE(self):
            return self.getToken(mysqlParser.REPLICATE_DO_TABLE, 0)

        def REPLICATE_IGNORE_DB(self):
            return self.getToken(mysqlParser.REPLICATE_IGNORE_DB, 0)

        def REPLICATE_IGNORE_TABLE(self):
            return self.getToken(mysqlParser.REPLICATE_IGNORE_TABLE, 0)

        def REPLICATE_REWRITE_DB(self):
            return self.getToken(mysqlParser.REPLICATE_REWRITE_DB, 0)

        def REPLICATE_WILD_DO_TABLE(self):
            return self.getToken(mysqlParser.REPLICATE_WILD_DO_TABLE, 0)

        def REPLICATE_WILD_IGNORE_TABLE(self):
            return self.getToken(mysqlParser.REPLICATE_WILD_IGNORE_TABLE, 0)

        def REPLICATION(self):
            return self.getToken(mysqlParser.REPLICATION, 0)

        def RESUME(self):
            return self.getToken(mysqlParser.RESUME, 0)

        def RETURNS(self):
            return self.getToken(mysqlParser.RETURNS, 0)

        def ROLLBACK(self):
            return self.getToken(mysqlParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(mysqlParser.ROLLUP, 0)

        def ROTATE(self):
            return self.getToken(mysqlParser.ROTATE, 0)

        def ROW(self):
            return self.getToken(mysqlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(mysqlParser.ROWS, 0)

        def ROW_FORMAT(self):
            return self.getToken(mysqlParser.ROW_FORMAT, 0)

        def SAVEPOINT(self):
            return self.getToken(mysqlParser.SAVEPOINT, 0)

        def SCHEDULE(self):
            return self.getToken(mysqlParser.SCHEDULE, 0)

        def SECURITY(self):
            return self.getToken(mysqlParser.SECURITY, 0)

        def SERVER(self):
            return self.getToken(mysqlParser.SERVER, 0)

        def SESSION(self):
            return self.getToken(mysqlParser.SESSION, 0)

        def SHARE(self):
            return self.getToken(mysqlParser.SHARE, 0)

        def SHARED(self):
            return self.getToken(mysqlParser.SHARED, 0)

        def SIGNED(self):
            return self.getToken(mysqlParser.SIGNED, 0)

        def SIMPLE(self):
            return self.getToken(mysqlParser.SIMPLE, 0)

        def SLAVE(self):
            return self.getToken(mysqlParser.SLAVE, 0)

        def SNAPSHOT(self):
            return self.getToken(mysqlParser.SNAPSHOT, 0)

        def SOCKET(self):
            return self.getToken(mysqlParser.SOCKET, 0)

        def SOME(self):
            return self.getToken(mysqlParser.SOME, 0)

        def SOUNDS(self):
            return self.getToken(mysqlParser.SOUNDS, 0)

        def SOURCE(self):
            return self.getToken(mysqlParser.SOURCE, 0)

        def SQL_AFTER_GTIDS(self):
            return self.getToken(mysqlParser.SQL_AFTER_GTIDS, 0)

        def SQL_AFTER_MTS_GAPS(self):
            return self.getToken(mysqlParser.SQL_AFTER_MTS_GAPS, 0)

        def SQL_BEFORE_GTIDS(self):
            return self.getToken(mysqlParser.SQL_BEFORE_GTIDS, 0)

        def SQL_BUFFER_RESULT(self):
            return self.getToken(mysqlParser.SQL_BUFFER_RESULT, 0)

        def SQL_CACHE(self):
            return self.getToken(mysqlParser.SQL_CACHE, 0)

        def SQL_NO_CACHE(self):
            return self.getToken(mysqlParser.SQL_NO_CACHE, 0)

        def SQL_THREAD(self):
            return self.getToken(mysqlParser.SQL_THREAD, 0)

        def START(self):
            return self.getToken(mysqlParser.START, 0)

        def STARTS(self):
            return self.getToken(mysqlParser.STARTS, 0)

        def STATS_AUTO_RECALC(self):
            return self.getToken(mysqlParser.STATS_AUTO_RECALC, 0)

        def STATS_PERSISTENT(self):
            return self.getToken(mysqlParser.STATS_PERSISTENT, 0)

        def STATS_SAMPLE_PAGES(self):
            return self.getToken(mysqlParser.STATS_SAMPLE_PAGES, 0)

        def STATUS(self):
            return self.getToken(mysqlParser.STATUS, 0)

        def STOP(self):
            return self.getToken(mysqlParser.STOP, 0)

        def STORAGE(self):
            return self.getToken(mysqlParser.STORAGE, 0)

        def STRING(self):
            return self.getToken(mysqlParser.STRING, 0)

        def SUBJECT(self):
            return self.getToken(mysqlParser.SUBJECT, 0)

        def SUBPARTITION(self):
            return self.getToken(mysqlParser.SUBPARTITION, 0)

        def SUBPARTITIONS(self):
            return self.getToken(mysqlParser.SUBPARTITIONS, 0)

        def SUSPEND(self):
            return self.getToken(mysqlParser.SUSPEND, 0)

        def SWAPS(self):
            return self.getToken(mysqlParser.SWAPS, 0)

        def SWITCHES(self):
            return self.getToken(mysqlParser.SWITCHES, 0)

        def TABLESPACE(self):
            return self.getToken(mysqlParser.TABLESPACE, 0)

        def TEMPORARY(self):
            return self.getToken(mysqlParser.TEMPORARY, 0)

        def TEMPTABLE(self):
            return self.getToken(mysqlParser.TEMPTABLE, 0)

        def THAN(self):
            return self.getToken(mysqlParser.THAN, 0)

        def TRANSACTION(self):
            return self.getToken(mysqlParser.TRANSACTION, 0)

        def TRUNCATE(self):
            return self.getToken(mysqlParser.TRUNCATE, 0)

        def UNDEFINED(self):
            return self.getToken(mysqlParser.UNDEFINED, 0)

        def UNDOFILE(self):
            return self.getToken(mysqlParser.UNDOFILE, 0)

        def UNDO_BUFFER_SIZE(self):
            return self.getToken(mysqlParser.UNDO_BUFFER_SIZE, 0)

        def UNKNOWN(self):
            return self.getToken(mysqlParser.UNKNOWN, 0)

        def UPGRADE(self):
            return self.getToken(mysqlParser.UPGRADE, 0)

        def USER(self):
            return self.getToken(mysqlParser.USER, 0)

        def VALIDATION(self):
            return self.getToken(mysqlParser.VALIDATION, 0)

        def VALUE(self):
            return self.getToken(mysqlParser.VALUE, 0)

        def VARIABLES(self):
            return self.getToken(mysqlParser.VARIABLES, 0)

        def VIEW(self):
            return self.getToken(mysqlParser.VIEW, 0)

        def WAIT(self):
            return self.getToken(mysqlParser.WAIT, 0)

        def WARNINGS(self):
            return self.getToken(mysqlParser.WARNINGS, 0)

        def WITHOUT(self):
            return self.getToken(mysqlParser.WITHOUT, 0)

        def WORK(self):
            return self.getToken(mysqlParser.WORK, 0)

        def WRAPPER(self):
            return self.getToken(mysqlParser.WRAPPER, 0)

        def X509(self):
            return self.getToken(mysqlParser.X509, 0)

        def XA(self):
            return self.getToken(mysqlParser.XA, 0)

        def XML(self):
            return self.getToken(mysqlParser.XML, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_keywordsCanBeId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeywordsCanBeId" ):
                listener.enterKeywordsCanBeId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeywordsCanBeId" ):
                listener.exitKeywordsCanBeId(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeywordsCanBeId" ):
                return visitor.visitKeywordsCanBeId(self)
            else:
                return visitor.visitChildren(self)




    def keywordsCanBeId(self):

        localctx = mysqlParser.KeywordsCanBeIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_keywordsCanBeId)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5860
            _la = self._input.LA(1)
            if not(((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (mysqlParser.ACCOUNT - 244)) | (1 << (mysqlParser.ACTION - 244)) | (1 << (mysqlParser.AFTER - 244)) | (1 << (mysqlParser.AGGREGATE - 244)) | (1 << (mysqlParser.ALGORITHM - 244)) | (1 << (mysqlParser.ANY - 244)) | (1 << (mysqlParser.AT - 244)) | (1 << (mysqlParser.AUTHORS - 244)) | (1 << (mysqlParser.AUTOCOMMIT - 244)) | (1 << (mysqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (mysqlParser.AUTO_INCREMENT - 244)) | (1 << (mysqlParser.AVG_ROW_LENGTH - 244)) | (1 << (mysqlParser.BEGIN - 244)) | (1 << (mysqlParser.BINLOG - 244)) | (1 << (mysqlParser.BIT - 244)) | (1 << (mysqlParser.BLOCK - 244)) | (1 << (mysqlParser.BTREE - 244)) | (1 << (mysqlParser.CASCADED - 244)) | (1 << (mysqlParser.CHAIN - 244)) | (1 << (mysqlParser.CHANNEL - 244)) | (1 << (mysqlParser.CHECKSUM - 244)) | (1 << (mysqlParser.CIPHER - 244)) | (1 << (mysqlParser.CLIENT - 244)) | (1 << (mysqlParser.COALESCE - 244)) | (1 << (mysqlParser.CODE - 244)) | (1 << (mysqlParser.COLUMNS - 244)) | (1 << (mysqlParser.COLUMN_FORMAT - 244)) | (1 << (mysqlParser.COMMENT - 244)) | (1 << (mysqlParser.COMMIT - 244)) | (1 << (mysqlParser.COMPACT - 244)) | (1 << (mysqlParser.COMPLETION - 244)) | (1 << (mysqlParser.COMPRESSED - 244)) | (1 << (mysqlParser.COMPRESSION - 244)) | (1 << (mysqlParser.CONCURRENT - 244)) | (1 << (mysqlParser.CONNECTION - 244)) | (1 << (mysqlParser.CONSISTENT - 244)) | (1 << (mysqlParser.CONTAINS - 244)) | (1 << (mysqlParser.CONTEXT - 244)) | (1 << (mysqlParser.CONTRIBUTORS - 244)) | (1 << (mysqlParser.COPY - 244)) | (1 << (mysqlParser.CPU - 244)) | (1 << (mysqlParser.DATA - 244)) | (1 << (mysqlParser.DATAFILE - 244)) | (1 << (mysqlParser.DEALLOCATE - 244)) | (1 << (mysqlParser.DEFAULT_AUTH - 244)) | (1 << (mysqlParser.DEFINER - 244)) | (1 << (mysqlParser.DELAY_KEY_WRITE - 244)) | (1 << (mysqlParser.DIRECTORY - 244)) | (1 << (mysqlParser.DISABLE - 244)) | (1 << (mysqlParser.DISCARD - 244)) | (1 << (mysqlParser.DISK - 244)) | (1 << (mysqlParser.DO - 244)) | (1 << (mysqlParser.DUMPFILE - 244)) | (1 << (mysqlParser.DUPLICATE - 244)) | (1 << (mysqlParser.DYNAMIC - 244)) | (1 << (mysqlParser.ENABLE - 244)) | (1 << (mysqlParser.ENCRYPTION - 244)) | (1 << (mysqlParser.ENDS - 244)) | (1 << (mysqlParser.ENGINE - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (mysqlParser.ENGINES - 308)) | (1 << (mysqlParser.ERROR - 308)) | (1 << (mysqlParser.ERRORS - 308)) | (1 << (mysqlParser.ESCAPE - 308)) | (1 << (mysqlParser.EVEN - 308)) | (1 << (mysqlParser.EVENT - 308)) | (1 << (mysqlParser.EVENTS - 308)) | (1 << (mysqlParser.EVERY - 308)) | (1 << (mysqlParser.EXCHANGE - 308)) | (1 << (mysqlParser.EXCLUSIVE - 308)) | (1 << (mysqlParser.EXPIRE - 308)) | (1 << (mysqlParser.EXTENT_SIZE - 308)) | (1 << (mysqlParser.FAULTS - 308)) | (1 << (mysqlParser.FIELDS - 308)) | (1 << (mysqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (mysqlParser.FILTER - 308)) | (1 << (mysqlParser.FIRST - 308)) | (1 << (mysqlParser.FIXED - 308)) | (1 << (mysqlParser.FOLLOWS - 308)) | (1 << (mysqlParser.FULL - 308)) | (1 << (mysqlParser.FUNCTION - 308)) | (1 << (mysqlParser.GLOBAL - 308)) | (1 << (mysqlParser.GRANTS - 308)) | (1 << (mysqlParser.GROUP_REPLICATION - 308)) | (1 << (mysqlParser.HASH - 308)) | (1 << (mysqlParser.HOST - 308)) | (1 << (mysqlParser.IDENTIFIED - 308)) | (1 << (mysqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (mysqlParser.IMPORT - 308)) | (1 << (mysqlParser.INDEXES - 308)) | (1 << (mysqlParser.INITIAL_SIZE - 308)) | (1 << (mysqlParser.INPLACE - 308)) | (1 << (mysqlParser.INSERT_METHOD - 308)) | (1 << (mysqlParser.INSTANCE - 308)) | (1 << (mysqlParser.INVOKER - 308)) | (1 << (mysqlParser.IO - 308)) | (1 << (mysqlParser.IO_THREAD - 308)) | (1 << (mysqlParser.IPC - 308)) | (1 << (mysqlParser.ISOLATION - 308)) | (1 << (mysqlParser.ISSUER - 308)) | (1 << (mysqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (mysqlParser.LANGUAGE - 308)) | (1 << (mysqlParser.LAST - 308)) | (1 << (mysqlParser.LEAVES - 308)) | (1 << (mysqlParser.LESS - 308)) | (1 << (mysqlParser.LEVEL - 308)) | (1 << (mysqlParser.LIST - 308)) | (1 << (mysqlParser.LOCAL - 308)) | (1 << (mysqlParser.LOGFILE - 308)) | (1 << (mysqlParser.LOGS - 308)) | (1 << (mysqlParser.MASTER - 308)) | (1 << (mysqlParser.MASTER_AUTO_POSITION - 308)) | (1 << (mysqlParser.MASTER_CONNECT_RETRY - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (mysqlParser.MASTER_DELAY - 372)) | (1 << (mysqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (mysqlParser.MASTER_HOST - 372)) | (1 << (mysqlParser.MASTER_LOG_FILE - 372)) | (1 << (mysqlParser.MASTER_LOG_POS - 372)) | (1 << (mysqlParser.MASTER_PASSWORD - 372)) | (1 << (mysqlParser.MASTER_PORT - 372)) | (1 << (mysqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (mysqlParser.MASTER_SSL - 372)) | (1 << (mysqlParser.MASTER_SSL_CA - 372)) | (1 << (mysqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_CERT - 372)) | (1 << (mysqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (mysqlParser.MASTER_SSL_CRL - 372)) | (1 << (mysqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (mysqlParser.MASTER_SSL_KEY - 372)) | (1 << (mysqlParser.MASTER_TLS_VERSION - 372)) | (1 << (mysqlParser.MASTER_USER - 372)) | (1 << (mysqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_ROWS - 372)) | (1 << (mysqlParser.MAX_SIZE - 372)) | (1 << (mysqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (mysqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (mysqlParser.MERGE - 372)) | (1 << (mysqlParser.MID - 372)) | (1 << (mysqlParser.MIGRATE - 372)) | (1 << (mysqlParser.MIN_ROWS - 372)) | (1 << (mysqlParser.MODIFY - 372)) | (1 << (mysqlParser.MUTEX - 372)) | (1 << (mysqlParser.MYSQL - 372)) | (1 << (mysqlParser.NAME - 372)) | (1 << (mysqlParser.NAMES - 372)) | (1 << (mysqlParser.NCHAR - 372)) | (1 << (mysqlParser.NEVER - 372)) | (1 << (mysqlParser.NO - 372)) | (1 << (mysqlParser.NODEGROUP - 372)) | (1 << (mysqlParser.NONE - 372)) | (1 << (mysqlParser.OFFLINE - 372)) | (1 << (mysqlParser.OFFSET - 372)) | (1 << (mysqlParser.OJ - 372)) | (1 << (mysqlParser.OLD_PASSWORD - 372)) | (1 << (mysqlParser.ONE - 372)) | (1 << (mysqlParser.ONLINE - 372)) | (1 << (mysqlParser.ONLY - 372)) | (1 << (mysqlParser.OPTIMIZER_COSTS - 372)) | (1 << (mysqlParser.OPTIONS - 372)) | (1 << (mysqlParser.OWNER - 372)) | (1 << (mysqlParser.PACK_KEYS - 372)) | (1 << (mysqlParser.PAGE - 372)) | (1 << (mysqlParser.PARSER - 372)) | (1 << (mysqlParser.PARTIAL - 372)) | (1 << (mysqlParser.PARTITIONING - 372)) | (1 << (mysqlParser.PARTITIONS - 372)) | (1 << (mysqlParser.PASSWORD - 372)) | (1 << (mysqlParser.PHASE - 372)) | (1 << (mysqlParser.PLUGIN_DIR - 372)) | (1 << (mysqlParser.PLUGINS - 372)) | (1 << (mysqlParser.PORT - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (mysqlParser.PRECEDES - 436)) | (1 << (mysqlParser.PREPARE - 436)) | (1 << (mysqlParser.PRESERVE - 436)) | (1 << (mysqlParser.PREV - 436)) | (1 << (mysqlParser.PROCESSLIST - 436)) | (1 << (mysqlParser.PROFILE - 436)) | (1 << (mysqlParser.PROFILES - 436)) | (1 << (mysqlParser.PROXY - 436)) | (1 << (mysqlParser.QUERY - 436)) | (1 << (mysqlParser.QUICK - 436)) | (1 << (mysqlParser.REBUILD - 436)) | (1 << (mysqlParser.RECOVER - 436)) | (1 << (mysqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (mysqlParser.REDUNDANT - 436)) | (1 << (mysqlParser.RELAY_LOG_FILE - 436)) | (1 << (mysqlParser.RELAY_LOG_POS - 436)) | (1 << (mysqlParser.RELAYLOG - 436)) | (1 << (mysqlParser.REMOVE - 436)) | (1 << (mysqlParser.REORGANIZE - 436)) | (1 << (mysqlParser.REPAIR - 436)) | (1 << (mysqlParser.REPLICATE_DO_DB - 436)) | (1 << (mysqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (mysqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (mysqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (mysqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (mysqlParser.REPLICATION - 436)) | (1 << (mysqlParser.RESUME - 436)) | (1 << (mysqlParser.RETURNS - 436)) | (1 << (mysqlParser.ROLLBACK - 436)) | (1 << (mysqlParser.ROLLUP - 436)) | (1 << (mysqlParser.ROTATE - 436)) | (1 << (mysqlParser.ROW - 436)) | (1 << (mysqlParser.ROWS - 436)) | (1 << (mysqlParser.ROW_FORMAT - 436)) | (1 << (mysqlParser.SAVEPOINT - 436)) | (1 << (mysqlParser.SCHEDULE - 436)) | (1 << (mysqlParser.SECURITY - 436)) | (1 << (mysqlParser.SERVER - 436)) | (1 << (mysqlParser.SESSION - 436)) | (1 << (mysqlParser.SHARE - 436)) | (1 << (mysqlParser.SHARED - 436)) | (1 << (mysqlParser.SIGNED - 436)) | (1 << (mysqlParser.SIMPLE - 436)) | (1 << (mysqlParser.SLAVE - 436)) | (1 << (mysqlParser.SNAPSHOT - 436)) | (1 << (mysqlParser.SOCKET - 436)) | (1 << (mysqlParser.SOME - 436)) | (1 << (mysqlParser.SOUNDS - 436)) | (1 << (mysqlParser.SOURCE - 436)) | (1 << (mysqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (mysqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (mysqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (mysqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (mysqlParser.SQL_CACHE - 436)) | (1 << (mysqlParser.SQL_NO_CACHE - 436)) | (1 << (mysqlParser.SQL_THREAD - 436)) | (1 << (mysqlParser.START - 436)) | (1 << (mysqlParser.STARTS - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (mysqlParser.STATS_AUTO_RECALC - 500)) | (1 << (mysqlParser.STATS_PERSISTENT - 500)) | (1 << (mysqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (mysqlParser.STATUS - 500)) | (1 << (mysqlParser.STOP - 500)) | (1 << (mysqlParser.STORAGE - 500)) | (1 << (mysqlParser.STRING - 500)) | (1 << (mysqlParser.SUBJECT - 500)) | (1 << (mysqlParser.SUBPARTITION - 500)) | (1 << (mysqlParser.SUBPARTITIONS - 500)) | (1 << (mysqlParser.SUSPEND - 500)) | (1 << (mysqlParser.SWAPS - 500)) | (1 << (mysqlParser.SWITCHES - 500)) | (1 << (mysqlParser.TABLESPACE - 500)) | (1 << (mysqlParser.TEMPORARY - 500)) | (1 << (mysqlParser.TEMPTABLE - 500)) | (1 << (mysqlParser.THAN - 500)) | (1 << (mysqlParser.TRANSACTION - 500)) | (1 << (mysqlParser.TRUNCATE - 500)) | (1 << (mysqlParser.UNDEFINED - 500)) | (1 << (mysqlParser.UNDOFILE - 500)) | (1 << (mysqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (mysqlParser.UNKNOWN - 500)) | (1 << (mysqlParser.UPGRADE - 500)) | (1 << (mysqlParser.USER - 500)) | (1 << (mysqlParser.VALIDATION - 500)) | (1 << (mysqlParser.VALUE - 500)) | (1 << (mysqlParser.VARIABLES - 500)) | (1 << (mysqlParser.VIEW - 500)) | (1 << (mysqlParser.WAIT - 500)) | (1 << (mysqlParser.WARNINGS - 500)) | (1 << (mysqlParser.WITHOUT - 500)) | (1 << (mysqlParser.WORK - 500)) | (1 << (mysqlParser.WRAPPER - 500)) | (1 << (mysqlParser.X509 - 500)) | (1 << (mysqlParser.XA - 500)) | (1 << (mysqlParser.XML - 500)))) != 0) or _la==mysqlParser.MEMORY):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionNameBaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABS(self):
            return self.getToken(mysqlParser.ABS, 0)

        def ACOS(self):
            return self.getToken(mysqlParser.ACOS, 0)

        def ADDDATE(self):
            return self.getToken(mysqlParser.ADDDATE, 0)

        def ADDTIME(self):
            return self.getToken(mysqlParser.ADDTIME, 0)

        def AES_DECRYPT(self):
            return self.getToken(mysqlParser.AES_DECRYPT, 0)

        def AES_ENCRYPT(self):
            return self.getToken(mysqlParser.AES_ENCRYPT, 0)

        def AREA(self):
            return self.getToken(mysqlParser.AREA, 0)

        def ASBINARY(self):
            return self.getToken(mysqlParser.ASBINARY, 0)

        def ASIN(self):
            return self.getToken(mysqlParser.ASIN, 0)

        def ASTEXT(self):
            return self.getToken(mysqlParser.ASTEXT, 0)

        def ASWKB(self):
            return self.getToken(mysqlParser.ASWKB, 0)

        def ASWKT(self):
            return self.getToken(mysqlParser.ASWKT, 0)

        def ASYMMETRIC_DECRYPT(self):
            return self.getToken(mysqlParser.ASYMMETRIC_DECRYPT, 0)

        def ASYMMETRIC_DERIVE(self):
            return self.getToken(mysqlParser.ASYMMETRIC_DERIVE, 0)

        def ASYMMETRIC_ENCRYPT(self):
            return self.getToken(mysqlParser.ASYMMETRIC_ENCRYPT, 0)

        def ASYMMETRIC_SIGN(self):
            return self.getToken(mysqlParser.ASYMMETRIC_SIGN, 0)

        def ASYMMETRIC_VERIFY(self):
            return self.getToken(mysqlParser.ASYMMETRIC_VERIFY, 0)

        def ATAN(self):
            return self.getToken(mysqlParser.ATAN, 0)

        def ATAN2(self):
            return self.getToken(mysqlParser.ATAN2, 0)

        def BENCHMARK(self):
            return self.getToken(mysqlParser.BENCHMARK, 0)

        def BIN(self):
            return self.getToken(mysqlParser.BIN, 0)

        def BIT_COUNT(self):
            return self.getToken(mysqlParser.BIT_COUNT, 0)

        def BIT_LENGTH(self):
            return self.getToken(mysqlParser.BIT_LENGTH, 0)

        def BUFFER(self):
            return self.getToken(mysqlParser.BUFFER, 0)

        def CEIL(self):
            return self.getToken(mysqlParser.CEIL, 0)

        def CEILING(self):
            return self.getToken(mysqlParser.CEILING, 0)

        def CENTROID(self):
            return self.getToken(mysqlParser.CENTROID, 0)

        def CHARACTER_LENGTH(self):
            return self.getToken(mysqlParser.CHARACTER_LENGTH, 0)

        def CHARSET(self):
            return self.getToken(mysqlParser.CHARSET, 0)

        def CHAR_LENGTH(self):
            return self.getToken(mysqlParser.CHAR_LENGTH, 0)

        def COERCIBILITY(self):
            return self.getToken(mysqlParser.COERCIBILITY, 0)

        def COLLATION(self):
            return self.getToken(mysqlParser.COLLATION, 0)

        def COMPRESS(self):
            return self.getToken(mysqlParser.COMPRESS, 0)

        def CONCAT(self):
            return self.getToken(mysqlParser.CONCAT, 0)

        def CONCAT_WS(self):
            return self.getToken(mysqlParser.CONCAT_WS, 0)

        def CONNECTION_ID(self):
            return self.getToken(mysqlParser.CONNECTION_ID, 0)

        def CONV(self):
            return self.getToken(mysqlParser.CONV, 0)

        def CONVERT_TZ(self):
            return self.getToken(mysqlParser.CONVERT_TZ, 0)

        def COS(self):
            return self.getToken(mysqlParser.COS, 0)

        def COT(self):
            return self.getToken(mysqlParser.COT, 0)

        def COUNT(self):
            return self.getToken(mysqlParser.COUNT, 0)

        def CRC32(self):
            return self.getToken(mysqlParser.CRC32, 0)

        def CREATE_ASYMMETRIC_PRIV_KEY(self):
            return self.getToken(mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY, 0)

        def CREATE_ASYMMETRIC_PUB_KEY(self):
            return self.getToken(mysqlParser.CREATE_ASYMMETRIC_PUB_KEY, 0)

        def CREATE_DH_PARAMETERS(self):
            return self.getToken(mysqlParser.CREATE_DH_PARAMETERS, 0)

        def CREATE_DIGEST(self):
            return self.getToken(mysqlParser.CREATE_DIGEST, 0)

        def CROSSES(self):
            return self.getToken(mysqlParser.CROSSES, 0)

        def DATE(self):
            return self.getToken(mysqlParser.DATE, 0)

        def DATEDIFF(self):
            return self.getToken(mysqlParser.DATEDIFF, 0)

        def DATE_FORMAT(self):
            return self.getToken(mysqlParser.DATE_FORMAT, 0)

        def DAY(self):
            return self.getToken(mysqlParser.DAY, 0)

        def DAYNAME(self):
            return self.getToken(mysqlParser.DAYNAME, 0)

        def DAYOFMONTH(self):
            return self.getToken(mysqlParser.DAYOFMONTH, 0)

        def DAYOFWEEK(self):
            return self.getToken(mysqlParser.DAYOFWEEK, 0)

        def DAYOFYEAR(self):
            return self.getToken(mysqlParser.DAYOFYEAR, 0)

        def DECODE(self):
            return self.getToken(mysqlParser.DECODE, 0)

        def DEGREES(self):
            return self.getToken(mysqlParser.DEGREES, 0)

        def DES_DECRYPT(self):
            return self.getToken(mysqlParser.DES_DECRYPT, 0)

        def DES_ENCRYPT(self):
            return self.getToken(mysqlParser.DES_ENCRYPT, 0)

        def DIMENSION(self):
            return self.getToken(mysqlParser.DIMENSION, 0)

        def DISJOINT(self):
            return self.getToken(mysqlParser.DISJOINT, 0)

        def ELT(self):
            return self.getToken(mysqlParser.ELT, 0)

        def ENCODE(self):
            return self.getToken(mysqlParser.ENCODE, 0)

        def ENCRYPT(self):
            return self.getToken(mysqlParser.ENCRYPT, 0)

        def ENDPOINT(self):
            return self.getToken(mysqlParser.ENDPOINT, 0)

        def ENVELOPE(self):
            return self.getToken(mysqlParser.ENVELOPE, 0)

        def EQUALS(self):
            return self.getToken(mysqlParser.EQUALS, 0)

        def EXP(self):
            return self.getToken(mysqlParser.EXP, 0)

        def EXPORT_SET(self):
            return self.getToken(mysqlParser.EXPORT_SET, 0)

        def EXTERIORRING(self):
            return self.getToken(mysqlParser.EXTERIORRING, 0)

        def EXTRACTVALUE(self):
            return self.getToken(mysqlParser.EXTRACTVALUE, 0)

        def FIELD(self):
            return self.getToken(mysqlParser.FIELD, 0)

        def FIND_IN_SET(self):
            return self.getToken(mysqlParser.FIND_IN_SET, 0)

        def FLOOR(self):
            return self.getToken(mysqlParser.FLOOR, 0)

        def FORMAT(self):
            return self.getToken(mysqlParser.FORMAT, 0)

        def FOUND_ROWS(self):
            return self.getToken(mysqlParser.FOUND_ROWS, 0)

        def FROM_BASE64(self):
            return self.getToken(mysqlParser.FROM_BASE64, 0)

        def FROM_DAYS(self):
            return self.getToken(mysqlParser.FROM_DAYS, 0)

        def FROM_UNIXTIME(self):
            return self.getToken(mysqlParser.FROM_UNIXTIME, 0)

        def GEOMCOLLFROMTEXT(self):
            return self.getToken(mysqlParser.GEOMCOLLFROMTEXT, 0)

        def GEOMCOLLFROMWKB(self):
            return self.getToken(mysqlParser.GEOMCOLLFROMWKB, 0)

        def GEOMETRYCOLLECTION(self):
            return self.getToken(mysqlParser.GEOMETRYCOLLECTION, 0)

        def GEOMETRYCOLLECTIONFROMTEXT(self):
            return self.getToken(mysqlParser.GEOMETRYCOLLECTIONFROMTEXT, 0)

        def GEOMETRYCOLLECTIONFROMWKB(self):
            return self.getToken(mysqlParser.GEOMETRYCOLLECTIONFROMWKB, 0)

        def GEOMETRYFROMTEXT(self):
            return self.getToken(mysqlParser.GEOMETRYFROMTEXT, 0)

        def GEOMETRYFROMWKB(self):
            return self.getToken(mysqlParser.GEOMETRYFROMWKB, 0)

        def GEOMETRYN(self):
            return self.getToken(mysqlParser.GEOMETRYN, 0)

        def GEOMETRYTYPE(self):
            return self.getToken(mysqlParser.GEOMETRYTYPE, 0)

        def GEOMFROMTEXT(self):
            return self.getToken(mysqlParser.GEOMFROMTEXT, 0)

        def GEOMFROMWKB(self):
            return self.getToken(mysqlParser.GEOMFROMWKB, 0)

        def GET_FORMAT(self):
            return self.getToken(mysqlParser.GET_FORMAT, 0)

        def GET_LOCK(self):
            return self.getToken(mysqlParser.GET_LOCK, 0)

        def GLENGTH(self):
            return self.getToken(mysqlParser.GLENGTH, 0)

        def GREATEST(self):
            return self.getToken(mysqlParser.GREATEST, 0)

        def GTID_SUBSET(self):
            return self.getToken(mysqlParser.GTID_SUBSET, 0)

        def GTID_SUBTRACT(self):
            return self.getToken(mysqlParser.GTID_SUBTRACT, 0)

        def HEX(self):
            return self.getToken(mysqlParser.HEX, 0)

        def HOUR(self):
            return self.getToken(mysqlParser.HOUR, 0)

        def IFNULL(self):
            return self.getToken(mysqlParser.IFNULL, 0)

        def INET6_ATON(self):
            return self.getToken(mysqlParser.INET6_ATON, 0)

        def INET6_NTOA(self):
            return self.getToken(mysqlParser.INET6_NTOA, 0)

        def INET_ATON(self):
            return self.getToken(mysqlParser.INET_ATON, 0)

        def INET_NTOA(self):
            return self.getToken(mysqlParser.INET_NTOA, 0)

        def INSTR(self):
            return self.getToken(mysqlParser.INSTR, 0)

        def INTERIORRINGN(self):
            return self.getToken(mysqlParser.INTERIORRINGN, 0)

        def INTERSECTS(self):
            return self.getToken(mysqlParser.INTERSECTS, 0)

        def ISCLOSED(self):
            return self.getToken(mysqlParser.ISCLOSED, 0)

        def ISEMPTY(self):
            return self.getToken(mysqlParser.ISEMPTY, 0)

        def ISNULL(self):
            return self.getToken(mysqlParser.ISNULL, 0)

        def ISSIMPLE(self):
            return self.getToken(mysqlParser.ISSIMPLE, 0)

        def IS_FREE_LOCK(self):
            return self.getToken(mysqlParser.IS_FREE_LOCK, 0)

        def IS_IPV4(self):
            return self.getToken(mysqlParser.IS_IPV4, 0)

        def IS_IPV4_COMPAT(self):
            return self.getToken(mysqlParser.IS_IPV4_COMPAT, 0)

        def IS_IPV4_MAPPED(self):
            return self.getToken(mysqlParser.IS_IPV4_MAPPED, 0)

        def IS_IPV6(self):
            return self.getToken(mysqlParser.IS_IPV6, 0)

        def IS_USED_LOCK(self):
            return self.getToken(mysqlParser.IS_USED_LOCK, 0)

        def LAST_INSERT_ID(self):
            return self.getToken(mysqlParser.LAST_INSERT_ID, 0)

        def LCASE(self):
            return self.getToken(mysqlParser.LCASE, 0)

        def LEAST(self):
            return self.getToken(mysqlParser.LEAST, 0)

        def LEFT(self):
            return self.getToken(mysqlParser.LEFT, 0)

        def LENGTH(self):
            return self.getToken(mysqlParser.LENGTH, 0)

        def LINEFROMTEXT(self):
            return self.getToken(mysqlParser.LINEFROMTEXT, 0)

        def LINEFROMWKB(self):
            return self.getToken(mysqlParser.LINEFROMWKB, 0)

        def LINESTRING(self):
            return self.getToken(mysqlParser.LINESTRING, 0)

        def LINESTRINGFROMTEXT(self):
            return self.getToken(mysqlParser.LINESTRINGFROMTEXT, 0)

        def LINESTRINGFROMWKB(self):
            return self.getToken(mysqlParser.LINESTRINGFROMWKB, 0)

        def LN(self):
            return self.getToken(mysqlParser.LN, 0)

        def LOAD_FILE(self):
            return self.getToken(mysqlParser.LOAD_FILE, 0)

        def LOCATE(self):
            return self.getToken(mysqlParser.LOCATE, 0)

        def LOG(self):
            return self.getToken(mysqlParser.LOG, 0)

        def LOG10(self):
            return self.getToken(mysqlParser.LOG10, 0)

        def LOG2(self):
            return self.getToken(mysqlParser.LOG2, 0)

        def LOWER(self):
            return self.getToken(mysqlParser.LOWER, 0)

        def LPAD(self):
            return self.getToken(mysqlParser.LPAD, 0)

        def LTRIM(self):
            return self.getToken(mysqlParser.LTRIM, 0)

        def MAKEDATE(self):
            return self.getToken(mysqlParser.MAKEDATE, 0)

        def MAKETIME(self):
            return self.getToken(mysqlParser.MAKETIME, 0)

        def MAKE_SET(self):
            return self.getToken(mysqlParser.MAKE_SET, 0)

        def MASTER_POS_WAIT(self):
            return self.getToken(mysqlParser.MASTER_POS_WAIT, 0)

        def MBRCONTAINS(self):
            return self.getToken(mysqlParser.MBRCONTAINS, 0)

        def MBRDISJOINT(self):
            return self.getToken(mysqlParser.MBRDISJOINT, 0)

        def MBREQUAL(self):
            return self.getToken(mysqlParser.MBREQUAL, 0)

        def MBRINTERSECTS(self):
            return self.getToken(mysqlParser.MBRINTERSECTS, 0)

        def MBROVERLAPS(self):
            return self.getToken(mysqlParser.MBROVERLAPS, 0)

        def MBRTOUCHES(self):
            return self.getToken(mysqlParser.MBRTOUCHES, 0)

        def MBRWITHIN(self):
            return self.getToken(mysqlParser.MBRWITHIN, 0)

        def MD5(self):
            return self.getToken(mysqlParser.MD5, 0)

        def MICROSECOND(self):
            return self.getToken(mysqlParser.MICROSECOND, 0)

        def MINUTE(self):
            return self.getToken(mysqlParser.MINUTE, 0)

        def MLINEFROMTEXT(self):
            return self.getToken(mysqlParser.MLINEFROMTEXT, 0)

        def MLINEFROMWKB(self):
            return self.getToken(mysqlParser.MLINEFROMWKB, 0)

        def MONTH(self):
            return self.getToken(mysqlParser.MONTH, 0)

        def MONTHNAME(self):
            return self.getToken(mysqlParser.MONTHNAME, 0)

        def MPOINTFROMTEXT(self):
            return self.getToken(mysqlParser.MPOINTFROMTEXT, 0)

        def MPOINTFROMWKB(self):
            return self.getToken(mysqlParser.MPOINTFROMWKB, 0)

        def MPOLYFROMTEXT(self):
            return self.getToken(mysqlParser.MPOLYFROMTEXT, 0)

        def MPOLYFROMWKB(self):
            return self.getToken(mysqlParser.MPOLYFROMWKB, 0)

        def MULTILINESTRING(self):
            return self.getToken(mysqlParser.MULTILINESTRING, 0)

        def MULTILINESTRINGFROMTEXT(self):
            return self.getToken(mysqlParser.MULTILINESTRINGFROMTEXT, 0)

        def MULTILINESTRINGFROMWKB(self):
            return self.getToken(mysqlParser.MULTILINESTRINGFROMWKB, 0)

        def MULTIPOINT(self):
            return self.getToken(mysqlParser.MULTIPOINT, 0)

        def MULTIPOINTFROMTEXT(self):
            return self.getToken(mysqlParser.MULTIPOINTFROMTEXT, 0)

        def MULTIPOINTFROMWKB(self):
            return self.getToken(mysqlParser.MULTIPOINTFROMWKB, 0)

        def MULTIPOLYGON(self):
            return self.getToken(mysqlParser.MULTIPOLYGON, 0)

        def MULTIPOLYGONFROMTEXT(self):
            return self.getToken(mysqlParser.MULTIPOLYGONFROMTEXT, 0)

        def MULTIPOLYGONFROMWKB(self):
            return self.getToken(mysqlParser.MULTIPOLYGONFROMWKB, 0)

        def NAME_CONST(self):
            return self.getToken(mysqlParser.NAME_CONST, 0)

        def NULLIF(self):
            return self.getToken(mysqlParser.NULLIF, 0)

        def NUMGEOMETRIES(self):
            return self.getToken(mysqlParser.NUMGEOMETRIES, 0)

        def NUMINTERIORRINGS(self):
            return self.getToken(mysqlParser.NUMINTERIORRINGS, 0)

        def NUMPOINTS(self):
            return self.getToken(mysqlParser.NUMPOINTS, 0)

        def OCT(self):
            return self.getToken(mysqlParser.OCT, 0)

        def OCTET_LENGTH(self):
            return self.getToken(mysqlParser.OCTET_LENGTH, 0)

        def ORD(self):
            return self.getToken(mysqlParser.ORD, 0)

        def OVERLAPS(self):
            return self.getToken(mysqlParser.OVERLAPS, 0)

        def PERIOD_ADD(self):
            return self.getToken(mysqlParser.PERIOD_ADD, 0)

        def PERIOD_DIFF(self):
            return self.getToken(mysqlParser.PERIOD_DIFF, 0)

        def PI(self):
            return self.getToken(mysqlParser.PI, 0)

        def POINT(self):
            return self.getToken(mysqlParser.POINT, 0)

        def POINTFROMTEXT(self):
            return self.getToken(mysqlParser.POINTFROMTEXT, 0)

        def POINTFROMWKB(self):
            return self.getToken(mysqlParser.POINTFROMWKB, 0)

        def POINTN(self):
            return self.getToken(mysqlParser.POINTN, 0)

        def POLYFROMTEXT(self):
            return self.getToken(mysqlParser.POLYFROMTEXT, 0)

        def POLYFROMWKB(self):
            return self.getToken(mysqlParser.POLYFROMWKB, 0)

        def POLYGON(self):
            return self.getToken(mysqlParser.POLYGON, 0)

        def POLYGONFROMTEXT(self):
            return self.getToken(mysqlParser.POLYGONFROMTEXT, 0)

        def POLYGONFROMWKB(self):
            return self.getToken(mysqlParser.POLYGONFROMWKB, 0)

        def POSITION(self):
            return self.getToken(mysqlParser.POSITION, 0)

        def POW(self):
            return self.getToken(mysqlParser.POW, 0)

        def POWER(self):
            return self.getToken(mysqlParser.POWER, 0)

        def QUARTER(self):
            return self.getToken(mysqlParser.QUARTER, 0)

        def QUOTE(self):
            return self.getToken(mysqlParser.QUOTE, 0)

        def RADIANS(self):
            return self.getToken(mysqlParser.RADIANS, 0)

        def RAND(self):
            return self.getToken(mysqlParser.RAND, 0)

        def RANDOM_BYTES(self):
            return self.getToken(mysqlParser.RANDOM_BYTES, 0)

        def RELEASE_LOCK(self):
            return self.getToken(mysqlParser.RELEASE_LOCK, 0)

        def REVERSE(self):
            return self.getToken(mysqlParser.REVERSE, 0)

        def RIGHT(self):
            return self.getToken(mysqlParser.RIGHT, 0)

        def ROUND(self):
            return self.getToken(mysqlParser.ROUND, 0)

        def ROW_COUNT(self):
            return self.getToken(mysqlParser.ROW_COUNT, 0)

        def RPAD(self):
            return self.getToken(mysqlParser.RPAD, 0)

        def RTRIM(self):
            return self.getToken(mysqlParser.RTRIM, 0)

        def SECOND(self):
            return self.getToken(mysqlParser.SECOND, 0)

        def SEC_TO_TIME(self):
            return self.getToken(mysqlParser.SEC_TO_TIME, 0)

        def SESSION_USER(self):
            return self.getToken(mysqlParser.SESSION_USER, 0)

        def SHA(self):
            return self.getToken(mysqlParser.SHA, 0)

        def SHA1(self):
            return self.getToken(mysqlParser.SHA1, 0)

        def SHA2(self):
            return self.getToken(mysqlParser.SHA2, 0)

        def SIGN(self):
            return self.getToken(mysqlParser.SIGN, 0)

        def SIN(self):
            return self.getToken(mysqlParser.SIN, 0)

        def SLEEP(self):
            return self.getToken(mysqlParser.SLEEP, 0)

        def SOUNDEX(self):
            return self.getToken(mysqlParser.SOUNDEX, 0)

        def SQL_THREAD_WAIT_AFTER_GTIDS(self):
            return self.getToken(mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0)

        def SQRT(self):
            return self.getToken(mysqlParser.SQRT, 0)

        def SRID(self):
            return self.getToken(mysqlParser.SRID, 0)

        def STARTPOINT(self):
            return self.getToken(mysqlParser.STARTPOINT, 0)

        def STRCMP(self):
            return self.getToken(mysqlParser.STRCMP, 0)

        def STR_TO_DATE(self):
            return self.getToken(mysqlParser.STR_TO_DATE, 0)

        def ST_AREA(self):
            return self.getToken(mysqlParser.ST_AREA, 0)

        def ST_ASBINARY(self):
            return self.getToken(mysqlParser.ST_ASBINARY, 0)

        def ST_ASTEXT(self):
            return self.getToken(mysqlParser.ST_ASTEXT, 0)

        def ST_ASWKB(self):
            return self.getToken(mysqlParser.ST_ASWKB, 0)

        def ST_ASWKT(self):
            return self.getToken(mysqlParser.ST_ASWKT, 0)

        def ST_BUFFER(self):
            return self.getToken(mysqlParser.ST_BUFFER, 0)

        def ST_CENTROID(self):
            return self.getToken(mysqlParser.ST_CENTROID, 0)

        def ST_CONTAINS(self):
            return self.getToken(mysqlParser.ST_CONTAINS, 0)

        def ST_CROSSES(self):
            return self.getToken(mysqlParser.ST_CROSSES, 0)

        def ST_DIFFERENCE(self):
            return self.getToken(mysqlParser.ST_DIFFERENCE, 0)

        def ST_DIMENSION(self):
            return self.getToken(mysqlParser.ST_DIMENSION, 0)

        def ST_DISJOINT(self):
            return self.getToken(mysqlParser.ST_DISJOINT, 0)

        def ST_DISTANCE(self):
            return self.getToken(mysqlParser.ST_DISTANCE, 0)

        def ST_ENDPOINT(self):
            return self.getToken(mysqlParser.ST_ENDPOINT, 0)

        def ST_ENVELOPE(self):
            return self.getToken(mysqlParser.ST_ENVELOPE, 0)

        def ST_EQUALS(self):
            return self.getToken(mysqlParser.ST_EQUALS, 0)

        def ST_EXTERIORRING(self):
            return self.getToken(mysqlParser.ST_EXTERIORRING, 0)

        def ST_GEOMCOLLFROMTEXT(self):
            return self.getToken(mysqlParser.ST_GEOMCOLLFROMTEXT, 0)

        def ST_GEOMCOLLFROMTXT(self):
            return self.getToken(mysqlParser.ST_GEOMCOLLFROMTXT, 0)

        def ST_GEOMCOLLFROMWKB(self):
            return self.getToken(mysqlParser.ST_GEOMCOLLFROMWKB, 0)

        def ST_GEOMETRYCOLLECTIONFROMTEXT(self):
            return self.getToken(mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0)

        def ST_GEOMETRYCOLLECTIONFROMWKB(self):
            return self.getToken(mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0)

        def ST_GEOMETRYFROMTEXT(self):
            return self.getToken(mysqlParser.ST_GEOMETRYFROMTEXT, 0)

        def ST_GEOMETRYFROMWKB(self):
            return self.getToken(mysqlParser.ST_GEOMETRYFROMWKB, 0)

        def ST_GEOMETRYN(self):
            return self.getToken(mysqlParser.ST_GEOMETRYN, 0)

        def ST_GEOMETRYTYPE(self):
            return self.getToken(mysqlParser.ST_GEOMETRYTYPE, 0)

        def ST_GEOMFROMTEXT(self):
            return self.getToken(mysqlParser.ST_GEOMFROMTEXT, 0)

        def ST_GEOMFROMWKB(self):
            return self.getToken(mysqlParser.ST_GEOMFROMWKB, 0)

        def ST_INTERIORRINGN(self):
            return self.getToken(mysqlParser.ST_INTERIORRINGN, 0)

        def ST_INTERSECTION(self):
            return self.getToken(mysqlParser.ST_INTERSECTION, 0)

        def ST_INTERSECTS(self):
            return self.getToken(mysqlParser.ST_INTERSECTS, 0)

        def ST_ISCLOSED(self):
            return self.getToken(mysqlParser.ST_ISCLOSED, 0)

        def ST_ISEMPTY(self):
            return self.getToken(mysqlParser.ST_ISEMPTY, 0)

        def ST_ISSIMPLE(self):
            return self.getToken(mysqlParser.ST_ISSIMPLE, 0)

        def ST_LINEFROMTEXT(self):
            return self.getToken(mysqlParser.ST_LINEFROMTEXT, 0)

        def ST_LINEFROMWKB(self):
            return self.getToken(mysqlParser.ST_LINEFROMWKB, 0)

        def ST_LINESTRINGFROMTEXT(self):
            return self.getToken(mysqlParser.ST_LINESTRINGFROMTEXT, 0)

        def ST_LINESTRINGFROMWKB(self):
            return self.getToken(mysqlParser.ST_LINESTRINGFROMWKB, 0)

        def ST_NUMGEOMETRIES(self):
            return self.getToken(mysqlParser.ST_NUMGEOMETRIES, 0)

        def ST_NUMINTERIORRING(self):
            return self.getToken(mysqlParser.ST_NUMINTERIORRING, 0)

        def ST_NUMINTERIORRINGS(self):
            return self.getToken(mysqlParser.ST_NUMINTERIORRINGS, 0)

        def ST_NUMPOINTS(self):
            return self.getToken(mysqlParser.ST_NUMPOINTS, 0)

        def ST_OVERLAPS(self):
            return self.getToken(mysqlParser.ST_OVERLAPS, 0)

        def ST_POINTFROMTEXT(self):
            return self.getToken(mysqlParser.ST_POINTFROMTEXT, 0)

        def ST_POINTFROMWKB(self):
            return self.getToken(mysqlParser.ST_POINTFROMWKB, 0)

        def ST_POINTN(self):
            return self.getToken(mysqlParser.ST_POINTN, 0)

        def ST_POLYFROMTEXT(self):
            return self.getToken(mysqlParser.ST_POLYFROMTEXT, 0)

        def ST_POLYFROMWKB(self):
            return self.getToken(mysqlParser.ST_POLYFROMWKB, 0)

        def ST_POLYGONFROMTEXT(self):
            return self.getToken(mysqlParser.ST_POLYGONFROMTEXT, 0)

        def ST_POLYGONFROMWKB(self):
            return self.getToken(mysqlParser.ST_POLYGONFROMWKB, 0)

        def ST_SRID(self):
            return self.getToken(mysqlParser.ST_SRID, 0)

        def ST_STARTPOINT(self):
            return self.getToken(mysqlParser.ST_STARTPOINT, 0)

        def ST_SYMDIFFERENCE(self):
            return self.getToken(mysqlParser.ST_SYMDIFFERENCE, 0)

        def ST_TOUCHES(self):
            return self.getToken(mysqlParser.ST_TOUCHES, 0)

        def ST_UNION(self):
            return self.getToken(mysqlParser.ST_UNION, 0)

        def ST_WITHIN(self):
            return self.getToken(mysqlParser.ST_WITHIN, 0)

        def ST_X(self):
            return self.getToken(mysqlParser.ST_X, 0)

        def ST_Y(self):
            return self.getToken(mysqlParser.ST_Y, 0)

        def SUBDATE(self):
            return self.getToken(mysqlParser.SUBDATE, 0)

        def SUBSTRING_INDEX(self):
            return self.getToken(mysqlParser.SUBSTRING_INDEX, 0)

        def SUBTIME(self):
            return self.getToken(mysqlParser.SUBTIME, 0)

        def SYSTEM_USER(self):
            return self.getToken(mysqlParser.SYSTEM_USER, 0)

        def TAN(self):
            return self.getToken(mysqlParser.TAN, 0)

        def TIME(self):
            return self.getToken(mysqlParser.TIME, 0)

        def TIMEDIFF(self):
            return self.getToken(mysqlParser.TIMEDIFF, 0)

        def TIMESTAMP(self):
            return self.getToken(mysqlParser.TIMESTAMP, 0)

        def TIMESTAMPADD(self):
            return self.getToken(mysqlParser.TIMESTAMPADD, 0)

        def TIMESTAMPDIFF(self):
            return self.getToken(mysqlParser.TIMESTAMPDIFF, 0)

        def TIME_FORMAT(self):
            return self.getToken(mysqlParser.TIME_FORMAT, 0)

        def TIME_TO_SEC(self):
            return self.getToken(mysqlParser.TIME_TO_SEC, 0)

        def TOUCHES(self):
            return self.getToken(mysqlParser.TOUCHES, 0)

        def TO_BASE64(self):
            return self.getToken(mysqlParser.TO_BASE64, 0)

        def TO_DAYS(self):
            return self.getToken(mysqlParser.TO_DAYS, 0)

        def TO_SECONDS(self):
            return self.getToken(mysqlParser.TO_SECONDS, 0)

        def UCASE(self):
            return self.getToken(mysqlParser.UCASE, 0)

        def UNCOMPRESS(self):
            return self.getToken(mysqlParser.UNCOMPRESS, 0)

        def UNCOMPRESSED_LENGTH(self):
            return self.getToken(mysqlParser.UNCOMPRESSED_LENGTH, 0)

        def UNHEX(self):
            return self.getToken(mysqlParser.UNHEX, 0)

        def UNIX_TIMESTAMP(self):
            return self.getToken(mysqlParser.UNIX_TIMESTAMP, 0)

        def UPDATEXML(self):
            return self.getToken(mysqlParser.UPDATEXML, 0)

        def UPPER(self):
            return self.getToken(mysqlParser.UPPER, 0)

        def UUID(self):
            return self.getToken(mysqlParser.UUID, 0)

        def UUID_SHORT(self):
            return self.getToken(mysqlParser.UUID_SHORT, 0)

        def VALIDATE_PASSWORD_STRENGTH(self):
            return self.getToken(mysqlParser.VALIDATE_PASSWORD_STRENGTH, 0)

        def VERSION(self):
            return self.getToken(mysqlParser.VERSION, 0)

        def WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS(self):
            return self.getToken(mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0)

        def WEEK(self):
            return self.getToken(mysqlParser.WEEK, 0)

        def WEEKDAY(self):
            return self.getToken(mysqlParser.WEEKDAY, 0)

        def WEEKOFYEAR(self):
            return self.getToken(mysqlParser.WEEKOFYEAR, 0)

        def WEIGHT_STRING(self):
            return self.getToken(mysqlParser.WEIGHT_STRING, 0)

        def WITHIN(self):
            return self.getToken(mysqlParser.WITHIN, 0)

        def YEAR(self):
            return self.getToken(mysqlParser.YEAR, 0)

        def YEARWEEK(self):
            return self.getToken(mysqlParser.YEARWEEK, 0)

        def Y_FUNCTION(self):
            return self.getToken(mysqlParser.Y_FUNCTION, 0)

        def X_FUNCTION(self):
            return self.getToken(mysqlParser.X_FUNCTION, 0)

        def getRuleIndex(self):
            return mysqlParser.RULE_functionNameBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionNameBase" ):
                listener.enterFunctionNameBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionNameBase" ):
                listener.exitFunctionNameBase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionNameBase" ):
                return visitor.visitFunctionNameBase(self)
            else:
                return visitor.visitChildren(self)




    def functionNameBase(self):

        localctx = mysqlParser.FunctionNameBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_functionNameBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5862
            _la = self._input.LA(1)
            if not(_la==mysqlParser.LEFT or _la==mysqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (mysqlParser.DATE - 180)) | (1 << (mysqlParser.TIME - 180)) | (1 << (mysqlParser.TIMESTAMP - 180)) | (1 << (mysqlParser.YEAR - 180)) | (1 << (mysqlParser.COUNT - 180)) | (1 << (mysqlParser.POSITION - 180)))) != 0) or ((((_la - 548)) & ~0x3f) == 0 and ((1 << (_la - 548)) & ((1 << (mysqlParser.QUARTER - 548)) | (1 << (mysqlParser.MONTH - 548)) | (1 << (mysqlParser.DAY - 548)) | (1 << (mysqlParser.HOUR - 548)) | (1 << (mysqlParser.MINUTE - 548)) | (1 << (mysqlParser.WEEK - 548)) | (1 << (mysqlParser.SECOND - 548)) | (1 << (mysqlParser.MICROSECOND - 548)))) != 0) or ((((_la - 620)) & ~0x3f) == 0 and ((1 << (_la - 620)) & ((1 << (mysqlParser.GEOMETRYCOLLECTION - 620)) | (1 << (mysqlParser.LINESTRING - 620)) | (1 << (mysqlParser.MULTILINESTRING - 620)) | (1 << (mysqlParser.MULTIPOINT - 620)) | (1 << (mysqlParser.MULTIPOLYGON - 620)) | (1 << (mysqlParser.POINT - 620)) | (1 << (mysqlParser.POLYGON - 620)) | (1 << (mysqlParser.ABS - 620)) | (1 << (mysqlParser.ACOS - 620)) | (1 << (mysqlParser.ADDDATE - 620)) | (1 << (mysqlParser.ADDTIME - 620)) | (1 << (mysqlParser.AES_DECRYPT - 620)) | (1 << (mysqlParser.AES_ENCRYPT - 620)) | (1 << (mysqlParser.AREA - 620)) | (1 << (mysqlParser.ASBINARY - 620)) | (1 << (mysqlParser.ASIN - 620)) | (1 << (mysqlParser.ASTEXT - 620)) | (1 << (mysqlParser.ASWKB - 620)) | (1 << (mysqlParser.ASWKT - 620)) | (1 << (mysqlParser.ASYMMETRIC_DECRYPT - 620)) | (1 << (mysqlParser.ASYMMETRIC_DERIVE - 620)) | (1 << (mysqlParser.ASYMMETRIC_ENCRYPT - 620)) | (1 << (mysqlParser.ASYMMETRIC_SIGN - 620)) | (1 << (mysqlParser.ASYMMETRIC_VERIFY - 620)) | (1 << (mysqlParser.ATAN - 620)) | (1 << (mysqlParser.ATAN2 - 620)) | (1 << (mysqlParser.BENCHMARK - 620)) | (1 << (mysqlParser.BIN - 620)) | (1 << (mysqlParser.BIT_COUNT - 620)) | (1 << (mysqlParser.BIT_LENGTH - 620)) | (1 << (mysqlParser.BUFFER - 620)) | (1 << (mysqlParser.CEIL - 620)) | (1 << (mysqlParser.CEILING - 620)) | (1 << (mysqlParser.CENTROID - 620)) | (1 << (mysqlParser.CHARACTER_LENGTH - 620)) | (1 << (mysqlParser.CHARSET - 620)) | (1 << (mysqlParser.CHAR_LENGTH - 620)) | (1 << (mysqlParser.COERCIBILITY - 620)) | (1 << (mysqlParser.COLLATION - 620)) | (1 << (mysqlParser.COMPRESS - 620)) | (1 << (mysqlParser.CONCAT - 620)) | (1 << (mysqlParser.CONCAT_WS - 620)) | (1 << (mysqlParser.CONNECTION_ID - 620)) | (1 << (mysqlParser.CONV - 620)) | (1 << (mysqlParser.CONVERT_TZ - 620)) | (1 << (mysqlParser.COS - 620)) | (1 << (mysqlParser.COT - 620)) | (1 << (mysqlParser.CRC32 - 620)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 620)) | (1 << (mysqlParser.CREATE_ASYMMETRIC_PUB_KEY - 620)) | (1 << (mysqlParser.CREATE_DH_PARAMETERS - 620)) | (1 << (mysqlParser.CREATE_DIGEST - 620)) | (1 << (mysqlParser.CROSSES - 620)) | (1 << (mysqlParser.DATEDIFF - 620)) | (1 << (mysqlParser.DATE_FORMAT - 620)) | (1 << (mysqlParser.DAYNAME - 620)) | (1 << (mysqlParser.DAYOFMONTH - 620)) | (1 << (mysqlParser.DAYOFWEEK - 620)) | (1 << (mysqlParser.DAYOFYEAR - 620)) | (1 << (mysqlParser.DECODE - 620)) | (1 << (mysqlParser.DEGREES - 620)) | (1 << (mysqlParser.DES_DECRYPT - 620)) | (1 << (mysqlParser.DES_ENCRYPT - 620)) | (1 << (mysqlParser.DIMENSION - 620)))) != 0) or ((((_la - 684)) & ~0x3f) == 0 and ((1 << (_la - 684)) & ((1 << (mysqlParser.DISJOINT - 684)) | (1 << (mysqlParser.ELT - 684)) | (1 << (mysqlParser.ENCODE - 684)) | (1 << (mysqlParser.ENCRYPT - 684)) | (1 << (mysqlParser.ENDPOINT - 684)) | (1 << (mysqlParser.ENVELOPE - 684)) | (1 << (mysqlParser.EQUALS - 684)) | (1 << (mysqlParser.EXP - 684)) | (1 << (mysqlParser.EXPORT_SET - 684)) | (1 << (mysqlParser.EXTERIORRING - 684)) | (1 << (mysqlParser.EXTRACTVALUE - 684)) | (1 << (mysqlParser.FIELD - 684)) | (1 << (mysqlParser.FIND_IN_SET - 684)) | (1 << (mysqlParser.FLOOR - 684)) | (1 << (mysqlParser.FORMAT - 684)) | (1 << (mysqlParser.FOUND_ROWS - 684)) | (1 << (mysqlParser.FROM_BASE64 - 684)) | (1 << (mysqlParser.FROM_DAYS - 684)) | (1 << (mysqlParser.FROM_UNIXTIME - 684)) | (1 << (mysqlParser.GEOMCOLLFROMTEXT - 684)) | (1 << (mysqlParser.GEOMCOLLFROMWKB - 684)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMTEXT - 684)) | (1 << (mysqlParser.GEOMETRYCOLLECTIONFROMWKB - 684)) | (1 << (mysqlParser.GEOMETRYFROMTEXT - 684)) | (1 << (mysqlParser.GEOMETRYFROMWKB - 684)) | (1 << (mysqlParser.GEOMETRYN - 684)) | (1 << (mysqlParser.GEOMETRYTYPE - 684)) | (1 << (mysqlParser.GEOMFROMTEXT - 684)) | (1 << (mysqlParser.GEOMFROMWKB - 684)) | (1 << (mysqlParser.GET_FORMAT - 684)) | (1 << (mysqlParser.GET_LOCK - 684)) | (1 << (mysqlParser.GLENGTH - 684)) | (1 << (mysqlParser.GREATEST - 684)) | (1 << (mysqlParser.GTID_SUBSET - 684)) | (1 << (mysqlParser.GTID_SUBTRACT - 684)) | (1 << (mysqlParser.HEX - 684)) | (1 << (mysqlParser.IFNULL - 684)) | (1 << (mysqlParser.INET6_ATON - 684)) | (1 << (mysqlParser.INET6_NTOA - 684)) | (1 << (mysqlParser.INET_ATON - 684)) | (1 << (mysqlParser.INET_NTOA - 684)) | (1 << (mysqlParser.INSTR - 684)) | (1 << (mysqlParser.INTERIORRINGN - 684)) | (1 << (mysqlParser.INTERSECTS - 684)) | (1 << (mysqlParser.ISCLOSED - 684)) | (1 << (mysqlParser.ISEMPTY - 684)) | (1 << (mysqlParser.ISNULL - 684)) | (1 << (mysqlParser.ISSIMPLE - 684)) | (1 << (mysqlParser.IS_FREE_LOCK - 684)) | (1 << (mysqlParser.IS_IPV4 - 684)) | (1 << (mysqlParser.IS_IPV4_COMPAT - 684)) | (1 << (mysqlParser.IS_IPV4_MAPPED - 684)) | (1 << (mysqlParser.IS_IPV6 - 684)) | (1 << (mysqlParser.IS_USED_LOCK - 684)) | (1 << (mysqlParser.LAST_INSERT_ID - 684)) | (1 << (mysqlParser.LCASE - 684)) | (1 << (mysqlParser.LEAST - 684)) | (1 << (mysqlParser.LENGTH - 684)) | (1 << (mysqlParser.LINEFROMTEXT - 684)) | (1 << (mysqlParser.LINEFROMWKB - 684)) | (1 << (mysqlParser.LINESTRINGFROMTEXT - 684)) | (1 << (mysqlParser.LINESTRINGFROMWKB - 684)) | (1 << (mysqlParser.LN - 684)) | (1 << (mysqlParser.LOAD_FILE - 684)))) != 0) or ((((_la - 748)) & ~0x3f) == 0 and ((1 << (_la - 748)) & ((1 << (mysqlParser.LOCATE - 748)) | (1 << (mysqlParser.LOG - 748)) | (1 << (mysqlParser.LOG10 - 748)) | (1 << (mysqlParser.LOG2 - 748)) | (1 << (mysqlParser.LOWER - 748)) | (1 << (mysqlParser.LPAD - 748)) | (1 << (mysqlParser.LTRIM - 748)) | (1 << (mysqlParser.MAKEDATE - 748)) | (1 << (mysqlParser.MAKETIME - 748)) | (1 << (mysqlParser.MAKE_SET - 748)) | (1 << (mysqlParser.MASTER_POS_WAIT - 748)) | (1 << (mysqlParser.MBRCONTAINS - 748)) | (1 << (mysqlParser.MBRDISJOINT - 748)) | (1 << (mysqlParser.MBREQUAL - 748)) | (1 << (mysqlParser.MBRINTERSECTS - 748)) | (1 << (mysqlParser.MBROVERLAPS - 748)) | (1 << (mysqlParser.MBRTOUCHES - 748)) | (1 << (mysqlParser.MBRWITHIN - 748)) | (1 << (mysqlParser.MD5 - 748)) | (1 << (mysqlParser.MLINEFROMTEXT - 748)) | (1 << (mysqlParser.MLINEFROMWKB - 748)) | (1 << (mysqlParser.MONTHNAME - 748)) | (1 << (mysqlParser.MPOINTFROMTEXT - 748)) | (1 << (mysqlParser.MPOINTFROMWKB - 748)) | (1 << (mysqlParser.MPOLYFROMTEXT - 748)) | (1 << (mysqlParser.MPOLYFROMWKB - 748)) | (1 << (mysqlParser.MULTILINESTRINGFROMTEXT - 748)) | (1 << (mysqlParser.MULTILINESTRINGFROMWKB - 748)) | (1 << (mysqlParser.MULTIPOINTFROMTEXT - 748)) | (1 << (mysqlParser.MULTIPOINTFROMWKB - 748)) | (1 << (mysqlParser.MULTIPOLYGONFROMTEXT - 748)) | (1 << (mysqlParser.MULTIPOLYGONFROMWKB - 748)) | (1 << (mysqlParser.NAME_CONST - 748)) | (1 << (mysqlParser.NULLIF - 748)) | (1 << (mysqlParser.NUMGEOMETRIES - 748)) | (1 << (mysqlParser.NUMINTERIORRINGS - 748)) | (1 << (mysqlParser.NUMPOINTS - 748)) | (1 << (mysqlParser.OCT - 748)) | (1 << (mysqlParser.OCTET_LENGTH - 748)) | (1 << (mysqlParser.ORD - 748)) | (1 << (mysqlParser.OVERLAPS - 748)) | (1 << (mysqlParser.PERIOD_ADD - 748)) | (1 << (mysqlParser.PERIOD_DIFF - 748)) | (1 << (mysqlParser.PI - 748)) | (1 << (mysqlParser.POINTFROMTEXT - 748)) | (1 << (mysqlParser.POINTFROMWKB - 748)) | (1 << (mysqlParser.POINTN - 748)) | (1 << (mysqlParser.POLYFROMTEXT - 748)) | (1 << (mysqlParser.POLYFROMWKB - 748)) | (1 << (mysqlParser.POLYGONFROMTEXT - 748)) | (1 << (mysqlParser.POLYGONFROMWKB - 748)) | (1 << (mysqlParser.POW - 748)) | (1 << (mysqlParser.POWER - 748)) | (1 << (mysqlParser.QUOTE - 748)) | (1 << (mysqlParser.RADIANS - 748)) | (1 << (mysqlParser.RAND - 748)) | (1 << (mysqlParser.RANDOM_BYTES - 748)) | (1 << (mysqlParser.RELEASE_LOCK - 748)) | (1 << (mysqlParser.REVERSE - 748)) | (1 << (mysqlParser.ROUND - 748)) | (1 << (mysqlParser.ROW_COUNT - 748)) | (1 << (mysqlParser.RPAD - 748)) | (1 << (mysqlParser.RTRIM - 748)) | (1 << (mysqlParser.SEC_TO_TIME - 748)))) != 0) or ((((_la - 812)) & ~0x3f) == 0 and ((1 << (_la - 812)) & ((1 << (mysqlParser.SESSION_USER - 812)) | (1 << (mysqlParser.SHA - 812)) | (1 << (mysqlParser.SHA1 - 812)) | (1 << (mysqlParser.SHA2 - 812)) | (1 << (mysqlParser.SIGN - 812)) | (1 << (mysqlParser.SIN - 812)) | (1 << (mysqlParser.SLEEP - 812)) | (1 << (mysqlParser.SOUNDEX - 812)) | (1 << (mysqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 812)) | (1 << (mysqlParser.SQRT - 812)) | (1 << (mysqlParser.SRID - 812)) | (1 << (mysqlParser.STARTPOINT - 812)) | (1 << (mysqlParser.STRCMP - 812)) | (1 << (mysqlParser.STR_TO_DATE - 812)) | (1 << (mysqlParser.ST_AREA - 812)) | (1 << (mysqlParser.ST_ASBINARY - 812)) | (1 << (mysqlParser.ST_ASTEXT - 812)) | (1 << (mysqlParser.ST_ASWKB - 812)) | (1 << (mysqlParser.ST_ASWKT - 812)) | (1 << (mysqlParser.ST_BUFFER - 812)) | (1 << (mysqlParser.ST_CENTROID - 812)) | (1 << (mysqlParser.ST_CONTAINS - 812)) | (1 << (mysqlParser.ST_CROSSES - 812)) | (1 << (mysqlParser.ST_DIFFERENCE - 812)) | (1 << (mysqlParser.ST_DIMENSION - 812)) | (1 << (mysqlParser.ST_DISJOINT - 812)) | (1 << (mysqlParser.ST_DISTANCE - 812)) | (1 << (mysqlParser.ST_ENDPOINT - 812)) | (1 << (mysqlParser.ST_ENVELOPE - 812)) | (1 << (mysqlParser.ST_EQUALS - 812)) | (1 << (mysqlParser.ST_EXTERIORRING - 812)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMCOLLFROMTXT - 812)) | (1 << (mysqlParser.ST_GEOMCOLLFROMWKB - 812)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 812)) | (1 << (mysqlParser.ST_GEOMETRYFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMETRYFROMWKB - 812)) | (1 << (mysqlParser.ST_GEOMETRYN - 812)) | (1 << (mysqlParser.ST_GEOMETRYTYPE - 812)) | (1 << (mysqlParser.ST_GEOMFROMTEXT - 812)) | (1 << (mysqlParser.ST_GEOMFROMWKB - 812)) | (1 << (mysqlParser.ST_INTERIORRINGN - 812)) | (1 << (mysqlParser.ST_INTERSECTION - 812)) | (1 << (mysqlParser.ST_INTERSECTS - 812)) | (1 << (mysqlParser.ST_ISCLOSED - 812)) | (1 << (mysqlParser.ST_ISEMPTY - 812)) | (1 << (mysqlParser.ST_ISSIMPLE - 812)) | (1 << (mysqlParser.ST_LINEFROMTEXT - 812)) | (1 << (mysqlParser.ST_LINEFROMWKB - 812)) | (1 << (mysqlParser.ST_LINESTRINGFROMTEXT - 812)) | (1 << (mysqlParser.ST_LINESTRINGFROMWKB - 812)) | (1 << (mysqlParser.ST_NUMGEOMETRIES - 812)) | (1 << (mysqlParser.ST_NUMINTERIORRING - 812)) | (1 << (mysqlParser.ST_NUMINTERIORRINGS - 812)) | (1 << (mysqlParser.ST_NUMPOINTS - 812)) | (1 << (mysqlParser.ST_OVERLAPS - 812)) | (1 << (mysqlParser.ST_POINTFROMTEXT - 812)) | (1 << (mysqlParser.ST_POINTFROMWKB - 812)) | (1 << (mysqlParser.ST_POINTN - 812)) | (1 << (mysqlParser.ST_POLYFROMTEXT - 812)) | (1 << (mysqlParser.ST_POLYFROMWKB - 812)) | (1 << (mysqlParser.ST_POLYGONFROMTEXT - 812)) | (1 << (mysqlParser.ST_POLYGONFROMWKB - 812)))) != 0) or ((((_la - 876)) & ~0x3f) == 0 and ((1 << (_la - 876)) & ((1 << (mysqlParser.ST_SRID - 876)) | (1 << (mysqlParser.ST_STARTPOINT - 876)) | (1 << (mysqlParser.ST_SYMDIFFERENCE - 876)) | (1 << (mysqlParser.ST_TOUCHES - 876)) | (1 << (mysqlParser.ST_UNION - 876)) | (1 << (mysqlParser.ST_WITHIN - 876)) | (1 << (mysqlParser.ST_X - 876)) | (1 << (mysqlParser.ST_Y - 876)) | (1 << (mysqlParser.SUBDATE - 876)) | (1 << (mysqlParser.SUBSTRING_INDEX - 876)) | (1 << (mysqlParser.SUBTIME - 876)) | (1 << (mysqlParser.SYSTEM_USER - 876)) | (1 << (mysqlParser.TAN - 876)) | (1 << (mysqlParser.TIMEDIFF - 876)) | (1 << (mysqlParser.TIMESTAMPADD - 876)) | (1 << (mysqlParser.TIMESTAMPDIFF - 876)) | (1 << (mysqlParser.TIME_FORMAT - 876)) | (1 << (mysqlParser.TIME_TO_SEC - 876)) | (1 << (mysqlParser.TOUCHES - 876)) | (1 << (mysqlParser.TO_BASE64 - 876)) | (1 << (mysqlParser.TO_DAYS - 876)) | (1 << (mysqlParser.TO_SECONDS - 876)) | (1 << (mysqlParser.UCASE - 876)) | (1 << (mysqlParser.UNCOMPRESS - 876)) | (1 << (mysqlParser.UNCOMPRESSED_LENGTH - 876)) | (1 << (mysqlParser.UNHEX - 876)) | (1 << (mysqlParser.UNIX_TIMESTAMP - 876)) | (1 << (mysqlParser.UPDATEXML - 876)) | (1 << (mysqlParser.UPPER - 876)) | (1 << (mysqlParser.UUID - 876)) | (1 << (mysqlParser.UUID_SHORT - 876)) | (1 << (mysqlParser.VALIDATE_PASSWORD_STRENGTH - 876)) | (1 << (mysqlParser.VERSION - 876)) | (1 << (mysqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 876)) | (1 << (mysqlParser.WEEKDAY - 876)) | (1 << (mysqlParser.WEEKOFYEAR - 876)) | (1 << (mysqlParser.WEIGHT_STRING - 876)) | (1 << (mysqlParser.WITHIN - 876)) | (1 << (mysqlParser.YEARWEEK - 876)) | (1 << (mysqlParser.Y_FUNCTION - 876)) | (1 << (mysqlParser.X_FUNCTION - 876)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[281] = self.expression_sempred
        self._predicates[282] = self.predicate_sempred
        self._predicates[283] = self.expressionAtom_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

    def predicate_sempred(self, localctx:PredicateContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 3)
         

    def expressionAtom_sempred(self, localctx:ExpressionAtomContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 1)
         




